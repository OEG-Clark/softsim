{"home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.__init__": [[73, 107], ["tokenization_utils.PreTrainedTokenizer.__init__", "collections.Counter", "torch.load", "torch.load.items", "tokenization_transfo_xl.TransfoXLTokenizer.build_vocab"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab"], ["def", "__init__", "(", "self", ",", "special", "=", "None", ",", "min_freq", "=", "0", ",", "max_size", "=", "None", ",", "lower_case", "=", "False", ",", "\n", "delimiter", "=", "None", ",", "vocab_file", "=", "None", ",", "pretrained_vocab_file", "=", "None", ",", "\n", "never_split", "=", "None", ",", "unk_token", "=", "\"<unk>\"", ",", "eos_token", "=", "\"<eos>\"", ",", "\n", "additional_special_tokens", "=", "[", "\"<formula>\"", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TransfoXLTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "eos_token", "=", "eos_token", ",", "\n", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "if", "never_split", "is", "None", ":", "\n", "            ", "never_split", "=", "self", ".", "all_special_tokens", "\n", "", "if", "special", "is", "None", ":", "\n", "            ", "special", "=", "[", "]", "\n", "", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "self", ".", "special", "=", "special", "\n", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "lower_case", "=", "lower_case", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "never_split", "=", "never_split", "\n", "\n", "if", "pretrained_vocab_file", "is", "not", "None", ":", "\n", "# Hack because, honestly this tokenizer was not made to be used", "\n", "# in a library like ours, at all.", "\n", "            ", "vocab_dict", "=", "torch", ".", "load", "(", "pretrained_vocab_file", ")", "\n", "for", "key", ",", "value", "in", "vocab_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "self", ".", "__dict__", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n", "", "", "", "if", "vocab_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "build_vocab", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file": [[108, 122], ["os.path.exists", "logger.info", "io.open", "enumerate", "tokenization_transfo_xl.TransfoXLTokenizer.tokenize", "tokenization_transfo_xl.TransfoXLTokenizer.counter.update", "sents.append", "logger.info"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "", "def", "count_file", "(", "self", ",", "path", ",", "verbose", "=", "False", ",", "add_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'counting file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n", "sents", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ")", "\n", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "sents", ".", "append", "(", "symbols", ")", "\n", "\n", "", "", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_sents": [[123, 132], ["enumerate", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.counter.update", "logger.info", "len"], "methods", ["None"], ["", "def", "count_sents", "(", "self", ",", "sents", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            sents : a list of sentences, each a list of tokenized symbols\n        \"\"\"", "\n", "if", "verbose", ":", "logger", ".", "info", "(", "'counting {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file": [[133, 147], ["collections.OrderedDict", "io.open", "tokenization_transfo_xl.TransfoXLTokenizer.add_symbol", "ValueError", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol"], ["", "", "def", "_build_from_file", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "symb", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "self", ".", "add_symbol", "(", "symb", ")", "\n", "", "", "if", "'<UNK>'", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "", "elif", "'<unk>'", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<unk>'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'No <unkown> token in vocabulary'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.save_vocabulary": [[148, 154], ["os.path.isdir", "torch.save", "os.path.join"], "methods", ["None"], ["", "", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_FILES_NAMES", "[", "'pretrained_vocab_file'", "]", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "__dict__", ",", "vocab_file", ")", "\n", "return", "(", "vocab_file", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab": [[155, 175], ["logger.info", "tokenization_transfo_xl.TransfoXLTokenizer._build_from_file", "logger.info", "logger.info", "collections.OrderedDict", "tokenization_transfo_xl.TransfoXLTokenizer.counter.most_common", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.add_special", "tokenization_transfo_xl.TransfoXLTokenizer.add_symbol", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_special", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol"], ["", "def", "build_vocab", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vocab_file", ":", "\n", "            ", "logger", ".", "info", "(", "'building vocab from {}'", ".", "format", "(", "self", ".", "vocab_file", ")", ")", "\n", "self", ".", "_build_from_file", "(", "self", ".", "vocab_file", ")", "\n", "logger", ".", "info", "(", "'final vocab size {}'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'building vocab with min_freq={}, max_size={}'", ".", "format", "(", "\n", "self", ".", "min_freq", ",", "self", ".", "max_size", ")", ")", "\n", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "sym", "in", "self", ".", "special", ":", "\n", "                ", "self", ".", "add_special", "(", "sym", ")", "\n", "\n", "", "for", "sym", ",", "cnt", "in", "self", ".", "counter", ".", "most_common", "(", "self", ".", "max_size", ")", ":", "\n", "                ", "if", "cnt", "<", "self", ".", "min_freq", ":", "break", "\n", "self", ".", "add_symbol", "(", "sym", ")", "\n", "\n", "", "logger", ".", "info", "(", "'final vocab size {} from {} unique tokens'", ".", "format", "(", "\n", "len", "(", "self", ")", ",", "len", "(", "self", ".", "counter", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file": [[176, 193], ["os.path.exists", "logger.info", "io.open", "enumerate", "torch.cat", "tokenization_transfo_xl.TransfoXLTokenizer.tokenize", "torch.cat.append", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], ["", "", "def", "encode_file", "(", "self", ",", "path", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ",", "add_eos", "=", "True", ",", "\n", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'encoding file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "encoded", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ",", "\n", "add_double_eos", "=", "add_double_eos", ")", "\n", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_sents": [[194, 206], ["enumerate", "logger.info", "torch.cat.append", "torch.cat", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], ["", "def", "encode_sents", "(", "self", ",", "sents", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'encoding {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "encoded", "=", "[", "]", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_special": [[207, 212], ["tokenization_transfo_xl.TransfoXLTokenizer.idx2sym.append", "setattr", "len", "sym.strip"], "methods", ["None"], ["", "def", "add_special", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "setattr", "(", "self", ",", "'{}_idx'", ".", "format", "(", "sym", ".", "strip", "(", "'<>'", ")", ")", ",", "self", ".", "sym2idx", "[", "sym", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol": [[213, 217], ["tokenization_transfo_xl.TransfoXLTokenizer.idx2sym.append", "len"], "methods", ["None"], ["", "", "def", "add_symbol", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer._convert_id_to_token": [[218, 222], ["len"], "methods", ["None"], ["", "", "def", "_convert_id_to_token", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Converts an id in a token (BPE) using the vocab.\"\"\"", "\n", "assert", "0", "<=", "idx", "<", "len", "(", "self", ")", ",", "'Index {} out of vocabulary range'", ".", "format", "(", "idx", ")", "\n", "return", "self", ".", "idx2sym", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer._convert_token_to_id": [[223, 239], ["hasattr", "tokenization_transfo_xl.TransfoXLTokenizer.sym2idx.get", "ValueError"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "sym", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "if", "sym", "in", "self", ".", "sym2idx", ":", "\n", "            ", "return", "self", ".", "sym2idx", "[", "sym", "]", "\n", "", "else", ":", "\n", "# logger.info('encounter unk {}'.format(sym))", "\n", "# assert '<eos>' not in sym", "\n", "            ", "if", "hasattr", "(", "self", ",", "'unk_idx'", ")", ":", "\n", "                ", "return", "self", ".", "sym2idx", ".", "get", "(", "sym", ",", "self", ".", "unk_idx", ")", "\n", "# Backward compatibility with pre-trained models", "\n", "", "elif", "'<unk>'", "in", "self", ".", "sym2idx", ":", "\n", "                ", "return", "self", ".", "sym2idx", "[", "'<unk>'", "]", "\n", "", "elif", "'<UNK>'", "in", "self", ".", "sym2idx", ":", "\n", "                ", "return", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Token not in vocabulary and no <unk> token in vocabulary for replacement'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_string": [[240, 244], ["None"], "methods", ["None"], ["", "", "", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor": [[245, 247], ["torch.LongTensor", "tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "convert_to_tensor", "(", "self", ",", "symbols", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "self", ".", "convert_tokens_to_ids", "(", "symbols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.vocab_size": [[248, 251], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2sym", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer._tokenize": [[252, 270], ["line.lower.lower.strip", "line.lower.lower.lower", "line.lower.lower.split"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "line", ",", "add_eos", "=", "False", ",", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# convert to lower case", "\n", "if", "self", ".", "lower_case", ":", "\n", "            ", "line", "=", "line", ".", "lower", "(", ")", "\n", "\n", "# empty delimiter '' will evaluate False", "\n", "", "if", "self", ".", "delimiter", "==", "''", ":", "\n", "            ", "symbols", "=", "line", "\n", "", "else", ":", "\n", "            ", "symbols", "=", "line", ".", "split", "(", "self", ".", "delimiter", ")", "\n", "\n", "", "if", "add_double_eos", ":", "# lm1b", "\n", "            ", "return", "[", "'<S>'", "]", "+", "symbols", "+", "[", "'<S>'", "]", "\n", "", "elif", "add_eos", ":", "\n", "            ", "return", "symbols", "+", "[", "'<eos>'", "]", "\n", "", "else", ":", "\n", "            ", "return", "symbols", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.__init__": [[273, 294], ["data.narrow.narrow.narrow", "data.narrow.narrow.view().t().contiguous().to", "data.narrow.narrow.size", "data.narrow.narrow.view().t().contiguous", "data.narrow.narrow.view().t", "data.narrow.narrow.view"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            data -- LongTensor -- the LongTensor is strictly ordered\n        \"\"\"", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "self", ".", "n_step", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "n_step", "*", "bsz", ")", "\n", "\n", "# Evenly divide the data across the bsz batches.", "\n", "self", ".", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Number of mini-batches", "\n", "self", ".", "n_batch", "=", "(", "self", ".", "n_step", "+", "self", ".", "bptt", "-", "1", ")", "//", "self", ".", "bptt", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch": [[295, 309], ["min", "max", "data.transpose().contiguous().to", "target.transpose().contiguous().to", "data.transpose().contiguous", "target.transpose().contiguous", "tokenization_transfo_xl.LMOrderedIterator.data.size", "data.transpose", "target.transpose"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "i", ",", "bptt", "=", "None", ")", ":", "\n", "        ", "if", "bptt", "is", "None", ":", "bptt", "=", "self", ".", "bptt", "\n", "seq_len", "=", "min", "(", "bptt", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", "-", "i", ")", "\n", "\n", "end_idx", "=", "i", "+", "seq_len", "\n", "beg_idx", "=", "max", "(", "0", ",", "i", "-", "self", ".", "ext_len", ")", "\n", "\n", "data", "=", "self", ".", "data", "[", "beg_idx", ":", "end_idx", "]", "\n", "target", "=", "self", ".", "data", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", "\n", "\n", "data_out", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "data_out", ",", "target_out", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter": [[310, 313], ["range", "tokenization_transfo_xl.LMOrderedIterator.data.size", "tokenization_transfo_xl.LMOrderedIterator.get_batch"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch"], ["", "def", "get_fixlen_iter", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "start", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", ",", "self", ".", "bptt", ")", ":", "\n", "            ", "yield", "self", ".", "get_batch", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.get_varlen_iter": [[314, 325], ["min", "tokenization_transfo_xl.LMOrderedIterator.get_batch", "max", "numpy.random.random", "int", "tokenization_transfo_xl.LMOrderedIterator.data.size", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch"], ["", "", "def", "get_varlen_iter", "(", "self", ",", "start", "=", "0", ",", "std", "=", "5", ",", "min_len", "=", "5", ",", "max_deviation", "=", "3", ")", ":", "\n", "        ", "max_len", "=", "self", ".", "bptt", "+", "max_deviation", "*", "std", "\n", "i", "=", "start", "\n", "while", "True", ":", "\n", "            ", "bptt", "=", "self", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "self", ".", "bptt", "/", "2.", "\n", "bptt", "=", "min", "(", "max_len", ",", "max", "(", "min_len", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "std", ")", ")", ")", ")", "\n", "data", ",", "target", ",", "seq_len", "=", "self", ".", "get_batch", "(", "i", ",", "bptt", ")", "\n", "i", "+=", "seq_len", "\n", "yield", "data", ",", "target", ",", "seq_len", "\n", "if", "i", ">=", "self", ".", "data", ".", "size", "(", "0", ")", "-", "2", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.__iter__": [[326, 328], ["tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_fixlen_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMShuffledIterator.__init__": [[331, 343], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            data -- list[LongTensor] -- there is no order among the LongTensors\n        \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMShuffledIterator.get_sent_stream": [[344, 352], ["numpy.random.permutation", "numpy.array", "len", "range", "len"], "methods", ["None"], ["", "def", "get_sent_stream", "(", "self", ")", ":", "\n", "# index iterator", "\n", "        ", "epoch_indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "data", ")", ")", "if", "self", ".", "shuffle", "else", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "# sentence iterator", "\n", "for", "idx", "in", "epoch_indices", ":", "\n", "            ", "yield", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator": [[353, 401], ["torch.LongTensor", "torch.LongTensor", "data[].fill_", "torch.LongTensor.fill_", "range", "torch.LongTensor.transpose().contiguous().to", "torch.LongTensor.transpose().contiguous().to", "min", "torch.LongTensor.resize_", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.transpose().contiguous", "torch.LongTensor.transpose().contiguous", "min", "next", "torch.LongTensor.transpose", "torch.LongTensor.transpose", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "stream_iterator", "(", "self", ",", "sent_stream", ")", ":", "\n", "# streams for each data in the batch", "\n", "        ", "streams", "=", "[", "None", "]", "*", "self", ".", "bsz", "\n", "\n", "data", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "\n", "n_retain", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# data   : [n_retain+bptt x bsz]", "\n", "# target : [bptt x bsz]", "\n", "            ", "data", "[", "n_retain", ":", "]", ".", "fill_", "(", "-", "1", ")", "\n", "target", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "valid_batch", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "bsz", ")", ":", "\n", "                ", "n_filled", "=", "0", "\n", "try", ":", "\n", "                    ", "while", "n_filled", "<", "self", ".", "bptt", ":", "\n", "                        ", "if", "streams", "[", "i", "]", "is", "None", "or", "len", "(", "streams", "[", "i", "]", ")", "<=", "1", ":", "\n", "                            ", "streams", "[", "i", "]", "=", "next", "(", "sent_stream", ")", "\n", "# number of new tokens to fill in", "\n", "", "n_new", "=", "min", "(", "len", "(", "streams", "[", "i", "]", ")", "-", "1", ",", "self", ".", "bptt", "-", "n_filled", ")", "\n", "# first n_retain tokens are retained from last batch", "\n", "data", "[", "n_retain", "+", "n_filled", ":", "n_retain", "+", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", ":", "n_new", "]", "\n", "target", "[", "n_filled", ":", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", "1", ":", "n_new", "+", "1", "]", "\n", "streams", "[", "i", "]", "=", "streams", "[", "i", "]", "[", "n_new", ":", "]", "\n", "n_filled", "+=", "n_new", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "valid_batch", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "not", "valid_batch", ":", "\n", "                ", "return", "\n", "\n", "", "data_out", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "yield", "data_out", ",", "target_out", ",", "self", ".", "bptt", "\n", "\n", "n_retain", "=", "min", "(", "data", ".", "size", "(", "0", ")", ",", "self", ".", "ext_len", ")", "\n", "if", "n_retain", ">", "0", ":", "\n", "                ", "data", "[", ":", "n_retain", "]", "=", "data", "[", "-", "n_retain", ":", "]", "\n", "", "data", ".", "resize_", "(", "n_retain", "+", "self", ".", "bptt", ",", "data", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMShuffledIterator.__iter__": [[402, 408], ["tokenization_transfo_xl.LMShuffledIterator.get_sent_stream", "tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# sent_stream is an iterator", "\n", "        ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", ")", "\n", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMMultiFileIterator.__init__": [[411, 423], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "vocab", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "\n", "shuffle", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream": [[424, 431], ["tokenization_transfo_xl.LMMultiFileIterator.vocab.encode_file", "iter", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "def", "get_sent_stream", "(", "self", ",", "path", ")", ":", "\n", "        ", "sents", "=", "self", ".", "vocab", ".", "encode_file", "(", "path", ",", "add_double_eos", "=", "True", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "sents", ")", "\n", "", "sent_stream", "=", "iter", "(", "sents", ")", "\n", "\n", "return", "sent_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMMultiFileIterator.__iter__": [[432, 441], ["numpy.random.shuffle", "tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "tokenization_transfo_xl.LMMultiFileIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "paths", ")", "\n", "\n", "", "for", "path", "in", "self", ".", "paths", ":", "\n", "# sent_stream is an iterator", "\n", "            ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", "path", ")", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLCorpus.from_pretrained": [[444, 486], ["TransfoXLTokenizer.from_pretrained", "cls", "torch.load", "torch.load.items", "os.path.join", "file_utils.cached_path", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "logger.error", "PRETRAINED_CORPUS_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path"], ["    ", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a pre-processed corpus.\n        \"\"\"", "\n", "vocab", "=", "TransfoXLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "pretrained_model_name_or_path", "in", "PRETRAINED_CORPUS_ARCHIVE_MAP", ":", "\n", "            ", "corpus_file", "=", "PRETRAINED_CORPUS_ARCHIVE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "", "else", ":", "\n", "            ", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CORPUS_NAME", ")", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_corpus_file", "=", "cached_path", "(", "corpus_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Corpus '{}' was not found in corpus list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find files {} \"", "\n", "\"at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_CORPUS_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "corpus_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_corpus_file", "==", "corpus_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading corpus file {}\"", ".", "format", "(", "corpus_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading corpus file {} from cache at {}\"", ".", "format", "(", "\n", "corpus_file", ",", "resolved_corpus_file", ")", ")", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "corpus", "=", "cls", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "corpus_dict", "=", "torch", ".", "load", "(", "resolved_corpus_file", ")", "\n", "for", "key", ",", "value", "in", "corpus_dict", ".", "items", "(", ")", ":", "\n", "            ", "corpus", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "corpus", ".", "vocab", "=", "vocab", "\n", "if", "corpus", ".", "train", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "train", "=", "torch", ".", "tensor", "(", "corpus", ".", "train", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "corpus", ".", "valid", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "valid", "=", "torch", ".", "tensor", "(", "corpus", ".", "valid", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "corpus", ".", "test", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "test", "=", "torch", ".", "tensor", "(", "corpus", ".", "test", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLCorpus.__init__": [[487, 493], ["tokenization_transfo_xl.TransfoXLTokenizer"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "TransfoXLTokenizer", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "valid", "=", "None", "\n", "self", ".", "test", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLCorpus.build_corpus": [[494, 532], ["tokenization_transfo_xl.TransfoXLCorpus.vocab.build_vocab", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file"], ["", "def", "build_corpus", "(", "self", ",", "path", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'wt103'", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "train_path_pattern", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'1-billion-word-language-modeling-benchmark-r13output'", ",", "\n", "'training-monolingual.tokenized.shuffled'", ",", "'news.en-*'", ")", "\n", "train_paths", "=", "glob", ".", "glob", "(", "train_path_pattern", ")", "\n", "# the vocab will load from file when build_vocab() is called", "\n", "\n", "", "self", ".", "vocab", ".", "build_vocab", "(", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "", "elif", "self", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "self", ".", "train", "=", "train_paths", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLCorpus.get_iterator": [[533, 548], ["tokenization_transfo_xl.LMOrderedIterator", "tokenization_transfo_xl.LMMultiFileIterator", "tokenization_transfo_xl.LMOrderedIterator", "tokenization_transfo_xl.LMShuffledIterator"], "methods", ["None"], ["", "", "def", "get_iterator", "(", "self", ",", "split", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "self", ".", "train", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "kwargs", "[", "'shuffle'", "]", "=", "True", "\n", "data_iter", "=", "LMMultiFileIterator", "(", "self", ".", "train", ",", "self", ".", "vocab", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "elif", "split", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "data", "=", "self", ".", "valid", "if", "split", "==", "'valid'", "else", "self", ".", "test", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "data_iter", "=", "LMShuffledIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "data_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.get_lm_corpus": [[550, 580], ["os.path.join", "os.path.join", "os.path.exists", "logger.info", "torch.load", "os.path.exists", "logger.info", "logger.info", "tokenization_transfo_xl.TransfoXLCorpus", "torch.save", "io.open", "pickle.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "", "def", "get_lm_corpus", "(", "datadir", ",", "dataset", ")", ":", "\n", "    ", "fn", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pt'", ")", "\n", "fn_pickle", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading cached dataset...'", ")", "\n", "corpus", "=", "torch", ".", "load", "(", "fn_pickle", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading cached dataset from pickle...'", ")", "\n", "with", "open", "(", "fn", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "corpus", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Producing dataset {}...'", ".", "format", "(", "dataset", ")", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "dataset", "in", "[", "'wt103'", ",", "'wt2'", "]", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "", "elif", "dataset", "==", "'ptb'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "", "elif", "dataset", "==", "'lm1b'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "kwargs", "[", "'vocab_file'", "]", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'1b_word_vocab.txt'", ")", "\n", "", "elif", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "corpus", "=", "TransfoXLCorpus", "(", "datadir", ",", "dataset", ",", "**", "kwargs", ")", "\n", "torch", ".", "save", "(", "corpus", ",", "fn", ")", "\n", "\n", "", "return", "corpus", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_gpt2.GPT2Config.__init__": [[57, 128], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "50257", ",", "\n", "n_positions", "=", "1024", ",", "\n", "n_ctx", "=", "1024", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "\n", "num_labels", "=", "1", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs GPT2Config.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `GPT2Model` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "GPT2Config", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_gpt2.GPT2Config.max_position_embeddings": [[131, 134], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_gpt2.GPT2Config.hidden_size": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_gpt2.GPT2Config.num_attention_heads": [[139, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_gpt2.GPT2Config.num_hidden_layers": [[143, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModel.__init__": [[60, 62], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModel is designed to be instantiated \"", "\n", "\"using the `TFAutoModel.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModel.from_pretrained": [[64, 158], ["ValueError", "modeling_tf_distilbert.TFDistilBertModel.from_pretrained", "modeling_tf_roberta.TFRobertaModel.from_pretrained", "modeling_tf_bert.TFBertModel.from_pretrained", "modeling_tf_openai.TFOpenAIGPTModel.from_pretrained", "modeling_tf_gpt2.TFGPT2Model.from_pretrained", "modeling_tf_transfo_xl.TFTransfoXLModel.from_pretrained", "modeling_tf_xlnet.TFXLNetModel.from_pretrained", "modeling_tf_xlm.TFXLMModel.from_pretrained", "modeling_tf_ctrl.TFCTRLModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the base model classes of the library\n        from a pre-trained model configuration.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: TFDistilBertModel (DistilBERT model)\n            - contains `roberta`: TFRobertaModel (RoBERTa model)\n            - contains `bert`: TFTFBertModel (Bert model)\n            - contains `openai-gpt`: TFOpenAIGPTModel (OpenAI GPT model)\n            - contains `gpt2`: TFGPT2Model (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TFTransfoXLModel (Transformer-XL model)\n            - contains `xlnet`: TFXLNetModel (XLNet model)\n            - contains `ctrl`: TFCTRLModel (CTRL model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModel.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModel.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFRobertaModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFOpenAIGPTModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFGPT2Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFTransfoXLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFCTRLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModelWithLMHead.__init__": [[184, 186], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `TFAutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModelWithLMHead.from_pretrained": [[188, 286], ["ValueError", "modeling_tf_distilbert.TFDistilBertForMaskedLM.from_pretrained", "modeling_tf_roberta.TFRobertaForMaskedLM.from_pretrained", "modeling_tf_bert.TFBertForMaskedLM.from_pretrained", "modeling_tf_openai.TFOpenAIGPTLMHeadModel.from_pretrained", "modeling_tf_gpt2.TFGPT2LMHeadModel.from_pretrained", "modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.from_pretrained", "modeling_tf_xlnet.TFXLNetLMHeadModel.from_pretrained", "modeling_tf_xlm.TFXLMWithLMHeadModel.from_pretrained", "modeling_tf_ctrl.TFCTRLLMHeadModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the language modeling model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: TFDistilBertForMaskedLM (DistilBERT model)\n            - contains `roberta`: TFRobertaForMaskedLM (RoBERTa model)\n            - contains `bert`: TFBertForMaskedLM (Bert model)\n            - contains `openai-gpt`: TFOpenAIGPTLMHeadModel (OpenAI GPT model)\n            - contains `gpt2`: TFGPT2LMHeadModel (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TFTransfoXLLMHeadModel (Transformer-XL model)\n            - contains `xlnet`: TFXLNetLMHeadModel (XLNet model)\n            - contains `xlm`: TFXLMWithLMHeadModel (XLM model)\n            - contains `ctrl`: TFCTRLLMHeadModel (CTRL model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModelWithLMHead.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModelWithLMHead.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModelWithLMHead.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModelWithLMHead.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFRobertaForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFOpenAIGPTLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFGPT2LMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFTransfoXLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMWithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFCTRLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModelForSequenceClassification.__init__": [[308, 310], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `TFAutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModelForSequenceClassification.from_pretrained": [[312, 400], ["ValueError", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.from_pretrained", "modeling_tf_roberta.TFRobertaForSequenceClassification.from_pretrained", "modeling_tf_bert.TFBertForSequenceClassification.from_pretrained", "modeling_tf_xlnet.TFXLNetForSequenceClassification.from_pretrained", "modeling_tf_xlm.TFXLMForSequenceClassification.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the sequence classification model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: TFDistilBertForSequenceClassification (DistilBERT model)\n            - contains `roberta`: TFRobertaForSequenceClassification (RoBERTa model)\n            - contains `bert`: TFBertForSequenceClassification (Bert model)\n            - contains `xlnet`: TFXLNetForSequenceClassification (XLNet model)\n            - contains `xlm`: TFXLMForSequenceClassification (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModelForSequenceClassification.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModelForSequenceClassification.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModelForSequenceClassification.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModelForSequenceClassification.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFRobertaForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModelForQuestionAnswering.__init__": [[421, 423], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `TFAutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_auto.TFAutoModelForQuestionAnswering.from_pretrained": [[425, 510], ["ValueError", "modeling_tf_distilbert.TFDistilBertForQuestionAnswering.from_pretrained", "modeling_tf_bert.TFBertForQuestionAnswering.from_pretrained", "modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.from_pretrained", "modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the question answering model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: TFDistilBertForQuestionAnswering (DistilBERT model)\n            - contains `bert`: TFBertForQuestionAnswering (Bert model)\n            - contains `xlnet`: TFXLNetForQuestionAnswering (XLNet model)\n            - contains `xlm`: TFXLMForQuestionAnswering (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModelForQuestionAnswering.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModelForQuestionAnswering.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModelForQuestionAnswering.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModelForQuestionAnswering.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetForQuestionAnsweringSimple", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMForQuestionAnsweringSimple", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.__init__": [[56, 67], ["super().__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.get_input_embeddings": [[68, 76], ["getattr", "getattr.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "return", "base_model", ".", "get_input_embeddings", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.get_output_embeddings": [[77, 82], ["None"], "methods", ["None"], ["", "", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's output embeddings\n            Return None if the model doesn't have output embeddings\n        \"\"\"", "\n", "return", "None", "# Overwrite for models with output embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel._get_resized_embeddings": [[83, 97], ["None"], "methods", ["None"], ["", "def", "_get_resized_embeddings", "(", "self", ",", "old_embeddings", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Build a resized Embedding Variable from a provided token Embedding Module.\n            Increasing the size will add newly initialized vectors at the end\n            Reducing the size will remove vectors from the end\n\n        Args:\n            new_num_tokens: (`optional`) int\n                New number of tokens in the embedding matrix.\n                Increasing the size will add newly initialized vectors at the end\n                Reducing the size will remove vectors from the end\n                If not provided or None: return the provided token Embedding Module.\n        Return: ``tf.Variable``\n            Pointer to the resized Embedding Module or the old Embedding Module if new_num_tokens is None\n        \"\"\"", "\n", "# if new_num_tokens is None:", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.resize_token_embeddings": [[117, 131], ["None"], "methods", ["None"], ["", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Resize input token embeddings matrix of the model if new_num_tokens != config.vocab_size.\n        Take care of tying weights embeddings afterwards if the model class has a `tie_weights()` method.\n\n        Arguments:\n\n            new_num_tokens: (`optional`) int:\n                New number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end. \n                If not provided or None: does nothing and just returns a pointer to the input tokens ``tf.Variable`` Module of the model.\n\n        Return: ``tf.Variable``\n            Pointer to the input tokens Embeddings Module of the model\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.prune_heads": [[132, 140], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.save_pretrained": [[141, 154], ["os.path.isdir", "modeling_tf_utils.TFPreTrainedModel.config.save_pretrained", "os.path.join", "modeling_tf_utils.TFPreTrainedModel.save_weights", "logger.info"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Save configuration file", "\n", "self", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "TF2_WEIGHTS_NAME", ")", "\n", "self", ".", "save_weights", "(", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFPreTrainedModel.from_pretrained": [[155, 294], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls", "cls.", "os.path.isfile", "cls.load_weights", "cls.", "cls.config_class.from_pretrained", "modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model", "os.path.isdir", "file_utils.cached_path", "logger.info", "logger.info", "os.path.isfile", "os.path.isfile", "os.path.join", "os.path.join", "EnvironmentError", "logger.error", "logger.error", "os.path.isfile", "os.path.join", "EnvironmentError", "os.path.join", "cls.pretrained_model_archive_map.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained TF 2.0 model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch state_dict save file` (e.g. `./pt_model/pytorch_model.bin`). In this case, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the PyTorch checkpoint in a TensorFlow model using the provided conversion scripts and loading the TensorFlow model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            from_pt: (`optional`) boolean, default False:\n                Load the model weights from a PyTorch state_dict save file (see docstring of pretrained_model_name_or_path argument).\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_pt=True, config=config)\n\n        \"\"\"", "\n", "config", "=", "kwargs", ".", "pop", "(", "'config'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_pt", "=", "kwargs", ".", "pop", "(", "'from_pt'", ",", "False", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "\n", "# Load config", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", ",", "model_kwargs", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "\n", "cache_dir", "=", "cache_dir", ",", "return_unused_kwargs", "=", "True", ",", "\n", "force_download", "=", "force_download", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Load model", "\n", "", "if", "pretrained_model_name_or_path", "is", "not", "None", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a TF 2.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", "\n", "", "elif", "from_pt", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Error no file named {} found in directory {} or `from_pt` set to False\"", ".", "format", "(", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", "]", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "", "else", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"Error file {} not found\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "                ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", "as", "e", ":", "\n", "                ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                    ", "logger", ".", "error", "(", "\n", "\"Couldn't reach server at '{}' to download pretrained weights.\"", ".", "format", "(", "\n", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_model_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ")", ")", "\n", "", "raise", "e", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "resolved_archive_file", "=", "None", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "from_pt", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "            ", "return", "load_pytorch_checkpoint_in_tf2_model", "(", "model", ",", "resolved_archive_file", ")", "\n", "\n", "", "ret", "=", "model", "(", "model", ".", "dummy_inputs", ",", "training", "=", "False", ")", "# build the network with dummy inputs", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "resolved_archive_file", ")", ",", "\"Error retrieving file {}\"", ".", "format", "(", "resolved_archive_file", ")", "\n", "# 'by_name' allow us to do transfer learning by skipping/adding layers", "\n", "# see https://github.com/tensorflow/tensorflow/blob/00fad90125b18b80fe054de1055770cfb8fe4ba3/tensorflow/python/keras/engine/network.py#L1339-L1357", "\n", "model", ".", "load_weights", "(", "resolved_archive_file", ",", "by_name", "=", "True", ")", "\n", "\n", "ret", "=", "model", "(", "model", ".", "dummy_inputs", ",", "training", "=", "False", ")", "# Make sure restore ops are run", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFConv1D.__init__": [[296, 304], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ",", "initializer_range", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" TFConv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "TFConv1D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "self", ".", "nx", "=", "nx", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFConv1D.build": [[305, 314], ["modeling_tf_utils.TFConv1D.add_weight", "modeling_tf_utils.TFConv1D.add_weight", "modeling_tf_utils.get_initializer", "tensorflow.zeros_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "weight", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "nx", ",", "self", ".", "nf", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "\"bias\"", ",", "\n", "shape", "=", "[", "1", ",", "self", ".", "nf", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFConv1D.call": [[315, 324], ["tensorflow.reshape", "tensorflow.reshape", "modeling_tf_utils.shape_list", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "bz", ",", "sl", "=", "shape_list", "(", "x", ")", "[", ":", "2", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "nx", "]", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "+", "self", ".", "bias", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "bz", ",", "sl", ",", "self", ".", "nf", "]", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSharedEmbeddings.__init__": [[329, 334], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "hidden_size", ",", "initializer_range", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFSharedEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "initializer_range", "=", "hidden_size", "**", "-", "0.5", "if", "initializer_range", "is", "None", "else", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSharedEmbeddings.build": [[335, 345], ["modeling_tf_utils.TFSharedEmbeddings.add_weight", "super().build", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer\n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "self", ".", "weight", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "super", "(", "TFSharedEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSharedEmbeddings.call": [[346, 367], ["modeling_tf_utils.TFSharedEmbeddings._embedding", "modeling_tf_utils.TFSharedEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mode", "=", "\"embedding\"", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n        \n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSharedEmbeddings._embedding": [[368, 371], ["tensorflow.gather"], "methods", ["None"], ["", "", "def", "_embedding", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "return", "tf", ".", "gather", "(", "self", ".", "weight", ",", "input_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSharedEmbeddings._linear": [[372, 385], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [..., hidden_size]\n            Returns:\n                float32 tensor with shape [..., vocab_size].\n        \"\"\"", "\n", "first_dims", "=", "shape_list", "(", "inputs", ")", "[", ":", "-", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weight", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "first_dims", "+", "[", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSequenceSummary.__init__": [[402, 433], ["super().__init__", "hasattr", "hasattr", "tensorflow.keras.layers.Dense", "hasattr", "hasattr", "tensorflow.keras.layers.Dropout", "hasattr", "tensorflow.keras.layers.Dropout", "hasattr", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "initializer_range", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFSequenceSummary", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "summary_type", "=", "config", ".", "summary_type", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "else", "'last'", "\n", "if", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "# We should use a standard multi-head attention module with absolute positional embedding for that.", "\n", "# Cf. https://github.com/zihangdai/xlnet/blob/master/modeling.py#L253-L276", "\n", "# We can probably just use the multi-head attention module of PyTorch >=1.1.0", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "has_summary", "=", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "and", "config", ".", "summary_use_proj", "\n", "if", "self", ".", "has_summary", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "'summary_proj_to_labels'", ")", "and", "config", ".", "summary_proj_to_labels", "and", "config", ".", "num_labels", ">", "0", ":", "\n", "                ", "num_classes", "=", "config", ".", "num_labels", "\n", "", "else", ":", "\n", "                ", "num_classes", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "summary", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "num_classes", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "initializer_range", ")", ",", "\n", "name", "=", "'summary'", ")", "\n", "\n", "", "self", ".", "has_activation", "=", "hasattr", "(", "config", ",", "'summary_activation'", ")", "and", "config", ".", "summary_activation", "==", "'tanh'", "\n", "if", "self", ".", "has_activation", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "\n", "\n", "", "self", ".", "has_first_dropout", "=", "hasattr", "(", "config", ",", "'summary_first_dropout'", ")", "and", "config", ".", "summary_first_dropout", ">", "0", "\n", "if", "self", ".", "has_first_dropout", ":", "\n", "            ", "self", ".", "first_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "summary_first_dropout", ")", "\n", "\n", "", "self", ".", "has_last_dropout", "=", "hasattr", "(", "config", ",", "'summary_last_dropout'", ")", "and", "config", ".", "summary_last_dropout", ">", "0", "\n", "if", "self", ".", "has_last_dropout", ":", "\n", "            ", "self", ".", "last_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "summary_last_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.TFSequenceSummary.call": [[434, 487], ["isinstance", "isinstance", "modeling_tf_utils.TFSequenceSummary.first_dropout", "modeling_tf_utils.TFSequenceSummary.summary", "modeling_tf_utils.TFSequenceSummary.activation", "modeling_tf_utils.TFSequenceSummary.last_dropout", "inputs.get", "inputs.get", "len", "tensorflow.mean", "len", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.gather", "tensorflow.squeeze", "tensorflow.fill", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\" hidden_states: float Tensor in shape [bsz, seq_len, hidden_size], the hidden-states of the last layer.\n            cls_index: [optional] position of the classification token if summary_type == 'cls_index',\n                shape (bsz,) or more generally (bsz, ...) where ... are optional leading dimensions of hidden_states.\n                if summary_type == 'cls_index' and cls_index is None:\n                    we take the last token of the sequence as classification token\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "(", "dict", ",", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "hidden_states", "=", "inputs", "\n", "cls_index", "=", "None", "\n", "", "elif", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "hidden_states", "=", "inputs", "[", "0", "]", "\n", "cls_index", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "None", "\n", "assert", "len", "(", "inputs", ")", "<=", "2", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "cls_index", "=", "inputs", ".", "get", "(", "'cls_index'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "summary_type", "==", "'last'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'first'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'mean'", ":", "\n", "            ", "output", "=", "tf", ".", "mean", "(", "hidden_states", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "summary_type", "==", "'cls_index'", ":", "\n", "            ", "hidden_shape", "=", "shape_list", "(", "hidden_states", ")", "# e.g. [batch, num choices, seq length, hidden dims]", "\n", "if", "cls_index", "is", "None", ":", "\n", "                ", "cls_index", "=", "tf", ".", "fill", "(", "hidden_shape", "[", ":", "-", "2", "]", ",", "hidden_shape", "[", "-", "2", "]", "-", "1", ")", "# A tensor full of shape [batch] or [batch, num choices] full of sequence length", "\n", "", "cls_shape", "=", "shape_list", "(", "cls_index", ")", "\n", "if", "len", "(", "cls_shape", ")", "<=", "len", "(", "hidden_shape", ")", "-", "2", ":", "\n", "                ", "cls_index", "=", "cls_index", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "# else:", "\n", "# cls_index = cls_index[..., tf.newaxis]", "\n", "# cls_index = cls_index.expand((-1,) * (cls_index.dim()-1) + (hidden_states.size(-1),))", "\n", "# shape of cls_index: (bsz, XX, 1, hidden_size) where XX are optional leading dim of hidden_states", "\n", "", "output", "=", "tf", ".", "gather", "(", "hidden_states", ",", "cls_index", ",", "batch_dims", "=", "len", "(", "hidden_shape", ")", "-", "2", ")", "\n", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "axis", "=", "len", "(", "hidden_shape", ")", "-", "2", ")", "# shape of output: (batch, num choices, hidden_size)", "\n", "", "elif", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "has_first_dropout", ":", "\n", "            ", "output", "=", "self", ".", "first_dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "\n", "", "if", "self", ".", "has_summary", ":", "\n", "            ", "output", "=", "self", ".", "summary", "(", "output", ")", "\n", "\n", "", "if", "self", ".", "has_activation", ":", "\n", "            ", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "\n", "", "if", "self", ".", "has_last_dropout", ":", "\n", "            ", "output", "=", "self", ".", "last_dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list": [[488, 493], ["x.shape.as_list", "tensorflow.shape", "enumerate"], "function", ["None"], ["", "", "def", "shape_list", "(", "x", ")", ":", "\n", "    ", "\"\"\"Deal with dynamic shape in tensorflow cleanly.\"\"\"", "\n", "static", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "dynamic", "=", "tf", ".", "shape", "(", "x", ")", "\n", "return", "[", "dynamic", "[", "i", "]", "if", "s", "is", "None", "else", "s", "for", "i", ",", "s", "in", "enumerate", "(", "static", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer": [[494, 502], ["tensorflow.keras.initializers.TruncatedNormal"], "function", ["None"], ["", "def", "get_initializer", "(", "initializer_range", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Creates a `tf.initializers.truncated_normal` with the given range.\n    Args:\n        initializer_range: float, initializer range for stddev.\n    Returns:\n        TruncatedNormal initializer with stddev = `initializer_range`.\n    \"\"\"", "\n", "return", "tf", ".", "keras", ".", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "initializer_range", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.__init__": [[30, 79], ["torch.nn.Module.__init__", "torch.arange", "torch.arange", "torch.full", "torch.tensor().repeat", "range", "torch.tensor", "float"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "tokenizer", ",", "\n", "batch_size", ",", "\n", "beam_size", ",", "\n", "min_length", ",", "\n", "max_length", ",", "\n", "alpha", "=", "0", ",", "\n", "block_repeating_trigram", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Attributes:\n            mask_word_id: token id that corresponds to the mask\n        \"\"\"", "\n", "super", "(", "TransformerBeamSearch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "self", ".", "start_token_id", "=", "tokenizer", ".", "start_token_id", "\n", "self", ".", "end_token_id", "=", "tokenizer", ".", "end_token_id", "\n", "self", ".", "pad_token_id", "=", "tokenizer", ".", "pad_token_id", "\n", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "min_length", "=", "min_length", "\n", "self", ".", "max_length", "=", "max_length", "\n", "\n", "self", ".", "block_repeating_trigram", "=", "block_repeating_trigram", "\n", "self", ".", "apply_length_penalty", "=", "False", "if", "alpha", "==", "0", "else", "True", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "# State of the beam", "\n", "self", ".", "hypotheses", "=", "[", "[", "]", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "self", ".", "batch_offset", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "beam_offset", "=", "torch", ".", "arange", "(", "\n", "0", ",", "batch_size", "*", "self", ".", "beam_size", ",", "step", "=", "self", ".", "beam_size", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "self", ".", "growing_beam", "=", "torch", ".", "full", "(", "\n", "(", "batch_size", "*", "self", ".", "beam_size", ",", "1", ")", ",", "self", ".", "start_token_id", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "self", ".", "topk_log_probabilities", "=", "torch", ".", "tensor", "(", "\n", "[", "0.0", "]", "+", "[", "float", "(", "\"-inf\"", ")", "]", "*", "(", "self", ".", "beam_size", "-", "1", ")", ",", "dtype", "=", "torch", ".", "float", "\n", ")", ".", "repeat", "(", "batch_size", ")", "\n", "self", ".", "results", "=", "{", "\n", "\"prediction\"", ":", "[", "[", "]", "for", "_", "in", "batch_size", "]", ",", "\n", "\"scores\"", ":", "[", "[", "]", "for", "_", "in", "batch_size", "]", ",", "\n", "}", "\n", "self", ".", "_step", "=", "0", "\n", "self", ".", "is_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.step": [[80, 176], ["log_probabilities.size", "modeling_beam_search.TransformerBeamSearch.topk_log_probabilities.view", "modeling_beam_search.TransformerBeamSearch.enforce_min_length", "log_probabilities.topk", "topk_ids.div", "topk_ids.fmod", "torch.cat", "topk_ids.fmod.eq", "modeling_beam_search.TransformerBeamSearch.enforce_max_length", "is_finished[].eq", "topk_ids.fmod.eq.any", "log_probabilities.size", "modeling_beam_search.TransformerBeamSearch.remove_repeating_trigrams", "log_probabilities.view", "modeling_beam_search.TransformerBeamSearch.length_penalty", "modeling_beam_search.TransformerBeamSearch.growing_beam.view", "range", "is_finished[].eq.eq().nonzero().view", "topk_log_probabilities.index_select.index_select.index_select", "modeling_beam_search.TransformerBeamSearch.batch_offset.index_select", "modeling_beam_search.TransformerBeamSearch.index_select().view", "surviving_beams_rows.index_select.index_select.index_select", "modeling_beam_search.TransformerBeamSearch.growing_beam.index_select", "topk_ids.fmod.view", "modeling_beam_search.TransformerBeamSearch.growing_beam.size", "topk_ids.fmod.eq.size", "is_finished[].nonzero().view", "len", "modeling_beam_search.TransformerBeamSearch.growing_beam.size", "modeling_beam_search.TransformerBeamSearch.beam_offset[].view", "is_finished[].fill_", "modeling_beam_search.TransformerBeamSearch.hypotheses[].append", "sorted", "[].append", "[].append", "is_finished[].eq.eq().nonzero", "modeling_beam_search.TransformerBeamSearch.index_select", "is_finished[].nonzero", "is_finished[].eq.eq"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.enforce_min_length", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.enforce_max_length", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.remove_repeating_trigrams", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.length_penalty"], ["", "def", "step", "(", "self", ",", "log_probabilities", ")", ":", "\n", "        ", "\"\"\" Grows the beam by one step. \"\"\"", "\n", "self", ".", "_step", "+=", "1", "\n", "\n", "# The batch size changes as some beams finish so we define _B", "\n", "vocab_size", "=", "log_probabilities", ".", "size", "(", "-", "1", ")", "\n", "_B", "=", "log_probabilities", ".", "size", "(", "0", ")", "//", "self", ".", "beam_size", "\n", "\n", "# Multiply each beam probability with the probability of the", "\n", "# next token (conditioned on the words in the beam).", "\n", "log_probabilities", "+=", "self", ".", "topk_log_probabilities", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "enforce_min_length", "(", "log_probabilities", ")", "\n", "if", "self", ".", "block_repeating_trigram", ":", "\n", "            ", "self", ".", "remove_repeating_trigrams", "(", "log_probabilities", ",", "_B", ")", "\n", "\n", "# Find the `beam_size` (previous_beam + token) combinations with", "\n", "# the highest score", "\n", "", "topk_log_probabilities", ",", "topk_ids", "=", "log_probabilities", ".", "topk", "(", "\n", "log_probabilities", ".", "view", "(", "_B", ",", "self", ".", "beam_size", "*", "vocab_size", ")", ",", "\n", "self", ".", "beam_size", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "# Apply the length penalty. The +1 accounts for the [EOS] token", "\n", "# that will be added if the beam ends.", "\n", "topk_scores", "=", "topk_log_probabilities", "/", "self", ".", "length_penalty", "(", ")", "\n", "\n", "# Retrieve the corresponding respective beam and token id", "\n", "# topk_token_ids[i] will be added to topk_beam_ids[i]", "\n", "topk_beam_ids", "=", "topk_ids", ".", "div", "(", "vocab_size", ")", "\n", "topk_token_ids", "=", "topk_ids", ".", "fmod", "(", "vocab_size", ")", "\n", "\n", "# Retrieve the row index of the surviving beams in the original", "\n", "# view of the log_probabilities tensor", "\n", "surviving_beams_rows", "=", "(", "topk_beam_ids", "+", "self", ".", "beam_offset", "[", ":", "_B", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "view", "(", "\n", "-", "1", "\n", ")", "\n", "\n", "# Append the last predictions", "\n", "self", ".", "growing_beam", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "self", ".", "growing_beam", ".", "index_select", "(", "0", ",", "surviving_beams_rows", ")", ",", "\n", "topk_token_ids", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "]", ",", "\n", "1", ",", "\n", ")", "\n", "\n", "# Check if any of the beam searches has ended during this", "\n", "# growth step. Also if top beam (most probable) has ended", "\n", "# for one element of the batch.", "\n", "is_finished", "=", "topk_token_ids", ".", "eq", "(", "self", ".", "end_token_id", ")", "\n", "self", ".", "enforce_max_length", "(", ")", "\n", "is_top_beam_finished", "=", "is_finished", "[", ":", ",", "0", "]", ".", "eq", "(", "1", ")", "\n", "\n", "# Save the finished searches", "\n", "if", "is_finished", ".", "any", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "growing_beam", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "beam_size", ",", "self", ".", "growing_beam", ".", "size", "(", "1", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "is_finished", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "if", "is_top_beam_finished", "[", "i", "]", ":", "\n", "                    ", "is_finished", "[", "i", "]", ".", "fill_", "(", "1", ")", "\n", "", "finished_hyp", "=", "is_finished", "[", "i", "]", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Store finished hypotheses for this batch.", "\n", "b", "=", "self", ".", "batch_offset", "[", "i", "]", "\n", "for", "j", "in", "finished_hyp", ":", "\n", "                    ", "self", ".", "hypotheses", "[", "b", "]", ".", "append", "(", "(", "topk_scores", "[", "i", ",", "j", "]", ",", "predictions", "[", "i", ",", "j", ",", ":", "]", ")", ")", "\n", "\n", "# If the batch reached the end, save the best hypotheses", "\n", "# in terms of length-penalized score.", "\n", "", "if", "is_top_beam_finished", "[", "i", "]", ":", "\n", "                    ", "best_hyp", "=", "sorted", "(", "\n", "self", ".", "hypotheses", "[", "b", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", "\n", ")", "\n", "best_score", ",", "best_prediction", "=", "best_hyp", "[", "0", "]", "\n", "self", ".", "results", "[", "\"scores\"", "]", "[", "b", "]", ".", "append", "(", "best_score", ")", "\n", "self", ".", "results", "[", "\"predictions\"", "]", "[", "b", "]", ".", "append", "(", "best_prediction", ")", "\n", "\n", "", "", "non_finished", "=", "is_top_beam_finished", ".", "eq", "(", "0", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "len", "(", "non_finished", ")", "==", "0", ":", "\n", "                ", "self", ".", "is_done", "=", "True", "\n", "\n", "# Remove finished batches for the next step.", "\n", "", "topk_log_probabilities", "=", "topk_log_probabilities", ".", "index_select", "(", "\n", "0", ",", "non_finished", "\n", ")", "\n", "self", ".", "batch_offset", "=", "self", ".", "batch_offset", ".", "index_select", "(", "0", ",", "non_finished", ")", "\n", "self", ".", "growing_beam", "=", "predictions", ".", "index_select", "(", "0", ",", "non_finished", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "growing_beam", ".", "size", "(", "-", "1", ")", "\n", ")", "\n", "\n", "surviving_beams_rows", "=", "surviving_beams_rows", ".", "index_select", "(", "0", ",", "non_finished", ")", "\n", "\n", "", "return", "surviving_beams_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.forward": [[177, 223], ["dict", "dict", "modeling_beam_search.TransformerBeamSearch.model.encoder.forward", "modeling_beam_search.tile", "torch.full", "range", "modeling_beam_search.TransformerBeamSearch.model.decoder", "torch.nn.functional.log_softmax", "modeling_beam_search.TransformerBeamSearch.step", "kwargs_decoder[].index_select", "kwargs.items", "argument.startswith", "kwargs.items", "argument.startswith", "kwargs.items", "len", "len", "argument.startswith", "argument.startswith"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.forward", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step"], ["", "def", "forward", "(", "self", ",", "encoder_input_ids", ",", "**", "kwargs", ")", ":", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "        ", "kwargs_encoder", "=", "{", "\n", "argument", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "}", "\n", "kwargs_decoder", "=", "{", "\n", "argument", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", "kwargs_common", "=", "{", "\n", "argument", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "(", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "or", "argument", ".", "startswith", "(", "\"decoder_\"", ")", ")", "\n", "}", "\n", "kwargs_decoder", "=", "dict", "(", "kwargs_common", ",", "**", "kwargs_decoder", ")", "\n", "kwargs_encoder", "=", "dict", "(", "kwargs_common", ",", "**", "kwargs_encoder", ")", "\n", "\n", "# forward pass on the encoder", "\n", "encoder_outputs", "=", "self", ".", "model", ".", "encoder", ".", "forward", "(", "encoder_input_ids", ",", "kwargs_encoder", ")", "\n", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "tile", "(", "\n", "encoder_outputs", ",", "self", ".", "beam_size", ",", "dim", "=", "0", "\n", ")", "\n", "\n", "# grow the beam by generating sequences in an autoregressive way", "\n", "self", ".", "growing_beam", "=", "torch", ".", "full", "(", "\n", "(", "self", ".", "batch_size", "*", "self", ".", "beam_size", ",", "1", ")", ",", "self", ".", "start_token_id", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "max_length", ")", ":", "\n", "            ", "decoder_input", "=", "self", ".", "growing_beam", "[", ":", ",", "-", "1", "]", "\n", "outputs", "=", "self", ".", "model", ".", "decoder", "(", "decoder_input", ",", "kwargs_decoder", ")", "\n", "log_probabilities", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "outputs", "[", "1", "]", ")", "\n", "surviving_beams_rows", "=", "self", ".", "step", "(", "log_probabilities", ")", "\n", "if", "self", ".", "is_done", ":", "\n", "                ", "break", "\n", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "kwargs_decoder", "[", "\n", "\"encoder_hidden_states\"", "\n", "]", ".", "index_select", "(", "0", ",", "surviving_beams_rows", ")", "\n", "\n", "", "return", "self", ".", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.remove_repeating_trigrams": [[224, 232], ["range", "tuple", "range", "len"], "methods", ["None"], ["", "def", "remove_repeating_trigrams", "(", "self", ",", "log_probabilities", ",", "_B", ")", ":", "\n", "        ", "if", "(", "self", ".", "_step", "+", "1", ">", "3", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "_B", "*", "self", ".", "beam_size", ")", ":", "\n", "                ", "tokens", "=", "[", "t", "for", "t", "in", "self", ".", "growing_beam", "[", "i", "]", "]", "\n", "trigrams", "=", "[", "(", "tokens", "[", "i", "-", "1", "]", ",", "tokens", "[", "i", "]", ",", "tokens", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "1", ",", "len", "(", "words", ")", "-", "1", ")", "]", "\n", "last_trigram", "=", "tuple", "(", "trigrams", "[", "-", "1", "]", ")", "\n", "if", "last_trigram", "in", "trigrams", "[", ":", "-", "1", "]", ":", "\n", "                    ", "log_probabilities", "[", "i", "]", "=", "-", "1e20", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.enforce_min_length": [[233, 236], ["None"], "methods", ["None"], ["", "", "", "", "def", "enforce_min_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_step", "<", "self", ".", "min_length", ":", "\n", "            ", "self", ".", "log_probabilities", "[", "self", ".", "end_token_id", "]", "=", "-", "1e20", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.enforce_max_length": [[237, 240], ["modeling_beam_search.TransformerBeamSearch.is_finished.fill_"], "methods", ["None"], ["", "", "def", "enforce_max_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_step", "+", "1", "==", "self", ".", "max_length", ":", "\n", "            ", "self", ".", "is_finished", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.TransformerBeamSearch.length_penalty": [[241, 243], ["None"], "methods", ["None"], ["", "", "def", "length_penalty", "(", "self", ")", ":", "\n", "        ", "return", "(", "(", "5.0", "+", "(", "self", ".", "_step", "+", "1", ")", ")", "/", "6.0", ")", "**", "self", ".", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile": [[245, 272], ["list", "list", "x.permute().contiguous.size", "x.permute().contiguous.view().transpose().repeat().transpose().contiguous().view", "range", "x.permute().contiguous.permute().contiguous", "x.permute().contiguous.size", "x.permute().contiguous.permute().contiguous", "len", "x.permute().contiguous.view().transpose().repeat().transpose().contiguous", "x.permute().contiguous.size", "x.permute().contiguous.permute", "x.permute().contiguous.permute", "x.permute().contiguous.view().transpose().repeat().transpose", "x.permute().contiguous.view().transpose().repeat", "x.permute().contiguous.view().transpose", "x.permute().contiguous.view"], "function", ["None"], ["", "", "def", "tile", "(", "x", ",", "count", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Tiles `x` along dimension `dim` `count` times.\n\n    Example:\n        >> ex = torch.tensor([1,2],[3,4])\n        >> tile(ex, 2, 0)\n        torch.Tensor([[1,2],[1,2],[3,4],[3,4]])\n    \"\"\"", "\n", "perm", "=", "list", "(", "range", "(", "len", "(", "x", ".", "size", "(", ")", ")", ")", ")", "\n", "if", "dim", "!=", "0", ":", "\n", "        ", "perm", "[", "0", "]", ",", "perm", "[", "dim", "]", "=", "perm", "[", "dim", "]", ",", "perm", "[", "0", "]", "\n", "x", "=", "x", ".", "permute", "(", "perm", ")", ".", "contiguous", "(", ")", "\n", "", "out_size", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "out_size", "[", "0", "]", "*=", "count", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "(", "\n", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", ".", "transpose", "(", "0", ",", "1", ")", "\n", ".", "repeat", "(", "count", ",", "1", ")", "\n", ".", "transpose", "(", "0", ",", "1", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "*", "out_size", ")", "\n", ")", "\n", "if", "dim", "!=", "0", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "perm", ")", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.convert_roberta_checkpoint_to_pytorch": [[42, 156], ["fairseq.models.roberta.RobertaModel.from_pretrained", "FairseqRobertaModel.from_pretrained.eval", "transformers.modeling_bert.BertConfig", "print", "model.eval", "torch.zeros_like", "range", "FairseqRobertaModel.from_pretrained.encode().unsqueeze", "print", "torch.max().item", "print", "torch.allclose", "print", "print", "model.save_pretrained", "transformers.modeling_roberta.RobertaForSequenceClassification", "transformers.modeling_roberta.RobertaForMaskedLM", "model", "Exception", "torch.Size", "FairseqRobertaModel.from_pretrained.encode", "FairseqRobertaModel.from_pretrained.extract_features", "FairseqRobertaModel.from_pretrained.model", "torch.max", "torch.abs"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["def", "convert_roberta_checkpoint_to_pytorch", "(", "roberta_checkpoint_path", ",", "pytorch_dump_folder_path", ",", "classification_head", ")", ":", "\n", "    ", "\"\"\"\n    Copy/paste/tweak roberta's weights to our BERT structure.\n    \"\"\"", "\n", "roberta", "=", "FairseqRobertaModel", ".", "from_pretrained", "(", "roberta_checkpoint_path", ")", "\n", "roberta", ".", "eval", "(", ")", "# disable dropout", "\n", "config", "=", "BertConfig", "(", "\n", "vocab_size_or_config_json_file", "=", "50265", ",", "\n", "hidden_size", "=", "roberta", ".", "args", ".", "encoder_embed_dim", ",", "\n", "num_hidden_layers", "=", "roberta", ".", "args", ".", "encoder_layers", ",", "\n", "num_attention_heads", "=", "roberta", ".", "args", ".", "encoder_attention_heads", ",", "\n", "intermediate_size", "=", "roberta", ".", "args", ".", "encoder_ffn_embed_dim", ",", "\n", "max_position_embeddings", "=", "514", ",", "\n", "type_vocab_size", "=", "1", ",", "\n", "layer_norm_eps", "=", "1e-5", ",", "# PyTorch default used in fairseq", "\n", ")", "\n", "if", "classification_head", ":", "\n", "        ", "config", ".", "num_labels", "=", "roberta", ".", "args", ".", "num_classes", "\n", "", "print", "(", "\"Our BERT config:\"", ",", "config", ")", "\n", "\n", "model", "=", "RobertaForSequenceClassification", "(", "config", ")", "if", "classification_head", "else", "RobertaForMaskedLM", "(", "config", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Now let's copy all the weights.", "\n", "# Embeddings", "\n", "roberta_sent_encoder", "=", "roberta", ".", "model", ".", "decoder", ".", "sentence_encoder", "\n", "model", ".", "roberta", ".", "embeddings", ".", "word_embeddings", ".", "weight", "=", "roberta_sent_encoder", ".", "embed_tokens", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "position_embeddings", ".", "weight", "=", "roberta_sent_encoder", ".", "embed_positions", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "=", "torch", ".", "zeros_like", "(", "model", ".", "roberta", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ")", "# just zero them out b/c RoBERTa doesn't use them.", "\n", "model", ".", "roberta", ".", "embeddings", ".", "LayerNorm", ".", "weight", "=", "roberta_sent_encoder", ".", "emb_layer_norm", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "LayerNorm", ".", "bias", "=", "roberta_sent_encoder", ".", "emb_layer_norm", ".", "bias", "\n", "\n", "for", "i", "in", "range", "(", "config", ".", "num_hidden_layers", ")", ":", "\n", "# Encoder: start of layer", "\n", "        ", "layer", ":", "BertLayer", "=", "model", ".", "roberta", ".", "encoder", ".", "layer", "[", "i", "]", "\n", "roberta_layer", ":", "TransformerSentenceEncoderLayer", "=", "roberta_sent_encoder", ".", "layers", "[", "i", "]", "\n", "\n", "### self attention", "\n", "self_attn", ":", "BertSelfAttention", "=", "layer", ".", "attention", ".", "self", "\n", "assert", "(", "\n", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", ".", "shape", "==", "torch", ".", "Size", "(", "(", "3", "*", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ")", "\n", ")", "\n", "# we use three distinct linear layers so we split the source layer here.", "\n", "self_attn", ".", "query", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", "[", ":", "config", ".", "hidden_size", ",", ":", "]", "\n", "self_attn", ".", "query", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_bias", "[", ":", "config", ".", "hidden_size", "]", "\n", "self_attn", ".", "key", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", "[", "config", ".", "hidden_size", ":", "2", "*", "config", ".", "hidden_size", ",", ":", "]", "\n", "self_attn", ".", "key", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_bias", "[", "config", ".", "hidden_size", ":", "2", "*", "config", ".", "hidden_size", "]", "\n", "self_attn", ".", "value", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", "[", "2", "*", "config", ".", "hidden_size", ":", ",", ":", "]", "\n", "self_attn", ".", "value", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_bias", "[", "2", "*", "config", ".", "hidden_size", ":", "]", "\n", "\n", "### self-attention output", "\n", "self_output", ":", "BertSelfOutput", "=", "layer", ".", "attention", ".", "output", "\n", "assert", "(", "\n", "self_output", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "weight", ".", "shape", "\n", ")", "\n", "self_output", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "weight", "\n", "self_output", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "bias", "\n", "self_output", ".", "LayerNorm", ".", "weight", "=", "roberta_layer", ".", "self_attn_layer_norm", ".", "weight", "\n", "self_output", ".", "LayerNorm", ".", "bias", "=", "roberta_layer", ".", "self_attn_layer_norm", ".", "bias", "\n", "\n", "### intermediate", "\n", "intermediate", ":", "BertIntermediate", "=", "layer", ".", "intermediate", "\n", "assert", "(", "\n", "intermediate", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "fc1", ".", "weight", ".", "shape", "\n", ")", "\n", "intermediate", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "fc1", ".", "weight", "\n", "intermediate", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "fc1", ".", "bias", "\n", "\n", "### output", "\n", "bert_output", ":", "BertOutput", "=", "layer", ".", "output", "\n", "assert", "(", "\n", "bert_output", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "fc2", ".", "weight", ".", "shape", "\n", ")", "\n", "bert_output", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "fc2", ".", "weight", "\n", "bert_output", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "fc2", ".", "bias", "\n", "bert_output", ".", "LayerNorm", ".", "weight", "=", "roberta_layer", ".", "final_layer_norm", ".", "weight", "\n", "bert_output", ".", "LayerNorm", ".", "bias", "=", "roberta_layer", ".", "final_layer_norm", ".", "bias", "\n", "#### end of layer", "\n", "\n", "", "if", "classification_head", ":", "\n", "        ", "model", ".", "classifier", ".", "dense", ".", "weight", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "dense", ".", "weight", "\n", "model", ".", "classifier", ".", "dense", ".", "bias", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "dense", ".", "bias", "\n", "model", ".", "classifier", ".", "out_proj", ".", "weight", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "out_proj", ".", "weight", "\n", "model", ".", "classifier", ".", "out_proj", ".", "bias", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "out_proj", ".", "bias", "\n", "", "else", ":", "\n", "# LM Head", "\n", "        ", "model", ".", "lm_head", ".", "dense", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "dense", ".", "weight", "\n", "model", ".", "lm_head", ".", "dense", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "dense", ".", "bias", "\n", "model", ".", "lm_head", ".", "layer_norm", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "layer_norm", ".", "weight", "\n", "model", ".", "lm_head", ".", "layer_norm", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "layer_norm", ".", "bias", "\n", "model", ".", "lm_head", ".", "decoder", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "weight", "\n", "model", ".", "lm_head", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "bias", "\n", "\n", "# Let's check that we get the same results.", "\n", "", "input_ids", ":", "torch", ".", "Tensor", "=", "roberta", ".", "encode", "(", "SAMPLE_TEXT", ")", ".", "unsqueeze", "(", "0", ")", "# batch of size 1", "\n", "\n", "our_output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "if", "classification_head", ":", "\n", "        ", "their_output", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", "(", "roberta", ".", "extract_features", "(", "input_ids", ")", ")", "\n", "", "else", ":", "\n", "        ", "their_output", "=", "roberta", ".", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "", "print", "(", "our_output", ".", "shape", ",", "their_output", ".", "shape", ")", "\n", "max_absolute_diff", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "our_output", "-", "their_output", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "f\"max_absolute_diff = {max_absolute_diff}\"", ")", "# ~ 1e-7", "\n", "success", "=", "torch", ".", "allclose", "(", "our_output", ",", "their_output", ",", "atol", "=", "1e-3", ")", "\n", "print", "(", "\n", "\"Do both models output the same tensors?\"", ",", "\n", "\"\ud83d\udd25\"", "if", "success", "else", "\"\ud83d\udca9\"", "\n", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "Exception", "(", "\"Something went wRoNg\"", ")", "\n", "\n", "", "print", "(", "f\"Saving model to {pytorch_dump_folder_path}\"", ")", "\n", "model", ".", "save_pretrained", "(", "pytorch_dump_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.__init__": [[64, 91], ["tokenization_utils.PreTrainedTokenizer.__init__", "spm.SentencePieceProcessor", "tokenization_xlnet.XLNetTokenizer.sp_model.Load", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "\n", "do_lower_case", "=", "False", ",", "remove_space", "=", "True", ",", "keep_accents", "=", "False", ",", "\n", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "sep_token", "=", "\"<sep>\"", ",", "\n", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"<cls>\"", ",", "mask_token", "=", "\"<mask>\"", ",", "\n", "additional_special_tokens", "=", "[", "\"<eop>\"", ",", "\"<eod>\"", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLNetTokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "\n", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "additional_special_tokens", "=", "\n", "additional_special_tokens", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "remove_space", "=", "remove_space", "\n", "self", ".", "keep_accents", "=", "keep_accents", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.vocab_size": [[92, 95], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sp_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.__getstate__": [[96, 100], ["tokenization_xlnet.XLNetTokenizer.__dict__.copy"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "\"sp_model\"", "]", "=", "None", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.__setstate__": [[101, 110], ["spm.SentencePieceProcessor", "tokenization_xlnet.XLNetTokenizer.sp_model.Load", "logger.warning"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "self", ".", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.preprocess_text": [[111, 128], ["outputs.lower.lower.replace().replace", "isinstance", "outputs.lower.lower.decode", "unicodedata.normalize", "outputs.lower.lower.lower", "inputs.strip().split", "outputs.lower.lower.replace", "inputs.strip", "unicodedata.combining"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "preprocess_text", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "remove_space", ":", "\n", "            ", "outputs", "=", "' '", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "inputs", "\n", "", "outputs", "=", "outputs", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "            ", "outputs", "=", "outputs", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "self", ".", "keep_accents", ":", "\n", "            ", "outputs", "=", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "outputs", ")", "\n", "outputs", "=", "''", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "", "if", "self", ".", "do_lower_case", ":", "\n", "            ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer._tokenize": [[129, 167], ["tokenization_xlnet.XLNetTokenizer.preprocess_text", "isinstance", "text.encode.encode.encode", "tokenization_xlnet.XLNetTokenizer.sp_model.EncodeAsPieces", "tokenization_xlnet.XLNetTokenizer.sp_model.SampleEncodeAsPieces", "piece[].isdigit", "tokenization_xlnet.XLNetTokenizer.sp_model.EncodeAsPieces", "tokenization_xlnet.XLNetTokenizer.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "piece[].replace", "piece.decode.decode.decode", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.preprocess_text", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            return_unicode is used only for py2\n        \"\"\"", "\n", "text", "=", "self", ".", "preprocess_text", "(", "text", ")", "\n", "# note(zhiliny): in some systems, sentencepiece only accepts str for py2", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "text", "=", "text", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "            ", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "','", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "cur_pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "\n", "piece", "[", ":", "-", "1", "]", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "''", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "                    ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "                        ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                        ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "                ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "            ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "                ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "                    ", "piece", "=", "piece", ".", "decode", "(", "'utf-8'", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer._convert_token_to_id": [[168, 171], ["tokenization_xlnet.XLNetTokenizer.sp_model.PieceToId"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer._convert_id_to_token": [[172, 178], ["tokenization_xlnet.XLNetTokenizer.sp_model.IdToPiece", "isinstance", "token.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ",", "return_unicode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "token", "=", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", ")", "\n", "if", "six", ".", "PY2", "and", "return_unicode", "and", "isinstance", "(", "token", ",", "str", ")", ":", "\n", "            ", "token", "=", "token", ".", "decode", "(", "'utf-8'", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_string": [[179, 183], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens (strings for sub-words) in a single string.\"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.build_inputs_with_special_tokens": [[184, 197], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "token_ids_0", "+", "sep", "+", "cls", "\n", "", "return", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "+", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.get_special_tokens_mask": [[198, 223], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", ",", "1", "]", "\n", "", "return", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.create_token_type_ids_from_sequences": [[224, 240], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A BERT sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2\n        | first sequence    | second sequence     | CLS segment ID\n        \n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "cls_segment_id", "=", "[", "2", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "token_ids_0", "+", "sep", "+", "cls", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "+", "cls_segment_id", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlnet.XLNetTokenizer.save_vocabulary": [[241, 254], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFEmbeddings.__init__": [[69, 87], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "self", ".", "word_embeddings", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "dim", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "'word_embeddings'", ")", "# padding_idx=0)", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "dim", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"LayerNorm\"", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFEmbeddings.build": [[88, 98], ["super().build", "tensorflow.name_scope", "modeling_tf_distilbert.TFEmbeddings.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"word_embeddings\"", ")", ":", "\n", "# Create and initialize weights. The random normal initializer was chosen", "\n", "# arbitrarily, and works well.", "\n", "            ", "self", ".", "word_embeddings", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "dim", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "", "super", "(", "TFEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFEmbeddings.call": [[99, 120], ["modeling_tf_distilbert.TFEmbeddings._embedding", "modeling_tf_distilbert.TFEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "inputs_embeds", "=", "None", ",", "mode", "=", "\"embedding\"", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n        \n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ",", "inputs_embeds", "=", "inputs_embeds", ",", "training", "=", "training", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFEmbeddings._embedding": [[121, 155], ["modeling_tf_distilbert.TFEmbeddings.position_embeddings", "modeling_tf_distilbert.TFEmbeddings.LayerNorm", "modeling_tf_distilbert.TFEmbeddings.dropout", "isinstance", "tensorflow.gather", "tensorflow.shape", "tensorflow.shape", "tensorflow.range"], "methods", ["None"], ["", "", "def", "_embedding", "(", "self", ",", "inputs", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input_ids: tf.Tensor(bs, max_seq_length)\n            The token ids to embed.\n\n        Outputs\n        -------\n        embeddings: tf.Tensor(bs, max_seq_length, dim)\n            The embedded tokens (plus position embeddings, no token_type embeddings)\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "position_ids", "=", "None", "\n", "", "else", ":", "\n", "            ", "input_ids", ",", "position_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "seq_length", "=", "tf", ".", "shape", "(", "input_ids", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "seq_length", "=", "tf", ".", "shape", "(", "inputs_embeds", ")", "[", "1", "]", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "seq_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "gather", "(", "self", ".", "word_embeddings", ",", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ",", "training", "=", "training", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFEmbeddings._linear": [[156, 170], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [batch_size, length, hidden_size]\n            Returns:\n                float32 tensor with shape [batch_size, length, vocab_size].\n        \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "dim", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "word_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "length", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention.__init__": [[173, 197], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "set", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMultiHeadSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_dropout", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"q_lin\"", ")", "\n", "self", ".", "k_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"k_lin\"", ")", "\n", "self", ".", "v_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"v_lin\"", ")", "\n", "self", ".", "out_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"out_lin\"", ")", "\n", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention.prune_heads": [[198, 200], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention.call": [[201, 260], ["modeling_tf_utils.shape_list", "modeling_tf_distilbert.TFMultiHeadSelfAttention.call.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        query: tf.Tensor(bs, seq_length, dim)\n        key: tf.Tensor(bs, seq_length, dim)\n        value: tf.Tensor(bs, seq_length, dim)\n        mask: tf.Tensor(bs, seq_length)\n\n        Outputs\n        -------\n        weights: tf.Tensor(bs, n_heads, seq_length, seq_length)\n            Attention weights\n        context: tf.Tensor(bs, seq_length, dim)\n            Contextualized layer. Optional: only if `output_attentions=True`\n        \"\"\"", "\n", "query", ",", "key", ",", "value", ",", "mask", ",", "head_mask", "=", "inputs", "\n", "bs", ",", "q_length", ",", "dim", "=", "shape_list", "(", "query", ")", "\n", "k_length", "=", "shape_list", "(", "key", ")", "[", "1", "]", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "# assert key.size() == value.size()", "\n", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "\n", "mask_reshape", "=", "[", "bs", ",", "1", ",", "1", ",", "k_length", "]", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\" separate heads \"\"\"", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "x", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ")", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\" group heads \"\"\"", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "query", ")", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "key", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "value", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "\n", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "scores", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (bs, n_heads, q_length, k_length)", "\n", "mask", "=", "tf", ".", "reshape", "(", "mask", ",", "mask_reshape", ")", "# (bs, n_heads, qlen, klen)", "\n", "# scores.masked_fill_(mask, -float('inf'))            # (bs, n_heads, q_length, k_length)", "\n", "scores", "=", "scores", "-", "1e30", "*", "(", "1.0", "-", "mask", ")", "\n", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "-", "1", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ",", "training", "=", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, q_length, dim)", "\n", "context", "=", "self", ".", "out_lin", "(", "context", ")", "# (bs, q_length, dim)", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "(", "context", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "context", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFFFN.__init__": [[262, 273], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFFFN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "lin1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"lin1\"", ")", "\n", "self", ".", "lin2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"lin2\"", ")", "\n", "assert", "config", ".", "activation", "in", "[", "'relu'", ",", "'gelu'", "]", ",", "\"activation ({}) must be in ['relu', 'gelu']\"", ".", "format", "(", "config", ".", "activation", ")", "\n", "self", ".", "activation", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "if", "config", ".", "activation", "==", "'gelu'", "else", "tf", ".", "keras", ".", "activations", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFFFN.call": [[274, 280], ["modeling_tf_distilbert.TFFFN.lin1", "modeling_tf_distilbert.TFFFN.activation", "modeling_tf_distilbert.TFFFN.lin2", "modeling_tf_distilbert.TFFFN.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFTransformerBlock.__init__": [[283, 300], ["super().__init__", "tensorflow.keras.layers.Dropout", "modeling_tf_distilbert.TFMultiHeadSelfAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_distilbert.TFFFN", "tensorflow.keras.layers.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransformerBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "hidden_dim", "=", "config", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "activation", "=", "config", ".", "activation", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "config", ".", "dim", "%", "config", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "attention", "=", "TFMultiHeadSelfAttention", "(", "config", ",", "name", "=", "\"attention\"", ")", "\n", "self", ".", "sa_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"sa_layer_norm\"", ")", "\n", "\n", "self", ".", "ffn", "=", "TFFFN", "(", "config", ",", "name", "=", "\"ffn\"", ")", "\n", "self", ".", "output_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"output_layer_norm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFTransformerBlock.call": [[301, 334], ["modeling_tf_distilbert.TFTransformerBlock.attention", "modeling_tf_distilbert.TFTransformerBlock.sa_layer_norm", "modeling_tf_distilbert.TFTransformerBlock.ffn", "modeling_tf_distilbert.TFTransformerBlock.output_layer_norm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "# removed: src_enc=None, src_len=None", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: tf.Tensor(bs, seq_length, dim)\n        attn_mask: tf.Tensor(bs, seq_length)\n\n        Outputs\n        -------\n        sa_weights: tf.Tensor(bs, n_heads, seq_length, seq_length)\n            The attention weights\n        ffn_output: tf.Tensor(bs, seq_length, dim)\n            The output of the transformer block contextualization.\n        \"\"\"", "\n", "x", ",", "attn_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "# Self-Attention", "\n", "sa_output", "=", "self", ".", "attention", "(", "[", "x", ",", "x", ",", "x", ",", "attn_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "sa_output", ",", "sa_weights", "=", "sa_output", "# (bs, seq_length, dim), (bs, n_heads, seq_length, seq_length)", "\n", "", "else", ":", "# To handle these `output_attention` or `output_hidden_states` cases returning tuples", "\n", "# assert type(sa_output) == tuple", "\n", "            ", "sa_output", "=", "sa_output", "[", "0", "]", "\n", "", "sa_output", "=", "self", ".", "sa_layer_norm", "(", "sa_output", "+", "x", ")", "# (bs, seq_length, dim)", "\n", "\n", "# Feed Forward Network", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "sa_output", ",", "training", "=", "training", ")", "# (bs, seq_length, dim)", "\n", "ffn_output", "=", "self", ".", "output_layer_norm", "(", "ffn_output", "+", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "\n", "output", "=", "(", "ffn_output", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "output", "=", "(", "sa_weights", ",", ")", "+", "output", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFTransformer.__init__": [[337, 345], ["super().__init__", "modeling_tf_distilbert.TFTransformerBlock", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransformer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "layer", "=", "[", "TFTransformerBlock", "(", "config", ",", "name", "=", "'layer_._{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "n_layers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFTransformer.call": [[346, 396], ["enumerate", "layer_module", "len", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: tf.Tensor(bs, seq_length, dim)\n            Input sequence embedded.\n        attn_mask: tf.Tensor(bs, seq_length)\n            Attention mask on the sequence.\n\n        Outputs\n        -------\n        hidden_state: tf.Tensor(bs, seq_length, dim)\n            Sequence of hiddens states in the last (top) layer\n        all_hidden_states: Tuple[tf.Tensor(bs, seq_length, dim)]\n            Tuple of length n_layers with the hidden states from each layer.\n            Optional: only if output_hidden_states=True\n        all_attentions: Tuple[tf.Tensor(bs, n_heads, seq_length, seq_length)]\n            Tuple of length n_layers with the attention weights from each layer\n            Optional: only if output_attentions=True\n        \"\"\"", "\n", "x", ",", "attn_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "hidden_state", "=", "x", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "[", "hidden_state", ",", "attn_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_state", "=", "layer_outputs", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "2", "\n", "attentions", "=", "layer_outputs", "[", "0", "]", "\n", "all_attentions", "=", "all_attentions", "+", "(", "attentions", ",", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "1", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_state", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertMainLayer.__init__": [[399, 405], ["super().__init__", "modeling_tf_distilbert.TFEmbeddings", "modeling_tf_distilbert.TFTransformer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", "\n", "\n", "self", ".", "embeddings", "=", "TFEmbeddings", "(", "config", ",", "name", "=", "\"embeddings\"", ")", "# Embeddings", "\n", "self", ".", "transformer", "=", "TFTransformer", "(", "config", ",", "name", "=", "\"transformer\"", ")", "# Encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertMainLayer.get_input_embeddings": [[406, 408], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertMainLayer._resize_token_embeddings": [[409, 411], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertMainLayer._prune_heads": [[412, 414], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertMainLayer.call": [[415, 458], ["isinstance", "tensorflow.cast", "modeling_tf_distilbert.TFDistilBertMainLayer.embeddings", "modeling_tf_distilbert.TFDistilBertMainLayer.transformer", "isinstance", "ValueError", "tensorflow.ones", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "head_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "tf", ".", "ones", "(", "input_shape", ")", "# (bs, seq_length)", "\n", "", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "inputs_embeds", "=", "inputs_embeds", ")", "# (bs, seq_length, dim)", "\n", "tfmr_output", "=", "self", ".", "transformer", "(", "[", "embedding_output", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "\n", "return", "tfmr_output", "# last-layer hidden-state, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertModel.__init__": [[563, 566], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "# Embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertModel.call": [[567, 570], ["modeling_tf_distilbert.TFDistilBertModel.distilbert"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertLMHead.__init__": [[573, 580], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertLMHead.build": [[581, 587], ["modeling_tf_distilbert.TFDistilBertLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFDistilBertLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertLMHead.call": [[588, 592], ["modeling_tf_distilbert.TFDistilBertLMHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM.__init__": [[621, 634], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_distilbert.TFDistilBertLMHead", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "\n", "self", ".", "vocab_transform", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"vocab_transform\"", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "\n", "self", ".", "vocab_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"vocab_layer_norm\"", ")", "\n", "self", ".", "vocab_projector", "=", "TFDistilBertLMHead", "(", "config", ",", "self", ".", "distilbert", ".", "embeddings", ",", "name", "=", "\"vocab_projector\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM.get_output_embeddings": [[635, 637], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_projector", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM.call": [[638, 649], ["modeling_tf_distilbert.TFDistilBertForMaskedLM.distilbert", "modeling_tf_distilbert.TFDistilBertForMaskedLM.vocab_transform", "modeling_tf_distilbert.TFDistilBertForMaskedLM.act", "modeling_tf_distilbert.TFDistilBertForMaskedLM.vocab_layer_norm", "modeling_tf_distilbert.TFDistilBertForMaskedLM.vocab_projector"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_transform", "(", "hidden_states", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "act", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_layer_norm", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_projector", "(", "prediction_logits", ")", "\n", "\n", "outputs", "=", "(", "prediction_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForSequenceClassification.__init__": [[679, 692], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "\n", "self", ".", "pre_classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "name", "=", "\"pre_classifier\"", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"classifier\"", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "seq_classif_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForSequenceClassification.call": [[693, 704], ["modeling_tf_distilbert.TFDistilBertForSequenceClassification.distilbert", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.pre_classifier", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.dropout", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.classifier", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "hidden_state", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_len, dim)", "\n", "pooled_output", "=", "hidden_state", "[", ":", ",", "0", "]", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "pre_classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "# (bs, dim)", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForQuestionAnswering.__init__": [[736, 745], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "assert", "config", ".", "num_labels", "==", "2", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "qa_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.TFDistilBertForQuestionAnswering.call": [[746, 758], ["modeling_tf_distilbert.TFDistilBertForQuestionAnswering.distilbert", "modeling_tf_distilbert.TFDistilBertForQuestionAnswering.dropout", "modeling_tf_distilbert.TFDistilBertForQuestionAnswering.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, max_query_len, dim)", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "# (bs, max_query_len, dim)", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "hidden_states", ")", "# (bs, max_query_len, 2)", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "return", "outputs", "# start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.gelu": [[45, 54], ["tensorflow.math.erf", "tensorflow.math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Gaussian Error Linear Unit.\n    Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "math", ".", "erf", "(", "x", "/", "tf", ".", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_distilbert.gelu_new": [[55, 67], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention.__init__": [[65, 82], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "TFConv1D", "(", "n_state", "*", "3", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_attn'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "attn_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention.prune_heads": [[83, 85], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention.causal_attention_mask": [[86, 95], ["tensorflow.range", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"1's in the lower triangle, counting from the lower right corner.\n        Same as tf.matrix_band_part(tf.ones([nd, ns]), -1, ns-nd), but doesn't produce garbage on TPUs.\n        \"\"\"", "\n", "i", "=", "tf", ".", "range", "(", "nd", ")", "[", ":", ",", "None", "]", "\n", "j", "=", "tf", ".", "range", "(", "ns", ")", "\n", "m", "=", "i", ">=", "j", "-", "ns", "+", "nd", "\n", "return", "tf", ".", "cast", "(", "m", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention._attn": [[96, 125], ["tensorflow.matmul", "modeling_tf_utils.shape_list", "modeling_tf_openai.TFAttention.causal_attention_mask", "tensorflow.reshape", "tensorflow.nn.softmax", "modeling_tf_openai.TFAttention.attn_dropout", "tensorflow.cast", "tensorflow.matmul", "outputs.append", "tensorflow.math.sqrt", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.causal_attention_mask"], ["", "def", "_attn", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "# q, k, v have shape [batch, heads, sequence, features]", "\n", "w", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "# scale attention_scores", "\n", "w", "=", "w", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# w has shape [batch, heads, dst_sequence, src_sequence], where information flows from src to dst.", "\n", "", "_", ",", "_", ",", "nd", ",", "ns", "=", "shape_list", "(", "w", ")", "\n", "b", "=", "self", ".", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "1", ",", "nd", ",", "ns", "]", ")", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "tf", ".", "nn", ".", "softmax", "(", "w", ",", "axis", "=", "-", "1", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "tf", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention.merge_heads": [[126, 131], ["tensorflow.transpose", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "2", "]", "+", "[", "x_shape", "[", "-", "2", "]", "*", "x_shape", "[", "-", "1", "]", "]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention.split_heads": [[132, 137], ["modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "n_head", ",", "x_shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFAttention.call": [[138, 156], ["modeling_tf_openai.TFAttention.c_attn", "tensorflow.split", "modeling_tf_openai.TFAttention.split_heads", "modeling_tf_openai.TFAttention.split_heads", "modeling_tf_openai.TFAttention.split_heads", "modeling_tf_openai.TFAttention._attn", "modeling_tf_openai.TFAttention.merge_heads", "modeling_tf_openai.TFAttention.c_proj", "modeling_tf_openai.TFAttention.resid_dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.merge_heads"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "tf", ".", "split", "(", "x", ",", "3", ",", "axis", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "[", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "[", "a", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFMLP.__init__": [[159, 166], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_fc'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "nx", ",", "n_state", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFMLP.call": [[167, 172], ["modeling_tf_openai.TFMLP.act", "modeling_tf_openai.TFMLP.c_proj", "modeling_tf_openai.TFMLP.dropout", "modeling_tf_openai.TFMLP.c_fc"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "h2", "=", "self", ".", "dropout", "(", "h2", ",", "training", "=", "training", ")", "\n", "return", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFBlock.__init__": [[175, 182], ["super().__init__", "modeling_tf_openai.TFAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_openai.TFMLP", "tensorflow.keras.layers.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "attn", "=", "TFAttention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ",", "name", "=", "'attn'", ")", "\n", "self", ".", "ln_1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_1'", ")", "\n", "self", ".", "mlp", "=", "TFMLP", "(", "4", "*", "nx", ",", "config", ",", "name", "=", "'mlp'", ")", "\n", "self", ".", "ln_2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFBlock.call": [[183, 195], ["modeling_tf_openai.TFBlock.attn", "modeling_tf_openai.TFBlock.ln_1", "modeling_tf_openai.TFBlock.mlp", "modeling_tf_openai.TFBlock.ln_2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "output_attn", "=", "self", ".", "attn", "(", "[", "x", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, (attentions)", "\n", "\n", "n", "=", "self", ".", "ln_1", "(", "x", "+", "a", ")", "\n", "m", "=", "self", ".", "mlp", "(", "n", ",", "training", "=", "training", ")", "\n", "h", "=", "self", ".", "ln_2", "(", "n", "+", "m", ")", "\n", "\n", "outputs", "=", "[", "h", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer.__init__": [[198, 219], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Dropout", "modeling_tf_openai.TFBlock", "modeling_tf_utils.get_initializer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTMainLayer", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "n_layer", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "n_embd", "=", "config", ".", "n_embd", "\n", "\n", "self", ".", "tokens_embed", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "n_embd", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "'tokens_embed'", ")", "\n", "self", ".", "positions_embed", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "n_positions", ",", "\n", "config", ".", "n_embd", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'positions_embed'", ")", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "[", "TFBlock", "(", "config", ".", "n_ctx", ",", "\n", "config", ",", "\n", "scale", "=", "True", ",", "\n", "name", "=", "'h_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer.get_input_embeddings": [[220, 222], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer._resize_token_embeddings": [[223, 225], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer._prune_heads": [[226, 231], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer.call": [[232, 335], ["isinstance", "tensorflow.reshape", "modeling_tf_openai.TFOpenAIGPTMainLayer.positions_embed", "modeling_tf_openai.TFOpenAIGPTMainLayer.drop", "enumerate", "tensorflow.reshape", "isinstance", "ValueError", "tensorflow.cast", "modeling_tf_openai.TFOpenAIGPTMainLayer.tokens_embed", "tensorflow.reshape", "modeling_tf_openai.TFOpenAIGPTMainLayer.tokens_embed", "block", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.range", "tuple.append", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "input_shape", "[", "-", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "[", "-", "1", ",", "shape_list", "(", "position_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "tokens_embed", "(", "input_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "position_embeds", "=", "self", ".", "positions_embed", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", ",", "shape_list", "(", "token_type_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "tokens_embed", "(", "token_type_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "[", "shape_list", "(", "hidden_states", ")", "[", "-", "1", "]", "]", "\n", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "h", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "1", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", "+", "shape_list", "(", "all_attentions", "[", "0", "]", ")", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "tf", ".", "reshape", "(", "t", ",", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTModel.__init__": [[439, 442], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_openai.TFOpenAIGPTMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFOpenAIGPTMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTModel.call": [[443, 446], ["modeling_tf_openai.TFOpenAIGPTModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel.__init__": [[475, 478], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_openai.TFOpenAIGPTMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFOpenAIGPTMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel.get_output_embeddings": [[479, 481], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel.call": [[482, 491], ["modeling_tf_openai.TFOpenAIGPTLMHeadModel.transformer", "modeling_tf_openai.TFOpenAIGPTLMHeadModel.transformer.tokens_embed"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "tokens_embed", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm_logits, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.__init__": [[539, 543], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_openai.TFOpenAIGPTMainLayer", "modeling_tf_utils.TFSequenceSummary"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTDoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFOpenAIGPTMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "multiple_choice_head", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'multiple_choice_head'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.get_output_embeddings": [[544, 546], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.call": [[547, 596], ["isinstance", "modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.transformer", "tensorflow.reshape", "modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.transformer.tokens_embed", "modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.multiple_choice_head", "tensorflow.squeeze", "isinstance", "modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len", "len", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "mc_token_ids", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "mc_token_ids", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "mc_token_ids", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "mc_token_ids", "=", "inputs", ".", "get", "(", "'mc_token_ids'", ",", "mc_token_ids", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shapes", "[", "-", "1", "]", "\n", "\n", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "input_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "tf", ".", "reshape", "(", "attention_mask", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "flat_inputs", "=", "[", "flat_input_ids", ",", "flat_attention_mask", ",", "flat_token_type_ids", ",", "flat_position_ids", ",", "head_mask", ",", "inputs_embeds", "]", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "flat_inputs", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "input_shapes", "+", "shape_list", "(", "hidden_states", ")", "[", "-", "1", ":", "]", ")", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "tokens_embed", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "[", "hidden_states", ",", "mc_token_ids", "]", ",", "training", "=", "training", ")", "\n", "\n", "mc_logits", "=", "tf", ".", "squeeze", "(", "mc_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm logits, mc logits, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.gelu": [[41, 53], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_openai.swish": [[55, 57], ["tensorflow.math.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "tf", ".", "math", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFPositionalEmbedding.__init__": [[44, 48], ["super().__init__", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFPositionalEmbedding", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "tf", ".", "range", "(", "0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFPositionalEmbedding.call": [[49, 57], ["tensorflow.einsum", "tensorflow.concat", "tensorflow.tile", "tensorflow.sin", "tensorflow.cos"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile"], ["", "def", "call", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "tf", ".", "einsum", "(", "'i,j->ij'", ",", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "sinusoid_inp", ")", ",", "tf", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "tf", ".", "tile", "(", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "bsz", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFPositionwiseFF.__init__": [[60, 80], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ",", "layer_norm_epsilon", "=", "1e-5", ",", "init_std", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFPositionwiseFF", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "layer_1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_inner", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "'CoreNet_._0'", ")", "\n", "self", ".", "drop_1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "name", "=", "'CoreNet_._3'", ")", "\n", "self", ".", "drop_2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "'layer_norm'", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFPositionwiseFF.call": [[81, 103], ["modeling_tf_transfo_xl.TFPositionwiseFF.layer_norm", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_1", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_1", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_2", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_2", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_1", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_1", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_2", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_2", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "layer_norm", "(", "inp", ")", "\n", "core_out", "=", "self", ".", "layer_1", "(", "core_out", ")", "\n", "core_out", "=", "self", ".", "drop_1", "(", "core_out", ",", "training", "=", "training", ")", "\n", "core_out", "=", "self", ".", "layer_2", "(", "core_out", ")", "\n", "core_out", "=", "self", ".", "drop_2", "(", "core_out", ",", "training", "=", "training", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "layer_1", "(", "inp", ")", "\n", "core_out", "=", "self", ".", "drop_1", "(", "core_out", ",", "training", "=", "training", ")", "\n", "core_out", "=", "self", ".", "layer_2", "(", "core_out", ")", "\n", "core_out", "=", "self", ".", "drop_2", "(", "core_out", ",", "training", "=", "training", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.__init__": [[106, 147], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ",", "\n", "r_r_bias", "=", "None", ",", "r_w_bias", "=", "None", ",", "output_attentions", "=", "False", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "init_std", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "3", "*", "n_head", "*", "d_head", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'qkv_net'", ")", "\n", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'o_net'", ")", "\n", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "'layer_norm'", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "if", "r_r_bias", "is", "not", "None", "and", "r_w_bias", "is", "not", "None", ":", "# Biases are shared", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "None", "\n", "self", ".", "r_w_bias", "=", "None", "\n", "\n", "", "self", ".", "r_net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'r_net'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.build": [[148, 159], ["super().build", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.add_weight", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.add_weight"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "r_r_bias", "is", "None", "or", "self", ".", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_r_bias'", ")", "\n", "self", ".", "r_w_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_w_bias'", ")", "\n", "", "super", "(", "TFRelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn._rel_shift": [[160, 169], ["modeling_tf_utils.shape_list", "tensorflow.pad", "tensorflow.reshape", "tensorflow.slice", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "_rel_shift", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "shape_list", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "x_size", "[", "1", "]", "+", "1", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", "]", ")", "\n", "x", "=", "tf", ".", "slice", "(", "x", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "x_size", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.call": [[170, 249], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn._rel_shift", "tensorflow.nn.softmax", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.dropatt", "tensorflow.einsum", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.o_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.drop", "tensorflow.concat", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.r_net", "tensorflow.split", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.r_net", "tensorflow.split", "modeling_tf_utils.shape_list", "outputs.append", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.layer_norm", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.layer_norm", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.layer_norm"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "w", ",", "r", ",", "attn_mask", ",", "mems", ",", "head_mask", "=", "inputs", "\n", "qlen", ",", "rlen", ",", "bsz", "=", "shape_list", "(", "w", ")", "[", "0", "]", ",", "shape_list", "(", "r", ")", "[", "0", "]", ",", "shape_list", "(", "w", ")", "[", "1", "]", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "tf", ".", "split", "(", "w_heads", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "tf", ".", "split", "(", "w_heads", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "shape_list", "(", "w_head_k", ")", "[", "0", "]", "\n", "\n", "w_head_q", "=", "tf", ".", "reshape", "(", "w_head_q", ",", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "tf", ".", "reshape", "(", "w_head_k", ",", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_v", "=", "tf", ".", "reshape", "(", "w_head_v", ",", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "tf", ".", "reshape", "(", "r_head_k", ",", "(", "rlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q", "=", "w_head_q", "+", "self", ".", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "AC", "=", "tf", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "rw_head_q", ",", "w_head_k", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "rr_head_q", "=", "w_head_q", "+", "self", ".", "r_r_bias", "\n", "BD", "=", "tf", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "rr_head_q", ",", "r_head_k", ")", "# qlen x klen x bsz x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "BD", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", "=", "attn_score", "*", "self", ".", "scale", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask_t", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "attn_score", "=", "attn_score", "*", "(", "1", "-", "attn_mask_t", ")", "-", "1e30", "*", "attn_mask_t", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "attn_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "attn_score", ",", "axis", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "#### compute attention vector", "\n", "", "attn_vec", "=", "tf", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "attn_prob", ",", "w_head_v", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec_sizes", "=", "shape_list", "(", "attn_vec", ")", "\n", "attn_vec", "=", "tf", ".", "reshape", "(", "attn_vec", ",", "\n", "(", "attn_vec_sizes", "[", "0", "]", ",", "attn_vec_sizes", "[", "1", "]", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ",", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "w", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.__init__": [[252, 273], ["super().__init__", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn", "modeling_tf_transfo_xl.TFPositionwiseFF"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "\n", "dropatt", "=", "0.", ",", "pre_lnorm", "=", "False", ",", "\n", "r_w_bias", "=", "None", ",", "\n", "r_r_bias", "=", "None", ",", "\n", "output_attentions", "=", "False", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "init_std", "=", "0.02", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dec_attn", "=", "TFRelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "\n", "mem_len", "=", "mem_len", ",", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ",", "\n", "r_w_bias", "=", "r_w_bias", ",", "r_r_bias", "=", "r_r_bias", ",", "init_std", "=", "init_std", ",", "\n", "output_attentions", "=", "output_attentions", ",", "\n", "layer_norm_epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "'dec_attn'", ")", "\n", "self", ".", "pos_ff", "=", "TFPositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "pre_lnorm", ",", "init_std", "=", "init_std", ",", "\n", "layer_norm_epsilon", "=", "layer_norm_epsilon", ",", "\n", "name", "=", "'pos_ff'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.call": [[274, 283], ["modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.dec_attn", "modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "dec_inp", ",", "r", ",", "dec_attn_mask", ",", "mems", ",", "head_mask", "=", "inputs", "\n", "attn_outputs", "=", "self", ".", "dec_attn", "(", "[", "dec_inp", ",", "r", ",", "dec_attn_mask", ",", "\n", "mems", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding.__init__": [[286, 314], ["super().__init__", "range", "len", "modeling_tf_transfo_xl.TFAdaptiveEmbedding.emb_layers.append", "tensorflow.keras.layers.Embedding", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "init_std", "=", "0.02", ",", "\n", "sample_softmax", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "init_std", "=", "init_std", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "[", "]", "\n", "self", ".", "emb_projs", "=", "[", "]", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "\n", "d_emb_i", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "name", "=", "'emb_layers_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding.build": [[315, 323], ["range", "super().build", "len", "modeling_tf_transfo_xl.TFAdaptiveEmbedding.emb_projs.append", "modeling_tf_transfo_xl.TFAdaptiveEmbedding.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["", "", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "            ", "d_emb_i", "=", "self", ".", "d_embed", "//", "(", "self", ".", "div_val", "**", "i", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "self", ".", "add_weight", "(", "shape", "=", "(", "d_emb_i", ",", "self", ".", "d_proj", ")", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "init_std", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'emb_projs_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "", "super", "(", "TFAdaptiveEmbedding", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding.call": [[324, 348], ["tensorflow.reshape", "tensorflow.zeros", "range", "tensorflow.reshape", "len", "tensorflow.einsum", "tensorflow.cast", "tensorflow.scatter_nd", "modeling_tf_utils.shape_list", "tensorflow.boolean_mask", "tensorflow.where", "tensorflow.cast", "modeling_tf_utils.shape_list", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "", "else", ":", "\n", "            ", "inp_flat", "=", "tf", ".", "reshape", "(", "inp", ",", "(", "-", "1", ",", ")", ")", "\n", "emb_flat", "=", "tf", ".", "zeros", "(", "[", "shape_list", "(", "inp_flat", ")", "[", "0", "]", ",", "self", ".", "d_proj", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "\n", "inp_i", "=", "tf", ".", "boolean_mask", "(", "inp_flat", ",", "mask_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "tf", ".", "einsum", "(", "'id,de->ie'", ",", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "mask_idx", "=", "tf", ".", "cast", "(", "tf", ".", "where", "(", "mask_i", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "emb_flat", "+=", "tf", ".", "scatter_nd", "(", "mask_idx", ",", "emb_i", ",", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "emb_flat", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "\n", "", "embed_shape", "=", "shape_list", "(", "inp", ")", "+", "[", "self", ".", "d_proj", "]", "\n", "embed", "=", "tf", ".", "reshape", "(", "emb_flat", ",", "embed_shape", ")", "\n", "\n", "", "embed", "*=", "self", ".", "emb_scale", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.__init__": [[351, 403], ["super().__init__", "modeling_tf_transfo_xl.TFAdaptiveEmbedding", "tensorflow.keras.layers.Dropout", "range", "modeling_tf_transfo_xl.TFPositionalEmbedding", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.layers.append", "modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransfoXLMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "n_token", "=", "config", ".", "n_token", "\n", "\n", "self", ".", "d_embed", "=", "config", ".", "d_embed", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "untie_r", "=", "config", ".", "untie_r", "\n", "\n", "self", ".", "word_emb", "=", "TFAdaptiveEmbedding", "(", "config", ".", "n_token", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "config", ".", "cutoffs", ",", "\n", "div_val", "=", "config", ".", "div_val", ",", "init_std", "=", "config", ".", "init_std", ",", "name", "=", "'word_emb'", ")", "\n", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "config", ".", "tgt_len", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "ext_len", "=", "config", ".", "ext_len", "\n", "self", ".", "max_klen", "=", "config", ".", "tgt_len", "+", "config", ".", "ext_len", "+", "config", ".", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "if", "config", ".", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "TFRelPartialLearnableDecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "tgt_len", "=", "config", ".", "tgt_len", ",", "ext_len", "=", "config", ".", "ext_len", ",", "mem_len", "=", "config", ".", "mem_len", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "self", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "self", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ",", "\n", "layer_norm_epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "\n", "init_std", "=", "config", ".", "init_std", ",", "\n", "name", "=", "'layers_._{}'", ".", "format", "(", "i", ")", ")", "\n", ")", "\n", "", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "TFPositionalEmbedding", "(", "self", ".", "d_model", ",", "name", "=", "'pos_emb'", ")", "\n", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.build": [[404, 415], ["super().build", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.add_weight", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.add_weight"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "not", "self", ".", "untie_r", ":", "\n", "            ", "self", ".", "r_w_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_w_bias'", ")", "\n", "self", ".", "r_r_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_r_bias'", ")", "\n", "", "super", "(", "TFTransfoXLMainLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.get_input_embeddings": [[416, 418], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer._resize_token_embeddings": [[419, 421], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.backward_compatible": [[422, 424], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.reset_length": [[425, 429], ["None"], "methods", ["None"], ["", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer._prune_heads": [[430, 432], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.init_mems": [[433, 443], ["range", "tensorflow.zeros", "mems.append"], "methods", ["None"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "                ", "empty", "=", "tf", ".", "zeros", "(", "[", "self", ".", "mem_len", ",", "bsz", ",", "self", ".", "d_model", "]", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer._update_mems": [[444, 466], ["max", "range", "len", "len", "max", "len", "tensorflow.concat", "tensorflow.stop_gradient", "new_mems.append"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "\n", "            ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "axis", "=", "0", ")", "\n", "tf", ".", "stop_gradient", "(", "cat", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ")", "\n", "\n", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.call": [[467, 578], ["isinstance", "tensorflow.ones", "tensorflow.linalg.band_part", "tensorflow.linalg.band_part", "tensorflow.zeros", "tensorflow.concat", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.drop", "modeling_tf_transfo_xl.TFTransfoXLMainLayer._update_mems", "isinstance", "ValueError", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.init_mems", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.word_emb", "tensorflow.linalg.band_part", "tensorflow.concat", "tensorflow.range", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.pos_emb", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.drop", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.drop", "enumerate", "tensorflow.transpose", "list.append", "list", "outputs.append", "list", "outputs.append", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "tensorflow.transpose", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.minimum", "list.append", "layer", "len", "len", "len", "len", "tensorflow.transpose", "ValueError", "list.append", "tensorflow.transpose", "tensorflow.transpose", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel._update_mems", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "mems", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "mems", "\n", "head_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "mems", "=", "inputs", ".", "get", "(", "'mems'", ",", "mems", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "# the original code for Transformer-XL used shapes [len, bsz] but we want a unified interface in the library", "\n", "# so we transpose here from shape [bsz, len] to shape [len, bsz]", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "tf", ".", "transpose", "(", "input_ids", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "transpose", "(", "inputs_embeds", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "self", ".", "init_mems", "(", "bsz", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb", "=", "self", ".", "word_emb", "(", "input_ids", ")", "\n", "\n", "", "mlen", "=", "shape_list", "(", "mems", "[", "0", "]", ")", "[", "0", "]", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "attn_mask", "=", "tf", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ")", "\n", "mask_u", "=", "tf", ".", "linalg", ".", "band_part", "(", "attn_mask", ",", "0", ",", "-", "1", ")", "\n", "mask_dia", "=", "tf", ".", "linalg", ".", "band_part", "(", "attn_mask", ",", "0", ",", "0", ")", "\n", "attn_mask_pad", "=", "tf", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", "\n", "dec_attn_mask", "=", "tf", ".", "concat", "(", "[", "attn_mask_pad", ",", "mask_u", "-", "mask_dia", "]", ",", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_l", "=", "tf", ".", "linalg", ".", "band_part", "(", "attn_mask", ",", "-", "1", ",", "0", ")", "\n", "dec_attn_mask", "=", "tf", ".", "concat", "(", "[", "dec_attn_mask", "[", ":", ",", ":", "qlen", "]", "+", "mask_l", "-", "mask_dia", ",", "\n", "dec_attn_mask", "[", ":", ",", "qlen", ":", "]", "]", ",", "1", ")", "\n", "# ::: PyTorch masking code for reference :::", "\n", "# if self.same_length:", "\n", "#     all_ones = word_emb.new_ones((qlen, klen), dtype=torch.uint8)", "\n", "#     mask_len = klen - self.mem_len", "\n", "#     if mask_len > 0:", "\n", "#         mask_shift_len = qlen - mask_len", "\n", "#     else:", "\n", "#         mask_shift_len = qlen", "\n", "#     dec_attn_mask = (torch.triu(all_ones, 1+mlen)", "\n", "#             + torch.tril(all_ones, -mask_shift_len))[:, :, None] # -1", "\n", "# else:", "\n", "#     dec_attn_mask = torch.triu(", "\n", "#         word_emb.new_ones((qlen, klen), dtype=torch.uint8), diagonal=1+mlen)[:,:,None]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "attentions", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "tf", ".", "range", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", "=", "tf", ".", "minimum", "(", "pos_seq", ",", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ",", "training", "=", "training", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ",", "training", "=", "training", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "layer_outputs", "=", "layer", "(", "[", "core_out", ",", "pos_emb", ",", "dec_attn_mask", ",", "\n", "mems_i", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ",", "training", "=", "training", ")", "\n", "\n", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "# We transpose back here to shape [bsz, len, hidden_dim]", "\n", "outputs", "=", "[", "tf", ".", "transpose", "(", "core_out", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", ",", "new_mems", "]", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "# Add last layer and transpose to library standard shape [bsz, len, hidden_dim]", "\n", "            ", "hids", ".", "append", "(", "core_out", ")", "\n", "hids", "=", "list", "(", "tf", ".", "transpose", "(", "t", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "for", "t", "in", "hids", ")", "\n", "outputs", ".", "append", "(", "hids", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# Transpose to library standard shape [bsz, n_heads, query_seq_len, key_seq_len]", "\n", "            ", "attentions", "=", "list", "(", "tf", ".", "transpose", "(", "t", ",", "perm", "=", "(", "2", ",", "3", ",", "0", ",", "1", ")", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", ".", "append", "(", "attentions", ")", "\n", "", "return", "outputs", "# last hidden state, new_mems, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLModel.__init__": [[681, 684], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_transfo_xl.TFTransfoXLMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransfoXLModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFTransfoXLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLModel.call": [[685, 688], ["modeling_tf_transfo_xl.TFTransfoXLModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.__init__": [[723, 734], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_transfo_xl.TFTransfoXLMainLayer", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TFTransfoXLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "TFTransfoXLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "sample_softmax", "=", "config", ".", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "config", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "TFAdaptiveSoftmaxMask", "(", "config", ".", "n_token", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "\n", "config", ".", "cutoffs", ",", "div_val", "=", "config", ".", "div_val", ",", "name", "=", "'crit'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.reset_length": [[735, 737], ["modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.transformer.reset_length"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length"], ["", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "transformer", ".", "reset_length", "(", "tgt_len", ",", "ext_len", ",", "mem_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.init_mems": [[738, 740], ["modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.transformer.init_mems"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "init_mems", "(", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.call": [[741, 778], ["isinstance", "modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.transformer", "isinstance", "modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.crit", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "mems", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "mems", "\n", "head_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "inputs_embeds", "\n", "labels", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "labels", "\n", "assert", "len", "(", "inputs", ")", "<=", "5", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "mems", "=", "inputs", ".", "get", "(", "'mems'", ",", "mems", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "labels", "=", "inputs", ".", "get", "(", "'labels'", ",", "labels", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "5", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "shape_list", "(", "input_ids", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "\n", "", "transformer_outputs", "=", "self", ".", "transformer", "(", "[", "input_ids", ",", "mems", ",", "head_mask", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "\n", "last_hidden", "=", "transformer_outputs", "[", "0", "]", "\n", "pred_hid", "=", "last_hidden", "[", ":", ",", "-", "tgt_len", ":", "]", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "training", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "# pred_hid = tf.reshape(pred_hid, (-1, shape_list(pred_hid)[-1]))", "\n", "            ", "softmax_output", "=", "self", ".", "crit", "(", "[", "pred_hid", ",", "labels", "]", ",", "training", "=", "training", ")", "\n", "# softmax_output = tf.reshape(softmax_output, (bsz, tgt_len, -1))", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "\n", "", "return", "outputs", "# logits, new_mems, (all hidden states), (all attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaEmbeddings.__init__": [[45, 48], ["modeling_tf_bert.TFBertEmbeddings.__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaEmbeddings._embedding": [[49, 62], ["super()._embedding", "tensorflow.shape", "tensorflow.shape", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._embedding"], ["", "def", "_embedding", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "=", "inputs", "\n", "\n", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "seq_length", "=", "tf", ".", "shape", "(", "input_ids", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "seq_length", "=", "tf", ".", "shape", "(", "inputs_embeds", ")", "[", "1", "]", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "return", "super", "(", "TFRobertaEmbeddings", ",", "self", ")", ".", "_embedding", "(", "[", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaMainLayer.__init__": [[68, 71], ["modeling_tf_bert.TFBertMainLayer.__init__", "modeling_tf_roberta.TFRobertaEmbeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaMainLayer", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "embeddings", "=", "TFRobertaEmbeddings", "(", "config", ",", "name", "=", "'embeddings'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaMainLayer.get_input_embeddings": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaModel.__init__": [[207, 210], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "'roberta'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaModel.call": [[211, 214], ["modeling_tf_roberta.TFRobertaModel.roberta"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaLMHead.__init__": [[218, 230], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Activation", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaLMHead.build": [[231, 237], ["modeling_tf_roberta.TFRobertaLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFRobertaLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaLMHead.call": [[238, 247], ["modeling_tf_roberta.TFRobertaLMHead.dense", "modeling_tf_roberta.TFRobertaLMHead.act", "modeling_tf_roberta.TFRobertaLMHead.layer_norm", "modeling_tf_roberta.TFRobertaLMHead.decoder"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ",", "mode", "=", "\"linear\"", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForMaskedLM.__init__": [[284, 289], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer", "modeling_tf_roberta.TFRobertaLMHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "\"roberta\"", ")", "\n", "self", ".", "lm_head", "=", "TFRobertaLMHead", "(", "config", ",", "self", ".", "roberta", ".", "embeddings", ",", "name", "=", "\"lm_head\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForMaskedLM.get_output_embeddings": [[290, 292], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForMaskedLM.call": [[293, 302], ["modeling_tf_roberta.TFRobertaForMaskedLM.roberta", "modeling_tf_roberta.TFRobertaForMaskedLM.lm_head"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaClassificationHead.__init__": [[307, 317], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaClassificationHead", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "name", "=", "\"dense\"", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"out_proj\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaClassificationHead.call": [[318, 325], ["modeling_tf_roberta.TFRobertaClassificationHead.dropout", "modeling_tf_roberta.TFRobertaClassificationHead.dense", "modeling_tf_roberta.TFRobertaClassificationHead.dropout", "modeling_tf_roberta.TFRobertaClassificationHead.out_proj"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "features", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForSequenceClassification.__init__": [[356, 362], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer", "modeling_tf_roberta.TFRobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "\"roberta\"", ")", "\n", "self", ".", "classifier", "=", "TFRobertaClassificationHead", "(", "config", ",", "name", "=", "\"classifier\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForSequenceClassification.call": [[363, 372], ["modeling_tf_roberta.TFRobertaForSequenceClassification.roberta", "modeling_tf_roberta.TFRobertaForSequenceClassification.classifier", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForTokenClassification.__init__": [[402, 411], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "'roberta'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_roberta.TFRobertaForTokenClassification.call": [[412, 423], ["modeling_tf_roberta.TFRobertaForTokenClassification.roberta", "modeling_tf_roberta.TFRobertaForTokenClassification.dropout", "modeling_tf_roberta.TFRobertaForTokenClassification.classifier", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# scores, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch": [[46, 73], ["transformers.XLNetConfig.from_json_file", "transformers.load_tf_weights_in_xlnet", "os.path.join", "os.path.join", "print", "torch.save", "print", "finetuning_task.lower", "print", "transformers.XLNetForSequenceClassification", "transformers.XLNetLMHeadModel.state_dict", "open", "f.write", "transformers.XLNetForQuestionAnswering", "transformers.XLNetLMHeadModel", "os.path.abspath", "os.path.abspath", "XLNetConfig.from_json_file.to_json_string", "str"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.load_tf_weights_in_xlnet", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["def", "convert_xlnet_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_folder_path", ",", "finetuning_task", "=", "None", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "XLNetConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "\n", "finetuning_task", "=", "finetuning_task", ".", "lower", "(", ")", "if", "finetuning_task", "is", "not", "None", "else", "\"\"", "\n", "if", "finetuning_task", "in", "GLUE_TASKS_NUM_LABELS", ":", "\n", "        ", "print", "(", "\"Building PyTorch XLNetForSequenceClassification model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "config", ".", "finetuning_task", "=", "finetuning_task", "\n", "config", ".", "num_labels", "=", "GLUE_TASKS_NUM_LABELS", "[", "finetuning_task", "]", "\n", "model", "=", "XLNetForSequenceClassification", "(", "config", ")", "\n", "", "elif", "'squad'", "in", "finetuning_task", ":", "\n", "        ", "config", ".", "finetuning_task", "=", "finetuning_task", "\n", "model", "=", "XLNetForQuestionAnswering", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "XLNetLMHeadModel", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "", "load_tf_weights_in_xlnet", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "WEIGHTS_NAME", ")", "\n", "pytorch_config_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "CONFIG_NAME", ")", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_weights_dump_path", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_config_dump_path", ")", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.__init__": [[39, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "PreTrainedEncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.from_pretrained": [[44, 160], ["kwargs_common.copy", "kwargs_common.copy", "kwargs_common.copy.update", "kwargs_common.copy.update", "kwargs_common.copy.pop", "kwargs_common.copy.pop", "cls", "modeling_auto.AutoModel.from_pretrained", "modeling_auto.AutoModelWithLMHead.from_pretrained", "kwargs.items", "kwargs.items", "argument.startswith", "kwargs.items", "argument.startswith", "argument.startswith", "argument.startswith", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "\n", "cls", ",", "\n", "encoder_pretrained_model_name_or_path", "=", "None", ",", "\n", "decoder_pretrained_model_name_or_path", "=", "None", ",", "\n", "*", "model_args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "r\"\"\" Instantiates an encoder and a decoder from one or two base classes of the library from pre-trained model checkpoints.\n\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you need to first set it back in training mode with `model.train()`\n\n        Params:\n            encoder_pretrained_model_name_or_path: information necessary to initiate the encoder. Either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/encoder``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            decoder_pretrained_model_name_or_path: information necessary to initiate the decoder. Either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/decoder``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments.\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n                You can specify kwargs sepcific for the encoder and decoder by prefixing the key with `encoder_` and `decoder_` respectively. (e.g. ``decoder_output_attention=True``). The remaining kwargs will be passed to both encoders and decoders.\n\n        Examples::\n\n            model = PreTrainedEncoderDecoder.from_pretained('bert-base-uncased', 'bert-base-uncased') # initialize Bert2Bert\n        \"\"\"", "\n", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as a whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "kwargs_common", "=", "{", "\n", "argument", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "and", "not", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "}", "\n", ")", "\n", "kwargs_decoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", ")", "\n", "\n", "# Load and initialize the encoder and decoder", "\n", "# The distinction between encoder and decoder at the model level is made", "\n", "# by the value of the flag `is_decoder` that we need to set correctly.", "\n", "encoder", "=", "kwargs_encoder", ".", "pop", "(", "\"model\"", ",", "None", ")", "\n", "if", "encoder", "is", "None", ":", "\n", "            ", "encoder", "=", "AutoModel", ".", "from_pretrained", "(", "\n", "encoder_pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs_encoder", "\n", ")", "\n", "", "encoder", ".", "config", ".", "is_decoder", "=", "False", "\n", "\n", "decoder", "=", "kwargs_decoder", ".", "pop", "(", "\"model\"", ",", "None", ")", "\n", "if", "decoder", "is", "None", ":", "\n", "            ", "decoder", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "\n", "decoder_pretrained_model_name_or_path", ",", "**", "kwargs_decoder", "\n", ")", "\n", "", "decoder", ".", "config", ".", "is_decoder", "=", "True", "\n", "\n", "model", "=", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.save_pretrained": [[161, 169], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.encoder.save_pretrained", "modeling_encoder_decoder.PreTrainedEncoderDecoder.decoder.save_pretrained", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a Seq2Seq model and its configuration file in a format such\n        that it can be loaded using `:func:`~transformers.PreTrainedEncoderDecoder.from_pretrained`\n\n        We save the encoder' and decoder's parameters in two separate directories.\n        \"\"\"", "\n", "self", ".", "encoder", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\"encoder\"", ")", ")", "\n", "self", ".", "decoder", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\"decoder\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.forward": [[170, 234], ["kwargs_common.copy", "kwargs_common.copy", "kwargs_common.copy.update", "kwargs_common.copy.update", "kwargs_common.copy.pop", "kwargs_common.copy.get", "modeling_encoder_decoder.PreTrainedEncoderDecoder.decoder", "modeling_encoder_decoder.PreTrainedEncoderDecoder.encoder", "kwargs.items", "kwargs.items", "argument.startswith", "kwargs.items", "argument.startswith", "argument.startswith", "argument.startswith", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "def", "forward", "(", "self", ",", "encoder_input_ids", ",", "decoder_input_ids", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" The forward pass on a seq2eq depends what we are performing:\n\n        - During training we perform one forward pass through both the encoder\n          and decoder;\n        - During prediction, we perform one forward pass through the encoder,\n          and then perform several forward passes with the encoder's hidden\n          state through the decoder to decode a full sequence.\n\n        Therefore, we skip the forward pass on the encoder if an argument named\n        `encoder_hidden_state` is passed to this function.\n\n        Params:\n            encoder_input_ids: ``torch.LongTensor`` of shape ``(batch_size, sequence_length)``\n                Indices of encoder input sequence tokens in the vocabulary.\n            decoder_input_ids: ``torch.LongTensor`` of shape ``(batch_size, sequence_length)``\n                Indices of decoder input sequence tokens in the vocabulary.\n            kwargs: (`optional`) Remaining dictionary of keyword arguments.\n        \"\"\"", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "kwargs_common", "=", "{", "\n", "argument", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "and", "not", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "}", "\n", ")", "\n", "kwargs_decoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", ")", "\n", "\n", "# Encode if needed (training, first prediction pass)", "\n", "encoder_hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"hidden_states\"", ",", "None", ")", "\n", "if", "encoder_hidden_states", "is", "None", ":", "\n", "            ", "encoder_outputs", "=", "self", ".", "encoder", "(", "encoder_input_ids", ",", "**", "kwargs_encoder", ")", "\n", "encoder_hidden_states", "=", "encoder_outputs", "[", "\n", "0", "\n", "]", "# output the last layer hidden state", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", "=", "(", ")", "\n", "\n", "# Decode", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "encoder_hidden_states", "\n", "kwargs_decoder", "[", "\"encoder_attention_mask\"", "]", "=", "kwargs_encoder", ".", "get", "(", "\n", "\"attention_mask\"", ",", "None", "\n", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "decoder_input_ids", ",", "**", "kwargs_decoder", ")", "\n", "\n", "return", "decoder_outputs", "+", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.Model2Model.__init__": [[253, 256], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.__init__", "modeling_encoder_decoder.Model2Model.tie_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Model2Model", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.Model2Model.tie_weights": [[257, 274], ["None"], "methods", ["None"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tying the encoder and decoders' embeddings together.\n\n       We need for each to get down to the embedding weights. However the\n        different model classes are inconsistent to that respect:\n        - BertModel: embeddings.word_embeddings\n        - RoBERTa: embeddings.word_embeddings\n        - XLMModel: embeddings\n        - GPT2: wte\n        - BertForMaskedLM: bert.embeddings.word_embeddings\n        - RobertaForMaskedLM: roberta.embeddings.word_embeddings\n\n        argument of the XEmbedding layer for each model, but it is \"blocked\"\n        by a model-specific keyword (bert, )...\n        \"\"\"", "\n", "# self._tie_or_clone_weights(self.encoder, self.decoder)", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.Model2Model.from_pretrained": [[275, 293], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.from_pretrained", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "(", "\n", "\"bert\"", "not", "in", "pretrained_model_name_or_path", "\n", "or", "\"roberta\"", "in", "pretrained_model_name_or_path", "\n", "or", "\"distilbert\"", "in", "pretrained_model_name_or_path", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only the Bert model is currently supported.\"", ")", "\n", "\n", "", "model", "=", "super", "(", "Model2Model", ",", "cls", ")", ".", "from_pretrained", "(", "\n", "encoder_pretrained_model_name_or_path", "=", "pretrained_model_name_or_path", ",", "\n", "decoder_pretrained_model_name_or_path", "=", "pretrained_model_name_or_path", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_encoder_decoder.Model2LSTM.from_pretrained": [[296, 311], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.from_pretrained", "kwargs.get", "torch.nn.LSTM", "ValueError", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["    ", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", ".", "get", "(", "\"decoder_model\"", ",", "None", ")", "is", "None", ":", "\n", "# We will create a randomly initilized LSTM model as decoder", "\n", "            ", "if", "\"decoder_config\"", "not", "in", "kwargs", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"To load an LSTM in Encoder-Decoder model, please supply either: \"", "\n", "\"    - a torch.nn.LSTM model as `decoder_model` parameter (`decoder_model=lstm_model`), or\"", "\n", "\"    - a dictionary of configuration parameters that will be used to initialize a\"", "\n", "\"      torch.nn.LSTM model as `decoder_config` keyword argument. \"", "\n", "\"      E.g. `decoder_config={'input_size': 768, 'hidden_size': 768, 'num_layers': 2}`\"", "\n", ")", "\n", "", "kwargs", "[", "\"decoder_model\"", "]", "=", "torch", ".", "nn", ".", "LSTM", "(", "kwargs", ".", "pop", "(", "\"decoder_config\"", ")", ")", "\n", "", "model", "=", "super", "(", "Model2LSTM", ",", "cls", ")", ".", "from_pretrained", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.Embeddings.__init__": [[64, 76], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "modeling_distilbert.create_sinusoidal_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.create_sinusoidal_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "dim", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "n_pos", "=", "config", ".", "max_position_embeddings", ",", "\n", "dim", "=", "config", ".", "dim", ",", "\n", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "\n", "", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.Embeddings.forward": [[77, 100], ["input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling_distilbert.Embeddings.word_embeddings", "modeling_distilbert.Embeddings.position_embeddings", "modeling_distilbert.Embeddings.LayerNorm", "modeling_distilbert.Embeddings.dropout", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input_ids: torch.tensor(bs, max_seq_length)\n            The token ids to embed.\n\n        Outputs\n        -------\n        embeddings: torch.tensor(bs, max_seq_length, dim)\n            The embedded tokens (plus position embeddings, no token_type embeddings)\n        \"\"\"", "\n", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "# (max_seq_length)", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "# (bs, max_seq_length)", "\n", "\n", "word_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "# (bs, max_seq_length, dim)", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "word_embeddings", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.MultiHeadSelfAttention.__init__": [[102, 118], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "attention_dropout", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "k_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "v_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "out_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.MultiHeadSelfAttention.prune_heads": [[119, 139], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_distilbert.MultiHeadSelfAttention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "attention_head_size", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q_lin", "=", "prune_linear_layer", "(", "self", ".", "q_lin", ",", "index", ")", "\n", "self", ".", "k_lin", "=", "prune_linear_layer", "(", "self", ".", "k_lin", ",", "index", ")", "\n", "self", ".", "v_lin", "=", "prune_linear_layer", "(", "self", ".", "v_lin", ",", "index", ")", "\n", "self", ".", "out_lin", "=", "prune_linear_layer", "(", "self", ".", "out_lin", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "dim", "=", "attention_head_size", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.MultiHeadSelfAttention.forward": [[140, 197], ["query.size", "key.size", "modeling_distilbert.MultiHeadSelfAttention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        query: torch.tensor(bs, seq_length, dim)\n        key: torch.tensor(bs, seq_length, dim)\n        value: torch.tensor(bs, seq_length, dim)\n        mask: torch.tensor(bs, seq_length)\n\n        Outputs\n        -------\n        weights: torch.tensor(bs, n_heads, seq_length, seq_length)\n            Attention weights\n        context: torch.tensor(bs, seq_length, dim)\n            Contextualized layer. Optional: only if `output_attentions=True`\n        \"\"\"", "\n", "bs", ",", "q_length", ",", "dim", "=", "query", ".", "size", "(", ")", "\n", "k_length", "=", "key", ".", "size", "(", "1", ")", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "# assert key.size() == value.size()", "\n", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "\n", "mask_reshp", "=", "(", "bs", ",", "1", ",", "1", ",", "k_length", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\" separate heads \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\" group heads \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "query", ")", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "key", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "value", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "\n", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (bs, n_heads, q_length, k_length)", "\n", "mask", "=", "(", "mask", "==", "0", ")", ".", "view", "(", "mask_reshp", ")", ".", "expand_as", "(", "scores", ")", "# (bs, n_heads, q_length, k_length)", "\n", "scores", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "# (bs, n_heads, q_length, k_length)", "\n", "\n", "weights", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "scores", ")", "# (bs, n_heads, q_length, k_length)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ")", "# (bs, n_heads, q_length, k_length)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, q_length, dim)", "\n", "context", "=", "self", ".", "out_lin", "(", "context", ")", "# (bs, q_length, dim)", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "(", "context", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "context", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.FFN.__init__": [[199, 206], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "hidden_dim", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "hidden_dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "assert", "config", ".", "activation", "in", "[", "'relu'", ",", "'gelu'", "]", ",", "\"activation ({}) must be in ['relu', 'gelu']\"", ".", "format", "(", "config", ".", "activation", ")", "\n", "self", ".", "activation", "=", "gelu", "if", "config", ".", "activation", "==", "'gelu'", "else", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.FFN.forward": [[207, 213], ["modeling_distilbert.FFN.lin1", "modeling_distilbert.FFN.activation", "modeling_distilbert.FFN.lin2", "modeling_distilbert.FFN.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.TransformerBlock.__init__": [[215, 232], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "modeling_distilbert.MultiHeadSelfAttention", "torch.LayerNorm", "torch.LayerNorm", "modeling_distilbert.FFN", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "hidden_dim", "=", "config", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "self", ".", "activation", "=", "config", ".", "activation", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "config", ".", "dim", "%", "config", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "attention", "=", "MultiHeadSelfAttention", "(", "config", ")", "\n", "self", ".", "sa_layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "\n", "self", ".", "ffn", "=", "FFN", "(", "config", ")", "\n", "self", ".", "output_layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.TransformerBlock.forward": [[233, 264], ["modeling_distilbert.TransformerBlock.attention", "modeling_distilbert.TransformerBlock.sa_layer_norm", "modeling_distilbert.TransformerBlock.ffn", "modeling_distilbert.TransformerBlock.output_layer_norm", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: torch.tensor(bs, seq_length, dim)\n        attn_mask: torch.tensor(bs, seq_length)\n\n        Outputs\n        -------\n        sa_weights: torch.tensor(bs, n_heads, seq_length, seq_length)\n            The attention weights\n        ffn_output: torch.tensor(bs, seq_length, dim)\n            The output of the transformer block contextualization.\n        \"\"\"", "\n", "# Self-Attention", "\n", "sa_output", "=", "self", ".", "attention", "(", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "mask", "=", "attn_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "sa_output", ",", "sa_weights", "=", "sa_output", "# (bs, seq_length, dim), (bs, n_heads, seq_length, seq_length)", "\n", "", "else", ":", "# To handle these `output_attention` or `output_hidden_states` cases returning tuples", "\n", "            ", "assert", "type", "(", "sa_output", ")", "==", "tuple", "\n", "sa_output", "=", "sa_output", "[", "0", "]", "\n", "", "sa_output", "=", "self", ".", "sa_layer_norm", "(", "sa_output", "+", "x", ")", "# (bs, seq_length, dim)", "\n", "\n", "# Feed Forward Network", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "ffn_output", "=", "self", ".", "output_layer_norm", "(", "ffn_output", "+", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "\n", "output", "=", "(", "ffn_output", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "output", "=", "(", "sa_weights", ",", ")", "+", "output", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.Transformer.__init__": [[267, 275], ["torch.Module.__init__", "modeling_distilbert.TransformerBlock", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "layer", "=", "TransformerBlock", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.Transformer.forward": [[276, 326], ["enumerate", "layer_module", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: torch.tensor(bs, seq_length, dim)\n            Input sequence embedded.\n        attn_mask: torch.tensor(bs, seq_length)\n            Attention mask on the sequence.\n\n        Outputs\n        -------\n        hidden_state: torch.tensor(bs, seq_length, dim)\n            Sequence of hiddens states in the last (top) layer\n        all_hidden_states: Tuple[torch.tensor(bs, seq_length, dim)]\n            Tuple of length n_layers with the hidden states from each layer.\n            Optional: only if output_hidden_states=True\n        all_attentions: Tuple[torch.tensor(bs, n_heads, seq_length, seq_length)]\n            Tuple of length n_layers with the attention weights from each layer\n            Optional: only if output_attentions=True\n        \"\"\"", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "hidden_state", "=", "x", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "x", "=", "hidden_state", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "hidden_state", "=", "layer_outputs", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "2", "\n", "attentions", "=", "layer_outputs", "[", "0", "]", "\n", "all_attentions", "=", "all_attentions", "+", "(", "attentions", ",", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "1", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_state", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertPreTrainedModel._init_weights": [[338, 351], ["isinstance", "isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.weight.data.normal_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "module", ".", "weight", ".", "requires_grad", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertModel.__init__": [[421, 428], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.Embeddings", "modeling_distilbert.Transformer", "modeling_distilbert.DistilBertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "Embeddings", "(", "config", ")", "# Embeddings", "\n", "self", ".", "transformer", "=", "Transformer", "(", "config", ")", "# Encoder", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertModel.get_input_embeddings": [[429, 431], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertModel.set_input_embeddings": [[432, 434], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertModel._prune_heads": [[435, 442], ["heads_to_prune.items", "modeling_distilbert.DistilBertModel.transformer.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "transformer", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertModel.forward": [[443, 483], ["modeling_distilbert.DistilBertModel.transformer", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_distilbert.DistilBertModel.embeddings", "input_ids.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "ValueError", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_distilbert.DistilBertModel.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_distilbert.DistilBertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "\n", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "# (bs, seq_length)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "embeddings", "(", "input_ids", ")", "# (bs, seq_length, dim)", "\n", "", "tfmr_output", "=", "self", ".", "transformer", "(", "x", "=", "inputs_embeds", ",", "\n", "attn_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_state", "=", "tfmr_output", "[", "0", "]", "\n", "output", "=", "(", "hidden_state", ",", ")", "+", "tfmr_output", "[", "1", ":", "]", "\n", "\n", "return", "output", "# last-layer hidden-state, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForMaskedLM.__init__": [[517, 530], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "modeling_distilbert.DistilBertForMaskedLM.init_weights", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "vocab_transform", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "dim", ")", "\n", "self", ".", "vocab_layer_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "vocab_projector", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "vocab_size", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "mlm_loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForMaskedLM.get_output_embeddings": [[531, 533], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_projector", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForMaskedLM.forward": [[534, 552], ["modeling_distilbert.DistilBertForMaskedLM.distilbert", "modeling_distilbert.DistilBertForMaskedLM.vocab_transform", "modeling_distilbert.gelu", "modeling_distilbert.DistilBertForMaskedLM.vocab_layer_norm", "modeling_distilbert.DistilBertForMaskedLM.vocab_projector", "modeling_distilbert.DistilBertForMaskedLM.mlm_loss_fct", "modeling_distilbert.DistilBertForMaskedLM.view", "masked_lm_labels.view", "modeling_distilbert.DistilBertForMaskedLM.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.gelu"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "dlbrt_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "dlbrt_output", "[", "0", "]", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_transform", "(", "hidden_states", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "gelu", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_layer_norm", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_projector", "(", "prediction_logits", ")", "# (bs, seq_length, vocab_size)", "\n", "\n", "outputs", "=", "(", "prediction_logits", ",", ")", "+", "dlbrt_output", "[", "1", ":", "]", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "mlm_loss", "=", "self", ".", "mlm_loss_fct", "(", "prediction_logits", ".", "view", "(", "-", "1", ",", "prediction_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "mlm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (mlm_loss), prediction_logits, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForSequenceClassification.__init__": [[588, 598], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "modeling_distilbert.DistilBertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "pre_classifier", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "dim", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "num_labels", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "seq_classif_dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForSequenceClassification.forward": [[599, 622], ["modeling_distilbert.DistilBertForSequenceClassification.distilbert", "modeling_distilbert.DistilBertForSequenceClassification.pre_classifier", "modeling_distilbert.DistilBertForSequenceClassification.dropout", "modeling_distilbert.DistilBertForSequenceClassification.classifier", "torch.ReLU", "torch.ReLU", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "modeling_distilbert.DistilBertForSequenceClassification.view", "labels.view", "modeling_distilbert.DistilBertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_state", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_len, dim)", "\n", "pooled_output", "=", "hidden_state", "[", ":", ",", "0", "]", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "pre_classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "nn", ".", "ReLU", "(", ")", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "# (bs, dim)", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForQuestionAnswering.__init__": [[664, 673], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "modeling_distilbert.DistilBertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "num_labels", ")", "\n", "assert", "config", ".", "num_labels", "==", "2", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "qa_dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForQuestionAnswering.forward": [[674, 706], ["modeling_distilbert.DistilBertForQuestionAnswering.distilbert", "modeling_distilbert.DistilBertForQuestionAnswering.dropout", "modeling_distilbert.DistilBertForQuestionAnswering.qa_outputs", "modeling_distilbert.DistilBertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, max_query_len, dim)", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "# (bs, max_query_len, dim)", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "hidden_states", ")", "# (bs, max_query_len, 2)", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "# (bs, max_query_len)", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "# (bs, max_query_len)", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForTokenClassification.__init__": [[741, 750], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_distilbert.DistilBertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.DistilBertForTokenClassification.forward": [[751, 778], ["modeling_distilbert.DistilBertForTokenClassification.distilbert", "modeling_distilbert.DistilBertForTokenClassification.dropout", "modeling_distilbert.DistilBertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_distilbert.DistilBertForTokenClassification.view", "labels.view", "modeling_distilbert.DistilBertForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "distilbert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.gelu": [[50, 52], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_distilbert.create_sinusoidal_embeddings": [[53, 62], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["", "def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Attention.__init__": [[104, 121], ["torch.Module.__init__", "modeling_gpt2.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Attention.prune_heads": [[122, 143], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_gpt2.Attention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Attention._attn": [[144, 167], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_gpt2.Attention.attn_dropout", "modeling_gpt2.Attention.size", "modeling_gpt2.Attention.size", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "", "nd", ",", "ns", "=", "w", ".", "size", "(", "-", "2", ")", ",", "w", ".", "size", "(", "-", "1", ")", "\n", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", "ns", "-", "nd", ":", "ns", ",", ":", "ns", "]", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Attention.merge_heads": [[168, 172], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Attention.split_heads": [[173, 180], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (batch, head, head_features, seq_length)", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Attention.forward": [[181, 202], ["modeling_gpt2.Attention.c_attn", "modeling_gpt2.Attention.split", "modeling_gpt2.Attention.split_heads", "modeling_gpt2.Attention.split_heads", "modeling_gpt2.Attention.split_heads", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "modeling_gpt2.Attention._attn", "modeling_gpt2.Attention.merge_heads", "modeling_gpt2.Attention.c_proj", "modeling_gpt2.Attention.resid_dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer_past[].transpose", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "layer_past", "[", "1", "]", "# transpose back cf below", "\n", "key", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "key", ")", ",", "dim", "=", "-", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "value", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "value", ")", ")", "# transpose to have same shapes for stacking", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.MLP.__init__": [[205, 212], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.MLP.forward": [[213, 217], ["modeling_gpt2.MLP.act", "modeling_gpt2.MLP.c_proj", "modeling_gpt2.MLP.dropout", "modeling_gpt2.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Block.__init__": [[220, 227], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "modeling_gpt2.Attention", "torch.LayerNorm", "torch.LayerNorm", "modeling_gpt2.MLP"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_2", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.Block.forward": [[228, 241], ["modeling_gpt2.Block.attn", "modeling_gpt2.Block.mlp", "modeling_gpt2.Block.ln_1", "modeling_gpt2.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "output_attn", "=", "self", ".", "attn", "(", "self", ".", "ln_1", "(", "x", ")", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "\n", "x", "=", "x", "+", "a", "\n", "m", "=", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "m", "\n", "\n", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2PreTrainedModel.__init__": [[252, 254], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2PreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2PreTrainedModel._init_weights": [[255, 267], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2Model.__init__": [[353, 366], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "modeling_gpt2.GPT2Model.init_weights", "modeling_gpt2.Block", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2Model", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "wte", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "wpe", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "ln_f", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2Model.get_input_embeddings": [[367, 369], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2Model.set_input_embeddings": [[370, 372], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "wte", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2Model._prune_heads": [[373, 379], ["heads_to_prune.items", "modeling_gpt2.GPT2Model.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2Model.forward": [[380, 487], ["modeling_gpt2.GPT2Model.wpe", "modeling_gpt2.GPT2Model.drop", "enumerate", "modeling_gpt2.GPT2Model.ln_f", "hidden_states.view.view.view", "ValueError", "token_type_ids.view.view.view", "position_ids.unsqueeze().view.unsqueeze().view.view", "[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_gpt2.GPT2Model.wte", "modeling_gpt2.GPT2Model.wte", "zip", "block", "tuple", "input_ids.view.view.size", "input_ids.view.view.view", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "hidden_states.view.view.size", "tuple.append", "ValueError", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "t.view", "modeling_gpt2.GPT2Model.size", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "hidden_states.view.view.view", "modeling_gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "if", "position_ids", "is", "not", "None", ":", "\n", "            ", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "past", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ")", "\n", "", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_past", ":", "\n", "                ", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (presents), (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2LMHeadModel.__init__": [[531, 537], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "modeling_gpt2.GPT2Model", "torch.Linear", "torch.Linear", "modeling_gpt2.GPT2LMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2LMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2LMHeadModel.get_output_embeddings": [[538, 540], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2LMHeadModel.forward": [[541, 566], ["modeling_gpt2.GPT2LMHeadModel.transformer", "modeling_gpt2.GPT2LMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "past", "=", "past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2DoubleHeadsModel.__init__": [[635, 642], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "modeling_gpt2.GPT2Model", "torch.Linear", "torch.Linear", "modeling_utils.SequenceSummary", "modeling_gpt2.GPT2DoubleHeadsModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2DoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "multiple_choice_head", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2DoubleHeadsModel.get_output_embeddings": [[643, 645], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.GPT2DoubleHeadsModel.forward": [[646, 676], ["modeling_gpt2.GPT2DoubleHeadsModel.transformer", "modeling_gpt2.GPT2DoubleHeadsModel.lm_head", "modeling_gpt2.GPT2DoubleHeadsModel.multiple_choice_head().squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_gpt2.GPT2DoubleHeadsModel.multiple_choice_head", "modeling_gpt2.GPT2DoubleHeadsModel.view", "mc_labels.view", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "modeling_gpt2.GPT2DoubleHeadsModel.size", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "mc_token_ids", "=", "None", ",", "lm_labels", "=", "None", ",", "mc_labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "past", "=", "past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "hidden_states", ",", "mc_token_ids", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "mc_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "mc_logits", ".", "view", "(", "-", "1", ",", "mc_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "mc_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (lm loss), (mc loss), lm logits, mc logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.load_tf_weights_in_gpt2": [[45, 97], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "logger.error", "tf.train.load_variable.squeeze", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "gpt2_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'w'", "or", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'wpe'", "or", "l", "[", "0", "]", "==", "'wte'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.gelu": [[99, 101], ["torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.__init__": [[195, 222], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "XLNetLayerNorm", "torch.nn.Dropout", "ValueError", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetRelativeAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "if", "config", ".", "d_model", "%", "config", ".", "n_head", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "d_model", ",", "config", ".", "n_head", ")", ")", "\n", "\n", "", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "scale", "=", "1", "/", "(", "config", ".", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "k", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "o", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_s_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "seg_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "2", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "self", ".", "layer_norm", "=", "XLNetLayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.prune_heads": [[223, 225], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift": [[226, 238], ["torch.index_select.reshape", "torch.index_select.reshape", "torch.index_select", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rel_shift", "(", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"perform relative shift to form the relative attention score.\"\"\"", "\n", "x_size", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "1", "]", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", "\n", "x", "=", "x", "[", "1", ":", ",", "...", "]", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", "-", "1", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", "\n", "# x = x[:, 0:klen, :, :]", "\n", "x", "=", "torch", ".", "index_select", "(", "x", ",", "1", ",", "torch", ".", "arange", "(", "klen", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij": [[239, 253], ["torch.index_select.reshape", "torch.index_select.reshape", "torch.index_select", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rel_shift_bnij", "(", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", ",", "x_size", "[", "3", "]", ",", "x_size", "[", "2", "]", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", "-", "1", ")", "\n", "# Note: the tensor-slice form was faster in my testing than torch.index_select", "\n", "#       However, tracing doesn't like the nature of the slice, and if klen changes", "\n", "#       during the run then it'll fail, whereas index_select will be fine.", "\n", "x", "=", "torch", ".", "index_select", "(", "x", ",", "3", ",", "torch", ".", "arange", "(", "klen", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "# x = x[:, :, :, :klen]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core": [[254, 295], ["torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij", "torch.nn.functional.softmax", "modeling_xlnet.XLNetRelativeAttention.dropout", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij"], ["", "def", "rel_attn_core", "(", "self", ",", "q_head", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "None", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Core relative positional attention operations.\"\"\"", "\n", "\n", "# content based attention score", "\n", "ac", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->bnij'", ",", "q_head", "+", "self", ".", "r_w_bias", ",", "k_head_h", ")", "\n", "\n", "# position based attention score", "\n", "bd", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->bnij'", ",", "q_head", "+", "self", ".", "r_r_bias", ",", "k_head_r", ")", "\n", "bd", "=", "self", ".", "rel_shift_bnij", "(", "bd", ",", "klen", "=", "ac", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# segment based attention score", "\n", "if", "seg_mat", "is", "None", ":", "\n", "            ", "ef", "=", "0", "\n", "", "else", ":", "\n", "            ", "ef", "=", "torch", ".", "einsum", "(", "'ibnd,snd->ibns'", ",", "q_head", "+", "self", ".", "r_s_bias", ",", "self", ".", "seg_embed", ")", "\n", "ef", "=", "torch", ".", "einsum", "(", "'ijbs,ibns->bnij'", ",", "seg_mat", ",", "ef", ")", "\n", "\n", "# merge attention scores and perform masking", "\n", "", "attn_score", "=", "(", "ac", "+", "bd", "+", "ef", ")", "*", "self", ".", "scale", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "# attn_score = attn_score * (1 - attn_mask) - 1e30 * attn_mask", "\n", "            ", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "65500", "*", "torch", ".", "einsum", "(", "'ijbn->bnij'", ",", "attn_mask", ")", "\n", "", "else", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "1e30", "*", "torch", ".", "einsum", "(", "'ijbn->bnij'", ",", "attn_mask", ")", "\n", "\n", "# attention probability", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "3", ")", "\n", "attn_prob", "=", "self", ".", "dropout", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "torch", ".", "einsum", "(", "'ijbn->bnij'", ",", "head_mask", ")", "\n", "\n", "# attention output", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'bnij,jbnd->ibnd'", ",", "attn_prob", ",", "v_head_h", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "attn_vec", ",", "torch", ".", "einsum", "(", "'bnij->ijbn'", ",", "attn_prob", ")", "\n", "\n", "", "return", "attn_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.post_attention": [[296, 307], ["torch.einsum", "modeling_xlnet.XLNetRelativeAttention.dropout", "modeling_xlnet.XLNetRelativeAttention.layer_norm"], "methods", ["None"], ["", "def", "post_attention", "(", "self", ",", "h", ",", "attn_vec", ",", "residual", "=", "True", ")", ":", "\n", "        ", "\"\"\"Post-attention processing.\"\"\"", "\n", "# post-attention projection (back to `d_model`)", "\n", "attn_out", "=", "torch", ".", "einsum", "(", "'ibnd,hnd->ibh'", ",", "attn_vec", ",", "self", ".", "o", ")", "\n", "\n", "attn_out", "=", "self", ".", "dropout", "(", "attn_out", ")", "\n", "if", "residual", ":", "\n", "            ", "attn_out", "=", "attn_out", "+", "h", "\n", "", "output", "=", "self", ".", "layer_norm", "(", "attn_out", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetRelativeAttention.forward": [[308, 400], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.cat", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "torch.cat", "mems.dim", "mems.dim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core"], ["", "def", "forward", "(", "self", ",", "h", ",", "g", ",", "\n", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "\n", "mems", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "g", "is", "not", "None", ":", "\n", "###### Two-stream attention with relative positional encoding.", "\n", "# content based attention score", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content-based key head", "\n", "", "k_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "\n", "# content-based value head", "\n", "v_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# position-based key head", "\n", "k_head_r", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "##### h-stream", "\n", "# content-stream query head", "\n", "q_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec_h", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_h", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec_h", ",", "attn_prob_h", "=", "attn_vec_h", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "h", ",", "attn_vec_h", ")", "\n", "\n", "##### g-stream", "\n", "# query-stream query head", "\n", "q_head_g", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "g", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "                ", "q_head_g", "=", "torch", ".", "einsum", "(", "'mbnd,mlb->lbnd'", ",", "q_head_g", ",", "target_mapping", ")", "\n", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_g", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "", "attn_vec_g", "=", "torch", ".", "einsum", "(", "'lbnd,mlb->mbnd'", ",", "attn_vec_g", ",", "target_mapping", ")", "\n", "", "else", ":", "\n", "                ", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_g", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "# post processing", "\n", "", "", "output_g", "=", "self", ".", "post_attention", "(", "g", ",", "attn_vec_g", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_prob", "=", "attn_prob_h", ",", "attn_prob_g", "\n", "\n", "", "", "else", ":", "\n", "###### Multi-head attention with relative positional encoding", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content heads", "\n", "", "q_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "k_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "v_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# positional heads", "\n", "k_head_r", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_h", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec", ",", "attn_prob", "=", "attn_vec", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "h", ",", "attn_vec", ")", "\n", "output_g", "=", "None", "\n", "\n", "", "outputs", "=", "(", "output_h", ",", "output_g", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn_prob", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetFeedForward.__init__": [[402, 413], ["torch.nn.Module.__init__", "XLNetLayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "XLNetLayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "layer_1", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "d_inner", ")", "\n", "self", ".", "layer_2", "=", "nn", ".", "Linear", "(", "config", ".", "d_inner", ",", "config", ".", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "if", "isinstance", "(", "config", ".", "ff_activation", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "ff_activation", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation_function", "=", "ACT2FN", "[", "config", ".", "ff_activation", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "config", ".", "ff_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetFeedForward.forward": [[414, 423], ["modeling_xlnet.XLNetFeedForward.layer_1", "modeling_xlnet.XLNetFeedForward.activation_function", "modeling_xlnet.XLNetFeedForward.dropout", "modeling_xlnet.XLNetFeedForward.layer_2", "modeling_xlnet.XLNetFeedForward.dropout", "modeling_xlnet.XLNetFeedForward.layer_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "output", "=", "inp", "\n", "output", "=", "self", ".", "layer_1", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_2", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "inp", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetLayer.__init__": [[425, 430], ["torch.nn.Module.__init__", "modeling_xlnet.XLNetRelativeAttention", "modeling_xlnet.XLNetFeedForward", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_attn", "=", "XLNetRelativeAttention", "(", "config", ")", "\n", "self", ".", "ff", "=", "XLNetFeedForward", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetLayer.forward": [[431, 445], ["modeling_xlnet.XLNetLayer.rel_attn", "modeling_xlnet.XLNetLayer.ff", "modeling_xlnet.XLNetLayer.ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output_h", ",", "output_g", ",", "\n", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "rel_attn", "(", "output_h", ",", "output_g", ",", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", "=", "mems", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "output_g", "is", "not", "None", ":", "\n", "            ", "output_g", "=", "self", ".", "ff", "(", "output_g", ")", "\n", "", "output_h", "=", "self", ".", "ff", "(", "output_h", ")", "\n", "\n", "outputs", "=", "(", "output_h", ",", "output_g", ")", "+", "outputs", "[", "2", ":", "]", "# Add again attentions if there are there", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetPreTrainedModel._init_weights": [[456, 475], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_", "isinstance", "isinstance", "param.data.normal_", "module.mask_emb.data.normal_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "XLNetLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "XLNetRelativeAttention", ")", ":", "\n", "            ", "for", "param", "in", "[", "module", ".", "q", ",", "module", ".", "k", ",", "module", ".", "v", ",", "module", ".", "o", ",", "module", ".", "r", ",", "\n", "module", ".", "r_r_bias", ",", "module", ".", "r_s_bias", ",", "module", ".", "r_w_bias", ",", "\n", "module", ".", "seg_embed", "]", ":", "\n", "                ", "param", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "XLNetModel", ")", ":", "\n", "                ", "module", ".", "mask_emb", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.__init__": [[596, 617], ["modeling_utils.PreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.ModuleList", "torch.nn.Dropout", "modeling_xlnet.XLNetModel.init_weights", "torch.FloatTensor", "modeling_xlnet.XLNetLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "reuse_len", "=", "config", ".", "reuse_len", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "bi_data", "=", "config", ".", "bi_data", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "config", ".", "n_token", ",", "config", ".", "d_model", ")", "\n", "self", ".", "mask_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "config", ".", "d_model", ")", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "XLNetLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.get_input_embeddings": [[618, 620], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.set_input_embeddings": [[621, 623], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel._prune_heads": [[624, 626], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.create_mask": [[627, 656], ["torch.ones", "torch.triu", "torch.zeros", "torch.cat", "torch.cat.to", "torch.tril", "torch.cat", "next", "modeling_xlnet.XLNetModel.parameters"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "create_mask", "(", "self", ",", "qlen", ",", "mlen", ")", ":", "\n", "        ", "\"\"\"\n        Creates causal attention mask. Float mask where 1.0 indicates masked, 0.0 indicates not-masked.\n\n        Args:\n            qlen: TODO Lysandre didn't fill\n            mlen: TODO Lysandre didn't fill\n\n        ::\n\n                  same_length=False:      same_length=True:\n                  <mlen > <  qlen >       <mlen > <  qlen >\n               ^ [0 0 0 0 0 1 1 1 1]     [0 0 0 0 0 1 1 1 1]\n                 [0 0 0 0 0 0 1 1 1]     [1 0 0 0 0 0 1 1 1]\n            qlen [0 0 0 0 0 0 0 1 1]     [1 1 0 0 0 0 0 1 1]\n                 [0 0 0 0 0 0 0 0 1]     [1 1 1 0 0 0 0 0 1]\n               v [0 0 0 0 0 0 0 0 0]     [1 1 1 1 0 0 0 0 0]\n\n        \"\"\"", "\n", "attn_mask", "=", "torch", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ")", "\n", "mask_up", "=", "torch", ".", "triu", "(", "attn_mask", ",", "diagonal", "=", "1", ")", "\n", "attn_mask_pad", "=", "torch", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "attn_mask_pad", ",", "mask_up", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_lo", "=", "torch", ".", "tril", "(", "attn_mask", ",", "diagonal", "=", "-", "1", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "ret", "[", ":", ",", ":", "qlen", "]", "+", "mask_lo", ",", "ret", "[", ":", ",", "qlen", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "ret", "=", "ret", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.cache_mem": [[657, 668], ["new_mem.detach", "torch.cat"], "methods", ["None"], ["", "def", "cache_mem", "(", "self", ",", "curr_out", ",", "prev_mem", ")", ":", "\n", "        ", "\"\"\"cache hidden states into memory.\"\"\"", "\n", "if", "self", ".", "reuse_len", "is", "not", "None", "and", "self", ".", "reuse_len", ">", "0", ":", "\n", "            ", "curr_out", "=", "curr_out", "[", ":", "self", ".", "reuse_len", "]", "\n", "\n", "", "if", "prev_mem", "is", "None", ":", "\n", "            ", "new_mem", "=", "curr_out", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "", "else", ":", "\n", "            ", "new_mem", "=", "torch", ".", "cat", "(", "[", "prev_mem", ",", "curr_out", "]", ",", "dim", "=", "0", ")", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "\n", "", "return", "new_mem", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.positional_embedding": [[669, 679], ["torch.einsum", "torch.cat", "pos_emb.expand.expand.expand", "torch.sin", "torch.cos"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "@", "staticmethod", "\n", "def", "positional_embedding", "(", "pos_seq", ",", "inv_freq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "einsum", "(", "'i,d->id'", ",", "pos_seq", ",", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "sinusoid_inp", ")", ",", "torch", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "pos_emb", "=", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "pos_emb", "=", "pos_emb", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.relative_positional_encoding": [[680, 718], ["torch.arange", "modeling_xlnet.XLNetModel.to", "torch.pow", "torch.arange", "torch.arange", "torch.cat", "torch.arange", "modeling_xlnet.XLNetModel.positional_embedding", "next", "ValueError", "fwd_pos_seq.clamp.clamp.clamp", "bwd_pos_seq.clamp.clamp.clamp", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "fwd_pos_seq.clamp.clamp.clamp", "modeling_xlnet.XLNetModel.parameters"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding"], ["", "def", "relative_positional_encoding", "(", "self", ",", "qlen", ",", "klen", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "\"\"\"create relative positional encoding.\"\"\"", "\n", "freq_seq", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "d_model", ",", "2.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "inv_freq", "=", "1", "/", "torch", ".", "pow", "(", "10000", ",", "(", "freq_seq", "/", "self", ".", "d_model", ")", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "# beg, end = klen - 1, -qlen", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "qlen", "\n", "", "elif", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "# beg, end = klen - 1, -1", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown `attn_type` {}.'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "", "if", "self", ".", "bi_data", ":", "\n", "            ", "fwd_pos_seq", "=", "torch", ".", "arange", "(", "beg", ",", "end", ",", "-", "1.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "bwd_pos_seq", "=", "torch", ".", "arange", "(", "-", "beg", ",", "-", "end", ",", "1.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "fwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "bwd_pos_seq", "=", "bwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "\n", "", "if", "bsz", "is", "not", "None", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "", "else", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ")", "\n", "\n", "", "pos_emb", "=", "torch", ".", "cat", "(", "[", "fwd_pos_emb", ",", "bwd_pos_emb", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fwd_pos_seq", "=", "torch", ".", "arange", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "fwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", ")", "\n", "\n", "", "pos_emb", "=", "pos_emb", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetModel.forward": [[719, 885], ["modeling_xlnet.XLNetModel.dropout", "modeling_xlnet.XLNetModel.relative_positional_encoding", "modeling_xlnet.XLNetModel.dropout", "enumerate", "modeling_xlnet.XLNetModel.dropout", "ValueError", "token_type_ids.transpose().contiguous", "input_mask.transpose().contiguous", "attention_mask.transpose().contiguous", "perm_mask.permute().contiguous", "target_mapping.permute().contiguous", "next", "next", "modeling_xlnet.XLNetModel.create_mask", "modeling_xlnet.XLNetModel.word_embedding", "modeling_xlnet.XLNetModel.mask_emb.expand", "modeling_xlnet.XLNetModel.dropout", "torch.nn.functional.one_hot().to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "layer_module", "tuple.append", "modeling_xlnet.XLNetModel.permute().contiguous", "tuple", "input_ids.transpose().contiguous.transpose().contiguous.transpose().contiguous", "modeling_xlnet.XLNetModel.parameters", "modeling_xlnet.XLNetModel.parameters", "ValueError", "torch.zeros().to", "torch.cat", "torch.eye().to", "torch.cat", "torch.zeros", "torch.cat", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "len", "tuple.append", "tuple.append", "tuple", "tuple", "inputs_embeds.transpose().contiguous", "ValueError", "token_type_ids.transpose", "input_mask.transpose", "attention_mask.transpose", "perm_mask.permute", "target_mapping.permute", "torch.nn.functional.one_hot", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_xlnet.XLNetModel.permute", "t.permute().contiguous", "input_ids.transpose().contiguous.transpose().contiguous.transpose", "torch.zeros", "torch.eye", "torch.zeros().to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_xlnet.XLNetModel.cache_mem", "h.permute().contiguous", "hs.permute().contiguous", "inputs_embeds.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_xlnet.XLNetModel.parameters", "t.permute", "torch.zeros", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "h.permute", "hs.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.create_mask", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "# the original code for XLNet uses shapes [len, bsz] with the batch dimension at the end", "\n", "# but we want a unified interface in the library with the batch size on the first dimension", "\n", "# so we move here the first dimension (batch) to the end", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "input_ids", ".", "shape", "[", "0", "]", ",", "input_ids", ".", "shape", "[", "1", "]", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "inputs_embeds", ".", "shape", "[", "0", "]", ",", "inputs_embeds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "token_type_ids", "=", "token_type_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "input_mask", "=", "input_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "attention_mask", "=", "attention_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "perm_mask", "=", "perm_mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "if", "perm_mask", "is", "not", "None", "else", "None", "\n", "target_mapping", "=", "target_mapping", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "if", "target_mapping", "is", "not", "None", "else", "None", "\n", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "shape", "[", "0", "]", "if", "mems", "is", "not", "None", "and", "mems", "[", "0", "]", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "dtype_float", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "device", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "##### Attention mask", "\n", "# causal attention mask", "\n", "if", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "            ", "attn_mask", "=", "self", ".", "create_mask", "(", "qlen", ",", "mlen", ")", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "", "elif", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported attention type: {}'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "# data mask: input mask & perm mask", "\n", "", "assert", "input_mask", "is", "None", "or", "attention_mask", "is", "None", ",", "\"You can only use one of input_mask (uses 1 for padding) \"", "\n", "\"or attention_mask (uses 0 for padding, added for compatbility with BERT). Please choose one.\"", "\n", "if", "input_mask", "is", "None", "and", "attention_mask", "is", "not", "None", ":", "\n", "            ", "input_mask", "=", "1.0", "-", "attention_mask", "\n", "", "if", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "+", "perm_mask", "\n", "", "elif", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "\n", "", "elif", "input_mask", "is", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "perm_mask", "\n", "", "else", ":", "\n", "            ", "data_mask", "=", "None", "\n", "\n", "", "if", "data_mask", "is", "not", "None", ":", "\n", "# all mems can be attended to", "\n", "            ", "if", "mlen", ">", "0", ":", "\n", "                ", "mems_mask", "=", "torch", ".", "zeros", "(", "[", "data_mask", ".", "shape", "[", "0", "]", ",", "mlen", ",", "bsz", "]", ")", ".", "to", "(", "data_mask", ")", "\n", "data_mask", "=", "torch", ".", "cat", "(", "[", "mems_mask", ",", "data_mask", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "attn_mask", "is", "None", ":", "\n", "                ", "attn_mask", "=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "attn_mask", "+=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "(", "attn_mask", ">", "0", ")", ".", "to", "(", "dtype_float", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "non_tgt_mask", "=", "-", "torch", ".", "eye", "(", "qlen", ")", ".", "to", "(", "attn_mask", ")", "\n", "if", "mlen", ">", "0", ":", "\n", "                ", "non_tgt_mask", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", ".", "to", "(", "attn_mask", ")", ",", "non_tgt_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "non_tgt_mask", "=", "(", "(", "attn_mask", "+", "non_tgt_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ">", "0", ")", ".", "to", "(", "attn_mask", ")", "\n", "", "else", ":", "\n", "            ", "non_tgt_mask", "=", "None", "\n", "\n", "##### Word embeddings and prepare h & g hidden states", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb_k", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb_k", "=", "self", ".", "word_embedding", "(", "input_ids", ")", "\n", "", "output_h", "=", "self", ".", "dropout", "(", "word_emb_k", ")", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "            ", "word_emb_q", "=", "self", ".", "mask_emb", ".", "expand", "(", "target_mapping", ".", "shape", "[", "0", "]", ",", "bsz", ",", "-", "1", ")", "\n", "# else:  # We removed the inp_q input which was same as target mapping", "\n", "#     inp_q_ext = inp_q[:, :, None]", "\n", "#     word_emb_q = inp_q_ext * self.mask_emb + (1 - inp_q_ext) * word_emb_k", "\n", "output_g", "=", "self", ".", "dropout", "(", "word_emb_q", ")", "\n", "", "else", ":", "\n", "            ", "output_g", "=", "None", "\n", "\n", "##### Segment embedding", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "# Convert `token_type_ids` to one-hot `seg_mat`", "\n", "            ", "if", "mlen", ">", "0", ":", "\n", "                ", "mem_pad", "=", "torch", ".", "zeros", "(", "[", "mlen", ",", "bsz", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "cat_ids", "=", "torch", ".", "cat", "(", "[", "mem_pad", ",", "token_type_ids", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat_ids", "=", "token_type_ids", "\n", "\n", "# `1` indicates not in the same segment [qlen x klen x bsz]", "\n", "", "seg_mat", "=", "(", "token_type_ids", "[", ":", ",", "None", "]", "!=", "cat_ids", "[", "None", ",", ":", "]", ")", ".", "long", "(", ")", "\n", "seg_mat", "=", "F", ".", "one_hot", "(", "seg_mat", ",", "num_classes", "=", "2", ")", ".", "to", "(", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "seg_mat", "=", "None", "\n", "\n", "##### Positional encoding", "\n", "", "pos_emb", "=", "self", ".", "relative_positional_encoding", "(", "qlen", ",", "klen", ",", "bsz", "=", "bsz", ")", "\n", "pos_emb", "=", "self", ".", "dropout", "(", "pos_emb", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "new_mems", "=", "(", ")", "\n", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layer", ")", "\n", "\n", "", "attentions", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "# cache new mems", "\n", "                ", "new_mems", "=", "new_mems", "+", "(", "self", ".", "cache_mem", "(", "output_h", ",", "mems", "[", "i", "]", ")", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "outputs", "=", "layer_module", "(", "output_h", ",", "output_g", ",", "attn_mask_h", "=", "non_tgt_mask", ",", "attn_mask_g", "=", "attn_mask", ",", "\n", "r", "=", "pos_emb", ",", "seg_mat", "=", "seg_mat", ",", "mems", "=", "mems", "[", "i", "]", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "# Add last hidden state", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "output", "=", "self", ".", "dropout", "(", "output_g", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "# Prepare outputs, we transpose back here to shape [bsz, len, hidden_dim] (cf. beginning of forward() method)", "\n", "outputs", "=", "(", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ",", ")", "\n", "\n", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "new_mems", ",", ")", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "if", "output_g", "is", "not", "None", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "h", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "for", "hs", "in", "hidden_states", "for", "h", "in", "hs", ")", "\n", "", "else", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "hs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "for", "hs", "in", "hidden_states", ")", "\n", "", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "attentions", "=", "tuple", "(", "t", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "\n", "", "return", "outputs", "# outputs, (new_mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetLMHeadModel.__init__": [[931, 940], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "torch.nn.Linear", "modeling_xlnet.XLNetLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "lm_loss", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "n_token", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetLMHeadModel.get_output_embeddings": [[941, 943], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetLMHeadModel.forward": [[944, 968], ["modeling_xlnet.XLNetLMHeadModel.transformer", "modeling_xlnet.XLNetLMHeadModel.lm_loss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlnet.XLNetLMHeadModel.view", "labels.view", "modeling_xlnet.XLNetLMHeadModel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "logits", "=", "self", ".", "lm_loss", "(", "transformer_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Flatten the tokens", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForSequenceClassification.__init__": [[1009, 1018], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.SequenceSummary", "torch.nn.Linear", "modeling_xlnet.XLNetForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "self", ".", "logits_proj", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForSequenceClassification.forward": [[1019, 1048], ["modeling_xlnet.XLNetForSequenceClassification.transformer", "modeling_xlnet.XLNetForSequenceClassification.sequence_summary", "modeling_xlnet.XLNetForSequenceClassification.logits_proj", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlnet.XLNetForSequenceClassification.view", "labels.view", "modeling_xlnet.XLNetForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForMultipleChoice.__init__": [[1110, 1118], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.SequenceSummary", "torch.nn.Linear", "modeling_xlnet.XLNetForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "self", ".", "logits_proj", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForMultipleChoice.forward": [[1119, 1148], ["input_ids.view", "modeling_xlnet.XLNetForMultipleChoice.transformer", "modeling_xlnet.XLNetForMultipleChoice.sequence_summary", "modeling_xlnet.XLNetForMultipleChoice.logits_proj", "modeling_xlnet.XLNetForMultipleChoice.view", "input_ids.size", "token_type_ids.view", "attention_mask.view", "input_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "token_type_ids.size", "attention_mask.size", "input_mask.size", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "labels", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_input_mask", "=", "input_mask", ".", "view", "(", "-", "1", ",", "input_mask", ".", "size", "(", "-", "1", ")", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "flat_input_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "input_mask", "=", "flat_input_mask", ",", "attention_mask", "=", "flat_attention_mask", ",", "\n", "mems", "=", "mems", ",", "perm_mask", "=", "perm_mask", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForQuestionAnsweringSimple.__init__": [[1195, 1203], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "torch.nn.Linear", "modeling_xlnet.XLNetForQuestionAnsweringSimple.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForQuestionAnsweringSimple.forward": [[1204, 1244], ["modeling_xlnet.XLNetForQuestionAnsweringSimple.transformer", "modeling_xlnet.XLNetForQuestionAnsweringSimple.qa_outputs", "modeling_xlnet.XLNetForQuestionAnsweringSimple.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForQuestionAnswering.__init__": [[1309, 1320], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass", "modeling_xlnet.XLNetForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.XLNetForQuestionAnswering.forward": [[1321, 1390], ["modeling_xlnet.XLNetForQuestionAnswering.transformer", "modeling_xlnet.XLNetForQuestionAnswering.start_logits", "modeling_xlnet.XLNetForQuestionAnswering.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_xlnet.XLNetForQuestionAnswering.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_xlnet.XLNetForQuestionAnswering.answer_class", "modeling_xlnet.XLNetForQuestionAnswering.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "is_impossible", "=", "None", ",", "cls_index", "=", "None", ",", "p_mask", "=", "None", ",", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "# get the representation of START as weighted sum of hidden states", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "# Shape (batch size,): one single `cls_logits` for each sample", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map": [[45, 114], ["hasattr", "tf_to_pt_map.update", "enumerate", "tf_to_pt_map.update", "hasattr", "tf_to_pt_map.update", "hasattr", "hasattr", "r_r_list.append", "r_w_list.append", "r_s_list.append", "seg_embed_list.append"], "function", ["None"], ["def", "build_tf_xlnet_to_pytorch_map", "(", "model", ",", "config", ",", "tf_weights", "=", "None", ")", ":", "\n", "    ", "\"\"\" A map of modules from TF to PyTorch.\n        I use a map to keep the PyTorch model as\n        identical to the original PyTorch model as possible.\n    \"\"\"", "\n", "\n", "tf_to_pt_map", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'transformer'", ")", ":", "\n", "        ", "if", "hasattr", "(", "model", ",", "'lm_loss'", ")", ":", "\n", "# We will load also the output bias", "\n", "            ", "tf_to_pt_map", "[", "'model/lm_loss/bias'", "]", "=", "model", ".", "lm_loss", ".", "bias", "\n", "", "if", "hasattr", "(", "model", ",", "'sequence_summary'", ")", "and", "'model/sequnece_summary/summary/kernel'", "in", "tf_weights", ":", "\n", "# We will load also the sequence summary", "\n", "            ", "tf_to_pt_map", "[", "'model/sequnece_summary/summary/kernel'", "]", "=", "model", ".", "sequence_summary", ".", "summary", ".", "weight", "\n", "tf_to_pt_map", "[", "'model/sequnece_summary/summary/bias'", "]", "=", "model", ".", "sequence_summary", ".", "summary", ".", "bias", "\n", "", "if", "hasattr", "(", "model", ",", "'logits_proj'", ")", "and", "config", ".", "finetuning_task", "is", "not", "None", "and", "'model/regression_{}/logit/kernel'", ".", "format", "(", "config", ".", "finetuning_task", ")", "in", "tf_weights", ":", "\n", "            ", "tf_to_pt_map", "[", "'model/regression_{}/logit/kernel'", ".", "format", "(", "config", ".", "finetuning_task", ")", "]", "=", "model", ".", "logits_proj", ".", "weight", "\n", "tf_to_pt_map", "[", "'model/regression_{}/logit/bias'", ".", "format", "(", "config", ".", "finetuning_task", ")", "]", "=", "model", ".", "logits_proj", ".", "bias", "\n", "\n", "# Now load the rest of the transformer", "\n", "", "model", "=", "model", ".", "transformer", "\n", "\n", "# Embeddings and output", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "'model/transformer/word_embedding/lookup_table'", ":", "model", ".", "word_embedding", ".", "weight", ",", "\n", "'model/transformer/mask_emb/mask_emb'", ":", "model", ".", "mask_emb", "}", ")", "\n", "\n", "# Transformer blocks", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "model", ".", "layer", ")", ":", "\n", "        ", "layer_str", "=", "\"model/transformer/layer_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/gamma\"", ":", "b", ".", "rel_attn", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/beta\"", ":", "b", ".", "rel_attn", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"rel_attn/o/kernel\"", ":", "b", ".", "rel_attn", ".", "o", ",", "\n", "layer_str", "+", "\"rel_attn/q/kernel\"", ":", "b", ".", "rel_attn", ".", "q", ",", "\n", "layer_str", "+", "\"rel_attn/k/kernel\"", ":", "b", ".", "rel_attn", ".", "k", ",", "\n", "layer_str", "+", "\"rel_attn/r/kernel\"", ":", "b", ".", "rel_attn", ".", "r", ",", "\n", "layer_str", "+", "\"rel_attn/v/kernel\"", ":", "b", ".", "rel_attn", ".", "v", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/gamma\"", ":", "b", ".", "ff", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/beta\"", ":", "b", ".", "ff", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_1/kernel\"", ":", "b", ".", "ff", ".", "layer_1", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_1/bias\"", ":", "b", ".", "ff", ".", "layer_1", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_2/kernel\"", ":", "b", ".", "ff", ".", "layer_2", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_2/bias\"", ":", "b", ".", "ff", ".", "layer_2", ".", "bias", ",", "\n", "}", ")", "\n", "\n", "# Relative positioning biases", "\n", "", "if", "config", ".", "untie_r", ":", "\n", "        ", "r_r_list", "=", "[", "]", "\n", "r_w_list", "=", "[", "]", "\n", "r_s_list", "=", "[", "]", "\n", "seg_embed_list", "=", "[", "]", "\n", "for", "b", "in", "model", ".", "layer", ":", "\n", "            ", "r_r_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_r_bias", ")", "\n", "r_w_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_w_bias", ")", "\n", "r_s_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_s_bias", ")", "\n", "seg_embed_list", ".", "append", "(", "b", ".", "rel_attn", ".", "seg_embed", ")", "\n", "", "", "else", ":", "\n", "        ", "r_r_list", "=", "[", "model", ".", "r_r_bias", "]", "\n", "r_w_list", "=", "[", "model", ".", "r_w_bias", "]", "\n", "r_s_list", "=", "[", "model", ".", "r_s_bias", "]", "\n", "seg_embed_list", "=", "[", "model", ".", "seg_embed", "]", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "\n", "'model/transformer/r_r_bias'", ":", "r_r_list", ",", "\n", "'model/transformer/r_w_bias'", ":", "r_w_list", ",", "\n", "'model/transformer/r_s_bias'", ":", "r_s_list", ",", "\n", "'model/transformer/seg_embed'", ":", "seg_embed_list", "}", ")", "\n", "return", "tf_to_pt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.load_tf_weights_in_xlnet": [[115, 173], ["tf.train.list_variables", "modeling_xlnet.build_tf_xlnet_to_pytorch_map", "build_tf_xlnet_to_pytorch_map.items", "logger.info", "logger.info", "tf.train.load_variable", "logger.info", "isinstance", "tf_weights.pop", "tf_weights.pop", "tf_weights.pop", "logger.error", "logger.info", "logger.info", "np.transpose", "enumerate", "logger.info", "torch.from_numpy", "len", "logger.info", "torch.from_numpy", "tf_weights.keys"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "def", "load_tf_weights_in_xlnet", "(", "model", ",", "config", ",", "tf_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "# Load weights from TF model", "\n", "", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "# Build TF to PyTorch weights loading map", "\n", "", "tf_to_pt_map", "=", "build_tf_xlnet_to_pytorch_map", "(", "model", ",", "config", ",", "tf_weights", ")", "\n", "\n", "for", "name", ",", "pointer", "in", "tf_to_pt_map", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Importing {}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "not", "in", "tf_weights", ":", "\n", "            ", "logger", ".", "info", "(", "\"{} not in tf pre-trained weights, skipping\"", ".", "format", "(", "name", ")", ")", "\n", "continue", "\n", "", "array", "=", "tf_weights", "[", "name", "]", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "'kernel'", "in", "name", "and", "(", "'ff'", "in", "name", "or", "'summary'", "in", "name", "or", "'logit'", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Transposing\"", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "if", "isinstance", "(", "pointer", ",", "list", ")", ":", "\n", "# Here we will split the TF weigths", "\n", "            ", "assert", "len", "(", "pointer", ")", "==", "array", ".", "shape", "[", "0", "]", "\n", "for", "i", ",", "p_i", "in", "enumerate", "(", "pointer", ")", ":", "\n", "                ", "arr_i", "=", "array", "[", "i", ",", "...", "]", "\n", "try", ":", "\n", "                    ", "assert", "p_i", ".", "shape", "==", "arr_i", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                    ", "e", ".", "args", "+=", "(", "p_i", ".", "shape", ",", "arr_i", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {} for layer {}\"", ".", "format", "(", "name", ",", "i", ")", ")", "\n", "p_i", ".", "data", "=", "torch", ".", "from_numpy", "(", "arr_i", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "tf_weights", ".", "pop", "(", "name", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam'", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam_1'", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.gelu": [[175, 182], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function.\n        XLNet is using OpenAI GPT's gelu (not exactly the same as BERT)\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlnet.swish": [[184, 186], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_bert.BertConfig.__init__": [[79, 115], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30522", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.__init__": [[97, 109], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "weight_decay", "=", "0.0", ",", "correct_bias", "=", "True", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "correct_bias", "=", "correct_bias", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step": [[110, 170], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1.0", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1.0", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "'lr'", "]", "\n", "if", "group", "[", "'correct_bias'", "]", ":", "# No bias correction for Bert", "\n", "                    ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_constant_schedule": [[27, 31], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["def", "get_constant_schedule", "(", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a constant learning rate.\n    \"\"\"", "\n", "return", "LambdaLR", "(", "optimizer", ",", "lambda", "_", ":", "1", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_constant_schedule_with_warmup": [[33, 43], ["torch.optim.lr_scheduler.LambdaLR", "float", "float", "max"], "function", ["None"], ["", "def", "get_constant_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a constant learning rate preceded by a warmup\n    period during which the learning rate increases linearly between 0 and 1.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1.0", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "1.", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup": [[45, 55], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["", "def", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases linearly after\n    linearly increasing during a warmup period.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_cosine_schedule_with_warmup": [[57, 69], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "num_cycles", "=", ".5", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases following the\n    values of the cosine function between 0 and `pi * cycles` after a warmup\n    period during which it increases linearly between 0 and 1.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "return", "max", "(", "0.", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "float", "(", "num_cycles", ")", "*", "2.", "*", "progress", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup": [[71, 85], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "num_cycles", "=", "1.", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases following the\n    values of the cosine function with several hard restarts, after a warmup\n    period during which it increases linearly between 0 and 1.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "if", "progress", ">=", "1.", ":", "\n", "            ", "return", "0.", "\n", "", "return", "max", "(", "0.", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "float", "(", "num_cycles", ")", "*", "progress", ")", "%", "1.", ")", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer.__init__": [[119, 137], ["tokenization_utils.PreTrainedTokenizer.__init__", "json.load", "tokenization_gpt2.bytes_to_unicode", "dict", "regex.compile", "io.open", "io.open().read().split", "tuple", "zip", "tokenization_gpt2.GPT2Tokenizer.encoder.items", "tokenization_gpt2.GPT2Tokenizer.byte_encoder.items", "merge.split", "range", "io.open().read", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.bytes_to_unicode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "errors", "=", "'replace'", ",", "unk_token", "=", "\"<|endoftext|>\"", ",", "\n", "bos_token", "=", "\"<|endoftext|>\"", ",", "eos_token", "=", "\"<|endoftext|>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2Tokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "errors", "=", "errors", "# how to handle errors in decoding", "\n", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "bpe_data", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "bpe_merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "bpe_data", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "bpe_merges", ",", "range", "(", "len", "(", "bpe_merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n", "# Should haved added re.IGNORECASE so BPE merges can happen for capitalized versions of contractions", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer.vocab_size": [[138, 141], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer.bpe": [[142, 182], ["tuple", "tokenization_gpt2.get_pairs", "min", "tuple", "len", "len", "tokenization_gpt2.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_gpt2.GPT2Tokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer._tokenize": [[183, 200], ["regex.findall", "bpe_tokens.extend", "tokenization_gpt2.GPT2Tokenizer.bpe().split", "token.encode", "ord", "tokenization_gpt2.GPT2Tokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "add_prefix_space", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            Args:\n                - add_prefix_space (boolean, default False):\n                    Begin the sentence with at least one space to get invariance to word order in GPT-2 (and RoBERTa) tokenizers.\n        \"\"\"", "\n", "if", "add_prefix_space", ":", "\n", "            ", "text", "=", "' '", "+", "text", "\n", "\n", "", "bpe_tokens", "=", "[", "]", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "ord", "(", "b", ")", "]", "for", "b", "in", "token", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "", "else", ":", "\n", "                ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "", "bpe_tokens", ".", "extend", "(", "bpe_token", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer._convert_token_to_id": [[201, 204], ["tokenization_gpt2.GPT2Tokenizer.encoder.get", "tokenization_gpt2.GPT2Tokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer._convert_id_to_token": [[205, 208], ["tokenization_gpt2.GPT2Tokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer.convert_tokens_to_string": [[209, 214], ["bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "text", "=", "''", ".", "join", "(", "tokens", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "self", ".", "errors", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.GPT2Tokenizer.save_vocabulary": [[215, 238], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_gpt2.GPT2Tokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.bytes_to_unicode": [[70, 93], ["lru_cache", "range", "dict", "list", "_chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a mapping to unicode strings.\n    We specifically avoids mapping to whitespace/control characters the bpe code barfs on.\n    \n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    \"\"\"", "\n", "_chr", "=", "unichr", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "else", "chr", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "_chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_gpt2.get_pairs": [[94, 105], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.PositionalEmbedding.__init__": [[177, 184], ["torch.Module.__init__", "modeling_transfo_xl.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.PositionalEmbedding.forward": [[185, 193], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.PositionwiseFF.__init__": [[197, 214], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ",", "layer_norm_epsilon", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.PositionwiseFF.forward": [[215, 230], ["modeling_transfo_xl.PositionwiseFF.CoreNet", "modeling_transfo_xl.PositionwiseFF.CoreNet", "modeling_transfo_xl.PositionwiseFF.layer_norm", "modeling_transfo_xl.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.__init__": [[233, 265], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ",", "\n", "r_r_bias", "=", "None", ",", "r_w_bias", "=", "None", ",", "output_attentions", "=", "False", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "if", "r_r_bias", "is", "None", "or", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "\n", "\n", "", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift": [[266, 277], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], ["", "def", "_rel_shift", "(", "self", ",", "x", ")", ":", "\n", "        ", "zero_pad_shape", "=", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "zero_pad", "=", "torch", ".", "zeros", "(", "zero_pad_shape", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded_shape", "=", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "*", "x_padded_shape", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.forward": [[278, 368], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.o_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.drop", "w.size", "r.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "outputs.append", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_vec.contiguous().view.contiguous().view.contiguous", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_mask.dim", "next", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.parameters", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "next", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.parameters", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "rlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q", "=", "w_head_q", "+", "self", ".", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "AC", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "rr_head_q", "=", "w_head_q", "+", "self", ".", "r_r_bias", "\n", "BD", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "rr_head_q", ",", "r_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "BD", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "torch", ".", "sum", "(", "attn_mask", ")", ".", "item", "(", ")", ":", "\n", "            ", "attn_mask", "=", "(", "attn_mask", "==", "1", ")", "# Switch to bool", "\n", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "65000", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "else", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "1e30", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "65000", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "else", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "1e30", ")", ".", "type_as", "(", "attn_score", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "#### compute attention vector", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "w", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer.__init__": [[371, 380], ["torch.Module.__init__", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn", "modeling_transfo_xl.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "layer_norm_epsilon", "=", "layer_norm_epsilon", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ",", "\n", "layer_norm_epsilon", "=", "layer_norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer.forward": [[381, 391], ["modeling_transfo_xl.RelPartialLearnableDecoderLayer.dec_attn", "modeling_transfo_xl.RelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn_outputs", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.AdaptiveEmbedding.__init__": [[394, 423], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "modeling_transfo_xl.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "modeling_transfo_xl.AdaptiveEmbedding.emb_projs.append", "len", "modeling_transfo_xl.AdaptiveEmbedding.emb_layers.append", "modeling_transfo_xl.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.AdaptiveEmbedding.forward": [[424, 455], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "modeling_transfo_xl.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.size", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "mask_i.nonzero"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed_shape", "=", "inp", ".", "size", "(", ")", "+", "(", "self", ".", "d_proj", ",", ")", "\n", "embed", "=", "emb_flat", ".", "view", "(", "embed_shape", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight": [[466, 471], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["def", "_init_weight", "(", "self", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "init", "==", "'uniform'", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "weight", ",", "-", "self", ".", "config", ".", "init_range", ",", "self", ".", "config", ".", "init_range", ")", "\n", "", "elif", "self", ".", "config", ".", "init", "==", "'normal'", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "weight", ",", "0.0", ",", "self", ".", "config", ".", "init_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias": [[472, 474], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_init_bias", "(", "self", ",", "bias", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weights": [[475, 515], ["classname.find", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "classname.find", "hasattr", "range", "classname.find", "hasattr", "len", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "classname.find", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "range", "classname.find", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "len", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "weight", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'AdaptiveEmbedding'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'emb_projs'", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "m", ".", "emb_projs", ")", ")", ":", "\n", "                    ", "if", "m", ".", "emb_projs", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "emb_projs", "[", "i", "]", ",", "0.0", ",", "self", ".", "config", ".", "proj_init_std", ")", "\n", "", "", "", "", "elif", "classname", ".", "find", "(", "'Embedding'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "weight", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'ProjectedAdaptiveLogSoftmax'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'cluster_weight'", ")", "and", "m", ".", "cluster_weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "cluster_weight", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'cluster_bias'", ")", "and", "m", ".", "cluster_bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "cluster_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'out_projs'", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "m", ".", "out_projs", ")", ")", ":", "\n", "                    ", "if", "m", ".", "out_projs", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "out_projs", "[", "i", "]", ",", "0.0", ",", "self", ".", "config", ".", "proj_init_std", ")", "\n", "", "", "", "", "elif", "classname", ".", "find", "(", "'LayerNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "self", ".", "config", ".", "init_std", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'r_emb'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_emb", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_w_bias'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_w_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_r_bias'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_r_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_bias'", ")", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "r_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.__init__": [[590, 645], ["modeling_utils.PreTrainedModel.__init__", "modeling_transfo_xl.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_transfo_xl.TransfoXLModel.init_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "modeling_transfo_xl.PositionalEmbedding", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "modeling_transfo_xl.TransfoXLModel.layers.append", "modeling_transfo_xl.RelPartialLearnableDecoderLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransfoXLModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "n_token", "=", "config", ".", "n_token", "\n", "\n", "self", ".", "d_embed", "=", "config", ".", "d_embed", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "config", ".", "n_token", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "config", ".", "cutoffs", ",", "\n", "div_val", "=", "config", ".", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "config", ".", "tgt_len", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "ext_len", "=", "config", ".", "ext_len", "\n", "self", ".", "max_klen", "=", "config", ".", "tgt_len", "+", "config", ".", "ext_len", "+", "config", ".", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "\n", "if", "not", "config", ".", "untie_r", ":", "\n", "            ", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "config", ".", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "tgt_len", "=", "config", ".", "tgt_len", ",", "ext_len", "=", "config", ".", "ext_len", ",", "mem_len", "=", "config", ".", "mem_len", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ",", "\n", "layer_norm_epsilon", "=", "config", ".", "layer_norm_epsilon", ")", "\n", ")", "\n", "", "", "else", ":", "# learnable embeddings and absolute embeddings are not used in our pretrained checkpoints", "\n", "            ", "raise", "NotImplementedError", "# Removed them to avoid maintaining dead code", "\n", "\n", "", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.get_input_embeddings": [[646, 648], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.set_input_embeddings": [[649, 651], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "word_emb", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.backward_compatible": [[652, 654], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.reset_length": [[655, 659], ["None"], "methods", ["None"], ["", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel._prune_heads": [[660, 663], ["logger.info"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Head pruning is not implemented for Transformer-XL model\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.init_mems": [[664, 676], ["next", "range", "modeling_transfo_xl.TransfoXLModel.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mems.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "zeros", "(", "self", ".", "mem_len", ",", "bsz", ",", "self", ".", "config", ".", "d_model", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel._update_mems": [[677, 699], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel.forward": [[700, 792], ["modeling_transfo_xl.TransfoXLModel.drop", "modeling_transfo_xl.TransfoXLModel._update_mems", "ValueError", "modeling_transfo_xl.TransfoXLModel.init_mems", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_transfo_xl.TransfoXLModel.word_emb", "mems[].size", "modeling_transfo_xl.TransfoXLModel.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl.TransfoXLModel.pos_emb", "modeling_transfo_xl.TransfoXLModel.drop", "modeling_transfo_xl.TransfoXLModel.drop", "enumerate", "modeling_transfo_xl.TransfoXLModel.transpose().contiguous", "list.append", "list", "outputs.append", "list", "outputs.append", "input_ids.transpose().contiguous.transpose().contiguous.transpose().contiguous", "input_ids.transpose().contiguous.transpose().contiguous.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "list.append", "layer", "inputs_embeds.transpose().contiguous.transpose().contiguous.transpose().contiguous", "ValueError", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "modeling_transfo_xl.TransfoXLModel.new_ones", "list.append", "modeling_transfo_xl.TransfoXLModel.transpose", "t.transpose().contiguous", "t.permute().contiguous", "input_ids.transpose().contiguous.transpose().contiguous.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "inputs_embeds.transpose().contiguous.transpose().contiguous.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_transfo_xl.TransfoXLModel.parameters", "t.transpose", "t.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLModel._update_mems", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "# the original code for Transformer-XL used shapes [len, bsz] but we want a unified interface in the library", "\n", "# so we transpose here from shape [bsz, len] to shape [len, bsz]", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", "=", "inputs_embeds", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "inputs_embeds", ".", "shape", "[", "0", "]", ",", "inputs_embeds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "self", ".", "init_mems", "(", "bsz", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb", "=", "self", ".", "word_emb", "(", "input_ids", ")", "\n", "\n", "", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "(", "qlen", ",", "klen", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n", "if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "\n", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", "[", ":", ",", ":", ",", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "(", "qlen", ",", "klen", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "attentions", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "layer_outputs", "=", "layer", "(", "core_out", ",", "pos_emb", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ")", "\n", "\n", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "# We transpose back here to shape [bsz, len, hidden_dim]", "\n", "outputs", "=", "[", "core_out", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ",", "new_mems", "]", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "# Add last layer and transpose to library standard shape [bsz, len, hidden_dim]", "\n", "            ", "hids", ".", "append", "(", "core_out", ")", "\n", "hids", "=", "list", "(", "t", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "hids", ")", "\n", "outputs", ".", "append", "(", "hids", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# Transpose to library standard shape [bsz, n_heads, query_seq_len, key_seq_len]", "\n", "            ", "attentions", "=", "list", "(", "t", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", ".", "append", "(", "attentions", ")", "\n", "\n", "", "return", "outputs", "# last hidden state, new_mems, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.__init__": [[833, 846], ["modeling_utils.PreTrainedModel.__init__", "modeling_transfo_xl.TransfoXLModel", "modeling_transfo_xl.TransfoXLLMHeadModel.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "LogUniformSampler", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransfoXLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "TransfoXLModel", "(", "config", ")", "\n", "self", ".", "sample_softmax", "=", "config", ".", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "config", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "n_token", ")", "\n", "self", ".", "sampler", "=", "LogUniformSampler", "(", "config", ".", "n_token", ",", "config", ".", "sample_softmax", ")", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "config", ".", "n_token", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "\n", "config", ".", "cutoffs", ",", "div_val", "=", "config", ".", "div_val", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.tie_weights": [[847, 873], ["range", "enumerate", "len", "modeling_transfo_xl.TransfoXLLMHeadModel._tie_or_clone_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer.word_emb.emb_projs[].clone", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer.word_emb.emb_projs[].clone"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run this to be sure output and input (adaptive) softmax weights are tied\n        \"\"\"", "\n", "# sampled softmax", "\n", "if", "self", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "if", "self", ".", "config", ".", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "transformer", ".", "word_emb", ".", "weight", "\n", "# adaptive softmax (including standard softmax)", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ",", "\n", "self", ".", "transformer", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ")", "\n", "", "", "if", "self", ".", "config", ".", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "self", ".", "config", ".", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "self", ".", "config", ".", "div_val", "==", "1", "and", "self", ".", "config", ".", "d_model", "!=", "self", ".", "config", ".", "d_embed", ":", "\n", "                        ", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "nn", ".", "Parameter", "(", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "", "elif", "tie_proj", "and", "self", ".", "config", ".", "div_val", "!=", "1", ":", "\n", "                        ", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "nn", ".", "Parameter", "(", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "i", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length": [[874, 876], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer.reset_length"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length"], ["", "", "", "", "", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "transformer", ".", "reset_length", "(", "tgt_len", ",", "ext_len", ",", "mem_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems": [[877, 879], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer.init_mems"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "init_mems", "(", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.forward": [[880, 911], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer", "modeling_transfo_xl_utilities.sample_logits", "modeling_transfo_xl.TransfoXLLMHeadModel.crit", "input_ids.size", "input_ids.size", "ValueError", "pred_hid.view", "softmax_output.view.view.view", "softmax_output.view.view.view", "inputs_embeds.size", "inputs_embeds.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.sample_logits"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "input_ids", ".", "size", "(", "0", ")", ",", "input_ids", ".", "size", "(", "1", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "inputs_embeds", ".", "size", "(", "0", ")", ",", "inputs_embeds", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "last_hidden", "=", "transformer_outputs", "[", "0", "]", "\n", "pred_hid", "=", "last_hidden", "[", ":", ",", "-", "tgt_len", ":", "]", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "assert", "self", ".", "config", ".", "tie_weight", "\n", "logit", "=", "sample_logits", "(", "self", ".", "transformer", ".", "word_emb", ",", "self", ".", "out_layer", ".", "bias", ",", "labels", ",", "pred_hid", ",", "self", ".", "sampler", ")", "\n", "softmax_output", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "-", "1", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# TODO: This is not implemented", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "softmax_output", "=", "self", ".", "crit", "(", "pred_hid", ".", "view", "(", "-", "1", ",", "pred_hid", ".", "size", "(", "-", "1", ")", ")", ",", "labels", ")", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "softmax_output", "=", "softmax_output", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "", "else", ":", "\n", "                ", "softmax_output", "=", "softmax_output", ".", "view", "(", "bsz", ",", "tgt_len", ")", "\n", "outputs", "=", "[", "softmax_output", ",", "None", "]", "+", "outputs", "\n", "\n", "", "", "return", "outputs", "# (loss), logits or None if labels is not None (speed up adaptive softmax), new_mems, (all hidden states), (all attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.build_tf_to_pytorch_map": [[48, 119], ["hasattr", "enumerate", "enumerate", "tf_to_pt_map.update", "tf_to_pt_map.update", "enumerate", "zip", "tf_to_pt_map.update", "tf_to_pt_map.update", "zip", "r_r_list.append", "r_w_list.append", "tf_to_pt_map.update", "tf_to_pt_map.update", "tf_to_pt_map.update"], "function", ["None"], ["def", "build_tf_to_pytorch_map", "(", "model", ",", "config", ")", ":", "\n", "    ", "\"\"\" A map of modules from TF to PyTorch.\n        This time I use a map to keep the PyTorch model as identical to the original PyTorch model as possible.\n    \"\"\"", "\n", "tf_to_pt_map", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'transformer'", ")", ":", "\n", "# We are loading in a TransfoXLLMHeadModel => we will load also the Adaptive Softmax", "\n", "        ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "\"transformer/adaptive_softmax/cutoff_0/cluster_W\"", ":", "model", ".", "crit", ".", "cluster_weight", ",", "\n", "\"transformer/adaptive_softmax/cutoff_0/cluster_b\"", ":", "model", ".", "crit", ".", "cluster_bias", "}", ")", "\n", "for", "i", ",", "(", "out_l", ",", "proj_l", ",", "tie_proj", ")", "in", "enumerate", "(", "zip", "(", "\n", "model", ".", "crit", ".", "out_layers", ",", "\n", "model", ".", "crit", ".", "out_projs", ",", "\n", "config", ".", "tie_projs", ")", ")", ":", "\n", "            ", "layer_str", "=", "\"transformer/adaptive_softmax/cutoff_%d/\"", "%", "i", "\n", "if", "config", ".", "tie_weight", ":", "\n", "                ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'b'", ":", "out_l", ".", "bias", "}", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "# I don't think this is implemented in the TF code", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'lookup_table'", ":", "out_l", ".", "weight", ",", "\n", "layer_str", "+", "'b'", ":", "out_l", ".", "bias", "}", ")", "\n", "", "if", "not", "tie_proj", ":", "\n", "                ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'proj'", ":", "proj_l", "\n", "}", ")", "\n", "# Now load the rest of the transformer", "\n", "", "", "model", "=", "model", ".", "transformer", "\n", "\n", "# Embeddings", "\n", "", "for", "i", ",", "(", "embed_l", ",", "proj_l", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "word_emb", ".", "emb_layers", ",", "model", ".", "word_emb", ".", "emb_projs", ")", ")", ":", "\n", "        ", "layer_str", "=", "\"transformer/adaptive_embed/cutoff_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'lookup_table'", ":", "embed_l", ".", "weight", ",", "\n", "layer_str", "+", "'proj_W'", ":", "proj_l", "\n", "}", ")", "\n", "\n", "# Transformer blocks", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "layer_str", "=", "\"transformer/layer_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/gamma\"", ":", "b", ".", "dec_attn", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/beta\"", ":", "b", ".", "dec_attn", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"rel_attn/o/kernel\"", ":", "b", ".", "dec_attn", ".", "o_net", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/qkv/kernel\"", ":", "b", ".", "dec_attn", ".", "qkv_net", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/r/kernel\"", ":", "b", ".", "dec_attn", ".", "r_net", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/gamma\"", ":", "b", ".", "pos_ff", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/beta\"", ":", "b", ".", "pos_ff", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_1/kernel\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "0", "]", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_1/bias\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "0", "]", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_2/kernel\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "3", "]", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_2/bias\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "3", "]", ".", "bias", ",", "\n", "}", ")", "\n", "\n", "# Relative positioning biases", "\n", "", "if", "config", ".", "untie_r", ":", "\n", "        ", "r_r_list", "=", "[", "]", "\n", "r_w_list", "=", "[", "]", "\n", "for", "b", "in", "model", ".", "layers", ":", "\n", "            ", "r_r_list", ".", "append", "(", "b", ".", "dec_attn", ".", "r_r_bias", ")", "\n", "r_w_list", ".", "append", "(", "b", ".", "dec_attn", ".", "r_w_bias", ")", "\n", "", "", "else", ":", "\n", "        ", "r_r_list", "=", "[", "model", ".", "r_r_bias", "]", "\n", "r_w_list", "=", "[", "model", ".", "r_w_bias", "]", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "\n", "'transformer/r_r_bias'", ":", "r_r_list", ",", "\n", "'transformer/r_w_bias'", ":", "r_w_list", "}", ")", "\n", "return", "tf_to_pt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl": [[120, 174], ["modeling_transfo_xl.build_tf_to_pytorch_map", "tf.train.list_variables", "build_tf_to_pytorch_map.items", "logger.info", "logger.info", "tf.train.load_variable", "tf_weights.pop", "tf_weights.pop", "tf_weights.pop", "logger.error", "np.transpose", "enumerate", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "len", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "tf_weights.keys"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.build_tf_to_pytorch_map", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "def", "load_tf_weights_in_transfo_xl", "(", "model", ",", "config", ",", "tf_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "# Build TF to PyTorch weights loading map", "\n", "", "tf_to_pt_map", "=", "build_tf_to_pytorch_map", "(", "model", ",", "config", ")", "\n", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "", "for", "name", ",", "pointer", "in", "tf_to_pt_map", ".", "items", "(", ")", ":", "\n", "        ", "assert", "name", "in", "tf_weights", "\n", "array", "=", "tf_weights", "[", "name", "]", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "'kernel'", "in", "name", "or", "'proj'", "in", "name", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "if", "(", "'r_r_bias'", "in", "name", "or", "'r_w_bias'", "in", "name", ")", "and", "len", "(", "pointer", ")", ">", "1", ":", "\n", "# Here we will split the TF weigths", "\n", "            ", "assert", "len", "(", "pointer", ")", "==", "array", ".", "shape", "[", "0", "]", "\n", "for", "i", ",", "p_i", "in", "enumerate", "(", "pointer", ")", ":", "\n", "                ", "arr_i", "=", "array", "[", "i", ",", "...", "]", "\n", "try", ":", "\n", "                    ", "assert", "p_i", ".", "shape", "==", "arr_i", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                    ", "e", ".", "args", "+=", "(", "p_i", ".", "shape", ",", "arr_i", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {} for layer {}\"", ".", "format", "(", "name", ",", "i", ")", ")", "\n", "p_i", ".", "data", "=", "torch", ".", "from_numpy", "(", "arr_i", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "tf_weights", ".", "pop", "(", "name", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam'", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam_1'", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer.__init__": [[131, 142], ["tokenization_utils.PreTrainedTokenizer.__init__", "json.load", "dict", "io.open", "io.open().read().split", "tuple", "zip", "tokenization_ctrl.CTRLTokenizer.encoder.items", "merge.split", "range", "io.open().read", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CTRLTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer.vocab_size": [[143, 146], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer.bpe": [[147, 189], ["tuple", "tuple", "tokenization_ctrl.get_pairs", "min", "tuple", "list", "len", "len", "tokenization_ctrl.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_ctrl.CTRLTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "word", "=", "tuple", "(", "list", "(", "word", "[", ":", "-", "1", "]", ")", "+", "[", "word", "[", "-", "1", "]", "+", "'</w>'", "]", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "'@@ '", ".", "join", "(", "word", ")", "\n", "word", "=", "word", "[", ":", "-", "4", "]", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer._tokenize": [[190, 200], ["text.split.split.split", "split_tokens.extend", "tokenization_ctrl.CTRLTokenizer.bpe().split", "tokenization_ctrl.CTRLTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n        \"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "\n", "text", "=", "text", ".", "split", "(", "' '", ")", "\n", "\n", "for", "token", "in", "text", ":", "\n", "            ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer._convert_token_to_id": [[201, 204], ["tokenization_ctrl.CTRLTokenizer.encoder.get", "tokenization_ctrl.CTRLTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer._convert_id_to_token": [[205, 208], ["tokenization_ctrl.CTRLTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer.convert_tokens_to_string": [[209, 213], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'@@ '", ",", "''", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.CTRLTokenizer.save_vocabulary": [[214, 237], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_ctrl.CTRLTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_ctrl.get_pairs": [[107, 120], ["set", "set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "\n", "", "pairs", "=", "set", "(", "pairs", ")", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.__init__": [[539, 573], ["tokenization_utils.PreTrainedTokenizer.__init__", "dict", "dict", "set", "json.load", "dict", "io.open", "io.open().read().split", "tuple", "zip", "len", "len", "tokenization_xlm.XLMTokenizer.encoder.items", "range", "io.open().read", "merge.split", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "bos_token", "=", "\"<s>\"", ",", "\n", "sep_token", "=", "\"</s>\"", ",", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"</s>\"", ",", "\n", "mask_token", "=", "\"<special1>\"", ",", "additional_special_tokens", "=", "[", "\"<special0>\"", ",", "\n", "\"<special1>\"", ",", "\"<special2>\"", ",", "\"<special3>\"", ",", "\"<special4>\"", ",", "\"<special5>\"", ",", "\n", "\"<special6>\"", ",", "\"<special7>\"", ",", "\"<special8>\"", ",", "\"<special9>\"", "]", ",", "\n", "lang2id", "=", "None", ",", "id2lang", "=", "None", ",", "do_lowercase_and_remove_accent", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLMTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "bos_token", "=", "bos_token", ",", "\n", "sep_token", "=", "sep_token", ",", "pad_token", "=", "pad_token", ",", "\n", "cls_token", "=", "cls_token", ",", "mask_token", "=", "mask_token", ",", "\n", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "# cache of sm.MosesPunctNormalizer instance", "\n", "self", ".", "cache_moses_punct_normalizer", "=", "dict", "(", ")", "\n", "# cache of sm.MosesTokenizer instance", "\n", "self", ".", "cache_moses_tokenizer", "=", "dict", "(", ")", "\n", "self", ".", "lang_with_custom_tokenizer", "=", "set", "(", "[", "'zh'", ",", "'th'", ",", "'ja'", "]", ")", "\n", "# True for current supported model (v1.2.0), False for XLM-17 & 100", "\n", "self", ".", "do_lowercase_and_remove_accent", "=", "do_lowercase_and_remove_accent", "\n", "self", ".", "lang2id", "=", "lang2id", "\n", "self", ".", "id2lang", "=", "id2lang", "\n", "if", "lang2id", "is", "not", "None", "and", "id2lang", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "lang2id", ")", "==", "len", "(", "id2lang", ")", "\n", "\n", "", "self", ".", "ja_word_tokenizer", "=", "None", "\n", "self", ".", "zh_word_tokenizer", "=", "None", "\n", "\n", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", "[", ":", "2", "]", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_punct_norm": [[574, 581], ["sacremoses.MosesPunctNormalizer.normalize", "sacremoses.MosesPunctNormalizer"], "methods", ["None"], ["", "def", "moses_punct_norm", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "not", "in", "self", ".", "cache_moses_punct_normalizer", ":", "\n", "            ", "punct_normalizer", "=", "sm", ".", "MosesPunctNormalizer", "(", "lang", "=", "lang", ")", "\n", "self", ".", "cache_moses_punct_normalizer", "[", "lang", "]", "=", "punct_normalizer", "\n", "", "else", ":", "\n", "            ", "punct_normalizer", "=", "self", ".", "cache_moses_punct_normalizer", "[", "lang", "]", "\n", "", "return", "punct_normalizer", ".", "normalize", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_tokenize": [[582, 589], ["sacremoses.MosesTokenizer.tokenize", "sacremoses.MosesTokenizer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "moses_tokenize", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "not", "in", "self", ".", "cache_moses_tokenizer", ":", "\n", "            ", "moses_tokenizer", "=", "sm", ".", "MosesTokenizer", "(", "lang", "=", "lang", ")", "\n", "self", ".", "cache_moses_tokenizer", "[", "lang", "]", "=", "moses_tokenizer", "\n", "", "else", ":", "\n", "            ", "moses_tokenizer", "=", "self", ".", "cache_moses_tokenizer", "[", "lang", "]", "\n", "", "return", "moses_tokenizer", ".", "tokenize", "(", "text", ",", "return_str", "=", "False", ",", "escape", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline": [[590, 595], ["tokenization_xlm.replace_unicode_punct", "tokenization_xlm.XLMTokenizer.moses_punct_norm", "tokenization_xlm.remove_non_printing_char"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.replace_unicode_punct", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_punct_norm", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.remove_non_printing_char"], ["", "def", "moses_pipeline", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "text", "=", "replace_unicode_punct", "(", "text", ")", "\n", "text", "=", "self", ".", "moses_punct_norm", "(", "text", ",", "lang", ")", "\n", "text", "=", "remove_non_printing_char", "(", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.ja_tokenize": [[596, 610], ["list", "tokenization_xlm.XLMTokenizer.ja_word_tokenizer.getWS", "Mykytea.Mykytea", "logger.error", "logger.error", "logger.error", "logger.error", "logger.error", "logger.error", "os.path.expanduser"], "methods", ["None"], ["", "def", "ja_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "ja_word_tokenizer", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "Mykytea", "\n", "self", ".", "ja_word_tokenizer", "=", "Mykytea", ".", "Mykytea", "(", "'-model %s/local/share/kytea/model.bin'", "%", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ")", "\n", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install KyTea (https://github.com/neubig/kytea) and it's python wrapper (https://github.com/chezou/Mykytea-python) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. git clone git@github.com:neubig/kytea.git && cd kytea\"", ")", "\n", "logger", ".", "error", "(", "\"2. autoreconf -i\"", ")", "\n", "logger", ".", "error", "(", "\"3. ./configure --prefix=$HOME/local\"", ")", "\n", "logger", ".", "error", "(", "\"4. make && make install\"", ")", "\n", "logger", ".", "error", "(", "\"5. pip install kytea\"", ")", "\n", "raise", "e", "\n", "", "", "return", "list", "(", "self", ".", "ja_word_tokenizer", ".", "getWS", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.vocab_size": [[611, 614], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.bpe": [[615, 657], ["tokenization_xlm.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenization_xlm.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_xlm.XLMTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "if", "word", "==", "'\\n  </w>'", ":", "\n", "            ", "word", "=", "'\\n</w>'", "\n", "", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer._tokenize": [[658, 743], ["logger.error", "tokenization_xlm.XLMTokenizer.split", "tokenization_xlm.lowercase_and_remove_accent", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.moses_tokenize", "split_tokens.extend", "tokenization_xlm.romanian_preprocessing", "tokenization_xlm.XLMTokenizer.moses_pipeline", "th_word_tokenize", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.split", "logger.error", "logger.error", "jieba.cut", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.ja_tokenize", "ValueError", "tokenization_xlm.XLMTokenizer.bpe().split", "logger.error", "logger.error", "tokenization_xlm.XLMTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.lowercase_and_remove_accent", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.romanian_preprocessing", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.ja_tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "lang", "=", "'en'", ",", "bypass_tokenizer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Tokenize a string given language code. For Chinese, Japanese and Thai, we use a language specific tokenizerself. Otherwise, we use Moses.\n\n        Details of tokenization:\n        - [sacremoses](https://github.com/alvations/sacremoses): port of Moses\n            - Install with `pip install sacremoses`\n        - [pythainlp](https://github.com/PyThaiNLP/pythainlp): Thai tokenizer\n            - Install with `pip install pythainlp`\n        - [kytea](https://github.com/chezou/Mykytea-python): Japanese tokenizer, wrapper of [KyTea](https://github.com/neubig/kytea)\n            - Install with the following steps:\n            ```\n            git clone git@github.com:neubig/kytea.git && cd kytea\n            autoreconf -i\n            ./configure --prefix=$HOME/local\n            make && make install\n            pip install kytea\n            ```\n        - [jieba](https://github.com/fxsjy/jieba): Chinese tokenizer *\n            - Install with `pip install jieba`\n\n        \\* The original XLM used [Stanford Segmenter](https://nlp.stanford.edu/software/stanford-segmenter-2018-10-16.zip).\n        However, the wrapper (`nltk.tokenize.stanford_segmenter`) is slow due to JVM overhead, and it will be deprecated.\n        Jieba is a lot faster and pip-installable. Note there is some mismatch with the Stanford Segmenter. It should be fine\n        if you fine-tune the model with Chinese supervisionself. If you want the same exact behaviour, use the original XLM\n        [preprocessing script](https://github.com/facebookresearch/XLM/tree/master/tools) to tokenize the sentence externally,\n        and set `bypass_tokenizer=True` to bypass the tokenizer.\n\n        Args:\n            - lang: ISO language code (default = 'en') (string). Languages should belong of the model supported languages. However, we don't enforce it.\n            - bypass_tokenizer: Allow users to preprocess and tokenize the sentences externally (default = False)  (bool). If True, we only apply BPE.\n\n        Returns:\n            List of tokens.\n        \"\"\"", "\n", "if", "lang", "and", "self", ".", "lang2id", "and", "lang", "not", "in", "self", ".", "lang2id", ":", "\n", "            ", "logger", ".", "error", "(", "\"Supplied language code not found in lang2id mapping. Please check that your language is supported by the loaded pretrained model.\"", ")", "\n", "", "if", "bypass_tokenizer", ":", "\n", "            ", "text", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "lang", "not", "in", "self", ".", "lang_with_custom_tokenizer", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "# TODO: make sure we are using `xlm-mlm-enro-1024`, since XLM-100 doesn't have this step", "\n", "if", "lang", "==", "'ro'", ":", "\n", "                ", "text", "=", "romanian_preprocessing", "(", "text", ")", "\n", "", "text", "=", "self", ".", "moses_tokenize", "(", "text", ",", "lang", "=", "lang", ")", "\n", "", "elif", "lang", "==", "'th'", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "try", ":", "\n", "                ", "if", "'pythainlp'", "not", "in", "sys", ".", "modules", ":", "\n", "                    ", "from", "pythainlp", ".", "tokenize", "import", "word_tokenize", "as", "th_word_tokenize", "\n", "", "else", ":", "\n", "                    ", "th_word_tokenize", "=", "sys", ".", "modules", "[", "'pythainlp'", "]", ".", "word_tokenize", "\n", "", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install PyThaiNLP (https://github.com/PyThaiNLP/pythainlp) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. pip install pythainlp\"", ")", "\n", "raise", "e", "\n", "", "text", "=", "th_word_tokenize", "(", "text", ")", "\n", "", "elif", "lang", "==", "'zh'", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "'jieba'", "not", "in", "sys", ".", "modules", ":", "\n", "                    ", "import", "jieba", "\n", "", "else", ":", "\n", "                    ", "jieba", "=", "sys", ".", "modules", "[", "'jieba'", "]", "\n", "", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install Jieba (https://github.com/fxsjy/jieba) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. pip install jieba\"", ")", "\n", "raise", "e", "\n", "", "text", "=", "' '", ".", "join", "(", "jieba", ".", "cut", "(", "text", ")", ")", "\n", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "text", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "lang", "==", "'ja'", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "text", "=", "self", ".", "ja_tokenize", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'It should not reach here'", ")", "\n", "\n", "", "if", "self", ".", "do_lowercase_and_remove_accent", "and", "not", "bypass_tokenizer", ":", "\n", "            ", "text", "=", "lowercase_and_remove_accent", "(", "text", ")", "\n", "\n", "", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ":", "\n", "            ", "if", "token", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer._convert_token_to_id": [[744, 747], ["tokenization_xlm.XLMTokenizer.encoder.get", "tokenization_xlm.XLMTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer._convert_id_to_token": [[748, 751], ["tokenization_xlm.XLMTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.convert_tokens_to_string": [[752, 756], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.build_inputs_with_special_tokens": [[757, 770], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.get_special_tokens_mask": [[771, 796], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.create_token_type_ids_from_sequences": [[797, 811], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        An XLM sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.XLMTokenizer.save_vocabulary": [[812, 834], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "sorted", "json.dumps", "tokenization_xlm.XLMTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.get_pairs": [[415, 426], ["set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n    Return set of symbol pairs in a word.\n    word is represented as tuple of symbols (symbols being variable-length strings)\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.lowercase_and_remove_accent": [[428, 443], ["unicodedata.normalize.lower", "unicodedata.normalize", "unicodedata.category", "output.append"], "function", ["None"], ["", "def", "lowercase_and_remove_accent", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Lowercase and strips accents from a piece of text based on\n    https://github.com/facebookresearch/XLM/blob/master/tools/lowercase_and_remove_accent.py\n    \"\"\"", "\n", "text", "=", "' '", ".", "join", "(", "text", ")", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", ".", "lower", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.replace_unicode_punct": [[445, 486], ["text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace"], "function", ["None"], ["", "def", "replace_unicode_punct", "(", "text", ")", ":", "\n", "    ", "'''\n    Port of https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/replace-unicode-punctuation.perl\n    '''", "\n", "text", "=", "text", ".", "replace", "(", "'\uff0c'", ",", "','", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\u3002\\s*'", ",", "'. '", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3001'", ",", "','", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u201d'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u201c'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2236'", ",", "':'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1a'", ",", "':'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1f'", ",", "'?'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300a'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300b'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff09'", ",", "')'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff01'", ",", "'!'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff08'", ",", "'('", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1b'", ",", "';'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff11'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300d'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300c'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff10'", ",", "'0'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff13'", ",", "'3'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff12'", ",", "'2'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff15'", ",", "'5'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff16'", ",", "'6'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff19'", ",", "'9'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff17'", ",", "'7'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff18'", ",", "'8'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff14'", ",", "'4'", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\uff0e\\s*'", ",", "'. '", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff5e'", ",", "'~'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2026'", ",", "'...'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2501'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3008'", ",", "'<'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3009'", ",", "'>'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3010'", ",", "'['", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3011'", ",", "']'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff05'", ",", "'%'", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.remove_non_printing_char": [[488, 499], ["unicodedata.category", "unicodedata.category.startswith", "output.append"], "function", ["None"], ["", "def", "remove_non_printing_char", "(", "text", ")", ":", "\n", "    ", "'''\n    Port of https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/remove-non-printing-char.perl\n    '''", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "'C'", ")", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_xlm.romanian_preprocessing": [[501, 513], ["text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace"], "function", ["None"], ["", "def", "romanian_preprocessing", "(", "text", ")", ":", "\n", "    ", "'''Sennrich's WMT16 scripts for Romanian preprocessing, used by model `xlm-mlm-enro-1024`'''", "\n", "# https://github.com/rsennrich/wmt16-scripts/blob/master/preprocess/normalise-romanian.py", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u015e\"", ",", "\"\\u0218\"", ")", ".", "replace", "(", "\"\\u015f\"", ",", "\"\\u0219\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0162\"", ",", "\"\\u021a\"", ")", ".", "replace", "(", "\"\\u0163\"", ",", "\"\\u021b\"", ")", "\n", "# https://github.com/rsennrich/wmt16-scripts/blob/master/preprocess/remove-diacritics.py", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0218\"", ",", "\"S\"", ")", ".", "replace", "(", "\"\\u0219\"", ",", "\"s\"", ")", "#s-comma", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u021a\"", ",", "\"T\"", ")", ".", "replace", "(", "\"\\u021b\"", ",", "\"t\"", ")", "#t-comma", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0102\"", ",", "\"A\"", ")", ".", "replace", "(", "\"\\u0103\"", ",", "\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u00C2\"", ",", "\"A\"", ")", ".", "replace", "(", "\"\\u00E2\"", ",", "\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u00CE\"", ",", "\"I\"", ")", ".", "replace", "(", "\"\\u00EE\"", ",", "\"i\"", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.__init__": [[129, 168], ["tokenization_utils.PreTrainedTokenizer.__init__", "tokenization_bert.load_vocab", "collections.OrderedDict", "tokenization_bert.WordpieceTokenizer", "os.path.isfile", "ValueError", "tokenization_bert.BasicTokenizer", "tokenization_bert.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "do_basic_tokenize", "=", "True", ",", "never_split", "=", "None", ",", "\n", "unk_token", "=", "\"[UNK]\"", ",", "sep_token", "=", "\"[SEP]\"", ",", "pad_token", "=", "\"[PAD]\"", ",", "cls_token", "=", "\"[CLS]\"", ",", "\n", "mask_token", "=", "\"[MASK]\"", ",", "tokenize_chinese_chars", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs a BertTokenizer.\n\n        Args:\n            **vocab_file**: Path to a one-wordpiece-per-line vocabulary file\n            **do_lower_case**: (`optional`) boolean (default True)\n                Whether to lower case the input\n                Only has an effect when do_basic_tokenize=True\n            **do_basic_tokenize**: (`optional`) boolean (default True)\n                Whether to do basic tokenization before wordpiece.\n            **never_split**: (`optional`) list of string\n                List of tokens which will never be split during tokenization.\n                Only has an effect when do_basic_tokenize=True\n            **tokenize_chinese_chars**: (`optional`) boolean (default True)\n                Whether to tokenize Chinese characters.\n                This should likely be deactivated for Japanese:\n                see: https://github.com/huggingface/pytorch-pretrained-BERT/issues/328\n        \"\"\"", "\n", "super", "(", "BertTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "do_basic_tokenize", "=", "do_basic_tokenize", "\n", "if", "do_basic_tokenize", ":", "\n", "            ", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ",", "\n", "tokenize_chinese_chars", "=", "tokenize_chinese_chars", ")", "\n", "", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ",", "unk_token", "=", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.vocab_size": [[169, 172], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer._tokenize": [[173, 182], ["tokenization_bert.BertTokenizer.basic_tokenizer.tokenize", "tokenization_bert.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization_bert.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization_bert.BertTokenizer.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "do_basic_tokenize", ":", "\n", "            ", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ",", "never_split", "=", "self", ".", "all_special_tokens", ")", ":", "\n", "                ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                    ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "", "else", ":", "\n", "            ", "split_tokens", "=", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "text", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer._convert_token_to_id": [[183, 186], ["tokenization_bert.BertTokenizer.vocab.get", "tokenization_bert.BertTokenizer.vocab.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "vocab", ".", "get", "(", "token", ",", "self", ".", "vocab", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer._convert_id_to_token": [[187, 190], ["tokenization_bert.BertTokenizer.ids_to_tokens.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "ids_to_tokens", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.convert_tokens_to_string": [[191, 195], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "replace", "(", "' ##'", ",", "''", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.build_inputs_with_special_tokens": [[196, 209], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A BERT sequence has the following format:\n            single sequence: [CLS] X [SEP]\n            pair of sequences: [CLS] A [SEP] B [SEP]\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.get_special_tokens_mask": [[210, 235], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.create_token_type_ids_from_sequences": [[236, 250], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A BERT sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BertTokenizer.save_vocabulary": [[251, 267], ["os.path.isdir", "os.path.join", "io.open", "sorted", "tokenization_bert.BertTokenizer.vocab.items", "writer.write", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "index", "=", "0", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "", "else", ":", "\n", "            ", "vocab_file", "=", "vocab_path", "\n", "", "with", "open", "(", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "token", ",", "token_index", "in", "sorted", "(", "self", ".", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: vocabulary indices are not consecutive.\"", "\n", "\" Please check that the vocabulary is not corrupted!\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "token", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "", "", "return", "(", "vocab_file", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer.__init__": [[272, 291], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ",", "never_split", "=", "None", ",", "tokenize_chinese_chars", "=", "True", ")", ":", "\n", "        ", "\"\"\" Constructs a BasicTokenizer.\n\n        Args:\n            **do_lower_case**: Whether to lower case the input.\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n            **tokenize_chinese_chars**: (`optional`) boolean (default True)\n                Whether to tokenize Chinese characters.\n                This should likely be deactivated for Japanese:\n                see: https://github.com/huggingface/pytorch-pretrained-BERT/issues/328\n        \"\"\"", "\n", "if", "never_split", "is", "None", ":", "\n", "            ", "never_split", "=", "[", "]", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "\n", "self", ".", "tokenize_chinese_chars", "=", "tokenize_chinese_chars", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer.tokenize": [[292, 322], ["tokenization_bert.BasicTokenizer._clean_text", "tokenization_bert.whitespace_tokenize", "tokenization_bert.whitespace_tokenize", "tokenization_bert.BasicTokenizer._tokenize_chinese_chars", "split_tokens.extend", "tokenization_bert.BasicTokenizer.lower", "tokenization_bert.BasicTokenizer._run_strip_accents", "tokenization_bert.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "never_split", "=", "None", ")", ":", "\n", "        ", "\"\"\" Basic Tokenization of a piece of text.\n            Split on \"white spaces\" only, for sub-word tokenization, see WordPieceTokenizer.\n\n        Args:\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n        \"\"\"", "\n", "never_split", "=", "self", ".", "never_split", "+", "(", "never_split", "if", "never_split", "is", "not", "None", "else", "[", "]", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "if", "self", ".", "tokenize_chinese_chars", ":", "\n", "            ", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._run_strip_accents": [[323, 333], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._run_split_on_punc": [[334, 355], ["list", "len", "tokenization_bert._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ",", "never_split", "=", "None", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "if", "never_split", "is", "not", "None", "and", "text", "in", "never_split", ":", "\n", "            ", "return", "[", "text", "]", "\n", "", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._tokenize_chinese_chars": [[356, 368], ["ord", "tokenization_bert.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._is_chinese_char": [[369, 390], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.BasicTokenizer._clean_text": [[391, 403], ["ord", "tokenization_bert._is_whitespace", "tokenization_bert._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.WordpieceTokenizer.__init__": [[408, 412], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.WordpieceTokenizer.tokenize": [[413, 463], ["tokenization_bert.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer`.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.load_vocab": [[89, 98], ["collections.OrderedDict", "enumerate", "io.open", "reader.readlines", "token.rstrip.rstrip"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "tokens", "=", "reader", ".", "readlines", "(", ")", "\n", "", "for", "index", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "token", "=", "token", ".", "rstrip", "(", "'\\n'", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert.whitespace_tokenize": [[100, 107], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace": [[465, 475], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control": [[477, 487], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation": [[489, 503], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.__init__": [[32, 77], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_layers.append", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.Linear", "torch.Linear", "torch.Linear", "len", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_layers.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "keep_order", "=", "False", ")", ":", "\n", "        ", "super", "(", "ProjectedAdaptiveLogSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "self", ".", "div_val", "=", "div_val", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "\n", "if", "self", ".", "n_clusters", ">", "0", ":", "\n", "            ", "self", ".", "cluster_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ",", "self", ".", "d_embed", ")", ")", "\n", "self", ".", "cluster_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ")", ")", "\n", "\n", "", "self", ".", "out_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "out_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "d_proj", "!=", "d_embed", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_embed", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_embed", ",", "n_token", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "\n", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_emb_i", ")", ")", "\n", ")", "\n", "\n", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_emb_i", ",", "r_idx", "-", "l_idx", ")", ")", "\n", "\n", "", "", "self", ".", "keep_order", "=", "keep_order", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit": [[78, 91], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "proj.t().contiguous", "proj.t"], "methods", ["None"], ["", "def", "_compute_logit", "(", "self", ",", "hidden", ",", "weight", ",", "bias", ",", "proj", ")", ":", "\n", "        ", "if", "proj", "is", "None", ":", "\n", "            ", "logit", "=", "F", ".", "linear", "(", "hidden", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "# if CUDA_MAJOR <= 9 and CUDA_MINOR <= 1:", "\n", "            ", "proj_hid", "=", "F", ".", "linear", "(", "hidden", ",", "proj", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "logit", "=", "F", ".", "linear", "(", "proj_hid", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "# else:", "\n", "#     logit = torch.einsum('bd,de,ev->bv', (hidden, proj, weight.t()))", "\n", "#     if bias is not None:", "\n", "#         logit = logit + bias", "\n", "\n", "", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.forward": [[92, 196], ["labels.view.view.view", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "hidden.size", "labels.view.view.size", "RuntimeError", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "len", "weights.append", "biases.append", "hidden.new_empty", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "mask_i.nonzero().squeeze", "torch.log_softmax.index_select", "hidden.index_select", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "head_logprob.index_select.gather().squeeze.size", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.size", "mask_i.nonzero().squeeze.numel", "labels.view.view.index_select", "F.log_softmax.index_select.gather().squeeze", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "out[].copy_", "torch.log_softmax().gather", "torch.log_softmax().gather", "torch.log_softmax().gather", "mask_i.nonzero", "torch.log_softmax.gather().squeeze", "hasattr", "labels.view.view.unsqueeze", "F.log_softmax.index_select.gather", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.gather", "head_logprob.index_select.gather().squeeze.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "labels", "=", "None", ",", "keep_order", "=", "False", ")", ":", "\n", "        ", "'''\n            Params:\n                hidden :: [len*bsz x d_proj]\n                labels :: [len*bsz]\n            Return:\n                if labels is None:\n                    out :: [len*bsz] Negative log likelihood\n                else:\n                    out :: [len*bsz x n_tokens] log probabilities of tokens over the vocabulary\n            We could replace this implementation by the native PyTorch one\n            if their's had an option to set bias on all clusters in the native one.\n            here: https://github.com/pytorch/pytorch/blob/dbe6a7a9ff1a364a8706bf5df58a1ca96d2fd9da/torch/nn/modules/adaptive.py#L138\n        '''", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "hidden", ".", "size", "(", "0", ")", "!=", "labels", ".", "size", "(", "0", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Input and labels should have the same size '", "\n", "'in the batch dimension.'", ")", "\n", "\n", "", "", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                ", "out", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "gather", "(", "1", ",", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "out", "=", "hidden", ".", "new_empty", "(", "(", "head_logit", ".", "size", "(", "0", ")", ",", "self", ".", "n_token", ")", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "zeros_like", "(", "labels", ",", "dtype", "=", "hidden", ".", "dtype", ",", "device", "=", "hidden", ".", "device", ")", "\n", "\n", "", "offset", "=", "0", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "mask_i", "=", "(", "labels", ">=", "l_idx", ")", "&", "(", "labels", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "target_i", "=", "labels", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "head_logprob_i", "=", "head_logprob", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "hidden_i", "=", "hidden", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "", "else", ":", "\n", "                    ", "hidden_i", "=", "hidden", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "if", "labels", "is", "not", "None", ":", "\n", "                        ", "logprob_i", "=", "head_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "=", "head_logprob", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "\n", "", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden_i", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "cluster_prob_idx", "=", "self", ".", "cutoffs", "[", "0", "]", "+", "i", "-", "1", "# No probability for the head cluster", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                        ", "logprob_i", "=", "head_logprob_i", "[", ":", ",", "cluster_prob_idx", "]", "+", "tail_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "logprob_i", "=", "head_logprob", "[", ":", ",", "cluster_prob_idx", ",", "None", "]", "+", "tail_logprob_i", "\n", "out", "[", ":", ",", "l_idx", ":", "r_idx", "]", "=", "logprob_i", "\n", "\n", "", "", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "if", "(", "hasattr", "(", "self", ",", "'keep_order'", ")", "and", "self", ".", "keep_order", ")", "or", "keep_order", ":", "\n", "                        ", "out", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "-", "logprob_i", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", "offset", ":", "offset", "+", "logprob_i", ".", "size", "(", "0", ")", "]", ".", "copy_", "(", "-", "logprob_i", ")", "\n", "", "offset", "+=", "logprob_i", ".", "size", "(", "0", ")", "\n", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob": [[198, 258], ["modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "hidden.new_empty", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "len", "weights.append", "biases.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.size", "len", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "log_prob", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "r\"\"\" Computes log probabilities for all :math:`n\\_classes`\n        From: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/adaptive.py\n        Args:\n            hidden (Tensor): a minibatch of examples\n        Returns:\n            log-probabilities of for each class :math:`c`\n            in range :math:`0 <= c <= n\\_classes`, where :math:`n\\_classes` is a\n            parameter passed to ``AdaptiveLogSoftmaxWithLoss`` constructor.\n        Shape:\n            - Input: :math:`(N, in\\_features)`\n            - Output: :math:`(N, n\\_classes)`\n        \"\"\"", "\n", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "return", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "\n", "out", "=", "hidden", ".", "new_empty", "(", "(", "head_logit", ".", "size", "(", "0", ")", ",", "self", ".", "n_token", ")", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "start_idx", ",", "stop_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "out", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "=", "head_logprob", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "\n", "logprob_i", "=", "head_logprob", "[", ":", ",", "-", "i", "]", "+", "tail_logprob_i", "\n", "out", "[", ":", ",", "start_idx", ",", "stop_idx", "]", "=", "logprob_i", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.LogUniformSampler.__init__": [[261, 279], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl_utilities.LogUniformSampler.dist.double().log1p_", "modeling_transfo_xl_utilities.LogUniformSampler.dist.double"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "range_max", ",", "n_sample", ")", ":", "\n", "        ", "\"\"\"\n        Reference : https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/candidate_sampling_ops.py\n            `P(class) = (log(class + 2) - log(class + 1)) / log(range_max + 1)`\n\n        expected count can be approximated by 1 - (1 - p)^n\n        and we use a numerically stable version -expm1(num_tries * log1p(-p))\n\n        Our implementation fixes num_tries at 2 * n_sample, and the actual #samples will vary from run to run\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "range_max", "=", "range_max", "\n", "log_indices", "=", "torch", ".", "arange", "(", "1.", ",", "range_max", "+", "2.", ",", "1.", ")", ".", "log_", "(", ")", "\n", "self", ".", "dist", "=", "(", "log_indices", "[", "1", ":", "]", "-", "log_indices", "[", ":", "-", "1", "]", ")", "/", "log_indices", "[", "-", "1", "]", "\n", "\n", "self", ".", "log_q", "=", "(", "-", "(", "-", "self", ".", "dist", ".", "double", "(", ")", ".", "log1p_", "(", ")", "*", "2", "*", "n_sample", ")", ".", "expm1_", "(", ")", ")", ".", "log_", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "self", ".", "n_sample", "=", "n_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample": [[280, 300], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "neg_samples.to.to.to", "modeling_transfo_xl_utilities.LogUniformSampler.log_q[].to", "modeling_transfo_xl_utilities.LogUniformSampler.log_q[].to", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n            labels: [b1, b2]\n        Return\n            true_log_probs: [b1, b2]\n            samp_log_probs: [n_sample]\n            neg_samples: [n_sample]\n        \"\"\"", "\n", "\n", "# neg_samples = torch.empty(0).long()", "\n", "n_sample", "=", "self", ".", "n_sample", "\n", "n_tries", "=", "2", "*", "n_sample", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "neg_samples", "=", "torch", ".", "multinomial", "(", "self", ".", "dist", ",", "n_tries", ",", "replacement", "=", "True", ")", ".", "unique", "(", ")", "\n", "device", "=", "labels", ".", "device", "\n", "neg_samples", "=", "neg_samples", ".", "to", "(", "device", ")", "\n", "true_log_probs", "=", "self", ".", "log_q", "[", "labels", "]", ".", "to", "(", "device", ")", "\n", "samp_log_probs", "=", "self", ".", "log_q", "[", "neg_samples", "]", ".", "to", "(", "device", ")", "\n", "return", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.sample_logits": [[301, 333], ["sampler.sample", "neg_samples.size", "torch.cat", "torch.cat", "torch.cat", "embedding", "all_w[].view", "all_w[].view", "all_b[].view", "sample_logits.masked_fill_", "torch.cat", "torch.cat", "torch.cat", "labels.size", "labels.size", "labels.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample"], ["", "", "", "def", "sample_logits", "(", "embedding", ",", "bias", ",", "labels", ",", "inputs", ",", "sampler", ")", ":", "\n", "    ", "\"\"\"\n        embedding: an nn.Embedding layer\n        bias: [n_vocab]\n        labels: [b1, b2]\n        inputs: [b1, b2, n_emb]\n        sampler: you may use a LogUniformSampler\n    Return\n        logits: [b1, b2, 1 + n_sample]\n    \"\"\"", "\n", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "=", "sampler", ".", "sample", "(", "labels", ")", "\n", "n_sample", "=", "neg_samples", ".", "size", "(", "0", ")", "\n", "b1", ",", "b2", "=", "labels", ".", "size", "(", "0", ")", ",", "labels", ".", "size", "(", "1", ")", "\n", "all_ids", "=", "torch", ".", "cat", "(", "[", "labels", ".", "view", "(", "-", "1", ")", ",", "neg_samples", "]", ")", "\n", "all_w", "=", "embedding", "(", "all_ids", ")", "\n", "true_w", "=", "all_w", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ",", "-", "1", ")", "\n", "sample_w", "=", "all_w", "[", "-", "n_sample", ":", "]", ".", "view", "(", "n_sample", ",", "-", "1", ")", "\n", "\n", "all_b", "=", "bias", "[", "all_ids", "]", "\n", "true_b", "=", "all_b", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ")", "\n", "sample_b", "=", "all_b", "[", "-", "n_sample", ":", "]", "\n", "\n", "hit", "=", "(", "labels", "[", ":", ",", ":", ",", "None", "]", "==", "neg_samples", ")", ".", "detach", "(", ")", "\n", "\n", "true_logits", "=", "torch", ".", "einsum", "(", "'ijk,ijk->ij'", ",", "\n", "[", "true_w", ",", "inputs", "]", ")", "+", "true_b", "-", "true_log_probs", "\n", "sample_logits", "=", "torch", ".", "einsum", "(", "'lk,ijk->ijl'", ",", "\n", "[", "sample_w", ",", "inputs", "]", ")", "+", "sample_b", "-", "samp_log_probs", "\n", "sample_logits", ".", "masked_fill_", "(", "hit", ",", "-", "1e30", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "true_logits", "[", ":", ",", ":", ",", "None", "]", ",", "sample_logits", "]", ",", "-", "1", ")", "\n", "\n", "return", "logits", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.is_torch_available": [[75, 77], ["None"], "function", ["None"], ["def", "is_torch_available", "(", ")", ":", "\n", "    ", "return", "_torch_available", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.is_tf_available": [[78, 80], ["None"], "function", ["None"], ["", "def", "is_tf_available", "(", ")", ":", "\n", "    ", "return", "_tf_available", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.url_to_filename": [[105, 127], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "url.endswith", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "", "def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    If the url ends with .h5 (Keras HDF5 weights) ands '.h5' to the name\n    so that TF 2.0 can identify it as a HDF5 file\n    (see https://github.com/tensorflow/tensorflow/blob/00fad90125b18b80fe054de1055770cfb8fe4ba3/tensorflow/python/keras/engine/network.py#L1380)\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "if", "url", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "        ", "filename", "+=", "'.h5'", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.filename_to_url": [[129, 153], ["os.path.join", "isinstance", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.cached_path": [[155, 186], ["urlparse", "isinstance", "str", "isinstance", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    Args:\n        cache_dir: specify a cache directory to save the file to (overwrite the default cache dir).\n        force_download: if True, re-dowload the file even if it's already cached in the cache dir.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.split_s3_path": [[188, 199], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.s3_request": [[201, 218], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.s3_etag": [[220, 227], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object", "botocore.config.Config"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.s3_get": [[229, 235], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "botocore.config.Config", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.http_get": [[237, 247], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "proxies", "=", "proxies", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.file_utils.get_from_cache": [[249, 325], ["url.startswith", "file_utils.url_to_filename", "os.path.join", "isinstance", "str", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "response.headers.get.decode", "fnmatch.filter", "list", "isinstance", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "os.path.exists", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "isinstance", "unicode", "s.endswith"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.url_to_filename", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_etag", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_get", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.http_get", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ",", "etag_timeout", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "not", "isinstance", "(", "cache_dir", ",", "str", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ",", "proxies", "=", "proxies", ",", "timeout", "=", "etag_timeout", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "(", "EnvironmentError", ",", "requests", ".", "exceptions", ".", "Timeout", ")", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "etag", "is", "not", "None", ":", "\n", "        ", "etag", "=", "etag", ".", "decode", "(", "'utf-8'", ")", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "or", "force_download", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache or force_download set to True, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "output_string", ",", "str", ")", ":", "\n", "                    ", "output_string", "=", "unicode", "(", "output_string", ",", "'utf-8'", ")", "# The beauty of python 2", "\n", "", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer.__init__": [[52, 70], ["transformers.tokenization_utils.PreTrainedTokenizer.__init__", "sentencepiece.SentencePieceProcessor", "tokenization_camembert.CamembertTokenizer.sp_model.Load", "len", "str", "len", "len", "tokenization_camembert.CamembertTokenizer.fairseq_tokens_to_ids.items"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "sep_token", "=", "\"</s>\"", ",", "\n", "cls_token", "=", "\"<s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "pad_token", "=", "'<pad>'", ",", "mask_token", "=", "'<mask>'", ",", "\n", "additional_special_tokens", "=", "[", "'<s>NOTUSED'", ",", "'<s>NOTUSED'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CamembertTokenizer", ",", "self", ")", ".", "__init__", "(", "max_len", "=", "512", ",", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "\n", "sep_token", "=", "sep_token", ",", "cls_token", "=", "cls_token", ",", "pad_token", "=", "pad_token", ",", "\n", "mask_token", "=", "mask_token", ",", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "4", "# take into account special tokens", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "str", "(", "vocab_file", ")", ")", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "# HACK: These tokens were added by fairseq but don't seem to be actually used when duplicated in the actual", "\n", "# sentencepiece vocabulary (this is the case for <s> and </s>", "\n", "self", ".", "fairseq_tokens_to_ids", "=", "{", "'<s>NOTUSED'", ":", "0", ",", "'<pad>'", ":", "1", ",", "'</s>NOTUSED'", ":", "2", ",", "'<unk>'", ":", "3", "}", "\n", "self", ".", "fairseq_offset", "=", "len", "(", "self", ".", "fairseq_tokens_to_ids", ")", "\n", "self", ".", "fairseq_tokens_to_ids", "[", "'<mask>'", "]", "=", "len", "(", "self", ".", "sp_model", ")", "+", "len", "(", "self", ".", "fairseq_tokens_to_ids", ")", "\n", "self", ".", "fairseq_ids_to_tokens", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "fairseq_tokens_to_ids", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer.build_inputs_with_special_tokens": [[71, 84], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer.get_special_tokens_mask": [[85, 109], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", ",", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer.create_token_type_ids_from_sequences": [[110, 125], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A RoBERTa sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer.vocab_size": [[126, 129], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fairseq_offset", "+", "len", "(", "self", ".", "sp_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer._tokenize": [[130, 132], ["tokenization_camembert.CamembertTokenizer.sp_model.EncodeAsPieces"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer._convert_token_to_id": [[133, 138], ["tokenization_camembert.CamembertTokenizer.sp_model.PieceToId"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "if", "token", "in", "self", ".", "fairseq_tokens_to_ids", ":", "\n", "            ", "return", "self", ".", "fairseq_tokens_to_ids", "[", "token", "]", "\n", "", "return", "self", ".", "fairseq_offset", "+", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer._convert_id_to_token": [[139, 144], ["tokenization_camembert.CamembertTokenizer.sp_model.IdToPiece"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "if", "index", "in", "self", ".", "fairseq_ids_to_tokens", ":", "\n", "            ", "return", "self", ".", "fairseq_ids_to_tokens", "[", "index", "]", "\n", "", "return", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", "-", "self", ".", "fairseq_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_camembert.CamembertTokenizer.save_vocabulary": [[145, 158], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch": [[48, 91], ["print", "torch.save", "corpus_dict_no_vocab.pop", "print", "torch.save", "os.path.abspath", "os.path.abspath", "print", "print", "transformers.TransfoXLLMHeadModel", "transformers.load_tf_weights_in_transfo_xl", "os.path.join", "os.path.join", "print", "torch.save", "print", "io.open", "pickle.load", "transformers.TransfoXLConfig", "transformers.TransfoXLConfig.from_json_file", "transformers.load_tf_weights_in_transfo_xl.state_dict", "io.open", "f.write", "str", "os.path.abspath", "os.path.abspath", "TransfoXLConfig.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["def", "convert_transfo_xl_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "\n", "transfo_xl_config_file", ",", "\n", "pytorch_dump_folder_path", ",", "\n", "transfo_xl_dataset_file", ")", ":", "\n", "    ", "if", "transfo_xl_dataset_file", ":", "\n", "# Convert a pre-processed corpus (see original TensorFlow repo)", "\n", "        ", "with", "open", "(", "transfo_xl_dataset_file", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "corpus", "=", "pickle", ".", "load", "(", "fp", ",", "encoding", "=", "\"latin1\"", ")", "\n", "# Save vocabulary and dataset cache as Dictionaries (should be better than pickles for the long-term)", "\n", "", "pytorch_vocab_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "VOCAB_FILES_NAMES", "[", "'pretrained_vocab_file'", "]", "\n", "print", "(", "\"Save vocabulary to {}\"", ".", "format", "(", "pytorch_vocab_dump_path", ")", ")", "\n", "corpus_vocab_dict", "=", "corpus", ".", "vocab", ".", "__dict__", "\n", "torch", ".", "save", "(", "corpus_vocab_dict", ",", "pytorch_vocab_dump_path", ")", "\n", "\n", "corpus_dict_no_vocab", "=", "corpus", ".", "__dict__", "\n", "corpus_dict_no_vocab", ".", "pop", "(", "'vocab'", ",", "None", ")", "\n", "pytorch_dataset_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CORPUS_NAME", "\n", "print", "(", "\"Save dataset to {}\"", ".", "format", "(", "pytorch_dataset_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "corpus_dict_no_vocab", ",", "pytorch_dataset_dump_path", ")", "\n", "\n", "", "if", "tf_checkpoint_path", ":", "\n", "# Convert a pre-trained TensorFlow model", "\n", "        ", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "transfo_xl_config_file", ")", "\n", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "\n", "print", "(", "\"Converting Transformer XL checkpoint from {} with config at {}\"", ".", "format", "(", "tf_path", ",", "config_path", ")", ")", "\n", "# Initialise PyTorch model", "\n", "if", "transfo_xl_config_file", "==", "\"\"", ":", "\n", "            ", "config", "=", "TransfoXLConfig", "(", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "TransfoXLConfig", ".", "from_json_file", "(", "transfo_xl_config_file", ")", "\n", "", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "TransfoXLLMHeadModel", "(", "config", ")", "\n", "\n", "model", "=", "load_tf_weights_in_transfo_xl", "(", "model", ",", "config", ",", "tf_path", ")", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "WEIGHTS_NAME", ")", "\n", "pytorch_config_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "CONFIG_NAME", ")", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_weights_dump_path", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_config_dump_path", ")", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModel.__init__": [[64, 66], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModel is designed to be instantiated \"", "\n", "\"using the `AutoModel.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModel.from_pretrained": [[68, 165], ["ValueError", "modeling_distilbert.DistilBertModel.from_pretrained", "modeling_camembert.CamembertModel.from_pretrained", "modeling_roberta.RobertaModel.from_pretrained", "modeling_bert.BertModel.from_pretrained", "modeling_openai.OpenAIGPTModel.from_pretrained", "modeling_gpt2.GPT2Model.from_pretrained", "modeling_transfo_xl.TransfoXLModel.from_pretrained", "modeling_xlnet.XLNetModel.from_pretrained", "modeling_xlm.XLMModel.from_pretrained", "modeling_ctrl.CTRLModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the base model classes of the library\n        from a pre-trained model configuration.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertModel (DistilBERT model)\n            - contains `camembert`: CamembertModel (CamemBERT model)\n            - contains `roberta`: RobertaModel (RoBERTa model)\n            - contains `bert`: BertModel (Bert model)\n            - contains `openai-gpt`: OpenAIGPTModel (OpenAI GPT model)\n            - contains `gpt2`: GPT2Model (OpenAI GPT-2 model)\n            - contains `ctrl`: CTRLModel (Salesforce CTRL  model)\n            - contains `transfo-xl`: TransfoXLModel (Transformer-XL model)\n            - contains `xlnet`: XLNetModel (XLNet model)\n            - contains `xlm`: XLMModel (XLM model)\n\n            The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n            To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModel.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModel.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta, 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModelWithLMHead.__init__": [[192, 194], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModelWithLMHead.from_pretrained": [[196, 295], ["ValueError", "modeling_distilbert.DistilBertForMaskedLM.from_pretrained", "modeling_camembert.CamembertForMaskedLM.from_pretrained", "modeling_roberta.RobertaForMaskedLM.from_pretrained", "modeling_bert.BertForMaskedLM.from_pretrained", "modeling_openai.OpenAIGPTLMHeadModel.from_pretrained", "modeling_gpt2.GPT2LMHeadModel.from_pretrained", "modeling_transfo_xl.TransfoXLLMHeadModel.from_pretrained", "modeling_xlnet.XLNetLMHeadModel.from_pretrained", "modeling_xlm.XLMWithLMHeadModel.from_pretrained", "modeling_ctrl.CTRLLMHeadModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the language modeling model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForMaskedLM (DistilBERT model)\n            - contains `camembert`: CamembertForMaskedLM (CamemBERT model)\n            - contains `roberta`: RobertaForMaskedLM (RoBERTa model)\n            - contains `bert`: BertForMaskedLM (Bert model)\n            - contains `openai-gpt`: OpenAIGPTLMHeadModel (OpenAI GPT model)\n            - contains `gpt2`: GPT2LMHeadModel (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLLMHeadModel (Transformer-XL model)\n            - contains `xlnet`: XLNetLMHeadModel (XLNet model)\n            - contains `xlm`: XLMWithLMHeadModel (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelWithLMHead.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelWithLMHead.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelWithLMHead.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelWithLMHead.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2LMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMWithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta','ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModelForSequenceClassification.__init__": [[318, 320], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModelForSequenceClassification.from_pretrained": [[322, 410], ["ValueError", "modeling_distilbert.DistilBertForSequenceClassification.from_pretrained", "modeling_camembert.CamembertForSequenceClassification.from_pretrained", "modeling_roberta.RobertaForSequenceClassification.from_pretrained", "modeling_bert.BertForSequenceClassification.from_pretrained", "modeling_xlnet.XLNetForSequenceClassification.from_pretrained", "modeling_xlm.XLMForSequenceClassification.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the sequence classification model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForSequenceClassification (DistilBERT model)\n            - contains `camembert`: CamembertForSequenceClassification (CamemBERT model)\n            - contains `roberta`: RobertaForSequenceClassification (RoBERTa model)\n            - contains `bert`: BertForSequenceClassification (Bert model)\n            - contains `xlnet`: XLNetForSequenceClassification (XLNet model)\n            - contains `xlm`: XLMForSequenceClassification (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelForSequenceClassification.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelForSequenceClassification.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModelForQuestionAnswering.__init__": [[431, 433], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_auto.AutoModelForQuestionAnswering.from_pretrained": [[435, 517], ["ValueError", "modeling_distilbert.DistilBertForQuestionAnswering.from_pretrained", "modeling_bert.BertForQuestionAnswering.from_pretrained", "modeling_xlnet.XLNetForQuestionAnswering.from_pretrained", "modeling_xlm.XLMForQuestionAnswering.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the question answering model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForQuestionAnswering (DistilBERT model)\n            - contains `bert`: BertForQuestionAnswering (Bert model)\n            - contains `xlnet`: XLNetForQuestionAnswering (XLNet model)\n            - contains `xlm`: XLMForQuestionAnswering (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelForQuestionAnswering.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelForQuestionAnswering.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelForQuestionAnswering.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelForQuestionAnswering.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch": [[33, 52], ["transformers.GPT2Model", "transformers.load_tf_weights_in_gpt2", "print", "torch.save", "print", "transformers.GPT2Config", "transformers.GPT2Config.from_json_file", "transformers.GPT2Model.state_dict", "io.open", "f.write", "GPT2Config.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_gpt2.load_tf_weights_in_gpt2", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["def", "convert_gpt2_checkpoint_to_pytorch", "(", "gpt2_checkpoint_path", ",", "gpt2_config_file", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Construct model", "\n", "    ", "if", "gpt2_config_file", "==", "\"\"", ":", "\n", "        ", "config", "=", "GPT2Config", "(", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "GPT2Config", ".", "from_json_file", "(", "gpt2_config_file", ")", "\n", "", "model", "=", "GPT2Model", "(", "config", ")", "\n", "\n", "# Load weights from numpy", "\n", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaEmbeddings.__init__": [[46, 52], ["modeling_bert.BertEmbeddings.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ",", "\n", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaEmbeddings.forward": [[53, 71], ["super().forward", "input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs_embeds.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.forward", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "# Position numbers begin at padding_idx+1. Padding symbols are ignored.", "\n", "# cf. fairseq's `utils.make_positions`", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "return", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "forward", "(", "input_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaModel.__init__": [[180, 185], ["modeling_bert.BertModel.__init__", "modeling_roberta.RobertaEmbeddings", "modeling_roberta.RobertaModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaModel.get_input_embeddings": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaModel.set_input_embeddings": [[189, 191], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForMaskedLM.__init__": [[228, 235], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaLMHead", "modeling_roberta.RobertaForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForMaskedLM.get_output_embeddings": [[236, 238], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForMaskedLM.forward": [[239, 258], ["modeling_roberta.RobertaForMaskedLM.roberta", "modeling_roberta.RobertaForMaskedLM.lm_head", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaLMHead.__init__": [[263, 270], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaLMHead.forward": [[271, 280], ["modeling_roberta.RobertaLMHead.dense", "modeling_bert.gelu", "modeling_roberta.RobertaLMHead.layer_norm", "modeling_roberta.RobertaLMHead.decoder"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.gelu"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "gelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForSequenceClassification.__init__": [[320, 326], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "RobertaClassificationHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForSequenceClassification.forward": [[327, 350], ["modeling_roberta.RobertaForSequenceClassification.roberta", "modeling_roberta.RobertaForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForMultipleChoice.__init__": [[429, 437], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForMultipleChoice.forward": [[438, 462], ["input_ids.view", "modeling_roberta.RobertaForMultipleChoice.roberta", "modeling_roberta.RobertaForMultipleChoice.dropout", "modeling_roberta.RobertaForMultipleChoice.classifier", "modeling_roberta.RobertaForMultipleChoice.view", "input_ids.size", "position_ids.view", "token_type_ids.view", "attention_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "position_ids.size", "token_type_ids.size", "attention_mask.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "outputs", "=", "self", ".", "roberta", "(", "flat_input_ids", ",", "position_ids", "=", "flat_position_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "attention_mask", "=", "flat_attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForTokenClassification.__init__": [[500, 509], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForTokenClassification.forward": [[510, 539], ["modeling_roberta.RobertaForTokenClassification.roberta", "modeling_roberta.RobertaForTokenClassification.dropout", "modeling_roberta.RobertaForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_roberta.RobertaForTokenClassification.view", "labels.view", "modeling_roberta.RobertaForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaClassificationHead.__init__": [[544, 549], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaClassificationHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaClassificationHead.forward": [[550, 558], ["modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForQuestionAnswering.__init__": [[566, 574], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForQuestionAnswering.forward": [[575, 671], ["modeling_roberta.RobertaForQuestionAnswering.roberta", "modeling_roberta.RobertaForQuestionAnswering.qa_outputs", "modeling_roberta.RobertaForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "sum", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "zip", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "zip", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "input_ids", ",", "\n", "attention_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "\n", "end_positions", "=", "None", ",", "\n", "answer_masks", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        start_positions (:obj:`torch.LongTensor` of shape :obj:`(batch_size,)`, `optional`, defaults to :obj:`None`):\n            Labels for position (index) of the start of the labelled span for computing the token classification loss.\n            Positions are clamped to the length of the sequence (`sequence_length`).\n            Position outside of the sequence are not taken into account for computing the loss.\n        end_positions (:obj:`torch.LongTensor` of shape :obj:`(batch_size,)`, `optional`, defaults to :obj:`None`):\n            Labels for position (index) of the end of the labelled span for computing the token classification loss.\n            Positions are clamped to the length of the sequence (`sequence_length`).\n            Position outside of the sequence are not taken into account for computing the loss.\n    Returns:\n        :obj:`tuple(torch.FloatTensor)` comprising various elements depending on the configuration (:class:`~transformers.RobertaConfig`) and inputs:\n        loss (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, returned when :obj:`labels` is provided):\n            Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.\n        start_scores (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, sequence_length,)`):\n            Span-start scores (before SoftMax).\n        end_scores (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, sequence_length,)`):\n            Span-end scores (before SoftMax).\n        hidden_states (:obj:`tuple(torch.FloatTensor)`, `optional`, returned when ``config.output_hidden_states=True``):\n            Tuple of :obj:`torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer)\n            of shape :obj:`(batch_size, sequence_length, hidden_size)`.\n            Hidden-states of the model at the output of each layer plus the initial embedding outputs.\n        attentions (:obj:`tuple(torch.FloatTensor)`, `optional`, returned when ``config.output_attentions=True``):\n            Tuple of :obj:`torch.FloatTensor` (one for each layer) of shape\n            :obj:`(batch_size, num_heads, sequence_length, sequence_length)`.\n            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n            heads.\n    Examples::\n        # The checkpoint roberta-large is not fine-tuned for question answering. Please see the\n        # examples/run_squad.py example to see how to fine-tune a model to a question answering task.\n        from transformers import RobertaTokenizer, RobertaForQuestionAnswering\n        import torch\n        tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n        model = RobertaForQuestionAnswering.from_pretrained('roberta-base')\n        question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n        input_ids = tokenizer.encode(question, text)\n        start_scores, end_scores = model(torch.tensor([input_ids]))\n        all_tokens = tokenizer.convert_ids_to_tokens(input_ids)\n        answer = ' '.join(all_tokens[torch.argmax(start_scores) : torch.argmax(end_scores)+1])\n        \"\"\"", "\n", "\n", "outputs", "=", "self", ".", "roberta", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ",", "reduce", "=", "False", ")", "\n", "\n", "start_losses", "=", "[", "(", "loss_fct", "(", "start_logits", ",", "_start_positions", ")", "*", "_span_mask", ")", "for", "(", "_start_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "start_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "end_losses", "=", "[", "(", "loss_fct", "(", "end_logits", ",", "_end_positions", ")", "*", "_span_mask", ")", "for", "(", "_end_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "end_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "\n", "total_loss", "=", "sum", "(", "start_losses", "+", "end_losses", ")", "\n", "total_loss", "=", "torch", ".", "mean", "(", "total_loss", ")", "/", "2", "\n", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.__init__": [[679, 689], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaLMHead", "torch.Parameter", "torch.Parameter", "modeling_roberta.RobertaForCopy.init_weights", "modeling_roberta.RobertaForCopy.tie_weights", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForCopy", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "\n", "self", ".", "coef", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "config", ".", "hidden_size", ")", "/", "config", ".", "hidden_size", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.tie_weights": [[690, 695], ["modeling_roberta.RobertaForCopy._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ".", "decoder", ",", "self", ".", "roberta", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.get_range_vector": [[697, 706], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor"], "methods", ["None"], ["", "def", "get_range_vector", "(", "self", ",", "size", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Returns a range vector with the desired size, starting at 0. The CUDA implementation\n        is meant to avoid copy data from CPU to GPU.\n        \"\"\"", "\n", "if", "device", ">", "-", "1", ":", "\n", "            ", "return", "torch", ".", "cuda", ".", "LongTensor", "(", "size", ",", "device", "=", "device", ")", ".", "fill_", "(", "1", ")", ".", "cumsum", "(", "0", ")", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "arange", "(", "0", ",", "size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.get_device_of": [[707, 715], ["tensor.get_device"], "methods", ["None"], ["", "", "def", "get_device_of", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Returns the device of the tensor.\n        \"\"\"", "\n", "if", "not", "tensor", ".", "is_cuda", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "tensor", ".", "get_device", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.flatten_and_batch_shift_indices": [[716, 733], ["range", "offset_indices.view.view.view", "modeling_roberta.RobertaForCopy.get_range_vector", "offsets.unsqueeze.unsqueeze.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "indices.size", "modeling_roberta.RobertaForCopy.get_device_of", "len", "indices.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.get_range_vector", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.get_device_of"], ["", "", "def", "flatten_and_batch_shift_indices", "(", "self", ",", "indices", ",", "sequence_length", ")", ":", "\n", "# Shape: (batch_size)", "\n", "        ", "if", "torch", ".", "max", "(", "indices", ")", ">=", "sequence_length", "or", "torch", ".", "min", "(", "indices", ")", "<", "0", ":", "\n", "            ", "assert", "(", "False", ")", "\n", "# raise ConfigurationError(", "\n", "#     f\"All elements in indices should be in range (0, {sequence_length - 1})\"", "\n", "# )", "\n", "", "offsets", "=", "self", ".", "get_range_vector", "(", "indices", ".", "size", "(", "0", ")", ",", "self", ".", "get_device_of", "(", "indices", ")", ")", "*", "sequence_length", "\n", "for", "_", "in", "range", "(", "len", "(", "indices", ".", "size", "(", ")", ")", "-", "1", ")", ":", "\n", "            ", "offsets", "=", "offsets", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Shape: (batch_size, d_1, ..., d_n)", "\n", "", "offset_indices", "=", "indices", "+", "offsets", "\n", "\n", "# Shape: (batch_size * d_1 * ... * d_n)", "\n", "offset_indices", "=", "offset_indices", ".", "view", "(", "-", "1", ")", "\n", "return", "offset_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.batched_index_select": [[734, 752], ["target.view", "target.view.index_select", "target.view.index_select.view", "modeling_roberta.RobertaForCopy.flatten_and_batch_shift_indices", "target.size", "list", "target.size", "indices.size", "target.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.flatten_and_batch_shift_indices"], ["", "def", "batched_index_select", "(", "self", ",", "\n", "target", ",", "\n", "indices", ",", "\n", "flattened_indices", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "flattened_indices", "is", "None", ":", "\n", "# Shape: (batch_size * d_1 * ... * d_n)", "\n", "            ", "flattened_indices", "=", "self", ".", "flatten_and_batch_shift_indices", "(", "indices", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Shape: (batch_size * sequence_length, embedding_size)", "\n", "", "flattened_target", "=", "target", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# Shape: (batch_size * d_1 * ... * d_n, embedding_size)", "\n", "flattened_selected", "=", "flattened_target", ".", "index_select", "(", "0", ",", "flattened_indices", ")", "\n", "selected_shape", "=", "list", "(", "indices", ".", "size", "(", ")", ")", "+", "[", "target", ".", "size", "(", "-", "1", ")", "]", "\n", "# Shape: (batch_size, d_1, ..., d_n, embedding_size)", "\n", "selected_targets", "=", "flattened_selected", ".", "view", "(", "*", "selected_shape", ")", "\n", "return", "selected_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForCopy.forward": [[754, 784], ["modeling_roberta.RobertaForCopy.roberta", "modeling_roberta.RobertaForCopy.lm_head", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "input_ids.size", "span_start.size", "modeling_roberta.RobertaForCopy.batched_index_select", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "label_masks.to.to.to", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "modeling_roberta.RobertaForCopy.view", "masked_lm_labels.view", "modeling_roberta.RobertaForCopy.coef.unsqueeze().unsqueeze", "sequence_output.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "modeling_roberta.RobertaForCopy.coef.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.batched_index_select"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "span_start", "=", "None", ",", "label_masks", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "bsz", ",", "seq_len", "=", "input_ids", ".", "size", "(", ")", "\n", "K", "=", "span_start", ".", "size", "(", "1", ")", "\n", "valid_span_mask", "=", "(", "span_start", ">", "0", ")", ".", "to", "(", "sequence_output", ".", "dtype", ")", "\n", "span_start_emb", "=", "self", ".", "batched_index_select", "(", "sequence_output", ",", "span_start", ")", "\n", "span_start_emb", "=", "span_start_emb", "*", "self", ".", "coef", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# bsz, K, dim", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "span_start_emb", ",", "sequence_output", ".", "transpose", "(", "1", ",", "2", ")", ")", "# bsz, K, seq_len", "\n", "\n", "label_masks", "=", "label_masks", ".", "to", "(", "scores", ".", "dtype", ")", "\n", "\n", "log_norm", "=", "torch", ".", "logsumexp", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "log_correct", "=", "torch", ".", "logsumexp", "(", "scores", "-", "10000", "*", "(", "1", "-", "label_masks", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "copy_loss", "=", "-", "torch", ".", "sum", "(", "(", "log_correct", "-", "log_norm", ")", "*", "valid_span_mask", ")", "/", "(", "torch", ".", "sum", "(", "valid_span_mask", ")", "+", "1e-12", ")", "\n", "\n", "return", "masked_lm_loss", ",", "copy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForQuestionAnsweringForQUOREF.__init__": [[789, 808], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "modeling_bert.BertConfig", "modeling_bert.BertLayer", "modeling_roberta.RobertaForQuestionAnsweringForQUOREF.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForQuestionAnsweringForQUOREF", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "self", ".", "num_answers", "=", "config", ".", "num_answers", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "self", ".", "qa_classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_answers", ")", "\n", "\n", "self", ".", "point_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "head_num", "=", "config", ".", "num_attention_heads", "//", "4", "\n", "\n", "self", ".", "coref_config", "=", "BertConfig", "(", "num_hidden_layers", "=", "1", ",", "num_attention_heads", "=", "head_num", ",", "hidden_size", "=", "config", ".", "hidden_size", ",", "intermediate_size", "=", "256", "*", "head_num", ")", "\n", "\n", "self", ".", "coref_layer", "=", "BertLayer", "(", "self", ".", "coref_config", ")", "\n", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForQuestionAnsweringForQUOREF.forward": [[809, 862], ["modeling_roberta.RobertaForQuestionAnsweringForQUOREF.roberta", "attention_mask.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling_roberta.RobertaForQuestionAnsweringForQUOREF.qa_outputs", "modeling_roberta.RobertaForQuestionAnsweringForQUOREF.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "modeling_roberta.RobertaForQuestionAnsweringForQUOREF.qa_classifier", "modeling_roberta.RobertaForQuestionAnsweringForQUOREF.coref_layer", "start_logits.squeeze.squeeze.size", "start_positions.clamp_", "end_positions.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "sum", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "attention_mask.unsqueeze", "len", "answer_nums.squeeze.squeeze.squeeze", "next", "answer_nums.squeeze.squeeze.size", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "zip", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "zip", "modeling_roberta.RobertaForQuestionAnsweringForQUOREF.parameters", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "answer_masks", "=", "None", ",", "answer_nums", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output_0", "=", "outputs", "[", "0", "]", "\n", "\n", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "sequence_output", "=", "self", ".", "coref_layer", "(", "sequence_output_0", ",", "extended_attention_mask", ")", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "switch_logits", "=", "self", ".", "qa_classifier", "(", "sequence_output", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", "switch_logits", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "\n", "            ", "if", "len", "(", "answer_nums", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "answer_nums", "=", "answer_nums", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ",", "reduce", "=", "False", ")", "\n", "\n", "start_losses", "=", "[", "(", "loss_fct", "(", "start_logits", ",", "_start_positions", ")", "*", "_span_mask", ")", "for", "(", "_start_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "start_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "end_losses", "=", "[", "(", "loss_fct", "(", "end_logits", ",", "_end_positions", ")", "*", "_span_mask", ")", "for", "(", "_end_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "end_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "\n", "s_e_loss", "=", "sum", "(", "start_losses", "+", "end_losses", ")", "# bsz", "\n", "switch_loss", "=", "loss_fct", "(", "switch_logits", ",", "answer_nums", ")", "\n", "\n", "total_loss", "=", "torch", ".", "mean", "(", "s_e_loss", "+", "switch_loss", ")", "#+ 0.1 * mention_loss", "\n", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForQuestionAnsweringForMRQA.__init__": [[870, 878], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForQuestionAnsweringForMRQA.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForQuestionAnsweringForMRQA", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForQuestionAnsweringForMRQA.forward": [[879, 935], ["modeling_roberta.RobertaForQuestionAnsweringForMRQA.roberta", "modeling_roberta.RobertaForQuestionAnsweringForMRQA.qa_outputs", "modeling_roberta.RobertaForQuestionAnsweringForMRQA.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "sum", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "zip", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "zip", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "input_ids", ",", "\n", "attention_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "\n", "end_positions", "=", "None", ",", "\n", "answer_masks", "=", "None", ",", "\n", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ",", "reduce", "=", "False", ")", "\n", "\n", "start_losses", "=", "[", "(", "loss_fct", "(", "start_logits", ",", "_start_positions", ")", "*", "_span_mask", ")", "for", "(", "_start_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "start_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "end_losses", "=", "[", "(", "loss_fct", "(", "end_logits", ",", "_end_positions", ")", "*", "_span_mask", ")", "for", "(", "_end_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "end_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "\n", "total_loss", "=", "sum", "(", "start_losses", "+", "end_losses", ")", "\n", "total_loss", "=", "torch", ".", "mean", "(", "total_loss", ")", "/", "2", "\n", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForSequenceEncoder.__init__": [[970, 979], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForSequenceEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForSequenceEncoder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_roberta.RobertaForSequenceEncoder.forward": [[980, 994], ["modeling_roberta.RobertaForSequenceEncoder.roberta", "modeling_roberta.RobertaForSequenceEncoder.dropout", "modeling_roberta.RobertaForSequenceEncoder.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "outputs", "[", "0", "]", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "outputs", "[", "1", "]", ")", "\n", "\n", "return", "sequence_output", ",", "pooled_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_ctrl.CTRLConfig.__init__": [[53, 126], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "isinstance", "json.loads.items", "isinstance", "io.open", "json.loads", "isinstance", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "246534", ",", "\n", "n_positions", "=", "256", ",", "\n", "n_ctx", "=", "256", ",", "\n", "n_embd", "=", "1280", ",", "\n", "dff", "=", "8192", ",", "\n", "n_layer", "=", "48", ",", "\n", "n_head", "=", "16", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-6", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "\n", "num_labels", "=", "1", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs CTRLConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `CTRLModel` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            dff: Size of the inner dimension of the FFN.\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "CTRLConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", "else", "-", "1", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dff", "=", "dff", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "not", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_ctrl.CTRLConfig.max_position_embeddings": [[129, 132], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_ctrl.CTRLConfig.hidden_size": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_ctrl.CTRLConfig.num_attention_heads": [[137, 140], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_ctrl.CTRLConfig.num_hidden_layers": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.bos_token": [[136, 139], ["None"], "methods", ["None"], ["", "@", "bos_token", ".", "setter", "\n", "def", "bos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.eos_token": [[140, 143], ["None"], "methods", ["None"], ["", "@", "eos_token", ".", "setter", "\n", "def", "eos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_eos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.unk_token": [[144, 147], ["None"], "methods", ["None"], ["", "@", "unk_token", ".", "setter", "\n", "def", "unk_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_unk_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.sep_token": [[148, 151], ["None"], "methods", ["None"], ["", "@", "sep_token", ".", "setter", "\n", "def", "sep_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_sep_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.pad_token": [[152, 155], ["None"], "methods", ["None"], ["", "@", "pad_token", ".", "setter", "\n", "def", "pad_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_pad_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.cls_token": [[156, 159], ["None"], "methods", ["None"], ["", "@", "cls_token", ".", "setter", "\n", "def", "cls_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_cls_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.mask_token": [[160, 163], ["None"], "methods", ["None"], ["", "@", "mask_token", ".", "setter", "\n", "def", "mask_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_mask_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens": [[164, 167], ["None"], "methods", ["None"], ["", "@", "additional_special_tokens", ".", "setter", "\n", "def", "additional_special_tokens", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_additional_special_tokens", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.bos_token_id": [[168, 172], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "bos_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the beginning of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "bos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.eos_token_id": [[173, 177], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "eos_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the end of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "eos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.unk_token_id": [[178, 182], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "unk_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the unknown token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.sep_token_id": [[183, 187], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "sep_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the separation token in the vocabulary. E.g. separate context and query in an input sequence. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "sep_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.pad_token_id": [[188, 192], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "pad_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the padding token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.cls_token_id": [[193, 197], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "cls_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the classification token in the vocabulary. E.g. to extract a summary of an input sequence leveraging self-attention along the full depth of the model. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "cls_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.mask_token_id": [[198, 202], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "mask_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the mask token in the vocabulary. E.g. when training a model with masked-language modeling. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "mask_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens_ids": [[203, 207], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "additional_special_tokens_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" Ids of all the additional special tokens in the vocabulary (list of integers). Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "additional_special_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.__init__": [[208, 235], ["kwargs.items", "int", "setattr", "isinstance", "all", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "max_len", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "None", "\n", "self", ".", "_eos_token", "=", "None", "\n", "self", ".", "_unk_token", "=", "None", "\n", "self", ".", "_sep_token", "=", "None", "\n", "self", ".", "_pad_token", "=", "None", "\n", "self", ".", "_cls_token", "=", "None", "\n", "self", ".", "_mask_token", "=", "None", "\n", "self", ".", "_additional_special_tokens", "=", "[", "]", "\n", "\n", "self", ".", "max_len", "=", "max_len", "if", "max_len", "is", "not", "None", "else", "int", "(", "1e12", ")", "\n", "\n", "# Added tokens", "\n", "self", ".", "added_tokens_encoder", "=", "{", "}", "\n", "self", ".", "added_tokens_decoder", "=", "{", "}", "\n", "\n", "# inputs and kwargs for saving and re-loading (see ``from_pretrained`` and ``save_pretrained``)", "\n", "self", ".", "init_inputs", "=", "(", ")", "\n", "self", ".", "init_kwargs", "=", "{", "}", "\n", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "                ", "if", "key", "==", "'additional_special_tokens'", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "t", ",", "unicode", ")", ")", "for", "t", "in", "value", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "value", ",", "unicode", ")", ")", "\n", "", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.from_pretrained": [[237, 284], ["cls._from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._from_pretrained"], ["", "", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Instantiate a :class:`~transformers.PreTrainedTokenizer` (or a derived class) from a predefined tokenizer.\n\n        Args:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a predefined tokenizer to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing vocabulary files required by the tokenizer, for instance saved using the :func:`~transformers.PreTrainedTokenizer.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - (not applicable to all derived classes) a path or url to a single saved vocabulary file if and only if the tokenizer only requires a single vocabulary file (e.g. Bert, XLNet), e.g.: ``./my_model_directory/vocab.txt``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded predefined tokenizer vocabulary files should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the vocabulary files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            inputs: (`optional`) positional arguments: will be passed to the Tokenizer ``__init__`` method.\n\n            kwargs: (`optional`) keyword arguments: will be passed to the Tokenizer ``__init__`` method. Can be used to set special tokens like ``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``, ``additional_special_tokens``. See parameters in the doc string of :class:`~transformers.PreTrainedTokenizer` for details.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PreTrainedTokenizer` so let's show our examples on a derived class: BertTokenizer\n\n            # Download vocabulary from S3 and cache.\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\n            # If vocabulary files are in a directory (e.g. tokenizer was saved using `save_pretrained('./test/saved_model/')`)\n            tokenizer = BertTokenizer.from_pretrained('./test/saved_model/')\n\n            # If the tokenizer uses a single vocabulary file, you can point directly to this file\n            tokenizer = BertTokenizer.from_pretrained('./test/saved_model/my_vocab.txt')\n\n            # You can link tokens to special vocabulary when instantiating\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', unk_token='<unk>')\n            # You should be sure '<unk>' is in the vocabulary when doing that.\n            # Otherwise use tokenizer.add_special_tokens({'unk_token': '<unk>'}) instead)\n            assert tokenizer.unk_token == '<unk>'\n\n        \"\"\"", "\n", "return", "cls", ".", "_from_pretrained", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._from_pretrained": [[286, 426], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "list", "vocab_files.items", "resolved_vocab_files.pop", "json.load.update", "resolved_vocab_files.pop", "resolved_vocab_files.pop", "resolved_vocab_files.items", "cls", "cls.max_model_input_sizes.keys", "cls.pretrained_vocab_files_map.items", "logger.info", "cls.vocab_files_names.items", "additional_files_names.items", "all", "vocab_files.items", "json.load", "json.load.pop", "json.load", "json.load.items", "json.load", "cls.added_tokens_encoder.update", "cls.added_tokens_decoder.update", "os.path.isdir", "os.path.exists", "os.path.dirname", "os.path.join", "EnvironmentError", "EnvironmentError", "logger.info", "logger.info", "io.open", "isinstance", "min", "io.open", "io.open", "os.path.join", "os.path.exists", "logger.info", "os.path.isdir", "os.path.exists", "logger.info", "file_utils.cached_path", "json.load.get", "json.load.items", "vocab_files.values", "list", "list", "int", "cls.vocab_files_names.values", "cls.vocab_files_names.values"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "_from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "init_inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "\n", "s3_models", "=", "list", "(", "cls", ".", "max_model_input_sizes", ".", "keys", "(", ")", ")", "\n", "vocab_files", "=", "{", "}", "\n", "init_configuration", "=", "{", "}", "\n", "if", "pretrained_model_name_or_path", "in", "s3_models", ":", "\n", "# Get the vocabulary from AWS S3 bucket", "\n", "            ", "for", "file_id", ",", "map_list", "in", "cls", ".", "pretrained_vocab_files_map", ".", "items", "(", ")", ":", "\n", "                ", "vocab_files", "[", "file_id", "]", "=", "map_list", "[", "pretrained_model_name_or_path", "]", "\n", "", "if", "cls", ".", "pretrained_init_configuration", "and", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_init_configuration", ":", "\n", "                ", "init_configuration", "=", "cls", ".", "pretrained_init_configuration", "[", "pretrained_model_name_or_path", "]", "\n", "", "", "else", ":", "\n", "# Get the vocabulary from local files", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Model name '{}' not found in model shortcut name list ({}). \"", "\n", "\"Assuming '{}' is a path or url to a directory containing tokenizer files.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "\n", "# Look for the tokenizer main vocabulary files", "\n", "for", "file_id", ",", "file_name", "in", "cls", ".", "vocab_files_names", ".", "items", "(", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "# If a directory is provided we look for the standard filenames", "\n", "                    ", "full_file_name", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "file_name", ")", "\n", "", "else", ":", "\n", "# If a path to a file is provided we use it (will only work for non-BPE tokenizer using a single vocabulary file)", "\n", "                    ", "full_file_name", "=", "pretrained_model_name_or_path", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "full_file_name", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Didn't find file {}. We won't load it.\"", ".", "format", "(", "full_file_name", ")", ")", "\n", "full_file_name", "=", "None", "\n", "", "vocab_files", "[", "file_id", "]", "=", "full_file_name", "\n", "\n", "# Look for the additional tokens files", "\n", "", "additional_files_names", "=", "{", "'added_tokens_file'", ":", "ADDED_TOKENS_FILE", ",", "\n", "'special_tokens_map_file'", ":", "SPECIAL_TOKENS_MAP_FILE", ",", "\n", "'tokenizer_config_file'", ":", "TOKENIZER_CONFIG_FILE", ",", "\n", "}", "\n", "\n", "# If a path to a file was provided, get the parent directory", "\n", "saved_directory", "=", "pretrained_model_name_or_path", "\n", "if", "os", ".", "path", ".", "exists", "(", "saved_directory", ")", "and", "not", "os", ".", "path", ".", "isdir", "(", "saved_directory", ")", ":", "\n", "                ", "saved_directory", "=", "os", ".", "path", ".", "dirname", "(", "saved_directory", ")", "\n", "\n", "", "for", "file_id", ",", "file_name", "in", "additional_files_names", ".", "items", "(", ")", ":", "\n", "                ", "full_file_name", "=", "os", ".", "path", ".", "join", "(", "saved_directory", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_file_name", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Didn't find file {}. We won't load it.\"", ".", "format", "(", "full_file_name", ")", ")", "\n", "full_file_name", "=", "None", "\n", "", "vocab_files", "[", "file_id", "]", "=", "full_file_name", "\n", "\n", "", "if", "all", "(", "full_file_name", "is", "None", "for", "full_file_name", "in", "vocab_files", ".", "values", "(", ")", ")", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\n", "\"Model name '{}' was not found in tokenizers model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url to a directory containing vocabulary files \"", "\n", "\"named {} but couldn't find such vocabulary files at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "list", "(", "cls", ".", "vocab_files_names", ".", "values", "(", ")", ")", ")", ")", "\n", "\n", "# Get files from url, cache, or disk depending on the case", "\n", "", "", "try", ":", "\n", "            ", "resolved_vocab_files", "=", "{", "}", "\n", "for", "file_id", ",", "file_path", "in", "vocab_files", ".", "items", "(", ")", ":", "\n", "                ", "if", "file_path", "is", "None", ":", "\n", "                    ", "resolved_vocab_files", "[", "file_id", "]", "=", "None", "\n", "", "else", ":", "\n", "                    ", "resolved_vocab_files", "[", "file_id", "]", "=", "cached_path", "(", "file_path", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "", "", "except", "EnvironmentError", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "s3_models", ":", "\n", "                ", "msg", "=", "\"Couldn't reach server at '{}' to download vocabulary files.\"", "\n", "", "else", ":", "\n", "                ", "msg", "=", "\"Model name '{}' was not found in tokenizers model name list ({}). \"", "\"We assumed '{}' was a path or url to a directory containing vocabulary files \"", "\"named {}, but couldn't find such vocabulary files at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "list", "(", "cls", ".", "vocab_files_names", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "for", "file_id", ",", "file_path", "in", "vocab_files", ".", "items", "(", ")", ":", "\n", "            ", "if", "file_path", "==", "resolved_vocab_files", "[", "file_id", "]", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading file {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading file {} from cache at {}\"", ".", "format", "(", "\n", "file_path", ",", "resolved_vocab_files", "[", "file_id", "]", ")", ")", "\n", "\n", "# Prepare tokenizer initialization kwargs", "\n", "# Did we saved some inputs and kwargs to reload ?", "\n", "", "", "tokenizer_config_file", "=", "resolved_vocab_files", ".", "pop", "(", "'tokenizer_config_file'", ",", "None", ")", "\n", "if", "tokenizer_config_file", "is", "not", "None", ":", "\n", "            ", "init_kwargs", "=", "json", ".", "load", "(", "open", "(", "tokenizer_config_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "saved_init_inputs", "=", "init_kwargs", ".", "pop", "(", "'init_inputs'", ",", "(", ")", ")", "\n", "if", "not", "init_inputs", ":", "\n", "                ", "init_inputs", "=", "saved_init_inputs", "\n", "", "", "else", ":", "\n", "            ", "init_kwargs", "=", "init_configuration", "\n", "\n", "# Update with newly provided kwargs", "\n", "", "init_kwargs", ".", "update", "(", "kwargs", ")", "\n", "\n", "# Set max length if needed", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "max_model_input_sizes", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer", "\n", "# wont index sequences longer than the number of positional embeddings", "\n", "            ", "max_len", "=", "cls", ".", "max_model_input_sizes", "[", "pretrained_model_name_or_path", "]", "\n", "if", "max_len", "is", "not", "None", "and", "isinstance", "(", "max_len", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "init_kwargs", "[", "'max_len'", "]", "=", "min", "(", "init_kwargs", ".", "get", "(", "'max_len'", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "\n", "# Merge resolved_vocab_files arguments in init_kwargs.", "\n", "", "", "added_tokens_file", "=", "resolved_vocab_files", ".", "pop", "(", "'added_tokens_file'", ",", "None", ")", "\n", "special_tokens_map_file", "=", "resolved_vocab_files", ".", "pop", "(", "'special_tokens_map_file'", ",", "None", ")", "\n", "for", "args_name", ",", "file_path", "in", "resolved_vocab_files", ".", "items", "(", ")", ":", "\n", "            ", "if", "args_name", "not", "in", "init_kwargs", ":", "\n", "                ", "init_kwargs", "[", "args_name", "]", "=", "file_path", "\n", "", "", "if", "special_tokens_map_file", "is", "not", "None", ":", "\n", "            ", "special_tokens_map", "=", "json", ".", "load", "(", "open", "(", "special_tokens_map_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "for", "key", ",", "value", "in", "special_tokens_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "init_kwargs", ":", "\n", "                    ", "init_kwargs", "[", "key", "]", "=", "value", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "", "", "tokenizer", "=", "cls", "(", "*", "init_inputs", ",", "**", "init_kwargs", ")", "\n", "\n", "# Save inputs and kwargs for saving and re-loading with ``save_pretrained``", "\n", "tokenizer", ".", "init_inputs", "=", "init_inputs", "\n", "tokenizer", ".", "init_kwargs", "=", "init_kwargs", "\n", "\n", "# Add supplementary tokens.", "\n", "if", "added_tokens_file", "is", "not", "None", ":", "\n", "            ", "added_tok_encoder", "=", "json", ".", "load", "(", "open", "(", "added_tokens_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "added_tok_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "added_tok_encoder", ".", "items", "(", ")", "}", "\n", "tokenizer", ".", "added_tokens_encoder", ".", "update", "(", "added_tok_encoder", ")", "\n", "tokenizer", ".", "added_tokens_decoder", ".", "update", "(", "added_tok_decoder", ")", "\n", "\n", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.save_pretrained": [[428, 468], ["os.path.join", "os.path.join", "os.path.join", "copy.deepcopy", "copy.deepcopy", "tokenization_utils.PreTrainedTokenizer.vocab_files_names.keys", "tokenization_utils.PreTrainedTokenizer.save_vocabulary", "os.path.isdir", "logger.error", "copy.deepcopy.pop", "io.open", "f.write", "io.open", "f.write", "io.open", "f.write", "json.dumps", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the tokenizer vocabulary files together with:\n                - added tokens,\n                - special-tokens-to-class-attributes-mapping,\n                - tokenizer instantiation positional and keywords inputs (e.g. do_lower_case for Bert).\n\n            This won't save modifications other than (added tokens and special token mapping) you may have\n            applied to the tokenizer after the instantiation (e.g. modifying tokenizer.do_lower_case after creation).\n\n            This method make sure the full tokenizer can then be re-loaded using the :func:`~transformers.PreTrainedTokenizer.from_pretrained` class method.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Saving directory ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "\n", "", "special_tokens_map_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "SPECIAL_TOKENS_MAP_FILE", ")", "\n", "added_tokens_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "ADDED_TOKENS_FILE", ")", "\n", "tokenizer_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "TOKENIZER_CONFIG_FILE", ")", "\n", "\n", "tokenizer_config", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_kwargs", ")", "\n", "tokenizer_config", "[", "'init_inputs'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_inputs", ")", "\n", "for", "file_id", "in", "self", ".", "vocab_files_names", ".", "keys", "(", ")", ":", "\n", "            ", "tokenizer_config", ".", "pop", "(", "file_id", ",", "None", ")", "\n", "\n", "", "with", "open", "(", "tokenizer_config_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "tokenizer_config", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "with", "open", "(", "special_tokens_map_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "special_tokens_map", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "with", "open", "(", "added_tokens_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "if", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "out_str", "=", "json", ".", "dumps", "(", "self", ".", "added_tokens_encoder", ",", "ensure_ascii", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "out_str", "=", "u\"{}\"", "\n", "", "f", ".", "write", "(", "out_str", ")", "\n", "\n", "", "vocab_files", "=", "self", ".", "save_vocabulary", "(", "save_directory", ")", "\n", "\n", "return", "vocab_files", "+", "(", "special_tokens_map_file", ",", "added_tokens_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.save_vocabulary": [[470, 477], ["None"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the tokenizer vocabulary to a directory. This method does *NOT* save added tokens\n            and special token mappings.\n\n            Please use :func:`~transformers.PreTrainedTokenizer.save_pretrained` `()` to save the full Tokenizer state if you want to reload it using the :func:`~transformers.PreTrainedTokenizer.from_pretrained` class method.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.vocab_size": [[479, 482], ["None"], "methods", ["None"], ["", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the base vocabulary (without the added tokens) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.__len__": [[484, 487], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the full vocabulary with the added tokens \"\"\"", "\n", "return", "self", ".", "vocab_size", "+", "len", "(", "self", ".", "added_tokens_encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.add_tokens": [[489, 528], ["dict", "tokenization_utils.PreTrainedTokenizer.added_tokens_encoder.update", "tokenization_utils.PreTrainedTokenizer.added_tokens_decoder.update", "len", "isinstance", "to_add_tokens.append", "logger.info", "dict.items", "isinstance", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "add_tokens", "(", "self", ",", "new_tokens", ")", ":", "\n", "        ", "\"\"\"\n        Add a list of new tokens to the tokenizer class. If the new tokens are not in the\n        vocabulary, they are added to it with indices starting from length of the current vocabulary.\n\n        Args:\n            new_tokens: list of string. Each string is a token to add. Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n\n        Returns:\n            Number of tokens added to the vocabulary.\n\n        Examples::\n\n            # Let's see how to increase the vocabulary of Bert model and tokenizer\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n            model = BertModel.from_pretrained('bert-base-uncased')\n\n            num_added_toks = tokenizer.add_tokens(['new_tok1', 'my_new-tok2'])\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n        \"\"\"", "\n", "if", "not", "new_tokens", ":", "\n", "            ", "return", "0", "\n", "\n", "", "to_add_tokens", "=", "[", "]", "\n", "for", "token", "in", "new_tokens", ":", "\n", "            ", "assert", "isinstance", "(", "token", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "token", ",", "unicode", ")", ")", "\n", "if", "token", "!=", "self", ".", "unk_token", "and", "self", ".", "convert_tokens_to_ids", "(", "token", ")", "==", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "unk_token", ")", "and", "token", "not", "in", "to_add_tokens", ":", "\n", "                ", "to_add_tokens", ".", "append", "(", "token", ")", "\n", "logger", ".", "info", "(", "\"Adding %s to the vocabulary\"", ",", "token", ")", "\n", "\n", "", "", "added_tok_encoder", "=", "dict", "(", "(", "tok", ",", "len", "(", "self", ")", "+", "i", ")", "for", "i", ",", "tok", "in", "enumerate", "(", "to_add_tokens", ")", ")", "\n", "added_tok_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "added_tok_encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "added_tokens_encoder", ".", "update", "(", "added_tok_encoder", ")", "\n", "self", ".", "added_tokens_decoder", ".", "update", "(", "added_tok_decoder", ")", "\n", "\n", "return", "len", "(", "to_add_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.num_added_tokens": [[529, 547], ["len", "tokenization_utils.PreTrainedTokenizer.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "def", "num_added_tokens", "(", "self", ",", "pair", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Returns the number of added tokens when encoding a sequence with special tokens.\n\n        Note:\n            This encodes inputs and checks the number of added tokens, and is therefore not efficient. Do not put this\n            inside your training loop.\n\n        Args:\n            pair: Returns the number of added tokens in the case of a sequence pair if set to True, returns the\n                number of added tokens in the case of a single sequence if set to False.\n\n        Returns:\n            Number of tokens added to sequences\n        \"\"\"", "\n", "token_ids_0", "=", "[", "]", "\n", "token_ids_1", "=", "[", "]", "\n", "return", "len", "(", "self", ".", "build_inputs_with_special_tokens", "(", "token_ids_0", ",", "token_ids_1", "if", "pair", "else", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens": [[548, 601], ["special_tokens_dict.items", "logger.info", "setattr", "tokenization_utils.PreTrainedTokenizer.add_tokens", "tokenization_utils.PreTrainedTokenizer.add_tokens", "isinstance", "all", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.add_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.add_tokens"], ["", "def", "add_special_tokens", "(", "self", ",", "special_tokens_dict", ")", ":", "\n", "        ", "\"\"\"\n        Add a dictionary of special tokens (eos, pad, cls...) to the encoder and link them\n        to class attributes. If special tokens are NOT in the vocabulary, they are added\n        to it (indexed starting from the last index of the current vocabulary).\n\n        Using `add_special_tokens` will ensure your special tokens can be used in several ways:\n\n        - special tokens are carefully handled by the tokenizer (they are never split)\n        - you can easily refer to special tokens using tokenizer class attributes like `tokenizer.cls_token`. This makes it easy to develop model-agnostic training and fine-tuning scripts.\n\n        When possible, special tokens are already registered for provided pretrained models (ex: BertTokenizer cls_token is already registered to be '[CLS]' and XLM's one is also registered to be '</s>')\n\n        Args:\n            special_tokens_dict: dict of string. Keys should be in the list of predefined special attributes:\n                [``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``,\n                ``additional_special_tokens``].\n\n                Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n\n        Returns:\n            Number of tokens added to the vocabulary.\n\n        Examples::\n\n            # Let's see how to add a new classification token to GPT-2\n            tokenizer = GPT2Tokenizer.from_pretrained('gpt2')\n            model = GPT2Model.from_pretrained('gpt2')\n\n            special_tokens_dict = {'cls_token': '<CLS>'}\n\n            num_added_toks = tokenizer.add_special_tokens(special_tokens_dict)\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n\n            assert tokenizer.cls_token == '<CLS>'\n        \"\"\"", "\n", "if", "not", "special_tokens_dict", ":", "\n", "            ", "return", "0", "\n", "\n", "", "added_tokens", "=", "0", "\n", "for", "key", ",", "value", "in", "special_tokens_dict", ".", "items", "(", ")", ":", "\n", "            ", "assert", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", "\n", "if", "key", "==", "'additional_special_tokens'", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "t", ",", "unicode", ")", ")", "for", "t", "in", "value", ")", "\n", "added_tokens", "+=", "self", ".", "add_tokens", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "value", ",", "unicode", ")", ")", "\n", "added_tokens", "+=", "self", ".", "add_tokens", "(", "[", "value", "]", ")", "\n", "", "logger", ".", "info", "(", "\"Assigning %s to the %s key of the tokenizer\"", ",", "value", ",", "key", ")", "\n", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "return", "added_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize": [[602, 652], ["tokenization_utils.PreTrainedTokenizer.tokenize.split_on_tokens"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Take care of added tokens.\n        \"\"\"", "\n", "def", "split_on_token", "(", "tok", ",", "text", ")", ":", "\n", "            ", "result", "=", "[", "]", "\n", "split_text", "=", "text", ".", "split", "(", "tok", ")", "\n", "for", "i", ",", "sub_text", "in", "enumerate", "(", "split_text", ")", ":", "\n", "                ", "sub_text", "=", "sub_text", ".", "strip", "(", ")", "\n", "if", "i", "==", "0", "and", "not", "sub_text", ":", "\n", "                    ", "result", "+=", "[", "tok", "]", "\n", "", "elif", "i", "==", "len", "(", "split_text", ")", "-", "1", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "result", "+=", "[", "tok", "]", "\n", "", "", "return", "result", "\n", "\n", "", "def", "split_on_tokens", "(", "tok_list", ",", "text", ")", ":", "\n", "            ", "if", "not", "text", ":", "\n", "                ", "return", "[", "]", "\n", "", "if", "not", "tok_list", ":", "\n", "                ", "return", "self", ".", "_tokenize", "(", "text", ",", "**", "kwargs", ")", "\n", "\n", "", "tokenized_text", "=", "[", "]", "\n", "text_list", "=", "[", "text", "]", "\n", "for", "tok", "in", "tok_list", ":", "\n", "                ", "tokenized_text", "=", "[", "]", "\n", "for", "sub_text", "in", "text_list", ":", "\n", "                    ", "if", "sub_text", "not", "in", "self", ".", "added_tokens_encoder", "and", "sub_text", "not", "in", "self", ".", "all_special_tokens", ":", "\n", "                        ", "tokenized_text", "+=", "split_on_token", "(", "tok", ",", "sub_text", ")", "\n", "", "else", ":", "\n", "                        ", "tokenized_text", "+=", "[", "sub_text", "]", "\n", "", "", "text_list", "=", "tokenized_text", "\n", "\n", "", "return", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "(", "self", ".", "_tokenize", "(", "token", ",", "**", "kwargs", ")", "if", "token", "not", "in", "self", ".", "added_tokens_encoder", "and", "token", "not", "in", "self", ".", "all_special_tokens", "and", "token", "not", "in", "[", "'[unused1]'", ",", "'[unused2]'", ",", "'[unused3]'", ",", "'[unused4]'", "]", "else", "[", "token", "]", "for", "token", "in", "tokenized_text", ")", ")", ")", "\n", "\n", "", "added_tokens", "=", "list", "(", "self", ".", "added_tokens_encoder", ".", "keys", "(", ")", ")", "+", "self", ".", "all_special_tokens", "+", "[", "'[unused1]'", ",", "'[unused2]'", ",", "'[unused3]'", ",", "'[unused4]'", "]", "\n", "tokenized_text", "=", "split_on_tokens", "(", "added_tokens", ",", "text", ")", "\n", "return", "tokenized_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._tokenize": [[653, 661], ["None"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Do NOT take care of added tokens.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids": [[662, 676], ["isinstance", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "ids.append", "isinstance", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a single token, or a sequence of tokens, (str/unicode) in a single integer id\n            (resp. a sequence of ids), using the vocabulary.\n        \"\"\"", "\n", "if", "tokens", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "tokens", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "tokens", ",", "unicode", ")", ")", ":", "\n", "            ", "return", "self", ".", "_convert_token_to_id_with_added_voc", "(", "tokens", ")", "\n", "\n", "", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "_convert_token_to_id_with_added_voc", "(", "token", ")", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc": [[677, 684], ["tokenization_utils.PreTrainedTokenizer._convert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id"], ["", "def", "_convert_token_to_id_with_added_voc", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "            ", "return", "self", ".", "added_tokens_encoder", "[", "token", "]", "\n", "", "return", "self", ".", "_convert_token_to_id", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id": [[685, 687], ["None"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.encode": [[688, 735], ["tokenization_utils.PreTrainedTokenizer.encode_plus"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus"], ["", "def", "encode", "(", "self", ",", "\n", "text", ",", "\n", "text_pair", "=", "None", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "None", ",", "\n", "stride", "=", "0", ",", "\n", "truncation_strategy", "=", "'longest_first'", ",", "\n", "return_tensors", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Converts a string in a sequence of ids (integer), using the tokenizer and vocabulary.\n\n        Same as doing ``self.convert_tokens_to_ids(self.tokenize(text))``.\n\n        Args:\n            text: The first sequence to be encoded. This can be a string, a list of strings (tokenized string using\n                the `tokenize` method) or a list of integers (tokenized string ids using the `convert_tokens_to_ids`\n                method)\n            text_pair: Optional second sequence to be encoded. This can be a string, a list of strings (tokenized\n                string using the `tokenize` method) or a list of integers (tokenized string ids using the\n                `convert_tokens_to_ids` method)\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            max_length: if set to a number, will limit the total sequence returned so that it has a maximum length.\n                If there are overflowing tokens, those will be added to the returned dictionary\n            stride: if set to a number along with max_length, the overflowing tokens returned will contain some tokens\n                from the main sequence returned. The value of this argument defines the number of additional tokens.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences)\n                - 'only_first': Only truncate the first sequence\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n            return_tensors: (optional) can be set to 'tf' or 'pt' to return respectively TensorFlow tf.constant\n                or PyTorch torch.Tensor instead of a list of python integers.\n            **kwargs: passed to the `self.tokenize()` method\n        \"\"\"", "\n", "encoded_inputs", "=", "self", ".", "encode_plus", "(", "text", ",", "\n", "text_pair", "=", "text_pair", ",", "\n", "max_length", "=", "max_length", ",", "\n", "add_special_tokens", "=", "add_special_tokens", ",", "\n", "stride", "=", "stride", ",", "\n", "truncation_strategy", "=", "truncation_strategy", ",", "\n", "return_tensors", "=", "return_tensors", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "encoded_inputs", "[", "\"input_ids\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus": [[736, 793], ["tokenization_utils.PreTrainedTokenizer.encode_plus.get_input_ids"], "methods", ["None"], ["", "def", "encode_plus", "(", "self", ",", "\n", "text", ",", "\n", "text_pair", "=", "None", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "None", ",", "\n", "stride", "=", "0", ",", "\n", "truncation_strategy", "=", "'longest_first'", ",", "\n", "return_tensors", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary containing the encoded sequence or sequence pair and additional informations:\n        the mask for sequence classification and the overflowing elements if a ``max_length`` is specified.\n\n        Args:\n            text: The first sequence to be encoded. This can be a string, a list of strings (tokenized string using\n                the `tokenize` method) or a list of integers (tokenized string ids using the `convert_tokens_to_ids`\n                method)\n            text_pair: Optional second sequence to be encoded. This can be a string, a list of strings (tokenized\n                string using the `tokenize` method) or a list of integers (tokenized string ids using the\n                `convert_tokens_to_ids` method)\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            max_length: if set to a number, will limit the total sequence returned so that it has a maximum length.\n                If there are overflowing tokens, those will be added to the returned dictionary\n            stride: if set to a number along with max_length, the overflowing tokens returned will contain some tokens\n                from the main sequence returned. The value of this argument defines the number of additional tokens.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences)\n                - 'only_first': Only truncate the first sequence\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n            return_tensors: (optional) can be set to 'tf' or 'pt' to return respectively TensorFlow tf.constant\n                or PyTorch torch.Tensor instead of a list of python integers.\n            **kwargs: passed to the `self.tokenize()` method\n        \"\"\"", "\n", "\n", "def", "get_input_ids", "(", "text", ")", ":", "\n", "            ", "if", "isinstance", "(", "text", ",", "six", ".", "string_types", ")", ":", "\n", "                ", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenize", "(", "text", ",", "**", "kwargs", ")", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "text", ")", ">", "0", "and", "isinstance", "(", "text", "[", "0", "]", ",", "six", ".", "string_types", ")", ":", "\n", "                ", "return", "self", ".", "convert_tokens_to_ids", "(", "text", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "text", ")", ">", "0", "and", "isinstance", "(", "text", "[", "0", "]", ",", "int", ")", ":", "\n", "                ", "return", "text", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Input is not valid. Should be a string, a list/tuple of strings or a list/tuple of integers.\"", ")", "\n", "\n", "", "", "first_ids", "=", "get_input_ids", "(", "text", ")", "\n", "second_ids", "=", "get_input_ids", "(", "text_pair", ")", "if", "text_pair", "is", "not", "None", "else", "None", "\n", "\n", "return", "self", ".", "prepare_for_model", "(", "first_ids", ",", "\n", "pair_ids", "=", "second_ids", ",", "\n", "max_length", "=", "max_length", ",", "\n", "add_special_tokens", "=", "add_special_tokens", ",", "\n", "stride", "=", "stride", ",", "\n", "truncation_strategy", "=", "truncation_strategy", ",", "\n", "return_tensors", "=", "return_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.prepare_for_model": [[794, 883], ["bool", "len", "len", "tokenization_utils.PreTrainedTokenizer.truncate_sequences", "tokenization_utils.PreTrainedTokenizer.build_inputs_with_special_tokens", "tokenization_utils.PreTrainedTokenizer.create_token_type_ids_from_sequences", "tokenization_utils.PreTrainedTokenizer.get_special_tokens_mask", "file_utils.is_tf_available", "tf.constant", "tf.constant", "logger.warning", "tokenization_utils.PreTrainedTokenizer.num_added_tokens", "file_utils.is_torch_available", "torch.tensor", "torch.tensor", "len", "len", "len", "logger.warning", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.truncate_sequences", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.create_token_type_ids_from_sequences", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.get_special_tokens_mask", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.is_tf_available", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.num_added_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.is_torch_available"], ["", "def", "prepare_for_model", "(", "self", ",", "ids", ",", "pair_ids", "=", "None", ",", "max_length", "=", "None", ",", "add_special_tokens", "=", "True", ",", "stride", "=", "0", ",", "\n", "truncation_strategy", "=", "'longest_first'", ",", "return_tensors", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Prepares a sequence of input id, or a pair of sequences of inputs ids so that it can be used by the model.\n        It adds special tokens, truncates\n        sequences if overflowing while taking into account the special tokens and manages a window stride for\n        overflowing tokens\n\n        Args:\n            ids: list of tokenized input ids. Can be obtained from a string by chaining the\n                `tokenize` and `convert_tokens_to_ids` methods.\n            pair_ids: Optional second list of input ids. Can be obtained from a string by chaining the\n                `tokenize` and `convert_tokens_to_ids` methods.\n            max_length: maximum length of the returned list. Will truncate by taking into account the special tokens.\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            stride: window stride for overflowing tokens. Can be useful for edge effect removal when using sequential\n                list of inputs.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences)\n                - 'only_first': Only truncate the first sequence\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n            return_tensors: (optional) can be set to 'tf' or 'pt' to return respectively TensorFlow tf.constant\n                or PyTorch torch.Tensor instead of a list of python integers.\n\n        Return:\n            A Dictionary of shape::\n\n                {\n                    input_ids: list[int],\n                    overflowing_tokens: list[int] if a ``max_length`` is specified, else None\n                    special_tokens_mask: list[int] if ``add_special_tokens`` if set to ``True``\n                }\n\n            With the fields:\n                ``input_ids``: list of tokens to be fed to a model\n\n                ``overflowing_tokens``: list of overflowing tokens if a max length is specified.\n\n                ``special_tokens_mask``: if adding special tokens, this is a list of [0, 1], with 0 specifying special added\n                tokens and 1 specifying sequence tokens.\n        \"\"\"", "\n", "pair", "=", "bool", "(", "pair_ids", "is", "not", "None", ")", "\n", "len_ids", "=", "len", "(", "ids", ")", "\n", "len_pair_ids", "=", "len", "(", "pair_ids", ")", "if", "pair", "else", "0", "\n", "\n", "encoded_inputs", "=", "{", "}", "\n", "total_len", "=", "len_ids", "+", "len_pair_ids", "+", "(", "self", ".", "num_added_tokens", "(", "pair", "=", "pair", ")", "if", "add_special_tokens", "else", "0", ")", "\n", "if", "max_length", "and", "total_len", ">", "max_length", ":", "\n", "            ", "ids", ",", "pair_ids", ",", "overflowing_tokens", "=", "self", ".", "truncate_sequences", "(", "ids", ",", "pair_ids", "=", "pair_ids", ",", "\n", "num_tokens_to_remove", "=", "total_len", "-", "max_length", ",", "\n", "truncation_strategy", "=", "truncation_strategy", ",", "\n", "stride", "=", "stride", ")", "\n", "encoded_inputs", "[", "\"overflowing_tokens\"", "]", "=", "overflowing_tokens", "\n", "encoded_inputs", "[", "\"num_truncated_tokens\"", "]", "=", "total_len", "-", "max_length", "\n", "\n", "", "if", "add_special_tokens", ":", "\n", "            ", "sequence", "=", "self", ".", "build_inputs_with_special_tokens", "(", "ids", ",", "pair_ids", ")", "\n", "token_type_ids", "=", "self", ".", "create_token_type_ids_from_sequences", "(", "ids", ",", "pair_ids", ")", "\n", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "=", "self", ".", "get_special_tokens_mask", "(", "ids", ",", "pair_ids", ")", "\n", "", "else", ":", "\n", "            ", "sequence", "=", "ids", "+", "pair_ids", "if", "pair", "else", "ids", "\n", "token_type_ids", "=", "[", "0", "]", "*", "len", "(", "ids", ")", "+", "(", "[", "1", "]", "*", "len", "(", "pair_ids", ")", "if", "pair", "else", "[", "]", ")", "\n", "\n", "", "if", "return_tensors", "==", "'tf'", "and", "is_tf_available", "(", ")", ":", "\n", "            ", "sequence", "=", "tf", ".", "constant", "(", "[", "sequence", "]", ")", "\n", "token_type_ids", "=", "tf", ".", "constant", "(", "[", "token_type_ids", "]", ")", "\n", "", "elif", "return_tensors", "==", "'pt'", "and", "is_torch_available", "(", ")", ":", "\n", "            ", "sequence", "=", "torch", ".", "tensor", "(", "[", "sequence", "]", ")", "\n", "token_type_ids", "=", "torch", ".", "tensor", "(", "[", "token_type_ids", "]", ")", "\n", "", "elif", "return_tensors", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Unable to convert output to tensors format {}, PyTorch or TensorFlow is not available.\"", ".", "format", "(", "return_tensors", ")", ")", "\n", "\n", "", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "sequence", "\n", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "token_type_ids", "\n", "\n", "if", "max_length", "and", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", ">", "max_length", ":", "\n", "            ", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "encoded_inputs", "[", "\"input_ids\"", "]", "[", ":", "max_length", "]", "\n", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "encoded_inputs", "[", "\"token_type_ids\"", "]", "[", ":", "max_length", "]", "\n", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "=", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "[", ":", "max_length", "]", "\n", "\n", "", "if", "max_length", "is", "None", "and", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Token indices sequence length is longer than the specified maximum sequence length \"", "\n", "\"for this model ({} > {}). Running this sequence through the model will result in \"", "\n", "\"indexing errors\"", ".", "format", "(", "len", "(", "ids", ")", ",", "self", ".", "max_len", ")", ")", "\n", "\n", "", "return", "encoded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.truncate_sequences": [[884, 923], ["range", "min", "len", "min", "len", "len", "min", "len", "len", "len", "ValueError", "ValueError", "len"], "methods", ["None"], ["", "def", "truncate_sequences", "(", "self", ",", "ids", ",", "pair_ids", "=", "None", ",", "num_tokens_to_remove", "=", "0", ",", "truncation_strategy", "=", "'longest_first'", ",", "stride", "=", "0", ")", ":", "\n", "        ", "\"\"\"Truncates a sequence pair in place to the maximum length.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences).\n                    Overflowing tokens only contains overflow from the first sequence.\n                - 'only_first': Only truncate the first sequence. raise an error if the first sequence is shorter or equal to than num_tokens_to_remove.\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n        \"\"\"", "\n", "if", "num_tokens_to_remove", "<=", "0", ":", "\n", "            ", "return", "ids", ",", "pair_ids", ",", "[", "]", "\n", "\n", "", "if", "truncation_strategy", "==", "'longest_first'", ":", "\n", "            ", "overflowing_tokens", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_tokens_to_remove", ")", ":", "\n", "                ", "if", "pair_ids", "is", "None", "or", "len", "(", "ids", ")", ">", "len", "(", "pair_ids", ")", ":", "\n", "                    ", "overflowing_tokens", "=", "[", "ids", "[", "-", "1", "]", "]", "+", "overflowing_tokens", "\n", "ids", "=", "ids", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "pair_ids", "=", "pair_ids", "[", ":", "-", "1", "]", "\n", "", "", "window_len", "=", "min", "(", "len", "(", "ids", ")", ",", "stride", ")", "\n", "if", "window_len", ">", "0", ":", "\n", "                ", "overflowing_tokens", "=", "ids", "[", "-", "window_len", ":", "]", "+", "overflowing_tokens", "\n", "", "", "elif", "truncation_strategy", "==", "'only_first'", ":", "\n", "            ", "assert", "len", "(", "ids", ")", ">", "num_tokens_to_remove", "\n", "window_len", "=", "min", "(", "len", "(", "ids", ")", ",", "stride", "+", "num_tokens_to_remove", ")", "\n", "overflowing_tokens", "=", "ids", "[", "-", "window_len", ":", "]", "\n", "ids", "=", "ids", "[", ":", "-", "num_tokens_to_remove", "]", "\n", "", "elif", "truncation_strategy", "==", "'only_second'", ":", "\n", "            ", "assert", "pair_ids", "is", "not", "None", "and", "len", "(", "pair_ids", ")", ">", "num_tokens_to_remove", "\n", "window_len", "=", "min", "(", "len", "(", "pair_ids", ")", ",", "stride", "+", "num_tokens_to_remove", ")", "\n", "overflowing_tokens", "=", "pair_ids", "[", "-", "window_len", ":", "]", "\n", "pair_ids", "=", "pair_ids", "[", ":", "-", "num_tokens_to_remove", "]", "\n", "", "elif", "truncation_strategy", "==", "'do_not_truncate'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input sequence are too long for max_length. Please select a truncation strategy.\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Truncation_strategy should be selected in ['longest_first', 'only_first', 'only_second', 'do_not_truncate']\"", ")", "\n", "", "return", "(", "ids", ",", "pair_ids", ",", "overflowing_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.create_token_type_ids_from_sequences": [[924, 929], ["logger.warning", "len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"This tokenizer does not make use of special tokens.\"", ")", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "token_ids_0", ")", "*", "[", "0", "]", "\n", "", "return", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", "+", "[", "1", "]", "*", "len", "(", "token_ids_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.build_inputs_with_special_tokens": [[930, 942], ["logger.warning"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "logger", ".", "warning", "(", "\"This tokenizer does not make use of special tokens. Input is returned with no modification.\"", ")", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "token_ids_0", "\n", "", "return", "token_ids_0", "+", "token_ids_1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.get_special_tokens_mask": [[943, 959], ["len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "return", "[", "0", "]", "*", "(", "(", "len", "(", "token_ids_1", ")", "if", "token_ids_1", "else", "0", ")", "+", "len", "(", "token_ids_0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens": [[960, 981], ["isinstance", "tokenization_utils.PreTrainedTokenizer._convert_id_to_token", "tokens.append", "tokens.append", "tokenization_utils.PreTrainedTokenizer._convert_id_to_token"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ",", "skip_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\" Converts a single index or a sequence of indices (integers) in a token \"\n            (resp.) a sequence of tokens (str/unicode), using the vocabulary and added tokens.\n\n            Args:\n                skip_special_tokens: Don't decode special tokens (self.all_special_tokens). Default: False\n        \"\"\"", "\n", "if", "isinstance", "(", "ids", ",", "int", ")", ":", "\n", "            ", "if", "ids", "in", "self", ".", "added_tokens_decoder", ":", "\n", "                ", "return", "self", ".", "added_tokens_decoder", "[", "ids", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_convert_id_to_token", "(", "ids", ")", "\n", "", "", "tokens", "=", "[", "]", "\n", "for", "index", "in", "ids", ":", "\n", "            ", "if", "skip_special_tokens", "and", "index", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "index", "in", "self", ".", "added_tokens_decoder", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "added_tokens_decoder", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "_convert_id_to_token", "(", "index", ")", ")", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer._convert_id_to_token": [[982, 984], ["None"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string": [[985, 991], ["tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string.\n            The most simple way to do it is ' '.join(self.convert_ids_to_tokens(token_ids))\n            but we often want to remove sub-word tokenization artifacts at the same time.\n        \"\"\"", "\n", "return", "' '", ".", "join", "(", "self", ".", "convert_ids_to_tokens", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode": [[992, 1029], ["tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "sub_texts.append", "tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "sub_texts.append", "current_sub_text.append", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string", "sub_texts.append", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string"], ["", "def", "decode", "(", "self", ",", "token_ids", ",", "skip_special_tokens", "=", "False", ",", "clean_up_tokenization_spaces", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Converts a sequence of ids (integer) in a string, using the tokenizer and vocabulary\n        with options to remove special tokens and clean up tokenization spaces.\n        Similar to doing ``self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))``.\n\n        Args:\n            token_ids: list of tokenized input ids. Can be obtained using the `encode` or `encode_plus` methods.\n            skip_special_tokens: if set to True, will replace special tokens.\n            clean_up_tokenization_spaces: if set to True, will clean up the tokenization spaces.\n        \"\"\"", "\n", "filtered_tokens", "=", "self", ".", "convert_ids_to_tokens", "(", "token_ids", ",", "skip_special_tokens", "=", "skip_special_tokens", ")", "\n", "\n", "# To avoid mixing byte-level and unicode for byte-level BPT", "\n", "# we need to build string separatly for added tokens and byte-level tokens", "\n", "# cf. https://github.com/huggingface/transformers/issues/1133", "\n", "sub_texts", "=", "[", "]", "\n", "current_sub_text", "=", "[", "]", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "if", "skip_special_tokens", "and", "token", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "if", "current_sub_text", ":", "\n", "                    ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "current_sub_text", "=", "[", "]", "\n", "", "sub_texts", ".", "append", "(", "\" \"", "+", "token", ")", "\n", "", "else", ":", "\n", "                ", "current_sub_text", ".", "append", "(", "token", ")", "\n", "", "", "if", "current_sub_text", ":", "\n", "            ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "", "text", "=", "''", ".", "join", "(", "sub_texts", ")", "\n", "\n", "if", "clean_up_tokenization_spaces", ":", "\n", "            ", "clean_text", "=", "self", ".", "clean_up_tokenization", "(", "text", ")", "\n", "return", "clean_text", "\n", "", "else", ":", "\n", "            ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.special_tokens_map": [[1030, 1041], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "special_tokens_map", "(", "self", ")", ":", "\n", "        ", "\"\"\" A dictionary mapping special token class attribute (cls_token, unk_token...) to their\n            values ('<unk>', '<cls>'...)\n        \"\"\"", "\n", "set_attr", "=", "{", "}", "\n", "for", "attr", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "            ", "attr_value", "=", "getattr", "(", "self", ",", "\"_\"", "+", "attr", ")", "\n", "if", "attr_value", ":", "\n", "                ", "set_attr", "[", "attr", "]", "=", "attr_value", "\n", "", "", "return", "set_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.all_special_tokens": [[1042, 1053], ["set_attr.values", "list", "set", "isinstance", "list"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_special_tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\" List all the special tokens ('<unk>', '<cls>'...) mapped to class attributes\n            (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "[", "]", "\n", "set_attr", "=", "self", ".", "special_tokens_map", "\n", "for", "attr_value", "in", "set_attr", ".", "values", "(", ")", ":", "\n", "            ", "all_toks", "=", "all_toks", "+", "(", "list", "(", "attr_value", ")", "if", "isinstance", "(", "attr_value", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "attr_value", "]", ")", "\n", "", "all_toks", "=", "list", "(", "set", "(", "all_toks", ")", ")", "\n", "return", "all_toks", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.all_special_ids": [[1054, 1062], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "all_special_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" List the vocabulary indices of the special tokens ('<unk>', '<cls>'...) mapped to\n            class attributes (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "self", ".", "all_special_tokens", "\n", "all_ids", "=", "self", ".", "convert_tokens_to_ids", "(", "all_toks", ")", "\n", "return", "all_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization": [[1063, 1071], ["out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "clean_up_tokenization", "(", "out_string", ")", ":", "\n", "        ", "\"\"\" Clean up a list of simple English tokenization artifacts like spaces before punctuations and abreviated forms.\n        \"\"\"", "\n", "out_string", "=", "out_string", ".", "replace", "(", "' .'", ",", "'.'", ")", ".", "replace", "(", "' ?'", ",", "'?'", ")", ".", "replace", "(", "' !'", ",", "'!'", ")", ".", "replace", "(", "' ,'", ",", "','", "\n", ")", ".", "replace", "(", "\" ' \"", ",", "\"'\"", ")", ".", "replace", "(", "\" n't\"", ",", "\"n't\"", ")", ".", "replace", "(", "\" 'm\"", ",", "\"'m\"", ")", ".", "replace", "(", "\" do not\"", ",", "\" don't\"", "\n", ")", ".", "replace", "(", "\" 's\"", ",", "\"'s\"", ")", ".", "replace", "(", "\" 've\"", ",", "\"'ve\"", ")", ".", "replace", "(", "\" 're\"", ",", "\"'re\"", ")", "\n", "return", "out_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.__init__": [[74, 85], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.base_model": [[86, 89], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_model", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.get_input_embeddings": [[90, 98], ["getattr", "getattr.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "return", "base_model", ".", "get_input_embeddings", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.set_input_embeddings": [[99, 107], ["getattr", "getattr.set_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.set_input_embeddings"], ["", "", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\" Set model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "base_model", ".", "set_input_embeddings", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.get_output_embeddings": [[108, 113], ["None"], "methods", ["None"], ["", "", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's output embeddings\n            Return None if the model doesn't have output embeddings\n        \"\"\"", "\n", "return", "None", "# Overwrite for models with output embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.tie_weights": [[114, 121], ["modeling_utils.PreTrainedModel.get_output_embeddings", "modeling_utils.PreTrainedModel._tie_or_clone_weights", "modeling_utils.PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMaskedLM.get_output_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._tie_or_clone_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "output_embeddings", "=", "self", ".", "get_output_embeddings", "(", ")", "\n", "if", "output_embeddings", "is", "not", "None", ":", "\n", "            ", "self", ".", "_tie_or_clone_weights", "(", "output_embeddings", ",", "self", ".", "get_input_embeddings", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights": [[122, 139], ["torch.nn.Parameter", "hasattr", "torch.nn.functional.pad", "hasattr", "hasattr", "input_embeddings.weight.clone"], "methods", ["None"], ["", "", "def", "_tie_or_clone_weights", "(", "self", ",", "output_embeddings", ",", "input_embeddings", ")", ":", "\n", "        ", "\"\"\" Tie or clone module weights depending of weither we are using TorchScript or not\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "nn", ".", "Parameter", "(", "input_embeddings", ".", "weight", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "input_embeddings", ".", "weight", "\n", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "'bias'", ")", "and", "output_embeddings", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output_embeddings", ".", "bias", ".", "data", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "output_embeddings", ".", "bias", ".", "data", ",", "\n", "(", "0", ",", "output_embeddings", ".", "weight", ".", "shape", "[", "0", "]", "-", "output_embeddings", ".", "bias", ".", "shape", "[", "0", "]", ")", ",", "\n", "'constant'", ",", "\n", "0", "\n", ")", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "'out_features'", ")", "and", "hasattr", "(", "input_embeddings", ",", "'num_embeddings'", ")", ":", "\n", "            ", "output_embeddings", ".", "out_features", "=", "input_embeddings", ".", "num_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.resize_token_embeddings": [[140, 167], ["getattr", "getattr._resize_token_embeddings", "hasattr", "modeling_utils.PreTrainedModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._resize_token_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights"], ["", "", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Resize input token embeddings matrix of the model if new_num_tokens != config.vocab_size.\n        Take care of tying weights embeddings afterwards if the model class has a `tie_weights()` method.\n\n        Arguments:\n\n            new_num_tokens: (`optional`) int:\n                New number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end.\n                If not provided or None: does nothing and just returns a pointer to the input tokens ``torch.nn.Embeddings`` Module of the model.\n\n        Return: ``torch.nn.Embeddings``\n            Pointer to the input tokens Embeddings Module of the model\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "# get the base model if needed", "\n", "model_embeds", "=", "base_model", ".", "_resize_token_embeddings", "(", "new_num_tokens", ")", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "model_embeds", "\n", "\n", "# Update base model and current model config", "\n", "", "self", ".", "config", ".", "vocab_size", "=", "new_num_tokens", "\n", "base_model", ".", "vocab_size", "=", "new_num_tokens", "\n", "\n", "# Tie weights again if needed", "\n", "if", "hasattr", "(", "self", ",", "'tie_weights'", ")", ":", "\n", "            ", "self", ".", "tie_weights", "(", ")", "\n", "\n", "", "return", "model_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel._resize_token_embeddings": [[168, 173], ["modeling_utils.PreTrainedModel.get_input_embeddings", "modeling_utils.PreTrainedModel._get_resized_embeddings", "modeling_utils.PreTrainedModel.set_input_embeddings", "modeling_utils.PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._get_resized_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.set_input_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "old_embeddings", "=", "self", ".", "get_input_embeddings", "(", ")", "\n", "new_embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "old_embeddings", ",", "new_num_tokens", ")", "\n", "self", ".", "set_input_embeddings", "(", "new_embeddings", ")", "\n", "return", "self", ".", "get_input_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel._get_resized_embeddings": [[174, 207], ["old_embeddings.weight.size", "torch.nn.Embedding", "torch.nn.Embedding.to", "modeling_utils.PreTrainedModel._init_weights", "min"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPreTrainedModel._init_weights"], ["", "def", "_get_resized_embeddings", "(", "self", ",", "old_embeddings", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Build a resized Embedding Module from a provided token Embedding Module.\n            Increasing the size will add newly initialized vectors at the end\n            Reducing the size will remove vectors from the end\n\n        Args:\n            new_num_tokens: (`optional`) int\n                New number of tokens in the embedding matrix.\n                Increasing the size will add newly initialized vectors at the end\n                Reducing the size will remove vectors from the end\n                If not provided or None: return the provided token Embedding Module.\n        Return: ``torch.nn.Embeddings``\n            Pointer to the resized Embedding Module or the old Embedding Module if new_num_tokens is None\n        \"\"\"", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "", "old_num_tokens", ",", "old_embedding_dim", "=", "old_embeddings", ".", "weight", ".", "size", "(", ")", "\n", "if", "old_num_tokens", "==", "new_num_tokens", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "# Build new embeddings", "\n", "", "new_embeddings", "=", "nn", ".", "Embedding", "(", "new_num_tokens", ",", "old_embedding_dim", ")", "\n", "new_embeddings", ".", "to", "(", "old_embeddings", ".", "weight", ".", "device", ")", "\n", "\n", "# initialize all new embeddings (in particular added tokens)", "\n", "self", ".", "_init_weights", "(", "new_embeddings", ")", "\n", "\n", "# Copy word embeddings from the previous weights", "\n", "num_tokens_to_copy", "=", "min", "(", "old_num_tokens", ",", "new_num_tokens", ")", "\n", "new_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "=", "old_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "\n", "\n", "return", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.init_weights": [[208, 219], ["modeling_utils.PreTrainedModel.apply", "modeling_utils.PreTrainedModel.tie_weights", "modeling_utils.PreTrainedModel.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize and prunes weights if needed. \"\"\"", "\n", "# Initialize weights", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# Prune heads if needed", "\n", "if", "self", ".", "config", ".", "pruned_heads", ":", "\n", "            ", "self", ".", "prune_heads", "(", "self", ".", "config", ".", "pruned_heads", ")", "\n", "\n", "# Tie weights if needed", "\n", "", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.prune_heads": [[220, 234], ["heads_to_prune.items", "modeling_utils.PreTrainedModel.base_model._prune_heads", "list", "set", "set", "modeling_utils.PreTrainedModel.config.pruned_heads.get"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel._prune_heads"], ["", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n                E.g. {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on layer 1 and heads 2 and 3 on layer 2.\n        \"\"\"", "\n", "# save new sets of pruned heads as union of previously stored pruned heads and newly pruned heads", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "union_heads", "=", "set", "(", "self", ".", "config", ".", "pruned_heads", ".", "get", "(", "layer", ",", "[", "]", ")", ")", "|", "set", "(", "heads", ")", "\n", "self", ".", "config", ".", "pruned_heads", "[", "layer", "]", "=", "list", "(", "union_heads", ")", "# Unfortunately we have to store it as list for JSON", "\n", "\n", "", "self", ".", "base_model", ".", "_prune_heads", "(", "heads_to_prune", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.save_pretrained": [[235, 251], ["os.path.isdir", "model_to_save.config.save_pretrained", "os.path.join", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Only save the model itself if we are using distributed training", "\n", "model_to_save", "=", "self", ".", "module", "if", "hasattr", "(", "self", ",", "'module'", ")", "else", "self", "\n", "\n", "# Save configuration file", "\n", "model_to_save", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "WEIGHTS_NAME", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PreTrainedModel.from_pretrained": [[252, 472], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls", "hasattr", "load_tf2_checkpoint_in_pytorch_model.eval", "cls.config_class.from_pretrained", "torch.load", "file_utils.cached_path.endswith", "state_dict.copy.copy.keys", "zip", "getattr", "state_dict.copy.copy.copy", "modeling_utils.PreTrainedModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained pytorch model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n                - None if you are both providing the configuration and state dictionary (resp. with keyword arguments ``config`` and ``state_dict``)\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "config", "=", "kwargs", ".", "pop", "(", "'config'", ",", "None", ")", "\n", "state_dict", "=", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_tf", "=", "kwargs", ".", "pop", "(", "'from_tf'", ",", "False", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "output_loading_info", "=", "kwargs", ".", "pop", "(", "'output_loading_info'", ",", "False", ")", "\n", "\n", "# Load config", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", ",", "model_kwargs", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "\n", "cache_dir", "=", "cache_dir", ",", "return_unused_kwargs", "=", "True", ",", "\n", "force_download", "=", "force_download", ",", "\n", "proxies", "=", "proxies", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Load model", "\n", "", "if", "pretrained_model_name_or_path", "is", "not", "None", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "if", "from_tf", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", ")", ":", "\n", "# Load from a TF 1.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", "\n", "", "elif", "from_tf", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a TF 2.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Error no file named {} found in directory {} or `from_tf` set to False\"", ".", "format", "(", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", "]", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "", "else", ":", "\n", "                ", "assert", "from_tf", ",", "\"Error finding file {}, no file or TF 1.X checkpoint found\"", ".", "format", "(", "pretrained_model_name_or_path", ")", "\n", "archive_file", "=", "pretrained_model_name_or_path", "+", "\".index\"", "\n", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "                ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "                ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                    ", "msg", "=", "\"Couldn't reach server at '{}' to download pretrained weights.\"", ".", "format", "(", "\n", "archive_file", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to model weight files named one of {} but \"", "\"couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_model_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ",", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", ",", "TF_WEIGHTS_NAME", "]", ")", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "resolved_archive_file", "=", "None", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "state_dict", "is", "None", "and", "not", "from_tf", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "resolved_archive_file", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "if", "from_tf", ":", "\n", "            ", "if", "resolved_archive_file", ".", "endswith", "(", "'.index'", ")", ":", "\n", "# Load from a TensorFlow 1.X checkpoint - provided by original authors", "\n", "                ", "model", "=", "cls", ".", "load_tf_weights", "(", "model", ",", "config", ",", "resolved_archive_file", "[", ":", "-", "6", "]", ")", "# Remove the '.index'", "\n", "", "else", ":", "\n", "# Load from our TensorFlow 2.0 checkpoints", "\n", "                ", "try", ":", "\n", "                    ", "from", "transformers", "import", "load_tf2_checkpoint_in_pytorch_model", "\n", "model", "=", "load_tf2_checkpoint_in_pytorch_model", "(", "model", ",", "resolved_archive_file", ",", "allow_missing_keys", "=", "True", ")", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "", "", "", "else", ":", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "            ", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                    ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "                ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "                ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# PyTorch's `_load_from_state_dict` does not copy parameters in a module's descendants", "\n", "# so we need to apply the function recursively.", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "                ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                    ", "if", "child", "is", "not", "None", ":", "\n", "                        ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "# Make sure we are able to load base models as well as derived models (with heads)", "\n", "", "", "", "start_prefix", "=", "''", "\n", "model_to_load", "=", "model", "\n", "if", "not", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "start_prefix", "=", "cls", ".", "base_model_prefix", "+", "'.'", "\n", "", "if", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "not", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "model_to_load", "=", "getattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "\n", "\n", "", "load", "(", "model_to_load", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n", "", "", "if", "hasattr", "(", "model", ",", "'tie_weights'", ")", ":", "\n", "            ", "model", ".", "tie_weights", "(", ")", "# make sure word embedding weights are still tied", "\n", "\n", "# Set model in evaluation mode to desactivate DropOut modules by default", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "output_loading_info", ":", "\n", "            ", "loading_info", "=", "{", "\"missing_keys\"", ":", "missing_keys", ",", "\"unexpected_keys\"", ":", "unexpected_keys", ",", "\"error_msgs\"", ":", "error_msgs", "}", "\n", "return", "model", ",", "loading_info", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.Conv1D.__init__": [[475, 485], ["torch.nn.Module.__init__", "torch.empty", "torch.nn.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ")", ":", "\n", "        ", "\"\"\" Conv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "Conv1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "w", "=", "torch", ".", "empty", "(", "nx", ",", "nf", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "w", ",", "std", "=", "0.02", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.Conv1D.forward": [[486, 491], ["torch.addmm", "x.view.view.view", "x.view.view.view", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size_out", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "nf", ",", ")", "\n", "x", "=", "torch", ".", "addmm", "(", "self", ".", "bias", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "self", ".", "weight", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "size_out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PoolerStartLogits.__init__": [[495, 498], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerStartLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PoolerStartLogits.forward": [[499, 514], ["modeling_utils.PoolerStartLogits.dense().squeeze", "modeling_utils.PoolerStartLogits.dense", "next", "modeling_utils.PoolerStartLogits.parameters"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape `(batch_size, seq_len)`\n                invalid position mask such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "x", "=", "self", ".", "dense", "(", "hidden_states", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "65500", "*", "p_mask", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PoolerEndLogits.__init__": [[519, 525], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.LayerNorm", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerEndLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PoolerEndLogits.forward": [[526, 558], ["modeling_utils.PoolerEndLogits.dense_0", "modeling_utils.PoolerEndLogits.activation", "modeling_utils.PoolerEndLogits.LayerNorm", "modeling_utils.PoolerEndLogits.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather", "start_states.expand.expand.expand", "torch.cat", "modeling_utils.PoolerEndLogits.dense_1", "next", "modeling_utils.PoolerEndLogits.parameters"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to hidden_states\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape ``(batch_size, seq_len)``\n                Mask of invalid position such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "slen", ",", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "2", ":", "]", "\n", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "start_states", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ")", "# shape (bsz, slen, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "hidden_states", ",", "start_states", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "LayerNorm", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "65500", "*", "p_mask", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PoolerAnswerClass.__init__": [[562, 567], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerAnswerClass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.PoolerAnswerClass.forward": [[568, 602], ["modeling_utils.PoolerAnswerClass.dense_0", "modeling_utils.PoolerAnswerClass.activation", "modeling_utils.PoolerAnswerClass.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather().squeeze", "cls_index[].expand", "hidden_states.gather().squeeze", "torch.cat", "modeling_utils.PoolerAnswerClass.dense_1", "hidden_states.gather", "hidden_states.gather"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to ``hidden_states``.\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span.\n            **cls_index**: torch.LongTensor of shape ``(batch_size,)``\n                position of the CLS token. If None, take the last token.\n\n            note(Original repo):\n                no dependency on end_feature so that we can obtain one single `cls_logits`\n                for each sample\n        \"\"\"", "\n", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "1", "]", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "\n", "", "if", "cls_index", "is", "not", "None", ":", "\n", "            ", "cls_index", "=", "cls_index", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "cls_token_state", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "", "else", ":", "\n", "            ", "cls_token_state", "=", "hidden_states", "[", ":", ",", "-", "1", ",", ":", "]", "# shape (bsz, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "start_states", ",", "cls_token_state", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.SQuADHead.__init__": [[644, 652], ["torch.nn.Module.__init__", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SQuADHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.SQuADHead.forward": [[653, 711], ["modeling_utils.SQuADHead.start_logits", "modeling_utils.SQuADHead.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_utils.SQuADHead.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_utils.SQuADHead.answer_class", "modeling_utils.SQuADHead.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "cls_index", "=", "None", ",", "is_impossible", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "(", ")", "\n", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.SequenceSummary.__init__": [[728, 757], ["torch.nn.Module.__init__", "Identity", "Identity", "Identity", "Identity", "hasattr", "hasattr", "torch.nn.Linear", "hasattr", "torch.nn.Tanh", "hasattr", "torch.nn.Dropout", "hasattr", "torch.nn.Dropout", "hasattr"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SequenceSummary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "summary_type", "=", "config", ".", "summary_type", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "else", "'last'", "\n", "if", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "# We should use a standard multi-head attention module with absolute positional embedding for that.", "\n", "# Cf. https://github.com/zihangdai/xlnet/blob/master/modeling.py#L253-L276", "\n", "# We can probably just use the multi-head attention module of PyTorch >=1.1.0", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "summary", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "and", "config", ".", "summary_use_proj", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "'summary_proj_to_labels'", ")", "and", "config", ".", "summary_proj_to_labels", "and", "config", ".", "num_labels", ">", "0", ":", "\n", "                ", "num_classes", "=", "config", ".", "num_labels", "\n", "", "else", ":", "\n", "                ", "num_classes", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "summary", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "activation", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_activation'", ")", "and", "config", ".", "summary_activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "", "self", ".", "first_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_first_dropout'", ")", "and", "config", ".", "summary_first_dropout", ">", "0", ":", "\n", "            ", "self", ".", "first_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_first_dropout", ")", "\n", "\n", "", "self", ".", "last_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_last_dropout'", ")", "and", "config", ".", "summary_last_dropout", ">", "0", ":", "\n", "            ", "self", ".", "last_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_last_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.SequenceSummary.forward": [[758, 788], ["modeling_utils.SequenceSummary.first_dropout", "modeling_utils.SequenceSummary.summary", "modeling_utils.SequenceSummary.activation", "modeling_utils.SequenceSummary.last_dropout", "hidden_states.mean", "hidden_states.gather().squeeze", "torch.full_like", "cls_index.expand.expand.unsqueeze().unsqueeze", "cls_index.expand.expand.expand", "hidden_states.gather", "cls_index.expand.expand.unsqueeze", "hidden_states.size", "cls_index.expand.expand.dim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\" hidden_states: float Tensor in shape [bsz, ..., seq_len, hidden_size], the hidden-states of the last layer.\n            cls_index: [optional] position of the classification token if summary_type == 'cls_index',\n                shape (bsz,) or more generally (bsz, ...) where ... are optional leading dimensions of hidden_states.\n                if summary_type == 'cls_index' and cls_index is None:\n                    we take the last token of the sequence as classification token\n        \"\"\"", "\n", "if", "self", ".", "summary_type", "==", "'last'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'first'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'mean'", ":", "\n", "            ", "output", "=", "hidden_states", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "summary_type", "==", "'cls_index'", ":", "\n", "            ", "if", "cls_index", "is", "None", ":", "\n", "                ", "cls_index", "=", "torch", ".", "full_like", "(", "hidden_states", "[", "...", ",", ":", "1", ",", ":", "]", ",", "hidden_states", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "cls_index", "=", "cls_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "cls_index", "=", "cls_index", ".", "expand", "(", "(", "-", "1", ",", ")", "*", "(", "cls_index", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", ")", "\n", "# shape of cls_index: (bsz, XX, 1, hidden_size) where XX are optional leading dim of hidden_states", "\n", "", "output", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, XX, hidden_size)", "\n", "", "elif", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "output", "=", "self", ".", "first_dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "summary", "(", "output", ")", "\n", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "output", "=", "self", ".", "last_dropout", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.prune_linear_layer": [[790, 813], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "torch.nn.Linear().to", "nn.Linear().to.weight.copy_", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "nn.Linear().to.bias.copy_", "layer.weight.index_select().clone", "layer.bias.clone().detach", "layer.bias[].clone().detach", "torch.nn.Linear", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select", "layer.bias.clone", "layer.bias[].clone"], "function", ["None"], ["", "", "def", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\" Prune a linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "if", "dim", "==", "1", ":", "\n", "            ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "nn", ".", "Linear", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ",", "bias", "=", "layer", ".", "bias", "is", "not", "None", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.prune_conv1d_layer": [[815, 837], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "Conv1D().to", "Conv1D().to.weight.copy_", "Conv1D().to.bias.copy_", "layer.bias.clone().detach", "layer.bias[].clone().detach", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select().clone", "modeling_utils.Conv1D", "layer.bias.clone", "layer.bias[].clone", "layer.weight.index_select"], "function", ["None"], ["", "def", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D layer (a model parameters) to keep only entries in index.\n        A Conv1D work as a Linear layer (see e.g. BERT) but the weights are transposed.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "dim", "==", "0", ":", "\n", "        ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "Conv1D", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_utils.prune_layer": [[839, 850], ["isinstance", "modeling_utils.prune_linear_layer", "isinstance", "modeling_utils.prune_conv1d_layer", "ValueError"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_layer", "(", "layer", ",", "index", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D or nn.Linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "Conv1D", ")", ":", "\n", "        ", "return", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Can't prune layer of class {}\"", ".", "format", "(", "layer", ".", "__class__", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFMultiHeadAttention.__init__": [[78, 91], ["super().__init__", "int", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "output_attentions", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMultiHeadAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "d_model_size", "=", "d_model_size", "\n", "\n", "self", ".", "depth", "=", "int", "(", "d_model_size", "/", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "Wq", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'Wq'", ")", "\n", "self", ".", "Wk", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'Wk'", ")", "\n", "self", ".", "Wv", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'Wv'", ")", "\n", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'dense'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads": [[92, 95], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_into_heads", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFMultiHeadAttention.call": [[96, 123], ["modeling_tf_ctrl.TFMultiHeadAttention.Wq", "modeling_tf_ctrl.TFMultiHeadAttention.Wk", "modeling_tf_ctrl.TFMultiHeadAttention.Wv", "modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads", "modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads", "modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads", "tensorflow.stack", "modeling_tf_ctrl.scaled_dot_product_attention", "tensorflow.transpose", "tensorflow.reshape", "modeling_tf_ctrl.TFMultiHeadAttention.dense", "tensorflow.unstack", "tensorflow.concat", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.scaled_dot_product_attention"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "v", ",", "k", ",", "q", ",", "mask", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "batch_size", "=", "q", ".", "shape", "[", "0", "]", "\n", "\n", "q", "=", "self", ".", "Wq", "(", "q", ")", "\n", "k", "=", "self", ".", "Wk", "(", "k", ")", "\n", "v", "=", "self", ".", "Wv", "(", "v", ")", "\n", "\n", "q", "=", "self", ".", "split_into_heads", "(", "q", ",", "batch_size", ")", "\n", "k", "=", "self", ".", "split_into_heads", "(", "k", ",", "batch_size", ")", "\n", "v", "=", "self", ".", "split_into_heads", "(", "v", ",", "batch_size", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "tf", ".", "unstack", "(", "layer_past", ",", "axis", "=", "1", ")", "\n", "k", "=", "tf", ".", "concat", "(", "(", "past_key", ",", "k", ")", ",", "dim", "=", "-", "2", ")", "\n", "v", "=", "tf", ".", "concat", "(", "(", "past_value", ",", "v", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "tf", ".", "stack", "(", "(", "k", ",", "v", ")", ",", "axis", "=", "1", ")", "\n", "\n", "output", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", ",", "head_mask", ")", "\n", "scaled_attention", "=", "tf", ".", "transpose", "(", "output", "[", "0", "]", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "attn", "=", "output", "[", "1", "]", "\n", "original_size_attention", "=", "tf", ".", "reshape", "(", "scaled_attention", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model_size", ")", ")", "\n", "output", "=", "self", ".", "dense", "(", "original_size_attention", ")", "\n", "\n", "outputs", "=", "(", "output", ",", "present", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFEncoderLayer.__init__": [[134, 148], ["super().__init__", "modeling_tf_ctrl.TFMultiHeadAttention", "modeling_tf_ctrl.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "dff", ",", "rate", "=", "0.1", ",", "layer_norm_epsilon", "=", "1e-6", ",", "output_attentions", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFEncoderLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "multi_head_attention", "=", "TFMultiHeadAttention", "(", "d_model_size", ",", "\n", "num_heads", ",", "\n", "output_attentions", ",", "\n", "name", "=", "\"multi_head_attention\"", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ",", "name", "=", "\"ffn\"", ")", "\n", "\n", "self", ".", "layernorm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "\"layernorm1\"", ")", "\n", "self", ".", "layernorm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "\"layernorm2\"", ")", "\n", "\n", "self", ".", "dropout1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFEncoderLayer.call": [[149, 165], ["modeling_tf_ctrl.TFEncoderLayer.layernorm1", "modeling_tf_ctrl.TFEncoderLayer.multi_head_attention", "modeling_tf_ctrl.TFEncoderLayer.dropout1", "modeling_tf_ctrl.TFEncoderLayer.layernorm2", "modeling_tf_ctrl.TFEncoderLayer.ffn", "modeling_tf_ctrl.TFEncoderLayer.dropout2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "mask", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "normed", "=", "self", ".", "layernorm1", "(", "x", ")", "\n", "attn_outputs", "=", "self", ".", "multi_head_attention", "(", "[", "normed", ",", "normed", ",", "normed", ",", "mask", ",", "layer_past", ",", "\n", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "attn_output", "=", "attn_outputs", "[", "0", "]", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ",", "training", "=", "training", ")", "\n", "out1", "=", "x", "+", "attn_output", "\n", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", ")", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out2", ")", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ",", "training", "=", "training", ")", "\n", "out2", "=", "out1", "+", "ffn_output", "\n", "\n", "outputs", "=", "(", "out2", ",", ")", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLMainLayer.__init__": [[168, 194], ["super().__init__", "modeling_tf_ctrl.positional_encoding", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_ctrl.TFEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.positional_encoding"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "d_model_size", "=", "config", ".", "n_embd", "\n", "self", ".", "num_layers", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "pos_encoding", "=", "positional_encoding", "(", "config", ".", "n_positions", ",", "self", ".", "d_model_size", ")", "\n", "\n", "\n", "self", ".", "w", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "n_embd", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "\"w\"", ")", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "[", "TFEncoderLayer", "(", "config", ".", "n_embd", ",", "\n", "config", ".", "n_head", ",", "\n", "config", ".", "dff", ",", "\n", "config", ".", "resid_pdrop", ",", "\n", "config", ".", "layer_norm_epsilon", ",", "\n", "config", ".", "output_attentions", ",", "\n", "name", "=", "'h_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "self", ".", "layernorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "\"layernorm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLMainLayer.get_input_embeddings": [[195, 197], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLMainLayer._resize_token_embeddings": [[198, 200], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLMainLayer._prune_heads": [[201, 206], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n                heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLMainLayer.call": [[207, 330], ["isinstance", "tensorflow.reshape", "tensorflow.math.sqrt", "tensorflow.gather", "modeling_tf_ctrl.TFCTRLMainLayer.dropout", "enumerate", "modeling_tf_ctrl.TFCTRLMainLayer.layernorm", "tensorflow.reshape", "isinstance", "ValueError", "tensorflow.tile", "tensorflow.cast", "tensorflow.reshape", "modeling_tf_ctrl.TFCTRLMainLayer.w", "tensorflow.math.sqrt", "modeling_tf_ctrl.TFCTRLMainLayer.w", "tensorflow.linalg.band_part", "tensorflow.cast", "zip", "h", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reshape", "len", "modeling_tf_utils.shape_list", "tensorflow.range", "tensorflow.cast", "tensorflow.ones", "tuple.append", "len", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "past", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "past", "\n", "attention_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "past", "=", "inputs", ".", "get", "(", "'past'", ",", "past", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "shape_list", "(", "past", "[", "0", "]", "[", "0", "]", ")", "[", "-", "2", "]", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "position_ids", "=", "tf", ".", "tile", "(", "position_ids", ",", "[", "input_shape", "[", "0", "]", ",", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", ",", "shape_list", "(", "token_type_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "w", "(", "token_type_ids", ",", "mode", "=", "'embedding'", ")", "\n", "token_type_embeds", "*=", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "cast", "(", "self", ".", "d_model_size", ",", "tf", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "[", "-", "1", ",", "shape_list", "(", "position_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "w", "(", "input_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "seq_len", "=", "input_shape", "[", "-", "1", "]", "\n", "mask", "=", "1", "-", "tf", ".", "linalg", ".", "band_part", "(", "tf", ".", "ones", "(", "(", "seq_len", ",", "seq_len", ")", ")", ",", "-", "1", ",", "0", ")", "\n", "\n", "inputs_embeds", "*=", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "cast", "(", "self", ".", "d_model_size", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "pos_embeds", "=", "tf", ".", "gather", "(", "self", ".", "pos_encoding", ",", "position_ids", ")", "\n", "\n", "hidden_states", "=", "inputs_embeds", "+", "pos_embeds", "+", "token_type_embeds", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "[", "shape_list", "(", "hidden_states", ")", "[", "-", "1", "]", "]", "\n", "presents", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "for", "i", ",", "(", "h", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", ",", ")", "\n", "", "outputs", "=", "h", "(", "[", "hidden_states", ",", "mask", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "output_past", ":", "\n", "                ", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "layernorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", "+", "shape_list", "(", "all_attentions", "[", "0", "]", ")", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "tf", ".", "reshape", "(", "t", ",", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLModel.__init__": [[426, 429], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_ctrl.TFCTRLMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFCTRLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLModel.call": [[430, 433], ["modeling_tf_ctrl.TFCTRLModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLLMHead.__init__": [[436, 443], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLLMHead.build": [[444, 450], ["modeling_tf_ctrl.TFCTRLLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFCTRLLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLLMHead.call": [[451, 455], ["modeling_tf_ctrl.TFCTRLLMHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLLMHeadModel.__init__": [[489, 494], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_ctrl.TFCTRLMainLayer", "modeling_tf_ctrl.TFCTRLLMHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFCTRLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n", "self", ".", "lm_head", "=", "TFCTRLLMHead", "(", "config", ",", "self", ".", "transformer", ".", "w", ",", "name", "=", "\"lm_head\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLLMHeadModel.get_output_embeddings": [[495, 497], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.TFCTRLLMHeadModel.call": [[498, 507], ["modeling_tf_ctrl.TFCTRLLMHeadModel.transformer", "modeling_tf_ctrl.TFCTRLLMHeadModel.lm_head"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm_logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.angle_defn": [[35, 38], ["numpy.power", "numpy.float32"], "function", ["None"], ["def", "angle_defn", "(", "pos", ",", "i", ",", "d_model_size", ")", ":", "\n", "    ", "angle_rates", "=", "1", "/", "np", ".", "power", "(", "10000", ",", "(", "2", "*", "(", "i", "//", "2", ")", ")", "/", "np", ".", "float32", "(", "d_model_size", ")", ")", "\n", "return", "pos", "*", "angle_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.positional_encoding": [[39, 51], ["modeling_tf_ctrl.angle_defn", "numpy.sin", "numpy.cos", "tensorflow.cast", "numpy.concatenate", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.angle_defn"], ["", "def", "positional_encoding", "(", "position", ",", "d_model_size", ")", ":", "\n", "# create the sinusoidal pattern for the positional encoding", "\n", "    ", "angle_rads", "=", "angle_defn", "(", "np", ".", "arange", "(", "position", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "np", ".", "arange", "(", "d_model_size", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "\n", "d_model_size", ")", "\n", "\n", "sines", "=", "np", ".", "sin", "(", "angle_rads", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "cosines", "=", "np", ".", "cos", "(", "angle_rads", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "# pos_encoding = tf.cast(np.concatenate([sines, cosines], axis=-1)[np.newaxis, ...], dtype=tf.float32)", "\n", "pos_encoding", "=", "tf", ".", "cast", "(", "np", ".", "concatenate", "(", "[", "sines", ",", "cosines", "]", ",", "axis", "=", "-", "1", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "pos_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.scaled_dot_product_attention": [[52, 75], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# calculate attention", "\n", "    ", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "\n", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e4", ")", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "        ", "scaled_attention_logits", "=", "scaled_attention_logits", "+", "attention_mask", "\n", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "        ", "attention_weights", "=", "attention_weights", "*", "head_mask", "\n", "\n", "", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_ctrl.point_wise_feed_forward_network": [[126, 131], ["tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "", "def", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ",", "name", "=", "\"\"", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff", ",", "activation", "=", "'relu'", ",", "name", "=", "\"0\"", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "\"2\"", ")", "\n", "]", ",", "name", "=", "\"ffn\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertEmbeddings.__init__": [[150, 160], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertEmbeddings.forward": [[161, 184], ["modeling_bert.BertEmbeddings.position_embeddings", "modeling_bert.BertEmbeddings.token_type_embeddings", "modeling_bert.BertEmbeddings.LayerNorm", "modeling_bert.BertEmbeddings.dropout", "input_ids.size", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.zeros", "modeling_bert.BertEmbeddings.word_embeddings", "modeling_bert.BertEmbeddings.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertSelfAttention.__init__": [[187, 204], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertSelfAttention.transpose_for_scores": [[205, 209], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertSelfAttention.forward": [[210, 254], ["modeling_bert.BertSelfAttention.query", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "torch.matmul", "modeling_bert.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "\n", "# If this is instantiated as a cross-attention module, the keys", "\n", "# and values come from an encoder; the attention mask needs to be", "\n", "# such that the encoder's padding tokens are not attended to.", "\n", "if", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "mixed_key_layer", "=", "self", ".", "key", "(", "encoder_hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "encoder_hidden_states", ")", "\n", "attention_mask", "=", "encoder_attention_mask", "\n", "", "else", ":", "\n", "            ", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertSelfOutput.__init__": [[257, 262], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertSelfOutput.forward": [[263, 268], ["modeling_bert.BertSelfOutput.dense", "modeling_bert.BertSelfOutput.dropout", "modeling_bert.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertAttention.__init__": [[271, 276], ["torch.nn.Module.__init__", "modeling_bert.BertSelfAttention", "modeling_bert.BertSelfOutput", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertAttention.prune_heads": [[277, 299], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_bert.BertAttention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "self", ".", "num_attention_heads", ",", "self", ".", "self", ".", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "\n", "# Prune linear layers", "\n", "self", ".", "self", ".", "query", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "query", ",", "index", ")", "\n", "self", ".", "self", ".", "key", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "key", ",", "index", ")", "\n", "self", ".", "self", ".", "value", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "value", ",", "index", ")", "\n", "self", ".", "output", ".", "dense", "=", "prune_linear_layer", "(", "self", ".", "output", ".", "dense", ",", "index", ",", "dim", "=", "1", ")", "\n", "\n", "# Update hyper params and store pruned heads", "\n", "self", ".", "self", ".", "num_attention_heads", "=", "self", ".", "self", ".", "num_attention_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "self", ".", "all_head_size", "=", "self", ".", "self", ".", "attention_head_size", "*", "self", ".", "self", ".", "num_attention_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertAttention.forward": [[300, 305], ["modeling_bert.BertAttention.self", "modeling_bert.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "self_outputs", "=", "self", ".", "self", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "hidden_states", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertIntermediate.__init__": [[308, 315], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertIntermediate.forward": [[316, 320], ["modeling_bert.BertIntermediate.dense", "modeling_bert.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertOutput.__init__": [[323, 328], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertOutput.forward": [[329, 334], ["modeling_bert.BertOutput.dense", "modeling_bert.BertOutput.dropout", "modeling_bert.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertLayer.__init__": [[337, 345], ["torch.nn.Module.__init__", "modeling_bert.BertAttention", "modeling_bert.BertIntermediate", "modeling_bert.BertOutput", "modeling_bert.BertAttention"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "self", ".", "crossattention", "=", "BertAttention", "(", "config", ")", "\n", "", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertLayer.forward": [[346, 360], ["modeling_bert.BertLayer.attention", "modeling_bert.BertLayer.intermediate", "modeling_bert.BertLayer.output", "modeling_bert.BertLayer.crossattention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "self_attention_outputs", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "self_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "self_attention_outputs", "[", "1", ":", "]", "# add self attentions if we output attention weights", "\n", "\n", "if", "self", ".", "is_decoder", "and", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "cross_attention_outputs", "=", "self", ".", "crossattention", "(", "attention_output", ",", "attention_mask", ",", "head_mask", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "attention_output", "=", "cross_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "outputs", "+", "cross_attention_outputs", "[", "1", ":", "]", "# add cross attentions if we output attention weights", "\n", "\n", "", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "outputs", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertEncoder.__init__": [[363, 368], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "modeling_bert.BertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertEncoder.forward": [[369, 392], ["enumerate", "layer_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPooler.__init__": [[395, 399], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPooler.forward": [[400, 407], ["modeling_bert.BertPooler.dense", "modeling_bert.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPredictionHeadTransform.__init__": [[410, 418], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPredictionHeadTransform.forward": [[419, 424], ["modeling_bert.BertPredictionHeadTransform.dense", "modeling_bert.BertPredictionHeadTransform.transform_act_fn", "modeling_bert.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertLMPredictionHead.__init__": [[427, 438], ["torch.nn.Module.__init__", "modeling_bert.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "\n", "config", ".", "vocab_size", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertLMPredictionHead.forward": [[439, 443], ["modeling_bert.BertLMPredictionHead.transform", "modeling_bert.BertLMPredictionHead.decoder"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertOnlyMLMHead.__init__": [[446, 449], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertOnlyMLMHead.forward": [[450, 453], ["modeling_bert.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertOnlyNSPHead.__init__": [[456, 459], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertOnlyNSPHead.forward": [[460, 463], ["modeling_bert.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPreTrainingHeads.__init__": [[466, 470], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPreTrainingHeads.forward": [[471, 475], ["modeling_bert.BertPreTrainingHeads.predictions", "modeling_bert.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertPreTrainedModel._init_weights": [[486, 497], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertModel.__init__": [[605, 614], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertEmbeddings", "modeling_bert.BertEncoder", "modeling_bert.BertPooler", "modeling_bert.BertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertModel.get_input_embeddings": [[615, 617], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertModel.set_input_embeddings": [[618, 620], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertModel._prune_heads": [[621, 628], ["heads_to_prune.items", "modeling_bert.BertModel.encoder.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertModel.forward": [[629, 725], ["extended_attention_mask.to.to.to", "encoder_extended_attention_mask.to.to.to", "modeling_bert.BertModel.embeddings", "modeling_bert.BertModel.encoder", "modeling_bert.BertModel.pooler", "ValueError", "torch.ones", "torch.ones", "torch.zeros", "torch.ones.dim", "torch.ones.dim", "torch.ones.dim", "torch.ones.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "input_ids.size", "torch.arange", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "ValueError", "seq_ids[].repeat", "next", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "inputs_embeds.size", "modeling_bert.BertModel.parameters", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass on the Model.\n\n        The model can behave as an encoder (with only self-attention) as well\n        as a decoder, in which case a layer of cross-attention is added between\n        the self-attention layers, following the architecture described in `Attention is all you need`_ by Ashish Vaswani,\n        Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser and Illia Polosukhin.\n\n        To behave as an decoder the model needs to be initialized with the\n        `is_decoder` argument of the configuration set to `True`; an\n        `encoder_hidden_states` is expected as an input to the forward pass.\n\n        .. _`Attention is all you need`:\n            https://arxiv.org/abs/1706.03762\n\n        \"\"\"", "\n", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "\n", "", "if", "encoder_attention_mask", "is", "None", ":", "\n", "            ", "encoder_attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "# We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]", "\n", "# ourselves in which case we just need to make it broadcastable to all heads.", "\n", "", "if", "attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "# Provided a padding mask of dimensions [batch_size, seq_length]", "\n", "# - if the model is a decoder, apply a causal mask in addition to the padding mask", "\n", "# - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]", "\n", "", "if", "attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "if", "self", ".", "config", ".", "is_decoder", ":", "\n", "                ", "batch_size", ",", "seq_length", "=", "input_shape", "\n", "seq_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "device", "=", "device", ")", "\n", "causal_mask", "=", "seq_ids", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "batch_size", ",", "seq_length", ",", "1", ")", "<=", "seq_ids", "[", "None", ",", ":", ",", "None", "]", "\n", "extended_attention_mask", "=", "causal_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# If a 2D ou 3D attention mask is provided for the cross-attention", "\n", "# we need to make broadcastabe to [batch_size, num_heads, seq_length, seq_length]", "\n", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "", "encoder_extended_attention_mask", "=", "encoder_extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "encoder_extended_attention_mask", "=", "(", "1.0", "-", "encoder_extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", "=", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "attention_mask", "=", "extended_attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_extended_attention_mask", ")", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForPreTraining.__init__": [[768, 775], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertPreTrainingHeads", "modeling_bert.BertForPreTraining.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertPreTrainingHeads", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForPreTraining.get_output_embeddings": [[776, 778], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForPreTraining.forward": [[779, 802], ["modeling_bert.BertForPreTraining.bert", "modeling_bert.BertForPreTraining.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "prediction_scores.view", "masked_lm_labels.view", "seq_relationship_score.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", ",", "pooled_output", "=", "outputs", "[", ":", "2", "]", "\n", "prediction_scores", ",", "seq_relationship_score", "=", "self", ".", "cls", "(", "sequence_output", ",", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", "and", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), prediction_scores, seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForMaskedLM.__init__": [[844, 851], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyMLMHead", "modeling_bert.BertForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForMaskedLM.get_output_embeddings": [[852, 854], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForMaskedLM.forward": [[855, 892], ["modeling_bert.BertForMaskedLM.bert", "modeling_bert.BertForMaskedLM.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "prediction_scores[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "prediction_scores[].contiguous.view", "masked_lm_labels.view", "prediction_scores[].contiguous.view", "lm_labels[].contiguous.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ",", "lm_labels", "=", "None", ",", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_attention_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "# Although this may seem awkward, BertForMaskedLM supports two scenarios:", "\n", "# 1. If a tensor that contains the indices of masked labels is provided,", "\n", "#    the cross-entropy is the MLM cross-entropy that measures the likelihood", "\n", "#    of predictions for masked words.", "\n", "# 2. If `lm_labels` is provided we are in a causal scenario where we", "\n", "#    try to predict the next token for each input in the decoder.", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "# -1 index = padding token", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "# we are doing next-token prediction; shift prediction scores and input ids by one", "\n", "            ", "prediction_scores", "=", "prediction_scores", "[", ":", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "lm_labels", "=", "lm_labels", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "ltr_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "ltr_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), (ltr_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForNextSentencePrediction.__init__": [[927, 934], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyNSPHead", "modeling_bert.BertForNextSentencePrediction.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyNSPHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForNextSentencePrediction.forward": [[935, 956], ["modeling_bert.BertForNextSentencePrediction.bert", "modeling_bert.BertForNextSentencePrediction.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForNextSentencePrediction.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "next_sentence_label", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "seq_relationship_score", "=", "self", ".", "cls", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "next_sentence_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (next_sentence_loss), seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForSequenceClassification.__init__": [[993, 1002], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForSequenceClassification.forward": [[1003, 1031], ["modeling_bert.BertForSequenceClassification.bert", "modeling_bert.BertForSequenceClassification.dropout", "modeling_bert.BertForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForSequenceClassification.view", "labels.view", "modeling_bert.BertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForMultipleChoice.__init__": [[1069, 1077], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForMultipleChoice.forward": [[1078, 1108], ["input_ids.view.view.view", "modeling_bert.BertForMultipleChoice.bert", "modeling_bert.BertForMultipleChoice.dropout", "modeling_bert.BertForMultipleChoice.classifier", "modeling_bert.BertForMultipleChoice.view", "input_ids.view.view.size", "attention_mask.view", "token_type_ids.view", "position_ids.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "attention_mask.size", "token_type_ids.size", "position_ids.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForTokenClassification.__init__": [[1143, 1152], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForTokenClassification.forward": [[1153, 1182], ["modeling_bert.BertForTokenClassification.bert", "modeling_bert.BertForTokenClassification.dropout", "modeling_bert.BertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_bert.BertForTokenClassification.view", "labels.view", "modeling_bert.BertForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForQuestionAnswering.__init__": [[1225, 1233], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Linear", "modeling_bert.BertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForQuestionAnswering.forward": [[1234, 1269], ["modeling_bert.BertForQuestionAnswering.bert", "modeling_bert.BertForQuestionAnswering.qa_outputs", "modeling_bert.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.__init__": [[1273, 1284], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Parameter", "modeling_bert.BertOnlyMLMHead", "modeling_bert.BertForCopy.init_weights", "modeling_bert.BertForCopy.tie_weights", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForCopy", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "\n", "self", ".", "coef", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "config", ".", "hidden_size", ")", "/", "config", ".", "hidden_size", ")", "\n", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.tie_weights": [[1285, 1291], ["modeling_bert.BertForCopy._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "cls", ".", "predictions", ".", "decoder", ",", "\n", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.get_range_vector": [[1292, 1301], ["torch.arange", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor"], "methods", ["None"], ["", "def", "get_range_vector", "(", "self", ",", "size", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Returns a range vector with the desired size, starting at 0. The CUDA implementation\n        is meant to avoid copy data from CPU to GPU.\n        \"\"\"", "\n", "if", "device", ">", "-", "1", ":", "\n", "            ", "return", "torch", ".", "cuda", ".", "LongTensor", "(", "size", ",", "device", "=", "device", ")", ".", "fill_", "(", "1", ")", ".", "cumsum", "(", "0", ")", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "arange", "(", "0", ",", "size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.get_device_of": [[1302, 1310], ["tensor.get_device"], "methods", ["None"], ["", "", "def", "get_device_of", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Returns the device of the tensor.\n        \"\"\"", "\n", "if", "not", "tensor", ".", "is_cuda", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "tensor", ".", "get_device", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.flatten_and_batch_shift_indices": [[1311, 1328], ["range", "offset_indices.view.view.view", "modeling_bert.BertForCopy.get_range_vector", "offsets.unsqueeze.unsqueeze.unsqueeze", "torch.max", "torch.min", "indices.size", "modeling_bert.BertForCopy.get_device_of", "len", "indices.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.get_range_vector", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.get_device_of"], ["", "", "def", "flatten_and_batch_shift_indices", "(", "self", ",", "indices", ",", "sequence_length", ")", ":", "\n", "# Shape: (batch_size)", "\n", "        ", "if", "torch", ".", "max", "(", "indices", ")", ">=", "sequence_length", "or", "torch", ".", "min", "(", "indices", ")", "<", "0", ":", "\n", "            ", "assert", "(", "False", ")", "\n", "# raise ConfigurationError(", "\n", "#     f\"All elements in indices should be in range (0, {sequence_length - 1})\"", "\n", "# )", "\n", "", "offsets", "=", "self", ".", "get_range_vector", "(", "indices", ".", "size", "(", "0", ")", ",", "self", ".", "get_device_of", "(", "indices", ")", ")", "*", "sequence_length", "\n", "for", "_", "in", "range", "(", "len", "(", "indices", ".", "size", "(", ")", ")", "-", "1", ")", ":", "\n", "            ", "offsets", "=", "offsets", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Shape: (batch_size, d_1, ..., d_n)", "\n", "", "offset_indices", "=", "indices", "+", "offsets", "\n", "\n", "# Shape: (batch_size * d_1 * ... * d_n)", "\n", "offset_indices", "=", "offset_indices", ".", "view", "(", "-", "1", ")", "\n", "return", "offset_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.batched_index_select": [[1329, 1347], ["target.view", "target.view.index_select", "target.view.index_select.view", "modeling_bert.BertForCopy.flatten_and_batch_shift_indices", "target.size", "list", "target.size", "indices.size", "target.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.flatten_and_batch_shift_indices"], ["", "def", "batched_index_select", "(", "self", ",", "\n", "target", ",", "\n", "indices", ",", "\n", "flattened_indices", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "flattened_indices", "is", "None", ":", "\n", "# Shape: (batch_size * d_1 * ... * d_n)", "\n", "            ", "flattened_indices", "=", "self", ".", "flatten_and_batch_shift_indices", "(", "indices", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Shape: (batch_size * sequence_length, embedding_size)", "\n", "", "flattened_target", "=", "target", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# Shape: (batch_size * d_1 * ... * d_n, embedding_size)", "\n", "flattened_selected", "=", "flattened_target", ".", "index_select", "(", "0", ",", "flattened_indices", ")", "\n", "selected_shape", "=", "list", "(", "indices", ".", "size", "(", ")", ")", "+", "[", "target", ".", "size", "(", "-", "1", ")", "]", "\n", "# Shape: (batch_size, d_1, ..., d_n, embedding_size)", "\n", "selected_targets", "=", "flattened_selected", ".", "view", "(", "*", "selected_shape", ")", "\n", "return", "selected_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.forward": [[1348, 1378], ["modeling_bert.BertForCopy.bert", "modeling_bert.BertForCopy.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "input_ids.size", "span_start.size", "modeling_bert.BertForCopy.batched_index_select", "torch.matmul", "label_masks.to.to.to", "torch.logsumexp", "torch.logsumexp", "modeling_bert.BertForCopy.view", "masked_lm_labels.view", "modeling_bert.BertForCopy.coef.unsqueeze().unsqueeze", "sequence_output.transpose", "torch.sum", "torch.sum", "modeling_bert.BertForCopy.coef.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForCopy.batched_index_select"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "span_start", "=", "None", ",", "label_masks", "=", "None", ",", "ign_labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "bsz", ",", "seq_len", "=", "input_ids", ".", "size", "(", ")", "\n", "K", "=", "span_start", ".", "size", "(", "1", ")", "\n", "valid_span_mask", "=", "(", "span_start", ">", "0", ")", ".", "to", "(", "sequence_output", ".", "dtype", ")", "\n", "span_start_emb", "=", "self", ".", "batched_index_select", "(", "sequence_output", ",", "span_start", ")", "\n", "span_start_emb", "=", "span_start_emb", "*", "self", ".", "coef", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# bsz, K, dim", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "span_start_emb", ",", "sequence_output", ".", "transpose", "(", "1", ",", "2", ")", ")", "# bsz, K, seq_len", "\n", "\n", "label_masks", "=", "label_masks", ".", "to", "(", "scores", ".", "dtype", ")", "\n", "\n", "log_norm", "=", "torch", ".", "logsumexp", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "log_correct", "=", "torch", ".", "logsumexp", "(", "scores", "-", "10000", "*", "(", "1", "-", "label_masks", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "copy_loss", "=", "-", "torch", ".", "sum", "(", "(", "log_correct", "-", "log_norm", ")", "*", "valid_span_mask", ")", "/", "(", "torch", ".", "sum", "(", "valid_span_mask", ")", "+", "1e-12", ")", "\n", "\n", "return", "masked_lm_loss", ",", "copy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForQuestionAnsweringForMRQA.__init__": [[1383, 1391], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Linear", "modeling_bert.BertForQuestionAnsweringForMRQA.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnsweringForMRQA", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForQuestionAnsweringForMRQA.forward": [[1392, 1436], ["modeling_bert.BertForQuestionAnsweringForMRQA.bert", "modeling_bert.BertForQuestionAnsweringForMRQA.qa_outputs", "modeling_bert.BertForQuestionAnsweringForMRQA.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "sum", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "torch.mean", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size", "torch.nn.CrossEntropyLoss.", "zip", "torch.nn.CrossEntropyLoss.", "zip", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "answer_masks", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ",", "reduce", "=", "False", ")", "\n", "\n", "start_losses", "=", "[", "(", "loss_fct", "(", "start_logits", ",", "_start_positions", ")", "*", "_span_mask", ")", "for", "(", "_start_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "start_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "end_losses", "=", "[", "(", "loss_fct", "(", "end_logits", ",", "_end_positions", ")", "*", "_span_mask", ")", "for", "(", "_end_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "end_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "\n", "total_loss", "=", "sum", "(", "start_losses", "+", "end_losses", ")", "\n", "total_loss", "=", "torch", ".", "mean", "(", "total_loss", ")", "/", "2", "\n", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForQuestionAnsweringForQUOREF.__init__": [[1440, 1455], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "configuration_bert.BertConfig", "modeling_bert.BertLayer", "modeling_bert.BertForQuestionAnsweringForQUOREF.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnsweringForQUOREF", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "self", ".", "num_answers", "=", "config", ".", "num_answers", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "self", ".", "qa_classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_answers", ")", "\n", "self", ".", "point_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "head_num", "=", "config", ".", "num_attention_heads", "//", "4", "\n", "\n", "self", ".", "coref_config", "=", "BertConfig", "(", "num_hidden_layers", "=", "1", ",", "num_attention_heads", "=", "head_num", ",", "hidden_size", "=", "config", ".", "hidden_size", ",", "intermediate_size", "=", "256", "*", "head_num", ")", "\n", "self", ".", "coref_layer", "=", "BertLayer", "(", "self", ".", "coref_config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForQuestionAnsweringForQUOREF.forward": [[1456, 1510], ["modeling_bert.BertForQuestionAnsweringForQUOREF.bert", "attention_mask.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling_bert.BertForQuestionAnsweringForQUOREF.qa_outputs", "modeling_bert.BertForQuestionAnsweringForQUOREF.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "modeling_bert.BertForQuestionAnsweringForQUOREF.qa_classifier", "modeling_bert.BertForQuestionAnsweringForQUOREF.coref_layer", "start_logits.squeeze.squeeze.size", "start_positions.clamp_", "end_positions.clamp_", "torch.nn.CrossEntropyLoss", "sum", "torch.nn.CrossEntropyLoss.", "torch.mean", "attention_mask.unsqueeze", "len", "answer_nums.squeeze.squeeze.squeeze", "next", "answer_nums.squeeze.squeeze.size", "torch.nn.CrossEntropyLoss.", "zip", "torch.nn.CrossEntropyLoss.", "zip", "modeling_bert.BertForQuestionAnsweringForQUOREF.parameters", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "answer_masks", "=", "None", ",", "answer_nums", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output_0", "=", "outputs", "[", "0", "]", "\n", "\n", "\n", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "sequence_output", "=", "self", ".", "coref_layer", "(", "sequence_output_0", ",", "extended_attention_mask", ")", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "switch_logits", "=", "self", ".", "qa_classifier", "(", "sequence_output", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", "switch_logits", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "\n", "            ", "if", "len", "(", "answer_nums", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "answer_nums", "=", "answer_nums", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ",", "reduce", "=", "False", ")", "\n", "\n", "start_losses", "=", "[", "(", "loss_fct", "(", "start_logits", ",", "_start_positions", ")", "*", "_span_mask", ")", "for", "(", "_start_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "start_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "end_losses", "=", "[", "(", "loss_fct", "(", "end_logits", ",", "_end_positions", ")", "*", "_span_mask", ")", "for", "(", "_end_positions", ",", "_span_mask", ")", "in", "zip", "(", "torch", ".", "unbind", "(", "end_positions", ",", "dim", "=", "1", ")", ",", "torch", ".", "unbind", "(", "answer_masks", ",", "dim", "=", "1", ")", ")", "]", "\n", "\n", "s_e_loss", "=", "sum", "(", "start_losses", "+", "end_losses", ")", "# bsz", "\n", "switch_loss", "=", "loss_fct", "(", "switch_logits", ",", "answer_nums", ")", "\n", "\n", "total_loss", "=", "torch", ".", "mean", "(", "s_e_loss", "+", "switch_loss", ")", "\n", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForSequenceEncoder.__init__": [[1513, 1520], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "modeling_bert.BertForSequenceEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForSequenceEncoder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.BertForSequenceEncoder.forward": [[1521, 1530], ["modeling_bert.BertForSequenceEncoder.bert", "modeling_bert.BertForSequenceEncoder.dropout", "modeling_bert.BertForSequenceEncoder.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "outputs", "[", "0", "]", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "outputs", "[", "1", "]", ")", "\n", "\n", "return", "sequence_output", ",", "pooled_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.load_tf_weights_in_bert": [[54, 119], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "any", "logger.info", "torch.from_numpy", "logger.error", "logger.info", "re.fullmatch", "getattr", "re.split", "getattr", "len", "int", "np.transpose", "getattr", "getattr", "getattr", "getattr", "logger.info"], "function", ["None"], ["def", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", ",", "\"global_step\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'squad'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'classifier'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.gelu": [[121, 128], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.gelu_new": [[130, 135], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function currently in Google Bert repo (identical to OpenAI GPT).\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_bert.swish": [[137, 139], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings.__init__": [[90, 109], ["super().__init__", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "hidden_size", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "self", ".", "token_type_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "\n", "config", ".", "hidden_size", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ",", "\n", "name", "=", "'token_type_embeddings'", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings.build": [[110, 120], ["super().build", "tensorflow.name_scope", "modeling_tf_bert.TFBertEmbeddings.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"word_embeddings\"", ")", ":", "\n", "# Create and initialize weights. The random normal initializer was chosen", "\n", "# arbitrarily, and works well.", "\n", "            ", "self", ".", "word_embeddings", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "", "super", "(", "TFBertEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings.call": [[121, 142], ["modeling_tf_bert.TFBertEmbeddings._embedding", "modeling_tf_bert.TFBertEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mode", "=", "\"embedding\"", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n        \n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ",", "training", "=", "training", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._embedding": [[143, 167], ["modeling_tf_bert.TFBertEmbeddings.position_embeddings", "modeling_tf_bert.TFBertEmbeddings.token_type_embeddings", "modeling_tf_bert.TFBertEmbeddings.LayerNorm", "modeling_tf_bert.TFBertEmbeddings.dropout", "tensorflow.shape", "tensorflow.fill", "tensorflow.gather", "tensorflow.shape", "tensorflow.range"], "methods", ["None"], ["", "", "def", "_embedding", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "=", "inputs", "\n", "\n", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "seq_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "fill", "(", "input_shape", ",", "0", ")", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "gather", "(", "self", ".", "word_embeddings", ",", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ",", "training", "=", "training", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEmbeddings._linear": [[168, 182], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [batch_size, length, hidden_size]\n            Returns:\n                float32 tensor with shape [batch_size, length, vocab_size].\n        \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "word_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "length", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertSelfAttention.__init__": [[185, 209], ["super().__init__", "int", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "ValueError", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "assert", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "==", "0", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'query'", ")", "\n", "self", ".", "key", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'key'", ")", "\n", "self", ".", "value", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'value'", ")", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertSelfAttention.transpose_for_scores": [[210, 213], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertSelfAttention.call": [[214, 254], ["modeling_tf_bert.TFBertSelfAttention.query", "modeling_tf_bert.TFBertSelfAttention.key", "modeling_tf_bert.TFBertSelfAttention.value", "modeling_tf_bert.TFBertSelfAttention.transpose_for_scores", "modeling_tf_bert.TFBertSelfAttention.transpose_for_scores", "modeling_tf_bert.TFBertSelfAttention.transpose_for_scores", "tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "modeling_tf_bert.TFBertSelfAttention.dropout", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.shape", "tensorflow.math.sqrt", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "hidden_states", ")", "[", "0", "]", "\n", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ",", "batch_size", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ",", "batch_size", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ",", "batch_size", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "tf", ".", "matmul", "(", "query_layer", ",", "key_layer", ",", "transpose_b", "=", "True", ")", "# (batch size, num_heads, seq_len_q, seq_len_k)", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "key_layer", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "# scale attention_scores", "\n", "attention_scores", "=", "attention_scores", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in TFBertModel call() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_scores", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "tf", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "tf", ".", "transpose", "(", "context_layer", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "context_layer", "=", "tf", ".", "reshape", "(", "context_layer", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "all_head_size", ")", ")", "# (batch_size, seq_len_q, all_head_size)", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertSelfOutput.__init__": [[257, 264], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertSelfOutput", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertSelfOutput.call": [[265, 272], ["modeling_tf_bert.TFBertSelfOutput.dense", "modeling_tf_bert.TFBertSelfOutput.dropout", "modeling_tf_bert.TFBertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "input_tensor", "=", "inputs", "\n", "\n", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertAttention.__init__": [[275, 279], ["super().__init__", "modeling_tf_bert.TFBertSelfAttention", "modeling_tf_bert.TFBertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "self_attention", "=", "TFBertSelfAttention", "(", "config", ",", "name", "=", "'self'", ")", "\n", "self", ".", "dense_output", "=", "TFBertSelfOutput", "(", "config", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertAttention.prune_heads": [[280, 282], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertAttention.call": [[283, 290], ["modeling_tf_bert.TFBertAttention.self_attention", "modeling_tf_bert.TFBertAttention.dense_output"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.self_attention"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "input_tensor", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "self_outputs", "=", "self", ".", "self_attention", "(", "[", "input_tensor", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "attention_output", "=", "self", ".", "dense_output", "(", "[", "self_outputs", "[", "0", "]", ",", "input_tensor", "]", ",", "training", "=", "training", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertIntermediate.__init__": [[293, 302], ["super().__init__", "tensorflow.keras.layers.Dense", "isinstance", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertIntermediate", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "intermediate_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertIntermediate.call": [[303, 307], ["modeling_tf_bert.TFBertIntermediate.dense", "modeling_tf_bert.TFBertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertOutput.__init__": [[310, 317], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertOutput", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertOutput.call": [[318, 325], ["modeling_tf_bert.TFBertOutput.dense", "modeling_tf_bert.TFBertOutput.dropout", "modeling_tf_bert.TFBertOutput.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "input_tensor", "=", "inputs", "\n", "\n", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertLayer.__init__": [[328, 333], ["super().__init__", "modeling_tf_bert.TFBertAttention", "modeling_tf_bert.TFBertIntermediate", "modeling_tf_bert.TFBertOutput"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "attention", "=", "TFBertAttention", "(", "config", ",", "name", "=", "'attention'", ")", "\n", "self", ".", "intermediate", "=", "TFBertIntermediate", "(", "config", ",", "name", "=", "'intermediate'", ")", "\n", "self", ".", "bert_output", "=", "TFBertOutput", "(", "config", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertLayer.call": [[334, 343], ["modeling_tf_bert.TFBertLayer.attention", "modeling_tf_bert.TFBertLayer.intermediate", "modeling_tf_bert.TFBertLayer.bert_output"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "attention_outputs", "=", "self", ".", "attention", "(", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "attention_output", "=", "attention_outputs", "[", "0", "]", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "bert_output", "(", "[", "intermediate_output", ",", "attention_output", "]", ",", "training", "=", "training", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEncoder.__init__": [[346, 351], ["super().__init__", "modeling_tf_bert.TFBertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertEncoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "[", "TFBertLayer", "(", "config", ",", "name", "=", "'layer_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertEncoder.call": [[352, 377], ["enumerate", "layer_module"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertPooler.__init__": [[380, 386], ["super().__init__", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertPooler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "name", "=", "'dense'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertPooler.call": [[387, 393], ["modeling_tf_bert.TFBertPooler.dense"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertPredictionHeadTransform.__init__": [[396, 406], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "isinstance", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertPredictionHeadTransform.call": [[407, 412], ["modeling_tf_bert.TFBertPredictionHeadTransform.dense", "modeling_tf_bert.TFBertPredictionHeadTransform.transform_act_fn", "modeling_tf_bert.TFBertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertLMPredictionHead.__init__": [[415, 423], ["super().__init__", "modeling_tf_bert.TFBertPredictionHeadTransform"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "transform", "=", "TFBertPredictionHeadTransform", "(", "config", ",", "name", "=", "'transform'", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertLMPredictionHead.build": [[424, 430], ["modeling_tf_bert.TFBertLMPredictionHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFBertLMPredictionHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertLMPredictionHead.call": [[431, 436], ["modeling_tf_bert.TFBertLMPredictionHead.transform", "modeling_tf_bert.TFBertLMPredictionHead.input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMLMHead.__init__": [[439, 442], ["super().__init__", "modeling_tf_bert.TFBertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertMLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "predictions", "=", "TFBertLMPredictionHead", "(", "config", ",", "input_embeddings", ",", "name", "=", "'predictions'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMLMHead.call": [[443, 446], ["modeling_tf_bert.TFBertMLMHead.predictions"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertNSPHead.__init__": [[449, 454], ["super().__init__", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertNSPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "seq_relationship", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "2", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'seq_relationship'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertNSPHead.call": [[455, 458], ["modeling_tf_bert.TFBertNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMainLayer.__init__": [[461, 468], ["super().__init__", "modeling_tf_bert.TFBertEmbeddings", "modeling_tf_bert.TFBertEncoder", "modeling_tf_bert.TFBertPooler"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", "\n", "\n", "self", ".", "embeddings", "=", "TFBertEmbeddings", "(", "config", ",", "name", "=", "'embeddings'", ")", "\n", "self", ".", "encoder", "=", "TFBertEncoder", "(", "config", ",", "name", "=", "'encoder'", ")", "\n", "self", ".", "pooler", "=", "TFBertPooler", "(", "config", ",", "name", "=", "'pooler'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMainLayer.get_input_embeddings": [[469, 471], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMainLayer._resize_token_embeddings": [[472, 474], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMainLayer._prune_heads": [[475, 481], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertMainLayer.call": [[482, 551], ["isinstance", "tensorflow.cast", "modeling_tf_bert.TFBertMainLayer.embeddings", "modeling_tf_bert.TFBertMainLayer.encoder", "modeling_tf_bert.TFBertMainLayer.pooler", "isinstance", "ValueError", "tensorflow.fill", "tensorflow.fill", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "len", "len", "len", "len", "len", "len", "ValueError"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "shape", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "shape", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "tf", ".", "fill", "(", "input_shape", ",", "1", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "fill", "(", "input_shape", ",", "0", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "extended_attention_mask", "=", "tf", ".", "cast", "(", "extended_attention_mask", ",", "tf", ".", "float32", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "[", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "[", "embedding_output", ",", "extended_attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertModel.__init__": [[679, 682], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertModel.call": [[683, 686], ["modeling_tf_bert.TFBertModel.bert"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForPreTraining.__init__": [[718, 724], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "modeling_tf_bert.TFBertNSPHead", "modeling_tf_bert.TFBertMLMHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "nsp", "=", "TFBertNSPHead", "(", "config", ",", "name", "=", "'nsp___cls'", ")", "\n", "self", ".", "mlm", "=", "TFBertMLMHead", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ",", "name", "=", "'mlm___cls'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForPreTraining.get_output_embeddings": [[725, 727], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bert", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForPreTraining.call": [[728, 738], ["modeling_tf_bert.TFBertForPreTraining.bert", "modeling_tf_bert.TFBertForPreTraining.mlm", "modeling_tf_bert.TFBertForPreTraining.nsp", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", ",", "pooled_output", "=", "outputs", "[", ":", "2", "]", "\n", "prediction_scores", "=", "self", ".", "mlm", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "seq_relationship_score", "=", "self", ".", "nsp", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# prediction_scores, seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForMaskedLM.__init__": [[767, 772], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "modeling_tf_bert.TFBertMLMHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "mlm", "=", "TFBertMLMHead", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ",", "name", "=", "'mlm___cls'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForMaskedLM.get_output_embeddings": [[773, 775], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bert", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForMaskedLM.call": [[776, 785], ["modeling_tf_bert.TFBertForMaskedLM.bert", "modeling_tf_bert.TFBertForMaskedLM.mlm", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "mlm", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForNextSentencePrediction.__init__": [[814, 819], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "modeling_tf_bert.TFBertNSPHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "nsp", "=", "TFBertNSPHead", "(", "config", ",", "name", "=", "'nsp___cls'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForNextSentencePrediction.call": [[820, 829], ["modeling_tf_bert.TFBertForNextSentencePrediction.bert", "modeling_tf_bert.TFBertForNextSentencePrediction.nsp"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "seq_relationship_score", "=", "self", ".", "nsp", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForSequenceClassification.__init__": [[859, 868], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForSequenceClassification.call": [[869, 880], ["modeling_tf_bert.TFBertForSequenceClassification.bert", "modeling_tf_bert.TFBertForSequenceClassification.dropout", "modeling_tf_bert.TFBertForSequenceClassification.classifier", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForMultipleChoice.__init__": [[912, 920], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForMultipleChoice.call": [[921, 966], ["isinstance", "modeling_tf_bert.TFBertForMultipleChoice.bert", "modeling_tf_bert.TFBertForMultipleChoice.dropout", "modeling_tf_bert.TFBertForMultipleChoice.classifier", "tensorflow.reshape", "isinstance", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "num_choices", "=", "tf", ".", "shape", "(", "input_ids", ")", "[", "1", "]", "\n", "seq_length", "=", "tf", ".", "shape", "(", "input_ids", ")", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "num_choices", "=", "tf", ".", "shape", "(", "inputs_embeds", ")", "[", "1", "]", "\n", "seq_length", "=", "tf", ".", "shape", "(", "inputs_embeds", ")", "[", "2", "]", "\n", "\n", "", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "input_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "tf", ".", "reshape", "(", "attention_mask", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "flat_inputs", "=", "[", "flat_input_ids", ",", "flat_attention_mask", ",", "flat_token_type_ids", ",", "flat_position_ids", ",", "head_mask", ",", "inputs_embeds", "]", "\n", "\n", "outputs", "=", "self", ".", "bert", "(", "flat_inputs", ",", "training", "=", "training", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "training", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "(", "-", "1", ",", "num_choices", ")", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForTokenClassification.__init__": [[996, 1005], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForTokenClassification.call": [[1006, 1017], ["modeling_tf_bert.TFBertForTokenClassification.bert", "modeling_tf_bert.TFBertForTokenClassification.dropout", "modeling_tf_bert.TFBertForTokenClassification.classifier", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForQuestionAnswering.__init__": [[1049, 1057], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.TFBertForQuestionAnswering.call": [[1058, 1071], ["modeling_tf_bert.TFBertForQuestionAnswering.bert", "modeling_tf_bert.TFBertForQuestionAnswering.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "return", "outputs", "# start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.gelu": [[54, 63], ["tensorflow.math.erf", "tensorflow.math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Gaussian Error Linear Unit.\n    Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "math", ".", "erf", "(", "x", "/", "tf", ".", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.gelu_new": [[64, 76], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_bert.swish": [[77, 79], ["tensorflow.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "tf", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFMultiHeadAttention.__init__": [[101, 115], ["super().__init__", "next", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "set", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "n_heads", ",", "dim", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMultiHeadAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "TFMultiHeadAttention", ".", "NEW_ID", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'q_lin'", ")", "\n", "self", ".", "k_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'k_lin'", ")", "\n", "self", ".", "v_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'v_lin'", ")", "\n", "self", ".", "out_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'out_lin'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_dropout", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFMultiHeadAttention.prune_heads": [[116, 118], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFMultiHeadAttention.call": [[119, 183], ["modeling_tf_utils.shape_list", "modeling_tf_xlm.TFMultiHeadAttention.call.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "input", ",", "mask", ",", "kv", ",", "cache", ",", "head_mask", "=", "inputs", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "shape_list", "(", "input", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "shape_list", "(", "kv", ")", "[", "1", "]", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "", "n_heads", "=", "self", ".", "n_heads", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "n_heads", "\n", "mask_reshape", "=", "(", "bs", ",", "1", ",", "qlen", ",", "klen", ")", "if", "len", "(", "shape_list", "(", "mask", ")", ")", "==", "3", "else", "(", "bs", ",", "1", ",", "1", ",", "klen", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "x", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ")", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "tf", ".", "concat", "(", "[", "k_", ",", "k", "]", ",", "axis", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "tf", ".", "concat", "(", "[", "v_", ",", "v", "]", ",", "axis", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "scores", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (bs, n_heads, qlen, klen)", "\n", "mask", "=", "tf", ".", "reshape", "(", "mask", ",", "mask_reshape", ")", "# (bs, n_heads, qlen, klen)", "\n", "# scores.masked_fill_(mask, -float('inf'))                            # (bs, n_heads, qlen, klen)", "\n", "scores", "=", "scores", "-", "1e30", "*", "(", "1.0", "-", "mask", ")", "\n", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "-", "1", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ",", "training", "=", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "outputs", "=", "(", "self", ".", "out_lin", "(", "context", ")", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFTransformerFFN.__init__": [[187, 193], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "dim_hidden", ",", "out_dim", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransformerFFN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "lin1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim_hidden", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'lin1'", ")", "\n", "self", ".", "lin2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "out_dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'lin2'", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "if", "config", ".", "gelu_activation", "else", "tf", ".", "keras", ".", "activations", ".", "relu", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFTransformerFFN.call": [[194, 200], ["modeling_tf_xlm.TFTransformerFFN.lin1", "modeling_tf_xlm.TFTransformerFFN.act", "modeling_tf_xlm.TFTransformerFFN.lin2", "modeling_tf_xlm.TFTransformerFFN.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMMainLayer.__init__": [[203, 278], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Embedding", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.LayerNormalization", "range", "hasattr", "NotImplementedError", "tensorflow.keras.layers.Embedding", "modeling_tf_xlm.TFXLMMainLayer.attentions.append", "modeling_tf_xlm.TFXLMMainLayer.layer_norm1.append", "modeling_tf_xlm.TFXLMMainLayer.ffns.append", "modeling_tf_xlm.TFXLMMainLayer.layer_norm2.append", "config.pruned_heads.copy().items", "modeling_tf_utils.get_initializer", "modeling_tf_xlm.TFMultiHeadAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_xlm.TFTransformerFFN", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_utils.get_initializer", "config.pruned_heads.copy", "modeling_tf_xlm.TFXLMMainLayer.prune_heads", "int", "list", "int", "map"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "# encoder / decoder, output layer", "\n", "self", ".", "is_encoder", "=", "config", ".", "is_encoder", "\n", "self", ".", "is_decoder", "=", "not", "config", ".", "is_encoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently XLM can only be used as an encoder\"", ")", "\n", "# self.with_output = with_output", "\n", "", "self", ".", "causal", "=", "config", ".", "causal", "\n", "\n", "# dictionary / languages", "\n", "self", ".", "n_langs", "=", "config", ".", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "config", ".", "use_lang_emb", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "eos_index", "=", "config", ".", "eos_index", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "# self.dico = dico", "\n", "# self.id2lang = config.id2lang", "\n", "# self.lang2id = config.lang2id", "\n", "# assert len(self.dico) == self.n_words", "\n", "# assert len(self.id2lang) == len(self.lang2id) == self.n_langs", "\n", "\n", "# model parameters", "\n", "self", ".", "dim", "=", "config", ".", "emb_dim", "# 512 by default", "\n", "self", ".", "hidden_dim", "=", "self", ".", "dim", "*", "4", "# 2048 by default", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "# 8 by default", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", ",", "'transformer dim must be a multiple of n_heads'", "\n", "\n", "# embeddings", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "attention_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_dropout", ")", "\n", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "self", ".", "dim", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "embed_init_std", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "if", "config", ".", "sinusoidal_embeddings", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# create_sinusoidal_embeddings(config.max_position_embeddings, self.dim, out=self.position_embeddings.weight)", "\n", "", "if", "config", ".", "n_langs", ">", "1", "and", "config", ".", "use_lang_emb", ":", "\n", "            ", "self", ".", "lang_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "self", ".", "n_langs", ",", "\n", "self", ".", "dim", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "embed_init_std", ")", ",", "\n", "name", "=", "'lang_embeddings'", ")", "\n", "", "self", ".", "embeddings", "=", "TFSharedEmbeddings", "(", "self", ".", "n_words", ",", "self", ".", "dim", ",", "initializer_range", "=", "config", ".", "embed_init_std", ",", "name", "=", "'embeddings'", ")", "# padding_idx=self.pad_index)", "\n", "self", ".", "layer_norm_emb", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm_emb'", ")", "\n", "\n", "# transformer layers", "\n", "self", ".", "attentions", "=", "[", "]", "\n", "self", ".", "layer_norm1", "=", "[", "]", "\n", "self", ".", "ffns", "=", "[", "]", "\n", "self", ".", "layer_norm2", "=", "[", "]", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15 = []", "\n", "#     self.encoder_attn = []", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "attentions", ".", "append", "(", "TFMultiHeadAttention", "(", "self", ".", "n_heads", ",", "self", ".", "dim", ",", "config", "=", "config", ",", "name", "=", "'attentions_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "self", ".", "layer_norm1", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm1_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))", "\n", "#     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))", "\n", "self", ".", "ffns", ".", "append", "(", "TFTransformerFFN", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "dim", ",", "config", "=", "config", ",", "name", "=", "'ffns_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "self", ".", "layer_norm2", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm2_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"pruned_heads\"", ")", ":", "\n", "            ", "pruned_heads", "=", "config", ".", "pruned_heads", ".", "copy", "(", ")", ".", "items", "(", ")", "\n", "config", ".", "pruned_heads", "=", "{", "}", "\n", "for", "layer", ",", "heads", "in", "pruned_heads", ":", "\n", "                ", "if", "self", ".", "attentions", "[", "int", "(", "layer", ")", "]", ".", "n_heads", "==", "config", ".", "n_heads", ":", "\n", "                    ", "self", ".", "prune_heads", "(", "{", "int", "(", "layer", ")", ":", "list", "(", "map", "(", "int", ",", "heads", ")", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMMainLayer.get_input_embeddings": [[280, 282], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMMainLayer._resize_token_embeddings": [[283, 285], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMMainLayer._prune_heads": [[286, 292], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMMainLayer.call": [[293, 444], ["isinstance", "tensorflow.debugging.assert_equal", "modeling_tf_xlm.get_masks", "modeling_tf_xlm.TFXLMMainLayer.layer_norm_emb", "modeling_tf_xlm.TFXLMMainLayer.dropout", "range", "isinstance", "ValueError", "tensorflow.expand_dims", "tensorflow.debugging.assert_equal", "tensorflow.debugging.assert_equal", "modeling_tf_xlm.TFXLMMainLayer.embeddings", "modeling_tf_xlm.TFXLMMainLayer.position_embeddings", "modeling_tf_xlm.TFXLMMainLayer.dropout", "modeling_tf_xlm.TFXLMMainLayer.size", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reduce_sum", "tensorflow.convert_to_tensor", "modeling_tf_utils.shape_list", "tensorflow.range", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_xlm.TFXLMMainLayer.lang_embeddings", "modeling_tf_xlm.TFXLMMainLayer.embeddings", "len", "len", "len", "len", "len", "len", "len", "len", "len", "ValueError", "tensorflow.cast", "modeling_tf_utils.shape_list", "tensorflow.not_equal"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.get_masks", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "training", "=", "False", ")", ":", "# removed: src_enc=None, src_len=None", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "langs", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "langs", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "lengths", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "lengths", "\n", "cache", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "cache", "\n", "head_mask", "=", "inputs", "[", "7", "]", "if", "len", "(", "inputs", ")", ">", "7", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "8", "]", "if", "len", "(", "inputs", ")", ">", "8", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "langs", "=", "inputs", ".", "get", "(", "'langs'", ",", "langs", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "lengths", "=", "inputs", ".", "get", "(", "'lengths'", ",", "lengths", ")", "\n", "cache", "=", "inputs", ".", "get", "(", "'cache'", ",", "cache", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "bs", ",", "slen", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "bs", ",", "slen", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "lengths", "is", "None", ":", "\n", "            ", "if", "input_ids", "is", "not", "None", ":", "\n", "                ", "lengths", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "input_ids", ",", "self", ".", "pad_index", ")", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "lengths", "=", "tf", ".", "convert_to_tensor", "(", "[", "slen", "]", "*", "bs", ",", "tf", ".", "int32", ")", "\n", "# mask = input_ids != self.pad_index", "\n", "\n", "# check inputs", "\n", "# assert shape_list(lengths)[0] == bs", "\n", "", "", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "lengths", ")", "[", "0", "]", ",", "bs", ")", "\n", "# assert lengths.max().item() <= slen", "\n", "# input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0", "\n", "# assert (src_enc is None) == (src_len is None)", "\n", "# if src_enc is not None:", "\n", "#     assert self.is_decoder", "\n", "#     assert src_enc.size(0) == bs", "\n", "\n", "# generate masks", "\n", "mask", ",", "attn_mask", "=", "get_masks", "(", "slen", ",", "lengths", ",", "self", ".", "causal", ",", "padding_mask", "=", "attention_mask", ")", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]", "\n", "\n", "# position_ids", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "slen", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "# assert shape_list(position_ids) == [bs, slen]  # (slen, bs)", "\n", "            ", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "position_ids", ")", ",", "[", "bs", ",", "slen", "]", ")", "\n", "# position_ids = position_ids.transpose(0, 1)", "\n", "\n", "# langs", "\n", "", "if", "langs", "is", "not", "None", ":", "\n", "# assert shape_list(langs) == [bs, slen]  # (slen, bs)", "\n", "            ", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "langs", ")", ",", "[", "bs", ",", "slen", "]", ")", "\n", "# langs = langs.transpose(0, 1)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layers", "\n", "\n", "# do not recompute cached elements", "\n", "", "if", "cache", "is", "not", "None", "and", "input_ids", "is", "not", "None", ":", "\n", "            ", "_slen", "=", "slen", "-", "cache", "[", "'slen'", "]", "\n", "input_ids", "=", "input_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "position_ids", "=", "position_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "if", "langs", "is", "not", "None", ":", "\n", "                ", "langs", "=", "langs", "[", ":", ",", "-", "_slen", ":", "]", "\n", "", "mask", "=", "mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "\n", "# embeddings", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "\n", "", "tensor", "=", "inputs_embeds", "+", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "if", "langs", "is", "not", "None", "and", "self", ".", "use_lang_emb", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "lang_embeddings", "(", "langs", ")", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "embeddings", "(", "token_type_ids", ")", "\n", "", "tensor", "=", "self", ".", "layer_norm_emb", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "dropout", "(", "tensor", ",", "training", "=", "training", ")", "\n", "tensor", "=", "tensor", "*", "mask", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "\n", "# transformer layers", "\n", "hidden_states", "=", "(", ")", "\n", "attentions", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# self attention", "\n", "", "attn_outputs", "=", "self", ".", "attentions", "[", "i", "]", "(", "[", "tensor", ",", "attn_mask", ",", "None", ",", "cache", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "attn", "=", "attn_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", "=", "attentions", "+", "(", "attn_outputs", "[", "1", "]", ",", ")", "\n", "", "attn", "=", "self", ".", "dropout", "(", "attn", ",", "training", "=", "training", ")", "\n", "tensor", "=", "tensor", "+", "attn", "\n", "tensor", "=", "self", ".", "layer_norm1", "[", "i", "]", "(", "tensor", ")", "\n", "\n", "# encoder attention (for decoder only)", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)", "\n", "#     attn = F.dropout(attn, p=self.dropout, training=self.training)", "\n", "#     tensor = tensor + attn", "\n", "#     tensor = self.layer_norm15[i](tensor)", "\n", "\n", "# FFN", "\n", "tensor", "=", "tensor", "+", "self", ".", "ffns", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "layer_norm2", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "tensor", "*", "mask", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "\n", "# Add last hidden state", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# update cache length", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "cache", "[", "'slen'", "]", "+=", "tensor", ".", "size", "(", "1", ")", "\n", "\n", "# move back sequence length to dimension 0", "\n", "# tensor = tensor.transpose(0, 1)", "\n", "\n", "", "outputs", "=", "(", "tensor", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMPreTrainedModel.dummy_inputs": [[454, 464], ["tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "# Sometimes XLM has language embeddings so don't forget to build them as well if needed", "\n", "        ", "inputs_list", "=", "tf", ".", "constant", "(", "[", "[", "7", ",", "6", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "4", ",", "5", "]", "]", ")", "\n", "attns_list", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "config", ".", "use_lang_emb", "and", "self", ".", "config", ".", "n_langs", ">", "1", ":", "\n", "            ", "langs_list", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "langs_list", "=", "None", "\n", "", "return", "[", "inputs_list", ",", "attns_list", ",", "langs_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMModel.__init__": [[584, 587], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMModel.call": [[588, 591], ["modeling_tf_xlm.TFXLMModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMPredLayer.__init__": [[598, 607], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMPredLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "asm", "=", "config", ".", "asm", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "if", "config", ".", "asm", "is", "False", ":", "\n", "            ", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# self.proj = nn.AdaptiveLogSoftmaxWithLoss(", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMPredLayer.build": [[615, 622], ["modeling_tf_xlm.TFXLMPredLayer.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# The output weights are the same as the input embeddings, but there is an output-only bias for each token.", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_words", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFXLMPredLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMPredLayer.call": [[623, 627], ["modeling_tf_xlm.TFXLMPredLayer.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMWithLMHeadModel.__init__": [[657, 661], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer", "modeling_tf_xlm.TFXLMPredLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMWithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "pred_layer", "=", "TFXLMPredLayer", "(", "config", ",", "self", ".", "transformer", ".", "embeddings", ",", "name", "=", "'pred_layer_._proj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMWithLMHeadModel.get_output_embeddings": [[662, 664], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pred_layer", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMWithLMHeadModel.call": [[665, 673], ["modeling_tf_xlm.TFXLMWithLMHeadModel.transformer", "modeling_tf_xlm.TFXLMWithLMHeadModel.pred_layer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "outputs", "=", "self", ".", "pred_layer", "(", "output", ")", "\n", "outputs", "=", "(", "outputs", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMForSequenceClassification.__init__": [[704, 710], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer", "modeling_tf_utils.TFSequenceSummary"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "sequence_summary", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "init_std", ",", "name", "=", "'sequence_summary'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMForSequenceClassification.call": [[711, 719], ["modeling_tf_xlm.TFXLMForSequenceClassification.transformer", "modeling_tf_xlm.TFXLMForSequenceClassification.sequence_summary"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.__init__": [[751, 757], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.call": [[758, 771], ["modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.transformer", "modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.create_sinusoidal_embeddings": [[47, 54], ["numpy.array", "tensorflow.constant", "tensorflow.constant", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "tf", ".", "constant", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "tf", ".", "constant", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.gelu": [[56, 65], ["tensorflow.math.erf", "tensorflow.math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Gaussian Error Linear Unit.\n    Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "math", ".", "erf", "(", "x", "/", "tf", ".", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlm.get_masks": [[67, 95], ["tensorflow.debugging.assert_equal", "tensorflow.cast", "tensorflow.cast", "modeling_tf_utils.shape_list", "tensorflow.range", "tensorflow.math.less", "tensorflow.less_equal", "modeling_tf_utils.shape_list", "tensorflow.tile", "modeling_tf_utils.shape_list"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "get_masks", "(", "slen", ",", "lengths", ",", "causal", ",", "padding_mask", "=", "None", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Generate hidden states mask, and optionally an attention mask.\n    \"\"\"", "\n", "bs", "=", "shape_list", "(", "lengths", ")", "[", "0", "]", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "padding_mask", "\n", "", "else", ":", "\n", "# assert lengths.max().item() <= slen", "\n", "        ", "alen", "=", "tf", ".", "range", "(", "slen", ")", "\n", "mask", "=", "tf", ".", "math", ".", "less", "(", "alen", ",", "lengths", "[", ":", ",", "tf", ".", "newaxis", "]", ")", "\n", "\n", "# attention mask is the same as mask, or triangular inferior attention (causal)", "\n", "", "if", "causal", ":", "\n", "        ", "attn_mask", "=", "tf", ".", "less_equal", "(", "tf", ".", "tile", "(", "alen", "[", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "(", "bs", ",", "slen", ",", "1", ")", ")", ",", "\n", "alen", "[", "tf", ".", "newaxis", ",", ":", ",", "tf", ".", "newaxis", "]", ")", "\n", "", "else", ":", "\n", "        ", "attn_mask", "=", "mask", "\n", "\n", "# sanity check", "\n", "# assert shape_list(mask) == [bs, slen]", "\n", "", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "mask", ")", ",", "[", "bs", ",", "slen", "]", ")", "\n", "assert", "causal", "is", "False", "or", "shape_list", "(", "attn_mask", ")", "==", "[", "bs", ",", "slen", ",", "slen", "]", "\n", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "dtype", ")", "\n", "attn_mask", "=", "tf", ".", "cast", "(", "attn_mask", ",", "dtype", "=", "dtype", ")", "\n", "\n", "return", "mask", ",", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.__main__.main": [[2, 127], ["print", "len", "len", "len", "print", "sys.argv.pop", "sys.argv.pop", "sys.argv.pop", "convert_tf_checkpoint_to_pytorch", "print", "print", "convert_openai_checkpoint_to_pytorch", "len", "len", "len", "print", "convert_transfo_xl_checkpoint_to_pytorch", "print", "len", "len", "sys.argv[].lower", "len", "print", "convert_gpt2_checkpoint_to_pytorch", "print", "len", "len", "len", "print", "convert_xlnet_checkpoint_to_pytorch", "print", "len", "len", "len", "len", "print", "convert_xlm_checkpoint_to_pytorch"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "sys", "\n", "if", "(", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "6", ")", "or", "sys", ".", "argv", "[", "1", "]", "not", "in", "[", "\"bert\"", ",", "\"gpt\"", ",", "\"transfo_xl\"", ",", "\"gpt2\"", ",", "\"xlnet\"", ",", "\"xlm\"", "]", ":", "\n", "        ", "print", "(", "\n", "\"This command line utility let you convert original (author released) model checkpoint to pytorch.\\n\"", "\n", "\"It should be used as one of: \\n\"", "\n", "\">> transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT, \\n\"", "\n", "\">> transformers gpt OPENAI_GPT_CHECKPOINT_FOLDER_PATH PYTORCH_DUMP_OUTPUT [OPENAI_GPT_CONFIG], \\n\"", "\n", "\">> transformers transfo_xl TF_CHECKPOINT_OR_DATASET PYTORCH_DUMP_OUTPUT [TF_CONFIG] or \\n\"", "\n", "\">> transformers gpt2 TF_CHECKPOINT PYTORCH_DUMP_OUTPUT [GPT2_CONFIG] or \\n\"", "\n", "\">> transformers xlnet TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT [FINETUNING_TASK_NAME] or \\n\"", "\n", "\">> transformers xlm XLM_CHECKPOINT_PATH PYTORCH_DUMP_OUTPUT\"", ")", "\n", "", "else", ":", "\n", "        ", "if", "sys", ".", "argv", "[", "1", "]", "==", "\"bert\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_bert_original_tf_checkpoint_to_pytorch", "import", "convert_tf_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "!=", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CONFIG", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CHECKPOINT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "convert_tf_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"gpt\"", ":", "\n", "            ", "from", ".", "convert_openai_original_tf_checkpoint_to_pytorch", "import", "convert_openai_checkpoint_to_pytorch", "\n", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers gpt OPENAI_GPT_CHECKPOINT_FOLDER_PATH PYTORCH_DUMP_OUTPUT [OPENAI_GPT_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "OPENAI_GPT_CHECKPOINT_FOLDER_PATH", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "OPENAI_GPT_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "OPENAI_GPT_CONFIG", "=", "\"\"", "\n", "", "convert_openai_checkpoint_to_pytorch", "(", "OPENAI_GPT_CHECKPOINT_FOLDER_PATH", ",", "\n", "OPENAI_GPT_CONFIG", ",", "\n", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"transfo_xl\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_transfo_xl_original_tf_checkpoint_to_pytorch", "import", "convert_transfo_xl_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers transfo_xl TF_CHECKPOINT/TF_DATASET_FILE PYTORCH_DUMP_OUTPUT [TF_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "if", "'ckpt'", "in", "sys", ".", "argv", "[", "2", "]", ".", "lower", "(", ")", ":", "\n", "                    ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_DATASET_FILE", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "TF_DATASET_FILE", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_CHECKPOINT", "=", "\"\"", "\n", "", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "TF_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "TF_CONFIG", "=", "\"\"", "\n", "", "convert_transfo_xl_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ",", "TF_DATASET_FILE", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"gpt2\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_gpt2_original_tf_checkpoint_to_pytorch", "import", "convert_gpt2_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers gpt2 TF_CHECKPOINT PYTORCH_DUMP_OUTPUT [TF_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "TF_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "TF_CONFIG", "=", "\"\"", "\n", "", "convert_gpt2_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"xlnet\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_xlnet_original_tf_checkpoint_to_pytorch", "import", "convert_xlnet_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "5", "or", "len", "(", "sys", ".", "argv", ")", ">", "6", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers xlnet TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT [FINETUNING_TASK_NAME]`\"", ")", "\n", "", "else", ":", "\n", "                ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_CONFIG", "=", "sys", ".", "argv", "[", "3", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "4", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "6", ":", "\n", "                    ", "FINETUNING_TASK", "=", "sys", ".", "argv", "[", "5", "]", "\n", "", "else", ":", "\n", "                    ", "FINETUNING_TASK", "=", "None", "\n", "\n", "", "convert_xlnet_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "\n", "TF_CONFIG", ",", "\n", "PYTORCH_DUMP_OUTPUT", ",", "\n", "FINETUNING_TASK", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"xlm\"", ":", "\n", "            ", "from", ".", "convert_xlm_original_pytorch_checkpoint_to_pytorch", "import", "convert_xlm_checkpoint_to_pytorch", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "!=", "4", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers xlm XLM_CHECKPOINT_PATH PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "XLM_CHECKPOINT_PATH", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "\n", "convert_xlm_checkpoint_to_pytorch", "(", "XLM_CHECKPOINT_PATH", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_distilbert.DistilBertConfig.__init__": [[37, 78], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30522", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "sinusoidal_pos_embds", "=", "False", ",", "\n", "n_layers", "=", "6", ",", "\n", "n_heads", "=", "12", ",", "\n", "dim", "=", "768", ",", "\n", "hidden_dim", "=", "4", "*", "768", ",", "\n", "dropout", "=", "0.1", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "activation", "=", "'gelu'", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "tie_weights_", "=", "True", ",", "\n", "qa_dropout", "=", "0.1", ",", "\n", "seq_classif_dropout", "=", "0.2", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DistilBertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "sinusoidal_pos_embds", "=", "sinusoidal_pos_embds", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "tie_weights_", "=", "tie_weights_", "\n", "self", ".", "qa_dropout", "=", "qa_dropout", "\n", "self", ".", "seq_classif_dropout", "=", "seq_classif_dropout", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_distilbert.DistilBertConfig.hidden_size": [[79, 82], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_distilbert.DistilBertConfig.num_attention_heads": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_distilbert.DistilBertConfig.num_hidden_layers": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_transfo_xl.TransfoXLConfig.__init__": [[70, 144], ["configuration_utils.PretrainedConfig.__init__", "configuration_transfo_xl.TransfoXLConfig.cutoffs.extend", "isinstance", "isinstance", "json.loads.items", "isinstance", "io.open", "json.loads", "isinstance", "ValueError", "len", "len", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "267735", ",", "\n", "cutoffs", "=", "[", "20000", ",", "40000", ",", "200000", "]", ",", "\n", "d_model", "=", "1024", ",", "\n", "d_embed", "=", "1024", ",", "\n", "n_head", "=", "16", ",", "\n", "d_head", "=", "64", ",", "\n", "d_inner", "=", "4096", ",", "\n", "div_val", "=", "4", ",", "\n", "pre_lnorm", "=", "False", ",", "\n", "n_layer", "=", "18", ",", "\n", "tgt_len", "=", "128", ",", "\n", "ext_len", "=", "0", ",", "\n", "mem_len", "=", "1600", ",", "\n", "clamp_len", "=", "1000", ",", "\n", "same_length", "=", "True", ",", "\n", "proj_share_all_but_first", "=", "True", ",", "\n", "attn_type", "=", "0", ",", "\n", "sample_softmax", "=", "-", "1", ",", "\n", "adaptive", "=", "True", ",", "\n", "tie_weight", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "\n", "dropatt", "=", "0.0", ",", "\n", "untie_r", "=", "True", ",", "\n", "init", "=", "\"normal\"", ",", "\n", "init_range", "=", "0.01", ",", "\n", "proj_init_std", "=", "0.01", ",", "\n", "init_std", "=", "0.02", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs TransfoXLConfig.\n        \"\"\"", "\n", "super", "(", "TransfoXLConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_token", "=", "vocab_size_or_config_json_file", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", "else", "-", "1", "\n", "self", ".", "cutoffs", "=", "[", "]", "\n", "self", ".", "cutoffs", ".", "extend", "(", "cutoffs", ")", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "if", "proj_share_all_but_first", ":", "\n", "            ", "self", ".", "tie_projs", "=", "[", "False", "]", "+", "[", "True", "]", "*", "len", "(", "self", ".", "cutoffs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tie_projs", "=", "[", "False", "]", "+", "[", "False", "]", "*", "len", "(", "self", ".", "cutoffs", ")", "\n", "", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropatt", "=", "dropatt", "\n", "self", ".", "untie_r", "=", "untie_r", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "init_range", "=", "init_range", "\n", "self", ".", "proj_init_std", "=", "proj_init_std", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "not", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_transfo_xl.TransfoXLConfig.max_position_embeddings": [[146, 149], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tgt_len", "+", "self", ".", "ext_len", "+", "self", ".", "mem_len", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_transfo_xl.TransfoXLConfig.vocab_size": [[154, 157], ["None"], "methods", ["None"], ["", "@", "vocab_size", ".", "setter", "\n", "def", "vocab_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "n_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_transfo_xl.TransfoXLConfig.hidden_size": [[158, 161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_transfo_xl.TransfoXLConfig.num_attention_heads": [[162, 165], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_transfo_xl.TransfoXLConfig.num_hidden_layers": [[166, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.MultiHeadAttention.__init__": [[101, 115], ["torch.nn.Module.__init__", "next", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["def", "__init__", "(", "self", ",", "n_heads", ",", "dim", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "MultiHeadAttention", ".", "NEW_ID", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "config", ".", "attention_dropout", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "k_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "v_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "out_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.MultiHeadAttention.prune_heads": [[116, 136], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_xlm.MultiHeadAttention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "attention_head_size", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q_lin", "=", "prune_linear_layer", "(", "self", ".", "q_lin", ",", "index", ")", "\n", "self", ".", "k_lin", "=", "prune_linear_layer", "(", "self", ".", "k_lin", ",", "index", ")", "\n", "self", ".", "v_lin", "=", "prune_linear_layer", "(", "self", ".", "v_lin", ",", "index", ")", "\n", "self", ".", "out_lin", "=", "prune_linear_layer", "(", "self", ".", "out_lin", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "dim", "=", "attention_head_size", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.MultiHeadAttention.forward": [[137, 199], ["input.size", "modeling_xlm.MultiHeadAttention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ",", "kv", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "input", ".", "size", "(", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "kv", ".", "size", "(", "1", ")", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "", "n_heads", "=", "self", ".", "n_heads", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "n_heads", "\n", "mask_reshape", "=", "(", "bs", ",", "1", ",", "qlen", ",", "klen", ")", "if", "mask", ".", "dim", "(", ")", "==", "3", "else", "(", "bs", ",", "1", ",", "1", ",", "klen", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k_", ",", "k", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v_", ",", "v", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (bs, n_heads, qlen, klen)", "\n", "mask", "=", "(", "mask", "==", "0", ")", ".", "view", "(", "mask_reshape", ")", ".", "expand_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "scores", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "weights", "=", "F", ".", "softmax", "(", "scores", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "F", ".", "dropout", "(", "weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "outputs", "=", "(", "self", ".", "out_lin", "(", "context", ")", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.TransformerFFN.__init__": [[203, 209], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "dim_hidden", ",", "out_dim", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerFFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "dim_hidden", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "dim_hidden", ",", "out_dim", ")", "\n", "self", ".", "act", "=", "gelu", "if", "config", ".", "gelu_activation", "else", "F", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.TransformerFFN.forward": [[210, 216], ["modeling_xlm.TransformerFFN.lin1", "modeling_xlm.TransformerFFN.act", "modeling_xlm.TransformerFFN.lin2", "torch.nn.functional.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMPreTrainedModel.__init__": [[227, 229], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLMPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMPreTrainedModel._init_weights": [[230, 243], ["isinstance", "isinstance", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights. \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "self", ".", "config", "is", "not", "None", "and", "self", ".", "config", ".", "embed_init_std", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "config", ".", "embed_init_std", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "if", "self", ".", "config", "is", "not", "None", "and", "self", ".", "config", ".", "init_std", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "config", ".", "init_std", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0.", ")", "\n", "", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMModel.__init__": [[344, 413], ["modeling_xlm.XLMPreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.LayerNorm", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "hasattr", "modeling_xlm.XLMModel.init_weights", "NotImplementedError", "modeling_xlm.create_sinusoidal_embeddings", "torch.nn.Embedding", "modeling_xlm.XLMModel.attentions.append", "modeling_xlm.XLMModel.layer_norm1.append", "modeling_xlm.XLMModel.ffns.append", "modeling_xlm.XLMModel.layer_norm2.append", "config.pruned_heads.copy().items", "modeling_xlm.MultiHeadAttention", "torch.nn.LayerNorm", "modeling_xlm.TransformerFFN", "torch.nn.LayerNorm", "config.pruned_heads.copy", "modeling_xlm.XLMModel.prune_heads", "int", "list", "int", "map"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.create_sinusoidal_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "#, dico, is_encoder, with_output):", "\n", "        ", "super", "(", "XLMModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "# encoder / decoder, output layer", "\n", "self", ".", "is_encoder", "=", "config", ".", "is_encoder", "\n", "self", ".", "is_decoder", "=", "not", "config", ".", "is_encoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently XLM can only be used as an encoder\"", ")", "\n", "# self.with_output = with_output", "\n", "", "self", ".", "causal", "=", "config", ".", "causal", "\n", "\n", "# dictionary / languages", "\n", "self", ".", "n_langs", "=", "config", ".", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "config", ".", "use_lang_emb", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "eos_index", "=", "config", ".", "eos_index", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "# self.dico = dico", "\n", "# self.id2lang = config.id2lang", "\n", "# self.lang2id = config.lang2id", "\n", "# assert len(self.dico) == self.n_words", "\n", "# assert len(self.id2lang) == len(self.lang2id) == self.n_langs", "\n", "\n", "# model parameters", "\n", "self", ".", "dim", "=", "config", ".", "emb_dim", "# 512 by default", "\n", "self", ".", "hidden_dim", "=", "self", ".", "dim", "*", "4", "# 2048 by default", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "# 8 by default", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "self", ".", "attention_dropout", "=", "config", ".", "attention_dropout", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", ",", "'transformer dim must be a multiple of n_heads'", "\n", "\n", "# embeddings", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "self", ".", "dim", ")", "\n", "if", "config", ".", "sinusoidal_embeddings", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "config", ".", "max_position_embeddings", ",", "self", ".", "dim", ",", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "", "if", "config", ".", "n_langs", ">", "1", "and", "config", ".", "use_lang_emb", ":", "\n", "            ", "self", ".", "lang_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "n_langs", ",", "self", ".", "dim", ")", "\n", "", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "dim", ",", "padding_idx", "=", "self", ".", "pad_index", ")", "\n", "self", ".", "layer_norm_emb", "=", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "# transformer layers", "\n", "self", ".", "attentions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ffns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15 = nn.ModuleList()", "\n", "#     self.encoder_attn = nn.ModuleList()", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "attentions", ".", "append", "(", "MultiHeadAttention", "(", "self", ".", "n_heads", ",", "self", ".", "dim", ",", "config", "=", "config", ")", ")", "\n", "self", ".", "layer_norm1", ".", "append", "(", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))", "\n", "#     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))", "\n", "self", ".", "ffns", ".", "append", "(", "TransformerFFN", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "dim", ",", "config", "=", "config", ")", ")", "\n", "self", ".", "layer_norm2", ".", "append", "(", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"pruned_heads\"", ")", ":", "\n", "            ", "pruned_heads", "=", "config", ".", "pruned_heads", ".", "copy", "(", ")", ".", "items", "(", ")", "\n", "config", ".", "pruned_heads", "=", "{", "}", "\n", "for", "layer", ",", "heads", "in", "pruned_heads", ":", "\n", "                ", "if", "self", ".", "attentions", "[", "int", "(", "layer", ")", "]", ".", "n_heads", "==", "config", ".", "n_heads", ":", "\n", "                    ", "self", ".", "prune_heads", "(", "{", "int", "(", "layer", ")", ":", "list", "(", "map", "(", "int", ",", "heads", ")", ")", "}", ")", "\n", "\n", "", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMModel.get_input_embeddings": [[414, 416], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMModel.set_input_embeddings": [[417, 419], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "embeddings", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMModel._prune_heads": [[420, 427], ["heads_to_prune.items", "modeling_xlm.XLMModel.attentions[].prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "attentions", "[", "layer", "]", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMModel.forward": [[428, 554], ["modeling_xlm.get_masks", "modeling_xlm.XLMModel.layer_norm_emb", "torch.nn.functional.dropout", "mask.unsqueeze().to", "range", "input_ids.size", "torch.LongTensor.size", "torch.LongTensor.max().item", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_xlm.XLMModel.embeddings", "modeling_xlm.XLMModel.position_embeddings().expand_as", "torch.nn.functional.dropout", "mask.unsqueeze().to", "torch.nn.functional.dropout.size", "modeling_xlm.XLMModel.size", "torch.LongTensor", "position_ids.unsqueeze().expand.unsqueeze().expand.size", "langs.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "modeling_xlm.XLMModel.lang_embeddings", "modeling_xlm.XLMModel.embeddings", "mask.unsqueeze", "torch.LongTensor.max", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_xlm.XLMModel.position_embeddings", "mask.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_xlm.XLMModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.get_masks", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "# removed: src_enc=None, src_len=None", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "bs", ",", "slen", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "bs", ",", "slen", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "lengths", "is", "None", ":", "\n", "            ", "if", "input_ids", "is", "not", "None", ":", "\n", "                ", "lengths", "=", "(", "input_ids", "!=", "self", ".", "pad_index", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "slen", "]", "*", "bs", ")", "\n", "# mask = input_ids != self.pad_index", "\n", "\n", "# check inputs", "\n", "", "", "assert", "lengths", ".", "size", "(", "0", ")", "==", "bs", "\n", "assert", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "slen", "\n", "# input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0", "\n", "# assert (src_enc is None) == (src_len is None)", "\n", "# if src_enc is not None:", "\n", "#     assert self.is_decoder", "\n", "#     assert src_enc.size(0) == bs", "\n", "\n", "# generate masks", "\n", "mask", ",", "attn_mask", "=", "get_masks", "(", "slen", ",", "lengths", ",", "self", ".", "causal", ",", "padding_mask", "=", "attention_mask", ")", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]", "\n", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "# position_ids", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "slen", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "bs", ",", "slen", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "position_ids", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "# (slen, bs)", "\n", "# position_ids = position_ids.transpose(0, 1)", "\n", "\n", "# langs", "\n", "", "if", "langs", "is", "not", "None", ":", "\n", "            ", "assert", "langs", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "# (slen, bs)", "\n", "# langs = langs.transpose(0, 1)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layers", "\n", "\n", "# do not recompute cached elements", "\n", "", "if", "cache", "is", "not", "None", "and", "input_ids", "is", "not", "None", ":", "\n", "            ", "_slen", "=", "slen", "-", "cache", "[", "'slen'", "]", "\n", "input_ids", "=", "input_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "position_ids", "=", "position_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "if", "langs", "is", "not", "None", ":", "\n", "                ", "langs", "=", "langs", "[", ":", ",", "-", "_slen", ":", "]", "\n", "", "mask", "=", "mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "\n", "# embeddings", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "\n", "", "tensor", "=", "inputs_embeds", "+", "self", ".", "position_embeddings", "(", "position_ids", ")", ".", "expand_as", "(", "inputs_embeds", ")", "\n", "if", "langs", "is", "not", "None", "and", "self", ".", "use_lang_emb", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "lang_embeddings", "(", "langs", ")", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "embeddings", "(", "token_type_ids", ")", "\n", "", "tensor", "=", "self", ".", "layer_norm_emb", "(", "tensor", ")", "\n", "tensor", "=", "F", ".", "dropout", "(", "tensor", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "tensor", "*=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "\n", "# transformer layers", "\n", "hidden_states", "=", "(", ")", "\n", "attentions", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# self attention", "\n", "", "attn_outputs", "=", "self", ".", "attentions", "[", "i", "]", "(", "tensor", ",", "attn_mask", ",", "cache", "=", "cache", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "attn", "=", "attn_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", "=", "attentions", "+", "(", "attn_outputs", "[", "1", "]", ",", ")", "\n", "", "attn", "=", "F", ".", "dropout", "(", "attn", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "tensor", "=", "tensor", "+", "attn", "\n", "tensor", "=", "self", ".", "layer_norm1", "[", "i", "]", "(", "tensor", ")", "\n", "\n", "# encoder attention (for decoder only)", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)", "\n", "#     attn = F.dropout(attn, p=self.dropout, training=self.training)", "\n", "#     tensor = tensor + attn", "\n", "#     tensor = self.layer_norm15[i](tensor)", "\n", "\n", "# FFN", "\n", "tensor", "=", "tensor", "+", "self", ".", "ffns", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "layer_norm2", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "*=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "\n", "# Add last hidden state", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# update cache length", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "cache", "[", "'slen'", "]", "+=", "tensor", ".", "size", "(", "1", ")", "\n", "\n", "# move back sequence length to dimension 0", "\n", "# tensor = tensor.transpose(0, 1)", "\n", "\n", "", "outputs", "=", "(", "tensor", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMPredLayer.__init__": [[560, 576], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.AdaptiveLogSoftmaxWithLoss"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMPredLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "asm", "=", "config", ".", "asm", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "dim", "=", "config", ".", "emb_dim", "\n", "\n", "if", "config", ".", "asm", "is", "False", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "config", ".", "n_words", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "AdaptiveLogSoftmaxWithLoss", "(", "\n", "in_features", "=", "dim", ",", "\n", "n_classes", "=", "config", ".", "n_words", ",", "\n", "cutoffs", "=", "config", ".", "asm_cutoffs", ",", "\n", "div_value", "=", "config", ".", "asm_div_value", ",", "\n", "head_bias", "=", "True", ",", "# default is False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMPredLayer.forward": [[578, 596], ["modeling_xlm.XLMPredLayer.proj", "modeling_xlm.XLMPredLayer.proj.log_prob", "torch.nn.functional.cross_entropy", "modeling_xlm.XLMPredLayer.proj", "modeling_xlm.XLMPredLayer.view", "y.view"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\" Compute the loss, and optionally the scores.\n        \"\"\"", "\n", "outputs", "=", "(", ")", "\n", "if", "self", ".", "asm", "is", "False", ":", "\n", "            ", "scores", "=", "self", ".", "proj", "(", "x", ")", "\n", "outputs", "=", "(", "scores", ",", ")", "+", "outputs", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "loss", "=", "F", ".", "cross_entropy", "(", "scores", ".", "view", "(", "-", "1", ",", "self", ".", "n_words", ")", ",", "y", ".", "view", "(", "-", "1", ")", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "", "else", ":", "\n", "            ", "scores", "=", "self", ".", "proj", ".", "log_prob", "(", "x", ")", "\n", "outputs", "=", "(", "scores", ",", ")", "+", "outputs", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "_", ",", "loss", "=", "self", ".", "proj", "(", "x", ",", "y", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMWithLMHeadModel.__init__": [[632, 638], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_xlm.XLMPredLayer", "modeling_xlm.XLMWithLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMWithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "pred_layer", "=", "XLMPredLayer", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMWithLMHeadModel.get_output_embeddings": [[639, 641], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pred_layer", ".", "proj", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMWithLMHeadModel.forward": [[642, 659], ["modeling_xlm.XLMWithLMHeadModel.transformer", "modeling_xlm.XLMWithLMHeadModel.pred_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "outputs", "=", "self", ".", "pred_layer", "(", "output", ",", "labels", ")", "\n", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMForSequenceClassification.__init__": [[695, 703], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_utils.SequenceSummary", "modeling_xlm.XLMForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMForSequenceClassification.forward": [[704, 732], ["modeling_xlm.XLMForSequenceClassification.transformer", "modeling_xlm.XLMForSequenceClassification.sequence_summary", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlm.XLMForSequenceClassification.view", "labels.view", "modeling_xlm.XLMForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMForQuestionAnsweringSimple.__init__": [[780, 787], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "torch.nn.Linear", "modeling_xlm.XLMForQuestionAnsweringSimple.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMForQuestionAnsweringSimple.forward": [[788, 828], ["modeling_xlm.XLMForQuestionAnsweringSimple.transformer", "modeling_xlm.XLMForQuestionAnsweringSimple.qa_outputs", "modeling_xlm.XLMForQuestionAnsweringSimple.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMForQuestionAnswering.__init__": [[876, 883], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_utils.SQuADHead", "modeling_xlm.XLMForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "SQuADHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.XLMForQuestionAnswering.forward": [[884, 905], ["modeling_xlm.XLMForQuestionAnswering.transformer", "modeling_xlm.XLMForQuestionAnswering.qa_outputs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "is_impossible", "=", "None", ",", "cls_index", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "outputs", "=", "self", ".", "qa_outputs", "(", "output", ",", "start_positions", "=", "start_positions", ",", "end_positions", "=", "end_positions", ",", "\n", "cls_index", "=", "cls_index", ",", "is_impossible", "=", "is_impossible", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.create_sinusoidal_embeddings": [[50, 59], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.gelu": [[61, 70], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    GELU activation\n    https://arxiv.org/abs/1606.08415\n    https://github.com/huggingface/pytorch-openai-transformer-lm/blob/master/model_pytorch.py#L14\n    https://github.com/huggingface/transformers/blob/master/modeling.py\n    \"\"\"", "\n", "# return 0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))", "\n", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_xlm.get_masks": [[72, 95], ["torch.arange", "lengths.size", "mask.size", "lengths.max().item", "alen[].repeat", "attn_mask.size", "lengths.max"], "function", ["None"], ["", "def", "get_masks", "(", "slen", ",", "lengths", ",", "causal", ",", "padding_mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate hidden states mask, and optionally an attention mask.\n    \"\"\"", "\n", "alen", "=", "torch", ".", "arange", "(", "slen", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "lengths", ".", "device", ")", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "padding_mask", "\n", "", "else", ":", "\n", "        ", "assert", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "slen", "\n", "mask", "=", "alen", "<", "lengths", "[", ":", ",", "None", "]", "\n", "\n", "# attention mask is the same as mask, or triangular inferior attention (causal)", "\n", "", "bs", "=", "lengths", ".", "size", "(", "0", ")", "\n", "if", "causal", ":", "\n", "        ", "attn_mask", "=", "alen", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "bs", ",", "slen", ",", "1", ")", "<=", "alen", "[", "None", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "        ", "attn_mask", "=", "mask", "\n", "\n", "# sanity check", "\n", "", "assert", "mask", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "\n", "assert", "causal", "is", "False", "or", "attn_mask", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ",", "slen", ")", "\n", "\n", "return", "mask", ",", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch": [[32, 67], ["torch.load", "state_dict.items", "dict", "dict", "print", "torch.save", "print", "print", "io.open", "f.write", "io.open", "f.write", "dict.items", "dict.items", "json.dumps", "json.dumps", "isinstance", "s.replace", "s.find"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "convert_xlm_checkpoint_to_pytorch", "(", "xlm_checkpoint_path", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Load checkpoint", "\n", "    ", "chkpt", "=", "torch", ".", "load", "(", "xlm_checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "state_dict", "=", "chkpt", "[", "'model'", "]", "\n", "\n", "# We have the base model one level deeper than the original XLM repository", "\n", "two_levels_state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'pred_layer'", "in", "k", ":", "\n", "            ", "two_levels_state_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "two_levels_state_dict", "[", "'transformer.'", "+", "k", "]", "=", "v", "\n", "\n", "", "", "config", "=", "chkpt", "[", "'params'", "]", "\n", "config", "=", "dict", "(", "(", "n", ",", "v", ")", "for", "n", ",", "v", "in", "config", ".", "items", "(", ")", "if", "not", "isinstance", "(", "v", ",", "(", "torch", ".", "FloatTensor", ",", "numpy", ".", "ndarray", ")", ")", ")", "\n", "\n", "vocab", "=", "chkpt", "[", "'dico_word2id'", "]", "\n", "vocab", "=", "dict", "(", "(", "s", "+", "'</w>'", "if", "s", ".", "find", "(", "'@@'", ")", "==", "-", "1", "and", "i", ">", "13", "else", "s", ".", "replace", "(", "'@@'", ",", "''", ")", ",", "i", ")", "for", "s", ",", "i", "in", "vocab", ".", "items", "(", ")", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "pytorch_vocab_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", "\n", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "two_levels_state_dict", ",", "pytorch_weights_dump_path", ")", "\n", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "config", ",", "indent", "=", "2", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "print", "(", "\"Save vocab file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_vocab_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vocab", ",", "indent", "=", "2", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.__init__": [[51, 61], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "finetuning_task", "=", "kwargs", ".", "pop", "(", "'finetuning_task'", ",", "None", ")", "\n", "self", ".", "num_labels", "=", "kwargs", ".", "pop", "(", "'num_labels'", ",", "2", ")", "\n", "self", ".", "output_attentions", "=", "kwargs", ".", "pop", "(", "'output_attentions'", ",", "False", ")", "\n", "self", ".", "output_hidden_states", "=", "kwargs", ".", "pop", "(", "'output_hidden_states'", ",", "False", ")", "\n", "self", ".", "output_past", "=", "kwargs", ".", "pop", "(", "'output_past'", ",", "True", ")", "# Not used by all models", "\n", "self", ".", "torchscript", "=", "kwargs", ".", "pop", "(", "'torchscript'", ",", "False", ")", "# Only used by PyTorch models", "\n", "self", ".", "use_bfloat16", "=", "kwargs", ".", "pop", "(", "'use_bfloat16'", ",", "False", ")", "\n", "self", ".", "pruned_heads", "=", "kwargs", ".", "pop", "(", "'pruned_heads'", ",", "{", "}", ")", "\n", "self", ".", "is_decoder", "=", "kwargs", ".", "pop", "(", "'is_decoder'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.save_pretrained": [[62, 73], ["os.path.isdir", "os.path.join", "configuration_utils.PretrainedConfig.to_json_file", "logger.info"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_file"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a configuration object to the directory `save_directory`, so that it\n            can be re-loaded using the :func:`~transformers.PretrainedConfig.from_pretrained` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "CONFIG_NAME", ")", "\n", "\n", "self", ".", "to_json_file", "(", "output_config_file", ")", "\n", "logger", ".", "info", "(", "\"Configuration saved in {}\"", ".", "format", "(", "output_config_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.from_pretrained": [[74, 174], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls.from_json_file", "hasattr", "kwargs.items", "logger.info", "os.path.isdir", "file_utils.cached_path", "logger.info", "logger.info", "dict", "hasattr", "kwargs.pop", "str", "os.path.join", "EnvironmentError", "setattr", "to_remove.append", "int", "cls.from_json_file.pruned_heads.items", "cls.pretrained_config_archive_map.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a :class:`~transformers.PretrainedConfig` (or a derived class) from a pre-trained model configuration.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PretrainedConfig` so let's show the examples on a\n            # derived class: BertConfig\n            config = BertConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = BertConfig.from_pretrained('./test/saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = BertConfig.from_pretrained('./test/saved_model/my_configuration.json')\n            config = BertConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = BertConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "return_unused_kwargs", "=", "kwargs", ".", "pop", "(", "'return_unused_kwargs'", ",", "False", ")", "\n", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "            ", "config_file", "=", "cls", ".", "pretrained_config_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "config_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CONFIG_NAME", ")", "\n", "", "else", ":", "\n", "            ", "config_file", "=", "pretrained_model_name_or_path", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_config_file", "=", "cached_path", "(", "config_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "                ", "msg", "=", "\"Couldn't reach server at '{}' to download pretrained model configuration file.\"", ".", "format", "(", "\n", "config_file", ")", "\n", "", "else", ":", "\n", "                ", "msg", "=", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to a configuration file named {} or \"", "\"a directory containing such a file but couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_config_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "config_file", ",", "CONFIG_NAME", ")", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "if", "resolved_config_file", "==", "config_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {}\"", ".", "format", "(", "config_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {} from cache at {}\"", ".", "format", "(", "\n", "config_file", ",", "resolved_config_file", ")", ")", "\n", "\n", "# Load config", "\n", "", "config", "=", "cls", ".", "from_json_file", "(", "resolved_config_file", ")", "\n", "\n", "if", "hasattr", "(", "config", ",", "'pruned_heads'", ")", ":", "\n", "            ", "config", ".", "pruned_heads", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "value", ")", "for", "key", ",", "value", "in", "config", ".", "pruned_heads", ".", "items", "(", ")", ")", "\n", "\n", "# Update config with kwargs if needed", "\n", "", "to_remove", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "key", ")", ":", "\n", "                ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Model config %s\"", ",", "str", "(", "config", ")", ")", "\n", "if", "return_unused_kwargs", ":", "\n", "            ", "return", "config", ",", "kwargs", "\n", "", "else", ":", "\n", "            ", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.from_dict": [[175, 182], ["cls", "json_object.items", "setattr"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `Config` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "cls", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.from_json_file": [[183, 189], ["cls.from_dict", "io.open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_dict", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.__eq__": [[190, 192], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "==", "other", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.__repr__": [[193, 195], ["str", "configuration_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.to_dict": [[196, 200], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.to_json_string": [[201, 204], ["json.dumps", "configuration_utils.PretrainedConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_utils.PretrainedConfig.to_json_file": [[205, 209], ["io.open", "writer.write", "configuration_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.__init__": [[84, 97], ["super().__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "d_model_size", "=", "d_model_size", "\n", "\n", "self", ".", "depth", "=", "int", "(", "d_model_size", "/", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "Wq", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "self", ".", "Wk", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "self", ".", "Wv", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "\n", "self", ".", "dense", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads": [[98, 101], ["x.reshape.reshape.reshape", "x.reshape.reshape.permute"], "methods", ["None"], ["", "def", "split_into_heads", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", "\n", "return", "x", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.forward": [[102, 128], ["modeling_ctrl.MultiHeadAttention.Wq", "modeling_ctrl.MultiHeadAttention.Wk", "modeling_ctrl.MultiHeadAttention.Wv", "modeling_ctrl.MultiHeadAttention.split_into_heads", "modeling_ctrl.MultiHeadAttention.split_into_heads", "modeling_ctrl.MultiHeadAttention.split_into_heads", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "modeling_ctrl.scaled_dot_product_attention", "output[].permute", "output[].permute.reshape", "modeling_ctrl.MultiHeadAttention.dense", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.scaled_dot_product_attention"], ["", "def", "forward", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "q", ".", "shape", "[", "0", "]", "\n", "\n", "q", "=", "self", ".", "Wq", "(", "q", ")", "\n", "k", "=", "self", ".", "Wk", "(", "k", ")", "\n", "v", "=", "self", ".", "Wv", "(", "v", ")", "\n", "\n", "q", "=", "self", ".", "split_into_heads", "(", "q", ",", "batch_size", ")", "\n", "k", "=", "self", ".", "split_into_heads", "(", "k", ",", "batch_size", ")", "\n", "v", "=", "self", ".", "split_into_heads", "(", "v", ",", "batch_size", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ",", "layer_past", "[", "1", "]", "\n", "k", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "k", ")", ",", "dim", "=", "-", "2", ")", "\n", "v", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "v", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "k", ",", "v", ")", ")", "\n", "\n", "output", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", ",", "head_mask", ")", "\n", "scaled_attention", "=", "output", "[", "0", "]", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "attn", "=", "output", "[", "1", "]", "\n", "original_size_attention", "=", "scaled_attention", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model_size", ")", "\n", "output", "=", "self", ".", "dense", "(", "original_size_attention", ")", "\n", "\n", "outputs", "=", "(", "output", ",", "present", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.EncoderLayer.__init__": [[138, 149], ["super().__init__", "modeling_ctrl.MultiHeadAttention", "modeling_ctrl.point_wise_feed_forward_network", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "dff", ",", "rate", "=", "0.1", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multi_head_attention", "=", "MultiHeadAttention", "(", "d_model_size", ",", "num_heads", ",", "output_attentions", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ")", "\n", "\n", "self", ".", "layernorm1", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "d_model_size", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "layernorm2", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "d_model_size", ",", "eps", "=", "1e-6", ")", "\n", "\n", "self", ".", "dropout1", "=", "torch", ".", "nn", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "torch", ".", "nn", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.EncoderLayer.forward": [[150, 167], ["modeling_ctrl.EncoderLayer.layernorm1", "modeling_ctrl.EncoderLayer.multi_head_attention", "modeling_ctrl.EncoderLayer.dropout1", "modeling_ctrl.EncoderLayer.layernorm2", "modeling_ctrl.EncoderLayer.ffn", "modeling_ctrl.EncoderLayer.dropout2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "normed", "=", "self", ".", "layernorm1", "(", "x", ")", "\n", "attn_outputs", "=", "self", ".", "multi_head_attention", "(", "normed", ",", "normed", ",", "normed", ",", "mask", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "attn_output", "=", "attn_outputs", "[", "0", "]", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ")", "\n", "out1", "=", "x", "+", "attn_output", "\n", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", ")", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out2", ")", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ")", "\n", "out2", "=", "out1", "+", "ffn_output", "\n", "\n", "outputs", "=", "(", "out2", ",", ")", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLPreTrainedModel._init_weights": [[177, 189], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLModel.__init__": [[275, 297], ["modeling_utils.PreTrainedModel.__init__", "modeling_ctrl.positional_encoding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "modeling_ctrl.CTRLModel.init_weights", "modeling_ctrl.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.positional_encoding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CTRLModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "d_model_size", "=", "config", ".", "n_embd", "\n", "self", ".", "num_layers", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "pos_encoding", "=", "positional_encoding", "(", "config", ".", "n_positions", ",", "self", ".", "d_model_size", ",", "torch", ".", "float", ")", "\n", "\n", "self", ".", "w", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "EncoderLayer", "(", "config", ".", "n_embd", ",", "\n", "config", ".", "n_head", ",", "\n", "config", ".", "dff", ",", "\n", "config", ".", "resid_pdrop", ",", "\n", "config", ".", "output_attentions", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "layernorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLModel.get_input_embeddings": [[298, 300], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLModel.set_input_embeddings": [[301, 303], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "w", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLModel._prune_heads": [[304, 310], ["heads_to_prune.items", "modeling_ctrl.CTRLModel.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n                heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLModel.forward": [[311, 421], ["position_ids.unsqueeze().view.unsqueeze().view.view", "torch.triu().to", "torch.triu().to", "torch.triu().to", "torch.triu().to", "numpy.sqrt", "modeling_ctrl.CTRLModel.pos_encoding[].to", "modeling_ctrl.CTRLModel.dropout", "enumerate", "modeling_ctrl.CTRLModel.layernorm", "hidden_states.view.view.view", "ValueError", "[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "token_type_ids.view.view.view", "modeling_ctrl.CTRLModel.w", "numpy.sqrt", "modeling_ctrl.CTRLModel.w", "zip", "h", "tuple", "input_ids.view.view.size", "input_ids.view.view.view", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "modeling_ctrl.CTRLModel.size", "tuple.append", "ValueError", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "t.view", "modeling_ctrl.CTRLModel.size", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "hidden_states.view.view.view", "modeling_ctrl.CTRLModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_ctrl.CTRLModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "past", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "w", "(", "token_type_ids", ")", "\n", "token_type_embeds", "*=", "np", ".", "sqrt", "(", "self", ".", "d_model_size", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "w", "(", "input_ids", ")", "\n", "# inputs_embeds = embedded.unsqueeze(0) if len(input_ids.shape)<2 else embedded", "\n", "", "seq_len", "=", "input_shape", "[", "-", "1", "]", "\n", "mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "seq_len", ",", "seq_len", ")", ",", "1", ")", ".", "to", "(", "inputs_embeds", ".", "device", ")", "\n", "\n", "inputs_embeds", "*=", "np", ".", "sqrt", "(", "self", ".", "d_model_size", ")", "\n", "\n", "pos_embeds", "=", "self", ".", "pos_encoding", "[", "position_ids", ",", ":", "]", ".", "to", "(", "inputs_embeds", ".", "device", ")", "\n", "\n", "hidden_states", "=", "inputs_embeds", "+", "pos_embeds", "+", "token_type_embeds", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "inputs_embeds", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "presents", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "for", "i", ",", "(", "h", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "", "outputs", "=", "h", "(", "hidden_states", ",", "\n", "mask", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_past", ":", "\n", "                ", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "layernorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLLMHeadModel.__init__": [[465, 471], ["modeling_utils.PreTrainedModel.__init__", "modeling_ctrl.CTRLModel", "torch.Linear", "torch.Linear", "modeling_ctrl.CTRLLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CTRLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "CTRLModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLLMHeadModel.get_output_embeddings": [[472, 474], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.CTRLLMHeadModel.forward": [[475, 502], ["modeling_ctrl.CTRLLMHeadModel.transformer", "modeling_ctrl.CTRLLMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "past", "=", "past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.angle_defn": [[42, 45], ["torch.pow", "torch.pow"], "function", ["None"], ["def", "angle_defn", "(", "pos", ",", "i", ",", "d_model_size", ")", ":", "\n", "    ", "angle_rates", "=", "1", "/", "torch", ".", "pow", "(", "10000", ",", "(", "2", "*", "(", "i", "//", "2", ")", ")", "/", "d_model_size", ")", "\n", "return", "pos", "*", "angle_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.positional_encoding": [[46, 57], ["modeling_ctrl.angle_defn", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.float", "torch.float"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.angle_defn"], ["", "def", "positional_encoding", "(", "position", ",", "d_model_size", ",", "dtype", ")", ":", "\n", "# create the sinusoidal pattern for the positional encoding", "\n", "    ", "angle_rads", "=", "(", "angle_defn", "(", "torch", ".", "arange", "(", "position", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "arange", "(", "d_model_size", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "d_model_size", ")", ")", "\n", "\n", "sines", "=", "torch", ".", "sin", "(", "angle_rads", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "cosines", "=", "torch", ".", "cos", "(", "angle_rads", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "pos_encoding", "=", "torch", ".", "cat", "(", "[", "sines", ",", "cosines", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "pos_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.scaled_dot_product_attention": [[58, 81], ["torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "k.permute", "numpy.sqrt"], "function", ["None"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# calculate attention", "\n", "    ", "matmul_qk", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n", "dk", "=", "k", ".", "shape", "[", "-", "1", "]", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "np", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e4", ")", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "        ", "scaled_attention_logits", "=", "scaled_attention_logits", "+", "attention_mask", "\n", "\n", "", "attention_weights", "=", "torch", ".", "softmax", "(", "scaled_attention_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "        ", "attention_weights", "=", "attention_weights", "*", "head_mask", "\n", "\n", "", "output", "=", "torch", ".", "matmul", "(", "attention_weights", ",", "v", ")", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_ctrl.point_wise_feed_forward_network": [[131, 135], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear"], "function", ["None"], ["", "", "def", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "dff", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "dff", ",", "d_model_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.__init__": [[63, 80], ["super().__init__", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetRelativeAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "if", "config", ".", "d_model", "%", "config", ".", "n_head", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "d_model", ",", "config", ".", "n_head", ")", ")", "\n", "\n", "", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "scale", "=", "1", "/", "(", "config", ".", "d_head", "**", "0.5", ")", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.build": [[81, 111], ["modeling_tf_utils.get_initializer", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", "\n", "self", ".", "q", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'q'", ")", "\n", "self", ".", "k", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'k'", ")", "\n", "self", ".", "v", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'v'", ")", "\n", "self", ".", "o", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'o'", ")", "\n", "self", ".", "r", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r'", ")", "\n", "self", ".", "r_r_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r_r_bias'", ")", "\n", "self", ".", "r_s_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r_s_bias'", ")", "\n", "self", ".", "r_w_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r_w_bias'", ")", "\n", "self", ".", "seg_embed", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "2", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'seg_embed'", ")", "\n", "super", "(", "TFXLNetRelativeAttention", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.prune_heads": [[112, 114], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift": [[115, 127], ["modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "@", "staticmethod", "\n", "def", "rel_shift", "(", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"perform relative shift to form the relative attention score.\"\"\"", "\n", "x_size", "=", "shape_list", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "x_size", "[", "1", "]", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", ")", "\n", "x", "=", "x", "[", "1", ":", ",", "...", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", "-", "1", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", ")", "\n", "x", "=", "x", "[", ":", ",", "0", ":", "klen", ",", ":", ",", ":", "]", "\n", "# x = torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core": [[128, 172], ["tensorflow.einsum", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift", "tensorflow.nn.softmax", "modeling_tf_xlnet.TFXLNetRelativeAttention.dropout", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift"], ["", "def", "rel_attn_core", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Core relative positional attention operations.\"\"\"", "\n", "\n", "q_head", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "# content based attention score", "\n", "ac", "=", "tf", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "q_head", "+", "self", ".", "r_w_bias", ",", "k_head_h", ")", "\n", "\n", "# position based attention score", "\n", "bd", "=", "tf", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "q_head", "+", "self", ".", "r_r_bias", ",", "k_head_r", ")", "\n", "bd", "=", "self", ".", "rel_shift", "(", "bd", ",", "klen", "=", "ac", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# segment based attention score", "\n", "if", "seg_mat", "is", "None", ":", "\n", "            ", "ef", "=", "0", "\n", "", "else", ":", "\n", "            ", "ef", "=", "tf", ".", "einsum", "(", "'ibnd,snd->ibns'", ",", "q_head", "+", "self", ".", "r_s_bias", ",", "self", ".", "seg_embed", ")", "\n", "ef", "=", "tf", ".", "einsum", "(", "'ijbs,ibns->ijbn'", ",", "seg_mat", ",", "ef", ")", "\n", "\n", "# merge attention scores and perform masking", "\n", "", "attn_score", "=", "(", "ac", "+", "bd", "+", "ef", ")", "*", "self", ".", "scale", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "# attn_score = attn_score * (1 - attn_mask) - 1e30 * attn_mask", "\n", "            ", "if", "attn_mask", ".", "dtype", "==", "tf", ".", "float16", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "65500", "*", "attn_mask", "\n", "", "else", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "1e30", "*", "attn_mask", "\n", "\n", "# attention probability", "\n", "", "", "attn_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "attn_score", ",", "axis", "=", "1", ")", "\n", "\n", "attn_prob", "=", "self", ".", "dropout", "(", "attn_prob", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "# attention output", "\n", "", "attn_vec", "=", "tf", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "attn_prob", ",", "v_head_h", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "attn_vec", ",", "attn_prob", "\n", "\n", "", "return", "attn_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention": [[173, 187], ["tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.dropout", "modeling_tf_xlnet.TFXLNetRelativeAttention.layer_norm"], "methods", ["None"], ["", "def", "post_attention", "(", "self", ",", "inputs", ",", "residual", "=", "True", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Post-attention processing.\"\"\"", "\n", "# post-attention projection (back to `d_model`)", "\n", "h", ",", "attn_vec", "=", "inputs", "\n", "\n", "attn_out", "=", "tf", ".", "einsum", "(", "'ibnd,hnd->ibh'", ",", "attn_vec", ",", "self", ".", "o", ")", "\n", "\n", "attn_out", "=", "self", ".", "dropout", "(", "attn_out", ",", "training", "=", "training", ")", "\n", "\n", "if", "residual", ":", "\n", "            ", "attn_out", "=", "attn_out", "+", "h", "\n", "", "output", "=", "self", ".", "layer_norm", "(", "attn_out", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.call": [[188, 284], ["tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "tensorflow.concat", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "(", "h", ",", "g", ",", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", ",", "target_mapping", ",", "head_mask", ")", "=", "inputs", "\n", "\n", "if", "g", "is", "not", "None", ":", "\n", "###### Two-stream attention with relative positional encoding.", "\n", "# content based attention score", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "shape", ".", "ndims", ">", "1", ":", "\n", "                ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", ",", "h", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content-based key head", "\n", "", "k_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "\n", "# content-based value head", "\n", "v_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# position-based key head", "\n", "k_head_r", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "##### h-stream", "\n", "# content-stream query head", "\n", "q_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec_h", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_h", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec_h", ",", "attn_prob_h", "=", "attn_vec_h", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "[", "h", ",", "attn_vec_h", "]", ",", "training", "=", "training", ")", "\n", "\n", "##### g-stream", "\n", "# query-stream query head", "\n", "q_head_g", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "g", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "                ", "q_head_g", "=", "tf", ".", "einsum", "(", "'mbnd,mlb->lbnd'", ",", "q_head_g", ",", "target_mapping", ")", "\n", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_g", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "", "attn_vec_g", "=", "tf", ".", "einsum", "(", "'lbnd,mlb->mbnd'", ",", "attn_vec_g", ",", "target_mapping", ")", "\n", "", "else", ":", "\n", "                ", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_g", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "# post processing", "\n", "", "", "output_g", "=", "self", ".", "post_attention", "(", "[", "g", ",", "attn_vec_g", "]", ",", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_prob", "=", "attn_prob_h", ",", "attn_prob_g", "\n", "\n", "", "", "else", ":", "\n", "###### Multi-head attention with relative positional encoding", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "shape", ".", "ndims", ">", "1", ":", "\n", "                ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", ",", "h", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content heads", "\n", "", "q_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "k_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "v_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# positional heads", "\n", "k_head_r", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_h", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec", ",", "attn_prob", "=", "attn_vec", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "[", "h", ",", "attn_vec", "]", ",", "training", "=", "training", ")", "\n", "output_g", "=", "None", "\n", "\n", "", "outputs", "=", "(", "output_h", ",", "output_g", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn_prob", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetFeedForward.__init__": [[286, 301], ["super().__init__", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "isinstance", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetFeedForward", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "layer_1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "d_inner", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'layer_1'", ")", "\n", "self", ".", "layer_2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "d_model", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'layer_2'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "if", "isinstance", "(", "config", ".", "ff_activation", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "ff_activation", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation_function", "=", "ACT2FN", "[", "config", ".", "ff_activation", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "config", ".", "ff_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetFeedForward.call": [[302, 311], ["modeling_tf_xlnet.TFXLNetFeedForward.layer_1", "modeling_tf_xlnet.TFXLNetFeedForward.activation_function", "modeling_tf_xlnet.TFXLNetFeedForward.dropout", "modeling_tf_xlnet.TFXLNetFeedForward.layer_2", "modeling_tf_xlnet.TFXLNetFeedForward.dropout", "modeling_tf_xlnet.TFXLNetFeedForward.layer_norm"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "inp", ",", "training", "=", "False", ")", ":", "\n", "        ", "output", "=", "inp", "\n", "output", "=", "self", ".", "layer_1", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "output", "=", "self", ".", "layer_2", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "inp", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLayer.__init__": [[313, 318], ["super().__init__", "modeling_tf_xlnet.TFXLNetRelativeAttention", "modeling_tf_xlnet.TFXLNetFeedForward", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "rel_attn", "=", "TFXLNetRelativeAttention", "(", "config", ",", "name", "=", "'rel_attn'", ")", "\n", "self", ".", "ff", "=", "TFXLNetFeedForward", "(", "config", ",", "name", "=", "'ff'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLayer.call": [[319, 329], ["modeling_tf_xlnet.TFXLNetLayer.rel_attn", "modeling_tf_xlnet.TFXLNetLayer.ff", "modeling_tf_xlnet.TFXLNetLayer.ff"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "rel_attn", "(", "inputs", ",", "training", "=", "training", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "output_g", "is", "not", "None", ":", "\n", "            ", "output_g", "=", "self", ".", "ff", "(", "output_g", ",", "training", "=", "training", ")", "\n", "", "output_h", "=", "self", ".", "ff", "(", "output_h", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "(", "output_h", ",", "output_g", ")", "+", "outputs", "[", "2", ":", "]", "# Add again attentions if there are there", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLMHead.__init__": [[332, 338], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLMHead.build": [[339, 345], ["modeling_tf_xlnet.TFXLNetLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFXLNetLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLMHead.call": [[346, 350], ["modeling_tf_xlnet.TFXLNetLMHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.__init__": [[353, 373], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Dropout", "modeling_tf_xlnet.TFXLNetLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "reuse_len", "=", "config", ".", "reuse_len", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "bi_data", "=", "config", ".", "bi_data", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "self", ".", "use_bfloat16", "=", "config", ".", "use_bfloat16", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "\n", "self", ".", "word_embedding", "=", "TFSharedEmbeddings", "(", "config", ".", "n_token", ",", "config", ".", "d_model", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'word_embedding'", ")", "\n", "self", ".", "layer", "=", "[", "TFXLNetLayer", "(", "config", ",", "name", "=", "'layer_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.get_input_embeddings": [[374, 376], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.build": [[377, 382], ["modeling_tf_utils.get_initializer", "modeling_tf_xlnet.TFXLNetMainLayer.add_weight"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", "\n", "self", ".", "mask_emb", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "1", ",", "1", ",", "self", ".", "d_model", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'mask_emb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer._resize_token_embeddings": [[383, 385], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer._prune_heads": [[386, 388], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.create_mask": [[389, 417], ["tensorflow.ones", "tensorflow.matrix_band_part", "tensorflow.matrix_band_part", "tensorflow.zeros", "tensorflow.concat", "tensorflow.matrix_band_part", "tensorflow.concat"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "qlen", ",", "mlen", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "\"\"\"\n        Creates causal attention mask. Float mask where 1.0 indicates masked, 0.0 indicates not-masked.\n\n        Args:\n            qlen: TODO Lysandre didn't fill\n            mlen: TODO Lysandre didn't fill\n\n        ::\n\n                  same_length=False:      same_length=True:\n                  <mlen > <  qlen >       <mlen > <  qlen >\n               ^ [0 0 0 0 0 1 1 1 1]     [0 0 0 0 0 1 1 1 1]\n                 [0 0 0 0 0 0 1 1 1]     [1 0 0 0 0 0 1 1 1]\n            qlen [0 0 0 0 0 0 0 1 1]     [1 1 0 0 0 0 0 1 1]\n                 [0 0 0 0 0 0 0 0 1]     [1 1 1 0 0 0 0 0 1]\n               v [0 0 0 0 0 0 0 0 0]     [1 1 1 1 0 0 0 0 0]\n\n        \"\"\"", "\n", "attn_mask", "=", "tf", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ",", "dtype", "=", "dtype", ")", "\n", "mask_u", "=", "tf", ".", "matrix_band_part", "(", "attn_mask", ",", "0", ",", "-", "1", ")", "\n", "mask_dia", "=", "tf", ".", "matrix_band_part", "(", "attn_mask", ",", "0", ",", "0", ")", "\n", "attn_mask_pad", "=", "tf", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ",", "dtype", "=", "dtype", ")", "\n", "ret", "=", "tf", ".", "concat", "(", "[", "attn_mask_pad", ",", "mask_u", "-", "mask_dia", "]", ",", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_l", "=", "tf", ".", "matrix_band_part", "(", "attn_mask", ",", "-", "1", ",", "0", ")", "\n", "ret", "=", "tf", ".", "concat", "(", "[", "ret", "[", ":", ",", ":", "qlen", "]", "+", "mask_l", "-", "mask_dia", ",", "ret", "[", ":", ",", "qlen", ":", "]", "]", ",", "1", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem": [[418, 429], ["tensorflow.stop_gradient", "tensorflow.concat"], "methods", ["None"], ["", "def", "cache_mem", "(", "self", ",", "curr_out", ",", "prev_mem", ")", ":", "\n", "        ", "\"\"\"cache hidden states into memory.\"\"\"", "\n", "if", "self", ".", "reuse_len", "is", "not", "None", "and", "self", ".", "reuse_len", ">", "0", ":", "\n", "            ", "curr_out", "=", "curr_out", "[", ":", "self", ".", "reuse_len", "]", "\n", "\n", "", "if", "prev_mem", "is", "None", ":", "\n", "            ", "new_mem", "=", "curr_out", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "", "else", ":", "\n", "            ", "new_mem", "=", "tf", ".", "concat", "(", "[", "prev_mem", ",", "curr_out", "]", ",", "0", ")", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "\n", "", "return", "tf", ".", "stop_gradient", "(", "new_mem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding": [[430, 440], ["tensorflow.einsum", "tensorflow.concat", "tensorflow.tile", "tensorflow.sin", "tensorflow.cos"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile"], ["", "@", "staticmethod", "\n", "def", "positional_embedding", "(", "pos_seq", ",", "inv_freq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "tf", ".", "einsum", "(", "'i,d->id'", ",", "pos_seq", ",", "inv_freq", ")", "\n", "pos_emb", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "sinusoid_inp", ")", ",", "tf", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "pos_emb", "=", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "pos_emb", "=", "tf", ".", "tile", "(", "pos_emb", ",", "[", "1", ",", "bsz", ",", "1", "]", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding": [[441, 488], ["tensorflow.range", "tensorflow.cast", "tensorflow.range", "tensorflow.range", "tensorflow.concat", "tensorflow.range", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "ValueError", "tensorflow.cast", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding"], ["", "def", "relative_positional_encoding", "(", "self", ",", "qlen", ",", "klen", ",", "bsz", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "\"\"\"create relative positional encoding.\"\"\"", "\n", "freq_seq", "=", "tf", ".", "range", "(", "0", ",", "self", ".", "d_model", ",", "2.0", ")", "\n", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "tf", ".", "float32", ":", "\n", "            ", "freq_seq", "=", "tf", ".", "cast", "(", "freq_seq", ",", "dtype", "=", "dtype", ")", "\n", "", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "freq_seq", "/", "self", ".", "d_model", ")", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "# beg, end = klen - 1, -qlen", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "qlen", "\n", "", "elif", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "# beg, end = klen - 1, -1", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown `attn_type` {}.'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "", "if", "self", ".", "bi_data", ":", "\n", "            ", "fwd_pos_seq", "=", "tf", ".", "range", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "bwd_pos_seq", "=", "tf", ".", "range", "(", "-", "beg", ",", "-", "end", ",", "1.0", ")", "\n", "\n", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "cast", "(", "fwd_pos_seq", ",", "dtype", "=", "dtype", ")", "\n", "bwd_pos_seq", "=", "tf", ".", "cast", "(", "bwd_pos_seq", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "clip_by_value", "(", "fwd_pos_seq", ",", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "bwd_pos_seq", "=", "tf", ".", "clip_by_value", "(", "bwd_pos_seq", ",", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "\n", "", "if", "bsz", "is", "not", "None", ":", "\n", "# With bi_data, the batch size should be divisible by 2.", "\n", "                ", "assert", "bsz", "%", "2", "==", "0", "\n", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "", "else", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ")", "\n", "\n", "", "pos_emb", "=", "tf", ".", "concat", "(", "[", "fwd_pos_emb", ",", "bwd_pos_emb", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fwd_pos_seq", "=", "tf", ".", "range", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "cast", "(", "fwd_pos_seq", ",", "dtype", "=", "dtype", ")", "\n", "", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "clip_by_value", "(", "fwd_pos_seq", ",", "-", "clamp_len", ",", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.call": [[489, 677], ["isinstance", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "enumerate", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "isinstance", "ValueError", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "modeling_tf_xlnet.TFXLNetMainLayer.create_mask", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cast", "tensorflow.concat", "tensorflow.cast", "modeling_tf_xlnet.TFXLNetMainLayer.word_embedding", "tensorflow.tile", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cast", "tensorflow.one_hot", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "layer_module", "tuple.append", "tensorflow.transpose", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "tensorflow.transpose", "modeling_tf_utils.shape_list", "ValueError", "tensorflow.eye", "tensorflow.logical_not", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "len", "tuple.append", "tuple.append", "tuple", "tuple", "len", "len", "len", "len", "len", "len", "len", "len", "len", "modeling_tf_utils.shape_list", "tensorflow.transpose", "ValueError", "tensorflow.zeros", "tensorflow.equal", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "tensorflow.transpose", "modeling_tf_utils.shape_list", "tensorflow.shape", "tensorflow.shape", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_tf_xlnet.TFXLNetMainLayer.cache_mem", "tensorflow.transpose", "tensorflow.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_tf_xlnet.TFXLNetMainLayer.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.create_mask", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_beam_search.tile", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "mems", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "mems", "\n", "perm_mask", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "perm_mask", "\n", "target_mapping", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "target_mapping", "\n", "token_type_ids", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "token_type_ids", "\n", "input_mask", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "input_mask", "\n", "head_mask", "=", "inputs", "[", "7", "]", "if", "len", "(", "inputs", ")", ">", "7", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "8", "]", "if", "len", "(", "inputs", ")", ">", "8", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "mems", "=", "inputs", ".", "get", "(", "'mems'", ",", "mems", ")", "\n", "perm_mask", "=", "inputs", ".", "get", "(", "'perm_mask'", ",", "perm_mask", ")", "\n", "target_mapping", "=", "inputs", ".", "get", "(", "'target_mapping'", ",", "target_mapping", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "input_mask", "=", "inputs", ".", "get", "(", "'input_mask'", ",", "input_mask", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "# the original code for XLNet uses shapes [len, bsz] with the batch dimension at the end", "\n", "# but we want a unified interface in the library with the batch size on the first dimension", "\n", "# so we move here the first dimension (batch) to the end", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "tf", ".", "transpose", "(", "input_ids", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "input_ids", ")", "[", ":", "2", "]", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "transpose", "(", "inputs_embeds", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "token_type_ids", "=", "tf", ".", "transpose", "(", "token_type_ids", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "input_mask", "=", "tf", ".", "transpose", "(", "input_mask", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "attention_mask", "=", "tf", ".", "transpose", "(", "attention_mask", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "perm_mask", "=", "tf", ".", "transpose", "(", "perm_mask", ",", "perm", "=", "(", "1", ",", "2", ",", "0", ")", ")", "if", "perm_mask", "is", "not", "None", "else", "None", "\n", "target_mapping", "=", "tf", ".", "transpose", "(", "target_mapping", ",", "perm", "=", "(", "1", ",", "2", ",", "0", ")", ")", "if", "target_mapping", "is", "not", "None", "else", "None", "\n", "\n", "mlen", "=", "shape_list", "(", "mems", "[", "0", "]", ")", "[", "0", "]", "if", "mems", "is", "not", "None", "and", "mems", "[", "0", "]", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "dtype_float", "=", "tf", ".", "bfloat16", "if", "self", ".", "use_bfloat16", "else", "tf", ".", "float32", "\n", "\n", "##### Attention mask", "\n", "# causal attention mask", "\n", "if", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "            ", "attn_mask", "=", "self", ".", "create_mask", "(", "qlen", ",", "mlen", ")", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "", "elif", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported attention type: {}'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "# data mask: input mask & perm mask", "\n", "", "assert", "input_mask", "is", "None", "or", "attention_mask", "is", "None", ",", "\"You can only use one of input_mask (uses 1 for padding) \"", "\"or attention_mask (uses 0 for padding, added for compatbility with BERT). Please choose one.\"", "\n", "if", "input_mask", "is", "None", "and", "attention_mask", "is", "not", "None", ":", "\n", "            ", "input_mask", "=", "1.0", "-", "attention_mask", "\n", "", "if", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "+", "perm_mask", "\n", "", "elif", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "\n", "", "elif", "input_mask", "is", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "perm_mask", "\n", "", "else", ":", "\n", "            ", "data_mask", "=", "None", "\n", "\n", "", "if", "data_mask", "is", "not", "None", ":", "\n", "# all mems can be attended to", "\n", "            ", "mems_mask", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "data_mask", ")", "[", "0", "]", ",", "mlen", ",", "bsz", "]", ",", "\n", "dtype", "=", "dtype_float", ")", "\n", "data_mask", "=", "tf", ".", "concat", "(", "[", "mems_mask", ",", "data_mask", "]", ",", "axis", "=", "1", ")", "\n", "if", "attn_mask", "is", "None", ":", "\n", "                ", "attn_mask", "=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "attn_mask", "+=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "tf", ".", "cast", "(", "attn_mask", ">", "0", ",", "dtype", "=", "dtype_float", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "non_tgt_mask", "=", "-", "tf", ".", "eye", "(", "qlen", ",", "dtype", "=", "dtype_float", ")", "\n", "non_tgt_mask", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ",", "dtype", "=", "dtype_float", ")", ",", "non_tgt_mask", "]", ",", "axis", "=", "-", "1", ")", "\n", "non_tgt_mask", "=", "tf", ".", "cast", "(", "(", "attn_mask", "+", "non_tgt_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ">", "0", ",", "dtype", "=", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "non_tgt_mask", "=", "None", "\n", "\n", "##### Word embeddings and prepare h & g hidden states", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb_k", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb_k", "=", "self", ".", "word_embedding", "(", "input_ids", ")", "\n", "", "output_h", "=", "self", ".", "dropout", "(", "word_emb_k", ",", "training", "=", "training", ")", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "            ", "word_emb_q", "=", "tf", ".", "tile", "(", "self", ".", "mask_emb", ",", "[", "tf", ".", "shape", "(", "target_mapping", ")", "[", "0", "]", ",", "bsz", ",", "1", "]", ")", "\n", "# else:  # We removed the inp_q input which was same as target mapping", "\n", "#     inp_q_ext = inp_q[:, :, None]", "\n", "#     word_emb_q = inp_q_ext * self.mask_emb + (1 - inp_q_ext) * word_emb_k", "\n", "output_g", "=", "self", ".", "dropout", "(", "word_emb_q", ",", "training", "=", "training", ")", "\n", "", "else", ":", "\n", "            ", "output_g", "=", "None", "\n", "\n", "##### Segment embedding", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "# Convert `token_type_ids` to one-hot `seg_mat`", "\n", "            ", "mem_pad", "=", "tf", ".", "zeros", "(", "[", "mlen", ",", "bsz", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "cat_ids", "=", "tf", ".", "concat", "(", "[", "mem_pad", ",", "token_type_ids", "]", ",", "0", ")", "\n", "\n", "# `1` indicates not in the same segment [qlen x klen x bsz]", "\n", "seg_mat", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "logical_not", "(", "tf", ".", "equal", "(", "token_type_ids", "[", ":", ",", "None", "]", ",", "cat_ids", "[", "None", ",", ":", "]", ")", ")", ",", "\n", "tf", ".", "int32", ")", "\n", "seg_mat", "=", "tf", ".", "one_hot", "(", "seg_mat", ",", "2", ",", "dtype", "=", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "seg_mat", "=", "None", "\n", "\n", "##### Positional encoding", "\n", "", "pos_emb", "=", "self", ".", "relative_positional_encoding", "(", "qlen", ",", "klen", ",", "bsz", "=", "bsz", ",", "dtype", "=", "dtype_float", ")", "\n", "pos_emb", "=", "self", ".", "dropout", "(", "pos_emb", ",", "training", "=", "training", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "new_mems", "=", "(", ")", "\n", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layer", ")", "\n", "\n", "", "attentions", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "# cache new mems", "\n", "            ", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "                ", "new_mems", "=", "new_mems", "+", "(", "self", ".", "cache_mem", "(", "output_h", ",", "mems", "[", "i", "]", ")", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "outputs", "=", "layer_module", "(", "[", "output_h", ",", "output_g", ",", "non_tgt_mask", ",", "attn_mask", ",", "\n", "pos_emb", ",", "seg_mat", ",", "mems", "[", "i", "]", ",", "target_mapping", ",", "\n", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "# Add last hidden state", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "output", "=", "self", ".", "dropout", "(", "output_g", "if", "output_g", "is", "not", "None", "else", "output_h", ",", "training", "=", "training", ")", "\n", "\n", "# Prepare outputs, we transpose back here to shape [bsz, len, hidden_dim] (cf. beginning of forward() method)", "\n", "outputs", "=", "(", "tf", ".", "transpose", "(", "output", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", ",", ")", "\n", "\n", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "new_mems", ",", ")", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "if", "output_g", "is", "not", "None", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "tf", ".", "transpose", "(", "h", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "for", "hs", "in", "hidden_states", "for", "h", "in", "hs", ")", "\n", "", "else", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "tf", ".", "transpose", "(", "hs", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "for", "hs", "in", "hidden_states", ")", "\n", "", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "attentions", "=", "tuple", "(", "tf", ".", "transpose", "(", "t", ",", "perm", "=", "(", "2", ",", "3", ",", "0", ",", "1", ")", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "\n", "", "return", "outputs", "# outputs, (new_mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetModel.__init__": [[820, 823], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetModel.call": [[824, 827], ["modeling_tf_xlnet.TFXLNetModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLMHeadModel.__init__": [[869, 873], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "modeling_tf_xlnet.TFXLNetLMHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "lm_loss", "=", "TFXLNetLMHead", "(", "config", ",", "self", ".", "transformer", ".", "word_embedding", ",", "name", "=", "'lm_loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLMHeadModel.get_output_embeddings": [[874, 876], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_loss", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetLMHeadModel.call": [[877, 885], ["modeling_tf_xlnet.TFXLNetLMHeadModel.transformer", "modeling_tf_xlnet.TFXLNetLMHeadModel.lm_loss"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_state", "=", "transformer_outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "lm_loss", "(", "hidden_state", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# return logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetForSequenceClassification.__init__": [[920, 929], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "modeling_tf_utils.TFSequenceSummary", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "sequence_summary", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'sequence_summary'", ")", "\n", "self", ".", "logits_proj", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'logits_proj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetForSequenceClassification.call": [[930, 940], ["modeling_tf_xlnet.TFXLNetForSequenceClassification.transformer", "modeling_tf_xlnet.TFXLNetForSequenceClassification.sequence_summary", "modeling_tf_xlnet.TFXLNetForSequenceClassification.logits_proj"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# return logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.__init__": [[978, 984], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.call": [[985, 998], ["modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.transformer", "modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# start_logits, end_logits, (mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.gelu": [[43, 51], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function.\n        XLNet is using OpenAI GPT's gelu\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_xlnet.swish": [[53, 55], ["tensorflow.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "tf", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_openai.OpenAIGPTConfig.__init__": [[59, 117], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "40478", ",", "\n", "n_positions", "=", "512", ",", "\n", "n_ctx", "=", "512", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "afn", "=", "\"gelu\"", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "predict_special_tokens", "=", "True", ",", "\n", "\n", "num_labels", "=", "1", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs OpenAIGPTConfig.\n        \"\"\"", "\n", "super", "(", "OpenAIGPTConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "afn", "=", "afn", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "predict_special_tokens", "=", "predict_special_tokens", "\n", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_openai.OpenAIGPTConfig.max_position_embeddings": [[120, 123], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_openai.OpenAIGPTConfig.hidden_size": [[124, 127], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_openai.OpenAIGPTConfig.num_attention_heads": [[128, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_openai.OpenAIGPTConfig.num_hidden_layers": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.__init__": [[28, 47], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "keep_order", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAdaptiveSoftmaxMask", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "self", ".", "div_val", "=", "div_val", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "self", ".", "keep_order", "=", "keep_order", "\n", "\n", "self", ".", "out_layers", "=", "[", "]", "\n", "self", ".", "out_projs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build": [[48, 98], ["super().build", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "range", "range", "len", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_layers.append", "len", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_projs.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_layers.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_projs.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_projs.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "n_clusters", ">", "0", ":", "\n", "            ", "self", ".", "cluster_weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_clusters", ",", "self", ".", "d_embed", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'cluster_weight'", ")", "\n", "self", ".", "cluster_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_clusters", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'cluster_bias'", ")", "\n", "\n", "", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                    ", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_embed", ",", "self", ".", "d_proj", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_projs_._{}'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_projs", ".", "append", "(", "weight", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "None", ")", "\n", "", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_token", ",", "self", ".", "d_embed", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._weight'", ".", "format", "(", "i", ")", ")", "\n", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_token", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._bias'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_layers", ".", "append", "(", "(", "weight", ",", "bias", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "self", ".", "d_embed", "//", "(", "self", ".", "div_val", "**", "i", ")", "\n", "\n", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "d_emb_i", ",", "self", ".", "d_proj", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_projs_._{}'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_projs", ".", "append", "(", "weight", ")", "\n", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._weight'", ".", "format", "(", "i", ")", ")", "\n", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "r_idx", "-", "l_idx", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._bias'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_layers", ".", "append", "(", "(", "weight", ",", "bias", ")", ")", "\n", "", "", "super", "(", "TFAdaptiveSoftmaxMask", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit": [[99, 105], ["tensorflow.einsum", "tensorflow.einsum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_logit", "(", "x", ",", "W", ",", "b", ",", "proj", "=", "None", ")", ":", "\n", "        ", "y", "=", "x", "\n", "if", "proj", "is", "not", "None", ":", "\n", "            ", "y", "=", "tf", ".", "einsum", "(", "'ibd,ed->ibe'", ",", "y", ",", "proj", ")", "\n", "", "return", "tf", ".", "einsum", "(", "'ibd,nd->ibn'", ",", "y", ",", "W", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob": [[106, 112], ["tensorflow.shape", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_gather_logprob", "(", "logprob", ",", "target", ")", ":", "\n", "        ", "lp_size", "=", "tf", ".", "shape", "(", "logprob", ")", "\n", "r", "=", "tf", ".", "range", "(", "lp_size", "[", "0", "]", ")", "\n", "idx", "=", "tf", ".", "stack", "(", "[", "r", ",", "target", "]", ",", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "logprob", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.call": [[113, 176], ["tensorflow.get_variable", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "tensorflow.nn.log_softmax", "modeling_tf_utils.shape_list", "tensorflow.zeros", "range", "tensorflow.concat", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_loss", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_metric", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "len", "tensorflow.reduce_mean", "tensorflow.zeros_initializer", "tensorflow.where", "tensorflow.concat", "tensorflow.concat", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "tensorflow.nn.log_softmax", "tensorflow.concat.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "tensorflow.nn.log_softmax", "tensorflow.concat.append", "tensorflow.scatter_nd", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "tensorflow.cast", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob"], ["", "def", "call", "(", "self", ",", "inputs", ",", "return_mean", "=", "True", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden", ",", "target", "=", "inputs", "\n", "head_logprob", "=", "0", "\n", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "softmax_b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "[", "n_token", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "output", "=", "self", ".", "_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", "[", "0", "]", ",", "self", ".", "out_layers", "[", "0", "]", "[", "1", "]", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "target", ",", "logits", "=", "output", ")", "\n", "", "out", "=", "tf", ".", "nn", ".", "log_softmax", "(", "output", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "hidden_sizes", "=", "shape_list", "(", "hidden", ")", "\n", "out", "=", "[", "]", "\n", "loss", "=", "tf", ".", "zeros", "(", "hidden_sizes", "[", ":", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "if", "target", "is", "not", "None", ":", "\n", "                    ", "mask", "=", "(", "target", ">=", "l_idx", ")", "&", "(", "target", "<", "r_idx", ")", "\n", "mask_idx", "=", "tf", ".", "where", "(", "mask", ")", "\n", "cur_target", "=", "tf", ".", "boolean_mask", "(", "target", ",", "mask", ")", "-", "l_idx", "\n", "\n", "", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "cur_W", "=", "self", ".", "out_layers", "[", "0", "]", "[", "0", "]", "[", "l_idx", ":", "r_idx", "]", "\n", "cur_b", "=", "self", ".", "out_layers", "[", "0", "]", "[", "1", "]", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "cur_W", "=", "self", ".", "out_layers", "[", "i", "]", "[", "0", "]", "\n", "cur_b", "=", "self", ".", "out_layers", "[", "i", "]", "[", "1", "]", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "cur_W", "=", "tf", ".", "concat", "(", "[", "cur_W", ",", "self", ".", "cluster_weight", "]", ",", "0", ")", "\n", "cur_b", "=", "tf", ".", "concat", "(", "[", "cur_b", ",", "self", ".", "cluster_bias", "]", ",", "0", ")", "\n", "\n", "head_logit", "=", "self", ".", "_logit", "(", "hidden", ",", "cur_W", ",", "cur_b", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "head_logprob", "=", "tf", ".", "nn", ".", "log_softmax", "(", "head_logit", ")", "\n", "out", ".", "append", "(", "head_logprob", "[", "...", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                        ", "cur_head_logprob", "=", "tf", ".", "boolean_mask", "(", "head_logprob", ",", "mask", ")", "\n", "cur_logprob", "=", "self", ".", "_gather_logprob", "(", "cur_head_logprob", ",", "cur_target", ")", "\n", "", "", "else", ":", "\n", "                    ", "tail_logit", "=", "self", ".", "_logit", "(", "hidden", ",", "cur_W", ",", "cur_b", ",", "self", ".", "out_projs", "[", "i", "]", ")", "\n", "tail_logprob", "=", "tf", ".", "nn", ".", "log_softmax", "(", "tail_logit", ")", "\n", "cluster_prob_idx", "=", "self", ".", "cutoffs", "[", "0", "]", "+", "i", "-", "1", "# No probability for the head cluster", "\n", "logprob_i", "=", "head_logprob", "[", "...", ",", "cluster_prob_idx", ",", "None", "]", "+", "tail_logprob", "\n", "out", ".", "append", "(", "logprob_i", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                        ", "cur_head_logprob", "=", "tf", ".", "boolean_mask", "(", "head_logprob", ",", "mask", ")", "\n", "cur_tail_logprob", "=", "tf", ".", "boolean_mask", "(", "tail_logprob", ",", "mask", ")", "\n", "cur_logprob", "=", "self", ".", "_gather_logprob", "(", "cur_tail_logprob", ",", "cur_target", ")", "\n", "cur_logprob", "+=", "cur_head_logprob", "[", ":", ",", "self", ".", "cutoff_ends", "[", "1", "]", "+", "i", "-", "1", "]", "\n", "", "", "if", "target", "is", "not", "None", ":", "\n", "                    ", "loss", "+=", "tf", ".", "scatter_nd", "(", "mask_idx", ",", "-", "cur_logprob", ",", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "loss", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "", "", "out", "=", "tf", ".", "concat", "(", "out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "            ", "if", "return_mean", ":", "\n", "                ", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "# Add the training-time loss value to the layer using `self.add_loss()`.", "\n", "", "self", ".", "add_loss", "(", "loss", ")", "\n", "\n", "# Log the loss as a metric (we could log arbitrary metrics,", "\n", "# including different metrics for training and inference.", "\n", "self", ".", "add_metric", "(", "loss", ",", "name", "=", "self", ".", "name", ",", "aggregation", "=", "'mean'", "if", "return_mean", "else", "''", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.__init__": [[59, 76], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "TFConv1D", "(", "n_state", "*", "3", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_attn'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "attn_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.prune_heads": [[77, 79], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.causal_attention_mask": [[80, 89], ["tensorflow.range", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"1's in the lower triangle, counting from the lower right corner.\n        Same as tf.matrix_band_part(tf.ones([nd, ns]), -1, ns-nd), but doesn't produce garbage on TPUs.\n        \"\"\"", "\n", "i", "=", "tf", ".", "range", "(", "nd", ")", "[", ":", ",", "None", "]", "\n", "j", "=", "tf", ".", "range", "(", "ns", ")", "\n", "m", "=", "i", ">=", "j", "-", "ns", "+", "nd", "\n", "return", "tf", ".", "cast", "(", "m", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention._attn": [[90, 119], ["tensorflow.matmul", "modeling_tf_utils.shape_list", "modeling_tf_gpt2.TFAttention.causal_attention_mask", "tensorflow.reshape", "tensorflow.nn.softmax", "modeling_tf_gpt2.TFAttention.attn_dropout", "tensorflow.cast", "tensorflow.matmul", "outputs.append", "tensorflow.math.sqrt", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.causal_attention_mask"], ["", "def", "_attn", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "# q, k, v have shape [batch, heads, sequence, features]", "\n", "w", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "# scale attention_scores", "\n", "w", "=", "w", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# w has shape [batch, heads, dst_sequence, src_sequence], where information flows from src to dst.", "\n", "", "_", ",", "_", ",", "nd", ",", "ns", "=", "shape_list", "(", "w", ")", "\n", "b", "=", "self", ".", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "1", ",", "nd", ",", "ns", "]", ")", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "tf", ".", "nn", ".", "softmax", "(", "w", ",", "axis", "=", "-", "1", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "tf", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.merge_heads": [[120, 125], ["tensorflow.transpose", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "2", "]", "+", "[", "x_shape", "[", "-", "2", "]", "*", "x_shape", "[", "-", "1", "]", "]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.split_heads": [[126, 131], ["modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "n_head", ",", "x_shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFAttention.call": [[132, 155], ["modeling_tf_gpt2.TFAttention.c_attn", "tensorflow.split", "modeling_tf_gpt2.TFAttention.split_heads", "modeling_tf_gpt2.TFAttention.split_heads", "modeling_tf_gpt2.TFAttention.split_heads", "tensorflow.stack", "modeling_tf_gpt2.TFAttention._attn", "modeling_tf_gpt2.TFAttention.merge_heads", "modeling_tf_gpt2.TFAttention.c_proj", "modeling_tf_gpt2.TFAttention.resid_dropout", "tensorflow.unstack", "tensorflow.concat", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.merge_heads"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "tf", ".", "split", "(", "x", ",", "3", ",", "axis", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "tf", ".", "unstack", "(", "layer_past", ",", "axis", "=", "1", ")", "\n", "key", "=", "tf", ".", "concat", "(", "[", "past_key", ",", "key", "]", ",", "axis", "=", "-", "2", ")", "\n", "value", "=", "tf", ".", "concat", "(", "[", "past_value", ",", "value", "]", ",", "axis", "=", "-", "2", ")", "\n", "", "present", "=", "tf", ".", "stack", "(", "[", "key", ",", "value", "]", ",", "axis", "=", "1", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "[", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFMLP.__init__": [[158, 165], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_fc'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "nx", ",", "n_state", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFMLP.call": [[166, 171], ["modeling_tf_gpt2.TFMLP.act", "modeling_tf_gpt2.TFMLP.c_proj", "modeling_tf_gpt2.TFMLP.dropout", "modeling_tf_gpt2.TFMLP.c_fc"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "h2", "=", "self", ".", "dropout", "(", "h2", ",", "training", "=", "training", ")", "\n", "return", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFBlock.__init__": [[174, 181], ["super().__init__", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_gpt2.TFAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_gpt2.TFMLP"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_1'", ")", "\n", "self", ".", "attn", "=", "TFAttention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ",", "name", "=", "'attn'", ")", "\n", "self", ".", "ln_2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_2'", ")", "\n", "self", ".", "mlp", "=", "TFMLP", "(", "4", "*", "nx", ",", "config", ",", "name", "=", "'mlp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFBlock.call": [[182, 196], ["modeling_tf_gpt2.TFBlock.ln_1", "modeling_tf_gpt2.TFBlock.attn", "modeling_tf_gpt2.TFBlock.ln_2", "modeling_tf_gpt2.TFBlock.mlp"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "a", "=", "self", ".", "ln_1", "(", "x", ")", "\n", "output_attn", "=", "self", ".", "attn", "(", "[", "a", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "x", "=", "x", "+", "a", "\n", "\n", "m", "=", "self", ".", "ln_2", "(", "x", ")", "\n", "m", "=", "self", ".", "mlp", "(", "m", ",", "training", "=", "training", ")", "\n", "x", "=", "x", "+", "m", "\n", "\n", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2MainLayer.__init__": [[199, 221], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_gpt2.TFBlock", "modeling_tf_utils.get_initializer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2MainLayer", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "n_layer", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "n_embd", "=", "config", ".", "n_embd", "\n", "\n", "self", ".", "wte", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "hidden_size", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "'wte'", ")", "\n", "self", ".", "wpe", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "n_positions", ",", "\n", "config", ".", "n_embd", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'wpe'", ")", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "[", "TFBlock", "(", "config", ".", "n_ctx", ",", "\n", "config", ",", "\n", "scale", "=", "True", ",", "\n", "name", "=", "'h_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "self", ".", "ln_f", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2MainLayer.get_input_embeddings": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2MainLayer._resize_token_embeddings": [[225, 227], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2MainLayer._prune_heads": [[228, 233], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2MainLayer.call": [[234, 350], ["isinstance", "tensorflow.reshape", "modeling_tf_gpt2.TFGPT2MainLayer.wpe", "modeling_tf_gpt2.TFGPT2MainLayer.drop", "enumerate", "modeling_tf_gpt2.TFGPT2MainLayer.ln_f", "tensorflow.reshape", "isinstance", "ValueError", "tensorflow.cast", "modeling_tf_gpt2.TFGPT2MainLayer.wte", "tensorflow.reshape", "modeling_tf_gpt2.TFGPT2MainLayer.wte", "zip", "block", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reshape", "len", "modeling_tf_utils.shape_list", "tensorflow.range", "tuple.append", "len", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "past", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "past", "\n", "attention_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "past", "=", "inputs", ".", "get", "(", "'past'", ",", "past", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "shape_list", "(", "past", "[", "0", "]", "[", "0", "]", ")", "[", "-", "2", "]", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "[", "-", "1", ",", "shape_list", "(", "position_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", ",", "shape_list", "(", "token_type_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "[", "shape_list", "(", "hidden_states", ")", "[", "-", "1", "]", "]", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "[", "hidden_states", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", "presents", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", "+", "shape_list", "(", "all_attentions", "[", "0", "]", ")", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "tf", ".", "reshape", "(", "t", ",", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2Model.__init__": [[462, 465], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_gpt2.TFGPT2MainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2Model", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFGPT2MainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2Model.call": [[466, 469], ["modeling_tf_gpt2.TFGPT2Model.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2LMHeadModel.__init__": [[503, 506], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_gpt2.TFGPT2MainLayer"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2LMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFGPT2MainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2LMHeadModel.get_output_embeddings": [[507, 509], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2LMHeadModel.call": [[510, 519], ["modeling_tf_gpt2.TFGPT2LMHeadModel.transformer", "modeling_tf_gpt2.TFGPT2LMHeadModel.transformer.wte"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "wte", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm_logits, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.__init__": [[575, 579], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_gpt2.TFGPT2MainLayer", "modeling_tf_utils.TFSequenceSummary"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2DoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFGPT2MainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "multiple_choice_head", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'multiple_choice_head'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.get_output_embeddings": [[580, 582], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.call": [[583, 634], ["isinstance", "modeling_tf_gpt2.TFGPT2DoubleHeadsModel.transformer", "tensorflow.reshape", "modeling_tf_gpt2.TFGPT2DoubleHeadsModel.transformer.wte", "modeling_tf_gpt2.TFGPT2DoubleHeadsModel.multiple_choice_head", "tensorflow.squeeze", "isinstance", "modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len", "len", "len", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "mc_token_ids", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "past", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "past", "\n", "attention_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "inputs_embeds", "\n", "mc_token_ids", "=", "inputs", "[", "7", "]", "if", "len", "(", "inputs", ")", ">", "7", "else", "mc_token_ids", "\n", "assert", "len", "(", "inputs", ")", "<=", "8", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "past", "=", "inputs", ".", "get", "(", "'past'", ",", "past", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "mc_token_ids", "=", "inputs", ".", "get", "(", "'mc_token_ids'", ",", "mc_token_ids", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "8", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shapes", "[", "-", "1", "]", "\n", "\n", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "input_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "tf", ".", "reshape", "(", "attention_mask", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "flat_inputs", "=", "[", "flat_input_ids", ",", "past", ",", "flat_attention_mask", ",", "flat_token_type_ids", ",", "flat_position_ids", ",", "head_mask", ",", "inputs_embeds", "]", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "flat_inputs", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "input_shapes", "+", "shape_list", "(", "hidden_states", ")", "[", "-", "1", ":", "]", ")", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "wte", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "[", "hidden_states", ",", "mc_token_ids", "]", ",", "training", "=", "training", ")", "\n", "\n", "mc_logits", "=", "tf", ".", "squeeze", "(", "mc_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm logits, mc logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_gpt2.gelu": [[44, 56], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.__init__": [[87, 95], ["tokenization_gpt2.GPT2Tokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "errors", "=", "'replace'", ",", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "sep_token", "=", "\"</s>\"", ",", "\n", "cls_token", "=", "\"<s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "pad_token", "=", "'<pad>'", ",", "mask_token", "=", "'<mask>'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RobertaTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", "=", "vocab_file", ",", "merges_file", "=", "merges_file", ",", "errors", "=", "errors", ",", "\n", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "\n", "sep_token", "=", "sep_token", ",", "cls_token", "=", "cls_token", ",", "pad_token", "=", "pad_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "4", "# take into account special tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens": [[96, 109], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.get_special_tokens_mask": [[110, 134], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", ",", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.create_token_type_ids_from_sequences": [[135, 150], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A RoBERTa sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf": [[91, 134], ["config_class.from_json_file", "print", "model_class", "transformers.load_pytorch_checkpoint_in_tf2_model", "print", "transformers.load_pytorch_checkpoint_in_tf2_model.save_weights", "ValueError", "transformers.cached_path", "transformers.cached_path", "tensorflow.constant", "transformers.load_pytorch_checkpoint_in_tf2_model.", "pt_model_class.from_pretrained", "torch.tensor", "pto[].detach().numpy", "tfo[].numpy", "np.amax", "print", "str", "torch.no_grad", "pt_model_class.from_pretrained.", "np.abs", "list", "torch.load", "pto[].detach", "MODEL_CLASSES.keys"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["def", "convert_pt_checkpoint_to_tf", "(", "model_type", ",", "pytorch_checkpoint_path", ",", "config_file", ",", "tf_dump_path", ",", "compare_with_pt_model", "=", "False", ",", "use_cached_models", "=", "True", ")", ":", "\n", "    ", "if", "model_type", "not", "in", "MODEL_CLASSES", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unrecognized model type, should be one of {}.\"", ".", "format", "(", "list", "(", "MODEL_CLASSES", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "config_class", ",", "model_class", ",", "pt_model_class", ",", "aws_model_maps", ",", "aws_config_map", "=", "MODEL_CLASSES", "[", "model_type", "]", "\n", "\n", "# Initialise TF model", "\n", "if", "config_file", "in", "aws_config_map", ":", "\n", "        ", "config_file", "=", "cached_path", "(", "aws_config_map", "[", "config_file", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "", "config", "=", "config_class", ".", "from_json_file", "(", "config_file", ")", "\n", "config", ".", "output_hidden_states", "=", "True", "\n", "config", ".", "output_attentions", "=", "True", "\n", "print", "(", "\"Building TensorFlow model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "tf_model", "=", "model_class", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "if", "pytorch_checkpoint_path", "in", "aws_model_maps", ":", "\n", "        ", "pytorch_checkpoint_path", "=", "cached_path", "(", "aws_model_maps", "[", "pytorch_checkpoint_path", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "# Load PyTorch checkpoint in tf2 model:", "\n", "", "tf_model", "=", "load_pytorch_checkpoint_in_tf2_model", "(", "tf_model", ",", "pytorch_checkpoint_path", ")", "\n", "\n", "if", "compare_with_pt_model", ":", "\n", "        ", "inputs_list", "=", "[", "[", "7", ",", "6", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "4", ",", "5", "]", "]", "\n", "tf_inputs", "=", "tf", ".", "constant", "(", "inputs_list", ")", "\n", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# build the network", "\n", "\n", "pt_model", "=", "pt_model_class", ".", "from_pretrained", "(", "None", ",", "\n", "config", "=", "config", ",", "\n", "state_dict", "=", "torch", ".", "load", "(", "pytorch_checkpoint_path", ",", "\n", "map_location", "=", "'cpu'", ")", ")", "\n", "pt_inputs", "=", "torch", ".", "tensor", "(", "inputs_list", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pto", "=", "pt_model", "(", "pt_inputs", ")", "\n", "\n", "", "np_pt", "=", "pto", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "np_tf", "=", "tfo", "[", "0", "]", ".", "numpy", "(", ")", "\n", "diff", "=", "np", ".", "amax", "(", "np", ".", "abs", "(", "np_pt", "-", "np_tf", ")", ")", "\n", "print", "(", "\"Max absolute difference between models outputs {}\"", ".", "format", "(", "diff", ")", ")", "\n", "assert", "diff", "<=", "2e-2", ",", "\"Error, model absolute difference is >2e-2\"", "\n", "\n", "# Save pytorch-model", "\n", "", "print", "(", "\"Save TensorFlow model to {}\"", ".", "format", "(", "tf_dump_path", ")", ")", "\n", "tf_model", ".", "save_weights", "(", "tf_dump_path", ",", "save_format", "=", "'h5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_pytorch_checkpoint_to_tf2.convert_all_pt_checkpoints_to_tf": [[136, 192], ["os.path.isdir", "enumerate", "list", "print", "print", "print", "enumerate", "MODEL_CLASSES.keys", "ValueError", "list", "zip", "print", "print", "print", "os.path.isfile", "convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf", "os.remove", "os.remove", "len", "aws_model_maps.keys", "transformers.cached_path", "transformers.cached_path", "transformers.cached_path", "transformers.cached_path", "list", "print", "print", "len", "os.path.join", "MODEL_CLASSES.keys"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path"], ["", "def", "convert_all_pt_checkpoints_to_tf", "(", "args_model_type", ",", "tf_dump_path", ",", "model_shortcut_names_or_path", "=", "None", ",", "config_shortcut_names_or_path", "=", "None", ",", "\n", "compare_with_pt_model", "=", "False", ",", "use_cached_models", "=", "False", ",", "only_convert_finetuned_models", "=", "False", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "args", ".", "tf_dump_path", ")", ",", "\"--tf_dump_path should be a directory\"", "\n", "\n", "if", "args_model_type", "is", "None", ":", "\n", "        ", "model_types", "=", "list", "(", "MODEL_CLASSES", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "model_types", "=", "[", "args_model_type", "]", "\n", "\n", "", "for", "j", ",", "model_type", "in", "enumerate", "(", "model_types", ",", "start", "=", "1", ")", ":", "\n", "        ", "print", "(", "\"=\"", "*", "100", ")", "\n", "print", "(", "\" Converting model type {}/{}: {}\"", ".", "format", "(", "j", ",", "len", "(", "model_types", ")", ",", "model_type", ")", ")", "\n", "print", "(", "\"=\"", "*", "100", ")", "\n", "if", "model_type", "not", "in", "MODEL_CLASSES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized model type {}, should be one of {}.\"", ".", "format", "(", "model_type", ",", "list", "(", "MODEL_CLASSES", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "config_class", ",", "model_class", ",", "pt_model_class", ",", "aws_model_maps", ",", "aws_config_map", "=", "MODEL_CLASSES", "[", "model_type", "]", "\n", "\n", "if", "model_shortcut_names_or_path", "is", "None", ":", "\n", "            ", "model_shortcut_names_or_path", "=", "list", "(", "aws_model_maps", ".", "keys", "(", ")", ")", "\n", "", "if", "config_shortcut_names_or_path", "is", "None", ":", "\n", "            ", "config_shortcut_names_or_path", "=", "model_shortcut_names_or_path", "\n", "\n", "", "for", "i", ",", "(", "model_shortcut_name", ",", "config_shortcut_name", ")", "in", "enumerate", "(", "\n", "zip", "(", "model_shortcut_names_or_path", ",", "config_shortcut_names_or_path", ")", ",", "start", "=", "1", ")", ":", "\n", "            ", "print", "(", "\"-\"", "*", "100", ")", "\n", "if", "'-squad'", "in", "model_shortcut_name", "or", "'-mrpc'", "in", "model_shortcut_name", "or", "'-mnli'", "in", "model_shortcut_name", ":", "\n", "                ", "if", "not", "only_convert_finetuned_models", ":", "\n", "                    ", "print", "(", "\"    Skipping finetuned checkpoint {}\"", ".", "format", "(", "model_shortcut_name", ")", ")", "\n", "continue", "\n", "", "model_type", "=", "model_shortcut_name", "\n", "", "elif", "only_convert_finetuned_models", ":", "\n", "                ", "print", "(", "\"    Skipping not finetuned checkpoint {}\"", ".", "format", "(", "model_shortcut_name", ")", ")", "\n", "continue", "\n", "", "print", "(", "\"    Converting checkpoint {}/{}: {} - model_type {}\"", ".", "format", "(", "i", ",", "len", "(", "aws_config_map", ")", ",", "model_shortcut_name", ",", "model_type", ")", ")", "\n", "print", "(", "\"-\"", "*", "100", ")", "\n", "\n", "if", "config_shortcut_name", "in", "aws_config_map", ":", "\n", "                ", "config_file", "=", "cached_path", "(", "aws_config_map", "[", "config_shortcut_name", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "", "else", ":", "\n", "                ", "config_file", "=", "cached_path", "(", "config_shortcut_name", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "\n", "", "if", "model_shortcut_name", "in", "aws_model_maps", ":", "\n", "                ", "model_file", "=", "cached_path", "(", "aws_model_maps", "[", "model_shortcut_name", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "", "else", ":", "\n", "                ", "model_file", "=", "cached_path", "(", "model_shortcut_name", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "model_shortcut_name", ")", ":", "\n", "                ", "model_shortcut_name", "=", "'converted_model'", "\n", "", "convert_pt_checkpoint_to_tf", "(", "model_type", "=", "model_type", ",", "\n", "pytorch_checkpoint_path", "=", "model_file", ",", "\n", "config_file", "=", "config_file", ",", "\n", "tf_dump_path", "=", "os", ".", "path", ".", "join", "(", "tf_dump_path", ",", "model_shortcut_name", "+", "'-tf_model.h5'", ")", ",", "\n", "compare_with_pt_model", "=", "compare_with_pt_model", ")", "\n", "os", ".", "remove", "(", "config_file", ")", "\n", "os", ".", "remove", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf": [[26, 93], ["model.state_dict", "tensorflow.reset_default_graph", "os.path.isdir", "os.makedirs", "iter", "tensorflow.dtypes.as_dtype", "tensorflow.get_variable", "session.run", "session.run", "tensorflow.Session", "tensorflow.train.Saver", "tf.train.Saver.save", "name.replace.replace", "tensorflow.variables_initializer", "convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf.to_tf_var_name"], "function", ["None"], ["def", "convert_pytorch_checkpoint_to_tf", "(", "model", ":", "BertModel", ",", "ckpt_dir", ":", "str", ",", "model_name", ":", "str", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param model:BertModel Pytorch model instance to be converted\n    :param ckpt_dir: Tensorflow model directory\n    :param model_name: model name\n    :return:\n\n    Currently supported HF models:\n        Y BertModel\n        N BertForMaskedLM\n        N BertForPreTraining\n        N BertForMultipleChoice\n        N BertForNextSentencePrediction\n        N BertForSequenceClassification\n        N BertForQuestionAnswering\n    \"\"\"", "\n", "\n", "tensors_to_transpose", "=", "(", "\n", "\"dense.weight\"", ",", "\n", "\"attention.self.query\"", ",", "\n", "\"attention.self.key\"", ",", "\n", "\"attention.self.value\"", "\n", ")", "\n", "\n", "var_map", "=", "(", "\n", "(", "'layer.'", ",", "'layer_'", ")", ",", "\n", "(", "'word_embeddings.weight'", ",", "'word_embeddings'", ")", ",", "\n", "(", "'position_embeddings.weight'", ",", "'position_embeddings'", ")", ",", "\n", "(", "'token_type_embeddings.weight'", ",", "'token_type_embeddings'", ")", ",", "\n", "(", "'.'", ",", "'/'", ")", ",", "\n", "(", "'LayerNorm/weight'", ",", "'LayerNorm/gamma'", ")", ",", "\n", "(", "'LayerNorm/bias'", ",", "'LayerNorm/beta'", ")", ",", "\n", "(", "'weight'", ",", "'kernel'", ")", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "def", "to_tf_var_name", "(", "name", ":", "str", ")", ":", "\n", "        ", "for", "patt", ",", "repl", "in", "iter", "(", "var_map", ")", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "patt", ",", "repl", ")", "\n", "", "return", "'bert/{}'", ".", "format", "(", "name", ")", "\n", "\n", "", "def", "create_tf_var", "(", "tensor", ":", "np", ".", "ndarray", ",", "name", ":", "str", ",", "session", ":", "tf", ".", "Session", ")", ":", "\n", "        ", "tf_dtype", "=", "tf", ".", "dtypes", ".", "as_dtype", "(", "tensor", ".", "dtype", ")", "\n", "tf_var", "=", "tf", ".", "get_variable", "(", "dtype", "=", "tf_dtype", ",", "shape", "=", "tensor", ".", "shape", ",", "name", "=", "name", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "session", ".", "run", "(", "tf", ".", "variables_initializer", "(", "[", "tf_var", "]", ")", ")", "\n", "session", ".", "run", "(", "tf_var", ")", "\n", "return", "tf_var", "\n", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "for", "var_name", "in", "state_dict", ":", "\n", "            ", "tf_name", "=", "to_tf_var_name", "(", "var_name", ")", "\n", "torch_tensor", "=", "state_dict", "[", "var_name", "]", ".", "numpy", "(", ")", "\n", "if", "any", "(", "[", "x", "in", "var_name", "for", "x", "in", "tensors_to_transpose", "]", ")", ":", "\n", "                ", "torch_tensor", "=", "torch_tensor", ".", "T", "\n", "", "tf_var", "=", "create_tf_var", "(", "tensor", "=", "torch_tensor", ",", "name", "=", "tf_name", ",", "session", "=", "session", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "set_value", "(", "tf_var", ",", "torch_tensor", ")", "\n", "tf_weight", "=", "session", ".", "run", "(", "tf_var", ")", "\n", "print", "(", "\"Successfully created {}: {}\"", ".", "format", "(", "tf_name", ",", "np", ".", "allclose", "(", "tf_weight", ",", "torch_tensor", ")", ")", ")", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "saver", ".", "save", "(", "session", ",", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "model_name", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "+", "\".ckpt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_bert_pytorch_checkpoint_to_original_tf.main": [[95, 126], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "transformers.BertModel.from_pretrained", "convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf", "torch.load"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf"], ["", "", "def", "main", "(", "raw_args", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"model name e.g. bert-base-uncased\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "required", "=", "False", ",", "\n", "help", "=", "\"Directory containing pytorch model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pytorch_model_path\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"/path/to/<pytorch-model-name>.bin\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tf_cache_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Directory in which to save tensorflow model\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "raw_args", ")", "\n", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", "=", "args", ".", "model_name", ",", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "pytorch_model_path", ")", ",", "\n", "cache_dir", "=", "args", ".", "cache_dir", "\n", ")", "\n", "\n", "convert_pytorch_checkpoint_to_tf", "(", "\n", "model", "=", "model", ",", "\n", "ckpt_dir", "=", "args", ".", "tf_cache_dir", ",", "\n", "model_name", "=", "args", ".", "model_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.__init__": [[129, 146], ["torch.Module.__init__", "modeling_openai.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.prune_heads": [[147, 165], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_openai.Attention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention._attn": [[166, 190], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_openai.Attention.attn_dropout", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size", "modeling_openai.Attention.size", "modeling_openai.Attention.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "# w = w * self.bias + -1e9 * (1 - self.bias)  # TF implem method: mask_attn_weights", "\n", "# XD: self.b may be larger than w, so we need to crop it", "\n", "", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", ":", "w", ".", "size", "(", "-", "2", ")", ",", ":", "w", ".", "size", "(", "-", "1", ")", "]", "\n", "w", "=", "w", "*", "b", "+", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.merge_heads": [[191, 195], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads": [[196, 203], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.forward": [[204, 220], ["modeling_openai.Attention.c_attn", "modeling_openai.Attention.split", "modeling_openai.Attention.split_heads", "modeling_openai.Attention.split_heads", "modeling_openai.Attention.split_heads", "modeling_openai.Attention._attn", "modeling_openai.Attention.merge_heads", "modeling_openai.Attention.c_proj", "modeling_openai.Attention.resid_dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.MLP.__init__": [[223, 230], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "ACT_FNS", "[", "config", ".", "afn", "]", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.MLP.forward": [[231, 235], ["modeling_openai.MLP.act", "modeling_openai.MLP.c_proj", "modeling_openai.MLP.dropout", "modeling_openai.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Block.__init__": [[238, 245], ["torch.Module.__init__", "modeling_openai.Attention", "torch.LayerNorm", "torch.LayerNorm", "modeling_openai.MLP", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_1", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "self", ".", "ln_2", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.Block.forward": [[246, 256], ["modeling_openai.Block.attn", "modeling_openai.Block.ln_1", "modeling_openai.Block.mlp", "modeling_openai.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attn_outputs", "=", "self", ".", "attn", "(", "x", ",", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "n", "=", "self", ".", "ln_1", "(", "x", "+", "a", ")", "\n", "m", "=", "self", ".", "mlp", "(", "n", ")", "\n", "h", "=", "self", ".", "ln_2", "(", "n", "+", "m", ")", "\n", "\n", "outputs", "=", "[", "h", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTPreTrainedModel._init_weights": [[267, 279], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTModel.__init__": [[355, 366], ["modeling_utils.PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "modeling_openai.OpenAIGPTModel.init_weights", "modeling_openai.Block", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "tokens_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "positions_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings": [[367, 369], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTModel.set_input_embeddings": [[370, 372], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "tokens_embed", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTModel._prune_heads": [[373, 379], ["heads_to_prune.items", "modeling_openai.OpenAIGPTModel.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTModel.forward": [[380, 462], ["modeling_openai.OpenAIGPTModel.positions_embed", "modeling_openai.OpenAIGPTModel.drop", "enumerate", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_openai.OpenAIGPTModel.tokens_embed", "token_type_ids.view.view.view", "modeling_openai.OpenAIGPTModel.tokens_embed", "block", "modeling_openai.OpenAIGPTModel.view", "input_ids.view.view.size", "input_ids.view.view.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "token_type_ids.view.view.size", "modeling_openai.OpenAIGPTModel.size", "ValueError", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_openai.OpenAIGPTModel.view", "modeling_openai.OpenAIGPTModel.size", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_openai.OpenAIGPTModel.view", "modeling_openai.OpenAIGPTModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_openai.OpenAIGPTModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "# Code is different from when we had a single embedding matrice from position and token embeddings", "\n", "            ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "input_shape", "[", "-", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "tokens_embed", "(", "input_ids", ")", "\n", "", "position_embeds", "=", "self", ".", "positions_embed", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "token_type_embeds", "=", "self", ".", "tokens_embed", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "all_attentions", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "h", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", "=", "outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTLMHeadModel.__init__": [[497, 503], ["modeling_utils.PreTrainedModel.__init__", "modeling_openai.OpenAIGPTModel", "torch.Linear", "torch.Linear", "modeling_openai.OpenAIGPTLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTLMHeadModel.get_output_embeddings": [[504, 506], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTLMHeadModel.forward": [[507, 530], ["modeling_openai.OpenAIGPTLMHeadModel.transformer", "modeling_openai.OpenAIGPTLMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.__init__": [[588, 596], ["modeling_utils.PreTrainedModel.__init__", "modeling_openai.OpenAIGPTModel", "torch.Linear", "torch.Linear", "modeling_utils.SequenceSummary", "modeling_openai.OpenAIGPTDoubleHeadsModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTDoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "multiple_choice_head", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.get_output_embeddings": [[597, 599], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.forward": [[600, 628], ["modeling_openai.OpenAIGPTDoubleHeadsModel.transformer", "modeling_openai.OpenAIGPTDoubleHeadsModel.lm_head", "modeling_openai.OpenAIGPTDoubleHeadsModel.multiple_choice_head().squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_openai.OpenAIGPTDoubleHeadsModel.multiple_choice_head", "modeling_openai.OpenAIGPTDoubleHeadsModel.view", "mc_labels.view", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "modeling_openai.OpenAIGPTDoubleHeadsModel.size", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "mc_token_ids", "=", "None", ",", "lm_labels", "=", "None", ",", "mc_labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "hidden_states", ",", "mc_token_ids", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "mc_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "mc_logits", ".", "view", "(", "-", "1", ",", "mc_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "mc_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (lm loss), (mc loss), lm logits, mc logits, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.load_tf_weights_in_openai_gpt": [[42, 115], ["logger.info", "json.load", "json.load", "np.cumsum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "json.load.pop", "init_params.pop", "init_params.pop", "zip", "os.path.dirname", "io.open", "io.open", "np.load", "np.split", "param.reshape", "arr.squeeze", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "np.prod", "range", "np.concatenate", "zip", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "load_tf_weights_in_openai_gpt", "(", "model", ",", "config", ",", "openai_checkpoint_folder_path", ")", ":", "\n", "    ", "\"\"\" Load tf pre-trained weights in a pytorch model (from NumPy arrays here)\n    \"\"\"", "\n", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "\n", "if", "'.ckpt'", "in", "openai_checkpoint_folder_path", ":", "\n", "        ", "openai_checkpoint_folder_path", "=", "os", ".", "path", ".", "dirname", "(", "openai_checkpoint_folder_path", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading weights from {}\"", ".", "format", "(", "openai_checkpoint_folder_path", ")", ")", "\n", "\n", "names", "=", "json", ".", "load", "(", "open", "(", "openai_checkpoint_folder_path", "+", "'/parameters_names.json'", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "shapes", "=", "json", ".", "load", "(", "open", "(", "openai_checkpoint_folder_path", "+", "'/params_shapes.json'", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "offsets", "=", "np", ".", "cumsum", "(", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "init_params", "=", "[", "np", ".", "load", "(", "openai_checkpoint_folder_path", "+", "'/params_{}.npy'", ".", "format", "(", "n", ")", ")", "for", "n", "in", "range", "(", "10", ")", "]", "\n", "init_params", "=", "np", ".", "split", "(", "np", ".", "concatenate", "(", "init_params", ",", "0", ")", ",", "offsets", ")", "[", ":", "-", "1", "]", "\n", "init_params", "=", "[", "param", ".", "reshape", "(", "shape", ")", "for", "param", ",", "shape", "in", "zip", "(", "init_params", ",", "shapes", ")", "]", "\n", "\n", "# This was used when we had a single embedding matrix for positions and tokens", "\n", "# init_params[0] = np.concatenate([init_params[1], init_params[0]], 0)", "\n", "# del init_params[1]", "\n", "init_params", "=", "[", "arr", ".", "squeeze", "(", ")", "for", "arr", "in", "init_params", "]", "\n", "\n", "try", ":", "\n", "        ", "assert", "model", ".", "tokens_embed", ".", "weight", ".", "shape", "==", "init_params", "[", "1", "]", ".", "shape", "\n", "assert", "model", ".", "positions_embed", ".", "weight", ".", "shape", "==", "init_params", "[", "0", "]", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "        ", "e", ".", "args", "+=", "(", "model", ".", "tokens_embed", ".", "weight", ".", "shape", ",", "init_params", "[", "1", "]", ".", "shape", ")", "\n", "e", ".", "args", "+=", "(", "model", ".", "positions_embed", ".", "weight", ".", "shape", ",", "init_params", "[", "0", "]", ".", "shape", ")", "\n", "raise", "\n", "\n", "", "model", ".", "tokens_embed", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "init_params", "[", "1", "]", ")", "\n", "model", ".", "positions_embed", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "init_params", "[", "0", "]", ")", "\n", "names", ".", "pop", "(", "0", ")", "\n", "# Pop position and token embedding arrays", "\n", "init_params", ".", "pop", "(", "0", ")", "\n", "init_params", ".", "pop", "(", "0", ")", "\n", "\n", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "init_params", ")", ":", "# names[1:n_transfer], init_params[1:n_transfer]):", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "assert", "name", "[", "-", "2", ":", "]", "==", "\":0\"", "\n", "name", "=", "name", "[", ":", "-", "2", "]", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'w'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.gelu": [[117, 119], ["torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.swish": [[121, 123], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name": [[28, 61], ["tf_name.replace.replace", "re.sub", "tf_name.replace.replace", "re.sub", "tf_name.replace.split", "bool", "tf_name.replace.replace"], "function", ["None"], ["def", "convert_tf_weight_name_to_pt_weight_name", "(", "tf_name", ",", "start_prefix_to_remove", "=", "''", ")", ":", "\n", "    ", "\"\"\" Convert a TF 2.0 model variable name in a pytorch model weight name.\n\n        Conventions for TF2.0 scopes -> PyTorch attribute names conversions:\n            - '$1___$2' is replaced by $2 (can be used to duplicate or remove layers in TF2.0 vs PyTorch)\n            - '_._' is replaced by a new level separation (can be used to convert TF2.0 lists in PyTorch nn.ModulesList)\n\n        return tuple with:\n            - pytorch model weight name\n            - transpose: boolean indicating weither TF2.0 and PyTorch weights matrices are transposed with regards to each other\n    \"\"\"", "\n", "tf_name", "=", "tf_name", ".", "replace", "(", "':0'", ",", "''", ")", "# device ids", "\n", "tf_name", "=", "re", ".", "sub", "(", "r'/[^/]*___([^/]*)/'", ",", "r'/\\1/'", ",", "tf_name", ")", "# '$1___$2' is replaced by $2 (can be used to duplicate or remove layers in TF2.0 vs PyTorch)", "\n", "tf_name", "=", "tf_name", ".", "replace", "(", "'_._'", ",", "'/'", ")", "# '_._' is replaced by a level separation (can be used to convert TF2.0 lists in PyTorch nn.ModulesList)", "\n", "tf_name", "=", "re", ".", "sub", "(", "r'//+'", ",", "'/'", ",", "tf_name", ")", "# Remove empty levels at the end", "\n", "tf_name", "=", "tf_name", ".", "split", "(", "'/'", ")", "# Convert from TF2.0 '/' separators to PyTorch '.' separators", "\n", "tf_name", "=", "tf_name", "[", "1", ":", "]", "# Remove level zero", "\n", "\n", "# When should we transpose the weights", "\n", "transpose", "=", "bool", "(", "tf_name", "[", "-", "1", "]", "==", "'kernel'", "or", "'emb_projs'", "in", "tf_name", "or", "'out_projs'", "in", "tf_name", ")", "\n", "\n", "# Convert standard TF2.0 names in PyTorch names", "\n", "if", "tf_name", "[", "-", "1", "]", "==", "'kernel'", "or", "tf_name", "[", "-", "1", "]", "==", "'embeddings'", "or", "tf_name", "[", "-", "1", "]", "==", "'gamma'", ":", "\n", "        ", "tf_name", "[", "-", "1", "]", "=", "'weight'", "\n", "", "if", "tf_name", "[", "-", "1", "]", "==", "'beta'", ":", "\n", "        ", "tf_name", "[", "-", "1", "]", "=", "'bias'", "\n", "\n", "# Remove prefix if needed", "\n", "", "tf_name", "=", "'.'", ".", "join", "(", "tf_name", ")", "\n", "if", "start_prefix_to_remove", ":", "\n", "        ", "tf_name", "=", "tf_name", ".", "replace", "(", "start_prefix_to_remove", ",", "''", ",", "1", ")", "\n", "\n", "", "return", "tf_name", ",", "transpose", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model": [[66, 83], ["os.path.abspath", "logger.info", "torch.load", "modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model", "logger.error"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model"], ["", "def", "load_pytorch_checkpoint_in_tf2_model", "(", "tf_model", ",", "pytorch_checkpoint_path", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load pytorch checkpoints in a TF 2.0 model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "import", "torch", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a PyTorch model in TensorFlow, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "pt_path", "=", "os", ".", "path", ".", "abspath", "(", "pytorch_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Loading PyTorch weights from {}\"", ".", "format", "(", "pt_path", ")", ")", "\n", "\n", "pt_state_dict", "=", "torch", ".", "load", "(", "pt_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "return", "load_pytorch_weights_in_tf2_model", "(", "tf_model", ",", "pt_state_dict", ",", "tf_inputs", "=", "tf_inputs", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_model_in_tf2_model": [[85, 91], ["pt_model.state_dict", "modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model"], ["", "def", "load_pytorch_model_in_tf2_model", "(", "tf_model", ",", "pt_model", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load pytorch checkpoints in a TF 2.0 model\n    \"\"\"", "\n", "pt_state_dict", "=", "pt_model", ".", "state_dict", "(", ")", "\n", "\n", "return", "load_pytorch_weights_in_tf2_model", "(", "tf_model", ",", "pt_state_dict", ",", "tf_inputs", "=", "tf_inputs", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model": [[93, 172], ["pt_state_dict.keys", "zip", "set", "K.batch_set_value", "logger.info", "tf_model", "pt_state_dict.pop", "any", "list", "modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name", "pt_state_dict[].numpy", "logger.info", "weight_value_tuples.append", "set.discard", "tf_model", "logger.error", "key.replace", "key.replace", "old_keys.append", "new_keys.append", "pt_state_dict.keys", "numpy.transpose", "len", "len", "numpy.squeeze", "s.startswith", "len", "len", "numpy.expand_dims", "list", "list", "pt_state_dict.keys"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name"], ["", "def", "load_pytorch_weights_in_tf2_model", "(", "tf_model", ",", "pt_state_dict", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load pytorch state_dict in a TF 2.0 model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "torch", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", ".", "keras", "import", "backend", "as", "K", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a PyTorch model in TensorFlow, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "if", "tf_inputs", "is", "None", ":", "\n", "        ", "tf_inputs", "=", "tf_model", ".", "dummy_inputs", "\n", "\n", "", "if", "tf_inputs", "is", "not", "None", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# Make sure model is built", "\n", "\n", "# Adapt state dict - TODO remove this and update the AWS weights files instead", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "pt_state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "            ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "        ", "pt_state_dict", "[", "new_key", "]", "=", "pt_state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# Make sure we are able to load PyTorch base models as well as derived models (with heads)", "\n", "# TF models always have a prefix, some of PyTorch models (base ones) don't", "\n", "", "start_prefix_to_remove", "=", "''", "\n", "if", "not", "any", "(", "s", ".", "startswith", "(", "tf_model", ".", "base_model_prefix", ")", "for", "s", "in", "pt_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "start_prefix_to_remove", "=", "tf_model", ".", "base_model_prefix", "+", "'.'", "\n", "\n", "", "symbolic_weights", "=", "tf_model", ".", "trainable_weights", "+", "tf_model", ".", "non_trainable_weights", "\n", "\n", "weight_value_tuples", "=", "[", "]", "\n", "all_pytorch_weights", "=", "set", "(", "list", "(", "pt_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "symbolic_weight", "in", "symbolic_weights", ":", "\n", "        ", "sw_name", "=", "symbolic_weight", ".", "name", "\n", "name", ",", "transpose", "=", "convert_tf_weight_name_to_pt_weight_name", "(", "sw_name", ",", "start_prefix_to_remove", "=", "start_prefix_to_remove", ")", "\n", "\n", "# Find associated numpy array in pytorch model state dict", "\n", "assert", "name", "in", "pt_state_dict", ",", "\"{} not found in PyTorch model\"", ".", "format", "(", "name", ")", "\n", "array", "=", "pt_state_dict", "[", "name", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "transpose", ":", "\n", "            ", "array", "=", "numpy", ".", "transpose", "(", "array", ")", "\n", "\n", "", "if", "len", "(", "symbolic_weight", ".", "shape", ")", "<", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "squeeze", "(", "array", ")", "\n", "", "elif", "len", "(", "symbolic_weight", ".", "shape", ")", ">", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "expand_dims", "(", "array", ",", "axis", "=", "0", ")", "\n", "\n", "", "try", ":", "\n", "            ", "assert", "list", "(", "symbolic_weight", ".", "shape", ")", "==", "list", "(", "array", ".", "shape", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "symbolic_weight", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "e", "\n", "\n", "", "logger", ".", "info", "(", "\"Initialize TF weight {}\"", ".", "format", "(", "symbolic_weight", ".", "name", ")", ")", "\n", "\n", "weight_value_tuples", ".", "append", "(", "(", "symbolic_weight", ",", "array", ")", ")", "\n", "all_pytorch_weights", ".", "discard", "(", "name", ")", "\n", "\n", "", "K", ".", "batch_set_value", "(", "weight_value_tuples", ")", "\n", "\n", "if", "tf_inputs", "is", "not", "None", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# Make sure restore ops are run", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights or buffers not loaded from PyTorch model: {}\"", ".", "format", "(", "all_pytorch_weights", ")", ")", "\n", "\n", "return", "tf_model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model": [[177, 209], ["os.path.abspath", "logger.info", "getattr", "getattr.", "tf_model_class.load_weights", "modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model", "tf_model_class.", "logger.error"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model"], ["", "def", "load_tf2_checkpoint_in_pytorch_model", "(", "pt_model", ",", "tf_checkpoint_path", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load TF 2.0 HDF5 checkpoint in a PyTorch model\n        We use HDF5 to easily do transfer learning\n        (see https://github.com/tensorflow/tensorflow/blob/ee16fcac960ae660e0e4496658a366e2f745e1f0/tensorflow/python/keras/engine/network.py#L1352-L1357).\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "import", "torch", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "import", "transformers", "\n", "\n", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Loading TensorFlow weights from {}\"", ".", "format", "(", "tf_checkpoint_path", ")", ")", "\n", "\n", "# Instantiate and load the associated TF 2.0 model", "\n", "tf_model_class_name", "=", "\"TF\"", "+", "pt_model", ".", "__class__", ".", "__name__", "# Add \"TF\" at the beggining", "\n", "tf_model_class", "=", "getattr", "(", "transformers", ",", "tf_model_class_name", ")", "\n", "tf_model", "=", "tf_model_class", "(", "pt_model", ".", "config", ")", "\n", "\n", "if", "tf_inputs", "is", "None", ":", "\n", "        ", "tf_inputs", "=", "tf_model", ".", "dummy_inputs", "\n", "\n", "", "if", "tf_inputs", "is", "not", "None", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# Make sure model is built", "\n", "\n", "", "tf_model", ".", "load_weights", "(", "tf_checkpoint_path", ",", "by_name", "=", "True", ")", "\n", "\n", "return", "load_tf2_model_in_pytorch_model", "(", "pt_model", ",", "tf_model", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model": [[210, 216], ["modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model"], ["", "def", "load_tf2_model_in_pytorch_model", "(", "pt_model", ",", "tf_model", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load TF 2.0 model in a pytorch model\n    \"\"\"", "\n", "weights", "=", "tf_model", ".", "weights", "\n", "\n", "return", "load_tf2_weights_in_pytorch_model", "(", "pt_model", ",", "weights", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model": [[218, 290], ["dict", "set", "dict.items", "pt_model.load_state_dict", "logger.info", "pt_model.named_parameters", "any", "modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name", "list", "logger.info", "torch.from_numpy", "torch.from_numpy", "set.discard", "len", "logger.info", "len", "logger.info", "logger.error", "tf_weight.numpy", "tf_weights_map.keys", "pt_weight.data_ptr", "ValueError", "numpy.transpose", "len", "len", "numpy.squeeze", "s.startswith", "len", "len", "numpy.expand_dims", "list", "list", "pt_weight.data_ptr", "dict.keys", "pt_weight.data_ptr"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name"], ["", "def", "load_tf2_weights_in_pytorch_model", "(", "pt_model", ",", "tf_weights", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load TF2.0 symbolic weights in a PyTorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "import", "torch", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "new_pt_params_dict", "=", "{", "}", "\n", "current_pt_params_dict", "=", "dict", "(", "pt_model", ".", "named_parameters", "(", ")", ")", "\n", "\n", "# Make sure we are able to load PyTorch base models as well as derived models (with heads)", "\n", "# TF models always have a prefix, some of PyTorch models (base ones) don't", "\n", "start_prefix_to_remove", "=", "''", "\n", "if", "not", "any", "(", "s", ".", "startswith", "(", "pt_model", ".", "base_model_prefix", ")", "for", "s", "in", "current_pt_params_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "start_prefix_to_remove", "=", "pt_model", ".", "base_model_prefix", "+", "'.'", "\n", "\n", "# Build a map from potential PyTorch weight names to TF 2.0 Variables", "\n", "", "tf_weights_map", "=", "{", "}", "\n", "for", "tf_weight", "in", "tf_weights", ":", "\n", "        ", "pt_name", ",", "transpose", "=", "convert_tf_weight_name_to_pt_weight_name", "(", "tf_weight", ".", "name", ",", "start_prefix_to_remove", "=", "start_prefix_to_remove", ")", "\n", "tf_weights_map", "[", "pt_name", "]", "=", "(", "tf_weight", ".", "numpy", "(", ")", ",", "transpose", ")", "\n", "\n", "", "all_tf_weights", "=", "set", "(", "list", "(", "tf_weights_map", ".", "keys", "(", ")", ")", ")", "\n", "loaded_pt_weights_data_ptr", "=", "{", "}", "\n", "for", "pt_weight_name", ",", "pt_weight", "in", "current_pt_params_dict", ".", "items", "(", ")", ":", "\n", "# Handle PyTorch shared weight ()not duplicated in TF 2.0", "\n", "        ", "if", "pt_weight", ".", "data_ptr", "(", ")", "in", "loaded_pt_weights_data_ptr", ":", "\n", "            ", "new_pt_params_dict", "[", "pt_weight_name", "]", "=", "loaded_pt_weights_data_ptr", "[", "pt_weight", ".", "data_ptr", "(", ")", "]", "\n", "continue", "\n", "\n", "# Find associated numpy array in pytorch model state dict", "\n", "", "if", "pt_weight_name", "not", "in", "tf_weights_map", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} not found in TF 2.0 model\"", ".", "format", "(", "pt_weight_name", ")", ")", "\n", "\n", "", "array", ",", "transpose", "=", "tf_weights_map", "[", "pt_weight_name", "]", "\n", "\n", "if", "transpose", ":", "\n", "            ", "array", "=", "numpy", ".", "transpose", "(", "array", ")", "\n", "\n", "", "if", "len", "(", "pt_weight", ".", "shape", ")", "<", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "squeeze", "(", "array", ")", "\n", "", "elif", "len", "(", "pt_weight", ".", "shape", ")", ">", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "expand_dims", "(", "array", ",", "axis", "=", "0", ")", "\n", "\n", "", "try", ":", "\n", "            ", "assert", "list", "(", "pt_weight", ".", "shape", ")", "==", "list", "(", "array", ".", "shape", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pt_weight", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "e", "\n", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "pt_weight_name", ")", ")", "\n", "\n", "new_pt_params_dict", "[", "pt_weight_name", "]", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "loaded_pt_weights_data_ptr", "[", "pt_weight", ".", "data_ptr", "(", ")", "]", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "all_tf_weights", ".", "discard", "(", "pt_weight_name", ")", "\n", "\n", "", "missing_keys", ",", "unexpected_keys", "=", "pt_model", ".", "load_state_dict", "(", "new_pt_params_dict", ",", "strict", "=", "False", ")", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weights of {} not initialized from TF 2.0 model: {}\"", ".", "format", "(", "\n", "pt_model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weights from TF 2.0 model not used in {}: {}\"", ".", "format", "(", "\n", "pt_model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights or buffers not loaded from TF 2.0 model: {}\"", ".", "format", "(", "all_tf_weights", ")", ")", "\n", "\n", "return", "pt_model", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch": [[33, 52], ["transformers.OpenAIGPTModel", "transformers.load_tf_weights_in_openai_gpt", "print", "torch.save", "print", "transformers.OpenAIGPTConfig", "transformers.OpenAIGPTConfig.from_json_file", "transformers.OpenAIGPTModel.state_dict", "io.open", "f.write", "OpenAIGPTConfig.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_openai.load_tf_weights_in_openai_gpt", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["def", "convert_openai_checkpoint_to_pytorch", "(", "openai_checkpoint_folder_path", ",", "openai_config_file", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Construct model", "\n", "    ", "if", "openai_config_file", "==", "\"\"", ":", "\n", "        ", "config", "=", "OpenAIGPTConfig", "(", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "OpenAIGPTConfig", ".", "from_json_file", "(", "openai_config_file", ")", "\n", "", "model", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "\n", "# Load weights from numpy", "\n", "load_tf_weights_in_openai_gpt", "(", "model", ",", "config", ",", "openai_checkpoint_folder_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlm.XLMConfig.__init__": [[83, 161], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30145", ",", "\n", "emb_dim", "=", "2048", ",", "\n", "n_layers", "=", "12", ",", "\n", "n_heads", "=", "16", ",", "\n", "dropout", "=", "0.1", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "gelu_activation", "=", "True", ",", "\n", "sinusoidal_embeddings", "=", "False", ",", "\n", "causal", "=", "False", ",", "\n", "asm", "=", "False", ",", "\n", "n_langs", "=", "1", ",", "\n", "use_lang_emb", "=", "True", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "embed_init_std", "=", "2048", "**", "-", "0.5", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "init_std", "=", "0.02", ",", "\n", "bos_index", "=", "0", ",", "\n", "eos_index", "=", "1", ",", "\n", "pad_index", "=", "2", ",", "\n", "unk_index", "=", "3", ",", "\n", "mask_index", "=", "5", ",", "\n", "is_encoder", "=", "True", ",", "\n", "\n", "finetuning_task", "=", "None", ",", "\n", "num_labels", "=", "2", ",", "\n", "summary_type", "=", "'first'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "start_n_top", "=", "5", ",", "\n", "end_n_top", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs XLMConfig.\n        \"\"\"", "\n", "super", "(", "XLMConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "n_words", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "gelu_activation", "=", "gelu_activation", "\n", "self", ".", "sinusoidal_embeddings", "=", "sinusoidal_embeddings", "\n", "self", ".", "causal", "=", "causal", "\n", "self", ".", "asm", "=", "asm", "\n", "self", ".", "n_langs", "=", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "use_lang_emb", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "self", ".", "bos_index", "=", "bos_index", "\n", "self", ".", "eos_index", "=", "eos_index", "\n", "self", ".", "pad_index", "=", "pad_index", "\n", "self", ".", "unk_index", "=", "unk_index", "\n", "self", ".", "mask_index", "=", "mask_index", "\n", "self", ".", "is_encoder", "=", "is_encoder", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "embed_init_std", "=", "embed_init_std", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "finetuning_task", "=", "finetuning_task", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "start_n_top", "=", "start_n_top", "\n", "self", ".", "end_n_top", "=", "end_n_top", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlm.XLMConfig.vocab_size": [[167, 170], ["None"], "methods", ["None"], ["", "@", "vocab_size", ".", "setter", "\n", "def", "vocab_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "n_words", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlm.XLMConfig.hidden_size": [[171, 174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlm.XLMConfig.num_attention_heads": [[175, 178], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlm.XLMConfig.num_hidden_layers": [[179, 182], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_auto.AutoTokenizer.__init__": [[58, 60], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoTokenizer is designed to be instantiated \"", "\n", "\"using the `AutoTokenizer.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_auto.AutoTokenizer.from_pretrained": [[62, 130], ["ValueError", "tokenization_distilbert.DistilBertTokenizer.from_pretrained", "CamembertTokenizer.from_pretrained", "tokenization_roberta.RobertaTokenizer.from_pretrained", "tokenization_bert.BertTokenizer.from_pretrained", "tokenization_openai.OpenAIGPTTokenizer.from_pretrained", "tokenization_gpt2.GPT2Tokenizer.from_pretrained", "tokenization_transfo_xl.TransfoXLTokenizer.from_pretrained", "tokenization_xlnet.XLNetTokenizer.from_pretrained", "tokenization_xlm.XLMTokenizer.from_pretrained", "tokenization_ctrl.CTRLTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a one of the tokenizer classes of the library\n        from a pre-trained model vocabulary.\n\n        The tokenizer class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `camembert`: CamembertTokenizer (CamemBERT model)\n            - contains `distilbert`: DistilBertTokenizer (DistilBert model)\n            - contains `roberta`: RobertaTokenizer (RoBERTa model)\n            - contains `bert`: BertTokenizer (Bert model)\n            - contains `openai-gpt`: OpenAIGPTTokenizer (OpenAI GPT model)\n            - contains `gpt2`: GPT2Tokenizer (OpenAI GPT-2 model)\n            - contains `ctrl`: CTRLTokenizer (Salesforce CTRL model)\n            - contains `transfo-xl`: TransfoXLTokenizer (Transformer-XL model)\n            - contains `xlnet`: XLNetTokenizer (XLNet model)\n            - contains `xlm`: XLMTokenizer (XLM model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a predefined tokenizer to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing vocabulary files required by the tokenizer, for instance saved using the :func:`~transformers.PreTrainedTokenizer.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - (not applicable to all derived classes) a path or url to a single saved vocabulary file if and only if the tokenizer only requires a single vocabulary file (e.g. Bert, XLNet), e.g.: ``./my_model_directory/vocab.txt``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded predefined tokenizer vocabulary files should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the vocabulary files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            inputs: (`optional`) positional arguments: will be passed to the Tokenizer ``__init__`` method.\n\n            kwargs: (`optional`) keyword arguments: will be passed to the Tokenizer ``__init__`` method. Can be used to set special tokens like ``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``, ``additional_special_tokens``. See parameters in the doc string of :class:`~transformers.PreTrainedTokenizer` for details.\n\n        Examples::\n\n            tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')    # Download vocabulary from S3 and cache.\n            tokenizer = AutoTokenizer.from_pretrained('./test/bert_saved_model/')  # E.g. tokenizer was saved using `save_pretrained('./test/saved_model/')`\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Tokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'camembert', 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlnet.XLNetConfig.__init__": [[74, 146], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "setattr", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "32000", ",", "\n", "d_model", "=", "1024", ",", "\n", "n_layer", "=", "24", ",", "\n", "n_head", "=", "16", ",", "\n", "d_inner", "=", "4096", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "ff_activation", "=", "\"gelu\"", ",", "\n", "untie_r", "=", "True", ",", "\n", "attn_type", "=", "\"bi\"", ",", "\n", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "\n", "dropout", "=", "0.1", ",", "\n", "mem_len", "=", "None", ",", "\n", "reuse_len", "=", "None", ",", "\n", "bi_data", "=", "False", ",", "\n", "clamp_len", "=", "-", "1", ",", "\n", "same_length", "=", "False", ",", "\n", "\n", "finetuning_task", "=", "None", ",", "\n", "num_labels", "=", "2", ",", "\n", "summary_type", "=", "'last'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "'tanh'", ",", "\n", "summary_last_dropout", "=", "0.1", ",", "\n", "start_n_top", "=", "5", ",", "\n", "end_n_top", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs XLNetConfig.\n        \"\"\"", "\n", "super", "(", "XLNetConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "n_token", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "assert", "d_model", "%", "n_head", "==", "0", "\n", "self", ".", "d_head", "=", "d_model", "//", "n_head", "\n", "self", ".", "ff_activation", "=", "ff_activation", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "untie_r", "=", "untie_r", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "reuse_len", "=", "reuse_len", "\n", "self", ".", "bi_data", "=", "bi_data", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "self", ".", "same_length", "=", "same_length", "\n", "\n", "self", ".", "finetuning_task", "=", "finetuning_task", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_last_dropout", "=", "summary_last_dropout", "\n", "self", ".", "start_n_top", "=", "start_n_top", "\n", "self", ".", "end_n_top", "=", "end_n_top", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlnet.XLNetConfig.max_position_embeddings": [[148, 151], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlnet.XLNetConfig.vocab_size": [[156, 159], ["None"], "methods", ["None"], ["", "@", "vocab_size", ".", "setter", "\n", "def", "vocab_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "n_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlnet.XLNetConfig.hidden_size": [[160, 163], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlnet.XLNetConfig.num_attention_heads": [[164, 167], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_xlnet.XLNetConfig.num_hidden_layers": [[168, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.__init__": [[87, 110], ["tokenization_utils.PreTrainedTokenizer.__init__", "json.load", "dict", "English", "English.Defaults.create_tokenizer", "io.open", "io.open().read().split", "tuple", "zip", "logger.warning", "tokenization_bert.BasicTokenizer", "tokenization_openai.OpenAIGPTTokenizer.encoder.items", "merge.split", "range", "io.open().read", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "try", ":", "\n", "            ", "import", "ftfy", "\n", "from", "spacy", ".", "lang", ".", "en", "import", "English", "\n", "_nlp", "=", "English", "(", ")", "\n", "self", ".", "nlp", "=", "_nlp", ".", "Defaults", ".", "create_tokenizer", "(", "_nlp", ")", "\n", "self", ".", "fix_text", "=", "ftfy", ".", "fix_text", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"ftfy or spacy is not installed using BERT BasicTokenizer instead of SpaCy & ftfy.\"", ")", "\n", "self", ".", "nlp", "=", "BasicTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "self", ".", "fix_text", "=", "None", "\n", "\n", "", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.vocab_size": [[111, 114], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe": [[115, 157], ["tokenization_openai.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenization_openai.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_openai.OpenAIGPTTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "if", "word", "==", "'\\n  </w>'", ":", "\n", "            ", "word", "=", "'\\n</w>'", "\n", "", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer._tokenize": [[158, 172], ["tokenization_openai.OpenAIGPTTokenizer.nlp.tokenize", "tokenization_openai.OpenAIGPTTokenizer.nlp", "split_tokens.extend", "tokenization_openai.text_standardize", "split_tokens.extend", "tokenization_openai.OpenAIGPTTokenizer.fix_text", "tokenization_openai.OpenAIGPTTokenizer.bpe().split", "tokenization_openai.OpenAIGPTTokenizer.bpe().split", "tokenization_openai.OpenAIGPTTokenizer.bpe", "tokenization_openai.OpenAIGPTTokenizer.bpe", "token.text.lower"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.text_standardize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Tokenize a string. \"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "fix_text", "is", "None", ":", "\n", "# Using BERT's BasicTokenizer", "\n", "            ", "text", "=", "self", ".", "nlp", ".", "tokenize", "(", "text", ")", "\n", "for", "token", "in", "text", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "else", ":", "\n", "# Using SpaCy & ftfy (original tokenization process of OpenAI GPT)", "\n", "            ", "text", "=", "self", ".", "nlp", "(", "text_standardize", "(", "self", ".", "fix_text", "(", "text", ")", ")", ")", "\n", "for", "token", "in", "text", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ".", "text", ".", "lower", "(", ")", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id": [[173, 176], ["tokenization_openai.OpenAIGPTTokenizer.encoder.get", "tokenization_openai.OpenAIGPTTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token": [[177, 180], ["tokenization_openai.OpenAIGPTTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an id in a token (BPE) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string": [[181, 185], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary": [[186, 209], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_openai.OpenAIGPTTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.get_pairs": [[50, 61], ["set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n    Return set of symbol pairs in a word.\n    word is represented as tuple of symbols (symbols being variable-length strings)\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_openai.text_standardize": [[62, 76], ["re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub.strip"], "function", ["None"], ["", "def", "text_standardize", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    fixes some issues the spacy tokenizer had on books corpus\n    also does some whitespace standardization\n    \"\"\"", "\n", "text", "=", "text", ".", "replace", "(", "'\u2014'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2013'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2015'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2026'", ",", "'...'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u00b4'", ",", "\"'\"", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'''(-+|~+|!+|\"+|;+|\\?+|\\++|,+|\\)+|\\(+|\\\\+|\\/+|\\*+|\\[+|\\]+|}+|{+|\\|+|_+)'''", ",", "r' \\1 '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\s*\\n\\s*'", ",", "' \\n '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'[^\\S\\n]+'", ",", "' '", ",", "text", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch": [[29, 41], ["transformers.BertConfig.from_json_file", "print", "transformers.BertForPreTraining", "transformers.load_tf_weights_in_bert", "print", "torch.save", "transformers.BertForPreTraining.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.load_tf_weights_in_bert"], ["def", "convert_tf_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_path", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "BertForPreTraining", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_auto.AutoConfig.__init__": [[58, 60], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoConfig is designed to be instantiated \"", "\n", "\"using the `AutoConfig.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.configuration_auto.AutoConfig.from_pretrained": [[62, 143], ["ValueError", "configuration_distilbert.DistilBertConfig.from_pretrained", "configuration_camembert.CamembertConfig.from_pretrained", "configuration_roberta.RobertaConfig.from_pretrained", "configuration_bert.BertConfig.from_pretrained", "configuration_openai.OpenAIGPTConfig.from_pretrained", "configuration_gpt2.GPT2Config.from_pretrained", "configuration_transfo_xl.TransfoXLConfig.from_pretrained", "configuration_xlnet.XLNetConfig.from_pretrained", "configuration_xlm.XLMConfig.from_pretrained", "configuration_ctrl.CTRLConfig.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a one of the configuration classes of the library\n        from a pre-trained model configuration.\n\n        The configuration class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertConfig (DistilBERT model)\n            - contains `bert`: BertConfig (Bert model)\n            - contains `openai-gpt`: OpenAIGPTConfig (OpenAI GPT model)\n            - contains `gpt2`: GPT2Config (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLConfig (Transformer-XL model)\n            - contains `xlnet`: XLNetConfig (XLNet model)\n            - contains `xlm`: XLMConfig (XLM model)\n            - contains `roberta`: RobertaConfig (RoBERTa model)\n            - contains `camembert`: CamembertConfig (CamemBERT model)\n            - contains `ctrl` : CTRLConfig (CTRL model)\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            config = AutoConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = AutoConfig.from_pretrained('./test/bert_saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = AutoConfig.from_pretrained('./test/bert_saved_model/my_configuration.json')\n            config = AutoConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = AutoConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Config", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'camembert', 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_ctrl_test.CTRLTokenizationTest.setUp": [[29, 44], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "io.open", "fp.write", "io.open", "fp.write", "range", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "CTRLTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "'adapt'", ",", "'re@@'", ",", "'a@@'", ",", "'apt'", ",", "'c@@'", ",", "'t'", ",", "'<unk>'", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "'a p'", ",", "'ap t</w>'", ",", "'r e'", ",", "'a d'", ",", "'ad apt</w>'", ",", "''", "]", "\n", "self", ".", "special_tokens_map", "=", "{", "\"unk_token\"", ":", "\"<unk>\"", "}", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_ctrl_test.CTRLTokenizationTest.get_tokenizer": [[45, 48], ["kwargs.update", "transformers.tokenization_ctrl.CTRLTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "special_tokens_map", ")", "\n", "return", "CTRLTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_ctrl_test.CTRLTokenizationTest.get_input_output_texts": [[49, 53], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"adapt react readapt apt\"", "\n", "output_text", "=", "u\"adapt react readapt apt\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_ctrl_test.CTRLTokenizationTest.test_full_tokenizer": [[54, 66], ["transformers.tokenization_ctrl.CTRLTokenizer", "transformers.tokenization_ctrl.CTRLTokenizer.tokenize", "tokenization_ctrl_test.CTRLTokenizationTest.assertListEqual", "tokenization_ctrl_test.CTRLTokenizationTest.assertListEqual", "transformers.tokenization_ctrl.CTRLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "CTRLTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ",", "**", "self", ".", "special_tokens_map", ")", "\n", "text", "=", "\"adapt react readapt apt\"", "\n", "bpe_tokens", "=", "'adapt re@@ a@@ c@@ t re@@ adapt apt'", ".", "split", "(", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "unk_token", "]", "\n", "\n", "input_bpe_tokens", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "1", ",", "0", ",", "3", ",", "6", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_gpt2_test.GPT2ModelTest.setUp": [[219, 222], ["GPT2ModelTest.GPT2ModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "GPT2ModelTest", ".", "GPT2ModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "GPT2Config", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_gpt2_test.GPT2ModelTest.test_config": [[223, 225], ["modeling_gpt2_test.GPT2ModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_gpt2_test.GPT2ModelTest.test_gpt2_model": [[226, 229], ["modeling_gpt2_test.GPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_gpt2_test.GPT2ModelTest.model_tester.create_and_check_gpt2_model"], "methods", ["None"], ["", "def", "test_gpt2_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_gpt2_test.GPT2ModelTest.test_gpt2_lm_head_model": [[230, 233], ["modeling_gpt2_test.GPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_gpt2_test.GPT2ModelTest.model_tester.create_and_check_lm_head_model"], "methods", ["None"], ["", "def", "test_gpt2_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_gpt2_test.GPT2ModelTest.test_gpt2_double_lm_head_model": [[234, 237], ["modeling_gpt2_test.GPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_gpt2_test.GPT2ModelTest.model_tester.create_and_check_double_lm_head_model"], "methods", ["None"], ["", "def", "test_gpt2_double_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_double_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_gpt2_test.GPT2ModelTest.test_model_from_pretrained": [[238, 245], ["list", "GPT2Model.from_pretrained", "shutil.rmtree", "modeling_gpt2_test.GPT2ModelTest.assertIsNotNone", "GPT2_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "GPT2_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "GPT2Model", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_openai_test.OpenAIGPTModelTest.setUp": [[187, 190], ["OpenAIGPTModelTest.OpenAIGPTModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "OpenAIGPTModelTest", ".", "OpenAIGPTModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "OpenAIGPTConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_openai_test.OpenAIGPTModelTest.test_config": [[191, 193], ["modeling_openai_test.OpenAIGPTModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_openai_test.OpenAIGPTModelTest.test_openai_gpt_model": [[194, 197], ["modeling_openai_test.OpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_openai_test.OpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_model"], "methods", ["None"], ["", "def", "test_openai_gpt_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_openai_test.OpenAIGPTModelTest.test_openai_gpt_lm_head_model": [[198, 201], ["modeling_openai_test.OpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_openai_test.OpenAIGPTModelTest.model_tester.create_and_check_lm_head_model"], "methods", ["None"], ["", "def", "test_openai_gpt_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_openai_test.OpenAIGPTModelTest.test_openai_gpt_double_lm_head_model": [[202, 205], ["modeling_openai_test.OpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_openai_test.OpenAIGPTModelTest.model_tester.create_and_check_double_lm_head_model"], "methods", ["None"], ["", "def", "test_openai_gpt_double_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_double_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_openai_test.OpenAIGPTModelTest.test_model_from_pretrained": [[206, 213], ["list", "OpenAIGPTModel.from_pretrained", "shutil.rmtree", "modeling_openai_test.OpenAIGPTModelTest.assertIsNotNone", "OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "OpenAIGPTModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ConfigTester.__init__": [[725, 729], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "config_class", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "parent", "=", "parent", "\n", "self", ".", "config_class", "=", "config_class", "\n", "self", ".", "inputs_dict", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ConfigTester.create_and_test_config_common_properties": [[730, 736], ["modeling_common_test.ConfigTester.config_class", "modeling_common_test.ConfigTester.parent.assertTrue", "modeling_common_test.ConfigTester.parent.assertTrue", "modeling_common_test.ConfigTester.parent.assertTrue", "modeling_common_test.ConfigTester.parent.assertTrue", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "create_and_test_config_common_properties", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'vocab_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'hidden_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_attention_heads'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_hidden_layers'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ConfigTester.create_and_test_config_to_json_string": [[737, 742], ["modeling_common_test.ConfigTester.config_class", "json.loads", "modeling_common_test.ConfigTester.inputs_dict.items", "modeling_common_test.ConfigTester.to_json_string", "modeling_common_test.ConfigTester.parent.assertEqual"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "create_and_test_config_to_json_string", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "obj", "=", "json", ".", "loads", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "inputs_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "parent", ".", "assertEqual", "(", "obj", "[", "key", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ConfigTester.create_and_test_config_to_json_file": [[743, 750], ["modeling_common_test.ConfigTester.config_class", "os.path.join", "modeling_common_test.ConfigTester.to_json_file", "modeling_common_test.ConfigTester.config_class.from_json_file", "os.remove", "modeling_common_test.ConfigTester.parent.assertEqual", "os.getcwd", "modeling_common_test.ConfigTester.to_dict", "modeling_common_test.ConfigTester.to_dict", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "", "def", "create_and_test_config_to_json_file", "(", "self", ")", ":", "\n", "        ", "config_first", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "json_file_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"config_\"", "+", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "+", "\".json\"", ")", "\n", "config_first", ".", "to_json_file", "(", "json_file_path", ")", "\n", "config_second", "=", "self", ".", "config_class", ".", "from_json_file", "(", "json_file_path", ")", "\n", "os", ".", "remove", "(", "json_file_path", ")", "\n", "self", ".", "parent", ".", "assertEqual", "(", "config_second", ".", "to_dict", "(", ")", ",", "config_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ConfigTester.run_common_tests": [[751, 755], ["modeling_common_test.ConfigTester.create_and_test_config_common_properties", "modeling_common_test.ConfigTester.create_and_test_config_to_json_string", "modeling_common_test.ConfigTester.create_and_test_config_to_json_file"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_common_properties", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_string", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_file"], ["", "def", "run_common_tests", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_and_test_config_common_properties", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_string", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ModelUtilsTest.test_model_from_pretrained": [[793, 813], ["logging.basicConfig", "list", "BertConfig.from_pretrained", "modeling_common_test.ModelUtilsTest.assertIsNotNone", "modeling_common_test.ModelUtilsTest.assertIsInstance", "BertModel.from_pretrained", "BertModel.from_pretrained", "modeling_common_test.ModelUtilsTest.assertIsNotNone", "modeling_common_test.ModelUtilsTest.assertIsInstance", "loading_info.values", "BertConfig.from_pretrained", "BertModel.from_pretrained", "modeling_common_test.ModelUtilsTest.assertEqual", "modeling_common_test.ModelUtilsTest.assertEqual", "modeling_common_test.ModelUtilsTest.assertEqual", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys", "modeling_common_test.ModelUtilsTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "BertConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "PretrainedConfig", ")", "\n", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "PreTrainedModel", ")", "\n", "for", "value", "in", "loading_info", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "value", ")", ",", "0", ")", "\n", "\n", "", "config", "=", "BertConfig", ".", "from_pretrained", "(", "model_name", ",", "output_attentions", "=", "True", ",", "output_hidden_states", "=", "True", ")", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ",", "output_attentions", "=", "True", ",", "output_hidden_states", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "config", ".", "output_attentions", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "config", ".", "output_hidden_states", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "config", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test._config_zero_init": [[59, 65], ["copy.deepcopy", "copy.deepcopy.__dict__.keys", "setattr"], "function", ["None"], ["", "def", "_config_zero_init", "(", "config", ")", ":", "\n", "    ", "configs_no_init", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "for", "key", "in", "configs_no_init", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'_range'", "in", "key", "or", "'_std'", "in", "key", ":", "\n", "            ", "setattr", "(", "configs_no_init", ",", "key", ",", "0.0", ")", "\n", "", "", "return", "configs_no_init", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.ids_tensor": [[760, 774], ["range", "torch.tensor().view().contiguous", "values.append", "rng.randint", "torch.tensor().view", "torch.tensor"], "function", ["None"], ["def", "ids_tensor", "(", "shape", ",", "vocab_size", ",", "rng", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random int32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "global_rng", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "        ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "        ", "values", ".", "append", "(", "rng", ".", "randint", "(", "0", ",", "vocab_size", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "data", "=", "values", ",", "dtype", "=", "torch", ".", "long", ")", ".", "view", "(", "shape", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_common_test.floats_tensor": [[776, 790], ["range", "torch.tensor().view().contiguous", "values.append", "torch.tensor().view", "rng.random", "torch.tensor"], "function", ["None"], ["", "def", "floats_tensor", "(", "shape", ",", "scale", "=", "1.0", ",", "rng", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random float32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "global_rng", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "        ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "        ", "values", ".", "append", "(", "rng", ".", "random", "(", ")", "*", "scale", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "data", "=", "values", ",", "dtype", "=", "torch", ".", "float", ")", ".", "view", "(", "shape", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.setUp": [[288, 291], ["XLMModelTest.XLMModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "XLMModelTest", ".", "XLMModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLMConfig", ",", "emb_dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_config": [[292, 294], ["modeling_xlm_test.XLMModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_xlm_model": [[295, 298], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_model"], "methods", ["None"], ["", "def", "test_xlm_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_xlm_lm_head": [[299, 302], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_lm_head"], "methods", ["None"], ["", "def", "test_xlm_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_xlm_simple_qa": [[303, 306], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_simple_qa"], "methods", ["None"], ["", "def", "test_xlm_simple_qa", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_simple_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_xlm_qa": [[307, 310], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_qa"], "methods", ["None"], ["", "def", "test_xlm_qa", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_xlm_sequence_classif": [[311, 314], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_sequence_classif"], "methods", ["None"], ["", "def", "test_xlm_sequence_classif", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlm_test.XLMModelTest.test_model_from_pretrained": [[315, 322], ["list", "XLMModel.from_pretrained", "shutil.rmtree", "modeling_xlm_test.XLMModelTest.assertIsNotNone", "XLM_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "XLM_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "XLMModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_ctrl_test.CTRLModelTest.setUp": [[190, 193], ["CTRLModelTest.CTRLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "CTRLModelTest", ".", "CTRLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "CTRLConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_ctrl_test.CTRLModelTest.test_config": [[194, 196], ["modeling_ctrl_test.CTRLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_ctrl_test.CTRLModelTest.test_ctrl_model": [[197, 200], ["modeling_ctrl_test.CTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_ctrl_test.CTRLModelTest.model_tester.create_and_check_ctrl_model"], "methods", ["None"], ["", "def", "test_ctrl_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_ctrl_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_ctrl_test.CTRLModelTest.test_ctrl_lm_head_model": [[201, 204], ["modeling_ctrl_test.CTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_ctrl_test.CTRLModelTest.model_tester.create_and_check_lm_head_model"], "methods", ["None"], ["", "def", "test_ctrl_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_ctrl_test.CTRLModelTest.test_model_from_pretrained": [[205, 212], ["list", "CTRLModel.from_pretrained", "shutil.rmtree", "modeling_ctrl_test.CTRLModelTest.assertIsNotNone", "CTRL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "CTRL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "CTRLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.__init__": [[31, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "config_class", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "parent", "=", "parent", "\n", "self", ".", "config_class", "=", "config_class", "\n", "self", ".", "inputs_dict", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_common_properties": [[36, 42], ["configuration_common_test.ConfigTester.config_class", "configuration_common_test.ConfigTester.parent.assertTrue", "configuration_common_test.ConfigTester.parent.assertTrue", "configuration_common_test.ConfigTester.parent.assertTrue", "configuration_common_test.ConfigTester.parent.assertTrue", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "create_and_test_config_common_properties", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'vocab_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'hidden_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_attention_heads'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_hidden_layers'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_string": [[43, 48], ["configuration_common_test.ConfigTester.config_class", "json.loads", "configuration_common_test.ConfigTester.inputs_dict.items", "configuration_common_test.ConfigTester.to_json_string", "configuration_common_test.ConfigTester.parent.assertEqual"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "create_and_test_config_to_json_string", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "obj", "=", "json", ".", "loads", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "inputs_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "parent", ".", "assertEqual", "(", "obj", "[", "key", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_file": [[49, 56], ["configuration_common_test.ConfigTester.config_class", "os.path.join", "configuration_common_test.ConfigTester.to_json_file", "configuration_common_test.ConfigTester.config_class.from_json_file", "os.remove", "configuration_common_test.ConfigTester.parent.assertEqual", "os.getcwd", "configuration_common_test.ConfigTester.to_dict", "configuration_common_test.ConfigTester.to_dict", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "", "def", "create_and_test_config_to_json_file", "(", "self", ")", ":", "\n", "        ", "config_first", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "json_file_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"config_\"", "+", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "+", "\".json\"", ")", "\n", "config_first", ".", "to_json_file", "(", "json_file_path", ")", "\n", "config_second", "=", "self", ".", "config_class", ".", "from_json_file", "(", "json_file_path", ")", "\n", "os", ".", "remove", "(", "json_file_path", ")", "\n", "self", ".", "parent", ".", "assertEqual", "(", "config_second", ".", "to_dict", "(", ")", ",", "config_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests": [[57, 61], ["configuration_common_test.ConfigTester.create_and_test_config_common_properties", "configuration_common_test.ConfigTester.create_and_test_config_to_json_string", "configuration_common_test.ConfigTester.create_and_test_config_to_json_file"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_common_properties", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_string", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_file"], ["", "def", "run_common_tests", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_and_test_config_common_properties", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_string", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.setUp": [[270, 273], ["TFXLNetModelTest.TFXLNetModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFXLNetModelTest", ".", "TFXLNetModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLNetConfig", ",", "d_inner", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_config": [[274, 276], ["modeling_tf_xlnet_test.TFXLNetModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_base_model": [[277, 281], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_base_model"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_base_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_base_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_lm_head": [[282, 286], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_lm_head"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_sequence_classif": [[287, 291], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_sequence_classif"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_sequence_classif", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_qa": [[292, 296], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_qa"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_qa", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_model_from_pretrained": [[297, 304], ["list", "TFXLNetModel.from_pretrained", "shutil.rmtree", "modeling_tf_xlnet_test.TFXLNetModelTest.assertIsNotNone", "TF_XLNET_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_XLNET_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFXLNetModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.setUp": [[203, 206], ["TFGPT2ModelTest.TFGPT2ModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFGPT2ModelTest", ".", "TFGPT2ModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "GPT2Config", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_config": [[207, 209], ["modeling_tf_gpt2_test.TFGPT2ModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_gpt2_model": [[210, 213], ["modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.create_and_check_gpt2_model"], "methods", ["None"], ["", "def", "test_gpt2_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_gpt2_lm_head": [[214, 217], ["modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.create_and_check_gpt2_lm_head"], "methods", ["None"], ["", "def", "test_gpt2_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_gpt2_double_head": [[218, 221], ["modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.create_and_check_gpt2_double_head"], "methods", ["None"], ["", "def", "test_gpt2_double_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_double_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_model_from_pretrained": [[222, 229], ["list", "TFGPT2Model.from_pretrained", "shutil.rmtree", "modeling_tf_gpt2_test.TFGPT2ModelTest.assertIsNotNone", "TF_GPT2_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_GPT2_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFGPT2Model", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_auto_test.TFAutoModelTest.test_model_from_pretrained": [[41, 55], ["modeling_tf_auto_test.TFAutoModelTest.assertTrue", "logging.basicConfig", "h5py.version.hdf5_version.startswith", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModel.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "import", "h5py", "\n", "self", ".", "assertTrue", "(", "h5py", ".", "version", ".", "hdf5_version", ".", "startswith", "(", "\"1.10\"", ")", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModel", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertModel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_auto_test.TFAutoModelTest.test_lmhead_model_from_pretrained": [[56, 67], ["logging.basicConfig", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModelWithLMHead.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "test_lmhead_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModelWithLMHead", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForMaskedLM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_auto_test.TFAutoModelTest.test_sequence_classification_model_from_pretrained": [[68, 79], ["logging.basicConfig", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModelForSequenceClassification.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "test_sequence_classification_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModelForSequenceClassification", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForSequenceClassification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_auto_test.TFAutoModelTest.test_question_answering_model_from_pretrained": [[80, 91], ["logging.basicConfig", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModelForQuestionAnswering.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "test_question_answering_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModelForQuestionAnswering", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForQuestionAnswering", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.setUp": [[190, 193], ["TFDistilBertModelTest.TFDistilBertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFDistilBertModelTest", ".", "TFDistilBertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "DistilBertConfig", ",", "dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_config": [[194, 196], ["modeling_tf_distilbert_test.TFDistilBertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_distilbert_model": [[197, 200], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_model"], "methods", ["None"], ["", "def", "test_distilbert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_for_masked_lm": [[201, 204], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_for_question_answering": [[205, 208], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_for_sequence_classification": [[209, 212], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.setUp": [[309, 312], ["BertModelTest.BertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "BertModelTest", ".", "BertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "BertConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_config": [[313, 315], ["modeling_bert_test.BertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_bert_model": [[316, 322], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_model"], "methods", ["None"], ["", "def", "test_bert_model", "(", "self", ",", "use_cuda", "=", "False", ")", ":", "\n", "# ^^ This could be a real fixture", "\n", "        ", "if", "use_cuda", ":", "\n", "            ", "self", ".", "model_tester", ".", "device", "=", "\"cuda\"", "\n", "", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_bert_model_as_decoder": [[323, 326], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs_for_decoder", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_model_as_decoder"], "methods", ["None"], ["", "def", "test_bert_model_as_decoder", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs_for_decoder", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model_as_decoder", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_masked_lm": [[327, 330], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_masked_lm_decoder": [[331, 334], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs_for_decoder", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_model_for_masked_lm_as_decoder"], "methods", ["None"], ["", "def", "test_for_masked_lm_decoder", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs_for_decoder", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model_for_masked_lm_as_decoder", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_multiple_choice": [[335, 338], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_multiple_choice"], "methods", ["None"], ["", "def", "test_for_multiple_choice", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_multiple_choice", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_next_sequence_prediction": [[339, 342], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_next_sequence_prediction"], "methods", ["None"], ["", "def", "test_for_next_sequence_prediction", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_next_sequence_prediction", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_pretraining": [[343, 346], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_pretraining"], "methods", ["None"], ["", "def", "test_for_pretraining", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_pretraining", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_question_answering": [[347, 350], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_sequence_classification": [[351, 354], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_for_token_classification": [[355, 358], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_token_classification"], "methods", ["None"], ["", "def", "test_for_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_bert_test.BertModelTest.test_model_from_pretrained": [[359, 366], ["list", "BertModel.from_pretrained", "shutil.rmtree", "modeling_bert_test.BertModelTest.assertIsNotNone", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.setUp": [[32, 38], ["super().setUp", "transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "XLNetTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# We have a SentencePiece fixture for testing", "\n", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "keep_accents", "=", "True", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "self", ".", "tmpdirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.get_tokenizer": [[39, 41], ["transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "XLNetTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.get_input_output_texts": [[42, 46], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"This is a test\"", "\n", "output_text", "=", "u\"This is a test\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_full_tokenizer": [[48, 75], ["transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_ids", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.convert_ids_to_tokens", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "keep_accents", "=", "True", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u'This is a test'", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "u'\u2581This'", ",", "u'\u2581is'", ",", "u'\u2581a'", ",", "u'\u2581t'", ",", "u'est'", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "285", ",", "46", ",", "10", ",", "170", ",", "382", "]", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u's'", ",", "u'\u00e9'", ",", "u'.'", "]", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "self", ".", "assertListEqual", "(", "\n", "ids", ",", "[", "8", ",", "21", ",", "84", ",", "55", ",", "24", ",", "19", ",", "7", ",", "0", ",", "\n", "602", ",", "347", ",", "347", ",", "347", ",", "3", ",", "12", ",", "66", ",", "\n", "46", ",", "72", ",", "80", ",", "6", ",", "0", ",", "4", "]", ")", "\n", "\n", "back_tokens", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "self", ".", "assertListEqual", "(", "back_tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "\n", "SPIECE_UNDERLINE", "+", "u''", ",", "u'<unk>'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "\n", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u's'", ",", "\n", "u'<unk>'", ",", "u'.'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_tokenizer_lower": [[76, 84], ["transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "do_lower_case", "=", "True", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u''", ",", "u'i'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u'se'", ",", "u'.'", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"H\\u00E9llo\"", ")", ",", "[", "u\"\u2581he\"", ",", "u\"ll\"", ",", "u\"o\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_tokenizer_no_lower": [[85, 92], ["transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_tokenizer_no_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "do_lower_case", "=", "False", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "u'or'", ",", "\n", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u'se'", ",", "u'.'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_sequence_builders": [[93, 105], ["transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.encode", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.encode", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", ".", "from_pretrained", "(", "\"xlnet-base-cased\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "text", "+", "[", "4", ",", "3", "]", "\n", "assert", "encoded_pair", "==", "text", "+", "[", "4", "]", "+", "text_2", "+", "[", "4", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_transfo_xl_test.TransfoXLModelTest.setUp": [[188, 191], ["TransfoXLModelTest.TransfoXLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TransfoXLModelTest", ".", "TransfoXLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "TransfoXLConfig", ",", "d_embed", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_config": [[192, 194], ["modeling_transfo_xl_test.TransfoXLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_transfo_xl_model": [[195, 200], ["modeling_transfo_xl_test.TransfoXLModelTest.model_tester.set_seed", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.create_transfo_xl_model", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.check_transfo_xl_model_output"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_transfo_xl_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "output_result", "=", "self", ".", "model_tester", ".", "create_transfo_xl_model", "(", "*", "config_and_inputs", ")", "\n", "self", ".", "model_tester", ".", "check_transfo_xl_model_output", "(", "output_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_transfo_xl_lm_head": [[201, 206], ["modeling_transfo_xl_test.TransfoXLModelTest.model_tester.set_seed", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.create_transfo_xl_lm_head", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.check_transfo_xl_lm_head_output"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_transfo_xl_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "output_result", "=", "self", ".", "model_tester", ".", "create_transfo_xl_lm_head", "(", "*", "config_and_inputs", ")", "\n", "self", ".", "model_tester", ".", "check_transfo_xl_lm_head_output", "(", "output_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_model_from_pretrained": [[207, 214], ["list", "TransfoXLModel.from_pretrained", "shutil.rmtree", "modeling_transfo_xl_test.TransfoXLModelTest.assertIsNotNone", "TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TransfoXLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_utils_test.TokenizerUtilsTest.check_tokenizer_from_pretrained": [[27, 43], ["list", "tokenizer_class.max_model_input_sizes.keys", "tokenizer_class.from_pretrained", "tokenization_utils_test.TokenizerUtilsTest.assertIsNotNone", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenizer_class.from_pretrained.convert_tokens_to_ids", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "check_tokenizer_from_pretrained", "(", "self", ",", "tokenizer_class", ")", ":", "\n", "        ", "s3_models", "=", "list", "(", "tokenizer_class", ".", "max_model_input_sizes", ".", "keys", "(", ")", ")", "\n", "for", "model_name", "in", "s3_models", "[", ":", "1", "]", ":", "\n", "            ", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "tokenizer", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "tokenizer_class", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "PreTrainedTokenizer", ")", "\n", "\n", "for", "special_tok", "in", "tokenizer", ".", "all_special_tokens", ":", "\n", "                ", "if", "six", ".", "PY2", ":", "\n", "                    ", "self", ".", "assertIsInstance", "(", "special_tok", ",", "unicode", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "assertIsInstance", "(", "special_tok", ",", "str", ")", "\n", "", "special_tok_id", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "special_tok", ")", "\n", "self", ".", "assertIsInstance", "(", "special_tok_id", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_utils_test.TokenizerUtilsTest.test_pretrained_tokenizers": [[44, 46], ["tokenization_utils_test.TokenizerUtilsTest.check_tokenizer_from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_utils_test.TokenizerUtilsTest.check_tokenizer_from_pretrained"], ["", "", "", "def", "test_pretrained_tokenizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_tokenizer_from_pretrained", "(", "GPT2Tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.setUp": [[30, 47], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "open", "fp.write", "open", "fp.write", "range", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"w</w>\"", ",", "\"r</w>\"", ",", "\"t</w>\"", ",", "\n", "\"lo\"", ",", "\"low\"", ",", "\"er</w>\"", ",", "\n", "\"low</w>\"", ",", "\"lowest</w>\"", ",", "\"newer</w>\"", ",", "\"wider</w>\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "\"l o\"", ",", "\"lo w\"", ",", "\"e r</w>\"", ",", "\"\"", "]", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.get_tokenizer": [[48, 50], ["transformers.tokenization_openai.OpenAIGPTTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "OpenAIGPTTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.get_input_output_texts": [[51, 55], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.test_full_tokenizer": [[57, 69], ["transformers.tokenization_openai.OpenAIGPTTokenizer", "transformers.tokenization_openai.OpenAIGPTTokenizer.tokenize", "tokenization_openai_test.OpenAIGPTTokenizationTest.assertListEqual", "tokenization_openai_test.OpenAIGPTTokenizationTest.assertListEqual", "transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "OpenAIGPTTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ")", "\n", "\n", "text", "=", "\"lower\"", "\n", "bpe_tokens", "=", "[", "\"low\"", ",", "\"er</w>\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "\"<unk>\"", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "20", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_gpt2_test.GPT2TokenizationTest.setUp": [[30, 48], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "io.open", "fp.write", "io.open", "fp.write", "range", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "GPT2TokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"\\u0120\"", ",", "\"\\u0120l\"", ",", "\"\\u0120n\"", ",", "\n", "\"\\u0120lo\"", ",", "\"\\u0120low\"", ",", "\"er\"", ",", "\n", "\"\\u0120lowest\"", ",", "\"\\u0120newer\"", ",", "\"\\u0120wider\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "\"\\u0120 l\"", ",", "\"\\u0120l o\"", ",", "\"\\u0120lo w\"", ",", "\"e r\"", ",", "\"\"", "]", "\n", "self", ".", "special_tokens_map", "=", "{", "\"unk_token\"", ":", "\"<unk>\"", "}", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_gpt2_test.GPT2TokenizationTest.get_tokenizer": [[49, 52], ["kwargs.update", "transformers.tokenization_gpt2.GPT2Tokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "special_tokens_map", ")", "\n", "return", "GPT2Tokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_gpt2_test.GPT2TokenizationTest.get_input_output_texts": [[53, 57], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_gpt2_test.GPT2TokenizationTest.test_full_tokenizer": [[58, 69], ["transformers.tokenization_gpt2.GPT2Tokenizer", "transformers.tokenization_gpt2.GPT2Tokenizer.tokenize", "tokenization_gpt2_test.GPT2TokenizationTest.assertListEqual", "tokenization_gpt2_test.GPT2TokenizationTest.assertListEqual", "transformers.tokenization_gpt2.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "GPT2Tokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ",", "**", "self", ".", "special_tokens_map", ")", "\n", "text", "=", "\"lower newer\"", "\n", "bpe_tokens", "=", "[", "\"\\u0120low\"", ",", "\"er\"", ",", "\"\\u0120\"", ",", "\"n\"", ",", "\"e\"", ",", "\"w\"", ",", "\"er\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ",", "add_prefix_space", "=", "True", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "unk_token", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "10", ",", "9", ",", "3", ",", "2", ",", "15", ",", "19", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_ctrl_test.TFCTRLModelTest.setUp": [[176, 179], ["TFCTRLModelTest.TFCTRLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFCTRLModelTest", ".", "TFCTRLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "CTRLConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_config": [[180, 182], ["modeling_tf_ctrl_test.TFCTRLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_ctrl_model": [[183, 186], ["modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.create_and_check_ctrl_model"], "methods", ["None"], ["", "def", "test_ctrl_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_ctrl_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_ctrl_lm_head": [[187, 190], ["modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.create_and_check_ctrl_lm_head"], "methods", ["None"], ["", "def", "test_ctrl_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_ctrl_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_model_from_pretrained": [[191, 198], ["list", "TFCTRLModel.from_pretrained", "shutil.rmtree", "modeling_tf_ctrl_test.TFCTRLModelTest.assertIsNotNone", "TF_CTRL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_CTRL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFCTRLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.setUp": [[205, 208], ["DistilBertModelTest.DistilBertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "DistilBertModelTest", ".", "DistilBertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "DistilBertConfig", ",", "dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.test_config": [[209, 211], ["modeling_distilbert_test.DistilBertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.test_distilbert_model": [[212, 215], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_model"], "methods", ["None"], ["", "def", "test_distilbert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.test_for_masked_lm": [[216, 219], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.test_for_question_answering": [[220, 223], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.test_for_sequence_classification": [[224, 227], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_distilbert_test.DistilBertModelTest.test_for_token_classification": [[228, 231], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_token_classification"], "methods", ["None"], ["", "def", "test_for_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_encoder_decoder_test.EncoderDecoderModelTest.test_model2model_from_pretrained": [[30, 39], ["logging.basicConfig", "list", "Model2Model.from_pretrained", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertIsInstance", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertIsInstance", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertEqual", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertEqual", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model2model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "Model2Model", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "encoder", ",", "BertModel", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "decoder", ",", "BertForMaskedLM", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "decoder", ".", "config", ".", "is_decoder", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "encoder", ".", "config", ".", "is_decoder", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_encoder_decoder_test.EncoderDecoderModelTest.test_model2model_from_pretrained_not_bert": [[40, 50], ["logging.basicConfig", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertRaises", "Model2Model.from_pretrained", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertRaises", "Model2Model.from_pretrained", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertRaises", "Model2Model.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "test_model2model_from_pretrained_not_bert", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "Model2Model", ".", "from_pretrained", "(", "'roberta'", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "Model2Model", ".", "from_pretrained", "(", "'distilbert'", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "Model2Model", ".", "from_pretrained", "(", "'does-not-exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelTest.setUp": [[183, 186], ["RobertaModelTest.RobertaModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "RobertaModelTest", ".", "RobertaModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "RobertaConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelTest.test_config": [[187, 189], ["modeling_roberta_test.RobertaModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelTest.test_roberta_model": [[190, 193], ["modeling_roberta_test.RobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_roberta_test.RobertaModelTest.model_tester.create_and_check_roberta_model"], "methods", ["None"], ["", "def", "test_roberta_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelTest.test_for_masked_lm": [[194, 197], ["modeling_roberta_test.RobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_roberta_test.RobertaModelTest.model_tester.create_and_check_roberta_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelTest.test_model_from_pretrained": [[198, 205], ["list", "RobertaModel.from_pretrained", "shutil.rmtree", "modeling_roberta_test.RobertaModelTest.assertIsNotNone", "ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "RobertaModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelIntegrationTest.test_inference_masked_lm": [[210, 229], ["RobertaForMaskedLM.from_pretrained", "torch.tensor", "torch.Size", "modeling_roberta_test.RobertaModelIntegrationTest.assertEqual", "torch.Tensor", "modeling_roberta_test.RobertaModelIntegrationTest.assertTrue", "RobertaForMaskedLM.from_pretrained.", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_inference_masked_lm", "(", "self", ")", ":", "\n", "        ", "model", "=", "RobertaForMaskedLM", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "torch", ".", "Size", "(", "(", "1", ",", "11", ",", "50265", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "output", ".", "shape", ",", "\n", "expected_shape", "\n", ")", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "[", "33.8843", ",", "-", "4.3107", ",", "22.7779", "]", ",", "\n", "[", "4.6533", ",", "-", "2.8099", ",", "13.6252", "]", ",", "\n", "[", "1.8222", ",", "-", "3.6898", ",", "8.8600", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "expected_slice", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelIntegrationTest.test_inference_no_head": [[231, 245], ["RobertaModel.from_pretrained", "torch.tensor", "torch.Tensor", "modeling_roberta_test.RobertaModelIntegrationTest.assertTrue", "RobertaModel.from_pretrained.", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_inference_no_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "RobertaModel", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "[", "-", "0.0231", ",", "0.0782", ",", "0.0074", "]", ",", "\n", "[", "-", "0.1854", ",", "0.0539", ",", "-", "0.0174", "]", ",", "\n", "[", "0.0548", ",", "0.0799", ",", "0.1687", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "expected_slice", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_roberta_test.RobertaModelIntegrationTest.test_inference_classification_head": [[247, 261], ["RobertaForSequenceClassification.from_pretrained", "torch.tensor", "torch.Size", "modeling_roberta_test.RobertaModelIntegrationTest.assertEqual", "torch.Tensor", "modeling_roberta_test.RobertaModelIntegrationTest.assertTrue", "RobertaForSequenceClassification.from_pretrained.", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_inference_classification_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "RobertaForSequenceClassification", ".", "from_pretrained", "(", "'roberta-large-mnli'", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "torch", ".", "Size", "(", "(", "1", ",", "3", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "output", ".", "shape", ",", "\n", "expected_shape", "\n", ")", "\n", "expected_tensor", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "0.9469", ",", "0.3913", ",", "0.5118", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "allclose", "(", "output", ",", "expected_tensor", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.setUp": [[202, 205], ["TFOpenAIGPTModelTest.TFOpenAIGPTModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFOpenAIGPTModelTest", ".", "TFOpenAIGPTModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "OpenAIGPTConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_config": [[206, 208], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_openai_gpt_model": [[209, 212], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_model"], "methods", ["None"], ["", "def", "test_openai_gpt_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_openai_gpt_lm_head": [[213, 216], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_lm_head"], "methods", ["None"], ["", "def", "test_openai_gpt_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_openai_gpt_double_head": [[217, 220], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_double_head"], "methods", ["None"], ["", "def", "test_openai_gpt_double_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_double_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_model_from_pretrained": [[221, 228], ["list", "TFOpenAIGPTModel.from_pretrained", "shutil.rmtree", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.assertIsNotNone", "TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFOpenAIGPTModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.setUp": [[297, 300], ["XLNetModelTest.XLNetModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "XLNetModelTest", ".", "XLNetModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLNetConfig", ",", "d_inner", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.test_config": [[301, 303], ["modeling_xlnet_test.XLNetModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_base_model": [[304, 308], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_base_model"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_base_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_base_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_lm_head": [[309, 313], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_lm_head"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_sequence_classif": [[314, 318], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_sequence_classif"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_sequence_classif", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_qa": [[319, 323], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_qa"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_xlnet_qa", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_xlnet_test.XLNetModelTest.test_model_from_pretrained": [[324, 331], ["list", "XLNetModel.from_pretrained", "shutil.rmtree", "modeling_xlnet_test.XLNetModelTest.assertIsNotNone", "XLNET_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "XLNET_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "XLNetModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_distilbert_test.DistilBertTokenizationTest.get_tokenizer": [[31, 33], ["transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DistilBertTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_distilbert_test.DistilBertTokenizationTest.test_sequence_builders": [[34, 47], ["transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.encode", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.encode", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "DistilBertTokenizer", ".", "from_pretrained", "(", "\"distilbert-base-uncased\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "tokenizer", ".", "cls_token_id", "]", "+", "text", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "assert", "encoded_pair", "==", "[", "tokenizer", ".", "cls_token_id", "]", "+", "text", "+", "[", "tokenizer", ".", "sep_token_id", "]", "+", "text_2", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.OptimizationTest.assertListAlmostEqual": [[63, 67], ["optimization_test.OptimizationTest.assertEqual", "zip", "len", "len", "optimization_test.OptimizationTest.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "assertListAlmostEqual", "(", "self", ",", "list1", ",", "list2", ",", "tol", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "list1", ")", ",", "len", "(", "list2", ")", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "list1", ",", "list2", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "a", ",", "b", ",", "delta", "=", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.OptimizationTest.test_adam_w": [[68, 81], ["torch.tensor", "torch.tensor", "torch.nn.MSELoss", "AdamW", "range", "optimization_test.OptimizationTest.assertListAlmostEqual", "torch.nn.MSELoss.", "torch.nn.MSELoss.backward", "AdamW.step", "torch.tensor.grad.detach_", "torch.tensor.grad.zero_", "torch.tensor.tolist"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step"], ["", "", "def", "test_adam_w", "(", "self", ")", ":", "\n", "        ", "w", "=", "torch", ".", "tensor", "(", "[", "0.1", ",", "-", "0.2", ",", "-", "0.1", "]", ",", "requires_grad", "=", "True", ")", "\n", "target", "=", "torch", ".", "tensor", "(", "[", "0.4", ",", "0.2", ",", "-", "0.5", "]", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "# No warmup, constant schedule, no gradient clipping", "\n", "optimizer", "=", "AdamW", "(", "params", "=", "[", "w", "]", ",", "lr", "=", "2e-1", ",", "weight_decay", "=", "0.0", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "loss", "=", "criterion", "(", "w", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "w", ".", "grad", ".", "detach_", "(", ")", "# No zero_grad() function on simple tensors. we do it ourselves.", "\n", "w", ".", "grad", ".", "zero_", "(", ")", "\n", "", "self", ".", "assertListAlmostEqual", "(", "w", ".", "tolist", "(", ")", ",", "[", "0.4", ",", "0.2", ",", "-", "0.5", "]", ",", "tol", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.assertListAlmostEqual": [[88, 92], ["optimization_test.ScheduleInitTest.assertEqual", "zip", "len", "len", "optimization_test.ScheduleInitTest.assertAlmostEqual"], "methods", ["None"], ["def", "assertListAlmostEqual", "(", "self", ",", "list1", ",", "list2", ",", "tol", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "list1", ")", ",", "len", "(", "list2", ")", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "list1", ",", "list2", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "a", ",", "b", ",", "delta", "=", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.test_constant_scheduler": [[93, 103], ["get_constant_schedule", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListEqual", "get_constant_schedule", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_constant_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_constant_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "", "def", "test_constant_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_constant_schedule", "(", "self", ".", "optimizer", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "10.", "]", "*", "self", ".", "num_steps", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ")", "\n", "\n", "scheduler", "=", "get_constant_schedule", "(", "self", ".", "optimizer", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.test_warmup_constant_scheduler": [[104, 114], ["get_constant_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListEqual", "get_constant_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_constant_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_constant_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_constant_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_constant_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "4", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "2.5", ",", "5.0", ",", "7.5", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ")", "\n", "\n", "scheduler", "=", "get_constant_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "4", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.test_warmup_linear_scheduler": [[115, 125], ["get_linear_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListEqual", "get_linear_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_linear_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "5.0", ",", "10.0", ",", "8.75", ",", "7.5", ",", "6.25", ",", "5.0", ",", "3.75", ",", "2.5", ",", "1.25", ",", "0.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ")", "\n", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.test_warmup_cosine_scheduler": [[126, 136], ["get_cosine_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListAlmostEqual", "get_cosine_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_cosine_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_cosine_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_cosine_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "5.0", ",", "10.0", ",", "9.61", ",", "8.53", ",", "6.91", ",", "5.0", ",", "3.08", ",", "1.46", ",", "0.38", ",", "0.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ",", "tol", "=", "1e-2", ")", "\n", "\n", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.test_warmup_cosine_hard_restart_scheduler": [[137, 147], ["get_cosine_with_hard_restarts_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListAlmostEqual", "get_cosine_with_hard_restarts_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.ScheduleInitTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_cosine_hard_restart_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_cycles", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "5.0", ",", "10.0", ",", "8.53", ",", "5.0", ",", "1.46", ",", "10.0", ",", "8.53", ",", "5.0", ",", "1.46", ",", "0.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ",", "tol", "=", "1e-2", ")", "\n", "\n", "scheduler", "=", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_cycles", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_schedule": [[40, 46], ["range", "scheduler.step", "lrs.append", "scheduler.get_lr"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step"], ["def", "unwrap_schedule", "(", "scheduler", ",", "num_steps", "=", "10", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lrs", ".", "append", "(", "scheduler", ".", "get_lr", "(", ")", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.optimization_test.unwrap_and_save_reload_schedule": [[47, 60], ["range", "scheduler.step", "lrs.append", "scheduler.get_lr", "tokenization_tests_commons.TemporaryDirectory", "os.path.join", "torch.save", "torch.load", "scheduler.load_state_dict", "scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step"], ["", "def", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "num_steps", "=", "10", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lrs", ".", "append", "(", "scheduler", ".", "get_lr", "(", ")", ")", "\n", "if", "step", "==", "num_steps", "//", "2", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "                ", "file_name", "=", "os", ".", "path", ".", "join", "(", "tmpdirname", ",", "'schedule.bin'", ")", "\n", "torch", ".", "save", "(", "scheduler", ".", "state_dict", "(", ")", ",", "file_name", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "scheduler", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_roberta_test.RobertaTokenizationTest.setUp": [[30, 48], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "io.open", "fp.write", "io.open", "fp.write", "range", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "RobertaTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"\\u0120\"", ",", "\"\\u0120l\"", ",", "\"\\u0120n\"", ",", "\n", "\"\\u0120lo\"", ",", "\"\\u0120low\"", ",", "\"er\"", ",", "\n", "\"\\u0120lowest\"", ",", "\"\\u0120newer\"", ",", "\"\\u0120wider\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "\"\\u0120 l\"", ",", "\"\\u0120l o\"", ",", "\"\\u0120lo w\"", ",", "\"e r\"", ",", "\"\"", "]", "\n", "self", ".", "special_tokens_map", "=", "{", "\"unk_token\"", ":", "\"<unk>\"", "}", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_roberta_test.RobertaTokenizationTest.get_tokenizer": [[49, 52], ["kwargs.update", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "special_tokens_map", ")", "\n", "return", "RobertaTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_roberta_test.RobertaTokenizationTest.get_input_output_texts": [[53, 57], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_roberta_test.RobertaTokenizationTest.test_full_tokenizer": [[58, 69], ["transformers.tokenization_roberta.RobertaTokenizer", "transformers.tokenization_roberta.RobertaTokenizer.tokenize", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "transformers.tokenization_roberta.RobertaTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "RobertaTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ",", "**", "self", ".", "special_tokens_map", ")", "\n", "text", "=", "\"lower newer\"", "\n", "bpe_tokens", "=", "[", "\"\\u0120low\"", ",", "\"er\"", ",", "\"\\u0120\"", ",", "\"n\"", ",", "\"e\"", ",", "\"w\"", ",", "\"er\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ",", "add_prefix_space", "=", "True", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "unk_token", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "10", ",", "9", ",", "3", ",", "2", ",", "15", ",", "19", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_roberta_test.RobertaTokenizationTest.roberta_dict_integration_testing": [[70, 80], ["tokenization_roberta_test.RobertaTokenizationTest.get_tokenizer", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "tokenization_roberta_test.RobertaTokenizationTest.encode", "tokenization_roberta_test.RobertaTokenizationTest.encode"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.get_tokenizer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "def", "roberta_dict_integration_testing", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "get_tokenizer", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "encode", "(", "'Hello world!'", ",", "add_special_tokens", "=", "False", ")", ",", "\n", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "2", "]", "\n", ")", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "encode", "(", "'Hello world! c\u00e9c\u00e9 herlolip 418'", ",", "add_special_tokens", "=", "False", ")", ",", "\n", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_roberta_test.RobertaTokenizationTest.test_sequence_builders": [[82, 97], ["transformers.tokenization_roberta.RobertaTokenizer.from_pretrained", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "\"roberta-base\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_text_from_decode", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "True", ")", "\n", "encoded_pair_from_decode", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "True", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "encoded_text_from_decode", "\n", "assert", "encoded_pair", "==", "encoded_pair_from_decode", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_auto_test.AutoModelTest.test_model_from_pretrained": [[41, 55], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModel.from_pretrained", "AutoModel.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "loading_info.values", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys", "modeling_auto_test.AutoModelTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModel", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModel", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertModel", ")", "\n", "for", "value", "in", "loading_info", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "value", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_auto_test.AutoModelTest.test_lmhead_model_from_pretrained": [[56, 68], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModelWithLMHead.from_pretrained", "AutoModelWithLMHead.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_lmhead_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForMaskedLM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_auto_test.AutoModelTest.test_sequence_classification_model_from_pretrained": [[69, 81], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModelForSequenceClassification.from_pretrained", "AutoModelForSequenceClassification.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_sequence_classification_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForSequenceClassification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_auto_test.AutoModelTest.test_question_answering_model_from_pretrained": [[82, 94], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModelForQuestionAnswering.from_pretrained", "AutoModelForQuestionAnswering.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_question_answering_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModelForQuestionAnswering", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModelForQuestionAnswering", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForQuestionAnswering", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelTest.setUp": [[179, 182], ["TFRobertaModelTest.TFRobertaModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFRobertaModelTest", ".", "TFRobertaModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "RobertaConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_config": [[183, 185], ["modeling_tf_roberta_test.TFRobertaModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_roberta_model": [[186, 189], ["modeling_tf_roberta_test.TFRobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_roberta_test.TFRobertaModelTest.model_tester.create_and_check_roberta_model"], "methods", ["None"], ["", "def", "test_roberta_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_for_masked_lm": [[190, 193], ["modeling_tf_roberta_test.TFRobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_roberta_test.TFRobertaModelTest.model_tester.create_and_check_roberta_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_model_from_pretrained": [[194, 201], ["list", "TFRobertaModel.from_pretrained", "shutil.rmtree", "modeling_tf_roberta_test.TFRobertaModelTest.assertIsNotNone", "TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFRobertaModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelIntegrationTest.test_inference_masked_lm": [[206, 225], ["TFRobertaForMaskedLM.from_pretrained", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertEqual", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertTrue", "TFRobertaForMaskedLM.from_pretrained.", "list", "numpy.allclose", "output[].numpy", "tf.constant.numpy", "output.numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_inference_masked_lm", "(", "self", ")", ":", "\n", "        ", "model", "=", "TFRobertaForMaskedLM", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "[", "1", ",", "11", ",", "50265", "]", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "output", ".", "numpy", "(", ")", ".", "shape", ")", ",", "\n", "expected_shape", "\n", ")", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "tf", ".", "constant", "(", "\n", "[", "[", "[", "33.8843", ",", "-", "4.3107", ",", "22.7779", "]", ",", "\n", "[", "4.6533", ",", "-", "2.8099", ",", "13.6252", "]", ",", "\n", "[", "1.8222", ",", "-", "3.6898", ",", "8.8600", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "numpy", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "numpy", "(", ")", ",", "expected_slice", ".", "numpy", "(", ")", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelIntegrationTest.test_inference_no_head": [[227, 241], ["TFRobertaModel.from_pretrained", "tf.constant", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertTrue", "TFRobertaModel.from_pretrained.", "numpy.allclose", "output[].numpy", "tf.constant.numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_inference_no_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "TFRobertaModel", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "tf", ".", "constant", "(", "\n", "[", "[", "[", "-", "0.0231", ",", "0.0782", ",", "0.0074", "]", ",", "\n", "[", "-", "0.1854", ",", "0.0539", ",", "-", "0.0174", "]", ",", "\n", "[", "0.0548", ",", "0.0799", ",", "0.1687", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "numpy", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "numpy", "(", ")", ",", "expected_slice", ".", "numpy", "(", ")", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_roberta_test.TFRobertaModelIntegrationTest.test_inference_classification_head": [[243, 257], ["TFRobertaForSequenceClassification.from_pretrained", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertEqual", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertTrue", "TFRobertaForSequenceClassification.from_pretrained.", "list", "numpy.allclose", "output.numpy", "tf.constant.numpy", "output.numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_inference_classification_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "TFRobertaForSequenceClassification", ".", "from_pretrained", "(", "'roberta-large-mnli'", ")", "\n", "\n", "input_ids", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "[", "1", ",", "3", "]", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "output", ".", "numpy", "(", ")", ".", "shape", ")", ",", "\n", "expected_shape", "\n", ")", "\n", "expected_tensor", "=", "tf", ".", "constant", "(", "[", "[", "-", "0.9469", ",", "0.3913", ",", "0.5118", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "numpy", ".", "allclose", "(", "output", ".", "numpy", "(", ")", ",", "expected_tensor", ".", "numpy", "(", ")", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.setUp": [[36, 46], ["super().setUp", "os.path.join", "io.open", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "TransfoXLTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "vocab_tokens", "=", "[", "\n", "\"<unk>\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"unwanted\"", ",", "\"wa\"", ",", "\"un\"", ",", "\n", "\"running\"", ",", "\",\"", ",", "\"low\"", ",", "\"l\"", ",", "\n", "]", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "vocab_writer", ":", "\n", "            ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.get_tokenizer": [[47, 50], ["TransfoXLTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "return", "TransfoXLTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.get_input_output_texts": [[51, 55], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"<unk> UNwanted , running\"", "\n", "output_text", "=", "u\"<unk> unwanted, running\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.test_full_tokenizer": [[56, 64], ["TransfoXLTokenizer", "TransfoXLTokenizer.tokenize", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "TransfoXLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "TransfoXLTokenizer", "(", "vocab_file", "=", "self", ".", "vocab_file", ",", "lower_case", "=", "True", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"<unk> UNwanted , running\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "\"<unk>\"", ",", "\"unwanted\"", ",", "\",\"", ",", "\"running\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "0", ",", "4", ",", "8", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.test_full_tokenizer_lower": [[65, 71], ["TransfoXLTokenizer", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "TransfoXLTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_full_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "TransfoXLTokenizer", "(", "lower_case", "=", "True", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo ! how  \\n Are yoU ?  \"", ")", ",", "\n", "[", "\"hello\"", ",", "\"!\"", ",", "\"how\"", ",", "\"are\"", ",", "\"you\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.test_full_tokenizer_no_lower": [[72, 78], ["TransfoXLTokenizer", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "TransfoXLTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_full_tokenizer_no_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "TransfoXLTokenizer", "(", "lower_case", "=", "False", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo ! how  \\n Are yoU ?  \"", ")", ",", "\n", "[", "\"HeLLo\"", ",", "\"!\"", ",", "\"how\"", ",", "\"Are\"", ",", "\"yoU\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.setUp": [[273, 276], ["TFBertModelTest.TFBertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFBertModelTest", ".", "TFBertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "BertConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_config": [[277, 279], ["modeling_tf_bert_test.TFBertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_bert_model": [[280, 283], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_model"], "methods", ["None"], ["", "def", "test_bert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_masked_lm": [[284, 287], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_multiple_choice": [[288, 291], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_multiple_choice"], "methods", ["None"], ["", "def", "test_for_multiple_choice", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_multiple_choice", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_next_sequence_prediction": [[292, 295], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_next_sequence_prediction"], "methods", ["None"], ["", "def", "test_for_next_sequence_prediction", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_next_sequence_prediction", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_pretraining": [[296, 299], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_pretraining"], "methods", ["None"], ["", "def", "test_for_pretraining", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_pretraining", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_question_answering": [[300, 303], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_sequence_classification": [[304, 307], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_for_token_classification": [[308, 311], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_token_classification"], "methods", ["None"], ["", "def", "test_for_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_bert_test.TFBertModelTest.test_model_from_pretrained": [[312, 320], ["TFBertModel.from_pretrained", "shutil.rmtree", "modeling_tf_bert_test.TFBertModelTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "model", "=", "TFBertModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_auto_test.AutoTokenizerTest.test_tokenizer_from_pretrained": [[29, 43], ["logging.basicConfig", "list", "transformers.AutoTokenizer.from_pretrained", "tokenization_auto_test.AutoTokenizerTest.assertIsNotNone", "tokenization_auto_test.AutoTokenizerTest.assertIsInstance", "tokenization_auto_test.AutoTokenizerTest.assertGreater", "list", "transformers.AutoTokenizer.from_pretrained", "tokenization_auto_test.AutoTokenizerTest.assertIsNotNone", "tokenization_auto_test.AutoTokenizerTest.assertIsInstance", "tokenization_auto_test.AutoTokenizerTest.assertGreater", "transformers.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP.keys", "len", "transformers.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP.keys", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_tokenizer_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_CONFIG_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "tokenizer", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "BertTokenizer", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "tokenizer", ")", ",", "0", ")", "\n", "\n", "", "for", "model_name", "in", "list", "(", "GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "tokenizer", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "GPT2Tokenizer", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "tokenizer", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.conftest.pytest_addoption": [[6, 12], ["parser.addoption", "parser.addoption"], "function", ["None"], ["def", "pytest_addoption", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "addoption", "(", "\n", "\"--runslow\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"run slow tests\"", "\n", ")", "\n", "parser", ".", "addoption", "(", "\n", "\"--use_cuda\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"run tests on gpu\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.conftest.pytest_configure": [[15, 17], ["config.addinivalue_line"], "function", ["None"], ["", "def", "pytest_configure", "(", "config", ")", ":", "\n", "    ", "config", ".", "addinivalue_line", "(", "\"markers\"", ",", "\"slow: mark test as slow to run\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.conftest.pytest_collection_modifyitems": [[19, 27], ["config.getoption", "pytest.mark.skip", "item.add_marker"], "function", ["None"], ["", "def", "pytest_collection_modifyitems", "(", "config", ",", "items", ")", ":", "\n", "    ", "if", "config", ".", "getoption", "(", "\"--runslow\"", ")", ":", "\n", "# --runslow given in cli: do not skip slow tests", "\n", "        ", "return", "\n", "", "skip_slow", "=", "pytest", ".", "mark", ".", "skip", "(", "reason", "=", "\"need --runslow option to run\"", ")", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "\"slow\"", "in", "item", ".", "keywords", ":", "\n", "            ", "item", ".", "add_marker", "(", "skip_slow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.conftest.use_cuda": [[28, 32], ["request.config.getoption"], "function", ["None"], ["", "", "", "@", "pytest", ".", "fixture", "\n", "def", "use_cuda", "(", "request", ")", ":", "\n", "    ", "\"\"\" Run test on gpu \"\"\"", "\n", "return", "request", ".", "config", ".", "getoption", "(", "\"--use_cuda\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_common_test.TFModelUtilsTest.test_model_from_pretrained": [[457, 460], ["pytest.mark.skipif"], "methods", ["None"], ["    ", "@", "pytest", ".", "mark", ".", "skipif", "(", "'tensorflow'", "not", "in", "sys", ".", "modules", ",", "reason", "=", "\"requires TensorFlow\"", ")", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "# logging.basicConfig(level=logging.INFO)", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_common_test._config_zero_init": [[56, 62], ["copy.deepcopy", "copy.deepcopy.__dict__.keys", "setattr"], "function", ["None"], ["", "def", "_config_zero_init", "(", "config", ")", ":", "\n", "    ", "configs_no_init", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "for", "key", "in", "configs_no_init", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'_range'", "in", "key", "or", "'_std'", "in", "key", ":", "\n", "            ", "setattr", "(", "configs_no_init", ",", "key", ",", "0.0", ")", "\n", "", "", "return", "configs_no_init", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_common_test.ids_tensor": [[436, 454], ["range", "tf.constant", "random.Random", "values.append", "random.Random.randint"], "function", ["None"], ["", "", "", "", "def", "ids_tensor", "(", "shape", ",", "vocab_size", ",", "rng", "=", "None", ",", "name", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random int32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "random", ".", "Random", "(", ")", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "        ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "        ", "values", ".", "append", "(", "rng", ".", "randint", "(", "0", ",", "vocab_size", "-", "1", ")", ")", "\n", "\n", "", "output", "=", "tf", ".", "constant", "(", "values", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "dtype", "if", "dtype", "is", "not", "None", "else", "tf", ".", "int32", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.setUp": [[231, 234], ["TFXLMModelTest.TFXLMModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFXLMModelTest", ".", "TFXLMModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLMConfig", ",", "emb_dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.test_config": [[235, 237], ["modeling_tf_xlm_test.TFXLMModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_model": [[238, 241], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_model"], "methods", ["None"], ["", "def", "test_xlm_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_lm_head": [[242, 245], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_lm_head"], "methods", ["None"], ["", "def", "test_xlm_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_qa": [[246, 249], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_qa"], "methods", ["None"], ["", "def", "test_xlm_qa", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_sequence_classif": [[250, 253], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_sequence_classif"], "methods", ["None"], ["", "def", "test_xlm_sequence_classif", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_xlm_test.TFXLMModelTest.test_model_from_pretrained": [[254, 261], ["list", "XLMModel.from_pretrained", "shutil.rmtree", "modeling_tf_xlm_test.TFXLMModelTest.assertIsNotNone", "TF_XLM_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_XLM_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "XLMModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlm_test.XLMTokenizationTest.setUp": [[30, 47], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "open", "fp.write", "open", "fp.write", "range", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "XLMTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"w</w>\"", ",", "\"r</w>\"", ",", "\"t</w>\"", ",", "\n", "\"lo\"", ",", "\"low\"", ",", "\"er</w>\"", ",", "\n", "\"low</w>\"", ",", "\"lowest</w>\"", ",", "\"newer</w>\"", ",", "\"wider</w>\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"l o 123\"", ",", "\"lo w 1456\"", ",", "\"e r</w> 1789\"", ",", "\"\"", "]", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlm_test.XLMTokenizationTest.get_tokenizer": [[48, 50], ["transformers.tokenization_xlm.XLMTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "XLMTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlm_test.XLMTokenizationTest.get_input_output_texts": [[51, 55], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlm_test.XLMTokenizationTest.test_full_tokenizer": [[56, 69], ["transformers.tokenization_xlm.XLMTokenizer", "transformers.tokenization_xlm.XLMTokenizer.tokenize", "tokenization_xlm_test.XLMTokenizationTest.assertListEqual", "tokenization_xlm_test.XLMTokenizationTest.assertListEqual", "transformers.tokenization_xlm.XLMTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "\"\"\" Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt \"\"\"", "\n", "tokenizer", "=", "XLMTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ")", "\n", "\n", "text", "=", "\"lower\"", "\n", "bpe_tokens", "=", "[", "\"low\"", ",", "\"er</w>\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "\"<unk>\"", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "20", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_xlm_test.XLMTokenizationTest.test_sequence_builders": [[70, 82], ["transformers.tokenization_xlm.XLMTokenizer.from_pretrained", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.encode", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.encode", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLMTokenizer", ".", "from_pretrained", "(", "\"xlm-mlm-en-2048\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "1", "]", "+", "text", "+", "[", "1", "]", "\n", "assert", "encoded_pair", "==", "[", "1", "]", "+", "text", "+", "[", "1", "]", "+", "text_2", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.setUp": [[34, 44], ["super().setUp", "os.path.join", "io.open", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "BertTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", ",", "\",\"", ",", "\"low\"", ",", "\"lowest\"", ",", "\n", "]", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "vocab_writer", ":", "\n", "            ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.get_tokenizer": [[45, 47], ["transformers.tokenization_bert.BertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "BertTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.get_input_output_texts": [[48, 52], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"UNwant\\u00E9d,running\"", "\n", "output_text", "=", "u\"unwanted, running\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_full_tokenizer": [[53, 59], ["tokenization_bert_test.BertTokenizationTest.tokenizer_class", "tokenization_bert_test.BertTokenizationTest.tokenize", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", "(", "self", ".", "vocab_file", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"UNwant\\u00E9d,running\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\",\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "7", ",", "4", ",", "5", ",", "10", ",", "8", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_chinese": [[60, 66], ["transformers.tokenization_bert.BasicTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_chinese", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "BasicTokenizer", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\"ah\\u535A\\u63A8zz\"", ")", ",", "\n", "[", "u\"ah\"", ",", "u\"\\u535A\"", ",", "u\"\\u63A8\"", ",", "u\"zz\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_basic_tokenizer_lower": [[67, 74], ["transformers.tokenization_bert.BasicTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.BasicTokenizer.tokenize", "transformers.tokenization_bert.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_basic_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo!how  \\n Are yoU?  \"", ")", ",", "\n", "[", "\"hello\"", ",", "\"!\"", ",", "\"how\"", ",", "\"are\"", ",", "\"you\"", ",", "\"?\"", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"H\\u00E9llo\"", ")", ",", "[", "\"hello\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_basic_tokenizer_no_lower": [[75, 81], ["transformers.tokenization_bert.BasicTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_basic_tokenizer_no_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "False", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo!how  \\n Are yoU?  \"", ")", ",", "\n", "[", "\"HeLLo\"", ",", "\"!\"", ",", "\"how\"", ",", "\"Are\"", ",", "\"yoU\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_wordpiece_tokenizer": [[82, 101], ["enumerate", "transformers.tokenization_bert.WordpieceTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "test_wordpiece_tokenizer", "(", "self", ")", ":", "\n", "        ", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", "\n", "]", "\n", "\n", "vocab", "=", "{", "}", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "vocab_tokens", ")", ":", "\n", "            ", "vocab", "[", "token", "]", "=", "i", "\n", "", "tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "\"\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "\"unwanted running\"", ")", ",", "\n", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "\"unwantedX running\"", ")", ",", "[", "\"[UNK]\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_is_whitespace": [[102, 111], ["tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_whitespace"], ["", "def", "test_is_whitespace", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\" \"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\t\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\r\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\n\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\u00A0\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "_is_whitespace", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_whitespace", "(", "u\"-\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_is_control": [[112, 119], ["tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_control"], ["", "def", "test_is_control", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "_is_control", "(", "u\"\\u0005\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\" \"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\"\\t\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\"\\r\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_is_punctuation": [[120, 128], ["tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_bert._is_punctuation"], ["", "def", "test_is_punctuation", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\"-\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\"$\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\"`\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\".\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "_is_punctuation", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_punctuation", "(", "u\" \"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.tokenization_bert_test.BertTokenizationTest.test_sequence_builders": [[129, 141], ["tokenization_bert_test.BertTokenizationTest.tokenizer_class.from_pretrained", "tokenization_bert_test.BertTokenizationTest.encode", "tokenization_bert_test.BertTokenizationTest.encode", "tokenization_bert_test.BertTokenizationTest.build_inputs_with_special_tokens", "tokenization_bert_test.BertTokenizationTest.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", ".", "from_pretrained", "(", "\"bert-base-uncased\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "101", "]", "+", "text", "+", "[", "102", "]", "\n", "assert", "encoded_pair", "==", "[", "101", "]", "+", "text", "+", "[", "102", "]", "+", "text_2", "+", "[", "102", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp": [[190, 193], ["TFTransfoXLModelTest.TFTransfoXLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFTransfoXLModelTest", ".", "TFTransfoXLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "TransfoXLConfig", ",", "d_embed", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_config": [[194, 196], ["modeling_tf_transfo_xl_test.TFTransfoXLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_transfo_xl_model": [[197, 201], ["modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.set_seed", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.create_and_check_transfo_xl_model"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_transfo_xl_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_transfo_xl_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_transfo_xl_lm_head": [[202, 206], ["modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.set_seed", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.create_and_check_transfo_xl_lm_head"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed"], ["", "def", "test_transfo_xl_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_transfo_xl_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_model_from_pretrained": [[207, 214], ["list", "TFTransfoXLModel.from_pretrained", "shutil.rmtree", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.assertIsNotNone", "TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "pytest", ".", "mark", ".", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFTransfoXLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MrpcProcessor.get_example_from_tensor_dict": [[157, 163], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MrpcProcessor.get_train_examples": [[164, 169], ["logger.info", "glue.MrpcProcessor._create_examples", "glue.MrpcProcessor._read_tsv", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MrpcProcessor.get_dev_examples": [[170, 174], ["glue.MrpcProcessor._create_examples", "glue.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MrpcProcessor.get_labels": [[175, 178], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MrpcProcessor._create_examples": [[179, 192], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "3", "]", "\n", "text_b", "=", "line", "[", "4", "]", "\n", "label", "=", "line", "[", "0", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MnliProcessor.get_example_from_tensor_dict": [[197, 203], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'premise'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'hypothesis'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MnliProcessor.get_train_examples": [[204, 208], ["glue.MnliProcessor._create_examples", "glue.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MnliProcessor.get_dev_examples": [[209, 214], ["glue.MnliProcessor._create_examples", "glue.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev_matched.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MnliProcessor.get_labels": [[215, 218], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MnliProcessor._create_examples": [[219, 232], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "8", "]", "\n", "text_b", "=", "line", "[", "9", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.MnliMismatchedProcessor.get_dev_examples": [[237, 242], ["glue.MnliMismatchedProcessor._create_examples", "glue.MnliMismatchedProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev_mismatched.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.ColaProcessor.get_example_from_tensor_dict": [[247, 253], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "None", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.ColaProcessor.get_train_examples": [[254, 258], ["glue.ColaProcessor._create_examples", "glue.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.ColaProcessor.get_dev_examples": [[259, 263], ["glue.ColaProcessor._create_examples", "glue.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.ColaProcessor.get_labels": [[264, 267], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.ColaProcessor._create_examples": [[268, 278], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "3", "]", "\n", "label", "=", "line", "[", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.Sst2Processor.get_example_from_tensor_dict": [[283, 289], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "None", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.Sst2Processor.get_train_examples": [[290, 294], ["glue.Sst2Processor._create_examples", "glue.Sst2Processor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.Sst2Processor.get_dev_examples": [[295, 299], ["glue.Sst2Processor._create_examples", "glue.Sst2Processor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.Sst2Processor.get_labels": [[300, 303], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.Sst2Processor._create_examples": [[304, 316], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "0", "]", "\n", "label", "=", "line", "[", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.StsbProcessor.get_example_from_tensor_dict": [[321, 327], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.StsbProcessor.get_train_examples": [[328, 332], ["glue.StsbProcessor._create_examples", "glue.StsbProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.StsbProcessor.get_dev_examples": [[333, 337], ["glue.StsbProcessor._create_examples", "glue.StsbProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.StsbProcessor.get_labels": [[338, 341], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.StsbProcessor._create_examples": [[342, 355], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "7", "]", "\n", "text_b", "=", "line", "[", "8", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QqpProcessor.get_example_from_tensor_dict": [[360, 366], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'question1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'question2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QqpProcessor.get_train_examples": [[367, 371], ["glue.QqpProcessor._create_examples", "glue.QqpProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QqpProcessor.get_dev_examples": [[372, 376], ["glue.QqpProcessor._create_examples", "glue.QqpProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QqpProcessor.get_labels": [[377, 380], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QqpProcessor._create_examples": [[381, 397], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "try", ":", "\n", "                ", "text_a", "=", "line", "[", "3", "]", "\n", "text_b", "=", "line", "[", "4", "]", "\n", "label", "=", "line", "[", "5", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "continue", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QnliProcessor.get_example_from_tensor_dict": [[402, 408], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'question'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QnliProcessor.get_train_examples": [[409, 413], ["glue.QnliProcessor._create_examples", "glue.QnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QnliProcessor.get_dev_examples": [[414, 419], ["glue.QnliProcessor._create_examples", "glue.QnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QnliProcessor.get_labels": [[420, 423], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"entailment\"", ",", "\"not_entailment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.QnliProcessor._create_examples": [[424, 437], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.RteProcessor.get_example_from_tensor_dict": [[442, 448], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.RteProcessor.get_train_examples": [[449, 453], ["glue.RteProcessor._create_examples", "glue.RteProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.RteProcessor.get_dev_examples": [[454, 458], ["glue.RteProcessor._create_examples", "glue.RteProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.RteProcessor.get_labels": [[459, 462], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"entailment\"", ",", "\"not_entailment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.RteProcessor._create_examples": [[463, 476], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor.get_example_from_tensor_dict": [[481, 487], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor.get_train_examples": [[488, 492], ["glue.WnliProcessor._create_examples", "glue.WnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor.get_dev_examples": [[493, 497], ["glue.WnliProcessor._create_examples", "glue.WnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor.get_labels": [[498, 501], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.WnliProcessor._create_examples": [[502, 515], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.glue.glue_convert_examples_to_features": [[30, 152], ["enumerate", "file_utils.is_tf_available", "isinstance", "tokenizer.encode_plus", "features.append", "file_utils.is_tf_available", "tf.data.Dataset.from_generator", "processor.get_labels", "logger.info", "logger.info", "enumerate", "logger.info", "processor.get_example_from_tensor_dict", "processor.tfds_map", "len", "len", "len", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "utils.InputFeatures", "float", "KeyError", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.is_tf_available", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.is_tf_available", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_labels", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_example_from_tensor_dict", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.tfds_map"], ["def", "glue_convert_examples_to_features", "(", "examples", ",", "tokenizer", ",", "\n", "max_length", "=", "512", ",", "\n", "task", "=", "None", ",", "\n", "label_list", "=", "None", ",", "\n", "output_mode", "=", "None", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "pad_token", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "mask_padding_with_zero", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Loads a data file into a list of ``InputFeatures``\n\n    Args:\n        examples: List of ``InputExamples`` or ``tf.data.Dataset`` containing the examples.\n        tokenizer: Instance of a tokenizer that will tokenize the examples\n        max_length: Maximum example length\n        task: GLUE task\n        label_list: List of labels. Can be obtained from the processor using the ``processor.get_labels()`` method\n        output_mode: String indicating the output mode. Either ``regression`` or ``classification``\n        pad_on_left: If set to ``True``, the examples will be padded on the left rather than on the right (default)\n        pad_token: Padding token\n        pad_token_segment_id: The segment ID for the padding token (It is usually 0, but can vary such as for XLNet where it is 4)\n        mask_padding_with_zero: If set to ``True``, the attention mask will be filled by ``1`` for actual values\n            and by ``0`` for padded values. If set to ``False``, inverts it (``1`` for padded values, ``0`` for\n            actual values)\n\n    Returns:\n        If the ``examples`` input is a ``tf.data.Dataset``, will return a ``tf.data.Dataset``\n        containing the task-specific features. If the input is a list of ``InputExamples``, will return\n        a list of task-specific ``InputFeatures`` which can be fed to the model.\n\n    \"\"\"", "\n", "is_tf_dataset", "=", "False", "\n", "if", "is_tf_available", "(", ")", "and", "isinstance", "(", "examples", ",", "tf", ".", "data", ".", "Dataset", ")", ":", "\n", "        ", "is_tf_dataset", "=", "True", "\n", "\n", "", "if", "task", "is", "not", "None", ":", "\n", "        ", "processor", "=", "glue_processors", "[", "task", "]", "(", ")", "\n", "if", "label_list", "is", "None", ":", "\n", "            ", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "logger", ".", "info", "(", "\"Using label list %s for task %s\"", "%", "(", "label_list", ",", "task", ")", ")", "\n", "", "if", "output_mode", "is", "None", ":", "\n", "            ", "output_mode", "=", "glue_output_modes", "[", "task", "]", "\n", "logger", ".", "info", "(", "\"Using output mode %s for task %s\"", "%", "(", "output_mode", ",", "task", ")", ")", "\n", "\n", "", "", "label_map", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "label_list", ")", "}", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "        ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Writing example %d\"", "%", "(", "ex_index", ")", ")", "\n", "", "if", "is_tf_dataset", ":", "\n", "            ", "example", "=", "processor", ".", "get_example_from_tensor_dict", "(", "example", ")", "\n", "example", "=", "processor", ".", "tfds_map", "(", "example", ")", "\n", "\n", "", "inputs", "=", "tokenizer", ".", "encode_plus", "(", "\n", "example", ".", "text_a", ",", "\n", "example", ".", "text_b", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "max_length", ",", "\n", ")", "\n", "input_ids", ",", "token_type_ids", "=", "inputs", "[", "\"input_ids\"", "]", ",", "inputs", "[", "\"token_type_ids\"", "]", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "attention_mask", "=", "[", "1", "if", "mask_padding_with_zero", "else", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding_length", "=", "max_length", "-", "len", "(", "input_ids", ")", "\n", "if", "pad_on_left", ":", "\n", "            ", "input_ids", "=", "(", "[", "pad_token", "]", "*", "padding_length", ")", "+", "input_ids", "\n", "attention_mask", "=", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "+", "attention_mask", "\n", "token_type_ids", "=", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "+", "token_type_ids", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "input_ids", "+", "(", "[", "pad_token", "]", "*", "padding_length", ")", "\n", "attention_mask", "=", "attention_mask", "+", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "\n", "token_type_ids", "=", "token_type_ids", "+", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "input_ids", ")", ",", "max_length", ")", "\n", "assert", "len", "(", "attention_mask", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "attention_mask", ")", ",", "max_length", ")", "\n", "assert", "len", "(", "token_type_ids", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "token_type_ids", ")", ",", "max_length", ")", "\n", "\n", "if", "output_mode", "==", "\"classification\"", ":", "\n", "            ", "label", "=", "label_map", "[", "example", ".", "label", "]", "\n", "", "elif", "output_mode", "==", "\"regression\"", ":", "\n", "            ", "label", "=", "float", "(", "example", ".", "label", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "output_mode", ")", "\n", "\n", "", "if", "ex_index", "<", "5", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "(", "example", ".", "guid", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"attention_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "attention_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"token_type_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "token_type_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "label", "=", "label", ")", ")", "\n", "\n", "", "if", "is_tf_available", "(", ")", "and", "is_tf_dataset", ":", "\n", "        ", "def", "gen", "(", ")", ":", "\n", "            ", "for", "ex", "in", "features", ":", "\n", "                ", "yield", "(", "{", "'input_ids'", ":", "ex", ".", "input_ids", ",", "\n", "'attention_mask'", ":", "ex", ".", "attention_mask", ",", "\n", "'token_type_ids'", ":", "ex", ".", "token_type_ids", "}", ",", "\n", "ex", ".", "label", ")", "\n", "\n", "", "", "return", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "gen", ",", "\n", "(", "{", "'input_ids'", ":", "tf", ".", "int32", ",", "\n", "'attention_mask'", ":", "tf", ".", "int32", ",", "\n", "'token_type_ids'", ":", "tf", ".", "int32", "}", ",", "\n", "tf", ".", "int64", ")", ",", "\n", "(", "{", "'input_ids'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'attention_mask'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'token_type_ids'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputExample.__init__": [[35, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputExample.__repr__": [[41, 43], ["str", "utils.InputExample.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputExample.to_dict": [[44, 48], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputExample.to_json_string": [[49, 52], ["json.dumps", "utils.InputExample.to_dict"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputFeatures.__init__": [[67, 72], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ",", "label", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "attention_mask", "=", "attention_mask", "\n", "self", ".", "token_type_ids", "=", "token_type_ids", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputFeatures.__repr__": [[73, 75], ["str", "utils.InputFeatures.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputFeatures.to_dict": [[76, 80], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.InputFeatures.to_json_string": [[81, 84], ["json.dumps", "utils.InputFeatures.to_dict"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_example_from_tensor_dict": [[89, 97], ["NotImplementedError"], "methods", ["None"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"Gets an example from a dict with tensorflow tensors\n\n        Args:\n            tensor_dict: Keys and values should match the corresponding Glue\n                tensorflow_dataset examples.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_train_examples": [[98, 101], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_dev_examples": [[102, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_labels": [[106, 109], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the list of labels for this data set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.tfds_map": [[110, 116], ["len", "utils.DataProcessor.get_labels", "utils.DataProcessor.get_labels", "int"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_labels", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor.get_labels"], ["", "def", "tfds_map", "(", "self", ",", "example", ")", ":", "\n", "        ", "\"\"\"Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. \n        This method converts examples to the correct format.\"\"\"", "\n", "if", "len", "(", "self", ".", "get_labels", "(", ")", ")", ">", "1", ":", "\n", "            ", "example", ".", "label", "=", "self", ".", "get_labels", "(", ")", "[", "int", "(", "example", ".", "label", ")", "]", "\n", "", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.processors.utils.DataProcessor._read_tsv": [[117, 128], ["open", "csv.reader", "lines.append", "list", "unicode"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8-sig\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "line", "=", "list", "(", "unicode", "(", "cell", ",", "'utf-8'", ")", "for", "cell", "in", "line", ")", "\n", "", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.metrics.__init__.is_sklearn_available": [[31, 33], ["None"], "function", ["None"], ["    ", "from", ".", "data", "import", "glue_compute_metrics", "\n", "\n", "# Tokenizers", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.inference_model.__init__": [[47, 68], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "models.kernal_mus", "models.kernel_sigmas"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.kernal_mus", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.kernel_sigmas"], ["    ", "def", "__init__", "(", "self", ",", "bert_model", ",", "args", ")", ":", "\n", "        ", "super", "(", "inference_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert_hidden_dim", "=", "args", ".", "bert_hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "self", ".", "num_labels", "=", "args", ".", "num_labels", "\n", "self", ".", "pred_model", "=", "bert_model", "\n", "self", ".", "evi_num", "=", "args", ".", "evi_num", "\n", "self", ".", "nlayer", "=", "args", ".", "layer", "\n", "self", ".", "kernel", "=", "args", ".", "kernel", "\n", "self", ".", "proj_inference_de", "=", "nn", ".", "Linear", "(", "self", ".", "bert_hidden_dim", "*", "2", ",", "self", ".", "num_labels", ")", "\n", "self", ".", "proj_att", "=", "nn", ".", "Linear", "(", "self", ".", "kernel", ",", "1", ")", "\n", "self", ".", "proj_input_de", "=", "nn", ".", "Linear", "(", "self", ".", "bert_hidden_dim", ",", "self", ".", "bert_hidden_dim", ")", "\n", "self", ".", "proj_gat", "=", "nn", ".", "Sequential", "(", "\n", "Linear", "(", "self", ".", "bert_hidden_dim", "*", "2", ",", "128", ")", ",", "\n", "ReLU", "(", "True", ")", ",", "\n", "Linear", "(", "128", ",", "1", ")", "\n", ")", "\n", "self", ".", "proj_select", "=", "nn", ".", "Linear", "(", "self", ".", "kernel", ",", "1", ")", "\n", "self", ".", "mu", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "kernal_mus", "(", "self", ".", "kernel", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "21", ")", ".", "cuda", "(", ")", "\n", "self", ".", "sigma", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "kernel_sigmas", "(", "self", ".", "kernel", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "21", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.inference_model.self_attention": [[70, 100], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "mask.view.view.view", "mask_evidence.view.view.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "own_hidden.repeat.repeat.repeat", "own_mask.repeat.repeat.repeat", "own_input.repeat.repeat.repeat", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "models.inference_model.get_intersect_matrix_att", "att_score.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.inference_model.proj_gat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.inference_model.proj_gat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.normalize.view", "torch.normalize.view", "mask_evidence.view.view.view", "own_mask.repeat.repeat.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.get_intersect_matrix_att"], ["", "def", "self_attention", "(", "self", ",", "inputs", ",", "inputs_hiddens", ",", "mask", ",", "mask_evidence", ",", "index", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "LongTensor", "(", "[", "index", "]", ")", ".", "cuda", "(", ")", "\n", "mask", "=", "mask", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", "]", ")", "\n", "mask_evidence", "=", "mask_evidence", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", "]", ")", "\n", "own_hidden", "=", "torch", ".", "index_select", "(", "inputs_hiddens", ",", "1", ",", "idx", ")", "\n", "own_mask", "=", "torch", ".", "index_select", "(", "mask", ",", "1", ",", "idx", ")", "\n", "own_input", "=", "torch", ".", "index_select", "(", "inputs", ",", "1", ",", "idx", ")", "\n", "own_hidden", "=", "own_hidden", ".", "repeat", "(", "1", ",", "self", ".", "evi_num", ",", "1", ",", "1", ")", "\n", "own_mask", "=", "own_mask", ".", "repeat", "(", "1", ",", "self", ".", "evi_num", ",", "1", ")", "\n", "own_input", "=", "own_input", ".", "repeat", "(", "1", ",", "self", ".", "evi_num", ",", "1", ")", "\n", "\n", "hiddens_norm", "=", "F", ".", "normalize", "(", "inputs_hiddens", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "own_norm", "=", "F", ".", "normalize", "(", "own_hidden", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "att_score", "=", "self", ".", "get_intersect_matrix_att", "(", "hiddens_norm", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", ")", ",", "own_norm", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", ")", ",", "\n", "mask_evidence", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", ",", "own_mask", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", ")", "\n", "att_score", "=", "att_score", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ",", "1", ")", "\n", "#if index == 1:", "\n", "#    for i in range(self.evi_num):", "\n", "#print (att_score.view(-1, self.evi_num, self.max_len)[0, 1, :])", "\n", "denoise_inputs", "=", "torch", ".", "sum", "(", "att_score", "*", "inputs_hiddens", ",", "2", ")", "\n", "weight_inp", "=", "torch", ".", "cat", "(", "[", "own_input", ",", "inputs", "]", ",", "-", "1", ")", "\n", "weight_inp", "=", "self", ".", "proj_gat", "(", "weight_inp", ")", "\n", "weight_inp", "=", "F", ".", "softmax", "(", "weight_inp", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "(", "inputs", "*", "weight_inp", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "weight_de", "=", "torch", ".", "cat", "(", "[", "own_input", ",", "denoise_inputs", "]", ",", "-", "1", ")", "\n", "weight_de", "=", "self", ".", "proj_gat", "(", "weight_de", ")", "\n", "weight_de", "=", "F", ".", "softmax", "(", "weight_de", ",", "dim", "=", "1", ")", "\n", "outputs_de", "=", "(", "denoise_inputs", "*", "weight_de", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "outputs", ",", "outputs_de", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.inference_model.get_intersect_matrix": [[101, 111], ["attn_q.view.view.view", "attn_d.view.view.view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.inference_model.proj_select().view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attn_q.view.view.size", "attn_q.view.view.size", "attn_d.view.view.size", "attn_d.view.view.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "q_embed.size", "q_embed.size", "d_embed.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.inference_model.proj_select", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "models.inference_model.sigma.cuda", "models.inference_model.mu.cuda"], "methods", ["None"], ["", "def", "get_intersect_matrix", "(", "self", ",", "q_embed", ",", "d_embed", ",", "attn_q", ",", "attn_d", ")", ":", "\n", "        ", "attn_q", "=", "attn_q", ".", "view", "(", "attn_q", ".", "size", "(", ")", "[", "0", "]", ",", "attn_q", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "attn_d", "=", "attn_d", ".", "view", "(", "attn_d", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "attn_d", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "sim", "=", "torch", ".", "bmm", "(", "q_embed", ",", "torch", ".", "transpose", "(", "d_embed", ",", "1", ",", "2", ")", ")", ".", "view", "(", "q_embed", ".", "size", "(", ")", "[", "0", "]", ",", "q_embed", ".", "size", "(", ")", "[", "1", "]", ",", "d_embed", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "pooling_value", "=", "torch", ".", "exp", "(", "(", "-", "(", "(", "sim", "-", "self", ".", "mu", ".", "cuda", "(", ")", ")", "**", "2", ")", "/", "(", "self", ".", "sigma", ".", "cuda", "(", ")", "**", "2", ")", "/", "2", ")", ")", "*", "attn_d", "\n", "pooling_sum", "=", "torch", ".", "sum", "(", "pooling_value", ",", "2", ")", "\n", "log_pooling_sum", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "pooling_sum", ",", "min", "=", "1e-10", ")", ")", "*", "attn_q", "\n", "log_pooling_sum", "=", "torch", ".", "sum", "(", "log_pooling_sum", ",", "1", ")", "/", "(", "torch", ".", "sum", "(", "attn_q", ",", "1", ")", "+", "1e-10", ")", "\n", "log_pooling_sum", "=", "self", ".", "proj_select", "(", "log_pooling_sum", ")", ".", "view", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "log_pooling_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.inference_model.get_intersect_matrix_att": [[112, 123], ["attn_q.view.view.view", "attn_d.view.view.view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "models.inference_model.proj_att().squeeze", "torch.softmax.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "attn_q.view.view.size", "attn_q.view.view.size", "attn_d.view.view.size", "attn_d.view.view.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "q_embed.size", "q_embed.size", "d_embed.size", "models.inference_model.proj_att", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "models.inference_model.sigma.cuda", "models.inference_model.mu.cuda"], "methods", ["None"], ["", "def", "get_intersect_matrix_att", "(", "self", ",", "q_embed", ",", "d_embed", ",", "attn_q", ",", "attn_d", ")", ":", "\n", "        ", "attn_q", "=", "attn_q", ".", "view", "(", "attn_q", ".", "size", "(", ")", "[", "0", "]", ",", "attn_q", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "attn_d", "=", "attn_d", ".", "view", "(", "attn_d", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "attn_d", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "sim", "=", "torch", ".", "bmm", "(", "q_embed", ",", "torch", ".", "transpose", "(", "d_embed", ",", "1", ",", "2", ")", ")", ".", "view", "(", "q_embed", ".", "size", "(", ")", "[", "0", "]", ",", "q_embed", ".", "size", "(", ")", "[", "1", "]", ",", "d_embed", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "pooling_value", "=", "torch", ".", "exp", "(", "(", "-", "(", "(", "sim", "-", "self", ".", "mu", ".", "cuda", "(", ")", ")", "**", "2", ")", "/", "(", "self", ".", "sigma", ".", "cuda", "(", ")", "**", "2", ")", "/", "2", ")", ")", "*", "attn_d", "\n", "log_pooling_sum", "=", "torch", ".", "sum", "(", "pooling_value", ",", "2", ")", "\n", "log_pooling_sum", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "log_pooling_sum", ",", "min", "=", "1e-10", ")", ")", "\n", "log_pooling_sum", "=", "self", ".", "proj_att", "(", "log_pooling_sum", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "log_pooling_sum", "=", "log_pooling_sum", ".", "masked_fill_", "(", "(", "1", "-", "attn_q", ")", ".", "bool", "(", ")", ",", "-", "1e4", ")", "\n", "log_pooling_sum", "=", "F", ".", "softmax", "(", "log_pooling_sum", ",", "dim", "=", "1", ")", "\n", "return", "log_pooling_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.inference_model.forward": [[124, 163], ["msk_tensor.view.view.view", "inp_tensor.view.view.view", "seg_tensor.view.view.view", "models.inference_model.pred_model", "msk_tensor.view.view.view().float", "inputs_hiddens.view.view.view", "torch.normalize", "torch.normalize", "torch.normalize", "models.inference_model.get_intersect_matrix", "log_pooling_sum.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "inputs.view.view.view", "inputs_hiddens.view.view.view", "range", "inputs.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs_att_de.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.inference_model.proj_inference_de", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "seg_tensor.view.view.float", "models.inference_model.self_attention", "inputs_att_de.view.view.append", "msk_tensor.view.view.view", "seg_tensor.view.view.float"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.get_intersect_matrix", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.self_attention"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# print(\"inputs shape:\", inputs.shape)", "\n", "        ", "inp_tensor", ",", "msk_tensor", ",", "seg_tensor", "=", "inputs", "\n", "msk_tensor", "=", "msk_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", "\n", "inp_tensor", "=", "inp_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", "\n", "seg_tensor", "=", "seg_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", "\n", "inputs_hiddens", ",", "inputs", "=", "self", ".", "pred_model", "(", "inp_tensor", ",", "msk_tensor", ",", "seg_tensor", ")", "\n", "\n", "# print(\"seg_tensor shape:\" , seg_tensor.shape)", "\n", "mask_text", "=", "msk_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", ".", "float", "(", ")", "\n", "# print(\"mask_text (before) shape: \", mask_text.shape)", "\n", "mask_text", "[", ":", ",", "0", "]", "=", "0.0", "\n", "# print(\"mask_text shape: \", mask_text.shape)", "\n", "mask_claim", "=", "(", "1", "-", "seg_tensor", ".", "float", "(", ")", ")", "*", "mask_text", "\n", "# print(\"mask_claim shape:\", mask_claim.shape)", "\n", "mask_evidence", "=", "seg_tensor", ".", "float", "(", ")", "*", "mask_text", "\n", "# print(\"mask_evidence shape:\", mask_evidence.shape)", "\n", "inputs_hiddens", "=", "inputs_hiddens", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", ")", "\n", "inputs_hiddens_norm", "=", "F", ".", "normalize", "(", "inputs_hiddens", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "# print(\"inputs_hiddens_norm shape:\", inputs_hiddens_norm.shape)", "\n", "log_pooling_sum", "=", "self", ".", "get_intersect_matrix", "(", "inputs_hiddens_norm", ",", "inputs_hiddens_norm", ",", "mask_claim", ",", "mask_evidence", ")", "\n", "# print(\"log_pooling_sum shape:\", log_pooling_sum.shape)", "\n", "log_pooling_sum", "=", "log_pooling_sum", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "1", "]", ")", "# shape", "\n", "select_prob", "=", "F", ".", "softmax", "(", "log_pooling_sum", ",", "dim", "=", "1", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_hiddens", "=", "inputs_hiddens", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_att_de", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "evi_num", ")", ":", "\n", "            ", "outputs", ",", "outputs_de", "=", "self", ".", "self_attention", "(", "inputs", ",", "inputs_hiddens", ",", "mask_text", ",", "mask_text", ",", "i", ")", "\n", "inputs_att_de", ".", "append", "(", "outputs_de", ")", "\n", "", "inputs_att", "=", "inputs", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_att_de", "=", "torch", ".", "cat", "(", "inputs_att_de", ",", "dim", "=", "1", ")", "\n", "inputs_att_de", "=", "inputs_att_de", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_att", "=", "torch", ".", "cat", "(", "[", "inputs_att", ",", "inputs_att_de", "]", ",", "-", "1", ")", "\n", "inference_feature", "=", "self", ".", "proj_inference_de", "(", "inputs_att", ")", "\n", "class_prob", "=", "F", ".", "softmax", "(", "inference_feature", ",", "dim", "=", "2", ")", "\n", "prob", "=", "torch", ".", "sum", "(", "select_prob", "*", "class_prob", ",", "1", ")", "\n", "prob", "=", "torch", ".", "log", "(", "prob", ")", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.kernal_mus": [[13, 28], ["l_mu.append", "range", "l_mu.append"], "function", ["None"], ["def", "kernal_mus", "(", "n_kernels", ")", ":", "\n", "    ", "\"\"\"\n    get the mu for each guassian kernel. Mu is the middle of each bin\n    :param n_kernels: number of kernels (including exact match). first one is exact match\n    :return: l_mu, a list of mu.\n    \"\"\"", "\n", "l_mu", "=", "[", "1", "]", "\n", "if", "n_kernels", "==", "1", ":", "\n", "        ", "return", "l_mu", "\n", "\n", "", "bin_size", "=", "2.0", "/", "(", "n_kernels", "-", "1", ")", "# score range from [-1, 1]", "\n", "l_mu", ".", "append", "(", "1", "-", "bin_size", "/", "2", ")", "# mu: middle of the bin", "\n", "for", "i", "in", "range", "(", "1", ",", "n_kernels", "-", "1", ")", ":", "\n", "        ", "l_mu", ".", "append", "(", "l_mu", "[", "i", "]", "-", "bin_size", ")", "\n", "", "return", "l_mu", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.models.kernel_sigmas": [[30, 45], ["None"], "function", ["None"], ["", "def", "kernel_sigmas", "(", "n_kernels", ")", ":", "\n", "    ", "\"\"\"\n    get sigmas for each guassian kernel.\n    :param n_kernels: number of kernels (including exactmath.)\n    :param lamb:\n    :param use_exact:\n    :return: l_sigma, a list of simga\n    \"\"\"", "\n", "bin_size", "=", "2.0", "/", "(", "n_kernels", "-", "1", ")", "\n", "l_sigma", "=", "[", "0.001", "]", "# for exact match. small variance -> exact match", "\n", "if", "n_kernels", "==", "1", ":", "\n", "        ", "return", "l_sigma", "\n", "\n", "", "l_sigma", "+=", "[", "0.1", "]", "*", "(", "n_kernels", "-", "1", ")", "\n", "return", "l_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.__init__": [[88, 112], ["data_loader.DataLoader.read_file", "list", "len", "zip", "data_loader.DataLoader.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.read_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["def", "__init__", "(", "self", ",", "data_path", ",", "label_map", ",", "tokenizer", ",", "args", ",", "test", "=", "False", ",", "cuda", "=", "True", ",", "batch_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "cuda", "=", "cuda", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "self", ".", "evi_num", "=", "args", ".", "evi_num", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "threshold", "=", "args", ".", "threshold", "\n", "self", ".", "data_path", "=", "data_path", "\n", "examples", "=", "self", ".", "read_file", "(", "data_path", ")", "\n", "self", ".", "examples", "=", "examples", "\n", "inputs", ",", "labels", "=", "list", "(", "zip", "(", "*", "examples", ")", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "test", "=", "test", "\n", "\n", "self", ".", "total_num", "=", "len", "(", "examples", ")", "\n", "if", "self", ".", "test", ":", "\n", "            ", "self", ".", "total_step", "=", "self", ".", "total_num", "/", "batch_size", "#np.ceil(self.total_num * 1.0 / batch_size)", "\n", "", "else", ":", "\n", "            ", "self", ".", "total_step", "=", "self", ".", "total_num", "/", "batch_size", "\n", "self", ".", "shuffle", "(", ")", "\n", "", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.read_file": [[115, 129], ["list", "open", "enumerate", "json.loads", "list", "list.append", "line.strip", "list.append", "data_loader.DataLoader.process_sent", "data_loader.DataLoader.process_wiki_title", "data_loader.DataLoader.process_sent"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_sent", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_wiki_title", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_sent"], ["", "def", "read_file", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "examples", "=", "list", "(", ")", "\n", "with", "open", "(", "data_path", ")", "as", "fin", ":", "\n", "            ", "for", "step", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "instance", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "claim", "=", "instance", "[", "'claim'", "]", "\n", "evi_list", "=", "list", "(", ")", "\n", "for", "evidence", "in", "instance", "[", "'evidence'", "]", ":", "\n", "                    ", "evi_list", ".", "append", "(", "[", "self", ".", "process_sent", "(", "claim", ")", ",", "self", ".", "process_wiki_title", "(", "evidence", "[", "0", "]", ")", ",", "\n", "self", ".", "process_sent", "(", "evidence", "[", "2", "]", ")", "]", ")", "\n", "", "label", "=", "self", ".", "label_map", "[", "instance", "[", "'label'", "]", "]", "\n", "evi_list", "=", "evi_list", "[", ":", "self", ".", "evi_num", "]", "# only the first were considered", "\n", "examples", ".", "append", "(", "[", "evi_list", ",", "label", "]", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.shuffle": [[131, 133], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.process_sent": [[134, 144], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_sent", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "sentence", "=", "re", ".", "sub", "(", "\" LSB.*?RSB\"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"LRB RRB \"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"LRB\"", ",", "\" ( \"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"RRB\"", ",", "\" )\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"--\"", ",", "\"-\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"``\"", ",", "'\"'", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"''\"", ",", "'\"'", ",", "sentence", ")", "\n", "\n", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.process_wiki_title": [[145, 151], ["re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_wiki_title", "(", "self", ",", "title", ")", ":", "\n", "        ", "title", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"LRB\"", ",", "\" ( \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"RRB\"", ",", "\" )\"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"COLON\"", ",", "\":\"", ",", "title", ")", "\n", "return", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.__iter__": [[153, 155], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.__next__": [[156, 158], ["data_loader.DataLoader.next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.__len__": [[159, 161], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoader.next": [[162, 198], ["range", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "StopIteration", "len", "data_loader.tok2int_list", "torch.LongTensor", "inp_tensor_input.cuda.cuda.cuda", "msk_tensor_input.cuda.cuda.cuda", "seg_tensor_input.cuda.cuda.cuda", "lab_tensor.cuda.cuda.cuda", "data_loader.DataLoader.shuffle", "list", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "zip", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "''' Get the next batch '''", "\n", "\n", "if", "self", ".", "step", "<", "self", ".", "total_step", ":", "\n", "            ", "inputs", "=", "self", ".", "inputs", "[", "self", ".", "step", "*", "self", ".", "batch_size", ":", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "labels", "=", "self", ".", "labels", "[", "self", ".", "step", "*", "self", ".", "batch_size", ":", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "inp_padding_inputs", ",", "msk_padding_inputs", ",", "seg_padding_inputs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "step", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "                ", "inp", ",", "msk", ",", "seg", "=", "tok2int_list", "(", "inputs", "[", "step", "]", ",", "self", ".", "tokenizer", ",", "self", ".", "max_len", ",", "self", ".", "evi_num", ")", "\n", "inp_padding_inputs", "+=", "inp", "\n", "msk_padding_inputs", "+=", "msk", "\n", "seg_padding_inputs", "+=", "seg", "\n", "\n", "", "inp_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "inp_padding_inputs", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ")", "\n", "msk_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "msk_padding_inputs", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ")", "\n", "seg_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "seg_padding_inputs", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ")", "\n", "lab_tensor", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "labels", ")", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "inp_tensor_input", "=", "inp_tensor_input", ".", "cuda", "(", ")", "\n", "msk_tensor_input", "=", "msk_tensor_input", ".", "cuda", "(", ")", "\n", "seg_tensor_input", "=", "seg_tensor_input", ".", "cuda", "(", ")", "\n", "lab_tensor", "=", "lab_tensor", ".", "cuda", "(", ")", "\n", "", "self", ".", "step", "+=", "1", "\n", "return", "(", "inp_tensor_input", ",", "msk_tensor_input", ",", "seg_tensor_input", ")", ",", "lab_tensor", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "=", "0", "\n", "if", "not", "self", ".", "test", ":", "\n", "                ", "self", ".", "shuffle", "(", ")", "\n", "inputs", ",", "labels", "=", "list", "(", "zip", "(", "*", "self", ".", "examples", ")", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "labels", "=", "labels", "\n", "", "raise", "StopIteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.__init__": [[202, 221], ["data_loader.DataLoaderTest.read_file", "list", "len", "numpy.ceil", "zip"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.read_file"], ["def", "__init__", "(", "self", ",", "data_path", ",", "label_map", ",", "tokenizer", ",", "args", ",", "cuda", "=", "True", ",", "batch_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "cuda", "=", "cuda", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "self", ".", "evi_num", "=", "args", ".", "evi_num", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "threshold", "=", "args", ".", "threshold", "\n", "self", ".", "data_path", "=", "data_path", "\n", "examples", "=", "self", ".", "read_file", "(", "data_path", ")", "\n", "self", ".", "examples", "=", "examples", "\n", "inputs", ",", "ids", "=", "list", "(", "zip", "(", "*", "examples", ")", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "ids", "=", "ids", "\n", "\n", "self", ".", "total_num", "=", "len", "(", "examples", ")", "\n", "self", ".", "total_step", "=", "np", ".", "ceil", "(", "self", ".", "total_num", "*", "1.0", "/", "batch_size", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.process_sent": [[222, 232], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_sent", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "sentence", "=", "re", ".", "sub", "(", "\" \\-LSB\\-.*?\\-RSB\\-\"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"\\-LRB\\- \\-RRB\\- \"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\" -LRB-\"", ",", "\" ( \"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"-RRB-\"", ",", "\" )\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"--\"", ",", "\"-\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"``\"", ",", "'\"'", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"''\"", ",", "'\"'", ",", "sentence", ")", "\n", "\n", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.process_wiki_title": [[233, 239], ["re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_wiki_title", "(", "self", ",", "title", ")", ":", "\n", "        ", "title", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\" -LRB-\"", ",", "\" ( \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"-RRB-\"", ",", "\" )\"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"-COLON-\"", ",", "\":\"", ",", "title", ")", "\n", "return", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.read_file": [[241, 255], ["list", "open", "enumerate", "json.loads", "list", "list.append", "line.strip", "list.append", "data_loader.DataLoaderTest.process_sent", "data_loader.DataLoaderTest.process_wiki_title", "data_loader.DataLoaderTest.process_sent"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_sent", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_wiki_title", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_sent"], ["", "def", "read_file", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "examples", "=", "list", "(", ")", "\n", "with", "open", "(", "data_path", ")", "as", "fin", ":", "\n", "            ", "for", "step", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "instance", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "claim", "=", "instance", "[", "'claim'", "]", "\n", "evi_list", "=", "list", "(", ")", "\n", "for", "evidence", "in", "instance", "[", "'evidence'", "]", ":", "\n", "                    ", "evi_list", ".", "append", "(", "[", "self", ".", "process_sent", "(", "claim", ")", ",", "self", ".", "process_wiki_title", "(", "evidence", "[", "0", "]", ")", ",", "\n", "self", ".", "process_sent", "(", "evidence", "[", "2", "]", ")", "]", ")", "\n", "", "id", "=", "instance", "[", "'id'", "]", "\n", "evi_list", "=", "evi_list", "[", ":", "self", ".", "evi_num", "]", "\n", "examples", ".", "append", "(", "[", "evi_list", ",", "id", "]", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.shuffle": [[257, 259], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.__iter__": [[260, 262], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.__next__": [[263, 265], ["data_loader.DataLoaderTest.next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.__len__": [[266, 268], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.DataLoaderTest.next": [[269, 300], ["range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "StopIteration", "len", "data_loader.tok2int_list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "inp_tensor_input.cuda.cuda.cuda", "msk_tensor_input.cuda.cuda.cuda", "seg_tensor_input.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_list"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "''' Get the next batch '''", "\n", "\n", "if", "self", ".", "step", "<", "self", ".", "total_step", ":", "\n", "            ", "inputs", "=", "self", ".", "inputs", "[", "self", ".", "step", "*", "self", ".", "batch_size", ":", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "ids", "=", "self", ".", "ids", "[", "self", ".", "step", "*", "self", ".", "batch_size", ":", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "inp_padding_inputs", ",", "msk_padding_inputs", ",", "seg_padding_inputs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "step", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "                ", "inp", ",", "msk", ",", "seg", "=", "tok2int_list", "(", "inputs", "[", "step", "]", ",", "self", ".", "tokenizer", ",", "self", ".", "max_len", ",", "self", ".", "evi_num", ")", "\n", "inp_padding_inputs", "+=", "inp", "\n", "msk_padding_inputs", "+=", "msk", "\n", "seg_padding_inputs", "+=", "seg", "\n", "\n", "", "inp_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "inp_padding_inputs", ")", ")", "\n", "msk_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "msk_padding_inputs", ")", ")", "\n", "seg_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "seg_padding_inputs", ")", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "inp_tensor_input", "=", "inp_tensor_input", ".", "cuda", "(", ")", "\n", "msk_tensor_input", "=", "msk_tensor_input", ".", "cuda", "(", ")", "\n", "seg_tensor_input", "=", "seg_tensor_input", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "step", "+=", "1", "\n", "return", "(", "inp_tensor_input", ",", "msk_tensor_input", ",", "seg_tensor_input", ")", ",", "ids", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "=", "0", "\n", "raise", "StopIteration", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader._truncate_seq_pair": [[9, 24], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.tok2int_sent": [[25, 61], ["tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "tokenizer.tokenize", "tokenizer.tokenize", "data_loader._truncate_seq_pair", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader._truncate_seq_pair"], ["", "", "", "def", "tok2int_sent", "(", "sentence", ",", "tokenizer", ",", "max_seq_length", ")", ":", "\n", "    ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "sent_a", ",", "title", ",", "sent_b", "=", "sentence", "\n", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "sent_a", ")", "\n", "\n", "tokens_b", "=", "None", "\n", "tokens_t", "=", "None", "\n", "if", "sent_b", "and", "title", ":", "\n", "        ", "tokens_t", "=", "tokenizer", ".", "tokenize", "(", "title", ")", "\n", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "sent_b", ")", "\n", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "4", "-", "len", "(", "tokens_t", ")", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "        ", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "            ", "tokens_a", "=", "tokens_a", "[", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "", "", "tokens", "=", "[", "\"<s>\"", "]", "+", "tokens_a", "+", "[", "\"</s>\"", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "tokens", ")", "\n", "if", "tokens_b", "and", "tokens_t", ":", "\n", "        ", "tokens", "=", "tokens", "+", "tokens_t", "+", "[", "\"</s>\"", "]", "+", "tokens_b", "+", "[", "\"</s>\"", "]", "\n", "segment_ids", "+=", "[", "1", "]", "*", "(", "len", "(", "tokens_b", ")", "+", "len", "(", "tokens_t", ")", "+", "2", ")", "\n", "#print (tokens)", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "padding", "=", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n", "padding_ids", "=", "[", "1", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n", "\n", "input_ids", "+=", "padding_ids", "\n", "input_mask", "+=", "padding", "\n", "segment_ids", "+=", "padding", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "return", "input_ids", ",", "input_mask", ",", "segment_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.data_loader.tok2int_list": [[66, 83], ["list", "list", "list", "enumerate", "data_loader.tok2int_sent", "list.append", "list.append", "list.append", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_sent"], ["", "def", "tok2int_list", "(", "src_list", ",", "tokenizer", ",", "max_seq_length", ",", "max_seq_size", "=", "-", "1", ")", ":", "\n", "    ", "inp_padding", "=", "list", "(", ")", "\n", "msk_padding", "=", "list", "(", ")", "\n", "seg_padding", "=", "list", "(", ")", "\n", "for", "step", ",", "sent", "in", "enumerate", "(", "src_list", ")", ":", "\n", "        ", "input_ids", ",", "input_mask", ",", "input_seg", "=", "tok2int_sent", "(", "sent", ",", "tokenizer", ",", "max_seq_length", ")", "\n", "inp_padding", ".", "append", "(", "input_ids", ")", "\n", "msk_padding", ".", "append", "(", "input_mask", ")", "\n", "seg_padding", ".", "append", "(", "input_seg", ")", "\n", "", "if", "max_seq_size", "!=", "-", "1", ":", "\n", "        ", "inp_padding", "=", "inp_padding", "[", ":", "max_seq_size", "]", "\n", "msk_padding", "=", "msk_padding", "[", ":", "max_seq_size", "]", "\n", "seg_padding", "=", "seg_padding", "[", ":", "max_seq_size", "]", "\n", "inp_padding", "+=", "(", "[", "[", "0", "]", "*", "max_seq_length", "]", "*", "(", "max_seq_size", "-", "len", "(", "inp_padding", ")", ")", ")", "\n", "msk_padding", "+=", "(", "[", "[", "0", "]", "*", "max_seq_length", "]", "*", "(", "max_seq_size", "-", "len", "(", "msk_padding", ")", ")", ")", "\n", "seg_padding", "+=", "(", "[", "[", "0", "]", "*", "max_seq_length", "]", "*", "(", "max_seq_size", "-", "len", "(", "seg_padding", ")", ")", ")", "\n", "", "return", "inp_padding", ",", "msk_padding", ",", "seg_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.is_torch_available": [[75, 77], ["None"], "function", ["None"], ["def", "is_torch_available", "(", ")", ":", "\n", "    ", "return", "_torch_available", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.is_tf_available": [[78, 80], ["None"], "function", ["None"], ["", "def", "is_tf_available", "(", ")", ":", "\n", "    ", "return", "_tf_available", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.url_to_filename": [[105, 127], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "url.endswith", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "", "def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    If the url ends with .h5 (Keras HDF5 weights) ands '.h5' to the name\n    so that TF 2.0 can identify it as a HDF5 file\n    (see https://github.com/tensorflow/tensorflow/blob/00fad90125b18b80fe054de1055770cfb8fe4ba3/tensorflow/python/keras/engine/network.py#L1380)\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "if", "url", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "        ", "filename", "+=", "'.h5'", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.filename_to_url": [[129, 153], ["os.path.join", "isinstance", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.cached_path": [[155, 186], ["urlparse", "isinstance", "str", "isinstance", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    Args:\n        cache_dir: specify a cache directory to save the file to (overwrite the default cache dir).\n        force_download: if True, re-dowload the file even if it's already cached in the cache dir.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.split_s3_path": [[188, 199], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.s3_request": [[201, 218], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.s3_etag": [[220, 227], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object", "botocore.config.Config"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.s3_get": [[229, 235], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "botocore.config.Config", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.http_get": [[237, 247], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "proxies", "=", "proxies", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.file_utils.get_from_cache": [[249, 325], ["url.startswith", "file_utils.url_to_filename", "os.path.join", "isinstance", "str", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "response.headers.get.decode", "fnmatch.filter", "list", "isinstance", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "os.path.exists", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "isinstance", "unicode", "s.endswith"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.url_to_filename", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_etag", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_get", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.http_get", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ",", "etag_timeout", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "not", "isinstance", "(", "cache_dir", ",", "str", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ",", "proxies", "=", "proxies", ",", "timeout", "=", "etag_timeout", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "(", "EnvironmentError", ",", "requests", ".", "exceptions", ".", "Timeout", ")", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "etag", "is", "not", "None", ":", "\n", "        ", "etag", "=", "etag", ".", "decode", "(", "'utf-8'", ")", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "or", "force_download", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache or force_download set to True, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "output_string", ",", "str", ")", ":", "\n", "                    ", "output_string", "=", "unicode", "(", "output_string", ",", "'utf-8'", ")", "# The beauty of python 2", "\n", "", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.train.accuracy": [[20, 25], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.train.correct_prediction": [[26, 31], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "correct_prediction", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.train.eval_model": [[33, 42], ["model.eval", "enumerate", "model", "train.correct_prediction"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.correct_prediction"], ["", "def", "eval_model", "(", "model", ",", "validset_reader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct_pred", "=", "0.0", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "validset_reader", ")", ":", "\n", "        ", "inputs", ",", "lab_tensor", "=", "data", "\n", "prob", "=", "model", "(", "inputs", ")", "\n", "correct_pred", "+=", "correct_prediction", "(", "prob", ",", "lab_tensor", ")", "\n", "", "dev_accuracy", "=", "correct_pred", "/", "validset_reader", ".", "total_num", "\n", "return", "dev_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.train.train_model": [[45, 101], ["int", "transformers.AdamW", "transformers.get_linear_schedule_with_warmup", "model.train", "range", "int", "enumerate", "int", "model.train", "model", "torch.nll_loss", "F.nll_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "F.nll_loss.item", "model.parameters", "transformers.AdamW.step", "transformers.get_linear_schedule_with_warmup.step", "model.zero_grad", "logger.info", "model.named_parameters", "model.named_parameters", "any", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.eval_model", "logger.info", "any", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "ori_model.state_dict"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.train", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.train", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.eval_model"], ["", "def", "train_model", "(", "model", ",", "ori_model", ",", "args", ",", "trainset_reader", ",", "validset_reader", ")", ":", "\n", "    ", "save_path", "=", "args", ".", "outdir", "+", "'/model'", "\n", "best_accuracy", "=", "0.0", "\n", "running_loss", "=", "0.0", "\n", "t_total", "=", "int", "(", "\n", "trainset_reader", ".", "total_num", "/", "args", ".", "train_batch_size", "/", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "num_train_epochs", ")", "\n", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "learning_rate", ",", "eps", "=", "1e-8", ",", "correct_bias", "=", "True", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "int", "(", "args", ".", "warmup_proportion", "*", "t_total", ")", ",", "num_training_steps", "=", "t_total", ")", "\n", "\n", "\n", "global_step", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "int", "(", "args", ".", "num_train_epochs", ")", ")", ":", "\n", "# optimizer.zero_grad()", "\n", "        ", "for", "index", ",", "data", "in", "enumerate", "(", "trainset_reader", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n", "inputs", ",", "lab_tensor", "=", "data", "\n", "prob", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "prob", ",", "lab_tensor", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "               ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "global_step", "+=", "1", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "model", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "%", "(", "args", ".", "gradient_accumulation_steps", "*", "10", ")", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Epoch: {0}, Step: {1}, Loss: {2}'", ".", "format", "(", "epoch", ",", "global_step", "//", "args", ".", "gradient_accumulation_steps", ",", "(", "running_loss", "/", "10", ")", ")", ")", "\n", "running_loss", "=", "0", "\n", "\n", "", "", "if", "global_step", "%", "(", "args", ".", "eval_step", "*", "args", ".", "gradient_accumulation_steps", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Start eval!'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "dev_accuracy", "=", "eval_model", "(", "model", ",", "validset_reader", ")", "\n", "logger", ".", "info", "(", "'Dev total acc: {0}'", ".", "format", "(", "dev_accuracy", ")", ")", "\n", "if", "dev_accuracy", ">", "best_accuracy", ":", "\n", "                        ", "best_accuracy", "=", "dev_accuracy", "\n", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "ori_model", ".", "state_dict", "(", ")", ",", "\n", "'best_accuracy'", ":", "best_accuracy", "}", ",", "save_path", "+", "\".best.pt\"", ")", "\n", "logger", ".", "info", "(", "\"Saved best epoch {0}, best accuracy {1}\"", ".", "format", "(", "epoch", ",", "best_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.train.set_seed": [[102, 107], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "", "", "", "", "def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.FEVER.test.eval_model": [[29, 41], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "open", "enumerate", "model", "[].tolist", "range", "len", "len", "len", "f.write", "model.max", "json.dumps"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "eval_model", "(", "model", ",", "label_list", ",", "validset_reader", ",", "outdir", ",", "name", ")", ":", "\n", "    ", "outpath", "=", "outdir", "+", "name", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "open", "(", "outpath", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "index", ",", "data", "in", "enumerate", "(", "validset_reader", ")", ":", "\n", "                ", "inputs", ",", "ids", "=", "data", "\n", "logits", "=", "model", "(", "inputs", ")", "\n", "preds", "=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "preds", ")", "==", "len", "(", "ids", ")", "\n", "for", "step", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                    ", "instance", "=", "{", "\"id\"", ":", "ids", "[", "step", "]", ",", "\"predicted_label\"", ":", "label_list", "[", "preds", "[", "step", "]", "]", "}", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "instance", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.parse": [[397, 412], ["WikiExtractor.Template", "WikiExtractor.findMatchingBraces", "Template.append", "Template.append", "Template.append", "WikiExtractor.TemplateText", "WikiExtractor.TemplateText", "WikiExtractor.TemplateArg"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findMatchingBraces"], ["@", "classmethod", "\n", "def", "parse", "(", "cls", ",", "body", ")", ":", "\n", "        ", "tpl", "=", "Template", "(", ")", "\n", "# we must handle nesting, s.a.", "\n", "# {{{1|{{PAGENAME}}}", "\n", "# {{{italics|{{{italic|}}}", "\n", "# {{#if:{{{{{#if:{{{nominee|}}}|nominee|candidate}}|}}}|", "\n", "#", "\n", "start", "=", "0", "\n", "for", "s", ",", "e", "in", "findMatchingBraces", "(", "body", ",", "3", ")", ":", "\n", "            ", "tpl", ".", "append", "(", "TemplateText", "(", "body", "[", "start", ":", "s", "]", ")", ")", "\n", "tpl", ".", "append", "(", "TemplateArg", "(", "body", "[", "s", "+", "3", ":", "e", "-", "3", "]", ")", ")", "\n", "start", "=", "e", "\n", "", "tpl", ".", "append", "(", "TemplateText", "(", "body", "[", "start", ":", "]", ")", ")", "# leftover", "\n", "return", "tpl", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.subst": [[414, 436], ["tpl.subst"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateArg.subst"], ["", "def", "subst", "(", "self", ",", "params", ",", "extractor", ",", "depth", "=", "0", ")", ":", "\n", "# We perform parameter substitutions recursively.", "\n", "# We also limit the maximum number of iterations to avoid too long or", "\n", "# even endless loops (in case of malformed input).", "\n", "\n", "# :see: http://meta.wikimedia.org/wiki/Help:Expansion#Distinction_between_variables.2C_parser_functions.2C_and_templates", "\n", "#", "\n", "# Parameter values are assigned to parameters in two (?) passes.", "\n", "# Therefore a parameter name in a template can depend on the value of", "\n", "# another parameter of the same template, regardless of the order in", "\n", "# which they are specified in the template call, for example, using", "\n", "# Template:ppp containing \"{{{{{{p}}}}}}\", {{ppp|p=q|q=r}} and even", "\n", "# {{ppp|q=r|p=q}} gives r, but using Template:tvvv containing", "\n", "# \"{{{{{{{{{p}}}}}}}}}\", {{tvvv|p=q|q=r|r=s}} gives s.", "\n", "\n", "# logging.debug('&*ssubst tpl %d %s', extractor.frame.length, '', depth, self)", "\n", "\n", "        ", "if", "depth", ">", "extractor", ".", "maxParameterRecursionLevels", ":", "\n", "            ", "extractor", ".", "recursion_exceeded_3_errs", "+=", "1", "\n", "return", "''", "\n", "\n", "", "return", "''", ".", "join", "(", "[", "tpl", ".", "subst", "(", "params", ",", "extractor", ",", "depth", ")", "for", "tpl", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.__str__": [[437, 439], ["text_type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "''", ".", "join", "(", "[", "text_type", "(", "x", ")", "for", "x", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateText.subst": [[445, 447], ["None"], "methods", ["None"], ["def", "subst", "(", "self", ",", "params", ",", "extractor", ",", "depth", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateArg.__init__": [[455, 474], ["WikiExtractor.splitParts", "WikiExtractor.Template.parse", "len", "WikiExtractor.Template.parse"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.splitParts", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.parse"], ["def", "__init__", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "\"\"\"\n        :param parameter: the parts of a tplarg.\n        \"\"\"", "\n", "# the parameter name itself might contain templates, e.g.:", "\n", "#   appointe{{#if:{{{appointer14|}}}|r|d}}14|", "\n", "#   4|{{{{{subst|}}}CURRENTYEAR}}", "\n", "\n", "# any parts in a tplarg after the first (the parameter default) are", "\n", "# ignored, and an equals sign in the first part is treated as plain text.", "\n", "# logging.debug('TemplateArg %s', parameter)", "\n", "\n", "parts", "=", "splitParts", "(", "parameter", ")", "\n", "self", ".", "name", "=", "Template", ".", "parse", "(", "parts", "[", "0", "]", ")", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "# This parameter has a default value", "\n", "            ", "self", ".", "default", "=", "Template", ".", "parse", "(", "parts", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "default", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateArg.__str__": [[475, 480], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "default", ":", "\n", "            ", "return", "'{{{%s|%s}}}'", "%", "(", "self", ".", "name", ",", "self", ".", "default", ")", "\n", "", "else", ":", "\n", "            ", "return", "'{{{%s}}}'", "%", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateArg.subst": [[482, 500], ["WikiExtractor.TemplateArg.name.subst", "extractor.transform", "WikiExtractor.TemplateArg.default.subst", "extractor.transform"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateArg.subst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.TemplateArg.subst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform"], ["", "", "def", "subst", "(", "self", ",", "params", ",", "extractor", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Substitute value for this argument from dict :param params:\n        Use :param extractor: to evaluate expressions for name and default.\n        Limit substitution to the maximun :param depth:.\n        \"\"\"", "\n", "# the parameter name itself might contain templates, e.g.:", "\n", "# appointe{{#if:{{{appointer14|}}}|r|d}}14|", "\n", "paramName", "=", "self", ".", "name", ".", "subst", "(", "params", ",", "extractor", ",", "depth", "+", "1", ")", "\n", "paramName", "=", "extractor", ".", "transform", "(", "paramName", ")", "\n", "res", "=", "''", "\n", "if", "paramName", "in", "params", ":", "\n", "            ", "res", "=", "params", "[", "paramName", "]", "# use parameter value specified in template invocation", "\n", "", "elif", "self", ".", "default", ":", "# use the default value", "\n", "            ", "defaultValue", "=", "self", ".", "default", ".", "subst", "(", "params", ",", "extractor", ",", "depth", "+", "1", ")", "\n", "res", "=", "extractor", ".", "transform", "(", "defaultValue", ")", "\n", "# logging.debug('subst arg %d %s -> %s' % (depth, paramName, res))", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.__init__": [[504, 509], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "title", "=", "''", ",", "args", "=", "[", "]", ",", "prev", "=", "None", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "prev", "=", "prev", "\n", "self", ".", "depth", "=", "prev", ".", "depth", "+", "1", "if", "prev", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.push": [[511, 513], ["WikiExtractor.Frame"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "title", ",", "args", ")", ":", "\n", "        ", "return", "Frame", "(", "title", ",", "args", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop": [[515, 517], ["None"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "prev", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.__str__": [[519, 527], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "res", "=", "''", "\n", "prev", "=", "self", ".", "prev", "\n", "while", "prev", ":", "\n", "            ", "if", "res", ":", "res", "+=", "', '", "\n", "res", "+=", "'(%s, %s)'", "%", "(", "prev", ".", "title", ",", "prev", ".", "args", ")", "\n", "prev", "=", "prev", ".", "prev", "\n", "", "return", "'<Frame ['", "+", "res", "+", "']>'", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.__init__": [[536, 552], ["WikiExtractor.MagicWords", "WikiExtractor.Frame"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "revid", ",", "title", ",", "lines", ")", ":", "\n", "        ", "\"\"\"\n        :param id: id of page.\n        :param title: tutle of page.\n        :param lines: a list of lines.\n        \"\"\"", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "revid", "=", "revid", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "text", "=", "''", ".", "join", "(", "lines", ")", "\n", "self", ".", "magicWords", "=", "MagicWords", "(", ")", "\n", "self", ".", "frame", "=", "Frame", "(", ")", "\n", "self", ".", "recursion_exceeded_1_errs", "=", "0", "# template recursion within expand()", "\n", "self", ".", "recursion_exceeded_2_errs", "=", "0", "# template recursion within expandTemplate()", "\n", "self", ".", "recursion_exceeded_3_errs", "=", "0", "# parameter recursion", "\n", "self", ".", "template_title_errs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.write_output": [[553, 590], ["WikiExtractor.get_url", "json.dumps", "out.write", "out.write", "out.write", "out.write", "out_str.encode.encode.encode", "header.encode.encode.encode", "out.write", "out.write", "line.encode.encode.encode"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.get_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "def", "write_output", "(", "self", ",", "out", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param out: a memory file\n        :param text: the text of the page\n        \"\"\"", "\n", "url", "=", "get_url", "(", "self", ".", "id", ")", "\n", "if", "options", ".", "write_json", ":", "\n", "            ", "json_data", "=", "{", "\n", "'id'", ":", "self", ".", "id", ",", "\n", "'url'", ":", "url", ",", "\n", "'title'", ":", "self", ".", "title", ",", "\n", "'text'", ":", "\"\\n\"", ".", "join", "(", "text", ")", "\n", "}", "\n", "if", "options", ".", "print_revision", ":", "\n", "                ", "json_data", "[", "'revid'", "]", "=", "self", ".", "revid", "\n", "# We don't use json.dump(data, out) because we want to be", "\n", "# able to encode the string if the output is sys.stdout", "\n", "", "out_str", "=", "json", ".", "dumps", "(", "json_data", ",", "ensure_ascii", "=", "False", ")", "\n", "if", "out", "==", "sys", ".", "stdout", ":", "# option -a or -o -", "\n", "                ", "out_str", "=", "out_str", ".", "encode", "(", "'utf-8'", ")", "\n", "", "out", ".", "write", "(", "out_str", ")", "\n", "out", ".", "write", "(", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "if", "options", ".", "print_revision", ":", "\n", "                ", "header", "=", "'<doc id=\"%s\" revid=\"%s\" url=\"%s\" title=\"%s\">\\n'", "%", "(", "self", ".", "id", ",", "self", ".", "revid", ",", "url", ",", "self", ".", "title", ")", "\n", "", "else", ":", "\n", "                ", "header", "=", "'<doc id=\"%s\" url=\"%s\" title=\"%s\">\\n'", "%", "(", "self", ".", "id", ",", "url", ",", "self", ".", "title", ")", "\n", "", "footer", "=", "\"\\n</doc>\\n\"", "\n", "if", "out", "==", "sys", ".", "stdout", ":", "# option -a or -o -", "\n", "                ", "header", "=", "header", ".", "encode", "(", "'utf-8'", ")", "\n", "", "out", ".", "write", "(", "header", ")", "\n", "for", "line", "in", "text", ":", "\n", "                ", "if", "out", "==", "sys", ".", "stdout", ":", "# option -a or -o -", "\n", "                    ", "line", "=", "line", ".", "encode", "(", "'utf-8'", ")", "\n", "", "out", ".", "write", "(", "line", ")", "\n", "out", ".", "write", "(", "'\\n'", ")", "\n", "", "out", ".", "write", "(", "footer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.extract": [[591, 658], ["logging.info", "WikiExtractor.Extractor.title.find", "options.knownNamespaces.get", "pagename.rfind", "pagename.find", "time.strftime", "time.strftime", "time.strftime", "time.strftime", "time.strftime", "WikiExtractor.Extractor.transform", "WikiExtractor.Extractor.wiki2text", "WikiExtractor.compact", "WikiExtractor.Extractor.write_output", "any", "WikiExtractor.Extractor.clean", "sum", "logging.warn", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.wiki2text", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.compact", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.write_output", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.clean"], ["", "", "def", "extract", "(", "self", ",", "out", ")", ":", "\n", "        ", "\"\"\"\n        :param out: a memory file.\n        \"\"\"", "\n", "logging", ".", "info", "(", "'%s\\t%s'", ",", "self", ".", "id", ",", "self", ".", "title", ")", "\n", "\n", "# Separate header from text with a newline.", "\n", "if", "options", ".", "toHTML", ":", "\n", "            ", "title_str", "=", "'<h1>'", "+", "self", ".", "title", "+", "'</h1>'", "\n", "", "else", ":", "\n", "            ", "title_str", "=", "self", ".", "title", "+", "'\\n'", "\n", "# https://www.mediawiki.org/wiki/Help:Magic_words", "\n", "", "colon", "=", "self", ".", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", "!=", "-", "1", ":", "\n", "            ", "ns", "=", "self", ".", "title", "[", ":", "colon", "]", "\n", "pagename", "=", "self", ".", "title", "[", "colon", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "ns", "=", "''", "# Main", "\n", "pagename", "=", "self", ".", "title", "\n", "", "self", ".", "magicWords", "[", "'NAMESPACE'", "]", "=", "ns", "\n", "self", ".", "magicWords", "[", "'NAMESPACENUMBER'", "]", "=", "options", ".", "knownNamespaces", ".", "get", "(", "ns", ",", "'0'", ")", "\n", "self", ".", "magicWords", "[", "'PAGENAME'", "]", "=", "pagename", "\n", "self", ".", "magicWords", "[", "'FULLPAGENAME'", "]", "=", "self", ".", "title", "\n", "slash", "=", "pagename", ".", "rfind", "(", "'/'", ")", "\n", "if", "slash", "!=", "-", "1", ":", "\n", "            ", "self", ".", "magicWords", "[", "'BASEPAGENAME'", "]", "=", "pagename", "[", ":", "slash", "]", "\n", "self", ".", "magicWords", "[", "'SUBPAGENAME'", "]", "=", "pagename", "[", "slash", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "magicWords", "[", "'BASEPAGENAME'", "]", "=", "pagename", "\n", "self", ".", "magicWords", "[", "'SUBPAGENAME'", "]", "=", "''", "\n", "", "slash", "=", "pagename", ".", "find", "(", "'/'", ")", "\n", "if", "slash", "!=", "-", "1", ":", "\n", "            ", "self", ".", "magicWords", "[", "'ROOTPAGENAME'", "]", "=", "pagename", "[", ":", "slash", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "magicWords", "[", "'ROOTPAGENAME'", "]", "=", "pagename", "\n", "", "self", ".", "magicWords", "[", "'CURRENTYEAR'", "]", "=", "time", ".", "strftime", "(", "'%Y'", ")", "\n", "self", ".", "magicWords", "[", "'CURRENTMONTH'", "]", "=", "time", ".", "strftime", "(", "'%m'", ")", "\n", "self", ".", "magicWords", "[", "'CURRENTDAY'", "]", "=", "time", ".", "strftime", "(", "'%d'", ")", "\n", "self", ".", "magicWords", "[", "'CURRENTHOUR'", "]", "=", "time", ".", "strftime", "(", "'%H'", ")", "\n", "self", ".", "magicWords", "[", "'CURRENTTIME'", "]", "=", "time", ".", "strftime", "(", "'%H:%M:%S'", ")", "\n", "text", "=", "self", ".", "text", "\n", "self", ".", "text", "=", "''", "# save memory", "\n", "#", "\n", "# @see https://doc.wikimedia.org/mediawiki-core/master/php/classParser.html", "\n", "# This does the equivalent of internalParse():", "\n", "#", "\n", "# $dom = $this->preprocessToDom( $text, $flag );", "\n", "# $text = $frame->expand( $dom );", "\n", "#", "\n", "text", "=", "self", ".", "transform", "(", "text", ")", "\n", "text", "=", "self", ".", "wiki2text", "(", "text", ")", "\n", "text", "=", "compact", "(", "self", ".", "clean", "(", "text", ")", ")", "\n", "# from zwChan", "\n", "text", "=", "[", "title_str", "]", "+", "text", "\n", "\n", "if", "sum", "(", "len", "(", "line", ")", "for", "line", "in", "text", ")", "<", "options", ".", "min_text_length", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "write_output", "(", "out", ",", "text", ")", "\n", "\n", "errs", "=", "(", "self", ".", "template_title_errs", ",", "\n", "self", ".", "recursion_exceeded_1_errs", ",", "\n", "self", ".", "recursion_exceeded_2_errs", ",", "\n", "self", ".", "recursion_exceeded_3_errs", ")", "\n", "if", "any", "(", "errs", ")", ":", "\n", "            ", "logging", ".", "warn", "(", "\"Template errors in article '%s' (%s): title(%d) recursion(%d, %d, %d)\"", ",", "\n", "self", ".", "title", ",", "self", ".", "id", ",", "*", "errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform": [[660, 674], ["nowiki.finditer", "WikiExtractor.Extractor.transform1", "m.end", "WikiExtractor.Extractor.transform1", "m.start", "m.end", "m.start"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform1", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform1"], ["", "", "def", "transform", "(", "self", ",", "wikitext", ")", ":", "\n", "        ", "\"\"\"\n        Transforms wiki markup.\n        @see https://www.mediawiki.org/wiki/Help:Formatting\n        \"\"\"", "\n", "# look for matching <nowiki>...</nowiki>", "\n", "res", "=", "''", "\n", "cur", "=", "0", "\n", "for", "m", "in", "nowiki", ".", "finditer", "(", "wikitext", ",", "cur", ")", ":", "\n", "            ", "res", "+=", "self", ".", "transform1", "(", "wikitext", "[", "cur", ":", "m", ".", "start", "(", ")", "]", ")", "+", "wikitext", "[", "m", ".", "start", "(", ")", ":", "m", ".", "end", "(", ")", "]", "\n", "cur", "=", "m", ".", "end", "(", ")", "\n", "# leftover", "\n", "", "res", "+=", "self", ".", "transform1", "(", "wikitext", "[", "cur", ":", "]", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform1": [[676, 685], ["WikiExtractor.Extractor.expand", "WikiExtractor.dropNested"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropNested"], ["", "def", "transform1", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Transform text not containing <nowiki>\"\"\"", "\n", "if", "options", ".", "expand_templates", ":", "\n", "# expand templates", "\n", "# See: http://www.mediawiki.org/wiki/Help:Templates", "\n", "            ", "return", "self", ".", "expand", "(", "text", ")", "\n", "", "else", ":", "\n", "# Drop transclusions (template, parser functions)", "\n", "            ", "return", "dropNested", "(", "text", ",", "r'{{'", ",", "r'}}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.wiki2text": [[687, 741], ["quote_quote.sub.replace().replace", "WikiExtractor.replaceInternalLinks", "WikiExtractor.replaceExternalLinks", "magicWordsRE.sub", "syntaxhighlight.finditer", "WikiExtractor.dropNested", "WikiExtractor.dropNested", "bold_italic.sub", "bold.sub", "italic.sub", "bold_italic.sub", "bold.sub", "italic_quote.sub", "italic.sub", "quote_quote.sub", "m.end", "WikiExtractor.unescape", "quote_quote.sub.replace", "WikiExtractor.unescape", "m.group", "m.start"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.replaceInternalLinks", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.replaceExternalLinks", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropNested", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropNested", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.unescape", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.unescape"], ["", "", "def", "wiki2text", "(", "self", ",", "text", ")", ":", "\n", "#", "\n", "# final part of internalParse().)", "\n", "#", "\n", "# $text = $this->doTableStuff( $text );", "\n", "# $text = preg_replace( '/(^|\\n)-----*/', '\\\\1<hr />', $text );", "\n", "# $text = $this->doDoubleUnderscore( $text );", "\n", "# $text = $this->doHeadings( $text );", "\n", "# $text = $this->replaceInternalLinks( $text );", "\n", "# $text = $this->doAllQuotes( $text );", "\n", "# $text = $this->replaceExternalLinks( $text );", "\n", "# $text = str_replace( self::MARKER_PREFIX . 'NOPARSE', '', $text );", "\n", "# $text = $this->doMagicLinks( $text );", "\n", "# $text = $this->formatHeadings( $text, $origText, $isMain );", "\n", "\n", "# Drop tables", "\n", "# first drop residual templates, or else empty parameter |} might look like end of table.", "\n", "        ", "if", "not", "options", ".", "keep_tables", ":", "\n", "            ", "text", "=", "dropNested", "(", "text", ",", "r'{{'", ",", "r'}}'", ")", "\n", "text", "=", "dropNested", "(", "text", ",", "r'{\\|'", ",", "r'\\|}'", ")", "\n", "\n", "# Handle bold/italic/quote", "\n", "", "if", "options", ".", "toHTML", ":", "\n", "            ", "text", "=", "bold_italic", ".", "sub", "(", "r'<b>\\1</b>'", ",", "text", ")", "\n", "text", "=", "bold", ".", "sub", "(", "r'<b>\\1</b>'", ",", "text", ")", "\n", "text", "=", "italic", ".", "sub", "(", "r'<i>\\1</i>'", ",", "text", ")", "\n", "", "else", ":", "\n", "            ", "text", "=", "bold_italic", ".", "sub", "(", "r'\\1'", ",", "text", ")", "\n", "text", "=", "bold", ".", "sub", "(", "r'\\1'", ",", "text", ")", "\n", "text", "=", "italic_quote", ".", "sub", "(", "r'\"\\1\"'", ",", "text", ")", "\n", "text", "=", "italic", ".", "sub", "(", "r'\"\\1\"'", ",", "text", ")", "\n", "text", "=", "quote_quote", ".", "sub", "(", "r'\"\\1\"'", ",", "text", ")", "\n", "# residuals of unbalanced quotes", "\n", "", "text", "=", "text", ".", "replace", "(", "\"'''\"", ",", "''", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "# replace internal links", "\n", "text", "=", "replaceInternalLinks", "(", "text", ")", "\n", "\n", "# replace external links", "\n", "text", "=", "replaceExternalLinks", "(", "text", ")", "\n", "\n", "# drop MagicWords behavioral switches", "\n", "text", "=", "magicWordsRE", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "# ############### Process HTML ###############", "\n", "\n", "# turn into HTML, except for the content of <syntaxhighlight>", "\n", "res", "=", "''", "\n", "cur", "=", "0", "\n", "for", "m", "in", "syntaxhighlight", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "res", "+=", "unescape", "(", "text", "[", "cur", ":", "m", ".", "start", "(", ")", "]", ")", "+", "m", ".", "group", "(", "1", ")", "\n", "cur", "=", "m", ".", "end", "(", ")", "\n", "", "text", "=", "res", "+", "unescape", "(", "text", "[", "cur", ":", "]", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.clean": [[743, 807], ["comment.finditer", "WikiExtractor.dropSpans", "text.replace.replace.replace().replace", "text.replace.replace.replace", "spaces.sub", "dots.sub", "re.sub", "re.sub", "re.sub", "text.replace.replace.replace().replace", "spans.append", "pattern.finditer", "left.finditer", "right.finditer", "WikiExtractor.dropNested", "WikiExtractor.unescape", "pattern.finditer", "re.sub", "re.sub", "text.replace.replace.replace", "text.replace.replace.replace", "cgi.escape", "spans.append", "spans.append", "spans.append", "text.replace.replace.replace", "text.replace.replace.replace", "text.replace.replace.replace", "m.start", "m.end", "match.group", "m.start", "m.end", "m.start", "m.end", "m.start", "m.end"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropSpans", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropNested", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.unescape"], ["", "def", "clean", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Removes irrelevant parts from :param: text.\n        \"\"\"", "\n", "\n", "# Collect spans", "\n", "spans", "=", "[", "]", "\n", "# Drop HTML comments", "\n", "for", "m", "in", "comment", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Drop self-closing tags", "\n", "", "for", "pattern", "in", "selfClosing_tag_patterns", ":", "\n", "            ", "for", "m", "in", "pattern", ".", "finditer", "(", "text", ")", ":", "\n", "                ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Drop ignored tags", "\n", "", "", "for", "left", ",", "right", "in", "options", ".", "ignored_tag_patterns", ":", "\n", "            ", "for", "m", "in", "left", ".", "finditer", "(", "text", ")", ":", "\n", "                ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "", "for", "m", "in", "right", ".", "finditer", "(", "text", ")", ":", "\n", "                ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Bulk remove all spans", "\n", "", "", "text", "=", "dropSpans", "(", "spans", ",", "text", ")", "\n", "\n", "# Drop discarded elements", "\n", "for", "tag", "in", "options", ".", "discardElements", ":", "\n", "            ", "text", "=", "dropNested", "(", "text", ",", "r'<\\s*%s\\b[^>/]*>'", "%", "tag", ",", "r'<\\s*/\\s*%s>'", "%", "tag", ")", "\n", "\n", "", "if", "not", "options", ".", "toHTML", ":", "\n", "# Turn into text what is left (&amp;nbsp;) and <syntaxhighlight>", "\n", "            ", "text", "=", "unescape", "(", "text", ")", "\n", "\n", "# Expand placeholders", "\n", "", "for", "pattern", ",", "placeholder", "in", "placeholder_tag_patterns", ":", "\n", "            ", "index", "=", "1", "\n", "for", "match", "in", "pattern", ".", "finditer", "(", "text", ")", ":", "\n", "                ", "text", "=", "text", ".", "replace", "(", "match", ".", "group", "(", ")", ",", "'%s_%d'", "%", "(", "placeholder", ",", "index", ")", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "text", "=", "text", ".", "replace", "(", "'<<'", ",", "'\u00ab'", ")", ".", "replace", "(", "'>>'", ",", "'\u00bb'", ")", "\n", "\n", "#############################################", "\n", "\n", "# Cleanup text", "\n", "text", "=", "text", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "text", "=", "spaces", ".", "sub", "(", "' '", ",", "text", ")", "\n", "text", "=", "dots", ".", "sub", "(", "'...'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "' (,:\\.\\)\\]\u00bb)'", ",", "r'\\1'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'(\\[\\(\u00ab) '", ",", "r'\\1'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\n\\W+?\\n'", ",", "'\\n'", ",", "text", ",", "flags", "=", "re", ".", "U", ")", "# lines with only punctuations", "\n", "text", "=", "text", ".", "replace", "(", "',,'", ",", "','", ")", ".", "replace", "(", "',.'", ",", "'.'", ")", "\n", "if", "options", ".", "keep_tables", ":", "\n", "# the following regular expressions are used to remove the wikiml chartacters around table strucutures", "\n", "# yet keep the content. The order here is imporant so we remove certain markup like {| and then", "\n", "# then the future html attributes such as 'style'. Finally we drop the remaining '|-' that delimits cells.", "\n", "            ", "text", "=", "re", ".", "sub", "(", "r'!(?:\\s)?style=\\\"[a-z]+:(?:\\d+)%;\\\"'", ",", "r''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'!(?:\\s)?style=\"[a-z]+:(?:\\d+)%;[a-z]+:(?:#)?(?:[0-9a-z]+)?\"'", ",", "r''", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'|-'", ",", "''", ")", "\n", "text", "=", "text", ".", "replace", "(", "'|'", ",", "''", ")", "\n", "", "if", "options", ".", "toHTML", ":", "\n", "            ", "text", "=", "cgi", ".", "escape", "(", "text", ")", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand": [[819, 854], ["WikiExtractor.findMatchingBraces", "WikiExtractor.Extractor.expandTemplate"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findMatchingBraces", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expandTemplate"], ["def", "expand", "(", "self", ",", "wikitext", ")", ":", "\n", "        ", "\"\"\"\n        :param wikitext: the text to be expanded.\n        Templates are frequently nested. Occasionally, parsing mistakes may\n        cause template insertion to enter an infinite loop, for instance when\n        trying to instantiate Template:Country\n        {{country_{{{1}}}|{{{2}}}|{{{2}}}|size={{{size|}}}|name={{{name|}}}}}\n        which is repeatedly trying to insert template 'country_', which is\n        again resolved to Template:Country. The straightforward solution of\n        keeping track of templates that were already inserted for the current\n        article would not work, because the same template may legally be used\n        more than once, with different parameters in different parts of the\n        article.  Therefore, we limit the number of iterations of nested\n        template inclusion.\n        \"\"\"", "\n", "# Test template expansion at:", "\n", "# https://en.wikipedia.org/wiki/Special:ExpandTemplates", "\n", "# https://it.wikipedia.org/wiki/Speciale:EspandiTemplate", "\n", "\n", "res", "=", "''", "\n", "if", "self", ".", "frame", ".", "depth", ">=", "self", ".", "maxTemplateRecursionLevels", ":", "\n", "            ", "self", ".", "recursion_exceeded_1_errs", "+=", "1", "\n", "return", "res", "\n", "\n", "# logging.debug('%*s<expand', self.frame.depth, '')", "\n", "\n", "", "cur", "=", "0", "\n", "# look for matching {{...}}", "\n", "for", "s", ",", "e", "in", "findMatchingBraces", "(", "wikitext", ",", "2", ")", ":", "\n", "            ", "res", "+=", "wikitext", "[", "cur", ":", "s", "]", "+", "self", ".", "expandTemplate", "(", "wikitext", "[", "s", "+", "2", ":", "e", "-", "2", "]", ")", "\n", "cur", "=", "e", "\n", "# leftover", "\n", "", "res", "+=", "wikitext", "[", "cur", ":", "]", "\n", "# logging.debug('%*sexpand> %s', self.frame.depth, '', res)", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.templateParams": [[856, 923], ["re.match", "re.match.group().strip", "re.match.group", "parameterValue.strip.strip.strip", "param.strip.strip.strip", "re.match.group", "str"], "methods", ["None"], ["", "def", "templateParams", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "\"\"\"\n        Build a dictionary with positional or name key to expanded parameters.\n        :param parameters: the parts[1:] of a template, i.e. all except the title.\n        \"\"\"", "\n", "templateParams", "=", "{", "}", "\n", "\n", "if", "not", "parameters", ":", "\n", "            ", "return", "templateParams", "\n", "# logging.debug('%*s<templateParams: %s', self.frame.length, '', '|'.join(parameters))", "\n", "\n", "# Parameters can be either named or unnamed. In the latter case, their", "\n", "# name is defined by their ordinal position (1, 2, 3, ...).", "\n", "\n", "", "unnamedParameterCounter", "=", "0", "\n", "\n", "# It's legal for unnamed parameters to be skipped, in which case they", "\n", "# will get default values (if available) during actual instantiation.", "\n", "# That is {{template_name|a||c}} means parameter 1 gets", "\n", "# the value 'a', parameter 2 value is not defined, and parameter 3 gets", "\n", "# the value 'c'.  This case is correctly handled by function 'split',", "\n", "# and does not require any special handling.", "\n", "for", "param", "in", "parameters", ":", "\n", "# Spaces before or after a parameter value are normally ignored,", "\n", "# UNLESS the parameter contains a link (to prevent possible gluing", "\n", "# the link to the following text after template substitution)", "\n", "\n", "# Parameter values may contain \"=\" symbols, hence the parameter", "\n", "# name extends up to the first such symbol.", "\n", "\n", "# It is legal for a parameter to be specified several times, in", "\n", "# which case the last assignment takes precedence. Example:", "\n", "# \"{{t|a|b|c|2=B}}\" is equivalent to \"{{t|a|B|c}}\".", "\n", "# Therefore, we don't check if the parameter has been assigned a", "\n", "# value before, because anyway the last assignment should override", "\n", "# any previous ones.", "\n", "# FIXME: Don't use DOTALL here since parameters may be tags with", "\n", "# attributes, e.g. <div class=\"templatequotecite\">", "\n", "# Parameters may span several lines, like:", "\n", "# {{Reflist|colwidth=30em|refs=", "\n", "# &lt;ref name=&quot;Goode&quot;&gt;Title&lt;/ref&gt;", "\n", "\n", "# The '=' might occurr within an HTML attribute:", "\n", "#   \"&lt;ref name=value\"", "\n", "# but we stop at first.", "\n", "            ", "m", "=", "re", ".", "match", "(", "' *([^=]*?) *?=(.*)'", ",", "param", ",", "re", ".", "DOTALL", ")", "\n", "if", "m", ":", "\n", "# This is a named parameter.  This case also handles parameter", "\n", "# assignments like \"2=xxx\", where the number of an unnamed", "\n", "# parameter (\"2\") is specified explicitly - this is handled", "\n", "# transparently.", "\n", "\n", "                ", "parameterName", "=", "m", ".", "group", "(", "1", ")", ".", "strip", "(", ")", "\n", "parameterValue", "=", "m", ".", "group", "(", "2", ")", "\n", "\n", "if", "']]'", "not", "in", "parameterValue", ":", "# if the value does not contain a link, trim whitespace", "\n", "                    ", "parameterValue", "=", "parameterValue", ".", "strip", "(", ")", "\n", "", "templateParams", "[", "parameterName", "]", "=", "parameterValue", "\n", "", "else", ":", "\n", "# this is an unnamed parameter", "\n", "                ", "unnamedParameterCounter", "+=", "1", "\n", "\n", "if", "']]'", "not", "in", "param", ":", "# if the value does not contain a link, trim whitespace", "\n", "                    ", "param", "=", "param", ".", "strip", "(", ")", "\n", "", "templateParams", "[", "str", "(", "unnamedParameterCounter", ")", "]", "=", "param", "\n", "# logging.debug('%*stemplateParams> %s', self.frame.length, '', '|'.join(templateParams.values()))", "\n", "", "", "return", "templateParams", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expandTemplate": [[925, 1087], ["logging.debug", "WikiExtractor.splitParts", "parts[].strip", "WikiExtractor.Extractor.expand", "re.match", "re.sub.find", "WikiExtractor.fullyQualifiedTemplateTitle", "options.redirects.get", "logging.debug", "WikiExtractor.Extractor.templateParams", "WikiExtractor.Extractor.frame.push", "WikiExtractor.Template.parse", "WikiExtractor.Extractor.transform", "WikiExtractor.Extractor.frame.pop", "logging.debug", "re.sub", "logging.debug", "title[].strip", "WikiExtractor.callParserFunction", "logging.debug", "WikiExtractor.Template.parse", "logging.debug", "WikiExtractor.Extractor.transform"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.splitParts", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.fullyQualifiedTemplateTitle", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.templateParams", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.push", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.callParserFunction", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform"], ["", "def", "expandTemplate", "(", "self", ",", "body", ")", ":", "\n", "        ", "\"\"\"Expands template invocation.\n        :param body: the parts of a template.\n        :see http://meta.wikimedia.org/wiki/Help:Expansion for an explanation\n        of the process.\n        See in particular: Expansion of names and values\n        http://meta.wikimedia.org/wiki/Help:Expansion#Expansion_of_names_and_values\n        For most parser functions all names and values are expanded,\n        regardless of what is relevant for the result. The branching functions\n        (#if, #ifeq, #iferror, #ifexist, #ifexpr, #switch) are exceptions.\n        All names in a template call are expanded, and the titles of the\n        tplargs in the template body, after which it is determined which\n        values must be expanded, and for which tplargs in the template body\n        the first part (default) [sic in the original doc page].\n        In the case of a tplarg, any parts beyond the first are never\n        expanded.  The possible name and the value of the first part is\n        expanded if the title does not match a name in the template call.\n        :see code for braceSubstitution at\n        https://doc.wikimedia.org/mediawiki-core/master/php/html/Parser_8php_source.html#3397:\n        \"\"\"", "\n", "\n", "# template        = \"{{\" parts \"}}\"", "\n", "\n", "# Templates and tplargs are decomposed in the same way, with pipes as", "\n", "# separator, even though eventually any parts in a tplarg after the first", "\n", "# (the parameter default) are ignored, and an equals sign in the first", "\n", "# part is treated as plain text.", "\n", "# Pipes inside inner templates and tplargs, or inside double rectangular", "\n", "# brackets within the template or tplargs are not taken into account in", "\n", "# this decomposition.", "\n", "# The first part is called title, the other parts are simply called parts.", "\n", "\n", "# If a part has one or more equals signs in it, the first equals sign", "\n", "# determines the division into name = value. Equals signs inside inner", "\n", "# templates and tplargs, or inside double rectangular brackets within the", "\n", "# part are not taken into account in this decomposition. Parts without", "\n", "# equals sign are indexed 1, 2, .., given as attribute in the <name> tag.", "\n", "\n", "if", "self", ".", "frame", ".", "depth", ">=", "self", ".", "maxTemplateRecursionLevels", ":", "\n", "            ", "self", ".", "recursion_exceeded_2_errs", "+=", "1", "\n", "# logging.debug('%*sEXPAND> %s', self.frame.depth, '', body)", "\n", "return", "''", "\n", "\n", "", "logging", ".", "debug", "(", "'%*sEXPAND %s'", ",", "self", ".", "frame", ".", "depth", ",", "''", ",", "body", ")", "\n", "parts", "=", "splitParts", "(", "body", ")", "\n", "# title is the portion before the first |", "\n", "title", "=", "parts", "[", "0", "]", ".", "strip", "(", ")", "\n", "title", "=", "self", ".", "expand", "(", "title", ")", "\n", "\n", "# SUBST", "\n", "# Apply the template tag to parameters without", "\n", "# substituting into them, e.g.", "\n", "# {{subst:t|a{{{p|q}}}b}} gives the wikitext start-a{{{p|q}}}b-end", "\n", "# @see https://www.mediawiki.org/wiki/Manual:Substitution#Partial_substitution", "\n", "subst", "=", "False", "\n", "if", "re", ".", "match", "(", "substWords", ",", "title", ",", "re", ".", "IGNORECASE", ")", ":", "\n", "            ", "title", "=", "re", ".", "sub", "(", "substWords", ",", "''", ",", "title", ",", "1", ",", "re", ".", "IGNORECASE", ")", "\n", "subst", "=", "True", "\n", "\n", "", "if", "title", "in", "self", ".", "magicWords", ".", "values", ":", "\n", "            ", "ret", "=", "self", ".", "magicWords", "[", "title", "]", "\n", "logging", ".", "debug", "(", "'%*s<EXPAND %s %s'", ",", "self", ".", "frame", ".", "depth", ",", "''", ",", "title", ",", "ret", ")", "\n", "return", "ret", "\n", "\n", "# Parser functions.", "\n", "\n", "# For most parser functions all names and values are expanded,", "\n", "# regardless of what is relevant for the result. The branching", "\n", "# functions (#if, #ifeq, #iferror, #ifexist, #ifexpr, #switch) are", "\n", "# exceptions: for #if, #iferror, #ifexist, #ifexp, only the part that", "\n", "# is applicable is expanded; for #ifeq the first and the applicable", "\n", "# part are expanded; for #switch, expanded are the names up to and", "\n", "# including the match (or all if there is no match), and the value in", "\n", "# the case of a match or if there is no match, the default, if any.", "\n", "\n", "# The first argument is everything after the first colon.", "\n", "# It has been evaluated above.", "\n", "", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "1", ":", "\n", "            ", "funct", "=", "title", "[", ":", "colon", "]", "\n", "parts", "[", "0", "]", "=", "title", "[", "colon", "+", "1", ":", "]", ".", "strip", "(", ")", "# side-effect (parts[0] not used later)", "\n", "# arguments after first are not evaluated", "\n", "ret", "=", "callParserFunction", "(", "funct", ",", "parts", ",", "self", ")", "\n", "logging", ".", "debug", "(", "'%*s<EXPAND %s %s'", ",", "self", ".", "frame", ".", "depth", ",", "''", ",", "funct", ",", "ret", ")", "\n", "return", "ret", "\n", "\n", "", "title", "=", "fullyQualifiedTemplateTitle", "(", "title", ")", "\n", "if", "not", "title", ":", "\n", "            ", "self", ".", "template_title_errs", "+=", "1", "\n", "return", "''", "\n", "\n", "", "redirected", "=", "options", ".", "redirects", ".", "get", "(", "title", ")", "\n", "if", "redirected", ":", "\n", "            ", "title", "=", "redirected", "\n", "\n", "# get the template", "\n", "", "if", "title", "in", "options", ".", "templateCache", ":", "\n", "            ", "template", "=", "options", ".", "templateCache", "[", "title", "]", "\n", "", "elif", "title", "in", "options", ".", "templates", ":", "\n", "            ", "template", "=", "Template", ".", "parse", "(", "options", ".", "templates", "[", "title", "]", ")", "\n", "# add it to cache", "\n", "options", ".", "templateCache", "[", "title", "]", "=", "template", "\n", "del", "options", ".", "templates", "[", "title", "]", "\n", "", "else", ":", "\n", "# The page being included could not be identified", "\n", "            ", "logging", ".", "debug", "(", "'%*s<EXPAND %s %s'", ",", "self", ".", "frame", ".", "depth", ",", "''", ",", "title", ",", "''", ")", "\n", "return", "''", "\n", "\n", "", "logging", ".", "debug", "(", "'%*sTEMPLATE %s: %s'", ",", "self", ".", "frame", ".", "depth", ",", "''", ",", "title", ",", "template", ")", "\n", "\n", "# tplarg          = \"{{{\" parts \"}}}\"", "\n", "# parts           = [ title *( \"|\" part ) ]", "\n", "# part            = ( part-name \"=\" part-value ) / ( part-value )", "\n", "# part-name       = wikitext-L3", "\n", "# part-value      = wikitext-L3", "\n", "# wikitext-L3     = literal / template / tplarg / link / comment /", "\n", "#                   line-eating-comment / unclosed-comment /", "\n", "#           \t    xmlish-element / *wikitext-L3", "\n", "\n", "# A tplarg may contain other parameters as well as templates, e.g.:", "\n", "#   {{{text|{{{quote|{{{1|{{error|Error: No text given}}}}}}}}}}}", "\n", "# hence no simple RE like this would work:", "\n", "#   '{{{((?:(?!{{{).)*?)}}}'", "\n", "# We must use full CF parsing.", "\n", "\n", "# the parameter name itself might be computed, e.g.:", "\n", "#   {{{appointe{{#if:{{{appointer14|}}}|r|d}}14|}}}", "\n", "\n", "# Because of the multiple uses of double-brace and triple-brace", "\n", "# syntax, expressions can sometimes be ambiguous.", "\n", "# Precedence rules specifed here:", "\n", "# http://www.mediawiki.org/wiki/Preprocessor_ABNF#Ideal_precedence", "\n", "# resolve ambiguities like this:", "\n", "#   {{{{ }}}} -> { {{{ }}} }", "\n", "#   {{{{{ }}}}} -> {{ {{{ }}} }}", "\n", "#", "\n", "# :see: https://en.wikipedia.org/wiki/Help:Template#Handling_parameters", "\n", "\n", "params", "=", "parts", "[", "1", ":", "]", "\n", "\n", "# Order of evaluation.", "\n", "# Template parameters are fully evaluated before they are passed to the template.", "\n", "# :see: https://www.mediawiki.org/wiki/Help:Templates#Order_of_evaluation", "\n", "if", "not", "subst", ":", "\n", "# Evaluate parameters, since they may contain templates, including", "\n", "# the symbol \"=\".", "\n", "# {{#ifexpr: {{{1}}} = 1 }}", "\n", "            ", "params", "=", "[", "self", ".", "transform", "(", "p", ")", "for", "p", "in", "params", "]", "\n", "\n", "# build a dict of name-values for the parameter values", "\n", "", "params", "=", "self", ".", "templateParams", "(", "params", ")", "\n", "\n", "# Perform parameter substitution.", "\n", "# Extend frame before subst, since there may be recursion in default", "\n", "# parameter value, e.g. {{OTRS|celebrative|date=April 2015}} in article", "\n", "# 21637542 in enwiki.", "\n", "self", ".", "frame", "=", "self", ".", "frame", ".", "push", "(", "title", ",", "params", ")", "\n", "instantiated", "=", "template", ".", "subst", "(", "params", ",", "self", ")", "\n", "value", "=", "self", ".", "transform", "(", "instantiated", ")", "\n", "self", ".", "frame", "=", "self", ".", "frame", ".", "pop", "(", ")", "\n", "logging", ".", "debug", "(", "'%*s<EXPAND %s %s'", ",", "self", ".", "frame", ".", "depth", ",", "''", ",", "title", ",", "value", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.MagicWords.__init__": [[1604, 1606], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "{", "'!'", ":", "'|'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.MagicWords.__getitem__": [[1607, 1609], ["WikiExtractor.MagicWords.values.get"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "values", ".", "get", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.MagicWords.__setitem__": [[1610, 1612], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "values", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Infix.__init__": [[1712, 1714], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "function", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Infix.__ror__": [[1715, 1717], ["WikiExtractor.Infix", "WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__ror__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Infix", "(", "lambda", "x", ",", "self", "=", "self", ",", "other", "=", "other", ":", "self", ".", "function", "(", "other", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Infix.__or__": [[1718, 1720], ["WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__or__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Infix.__rlshift__": [[1721, 1723], ["WikiExtractor.Infix", "WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__rlshift__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Infix", "(", "lambda", "x", ",", "self", "=", "self", ",", "other", "=", "other", ":", "self", ".", "function", "(", "other", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Infix.__rshift__": [[1724, 1726], ["WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__rshift__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Infix.__call__": [[1727, 1729], ["WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "value1", ",", "value2", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "value1", ",", "value2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile.__init__": [[2643, 2647], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path_name", ")", ":", "\n", "        ", "self", ".", "path_name", "=", "path_name", "\n", "self", ".", "dir_index", "=", "-", "1", "\n", "self", ".", "file_index", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile.__next__": [[2648, 2656], ["WikiExtractor.NextFile._dirname", "WikiExtractor.NextFile._filepath", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile._dirname", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile._filepath"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "file_index", "=", "(", "self", ".", "file_index", "+", "1", ")", "%", "NextFile", ".", "filesPerDir", "\n", "if", "self", ".", "file_index", "==", "0", ":", "\n", "            ", "self", ".", "dir_index", "+=", "1", "\n", "", "dirname", "=", "self", ".", "_dirname", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "return", "self", ".", "_filepath", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile._dirname": [[2659, 2663], ["os.path.join", "ord", "ord"], "methods", ["None"], ["def", "_dirname", "(", "self", ")", ":", "\n", "        ", "char1", "=", "self", ".", "dir_index", "%", "26", "\n", "char2", "=", "self", ".", "dir_index", "//", "26", "%", "26", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "path_name", ",", "'%c%c'", "%", "(", "ord", "(", "'A'", ")", "+", "char2", ",", "ord", "(", "'A'", ")", "+", "char1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile._filepath": [[2664, 2666], ["WikiExtractor.NextFile._dirname"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.NextFile._dirname"], ["", "def", "_filepath", "(", "self", ")", ":", "\n", "        ", "return", "'%s/wiki_%02d'", "%", "(", "self", ".", "_dirname", "(", ")", ",", "self", ".", "file_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.__init__": [[2673, 2684], ["WikiExtractor.OutputSplitter.open", "next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["def", "__init__", "(", "self", ",", "nextFile", ",", "max_file_size", "=", "0", ",", "compress", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param nextFile: a NextFile object from which to obtain filenames\n            to use.\n        :param max_file_size: the maximum size of each file.\n        :para compress: whether to write data with bzip compression.\n        \"\"\"", "\n", "self", ".", "nextFile", "=", "nextFile", "\n", "self", ".", "compress", "=", "compress", "\n", "self", ".", "max_file_size", "=", "max_file_size", "\n", "self", ".", "file", "=", "self", ".", "open", "(", "next", "(", "self", ".", "nextFile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.reserve": [[2685, 2689], ["WikiExtractor.OutputSplitter.close", "WikiExtractor.OutputSplitter.open", "WikiExtractor.OutputSplitter.file.tell", "next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "reserve", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "tell", "(", ")", "+", "size", ">", "self", ".", "max_file_size", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "self", ".", "open", "(", "next", "(", "self", ".", "nextFile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write": [[2690, 2693], ["WikiExtractor.OutputSplitter.reserve", "WikiExtractor.OutputSplitter.file.write", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.reserve", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "reserve", "(", "len", "(", "data", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close": [[2694, 2696], ["WikiExtractor.OutputSplitter.file.close"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open": [[2697, 2702], ["bz2.BZ2File", "WikiExtractor.OutputSplitter.open"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "open", "(", "self", ",", "filename", ")", ":", "\n", "        ", "if", "self", ".", "compress", ":", "\n", "            ", "return", "bz2", ".", "BZ2File", "(", "filename", "+", "'.bz2'", ",", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "return", "open", "(", "filename", ",", "'wb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.keepPage": [[215, 234], ["logging.debug", "logging.debug", "filter_disambig_page_pattern.match", "len", "len", "len", "len", "str", "str"], "function", ["None"], ["def", "keepPage", "(", "ns", ",", "catSet", ",", "page", ")", ":", "\n", "    ", "global", "g_page_articl_total", ",", "g_page_total", ",", "g_page_articl_used_total", "\n", "g_page_total", "+=", "1", "\n", "if", "ns", "!=", "'0'", ":", "# Aritcle", "\n", "        ", "return", "False", "\n", "# remove disambig pages if desired", "\n", "", "g_page_articl_total", "+=", "1", "\n", "if", "options", ".", "filter_disambig_pages", ":", "\n", "        ", "for", "line", "in", "page", ":", "\n", "            ", "if", "filter_disambig_page_pattern", ".", "match", "(", "line", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "", "if", "len", "(", "options", ".", "filter_category_include", ")", ">", "0", "and", "len", "(", "options", ".", "filter_category_include", "&", "catSet", ")", "==", "0", ":", "\n", "        ", "logging", ".", "debug", "(", "\"***No include  \"", "+", "str", "(", "catSet", ")", ")", "\n", "return", "False", "\n", "", "if", "len", "(", "options", ".", "filter_category_exclude", ")", ">", "0", "and", "len", "(", "options", ".", "filter_category_exclude", "&", "catSet", ")", ">", "0", ":", "\n", "        ", "logging", ".", "debug", "(", "\"***Exclude  \"", "+", "str", "(", "catSet", ")", ")", "\n", "return", "False", "\n", "", "g_page_articl_used_total", "+=", "1", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.get_url": [[236, 238], ["None"], "function", ["None"], ["", "def", "get_url", "(", "uid", ")", ":", "\n", "    ", "return", "\"%s?curid=%s\"", "%", "(", "options", ".", "urlbase", ",", "uid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.normalizeTitle": [[281, 317], ["ucfirst.strip", "re.sub", "re.match", "re.match.group", "re.match.group", "re.match.group", "WikiExtractor.normalizeNamespace", "WikiExtractor.ucfirst", "WikiExtractor.ucfirst", "WikiExtractor.ucfirst", "WikiExtractor.ucfirst"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.normalizeNamespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst"], ["def", "normalizeTitle", "(", "title", ")", ":", "\n", "    ", "\"\"\"Normalize title\"\"\"", "\n", "# remove leading/trailing whitespace and underscores", "\n", "title", "=", "title", ".", "strip", "(", "' _'", ")", "\n", "# replace sequences of whitespace and underscore chars with a single space", "\n", "title", "=", "re", ".", "sub", "(", "r'[\\s_]+'", ",", "' '", ",", "title", ")", "\n", "\n", "m", "=", "re", ".", "match", "(", "r'([^:]*):(\\s*)(\\S(?:.*))'", ",", "title", ")", "\n", "if", "m", ":", "\n", "        ", "prefix", "=", "m", ".", "group", "(", "1", ")", "\n", "if", "m", ".", "group", "(", "2", ")", ":", "\n", "            ", "optionalWhitespace", "=", "' '", "\n", "", "else", ":", "\n", "            ", "optionalWhitespace", "=", "''", "\n", "", "rest", "=", "m", ".", "group", "(", "3", ")", "\n", "\n", "ns", "=", "normalizeNamespace", "(", "prefix", ")", "\n", "if", "ns", "in", "options", ".", "knownNamespaces", ":", "\n", "# If the prefix designates a known namespace, then it might be", "\n", "# followed by optional whitespace that should be removed to get", "\n", "# the canonical page name", "\n", "# (e.g., \"Category:  Births\" should become \"Category:Births\").", "\n", "            ", "title", "=", "ns", "+", "\":\"", "+", "ucfirst", "(", "rest", ")", "\n", "", "else", ":", "\n", "# No namespace, just capitalize first letter.", "\n", "# If the part before the colon is not a known namespace, then we", "\n", "# must not remove the space after the colon (if any), e.g.,", "\n", "# \"3001: The_Final_Odyssey\" != \"3001:The_Final_Odyssey\".", "\n", "# However, to get the canonical page name we must contract multiple", "\n", "# spaces into one, because", "\n", "# \"3001:   The_Final_Odyssey\" != \"3001: The_Final_Odyssey\".", "\n", "            ", "title", "=", "ucfirst", "(", "prefix", ")", "+", "\":\"", "+", "optionalWhitespace", "+", "ucfirst", "(", "rest", ")", "\n", "", "", "else", ":", "\n", "# no namespace, just capitalize first letter", "\n", "        ", "title", "=", "ucfirst", "(", "title", ")", "\n", "", "return", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.unescape": [[319, 341], ["re.sub", "m.group", "m.group", "chr", "chr", "chr", "int", "int"], "function", ["None"], ["", "def", "unescape", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Removes HTML or XML character references and entities from a text string.\n    :param text The HTML (or XML) source text.\n    :return The plain text, as a Unicode string, if necessary.\n    \"\"\"", "\n", "\n", "def", "fixup", "(", "m", ")", ":", "\n", "        ", "text", "=", "m", ".", "group", "(", "0", ")", "\n", "code", "=", "m", ".", "group", "(", "1", ")", "\n", "try", ":", "\n", "            ", "if", "text", "[", "1", "]", "==", "\"#\"", ":", "# character reference", "\n", "                ", "if", "text", "[", "2", "]", "==", "\"x\"", ":", "\n", "                    ", "return", "chr", "(", "int", "(", "code", "[", "1", ":", "]", ",", "16", ")", ")", "\n", "", "else", ":", "\n", "                    ", "return", "chr", "(", "int", "(", "code", ")", ")", "\n", "", "", "else", ":", "# named entity", "\n", "                ", "return", "chr", "(", "name2codepoint", "[", "code", "]", ")", "\n", "", "", "except", ":", "\n", "            ", "return", "text", "# leave as is", "\n", "\n", "", "", "return", "re", ".", "sub", "(", "\"&#?(\\w+);\"", ",", "fixup", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ignoreTag": [[352, 356], ["re.compile", "re.compile", "options.ignored_tag_patterns.append"], "function", ["None"], ["def", "ignoreTag", "(", "tag", ")", ":", "\n", "    ", "left", "=", "re", ".", "compile", "(", "r'<%s\\b.*?>'", "%", "tag", ",", "re", ".", "IGNORECASE", "|", "re", ".", "DOTALL", ")", "# both <ref> and <reference>", "\n", "right", "=", "re", ".", "compile", "(", "r'</\\s*%s>'", "%", "tag", ",", "re", ".", "IGNORECASE", ")", "\n", "options", ".", "ignored_tag_patterns", ".", "append", "(", "(", "left", ",", "right", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.splitParts": [[1093, 1160], ["WikiExtractor.findMatchingBraces", "paramsList[].split", "paramsList[].split", "len", "parameters.extend", "len", "parameters.extend"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findMatchingBraces"], ["", "", "def", "splitParts", "(", "paramsList", ")", ":", "\n", "    ", "\"\"\"\n    :param paramsList: the parts of a template or tplarg.\n    Split template parameters at the separator \"|\".\n    separator \"=\".\n    Template parameters often contain URLs, internal links, text or even\n    template expressions, since we evaluate templates outside in.\n    This is required for cases like:\n      {{#if: {{{1}}} | {{lc:{{{1}}} | \"parameter missing\"}}\n    Parameters are separated by \"|\" symbols. However, we\n    cannot simply split the string on \"|\" symbols, since these\n    also appear inside templates and internal links, e.g.\n     {{if:|\n      |{{#if:the president|\n           |{{#if:|\n               [[Category:Hatnote templates|A{{PAGENAME}}]]\n            }}\n       }}\n     }}\n    We split parts at the \"|\" symbols that are not inside any pair\n    {{{...}}}, {{...}}, [[...]], {|...|}.\n    \"\"\"", "\n", "\n", "# Must consider '[' as normal in expansion of Template:EMedicine2:", "\n", "# #ifeq: ped|article|[http://emedicine.medscape.com/article/180-overview|[http://www.emedicine.com/ped/topic180.htm#{{#if: |section~}}", "\n", "# as part of:", "\n", "# {{#ifeq: ped|article|[http://emedicine.medscape.com/article/180-overview|[http://www.emedicine.com/ped/topic180.htm#{{#if: |section~}}}} ped/180{{#if: |~}}]", "\n", "\n", "# should handle both tpl arg like:", "\n", "#    4|{{{{{subst|}}}CURRENTYEAR}}", "\n", "# and tpl parameters like:", "\n", "#    ||[[Category:People|{{#if:A|A|{{PAGENAME}}}}]]", "\n", "\n", "sep", "=", "'|'", "\n", "parameters", "=", "[", "]", "\n", "cur", "=", "0", "\n", "\n", "for", "s", ",", "e", "in", "findMatchingBraces", "(", "paramsList", ")", ":", "\n", "        ", "par", "=", "paramsList", "[", "cur", ":", "s", "]", ".", "split", "(", "sep", ")", "\n", "if", "par", ":", "\n", "            ", "if", "parameters", ":", "\n", "# portion before | belongs to previous parameter", "\n", "                ", "parameters", "[", "-", "1", "]", "+=", "par", "[", "0", "]", "\n", "if", "len", "(", "par", ")", ">", "1", ":", "\n", "# rest are new parameters", "\n", "                    ", "parameters", ".", "extend", "(", "par", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "parameters", "=", "par", "\n", "", "", "elif", "not", "parameters", ":", "\n", "            ", "parameters", "=", "[", "''", "]", "# create first param", "\n", "# add span to last previous parameter", "\n", "", "parameters", "[", "-", "1", "]", "+=", "paramsList", "[", "s", ":", "e", "]", "\n", "cur", "=", "e", "\n", "# leftover", "\n", "", "par", "=", "paramsList", "[", "cur", ":", "]", ".", "split", "(", "sep", ")", "\n", "if", "par", ":", "\n", "        ", "if", "parameters", ":", "\n", "# portion before | belongs to previous parameter", "\n", "            ", "parameters", "[", "-", "1", "]", "+=", "par", "[", "0", "]", "\n", "if", "len", "(", "par", ")", ">", "1", ":", "\n", "# rest are new parameters", "\n", "                ", "parameters", ".", "extend", "(", "par", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "parameters", "=", "par", "\n", "\n", "# logging.debug('splitParts %s %s\\nparams: %s', sep, paramsList, text_type(parameters))", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findMatchingBraces": [[1162, 1270], ["re.compile", "re.compile", "re.compile", "re.compile", "re.compile.search", "reOpen.search.end", "reOpen.search.end", "reOpen.search.start", "re.compile.search", "reNext.search.end", "reOpen.search.group", "reNext.search.group", "reNext.search.end", "reNext.search.start", "stack.append", "stack.pop", "stack.append", "stack.append", "reOpen.search.start", "len", "stack.pop", "stack.append", "reOpen.search.start"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "def", "findMatchingBraces", "(", "text", ",", "ldelim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param ldelim: number of braces to match. 0 means match [[]], {{}} and {{{}}}.\n    \"\"\"", "\n", "# Parsing is done with respect to pairs of double braces {{..}} delimiting", "\n", "# a template, and pairs of triple braces {{{..}}} delimiting a tplarg.", "\n", "# If double opening braces are followed by triple closing braces or", "\n", "# conversely, this is taken as delimiting a template, with one left-over", "\n", "# brace outside it, taken as plain text. For any pattern of braces this", "\n", "# defines a set of templates and tplargs such that any two are either", "\n", "# separate or nested (not overlapping).", "\n", "\n", "# Unmatched double rectangular closing brackets can be in a template or", "\n", "# tplarg, but unmatched double rectangular opening brackets cannot.", "\n", "# Unmatched double or triple closing braces inside a pair of", "\n", "# double rectangular brackets are treated as plain text.", "\n", "# Other formulation: in ambiguity between template or tplarg on one hand,", "\n", "# and a link on the other hand, the structure with the rightmost opening", "\n", "# takes precedence, even if this is the opening of a link without any", "\n", "# closing, so not producing an actual link.", "\n", "\n", "# In the case of more than three opening braces the last three are assumed", "\n", "# to belong to a tplarg, unless there is no matching triple of closing", "\n", "# braces, in which case the last two opening braces are are assumed to", "\n", "# belong to a template.", "\n", "\n", "# We must skip individual { like in:", "\n", "#   {{#ifeq: {{padleft:|1|}} | { | | &nbsp;}}", "\n", "# We must resolve ambiguities like this:", "\n", "#   {{{{ }}}} -> { {{{ }}} }", "\n", "#   {{{{{ }}}}} -> {{ {{{ }}} }}", "\n", "#   {{#if:{{{{{#if:{{{nominee|}}}|nominee|candidate}}|}}}|...}}", "\n", "#   {{{!}} {{!}}}", "\n", "\n", "# Handle:", "\n", "#   {{{{{|safesubst:}}}#Invoke:String|replace|{{{1|{{{{{|safesubst:}}}PAGENAME}}}}}|%s+%([^%(]-%)$||plain=false}}", "\n", "# as well as expressions with stray }:", "\n", "#   {{{link|{{ucfirst:{{{1}}}}}} interchange}}}", "\n", "\n", "if", "ldelim", ":", "# 2-3", "\n", "        ", "reOpen", "=", "re", ".", "compile", "(", "'[{]{%d,}'", "%", "ldelim", ")", "# at least ldelim", "\n", "reNext", "=", "re", ".", "compile", "(", "'[{]{2,}|}{2,}'", ")", "# at least 2", "\n", "", "else", ":", "\n", "        ", "reOpen", "=", "re", ".", "compile", "(", "'{{2,}|\\[{2,}'", ")", "\n", "reNext", "=", "re", ".", "compile", "(", "'{{2,}|}{2,}|\\[{2,}|]{2,}'", ")", "# at least 2", "\n", "\n", "", "cur", "=", "0", "\n", "while", "True", ":", "\n", "        ", "m1", "=", "reOpen", ".", "search", "(", "text", ",", "cur", ")", "\n", "if", "not", "m1", ":", "\n", "            ", "return", "\n", "", "lmatch", "=", "m1", ".", "end", "(", ")", "-", "m1", ".", "start", "(", ")", "\n", "if", "m1", ".", "group", "(", ")", "[", "0", "]", "==", "'{'", ":", "\n", "            ", "stack", "=", "[", "lmatch", "]", "# stack of opening braces lengths", "\n", "", "else", ":", "\n", "            ", "stack", "=", "[", "-", "lmatch", "]", "# negative means [", "\n", "", "end", "=", "m1", ".", "end", "(", ")", "\n", "while", "True", ":", "\n", "            ", "m2", "=", "reNext", ".", "search", "(", "text", ",", "end", ")", "\n", "if", "not", "m2", ":", "\n", "                ", "return", "# unbalanced", "\n", "", "end", "=", "m2", ".", "end", "(", ")", "\n", "brac", "=", "m2", ".", "group", "(", ")", "[", "0", "]", "\n", "lmatch", "=", "m2", ".", "end", "(", ")", "-", "m2", ".", "start", "(", ")", "\n", "\n", "if", "brac", "==", "'{'", ":", "\n", "                ", "stack", ".", "append", "(", "lmatch", ")", "\n", "", "elif", "brac", "==", "'}'", ":", "\n", "                ", "while", "stack", ":", "\n", "                    ", "openCount", "=", "stack", ".", "pop", "(", ")", "# opening span", "\n", "if", "openCount", "==", "0", ":", "# illegal unmatched [[", "\n", "                        ", "continue", "\n", "", "if", "lmatch", ">=", "openCount", ":", "\n", "                        ", "lmatch", "-=", "openCount", "\n", "if", "lmatch", "<=", "1", ":", "# either close or stray }", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "# put back unmatched", "\n", "                        ", "stack", ".", "append", "(", "openCount", "-", "lmatch", ")", "\n", "break", "\n", "", "", "if", "not", "stack", ":", "\n", "                    ", "yield", "m1", ".", "start", "(", ")", ",", "end", "-", "lmatch", "\n", "cur", "=", "end", "\n", "break", "\n", "", "elif", "len", "(", "stack", ")", "==", "1", "and", "0", "<", "stack", "[", "0", "]", "<", "ldelim", ":", "\n", "# ambiguous {{{{{ }}} }}", "\n", "#yield m1.start() + stack[0], end", "\n", "                    ", "cur", "=", "end", "\n", "break", "\n", "", "", "elif", "brac", "==", "'['", ":", "# [[", "\n", "                ", "stack", ".", "append", "(", "-", "lmatch", ")", "\n", "", "else", ":", "# ]]", "\n", "                ", "while", "stack", "and", "stack", "[", "-", "1", "]", "<", "0", ":", "# matching [[", "\n", "                    ", "openCount", "=", "-", "stack", ".", "pop", "(", ")", "\n", "if", "lmatch", ">=", "openCount", ":", "\n", "                        ", "lmatch", "-=", "openCount", "\n", "if", "lmatch", "<=", "1", ":", "# either close or stray ]", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "# put back unmatched (negative)", "\n", "                        ", "stack", ".", "append", "(", "lmatch", "-", "openCount", ")", "\n", "break", "\n", "", "", "if", "not", "stack", ":", "\n", "                    ", "yield", "m1", ".", "start", "(", ")", ",", "end", "-", "lmatch", "\n", "cur", "=", "end", "\n", "break", "\n", "# unmatched ]] are discarded", "\n", "", "cur", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findBalanced": [[1272, 1312], ["re.compile", "re.compile", "nextPat.search", "nextPat.search.group", "nextPat.search.end", "re.escape", "zip", "nextPat.search.start", "stack.append", "stack.pop", "nextPat.search.end", "nextPat.search.end"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "", "", "", "def", "findBalanced", "(", "text", ",", "openDelim", "=", "[", "'[['", "]", ",", "closeDelim", "=", "[", "']]'", "]", ")", ":", "\n", "    ", "\"\"\"\n    Assuming that text contains a properly balanced expression using\n    :param openDelim: as opening delimiters and\n    :param closeDelim: as closing delimiters.\n    :return: an iterator producing pairs (start, end) of start and end\n    positions in text containing a balanced expression.\n    \"\"\"", "\n", "openPat", "=", "'|'", ".", "join", "(", "[", "re", ".", "escape", "(", "x", ")", "for", "x", "in", "openDelim", "]", ")", "\n", "# pattern for delimiters expected after each opening delimiter", "\n", "afterPat", "=", "{", "o", ":", "re", ".", "compile", "(", "openPat", "+", "'|'", "+", "c", ",", "re", ".", "DOTALL", ")", "for", "o", ",", "c", "in", "zip", "(", "openDelim", ",", "closeDelim", ")", "}", "\n", "stack", "=", "[", "]", "\n", "start", "=", "0", "\n", "cur", "=", "0", "\n", "# end = len(text)", "\n", "startSet", "=", "False", "\n", "startPat", "=", "re", ".", "compile", "(", "openPat", ")", "\n", "nextPat", "=", "startPat", "\n", "while", "True", ":", "\n", "        ", "next", "=", "nextPat", ".", "search", "(", "text", ",", "cur", ")", "\n", "if", "not", "next", ":", "\n", "            ", "return", "\n", "", "if", "not", "startSet", ":", "\n", "            ", "start", "=", "next", ".", "start", "(", ")", "\n", "startSet", "=", "True", "\n", "", "delim", "=", "next", ".", "group", "(", "0", ")", "\n", "if", "delim", "in", "openDelim", ":", "\n", "            ", "stack", ".", "append", "(", "delim", ")", "\n", "nextPat", "=", "afterPat", "[", "delim", "]", "\n", "", "else", ":", "\n", "            ", "opening", "=", "stack", ".", "pop", "(", ")", "\n", "# assert opening == openDelim[closeDelim.index(next.group(0))]", "\n", "if", "stack", ":", "\n", "                ", "nextPat", "=", "afterPat", "[", "stack", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                ", "yield", "start", ",", "next", ".", "end", "(", ")", "\n", "nextPat", "=", "startPat", "\n", "start", "=", "next", ".", "end", "(", ")", "\n", "startSet", "=", "False", "\n", "", "", "cur", "=", "next", ".", "end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.if_empty": [[1320, 1356], ["None"], "function", ["None"], ["", "", "def", "if_empty", "(", "*", "rest", ")", ":", "\n", "    ", "\"\"\"\n    This implements If_empty from English Wikipedia module:\n       <title>Module:If empty</title>\n       <ns>828</ns>\n       <text>local p = {}\n    function p.main(frame)\n            local args = require('Module:Arguments').getArgs(frame, {wrappers = 'Template:If empty', removeBlanks = false})\n            -- For backwards compatibility reasons, the first 8 parameters can be unset instead of being blank,\n            -- even though there's really no legitimate use case for this. At some point, this will be removed.\n            local lowestNil = math.huge\n            for i = 8,1,-1 do\n                    if args[i] == nil then\n                            args[i] = ''\n                            lowestNil = i\n                    end\n            end\n            for k,v in ipairs(args) do\n                    if v ~= '' then\n                            if lowestNil &lt; k then\n                                    -- If any uses of this template depend on the behavior above, add them to a tracking category.\n                                    -- This is a rather fragile, convoluted, hacky way to do it, but it ensures that this module's output won't be modified\n                                    -- by it.\n                                    frame:extensionTag('ref', '[[Category:Instances of Template:If_empty missing arguments]]', {group = 'TrackingCategory'})\n                                    frame:extensionTag('references', '', {group = 'TrackingCategory'})\n                            end\n                            return v\n                    end\n            end\n    end\n    return p   </text>\n    \"\"\"", "\n", "for", "arg", "in", "rest", ":", "\n", "        ", "if", "arg", ":", "\n", "            ", "return", "arg", "\n", "", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams": [[1362, 1380], ["args.get", "args.get", "str"], "function", ["None"], ["", "def", "functionParams", "(", "args", ",", "vars", ")", ":", "\n", "    ", "\"\"\"\n    Build a dictionary of var/value from :param: args.\n    Parameters can be either named or unnamed. In the latter case, their\n    name is taken fron :param: vars.\n    \"\"\"", "\n", "params", "=", "{", "}", "\n", "index", "=", "1", "\n", "for", "var", "in", "vars", ":", "\n", "        ", "value", "=", "args", ".", "get", "(", "var", ")", "\n", "if", "value", "is", "None", ":", "\n", "            ", "value", "=", "args", ".", "get", "(", "str", "(", "index", ")", ")", "# positional argument", "\n", "if", "value", "is", "None", ":", "\n", "                ", "value", "=", "''", "\n", "", "else", ":", "\n", "                ", "index", "+=", "1", "\n", "", "", "params", "[", "var", "]", "=", "value", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_sub": [[1382, 1391], ["WikiExtractor.functionParams", "functionParams.get", "int", "int", "len", "functionParams.get", "functionParams.get"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "def", "string_sub", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'s'", ",", "'i'", ",", "'j'", ")", ")", "\n", "s", "=", "params", ".", "get", "(", "'s'", ",", "''", ")", "\n", "i", "=", "int", "(", "params", ".", "get", "(", "'i'", ",", "1", ")", "or", "1", ")", "# or handles case of '' value", "\n", "j", "=", "int", "(", "params", ".", "get", "(", "'j'", ",", "-", "1", ")", "or", "-", "1", ")", "\n", "if", "i", ">", "0", ":", "i", "-=", "1", "# lua is 1-based", "\n", "if", "j", "<", "0", ":", "j", "+=", "1", "\n", "if", "j", "==", "0", ":", "j", "=", "len", "(", "s", ")", "\n", "return", "s", "[", "i", ":", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_sublength": [[1393, 1399], ["WikiExtractor.functionParams", "functionParams.get", "int", "int", "functionParams.get", "functionParams.get"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "def", "string_sublength", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'s'", ",", "'i'", ",", "'len'", ")", ")", "\n", "s", "=", "params", ".", "get", "(", "'s'", ",", "''", ")", "\n", "i", "=", "int", "(", "params", ".", "get", "(", "'i'", ",", "1", ")", "or", "1", ")", "-", "1", "# lua is 1-based", "\n", "len", "=", "int", "(", "params", ".", "get", "(", "'len'", ",", "1", ")", "or", "1", ")", "\n", "return", "s", "[", "i", ":", "i", "+", "len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_len": [[1401, 1405], ["WikiExtractor.functionParams", "functionParams.get", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "def", "string_len", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'s'", ")", ")", "\n", "s", "=", "params", ".", "get", "(", "'s'", ",", "''", ")", "\n", "return", "len", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_find": [[1407, 1419], ["WikiExtractor.functionParams", "functionParams.get", "functionParams.get", "int", "int", "functionParams.get", "params.get.find", "functionParams.get", "re.compile().search", "re.compile"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "def", "string_find", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'source'", ",", "'target'", ",", "'start'", ",", "'plain'", ")", ")", "\n", "source", "=", "params", ".", "get", "(", "'source'", ",", "''", ")", "\n", "pattern", "=", "params", ".", "get", "(", "'target'", ",", "''", ")", "\n", "start", "=", "int", "(", "'0'", "+", "params", ".", "get", "(", "'start'", ",", "1", ")", ")", "-", "1", "# lua is 1-based", "\n", "plain", "=", "int", "(", "'0'", "+", "params", ".", "get", "(", "'plain'", ",", "1", ")", ")", "\n", "if", "source", "==", "''", "or", "pattern", "==", "''", ":", "\n", "        ", "return", "0", "\n", "", "if", "plain", ":", "\n", "        ", "return", "source", ".", "find", "(", "pattern", ",", "start", ")", "+", "1", "# lua is 1-based", "\n", "", "else", ":", "\n", "        ", "return", "(", "re", ".", "compile", "(", "pattern", ")", ".", "search", "(", "source", ",", "start", ")", "or", "-", "1", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_pos": [[1421, 1428], ["WikiExtractor.functionParams", "functionParams.get", "int", "functionParams.get"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "", "def", "string_pos", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'target'", ",", "'pos'", ")", ")", "\n", "target", "=", "params", ".", "get", "(", "'target'", ",", "''", ")", "\n", "pos", "=", "int", "(", "params", ".", "get", "(", "'pos'", ",", "1", ")", "or", "1", ")", "\n", "if", "pos", ">", "0", ":", "\n", "        ", "pos", "-=", "1", "# The first character has an index value of 1", "\n", "", "return", "target", "[", "pos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_replace": [[1430, 1444], ["WikiExtractor.functionParams", "functionParams.get", "functionParams.get", "functionParams.get", "int", "int", "re.compile().sub", "functionParams.get", "functionParams.get", "params.get.replace", "params.get.replace", "re.compile"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "def", "string_replace", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'source'", ",", "'pattern'", ",", "'replace'", ",", "'count'", ",", "'plain'", ")", ")", "\n", "source", "=", "params", ".", "get", "(", "'source'", ",", "''", ")", "\n", "pattern", "=", "params", ".", "get", "(", "'pattern'", ",", "''", ")", "\n", "replace", "=", "params", ".", "get", "(", "'replace'", ",", "''", ")", "\n", "count", "=", "int", "(", "params", ".", "get", "(", "'count'", ",", "0", ")", "or", "0", ")", "\n", "plain", "=", "int", "(", "params", ".", "get", "(", "'plain'", ",", "1", ")", "or", "1", ")", "\n", "if", "plain", ":", "\n", "        ", "if", "count", ":", "\n", "            ", "return", "source", ".", "replace", "(", "pattern", ",", "replace", ",", "count", ")", "\n", "", "else", ":", "\n", "            ", "return", "source", ".", "replace", "(", "pattern", ",", "replace", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "re", ".", "compile", "(", "pattern", ")", ".", "sub", "(", "replace", ",", "source", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.string_rep": [[1446, 1451], ["WikiExtractor.functionParams", "functionParams.get", "int", "functionParams.get"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.functionParams"], ["", "", "def", "string_rep", "(", "args", ")", ":", "\n", "    ", "params", "=", "functionParams", "(", "args", ",", "(", "'s'", ")", ")", "\n", "source", "=", "params", ".", "get", "(", "'source'", ",", "''", ")", "\n", "count", "=", "int", "(", "params", ".", "get", "(", "'count'", ",", "'1'", ")", ")", "\n", "return", "source", "*", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.roman_main": [[1459, 1484], ["int", "WikiExtractor.roman_main.toRoman"], "function", ["None"], ["", "def", "roman_main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Convert first arg to roman numeral if <= 5000 else :return: second arg.\"\"\"", "\n", "num", "=", "int", "(", "float", "(", "args", ".", "get", "(", "'1'", ")", ")", ")", "\n", "\n", "# Return a message for numbers too big to be expressed in Roman numerals.", "\n", "if", "0", ">", "num", "or", "num", ">=", "5000", ":", "\n", "        ", "return", "args", ".", "get", "(", "'2'", ",", "'N/A'", ")", "\n", "\n", "", "def", "toRoman", "(", "n", ",", "romanNumeralMap", ")", ":", "\n", "        ", "\"\"\"convert integer to Roman numeral\"\"\"", "\n", "result", "=", "\"\"", "\n", "for", "integer", ",", "numeral", "in", "romanNumeralMap", ":", "\n", "            ", "while", "n", ">=", "integer", ":", "\n", "                ", "result", "+=", "numeral", "\n", "n", "-=", "integer", "\n", "", "", "return", "result", "\n", "\n", "# Find the Roman numerals for numbers 4999 or less.", "\n", "", "smallRomans", "=", "(", "\n", "(", "1000", ",", "\"M\"", ")", ",", "\n", "(", "900", ",", "\"CM\"", ")", ",", "(", "500", ",", "\"D\"", ")", ",", "(", "400", ",", "\"CD\"", ")", ",", "(", "100", ",", "\"C\"", ")", ",", "\n", "(", "90", ",", "\"XC\"", ")", ",", "(", "50", ",", "\"L\"", ")", ",", "(", "40", ",", "\"XL\"", ")", ",", "(", "10", ",", "\"X\"", ")", ",", "\n", "(", "9", ",", "\"IX\"", ")", ",", "(", "5", ",", "\"V\"", ")", ",", "(", "4", ",", "\"IV\"", ")", ",", "(", "1", ",", "\"I\"", ")", "\n", ")", "\n", "return", "toRoman", "(", "num", ",", "smallRomans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst": [[1642, 1650], ["string[].upper"], "function", ["None"], ["def", "ucfirst", "(", "string", ")", ":", "\n", "    ", "\"\"\":return: a string with just its first character uppercase\n    We can't use title() since it coverts all words.\n    \"\"\"", "\n", "if", "string", ":", "\n", "        ", "return", "string", "[", "0", "]", ".", "upper", "(", ")", "+", "string", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.lcfirst": [[1652, 1661], ["len", "string.lower", "string[].lower"], "function", ["None"], ["", "", "def", "lcfirst", "(", "string", ")", ":", "\n", "    ", "\"\"\":return: a string with its first character lowercase\"\"\"", "\n", "if", "string", ":", "\n", "        ", "if", "len", "(", "string", ")", ">", "1", ":", "\n", "            ", "return", "string", "[", "0", "]", ".", "lower", "(", ")", "+", "string", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "string", ".", "lower", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.fullyQualifiedTemplateTitle": [[1663, 1694], ["templateTitle.startswith", "WikiExtractor.ucfirst", "re.match", "WikiExtractor.normalizeNamespace", "WikiExtractor.ucfirst", "re.match.group", "WikiExtractor.ucfirst", "re.match.group"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.normalizeNamespace", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst"], ["", "", "def", "fullyQualifiedTemplateTitle", "(", "templateTitle", ")", ":", "\n", "    ", "\"\"\"\n    Determine the namespace of the page being included through the template\n    mechanism\n    \"\"\"", "\n", "if", "templateTitle", ".", "startswith", "(", "':'", ")", ":", "\n", "# Leading colon by itself implies main namespace, so strip this colon", "\n", "        ", "return", "ucfirst", "(", "templateTitle", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "m", "=", "re", ".", "match", "(", "'([^:]*)(:.*)'", ",", "templateTitle", ")", "\n", "if", "m", ":", "\n", "# colon found but not in the first position - check if it", "\n", "# designates a known namespace", "\n", "            ", "prefix", "=", "normalizeNamespace", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "prefix", "in", "options", ".", "knownNamespaces", ":", "\n", "                ", "return", "prefix", "+", "ucfirst", "(", "m", ".", "group", "(", "2", ")", ")", "\n", "# The title of the page being included is NOT in the main namespace and", "\n", "# lacks any other explicit designation of the namespace - therefore, it", "\n", "# is resolved to the Template namespace (that's the default for the", "\n", "# template inclusion mechanism).", "\n", "\n", "# This is a defense against pages whose title only contains UTF-8 chars", "\n", "# that are reduced to an empty string. Right now I can think of one such", "\n", "# case - <C2><A0> which represents the non-breaking space.", "\n", "# In this particular case, this page is a redirect to [[Non-nreaking", "\n", "# space]], but having in the system a redirect page with an empty title", "\n", "# causes numerous problems, so we'll live happier without it.", "\n", "", "", "", "if", "templateTitle", ":", "\n", "        ", "return", "options", ".", "templatePrefix", "+", "ucfirst", "(", "templateTitle", ")", "\n", "", "else", ":", "\n", "        ", "return", "''", "# caller may log as error", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.normalizeNamespace": [[1696, 1698], ["WikiExtractor.ucfirst"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ucfirst"], ["", "", "def", "normalizeNamespace", "(", "ns", ")", ":", "\n", "    ", "return", "ucfirst", "(", "ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_expr": [[1737, 1748], ["extr.expand", "re.sub", "re.sub", "re.sub", "re.sub", "text_type", "eval"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["def", "sharp_expr", "(", "extr", ",", "expr", ")", ":", "\n", "    ", "\"\"\"Tries converting a lua expr into a Python expr.\"\"\"", "\n", "try", ":", "\n", "        ", "expr", "=", "extr", ".", "expand", "(", "expr", ")", "\n", "expr", "=", "re", ".", "sub", "(", "'(?<![!<>])='", ",", "'=='", ",", "expr", ")", "# negative lookbehind", "\n", "expr", "=", "re", ".", "sub", "(", "'mod'", ",", "'%'", ",", "expr", ")", "# no \\b here", "\n", "expr", "=", "re", ".", "sub", "(", "'\\bdiv\\b'", ",", "'/'", ",", "expr", ")", "\n", "expr", "=", "re", ".", "sub", "(", "'\\bround\\b'", ",", "'|ROUND|'", ",", "expr", ")", "\n", "return", "text_type", "(", "eval", "(", "expr", ")", ")", "\n", "", "except", ":", "\n", "        ", "return", "'<span class=\"error\">%s</span>'", "%", "expr", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_if": [[1750, 1762], ["testValue.strip", "extr.expand", "extr.expand.strip", "extr.expand", "valueIfFalse.strip"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "", "def", "sharp_if", "(", "extr", ",", "testValue", ",", "valueIfTrue", ",", "valueIfFalse", "=", "None", ",", "*", "args", ")", ":", "\n", "# In theory, we should evaluate the first argument here,", "\n", "# but it was evaluated while evaluating part[0] in expandTemplate().", "\n", "    ", "if", "testValue", ".", "strip", "(", ")", ":", "\n", "# The {{#if:}} function is an if-then-else construct.", "\n", "# The applied condition is: \"The condition string is non-empty\".", "\n", "        ", "valueIfTrue", "=", "extr", ".", "expand", "(", "valueIfTrue", ".", "strip", "(", ")", ")", "# eval", "\n", "if", "valueIfTrue", ":", "\n", "            ", "return", "valueIfTrue", "\n", "", "", "elif", "valueIfFalse", ":", "\n", "        ", "return", "extr", ".", "expand", "(", "valueIfFalse", ".", "strip", "(", ")", ")", "# eval", "\n", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_ifeq": [[1764, 1780], ["rvalue.strip.strip", "lvalue.strip", "extr.expand", "extr.expand", "valueIfTrue.strip", "valueIfFalse.strip"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "sharp_ifeq", "(", "extr", ",", "lvalue", ",", "rvalue", ",", "valueIfTrue", ",", "valueIfFalse", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "rvalue", "=", "rvalue", ".", "strip", "(", ")", "\n", "if", "rvalue", ":", "\n", "# lvalue is always evaluated", "\n", "        ", "if", "lvalue", ".", "strip", "(", ")", "==", "rvalue", ":", "\n", "# The {{#ifeq:}} function is an if-then-else construct. The", "\n", "# applied condition is \"is rvalue equal to lvalue\". Note that this", "\n", "# does only string comparison while MediaWiki implementation also", "\n", "# supports numerical comparissons.", "\n", "\n", "            ", "if", "valueIfTrue", ":", "\n", "                ", "return", "extr", ".", "expand", "(", "valueIfTrue", ".", "strip", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "valueIfFalse", ":", "\n", "                ", "return", "extr", ".", "expand", "(", "valueIfFalse", ".", "strip", "(", ")", ")", "\n", "", "", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_iferror": [[1782, 1789], ["re.match", "extr.expand", "then.strip", "test.strip", "extr.expand", "Else.strip"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "sharp_iferror", "(", "extr", ",", "test", ",", "then", "=", "''", ",", "Else", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "if", "re", ".", "match", "(", "'<(?:strong|span|p|div)\\s(?:[^\\s>]*\\s+)*?class=\"(?:[^\"\\s>]*\\s+)*?error(?:\\s[^\">]*)?\"'", ",", "test", ")", ":", "\n", "        ", "return", "extr", ".", "expand", "(", "then", ".", "strip", "(", ")", ")", "\n", "", "elif", "Else", "is", "None", ":", "\n", "        ", "return", "test", ".", "strip", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "extr", ".", "expand", "(", "Else", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_switch": [[1791, 1833], ["primary.strip.strip", "param.split", "extr.expand", "pair[].strip", "len", "extr.expand", "pair[].strip", "v.strip", "extr.expand.split"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "", "def", "sharp_switch", "(", "extr", ",", "primary", ",", "*", "params", ")", ":", "\n", "# FIXME: we don't support numeric expressions in primary", "\n", "\n", "# {{#switch: comparison string", "\n", "#  | case1 = result1", "\n", "#  | case2", "\n", "#  | case4 = result2", "\n", "#  | 1 | case5 = result3", "\n", "#  | #default = result4", "\n", "# }}", "\n", "\n", "    ", "primary", "=", "primary", ".", "strip", "(", ")", "\n", "found", "=", "False", "# for fall through cases", "\n", "default", "=", "None", "\n", "rvalue", "=", "None", "\n", "lvalue", "=", "''", "\n", "for", "param", "in", "params", ":", "\n", "# handle cases like:", "\n", "#  #default = [http://www.perseus.tufts.edu/hopper/text?doc=Perseus...]", "\n", "        ", "pair", "=", "param", ".", "split", "(", "'='", ",", "1", ")", "\n", "lvalue", "=", "extr", ".", "expand", "(", "pair", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "rvalue", "=", "None", "\n", "if", "len", "(", "pair", ")", ">", "1", ":", "\n", "# got \"=\"", "\n", "            ", "rvalue", "=", "extr", ".", "expand", "(", "pair", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "# check for any of multiple values pipe separated", "\n", "if", "found", "or", "primary", "in", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "lvalue", ".", "split", "(", "'|'", ")", "]", ":", "\n", "# Found a match, return now", "\n", "                ", "return", "rvalue", "\n", "", "elif", "lvalue", "==", "'#default'", ":", "\n", "                ", "default", "=", "rvalue", "\n", "", "rvalue", "=", "None", "# avoid defaulting to last case", "\n", "", "elif", "lvalue", "==", "primary", ":", "\n", "# If the value matches, set a flag and continue", "\n", "            ", "found", "=", "True", "\n", "# Default case", "\n", "# Check if the last item had no = sign, thus specifying the default case", "\n", "", "", "if", "rvalue", "is", "not", "None", ":", "\n", "        ", "return", "lvalue", "\n", "", "elif", "default", "is", "not", "None", ":", "\n", "        ", "return", "default", "\n", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_invoke": [[1836, 1843], ["modules.get", "modules.get.get", "text_type", "functions.get."], "function", ["None"], ["", "def", "sharp_invoke", "(", "module", ",", "function", ",", "args", ")", ":", "\n", "    ", "functions", "=", "modules", ".", "get", "(", "module", ")", "\n", "if", "functions", ":", "\n", "        ", "funct", "=", "functions", ".", "get", "(", "function", ")", "\n", "if", "funct", ":", "\n", "            ", "return", "text_type", "(", "funct", "(", "args", ")", ")", "\n", "", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.callParserFunction": [[1888, 1929], ["functionName.lower.lower", "logging.debug", "WikiExtractor.sharp_invoke", "logging.debug", "args[].strip", "args[].strip", "len", "WikiExtractor.fullyQualifiedTemplateTitle", "extractor.templateParams", "logging.warn", "extractor.transform"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.sharp_invoke", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.fullyQualifiedTemplateTitle", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.templateParams", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform"], ["def", "callParserFunction", "(", "functionName", ",", "args", ",", "extractor", ")", ":", "\n", "    ", "\"\"\"\n    Parser functions have similar syntax as templates, except that\n    the first argument is everything after the first colon.\n    :return: the result of the invocation, None in case of failure.\n    :param: args not yet expanded (see branching functions).\n    https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions\n    \"\"\"", "\n", "\n", "try", ":", "\n", "# https://it.wikipedia.org/wiki/Template:Str_endswith has #Invoke", "\n", "        ", "functionName", "=", "functionName", ".", "lower", "(", ")", "\n", "if", "functionName", "==", "'#invoke'", ":", "\n", "            ", "module", ",", "fun", "=", "args", "[", "0", "]", ".", "strip", "(", ")", ",", "args", "[", "1", "]", ".", "strip", "(", ")", "\n", "logging", ".", "debug", "(", "'%*s#invoke %s %s %s'", ",", "extractor", ".", "frame", ".", "depth", ",", "''", ",", "module", ",", "fun", ",", "args", "[", "2", ":", "]", ")", "\n", "# special handling of frame", "\n", "if", "len", "(", "args", ")", "==", "2", ":", "\n", "# find parameters in frame whose title is the one of the original", "\n", "# template invocation", "\n", "                ", "templateTitle", "=", "fullyQualifiedTemplateTitle", "(", "module", ")", "\n", "if", "not", "templateTitle", ":", "\n", "                    ", "logging", ".", "warn", "(", "\"Template with empty title\"", ")", "\n", "", "params", "=", "None", "\n", "frame", "=", "extractor", ".", "frame", "\n", "while", "frame", ":", "\n", "                    ", "if", "frame", ".", "title", "==", "templateTitle", ":", "\n", "                        ", "params", "=", "frame", ".", "args", "\n", "break", "\n", "", "frame", "=", "frame", ".", "prev", "\n", "", "", "else", ":", "\n", "                ", "params", "=", "[", "extractor", ".", "transform", "(", "p", ")", "for", "p", "in", "args", "[", "2", ":", "]", "]", "# evaluates them", "\n", "params", "=", "extractor", ".", "templateParams", "(", "params", ")", "\n", "", "ret", "=", "sharp_invoke", "(", "module", ",", "fun", ",", "params", ")", "\n", "logging", ".", "debug", "(", "'%*s<#invoke %s %s %s'", ",", "extractor", ".", "frame", ".", "depth", ",", "''", ",", "module", ",", "fun", ",", "ret", ")", "\n", "return", "ret", "\n", "", "if", "functionName", "in", "parserFunctions", ":", "\n", "# branching functions use the extractor to selectively evaluate args", "\n", "            ", "return", "parserFunctions", "[", "functionName", "]", "(", "extractor", ",", "*", "args", ")", "\n", "", "", "except", ":", "\n", "        ", "return", "\"\"", "# FIXME: fix errors", "\n", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.define_template": [[1949, 1997], ["re.match", "WikiExtractor.unescape", "comment.sub", "reNoinclude.sub", "re.sub", "re.sub", "re.finditer", "re.match.group", "re.match.group", "reIncludeonly.sub", "logging.warn"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.unescape"], ["def", "define_template", "(", "title", ",", "page", ")", ":", "\n", "    ", "\"\"\"\n    Adds a template defined in the :param page:.\n    @see https://en.wikipedia.org/wiki/Help:Template#Noinclude.2C_includeonly.2C_and_onlyinclude\n    \"\"\"", "\n", "# title = normalizeTitle(title)", "\n", "\n", "# sanity check (empty template, e.g. Template:Crude Oil Prices))", "\n", "if", "not", "page", ":", "return", "\n", "\n", "# check for redirects", "\n", "m", "=", "re", ".", "match", "(", "'#REDIRECT.*?\\[\\[([^\\]]*)]]'", ",", "page", "[", "0", "]", ",", "re", ".", "IGNORECASE", ")", "\n", "if", "m", ":", "\n", "        ", "options", ".", "redirects", "[", "title", "]", "=", "m", ".", "group", "(", "1", ")", "# normalizeTitle(m.group(1))", "\n", "return", "\n", "\n", "", "text", "=", "unescape", "(", "''", ".", "join", "(", "page", ")", ")", "\n", "\n", "# We're storing template text for future inclusion, therefore,", "\n", "# remove all <noinclude> text and keep all <includeonly> text", "\n", "# (but eliminate <includeonly> tags per se).", "\n", "# However, if <onlyinclude> ... </onlyinclude> parts are present,", "\n", "# then only keep them and discard the rest of the template body.", "\n", "# This is because using <onlyinclude> on a text fragment is", "\n", "# equivalent to enclosing it in <includeonly> tags **AND**", "\n", "# enclosing all the rest of the template body in <noinclude> tags.", "\n", "\n", "# remove comments", "\n", "text", "=", "comment", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "# eliminate <noinclude> fragments", "\n", "text", "=", "reNoinclude", ".", "sub", "(", "''", ",", "text", ")", "\n", "# eliminate unterminated <noinclude> elements", "\n", "text", "=", "re", ".", "sub", "(", "r'<noinclude\\s*>.*$'", ",", "''", ",", "text", ",", "flags", "=", "re", ".", "DOTALL", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'<noinclude/>'", ",", "''", ",", "text", ")", "\n", "\n", "onlyincludeAccumulator", "=", "''", "\n", "for", "m", "in", "re", ".", "finditer", "(", "'<onlyinclude>(.*?)</onlyinclude>'", ",", "text", ",", "re", ".", "DOTALL", ")", ":", "\n", "        ", "onlyincludeAccumulator", "+=", "m", ".", "group", "(", "1", ")", "\n", "", "if", "onlyincludeAccumulator", ":", "\n", "        ", "text", "=", "onlyincludeAccumulator", "\n", "", "else", ":", "\n", "        ", "text", "=", "reIncludeonly", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "", "if", "text", ":", "\n", "        ", "if", "title", "in", "options", ".", "templates", ":", "\n", "            ", "logging", ".", "warn", "(", "'Redefining: %s'", ",", "title", ")", "\n", "", "options", ".", "templates", "[", "title", "]", "=", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropNested": [[2001, 2052], ["re.compile", "re.compile", "re.compile.search", "re.compile.search", "WikiExtractor.dropSpans", "openRE.search.end", "re.compile.search", "openRE.search.end", "spans.append", "closeRE.search.end", "openRE.search.start", "re.compile.search", "closeRE.search.end", "re.compile.search", "spans.append", "re.compile.search", "closeRE.search.end", "openRE.search.start", "closeRE.search.end", "closeRE.search.end", "openRE.search.end", "openRE.search.start", "closeRE.search.end", "openRE.search.start"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropSpans"], ["", "", "def", "dropNested", "(", "text", ",", "openDelim", ",", "closeDelim", ")", ":", "\n", "    ", "\"\"\"\n    A matching function for nested expressions, e.g. namespaces and tables.\n    \"\"\"", "\n", "openRE", "=", "re", ".", "compile", "(", "openDelim", ",", "re", ".", "IGNORECASE", ")", "\n", "closeRE", "=", "re", ".", "compile", "(", "closeDelim", ",", "re", ".", "IGNORECASE", ")", "\n", "# partition text in separate blocks { } { }", "\n", "spans", "=", "[", "]", "# pairs (s, e) for each partition", "\n", "nest", "=", "0", "# nesting level", "\n", "start", "=", "openRE", ".", "search", "(", "text", ",", "0", ")", "\n", "if", "not", "start", ":", "\n", "        ", "return", "text", "\n", "", "end", "=", "closeRE", ".", "search", "(", "text", ",", "start", ".", "end", "(", ")", ")", "\n", "next", "=", "start", "\n", "while", "end", ":", "\n", "        ", "next", "=", "openRE", ".", "search", "(", "text", ",", "next", ".", "end", "(", ")", ")", "\n", "if", "not", "next", ":", "# termination", "\n", "            ", "while", "nest", ":", "# close all pending", "\n", "                ", "nest", "-=", "1", "\n", "end0", "=", "closeRE", ".", "search", "(", "text", ",", "end", ".", "end", "(", ")", ")", "\n", "if", "end0", ":", "\n", "                    ", "end", "=", "end0", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "spans", ".", "append", "(", "(", "start", ".", "start", "(", ")", ",", "end", ".", "end", "(", ")", ")", ")", "\n", "break", "\n", "", "while", "end", ".", "end", "(", ")", "<", "next", ".", "start", "(", ")", ":", "\n", "# { } {", "\n", "            ", "if", "nest", ":", "\n", "                ", "nest", "-=", "1", "\n", "# try closing more", "\n", "last", "=", "end", ".", "end", "(", ")", "\n", "end", "=", "closeRE", ".", "search", "(", "text", ",", "end", ".", "end", "(", ")", ")", "\n", "if", "not", "end", ":", "# unbalanced", "\n", "                    ", "if", "spans", ":", "\n", "                        ", "span", "=", "(", "spans", "[", "0", "]", "[", "0", "]", ",", "last", ")", "\n", "", "else", ":", "\n", "                        ", "span", "=", "(", "start", ".", "start", "(", ")", ",", "last", ")", "\n", "", "spans", "=", "[", "span", "]", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "spans", ".", "append", "(", "(", "start", ".", "start", "(", ")", ",", "end", ".", "end", "(", ")", ")", ")", "\n", "# advance start, find next close", "\n", "start", "=", "next", "\n", "end", "=", "closeRE", ".", "search", "(", "text", ",", "next", ".", "end", "(", ")", ")", "\n", "break", "# { }", "\n", "", "", "if", "next", "!=", "start", ":", "\n", "# { { }", "\n", "            ", "nest", "+=", "1", "\n", "# collect text outside partitions", "\n", "", "", "return", "dropSpans", "(", "spans", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.dropSpans": [[2054, 2068], ["spans.sort"], "function", ["None"], ["", "def", "dropSpans", "(", "spans", ",", "text", ")", ":", "\n", "    ", "\"\"\"\n    Drop from text the blocks identified in :param spans:, possibly nested.\n    \"\"\"", "\n", "spans", ".", "sort", "(", ")", "\n", "res", "=", "''", "\n", "offset", "=", "0", "\n", "for", "s", ",", "e", "in", "spans", ":", "\n", "        ", "if", "offset", "<=", "s", ":", "# handle nesting", "\n", "            ", "if", "offset", "<", "s", ":", "\n", "                ", "res", "+=", "text", "[", "offset", ":", "s", "]", "\n", "", "offset", "=", "e", "\n", "", "", "res", "+=", "text", "[", "offset", ":", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.replaceInternalLinks": [[2077, 2115], ["WikiExtractor.findBalanced", "tailRE.match", "inner.find", "tailRE.match.group", "tailRE.match.end", "inner[].rstrip", "WikiExtractor.findBalanced", "inner[].strip", "inner.rfind", "WikiExtractor.makeInternalLink"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findBalanced", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.findBalanced", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.makeInternalLink"], ["", "def", "replaceInternalLinks", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Replaces internal links of the form:\n    [[title |...|label]]trail\n    with title concatenated with trail, when present, e.g. 's' for plural.\n    See https://www.mediawiki.org/wiki/Help:Links#Internal_links\n    \"\"\"", "\n", "# call this after removal of external links, so we need not worry about", "\n", "# triple closing ]]].", "\n", "cur", "=", "0", "\n", "res", "=", "''", "\n", "for", "s", ",", "e", "in", "findBalanced", "(", "text", ")", ":", "\n", "        ", "m", "=", "tailRE", ".", "match", "(", "text", ",", "e", ")", "\n", "if", "m", ":", "\n", "            ", "trail", "=", "m", ".", "group", "(", "0", ")", "\n", "end", "=", "m", ".", "end", "(", ")", "\n", "", "else", ":", "\n", "            ", "trail", "=", "''", "\n", "end", "=", "e", "\n", "", "inner", "=", "text", "[", "s", "+", "2", ":", "e", "-", "2", "]", "\n", "# find first |", "\n", "pipe", "=", "inner", ".", "find", "(", "'|'", ")", "\n", "if", "pipe", "<", "0", ":", "\n", "            ", "title", "=", "inner", "\n", "label", "=", "title", "\n", "", "else", ":", "\n", "            ", "title", "=", "inner", "[", ":", "pipe", "]", ".", "rstrip", "(", ")", "\n", "# find last |", "\n", "curp", "=", "pipe", "+", "1", "\n", "for", "s1", ",", "e1", "in", "findBalanced", "(", "inner", ")", ":", "\n", "                ", "last", "=", "inner", ".", "rfind", "(", "'|'", ",", "curp", ",", "s1", ")", "\n", "if", "last", ">=", "0", ":", "\n", "                    ", "pipe", "=", "last", "# advance", "\n", "", "curp", "=", "e1", "\n", "", "label", "=", "inner", "[", "pipe", "+", "1", ":", "]", ".", "strip", "(", ")", "\n", "", "res", "+=", "text", "[", "cur", ":", "s", "]", "+", "makeInternalLink", "(", "title", ",", "label", ")", "+", "trail", "\n", "cur", "=", "end", "\n", "", "return", "res", "+", "text", "[", "cur", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.makeInternalLink": [[2382, 2395], ["title.find", "title.find", "quote", "title.encode"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "def", "makeInternalLink", "(", "title", ",", "label", ")", ":", "\n", "    ", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "0", "and", "title", "[", ":", "colon", "]", "not", "in", "options", ".", "acceptedNamespaces", ":", "\n", "        ", "return", "''", "\n", "", "if", "colon", "==", "0", ":", "\n", "# drop also :File:", "\n", "        ", "colon2", "=", "title", ".", "find", "(", "':'", ",", "colon", "+", "1", ")", "\n", "if", "colon2", ">", "1", "and", "title", "[", "colon", "+", "1", ":", "colon2", "]", "not", "in", "options", ".", "acceptedNamespaces", ":", "\n", "            ", "return", "''", "\n", "", "", "if", "options", ".", "keepLinks", ":", "\n", "        ", "return", "'<a href=\"%s\">%s</a>'", "%", "(", "quote", "(", "title", ".", "encode", "(", "'utf-8'", ")", ")", ",", "label", ")", "\n", "", "else", ":", "\n", "        ", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.replaceExternalLinks": [[2430, 2465], ["ExtLinkBracketedRegex.finditer", "EXT_IMAGE_REGEX.match.end", "EXT_IMAGE_REGEX.match.group", "EXT_IMAGE_REGEX.match.group", "EXT_IMAGE_REGEX.match", "WikiExtractor.makeExternalLink", "WikiExtractor.makeExternalImage", "EXT_IMAGE_REGEX.match.start"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.makeExternalLink", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.makeExternalImage"], ["def", "replaceExternalLinks", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    https://www.mediawiki.org/wiki/Help:Links#External_links\n    [URL anchor text]\n    \"\"\"", "\n", "s", "=", "''", "\n", "cur", "=", "0", "\n", "for", "m", "in", "ExtLinkBracketedRegex", ".", "finditer", "(", "text", ")", ":", "\n", "        ", "s", "+=", "text", "[", "cur", ":", "m", ".", "start", "(", ")", "]", "\n", "cur", "=", "m", ".", "end", "(", ")", "\n", "\n", "url", "=", "m", ".", "group", "(", "1", ")", "\n", "label", "=", "m", ".", "group", "(", "3", ")", "\n", "\n", "# # The characters '<' and '>' (which were escaped by", "\n", "# # removeHTMLtags()) should not be included in", "\n", "# # URLs, per RFC 2396.", "\n", "# m2 = re.search('&(lt|gt);', url)", "\n", "# if m2:", "\n", "#     link = url[m2.end():] + ' ' + link", "\n", "#     url = url[0:m2.end()]", "\n", "\n", "# If the link text is an image URL, replace it with an <img> tag", "\n", "# This happened by accident in the original parser, but some people used it extensively", "\n", "m", "=", "EXT_IMAGE_REGEX", ".", "match", "(", "label", ")", "\n", "if", "m", ":", "\n", "            ", "label", "=", "makeExternalImage", "(", "label", ")", "\n", "\n", "# Use the encoded URL", "\n", "# This means that users can paste URLs directly into the text", "\n", "# Funny characters like \u00f6 aren't valid in URLs anyway", "\n", "# This was changed in August 2004", "\n", "", "s", "+=", "makeExternalLink", "(", "url", ",", "label", ")", "# + trail", "\n", "\n", "", "return", "s", "+", "text", "[", "cur", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.makeExternalLink": [[2467, 2473], ["quote", "url.encode"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "def", "makeExternalLink", "(", "url", ",", "anchor", ")", ":", "\n", "    ", "\"\"\"Function applied to wikiLinks\"\"\"", "\n", "if", "options", ".", "keepLinks", ":", "\n", "        ", "return", "'<a href=\"%s\">%s</a>'", "%", "(", "quote", "(", "url", ".", "encode", "(", "'utf-8'", ")", ")", ",", "anchor", ")", "\n", "", "else", ":", "\n", "        ", "return", "anchor", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.makeExternalImage": [[2475, 2480], ["None"], "function", ["None"], ["", "", "def", "makeExternalImage", "(", "url", ",", "alt", "=", "''", ")", ":", "\n", "    ", "if", "options", ".", "keepLinks", ":", "\n", "        ", "return", "'<img src=\"%s\" alt=\"%s\">'", "%", "(", "url", ",", "alt", ")", "\n", "", "else", ":", "\n", "        ", "return", "alt", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.compact": [[2498, 2624], ["text.split", "section.match", "len", "section.match.group", "len", "list", "line[].strip.startswith", "page.append", "section.match.group", "page.append", "headers.keys", "reversed", "page.append", "page.append", "page.append", "zip_longest", "line[].strip", "len", "page.append", "listCount.append", "headers.clear", "page.append", "reversed", "page.append", "sorted", "page.append", "page.append", "len", "page.append", "page.append", "headers.items", "page.append", "line[].strip.strip", "headers.clear", "page.append", "len", "sorted", "headers.items", "page.append", "page.append"], "function", ["None"], ["def", "compact", "(", "text", ")", ":", "\n", "    ", "\"\"\"Deal with headers, lists, empty sections, residuals of tables.\n    :param text: convert to HTML.\n    \"\"\"", "\n", "\n", "page", "=", "[", "]", "# list of paragraph", "\n", "headers", "=", "{", "}", "# Headers for unfilled sections", "\n", "emptySection", "=", "False", "# empty sections are discarded", "\n", "listLevel", "=", "[", "]", "# nesting of lists", "\n", "listCount", "=", "[", "]", "# count of each list (it should be always in the same length of listLevel)", "\n", "for", "line", "in", "text", ".", "split", "(", "'\\n'", ")", ":", "\n", "        ", "if", "not", "line", ":", "# collapse empty lines", "\n", "# if there is an opening list, close it if we see an empty line", "\n", "            ", "if", "len", "(", "listLevel", ")", ":", "\n", "                ", "page", ".", "append", "(", "line", ")", "\n", "if", "options", ".", "toHTML", ":", "\n", "                    ", "for", "c", "in", "reversed", "(", "listLevel", ")", ":", "\n", "                        ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "", "", "listLevel", "=", "[", "]", "\n", "listCount", "=", "[", "]", "\n", "emptySection", "=", "False", "\n", "", "elif", "page", "and", "page", "[", "-", "1", "]", ":", "\n", "                ", "page", ".", "append", "(", "''", ")", "\n", "", "continue", "\n", "# Handle section titles", "\n", "", "m", "=", "section", ".", "match", "(", "line", ")", "\n", "if", "m", ":", "\n", "            ", "title", "=", "m", ".", "group", "(", "2", ")", "\n", "lev", "=", "len", "(", "m", ".", "group", "(", "1", ")", ")", "# header level", "\n", "if", "options", ".", "toHTML", ":", "\n", "                ", "page", ".", "append", "(", "\"<h%d>%s</h%d>\"", "%", "(", "lev", ",", "title", ",", "lev", ")", ")", "\n", "", "if", "title", "and", "title", "[", "-", "1", "]", "not", "in", "'!?'", ":", "\n", "                ", "title", "+=", "'.'", "# terminate sentence.", "\n", "", "headers", "[", "lev", "]", "=", "title", "\n", "# drop previous headers", "\n", "for", "i", "in", "list", "(", "headers", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "i", ">", "lev", ":", "\n", "                    ", "del", "headers", "[", "i", "]", "\n", "", "", "emptySection", "=", "True", "\n", "listLevel", "=", "[", "]", "\n", "listCount", "=", "[", "]", "\n", "continue", "\n", "# Handle page title", "\n", "", "elif", "line", ".", "startswith", "(", "'++'", ")", ":", "\n", "            ", "title", "=", "line", "[", "2", ":", "-", "2", "]", "\n", "if", "title", ":", "\n", "                ", "if", "title", "[", "-", "1", "]", "not", "in", "'!?'", ":", "\n", "                    ", "title", "+=", "'.'", "\n", "", "page", ".", "append", "(", "title", ")", "\n", "# handle indents", "\n", "", "", "elif", "line", "[", "0", "]", "==", "':'", ":", "\n", "# page.append(line.lstrip(':*#;'))", "\n", "            ", "continue", "\n", "# handle lists", "\n", "", "elif", "line", "[", "0", "]", "in", "'*#;:'", ":", "\n", "            ", "i", "=", "0", "\n", "# c: current level char", "\n", "# n: next level char", "\n", "for", "c", ",", "n", "in", "zip_longest", "(", "listLevel", ",", "line", ",", "fillvalue", "=", "''", ")", ":", "\n", "                ", "if", "not", "n", "or", "n", "not", "in", "'*#;:'", ":", "# shorter or different", "\n", "                    ", "if", "c", ":", "\n", "                        ", "if", "options", ".", "toHTML", ":", "\n", "                            ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "", "listLevel", "=", "listLevel", "[", ":", "-", "1", "]", "\n", "listCount", "=", "listCount", "[", ":", "-", "1", "]", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "# n != ''", "\n", "", "", "if", "c", "!=", "n", "and", "(", "not", "c", "or", "(", "c", "not", "in", "';:'", "and", "n", "not", "in", "';:'", ")", ")", ":", "\n", "                    ", "if", "c", ":", "\n", "# close level", "\n", "                        ", "if", "options", ".", "toHTML", ":", "\n", "                            ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "", "listLevel", "=", "listLevel", "[", ":", "-", "1", "]", "\n", "listCount", "=", "listCount", "[", ":", "-", "1", "]", "\n", "", "listLevel", "+=", "n", "\n", "listCount", ".", "append", "(", "0", ")", "\n", "if", "options", ".", "toHTML", ":", "\n", "                        ", "page", ".", "append", "(", "listOpen", "[", "n", "]", ")", "\n", "", "", "i", "+=", "1", "\n", "", "n", "=", "line", "[", "i", "-", "1", "]", "# last list char", "\n", "line", "=", "line", "[", "i", ":", "]", ".", "strip", "(", ")", "\n", "if", "line", ":", "# FIXME: n is '\"'", "\n", "                ", "if", "options", ".", "keepLists", ":", "\n", "                    ", "if", "options", ".", "keepSections", ":", "\n", "# emit open sections", "\n", "                        ", "items", "=", "sorted", "(", "headers", ".", "items", "(", ")", ")", "\n", "for", "_", ",", "v", "in", "items", ":", "\n", "                            ", "page", ".", "append", "(", "\"Section::::\"", "+", "v", ")", "\n", "", "", "headers", ".", "clear", "(", ")", "\n", "# use item count for #-lines", "\n", "listCount", "[", "i", "-", "1", "]", "+=", "1", "\n", "bullet", "=", "'BULLET::::%d. '", "%", "listCount", "[", "i", "-", "1", "]", "if", "n", "==", "'#'", "else", "'BULLET::::- '", "\n", "page", ".", "append", "(", "'{0:{1}s}'", ".", "format", "(", "bullet", ",", "len", "(", "listLevel", ")", ")", "+", "line", ")", "\n", "", "elif", "options", ".", "toHTML", ":", "\n", "                    ", "if", "n", "not", "in", "listItem", ":", "\n", "                        ", "n", "=", "'*'", "\n", "", "page", ".", "append", "(", "listItem", "[", "n", "]", "%", "line", ")", "\n", "", "", "", "elif", "len", "(", "listLevel", ")", ":", "\n", "            ", "if", "options", ".", "toHTML", ":", "\n", "                ", "for", "c", "in", "reversed", "(", "listLevel", ")", ":", "\n", "                    ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "", "", "listLevel", "=", "[", "]", "\n", "listCount", "=", "[", "]", "\n", "page", ".", "append", "(", "line", ")", "\n", "\n", "# Drop residuals of lists", "\n", "", "elif", "line", "[", "0", "]", "in", "'{|'", "or", "line", "[", "-", "1", "]", "==", "'}'", ":", "\n", "            ", "continue", "\n", "# Drop irrelevant lines", "\n", "", "elif", "(", "line", "[", "0", "]", "==", "'('", "and", "line", "[", "-", "1", "]", "==", "')'", ")", "or", "line", ".", "strip", "(", "'.-'", ")", "==", "''", ":", "\n", "            ", "continue", "\n", "", "elif", "len", "(", "headers", ")", ":", "\n", "            ", "if", "options", ".", "keepSections", ":", "\n", "                ", "items", "=", "sorted", "(", "headers", ".", "items", "(", ")", ")", "\n", "for", "i", ",", "v", "in", "items", ":", "\n", "                    ", "page", ".", "append", "(", "\"Section::::\"", "+", "v", ")", "\n", "", "", "headers", ".", "clear", "(", ")", "\n", "page", ".", "append", "(", "line", ")", "# first line", "\n", "emptySection", "=", "False", "\n", "", "elif", "not", "emptySection", ":", "\n", "# Drop preformatted", "\n", "            ", "if", "line", "[", "0", "]", "!=", "' '", ":", "# dangerous", "\n", "                ", "page", ".", "append", "(", "line", ")", "\n", "", "", "", "return", "page", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.handle_unicode": [[2626, 2630], ["int", "chr"], "function", ["None"], ["", "def", "handle_unicode", "(", "entity", ")", ":", "\n", "    ", "numeric_code", "=", "int", "(", "entity", "[", "2", ":", "-", "1", "]", ")", "\n", "if", "numeric_code", ">=", "0x10000", ":", "return", "''", "\n", "return", "chr", "(", "numeric_code", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.load_templates": [[2712, 2755], ["enumerate", "codecs.open", "WikiExtractor.pages_from", "codecs.open.close", "logging.info", "WikiExtractor.define_template", "logging.info", "len", "title.find", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.pages_from", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.define_template", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "load_templates", "(", "file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load templates from :param file:.\n    :param output_file: file where to save templates and modules.\n    \"\"\"", "\n", "options", ".", "templatePrefix", "=", "options", ".", "templateNamespace", "+", "':'", "\n", "options", ".", "modulePrefix", "=", "options", ".", "moduleNamespace", "+", "':'", "\n", "\n", "if", "output_file", ":", "\n", "        ", "output", "=", "codecs", ".", "open", "(", "output_file", ",", "'wb'", ",", "'utf-8'", ")", "\n", "", "for", "page_count", ",", "page_data", "in", "enumerate", "(", "pages_from", "(", "file", ")", ")", ":", "\n", "        ", "id", ",", "revid", ",", "title", ",", "ns", ",", "catSet", ",", "page", "=", "page_data", "\n", "if", "not", "output_file", "and", "(", "not", "options", ".", "templateNamespace", "or", "\n", "not", "options", ".", "moduleNamespace", ")", ":", "# do not know it yet", "\n", "# reconstruct templateNamespace and moduleNamespace from the first title", "\n", "            ", "if", "ns", "in", "templateKeys", ":", "\n", "                ", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "1", ":", "\n", "                    ", "if", "ns", "==", "'10'", ":", "\n", "                        ", "options", ".", "templateNamespace", "=", "title", "[", ":", "colon", "]", "\n", "options", ".", "templatePrefix", "=", "title", "[", ":", "colon", "+", "1", "]", "\n", "", "elif", "ns", "==", "'828'", ":", "\n", "                        ", "options", ".", "moduleNamespace", "=", "title", "[", ":", "colon", "]", "\n", "options", ".", "modulePrefix", "=", "title", "[", ":", "colon", "+", "1", "]", "\n", "", "", "", "", "if", "ns", "in", "templateKeys", ":", "\n", "            ", "text", "=", "''", ".", "join", "(", "page", ")", "\n", "define_template", "(", "title", ",", "text", ")", "\n", "# save templates and modules to file", "\n", "if", "output_file", ":", "\n", "                ", "output", ".", "write", "(", "'<page>\\n'", ")", "\n", "output", ".", "write", "(", "'   <title>%s</title>\\n'", "%", "title", ")", "\n", "output", ".", "write", "(", "'   <ns>%s</ns>\\n'", "%", "ns", ")", "\n", "output", ".", "write", "(", "'   <id>%s</id>\\n'", "%", "id", ")", "\n", "output", ".", "write", "(", "'   <text>'", ")", "\n", "for", "line", "in", "page", ":", "\n", "                    ", "output", ".", "write", "(", "line", ")", "\n", "", "output", ".", "write", "(", "'   </text>\\n'", ")", "\n", "output", ".", "write", "(", "'</page>\\n'", ")", "\n", "", "", "if", "page_count", "and", "page_count", "%", "100000", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "\"Preprocessed %d pages\"", ",", "page_count", ")", "\n", "", "", "if", "output_file", ":", "\n", "        ", "output", ".", "close", "(", ")", "\n", "logging", ".", "info", "(", "\"Saved %d templates to '%s'\"", ",", "len", "(", "options", ".", "templates", ")", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.pages_from": [[2757, 2825], ["tagRE.search", "tagRE.search.group", "isinstance", "line.decode.decode", "set", "page.append", "line.decode.lstrip().startswith", "tagRE.search.group", "catRE.search", "tagRE.search.group", "line.decode.lstrip", "set.add", "tagRE.search.group", "catRE.search.group", "tagRE.search.group", "page.append", "tagRE.search.group", "tagRE.search.start", "tagRE.search.end", "page.append", "page.append", "tagRE.search.group", "tagRE.search.start"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "", "def", "pages_from", "(", "input", ")", ":", "\n", "    ", "\"\"\"\n    Scans input extracting pages.\n    :return: (id, revid, title, namespace key, page), page is a list of lines.\n    \"\"\"", "\n", "# we collect individual lines, since str.join() is significantly faster", "\n", "# than concatenation", "\n", "page", "=", "[", "]", "\n", "id", "=", "None", "\n", "ns", "=", "'0'", "\n", "last_id", "=", "None", "\n", "revid", "=", "None", "\n", "inText", "=", "False", "\n", "redirect", "=", "False", "\n", "title", "=", "None", "\n", "for", "line", "in", "input", ":", "\n", "        ", "if", "not", "isinstance", "(", "line", ",", "text_type", ")", ":", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "'<'", "not", "in", "line", ":", "# faster than doing re.search()", "\n", "            ", "if", "inText", ":", "\n", "                ", "page", ".", "append", "(", "line", ")", "\n", "# extract categories", "\n", "if", "line", ".", "lstrip", "(", ")", ".", "startswith", "(", "'[[Category:'", ")", ":", "\n", "                    ", "mCat", "=", "catRE", ".", "search", "(", "line", ")", "\n", "if", "mCat", ":", "\n", "                        ", "catSet", ".", "add", "(", "mCat", ".", "group", "(", "1", ")", ")", "\n", "", "", "", "continue", "\n", "", "m", "=", "tagRE", ".", "search", "(", "line", ")", "\n", "if", "not", "m", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "m", ".", "group", "(", "2", ")", "\n", "if", "tag", "==", "'page'", ":", "\n", "            ", "page", "=", "[", "]", "\n", "catSet", "=", "set", "(", ")", "\n", "redirect", "=", "False", "\n", "", "elif", "tag", "==", "'id'", "and", "not", "id", ":", "\n", "            ", "id", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'id'", "and", "id", ":", "\n", "            ", "revid", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'title'", ":", "\n", "            ", "title", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'ns'", ":", "\n", "            ", "ns", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'redirect'", ":", "\n", "            ", "redirect", "=", "True", "\n", "", "elif", "tag", "==", "'text'", ":", "\n", "            ", "if", "m", ".", "lastindex", "==", "3", "and", "line", "[", "m", ".", "start", "(", "3", ")", "-", "2", "]", "==", "'/'", ":", "# self closing", "\n", "# <text xml:space=\"preserve\" />", "\n", "                ", "continue", "\n", "", "inText", "=", "True", "\n", "line", "=", "line", "[", "m", ".", "start", "(", "3", ")", ":", "m", ".", "end", "(", "3", ")", "]", "\n", "page", ".", "append", "(", "line", ")", "\n", "if", "m", ".", "lastindex", "==", "4", ":", "# open-close", "\n", "                ", "inText", "=", "False", "\n", "", "", "elif", "tag", "==", "'/text'", ":", "\n", "            ", "if", "m", ".", "group", "(", "1", ")", ":", "\n", "                ", "page", ".", "append", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "", "inText", "=", "False", "\n", "", "elif", "inText", ":", "\n", "            ", "page", ".", "append", "(", "line", ")", "\n", "", "elif", "tag", "==", "'/page'", ":", "\n", "            ", "if", "id", "!=", "last_id", "and", "not", "redirect", ":", "\n", "                ", "yield", "(", "id", ",", "revid", ",", "title", ",", "ns", ",", "catSet", ",", "page", ")", "\n", "last_id", "=", "id", "\n", "ns", "=", "'0'", "\n", "", "id", "=", "None", "\n", "revid", "=", "None", "\n", "title", "=", "None", "\n", "page", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.process_dump": [[2827, 2973], ["logging.info", "timeit.default_timer", "max", "multiprocessing.Queue", "multiprocessing.Value", "multiprocessing.Process", "multiprocessing.Process.start", "multiprocessing.Queue", "logging.info", "range", "WikiExtractor.pages_from", "fileinput.FileInput.close", "multiprocessing.Queue.put", "multiprocessing.Process.join", "logging.info", "logging.info", "fileinput.FileInput", "tagRE.search", "tagRE.search.group", "timeit.default_timer", "logging.info", "multiprocessing.Process", "multiprocessing.Process.start", "workers.append", "WikiExtractor.keepPage", "multiprocessing.Queue.put", "w.join", "timeit.default_timer", "isinstance", "line.decode.decode", "tagRE.search.group", "os.path.exists", "timeit.default_timer", "len", "multiprocessing.Queue.put", "keyRE.search", "re.search", "logging.info", "fileinput.FileInput", "WikiExtractor.load_templates", "fileinput.FileInput.close", "logging.info", "WikiExtractor.load_templates", "fileinput.FileInput.close", "fileinput.FileInput", "logging.info", "m.group.rfind", "tagRE.search.group", "re.search", "ValueError", "time.sleep", "keyRE.search.groups", "tagRE.search.group", "tagRE.search.group"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.pages_from", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.keepPage", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.load_templates", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.load_templates", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close"], ["", "", "", "def", "process_dump", "(", "input_file", ",", "template_file", ",", "out_file", ",", "file_size", ",", "file_compress", ",", "\n", "process_count", ")", ":", "\n", "    ", "\"\"\"\n    :param input_file: name of the wikipedia dump file; '-' to read from stdin\n    :param template_file: optional file with template definitions.\n    :param out_file: directory where to store extracted data, or '-' for stdout\n    :param file_size: max size of each extracted file, or None for no max (one file)\n    :param file_compress: whether to compress files with bzip.\n    :param process_count: number of extraction processes to spawn.\n    \"\"\"", "\n", "\n", "if", "input_file", "==", "'-'", ":", "\n", "        ", "input", "=", "sys", ".", "stdin", "\n", "", "else", ":", "\n", "        ", "input", "=", "fileinput", ".", "FileInput", "(", "input_file", ",", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "\n", "# collect siteinfo", "\n", "", "for", "line", "in", "input", ":", "\n", "# When an input file is .bz2 or .gz, line can be a bytes even in Python 3.", "\n", "        ", "if", "not", "isinstance", "(", "line", ",", "text_type", ")", ":", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "m", "=", "tagRE", ".", "search", "(", "line", ")", "\n", "if", "not", "m", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "m", ".", "group", "(", "2", ")", "\n", "if", "tag", "==", "'base'", ":", "\n", "# discover urlbase from the xml dump file", "\n", "# /mediawiki/siteinfo/base", "\n", "            ", "base", "=", "m", ".", "group", "(", "3", ")", "\n", "options", ".", "urlbase", "=", "base", "[", ":", "base", ".", "rfind", "(", "\"/\"", ")", "]", "\n", "", "elif", "tag", "==", "'namespace'", ":", "\n", "            ", "mk", "=", "keyRE", ".", "search", "(", "line", ")", "\n", "if", "mk", ":", "\n", "                ", "nsid", "=", "''", ".", "join", "(", "mk", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "nsid", "=", "''", "\n", "", "options", ".", "knownNamespaces", "[", "m", ".", "group", "(", "3", ")", "]", "=", "nsid", "\n", "if", "re", ".", "search", "(", "'key=\"10\"'", ",", "line", ")", ":", "\n", "                ", "options", ".", "templateNamespace", "=", "m", ".", "group", "(", "3", ")", "\n", "options", ".", "templatePrefix", "=", "options", ".", "templateNamespace", "+", "':'", "\n", "", "elif", "re", ".", "search", "(", "'key=\"828\"'", ",", "line", ")", ":", "\n", "                ", "options", ".", "moduleNamespace", "=", "m", ".", "group", "(", "3", ")", "\n", "options", ".", "modulePrefix", "=", "options", ".", "moduleNamespace", "+", "':'", "\n", "", "", "elif", "tag", "==", "'/siteinfo'", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "options", ".", "expand_templates", ":", "\n", "# preprocess", "\n", "        ", "template_load_start", "=", "default_timer", "(", ")", "\n", "if", "template_file", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "template_file", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"Loading template definitions from: %s\"", ",", "template_file", ")", "\n", "# can't use with here:", "\n", "file", "=", "fileinput", ".", "FileInput", "(", "template_file", ",", "\n", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "load_templates", "(", "file", ")", "\n", "file", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "input_file", "==", "'-'", ":", "\n", "# can't scan then reset stdin; must error w/ suggestion to specify template_file", "\n", "                    ", "raise", "ValueError", "(", "\"to use templates with stdin dump, must supply explicit template-file\"", ")", "\n", "", "logging", ".", "info", "(", "\"Preprocessing '%s' to collect template definitions: this may take some time.\"", ",", "input_file", ")", "\n", "load_templates", "(", "input", ",", "template_file", ")", "\n", "input", ".", "close", "(", ")", "\n", "input", "=", "fileinput", ".", "FileInput", "(", "input_file", ",", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "", "", "template_load_elapsed", "=", "default_timer", "(", ")", "-", "template_load_start", "\n", "logging", ".", "info", "(", "\"Loaded %d templates in %.1fs\"", ",", "len", "(", "options", ".", "templates", ")", ",", "template_load_elapsed", ")", "\n", "\n", "# process pages", "\n", "", "logging", ".", "info", "(", "\"Starting page extraction from %s.\"", ",", "input_file", ")", "\n", "extract_start", "=", "default_timer", "(", ")", "\n", "\n", "# Parallel Map/Reduce:", "\n", "# - pages to be processed are dispatched to workers", "\n", "# - a reduce process collects the results, sort them and print them.", "\n", "\n", "process_count", "=", "max", "(", "1", ",", "process_count", ")", "\n", "maxsize", "=", "10", "*", "process_count", "\n", "# output queue", "\n", "output_queue", "=", "Queue", "(", "maxsize", "=", "maxsize", ")", "\n", "\n", "if", "out_file", "==", "'-'", ":", "\n", "        ", "out_file", "=", "None", "\n", "\n", "", "worker_count", "=", "process_count", "\n", "\n", "# load balancing", "\n", "max_spool_length", "=", "10000", "\n", "spool_length", "=", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "False", ")", "\n", "\n", "# reduce job that sorts and prints output", "\n", "reduce", "=", "Process", "(", "target", "=", "reduce_process", ",", "\n", "args", "=", "(", "options", ",", "output_queue", ",", "spool_length", ",", "\n", "out_file", ",", "file_size", ",", "file_compress", ")", ")", "\n", "reduce", ".", "start", "(", ")", "\n", "\n", "# initialize jobs queue", "\n", "jobs_queue", "=", "Queue", "(", "maxsize", "=", "maxsize", ")", "\n", "\n", "# start worker processes", "\n", "logging", ".", "info", "(", "\"Using %d extract processes.\"", ",", "worker_count", ")", "\n", "workers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "worker_count", ")", ":", "\n", "        ", "extractor", "=", "Process", "(", "target", "=", "extract_process", ",", "\n", "args", "=", "(", "options", ",", "i", ",", "jobs_queue", ",", "output_queue", ")", ")", "\n", "extractor", ".", "daemon", "=", "True", "# only live while parent process lives", "\n", "extractor", ".", "start", "(", ")", "\n", "workers", ".", "append", "(", "extractor", ")", "\n", "\n", "# Mapper process", "\n", "", "page_num", "=", "0", "\n", "for", "page_data", "in", "pages_from", "(", "input", ")", ":", "\n", "        ", "id", ",", "revid", ",", "title", ",", "ns", ",", "catSet", ",", "page", "=", "page_data", "\n", "if", "keepPage", "(", "ns", ",", "catSet", ",", "page", ")", ":", "\n", "# slow down", "\n", "            ", "delay", "=", "0", "\n", "if", "spool_length", ".", "value", ">", "max_spool_length", ":", "\n", "# reduce to 10%", "\n", "                ", "while", "spool_length", ".", "value", ">", "max_spool_length", "/", "10", ":", "\n", "                    ", "time", ".", "sleep", "(", "10", ")", "\n", "delay", "+=", "10", "\n", "", "", "if", "delay", ":", "\n", "                ", "logging", ".", "info", "(", "'Delay %ds'", ",", "delay", ")", "\n", "", "job", "=", "(", "id", ",", "revid", ",", "title", ",", "page", ",", "page_num", ")", "\n", "jobs_queue", ".", "put", "(", "job", ")", "# goes to any available extract_process", "\n", "page_num", "+=", "1", "\n", "", "page", "=", "None", "# free memory", "\n", "\n", "", "input", ".", "close", "(", ")", "\n", "\n", "# signal termination", "\n", "for", "_", "in", "workers", ":", "\n", "        ", "jobs_queue", ".", "put", "(", "None", ")", "\n", "# wait for workers to terminate", "\n", "", "for", "w", "in", "workers", ":", "\n", "        ", "w", ".", "join", "(", ")", "\n", "\n", "# signal end of work to reduce process", "\n", "", "output_queue", ".", "put", "(", "None", ")", "\n", "# wait for it to finish", "\n", "reduce", ".", "join", "(", ")", "\n", "\n", "extract_duration", "=", "default_timer", "(", ")", "-", "extract_start", "\n", "extract_rate", "=", "page_num", "/", "extract_duration", "\n", "logging", ".", "info", "(", "\"Finished %d-process extraction of %d articles in %.1fs (%.1f art/s)\"", ",", "\n", "process_count", ",", "page_num", ",", "extract_duration", ",", "extract_rate", ")", "\n", "logging", ".", "info", "(", "\"total of page: %d, total of articl page: %d; total of used articl page: %d\"", "%", "(", "g_page_total", ",", "g_page_articl_total", ",", "g_page_articl_used_total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.extract_process": [[2979, 3014], ["WikiExtractor.createLogger", "io.StringIO", "io.StringIO.close", "jobs_queue.get", "output_queue.put", "io.StringIO.truncate", "io.StringIO.seek", "logging.debug", "WikiExtractor.Extractor", "WikiExtractor.Extractor.extract", "io.StringIO.getvalue", "logging.exception"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.createLogger", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.extract"], ["", "def", "extract_process", "(", "opts", ",", "i", ",", "jobs_queue", ",", "output_queue", ")", ":", "\n", "    ", "\"\"\"Pull tuples of raw page content, do CPU/regex-heavy fixup, push finished text\n    :param i: process id.\n    :param jobs_queue: where to get jobs.\n    :param output_queue: where to queue extracted text for output.\n    \"\"\"", "\n", "\n", "global", "options", "\n", "options", "=", "opts", "\n", "\n", "createLogger", "(", "options", ".", "quiet", ",", "options", ".", "debug", ",", "options", ".", "log_file", ")", "\n", "\n", "out", "=", "StringIO", "(", ")", "# memory buffer", "\n", "\n", "\n", "while", "True", ":", "\n", "        ", "job", "=", "jobs_queue", ".", "get", "(", ")", "# job is (id, title, page, page_num)", "\n", "if", "job", ":", "\n", "            ", "id", ",", "revid", ",", "title", ",", "page", ",", "page_num", "=", "job", "\n", "try", ":", "\n", "                ", "e", "=", "Extractor", "(", "*", "job", "[", ":", "4", "]", ")", "# (id, revid, title, page)", "\n", "page", "=", "None", "# free memory", "\n", "e", ".", "extract", "(", "out", ")", "\n", "text", "=", "out", ".", "getvalue", "(", ")", "\n", "", "except", ":", "\n", "                ", "text", "=", "''", "\n", "logging", ".", "exception", "(", "'Processing page: %s %s'", ",", "id", ",", "title", ")", "\n", "\n", "", "output_queue", ".", "put", "(", "(", "page_num", ",", "text", ")", ")", "\n", "out", ".", "truncate", "(", "0", ")", "\n", "out", ".", "seek", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'Quit extractor'", ")", "\n", "break", "\n", "", "", "out", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.reduce_process": [[3017, 3073], ["WikiExtractor.createLogger", "timeit.default_timer", "WikiExtractor.NextFile", "WikiExtractor.OutputSplitter", "WikiExtractor.OutputSplitter.close", "logging.warn", "WikiExtractor.OutputSplitter.write", "len", "output_queue.get", "len", "spool.pop().encode", "logging.info", "timeit.default_timer", "len", "logging.debug", "len", "spool.pop", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.createLogger", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["def", "reduce_process", "(", "opts", ",", "output_queue", ",", "spool_length", ",", "\n", "out_file", "=", "None", ",", "file_size", "=", "0", ",", "file_compress", "=", "True", ")", ":", "\n", "    ", "\"\"\"Pull finished article text, write series of files (or stdout)\n    :param opts: global parameters.\n    :param output_queue: text to be output.\n    :param spool_length: spool length.\n    :param out_file: filename where to print.\n    :param file_size: max file size.\n    :param file_compress: whether to compress output.\n    \"\"\"", "\n", "\n", "global", "options", "\n", "options", "=", "opts", "\n", "\n", "createLogger", "(", "options", ".", "quiet", ",", "options", ".", "debug", ",", "options", ".", "log_file", ")", "\n", "\n", "if", "out_file", ":", "\n", "        ", "nextFile", "=", "NextFile", "(", "out_file", ")", "\n", "output", "=", "OutputSplitter", "(", "nextFile", ",", "file_size", ",", "file_compress", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "sys", ".", "stdout", "if", "PY2", "else", "sys", ".", "stdout", ".", "buffer", "\n", "if", "file_compress", ":", "\n", "            ", "logging", ".", "warn", "(", "\"writing to stdout, so no output compression (use an external tool)\"", ")", "\n", "\n", "", "", "interval_start", "=", "default_timer", "(", ")", "\n", "# FIXME: use a heap", "\n", "spool", "=", "{", "}", "# collected pages", "\n", "next_page", "=", "0", "# sequence numbering of page", "\n", "while", "True", ":", "\n", "        ", "if", "next_page", "in", "spool", ":", "\n", "            ", "output", ".", "write", "(", "spool", ".", "pop", "(", "next_page", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "next_page", "+=", "1", "\n", "# tell mapper our load:", "\n", "spool_length", ".", "value", "=", "len", "(", "spool", ")", "\n", "# progress report", "\n", "if", "next_page", "%", "report_period", "==", "0", ":", "\n", "                ", "interval_rate", "=", "report_period", "/", "(", "default_timer", "(", ")", "-", "interval_start", ")", "\n", "logging", ".", "info", "(", "\"Extracted %d articles (%.1f art/s)\"", ",", "\n", "next_page", ",", "interval_rate", ")", "\n", "interval_start", "=", "default_timer", "(", ")", "\n", "", "", "else", ":", "\n", "# mapper puts None to signal finish", "\n", "            ", "pair", "=", "output_queue", ".", "get", "(", ")", "\n", "if", "not", "pair", ":", "\n", "                ", "break", "\n", "", "page_num", ",", "text", "=", "pair", "\n", "spool", "[", "page_num", "]", "=", "text", "\n", "# tell mapper our load:", "\n", "spool_length", ".", "value", "=", "len", "(", "spool", ")", "\n", "# FIXME: if an extractor dies, process stalls; the other processes", "\n", "# continue to produce pairs, filling up memory.", "\n", "if", "len", "(", "spool", ")", ">", "200", ":", "\n", "                ", "logging", ".", "debug", "(", "'Collected %d, waiting: %d, %d'", ",", "len", "(", "spool", ")", ",", "\n", "next_page", ",", "next_page", "==", "page_num", ")", "\n", "", "", "", "if", "output", "!=", "sys", ".", "stdout", ":", "\n", "        ", "output", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.main": [[3080, 3253], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "max", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "WikiExtractor.createLogger", "WikiExtractor.process_dump", "set", "set", "WikiExtractor.ignoreTag", "set", "WikiExtractor.ignoreTag", "fileinput.FileInput", "WikiExtractor.pages_from", "fileinput.FileInput.close", "os.path.basename", "multiprocessing.cpu_count", "int", "ValueError", "logging.error", "parser.parse_args.namespaces.split", "parser.parse_args.ignored_tags.split", "parser.parse_args.discard_elements.split", "os.path.exists", "WikiExtractor.Extractor.extract", "os.path.isdir", "os.makedirs", "len", "open", "f.readlines", "logging.info", "logging.info", "logging.info", "logging.info", "parser.parse_args.bytes[].lower", "logging.error", "str", "str", "open", "WikiExtractor.load_templates", "WikiExtractor.Extractor", "str", "len", "str.strip", "str.startswith", "str.startswith", "print", "print", "len", "options.filter_category_exclude.add", "options.filter_category_include.add", "str.lstrip"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.createLogger", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.process_dump", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ignoreTag", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.ignoreTag", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.pages_from", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.extract", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.load_templates"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "__doc__", ")", "\n", "parser", ".", "add_argument", "(", "\"input\"", ",", "\n", "help", "=", "\"XML wiki dump file\"", ")", "\n", "groupO", "=", "parser", ".", "add_argument_group", "(", "'Output'", ")", "\n", "groupO", ".", "add_argument", "(", "\"-o\"", ",", "\"--output\"", ",", "default", "=", "\"text\"", ",", "\n", "help", "=", "\"directory for extracted files (or '-' for dumping to stdout)\"", ")", "\n", "groupO", ".", "add_argument", "(", "\"-b\"", ",", "\"--bytes\"", ",", "default", "=", "\"1M\"", ",", "\n", "help", "=", "\"maximum bytes per output file (default %(default)s)\"", ",", "\n", "metavar", "=", "\"n[KMG]\"", ")", "\n", "groupO", ".", "add_argument", "(", "\"-c\"", ",", "\"--compress\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"compress output files using bzip\"", ")", "\n", "groupO", ".", "add_argument", "(", "\"--json\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"write output in json format instead of the default one\"", ")", "\n", "\n", "\n", "groupP", "=", "parser", ".", "add_argument_group", "(", "'Processing'", ")", "\n", "groupP", ".", "add_argument", "(", "\"--html\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"produce HTML output, subsumes --links\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-l\"", ",", "\"--links\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"preserve links\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-s\"", ",", "\"--sections\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"preserve sections\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--lists\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"preserve lists\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-ns\"", ",", "\"--namespaces\"", ",", "default", "=", "\"\"", ",", "metavar", "=", "\"ns1,ns2\"", ",", "\n", "help", "=", "\"accepted namespaces in links\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--templates\"", ",", "\n", "help", "=", "\"use or create file containing templates\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--no_templates\"", ",", "action", "=", "\"store_false\"", ",", "\n", "help", "=", "\"Do not expand templates\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-r\"", ",", "\"--revision\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "options", ".", "print_revision", ",", "\n", "help", "=", "\"Include the document revision id (default=%(default)s)\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--min_text_length\"", ",", "type", "=", "int", ",", "default", "=", "options", ".", "min_text_length", ",", "\n", "help", "=", "\"Minimum expanded text length required to write document (default=%(default)s)\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--filter_disambig_pages\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "options", ".", "filter_disambig_pages", ",", "\n", "help", "=", "\"Remove pages from output that contain disabmiguation markup (default=%(default)s)\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-it\"", ",", "\"--ignored_tags\"", ",", "default", "=", "\"\"", ",", "metavar", "=", "\"abbr,b,big\"", ",", "\n", "help", "=", "\"comma separated list of tags that will be dropped, keeping their content\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-de\"", ",", "\"--discard_elements\"", ",", "default", "=", "\"\"", ",", "metavar", "=", "\"gallery,timeline,noinclude\"", ",", "\n", "help", "=", "\"comma separated list of elements that will be removed from the article text\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--keep_tables\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "options", ".", "keep_tables", ",", "\n", "help", "=", "\"Preserve tables in the output article text (default=%(default)s)\"", ")", "\n", "default_process_count", "=", "max", "(", "1", ",", "cpu_count", "(", ")", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--processes\"", ",", "type", "=", "int", ",", "default", "=", "default_process_count", ",", "\n", "help", "=", "\"Number of processes to use (default %(default)s)\"", ")", "\n", "\n", "groupS", "=", "parser", ".", "add_argument_group", "(", "'Special'", ")", "\n", "groupS", ".", "add_argument", "(", "\"-q\"", ",", "\"--quiet\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"suppress reporting progress info\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"print debug info\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"-a\"", ",", "\"--article\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"analyze a file containing a single article (debug option)\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"--log_file\"", ",", "\n", "help", "=", "\"path to save the log info\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"-v\"", ",", "\"--version\"", ",", "action", "=", "\"version\"", ",", "\n", "version", "=", "'%(prog)s '", "+", "version", ",", "\n", "help", "=", "\"print program version\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--filter_category\"", ",", "\n", "help", "=", "\"specify the file that listing the Categories you want to include or exclude. One line for\"", "\n", "\" one category. starting with: 1) '#' comment, ignored; 2) '^' exclude; Note: excluding has higher priority than including\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "options", ".", "keepLinks", "=", "args", ".", "links", "\n", "options", ".", "keepSections", "=", "args", ".", "sections", "\n", "options", ".", "keepLists", "=", "args", ".", "lists", "\n", "options", ".", "toHTML", "=", "args", ".", "html", "\n", "options", ".", "write_json", "=", "args", ".", "json", "\n", "options", ".", "print_revision", "=", "args", ".", "revision", "\n", "options", ".", "min_text_length", "=", "args", ".", "min_text_length", "\n", "if", "args", ".", "html", ":", "\n", "        ", "options", ".", "keepLinks", "=", "True", "\n", "\n", "", "options", ".", "expand_templates", "=", "args", ".", "no_templates", "\n", "options", ".", "filter_disambig_pages", "=", "args", ".", "filter_disambig_pages", "\n", "options", ".", "keep_tables", "=", "args", ".", "keep_tables", "\n", "\n", "try", ":", "\n", "        ", "power", "=", "'kmg'", ".", "find", "(", "args", ".", "bytes", "[", "-", "1", "]", ".", "lower", "(", ")", ")", "+", "1", "\n", "file_size", "=", "int", "(", "args", ".", "bytes", "[", ":", "-", "1", "]", ")", "*", "1024", "**", "power", "\n", "if", "file_size", "<", "minFileSize", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "", "except", "ValueError", ":", "\n", "        ", "logging", ".", "error", "(", "'Insufficient or invalid size: %s'", ",", "args", ".", "bytes", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "namespaces", ":", "\n", "        ", "options", ".", "acceptedNamespaces", "=", "set", "(", "args", ".", "namespaces", ".", "split", "(", "','", ")", ")", "\n", "\n", "# ignoredTags and discardElemets have default values already supplied, if passed in the defaults are overwritten", "\n", "", "if", "args", ".", "ignored_tags", ":", "\n", "        ", "ignoredTags", "=", "set", "(", "args", ".", "ignored_tags", ".", "split", "(", "','", ")", ")", "\n", "", "else", ":", "\n", "        ", "ignoredTags", "=", "[", "\n", "'abbr'", ",", "'b'", ",", "'big'", ",", "'blockquote'", ",", "'center'", ",", "'cite'", ",", "'em'", ",", "\n", "'font'", ",", "'h1'", ",", "'h2'", ",", "'h3'", ",", "'h4'", ",", "'hiero'", ",", "'i'", ",", "'kbd'", ",", "\n", "'p'", ",", "'plaintext'", ",", "'s'", ",", "'span'", ",", "'strike'", ",", "'strong'", ",", "\n", "'tt'", ",", "'u'", ",", "'var'", "\n", "]", "\n", "\n", "# 'a' tag is handled separately", "\n", "", "for", "tag", "in", "ignoredTags", ":", "\n", "        ", "ignoreTag", "(", "tag", ")", "\n", "\n", "", "if", "args", ".", "discard_elements", ":", "\n", "        ", "options", ".", "discardElements", "=", "set", "(", "args", ".", "discard_elements", ".", "split", "(", "','", ")", ")", "\n", "\n", "", "FORMAT", "=", "'%(levelname)s: %(message)s'", "\n", "logging", ".", "basicConfig", "(", "format", "=", "FORMAT", ")", "\n", "\n", "options", ".", "quiet", "=", "args", ".", "quiet", "\n", "options", ".", "debug", "=", "args", ".", "debug", "\n", "options", ".", "log_file", "=", "args", ".", "log_file", "\n", "createLogger", "(", "options", ".", "quiet", ",", "options", ".", "debug", ",", "options", ".", "log_file", ")", "\n", "\n", "input_file", "=", "args", ".", "input", "\n", "\n", "if", "not", "options", ".", "keepLinks", ":", "\n", "        ", "ignoreTag", "(", "'a'", ")", "\n", "\n", "# sharing cache of parser templates is too slow:", "\n", "# manager = Manager()", "\n", "# templateCache = manager.dict()", "\n", "\n", "", "if", "args", ".", "article", ":", "\n", "        ", "if", "args", ".", "templates", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "templates", ")", ":", "\n", "                ", "with", "open", "(", "args", ".", "templates", ")", "as", "file", ":", "\n", "                    ", "load_templates", "(", "file", ")", "\n", "\n", "", "", "", "file", "=", "fileinput", ".", "FileInput", "(", "input_file", ",", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "for", "page_data", "in", "pages_from", "(", "file", ")", ":", "\n", "            ", "id", ",", "revid", ",", "title", ",", "ns", ",", "catSet", ",", "page", "=", "page_data", "\n", "Extractor", "(", "id", ",", "revid", ",", "title", ",", "page", ")", ".", "extract", "(", "sys", ".", "stdout", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "\n", "\n", "", "output_path", "=", "args", ".", "output", "\n", "if", "output_path", "!=", "'-'", "and", "not", "os", ".", "path", ".", "isdir", "(", "output_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "except", ":", "\n", "            ", "logging", ".", "error", "(", "'Could not create: %s'", ",", "output_path", ")", "\n", "return", "\n", "\n", "", "", "filter_category", "=", "args", ".", "filter_category", "\n", "if", "(", "filter_category", "!=", "None", "and", "len", "(", "filter_category", ")", ">", "0", ")", ":", "\n", "        ", "with", "open", "(", "filter_category", ")", "as", "f", ":", "\n", "            ", "error_cnt", "=", "0", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "line", "=", "str", "(", "line", ".", "strip", "(", ")", ")", "\n", "if", "line", ".", "startswith", "(", "'#'", ")", "or", "len", "(", "line", ")", "==", "0", ":", "\n", "                        ", "continue", ";", "\n", "", "elif", "line", ".", "startswith", "(", "'^'", ")", ":", "\n", "                        ", "options", ".", "filter_category_exclude", ".", "add", "(", "line", ".", "lstrip", "(", "'^'", ")", ")", "\n", "", "else", ":", "\n", "                        ", "options", ".", "filter_category_include", ".", "add", "(", "line", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "error_cnt", "+=", "1", "\n", "print", "(", "u\"Category not in utf8, ignored. error cnt %d:\\t%s\"", "%", "(", "error_cnt", ",", "e", ")", ")", "\n", "print", "(", "line", ")", "\n", "", "", "logging", ".", "info", "(", "\"Excluding categories:\"", ",", ")", "\n", "logging", ".", "info", "(", "str", "(", "options", ".", "filter_category_exclude", ")", ")", "\n", "logging", ".", "info", "(", "\"Including categories:\"", ")", "\n", "logging", ".", "info", "(", "str", "(", "len", "(", "options", ".", "filter_category_include", ")", ")", ")", "\n", "\n", "", "", "process_dump", "(", "input_file", ",", "args", ".", "templates", ",", "output_path", ",", "file_size", ",", "\n", "args", ".", "compress", ",", "args", ".", "processes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.createLogger": [[3254, 3264], ["logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.setLevel", "logging.FileHandler", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "createLogger", "(", "quiet", ",", "debug", ",", "log_file", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "not", "quiet", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "if", "debug", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "#print (log_file)", "\n", "", "if", "log_file", ":", "\n", "        ", "fileHandler", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "logger", ".", "addHandler", "(", "fileHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.gen_copy_data_memmap.main": [[8, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sorted", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "pickle.dump", "json.dump", "os.path.exists", "os.makedirs", "os.listdir", "open", "tqdm.tqdm", "os.path.join", "gen_copy_data_memmap.main.add_file"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.dump", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.dump", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_token_corpus'", ",", "type", "=", "Path", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "Path", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_copy_per_seq\"", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "\"The maximum number of tokens using MRP loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_coref_np\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"the maximum numbers of coreference instance stored in numpy memmap, the others are stored in pickle file\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "train_token_corpus", "=", "args", ".", "train_token_corpus", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "max_copy_per_seq", "=", "args", ".", "max_copy_per_seq", "\n", "max_coref_np", "=", "args", ".", "max_coref_np", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "files", "=", "sorted", "(", "os", ".", "listdir", "(", "train_token_corpus", ")", ",", "reverse", "=", "False", ")", "\n", "\n", "num_samples", "=", "0", "\n", "for", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "train_token_corpus", ",", "file", ")", ")", "as", "f", ":", "\n", "            ", "num_samples", "+=", "len", "(", "f", ".", "readlines", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", "input_ids", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'input_ids.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "max_seq_length", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "span_start", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'span_start.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "max_copy_per_seq", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "lm_labels", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'lm_labels.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "max_seq_length", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'labels.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "max_copy_per_seq", ",", "max_coref_np", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "span_start", "[", ":", "]", "=", "0", "\n", "lm_labels", "[", ":", "]", "=", "-", "1", "\n", "labels", "[", ":", "]", "=", "0", "\n", "\n", "i", "=", "0", "\n", "all_label_masks", "=", "[", "]", "\n", "\n", "def", "add_file", "(", "file_name", ")", ":", "\n", "        ", "nonlocal", "i", "\n", "f", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "tqdm", "(", "f", ",", "desc", "=", "\"Loading Dataset \"", "+", "str", "(", "file_name", ")", ",", "unit", "=", "\" lines\"", ")", ":", "\n", "            ", "line", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "input_id", "=", "line", "[", "'input_ids'", "]", "\n", "masked_lm_positions", "=", "line", "[", "'masked_lm_positions'", "]", "\n", "masked_lm_ids", "=", "line", "[", "'masked_lm_ids'", "]", "\n", "\n", "coref_idxs", "=", "line", "[", "'coref_idxs'", "]", "\n", "\n", "while", "len", "(", "input_id", ")", "<", "max_seq_length", ":", "\n", "                ", "input_id", ".", "append", "(", "0", ")", "\n", "\n", "", "input_ids", "[", "i", "]", "=", "input_id", "\n", "lm_labels", "[", "i", "]", "[", "masked_lm_positions", "]", "=", "masked_lm_ids", "\n", "\n", "assert", "(", "len", "(", "masked_lm_positions", ")", "==", "len", "(", "coref_idxs", ")", ")", "\n", "k", "=", "0", "\n", "ins_label_masks", "=", "[", "]", "\n", "for", "p", ",", "coref_idx", "in", "zip", "(", "masked_lm_positions", ",", "coref_idxs", ")", ":", "\n", "                ", "if", "len", "(", "coref_idx", ")", ">", "0", ":", "\n", "                    ", "flag", "=", "False", "\n", "label_masks", "=", "[", "]", "\n", "for", "idx", "in", "coref_idx", ":", "\n", "                        ", "if", "idx", "<", "max_seq_length", ":", "\n", "                            ", "flag", "=", "True", "\n", "label_masks", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "if", "flag", ":", "\n", "                        ", "span_start", "[", "i", "]", "[", "k", "]", "=", "p", "\n", "for", "z", "in", "label_masks", "[", "max_coref_np", ":", "]", ":", "\n", "                            ", "ins_label_masks", ".", "append", "(", "(", "k", ",", "z", ")", ")", "\n", "", "for", "z_idx", ",", "z", "in", "enumerate", "(", "label_masks", "[", ":", "max_coref_np", "]", ")", ":", "\n", "                            ", "labels", "[", "i", "]", "[", "k", "]", "[", "z_idx", "]", "=", "z", "\n", "\n", "", "k", "+=", "1", "\n", "\n", "\n", "", "", "", "assert", "(", "len", "(", "masked_lm_positions", ")", "==", "len", "(", "masked_lm_ids", ")", ")", "\n", "all_label_masks", ".", "append", "(", "ins_label_masks", ")", "\n", "\n", "i", "+=", "1", "\n", "\n", "\n", "", "", "for", "file", "in", "files", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "join", "(", "train_token_corpus", ",", "file", ")", "\n", "add_file", "(", "file_name", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "all_label_masks", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"other_label_masks.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "\n", "assert", "(", "i", "==", "num_samples", ")", "\n", "\n", "config", "=", "{", "\"num_samples\"", ":", "num_samples", ",", "\n", "\"max_seq_length\"", ":", "max_seq_length", ",", "\n", "\"max_copy_per_seq\"", ":", "max_copy_per_seq", ",", "\n", "\"max_coref_np\"", ":", "max_coref_np", "}", "\n", "json", ".", "dump", "(", "config", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"data_config.json\"", ")", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.gen_copy_data_MRP.main": [[19, 200], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "transformers.BertTokenizer.from_pretrained", "list", "sorted", "BertTokenizer.from_pretrained.vocab.keys", "os.path.exists", "os.makedirs", "os.listdir", "int", "print", "os.path.join", "os.path.exists", "open", "open", "tqdm.tqdm", "os.path.join", "json.loads", "line.strip", "len", "set", "collections.defaultdict", "range", "list", "max", "min", "random.random.shuffle", "random.random.shuffle", "set", "sorted", "BertTokenizer.from_pretrained.convert_tokens_to_ids", "BertTokenizer.from_pretrained.convert_tokens_to_ids", "open.write", "random.random.random", "random.random.randint", "len", "BertTokenizer.from_pretrained.tokenize", "tokens.extend", "cand_indexes.append", "len", "len", "int", "max", "random.random.shuffle", "enumerate", "range", "len", "masked_lm_positions.append", "masked_lm_labels.append", "coref_idxs.append", "range", "name2pos[].append", "collections.defaultdict.items", "round", "round", "range", "set.add", "sorted.append", "sorted.append", "json.dumps", "len", "len", "set.add", "len", "random.random.random", "MaskedLmInstance", "random.random.random", "MaskedLmInstance", "len", "len", "len", "random.random.random", "len", "random.random.random", "token.lower", "random.random.randint", "random.random.randint", "len", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--train_NN_corpus'", ",", "type", "=", "Path", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "Path", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "type", "=", "str", ",", "default", "=", "\"bert-base-cased\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--short_seq_prob\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"Probability of making a short sentence as a training example\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--masked_lm_prob\"", ",", "type", "=", "float", ",", "default", "=", "0.15", ",", "\n", "help", "=", "\"Probability of masking each token for the LM task\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_copy_per_seq\"", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "\"The maximum number of tokens using MRP loss\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "bert_model", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "vocab_words", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "\n", "train_NN_corpus", "=", "args", ".", "train_NN_corpus", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "short_seq_prob", "=", "args", ".", "short_seq_prob", "\n", "masked_lm_prob", "=", "args", ".", "masked_lm_prob", "\n", "max_copy_per_seq", "=", "args", ".", "max_copy_per_seq", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "files", "=", "sorted", "(", "os", ".", "listdir", "(", "train_NN_corpus", ")", ",", "reverse", "=", "False", ")", "\n", "\n", "for", "file", "in", "files", ":", "\n", "        ", "num", "=", "int", "(", "file", "[", "5", ":", "-", "3", "]", ")", "\n", "print", "(", "file", ",", "num", ")", "\n", "ofile", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file", "+", "\".token\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "ofile", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "output_file", "=", "open", "(", "ofile", ",", "\"w\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "train_NN_corpus", ",", "file", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "tqdm", "(", "f", ")", ":", "\n", "                ", "article", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "doc", "=", "article", "[", "'info'", "]", "\n", "max_num_tokens", "=", "max_seq_length", "-", "2", "\n", "target_seq_length", "=", "max_num_tokens", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "doc", ")", ":", "\n", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "short_seq_prob", ":", "\n", "                        ", "target_seq_length", "=", "random", ".", "randint", "(", "64", ",", "max_num_tokens", ")", "\n", "", "else", ":", "\n", "                        ", "target_seq_length", "=", "max_num_tokens", "\n", "\n", "", "tokens", "=", "[", "]", "\n", "cand_indexes", "=", "[", "]", "\n", "cur_len", "=", "0", "\n", "PRPs", "=", "set", "(", "[", "]", ")", "\n", "name2pos", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "j", "in", "range", "(", "i", ",", "len", "(", "doc", ")", ")", ":", "\n", "                        ", "token", ",", "tag", "=", "doc", "[", "j", "]", "\n", "is_Noun", "=", "(", "tag", "==", "'NNS'", "or", "tag", "==", "'NN'", "or", "tag", "==", "'NNPS'", "or", "tag", "==", "'NNP'", ")", "and", "(", "len", "(", "token", ")", ">", "1", ")", "\n", "subwords", "=", "tokenizer", ".", "tokenize", "(", "token", ")", "\n", "tokens", ".", "extend", "(", "subwords", ")", "\n", "\n", "if", "cur_len", "+", "len", "(", "subwords", ")", ">", "target_seq_length", ":", "\n", "                            ", "break", "\n", "\n", "", "cand_indexes", ".", "append", "(", "(", "cur_len", "+", "1", ",", "cur_len", "+", "1", "+", "len", "(", "subwords", ")", ")", ")", "\n", "assert", "(", "cand_indexes", "[", "-", "1", "]", "[", "1", "]", "<=", "max_seq_length", "-", "1", ")", "\n", "if", "tag", "==", "'PRP'", ":", "\n", "                            ", "for", "x", "in", "range", "(", "cand_indexes", "[", "-", "1", "]", "[", "0", "]", ",", "cand_indexes", "[", "-", "1", "]", "[", "1", "]", ")", ":", "\n", "                                ", "PRPs", ".", "add", "(", "x", ")", "\n", "", "", "if", "is_Noun", ":", "\n", "                            ", "name2pos", "[", "token", ".", "lower", "(", ")", "]", ".", "append", "(", "cand_indexes", "[", "-", "1", "]", ")", "\n", "\n", "", "cur_len", "+=", "len", "(", "subwords", ")", "\n", "\n", "if", "cur_len", "==", "target_seq_length", ":", "\n", "                            ", "break", "\n", "\n", "\n", "", "", "next_i", "=", "j", "+", "1", "\n", "if", "len", "(", "tokens", ")", "<", "62", ":", "\n", "                        ", "break", "\n", "\n", "\n", "", "name2pos", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "name2pos", ".", "items", "(", ")", "if", "len", "(", "v", ")", ">", "1", "]", "\n", "tokens", "=", "[", "'[CLS]'", "]", "+", "tokens", "[", ":", "target_seq_length", "]", "+", "[", "'[SEP]'", "]", "\n", "output_tokens", "=", "list", "(", "tokens", ")", "\n", "num_to_predict", "=", "max", "(", "1", ",", "int", "(", "round", "(", "len", "(", "tokens", ")", "*", "masked_lm_prob", ")", ")", ")", "\n", "num_to_copy", "=", "min", "(", "max_copy_per_seq", ",", "max", "(", "1", ",", "round", "(", "num_to_predict", "*", "0.2", ")", ")", ")", "\n", "\n", "random", ".", "shuffle", "(", "name2pos", ")", "\n", "random", ".", "shuffle", "(", "cand_indexes", ")", "\n", "\n", "masked_lms", "=", "[", "]", "\n", "covered_indexes", "=", "set", "(", ")", "\n", "\n", "for", "k", ",", "vlist", "in", "name2pos", ":", "\n", "                        ", "random", ".", "shuffle", "(", "vlist", ")", "\n", "v", "=", "vlist", "[", "-", "1", "]", "\n", "if", "len", "(", "masked_lms", ")", "+", "v", "[", "1", "]", "-", "v", "[", "0", "]", ">", "num_to_copy", ":", "\n", "                            ", "continue", "\n", "\n", "", "for", "idx", ",", "index", "in", "enumerate", "(", "range", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", ")", ":", "\n", "                            ", "covered_indexes", ".", "add", "(", "index", ")", "\n", "\n", "masked_token", "=", "None", "\n", "# 80% of the time, replace with [MASK]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.8", ":", "\n", "                                ", "masked_token", "=", "\"[MASK]\"", "\n", "", "else", ":", "\n", "# 10% of the time, keep original", "\n", "                                ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                                    ", "masked_token", "=", "tokens", "[", "index", "]", "\n", "# 10% of the time, replace with random word", "\n", "", "else", ":", "\n", "                                    ", "masked_token", "=", "vocab_words", "[", "random", ".", "randint", "(", "1", ",", "len", "(", "vocab_words", ")", "-", "1", ")", "]", "\n", "\n", "", "", "output_tokens", "[", "index", "]", "=", "masked_token", "\n", "\n", "if", "index", "==", "v", "[", "0", "]", ":", "\n", "                                ", "coref_idx", "=", "[", "x", "for", "x", ",", "y", "in", "vlist", "[", ":", "-", "1", "]", "]", "\n", "", "elif", "index", "==", "v", "[", "1", "]", "-", "1", ":", "\n", "                                ", "coref_idx", "=", "[", "y", "-", "1", "for", "x", ",", "y", "in", "vlist", "[", ":", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                                ", "coref_idx", "=", "[", "]", "\n", "", "masked_lms", ".", "append", "(", "MaskedLmInstance", "(", "index", "=", "index", ",", "label", "=", "tokens", "[", "index", "]", ",", "coref_idx", "=", "coref_idx", ")", ")", "\n", "\n", "", "", "for", "index_set", "in", "cand_indexes", ":", "\n", "                        ", "if", "len", "(", "masked_lms", ")", "+", "index_set", "[", "1", "]", "-", "index_set", "[", "0", "]", ">", "num_to_predict", ":", "\n", "                            ", "continue", "\n", "\n", "", "if", "index_set", "[", "0", "]", "in", "covered_indexes", ":", "\n", "                            ", "continue", "\n", "", "if", "index_set", "[", "1", "]", "-", "1", "in", "covered_indexes", ":", "\n", "                            ", "continue", "\n", "\n", "", "for", "index", "in", "range", "(", "index_set", "[", "0", "]", ",", "index_set", "[", "1", "]", ")", ":", "\n", "                            ", "masked_token", "=", "None", "\n", "# 80% of the time, replace with [MASK]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.8", ":", "\n", "                                ", "masked_token", "=", "\"[MASK]\"", "\n", "", "else", ":", "\n", "# 10% of the time, keep original", "\n", "                                ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                                    ", "masked_token", "=", "tokens", "[", "index", "]", "\n", "# 10% of the time, replace with random word", "\n", "", "else", ":", "\n", "                                    ", "masked_token", "=", "vocab_words", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "vocab_words", ")", "-", "1", ")", "]", "\n", "\n", "", "", "output_tokens", "[", "index", "]", "=", "masked_token", "\n", "\n", "masked_lms", ".", "append", "(", "MaskedLmInstance", "(", "index", "=", "index", ",", "label", "=", "tokens", "[", "index", "]", ",", "coref_idx", "=", "[", "]", ")", ")", "\n", "\n", "", "", "assert", "len", "(", "masked_lms", ")", "<=", "num_to_predict", "\n", "masked_lms", "=", "sorted", "(", "masked_lms", ",", "key", "=", "lambda", "x", ":", "x", ".", "index", ")", "\n", "\n", "masked_lm_positions", "=", "[", "]", "\n", "masked_lm_labels", "=", "[", "]", "\n", "coref_idxs", "=", "[", "]", "\n", "for", "p", "in", "masked_lms", ":", "\n", "                        ", "masked_lm_positions", ".", "append", "(", "p", ".", "index", ")", "\n", "masked_lm_labels", ".", "append", "(", "p", ".", "label", ")", "\n", "coref_idxs", ".", "append", "(", "p", ".", "coref_idx", ")", "\n", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "output_tokens", ")", "\n", "masked_lm_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "masked_lm_labels", ")", "\n", "\n", "item", "=", "{", "\n", "'input_ids'", ":", "input_ids", ",", "\n", "'masked_lm_positions'", ":", "masked_lm_positions", ",", "\n", "'masked_lm_ids'", ":", "masked_lm_ids", ",", "\n", "'coref_idxs'", ":", "coref_idxs", "\n", "}", "\n", "output_file", ".", "write", "(", "json", ".", "dumps", "(", "item", ")", "+", "'\\n'", ")", "\n", "\n", "i", "=", "next_i", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.InputFeatures.__init__": [[46, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "final_items", ",", "example_idx", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "attention_mask", "=", "attention_mask", "\n", "self", ".", "final_items", "=", "final_items", "\n", "self", ".", "example_idx", "=", "example_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.TextDataset.__init__": [[53, 75], ["json.load", "os.path.exists", "logger.info", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "pickle.load", "open", "os.path.join", "open", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", ",", "corpus_path", "=", "\"wikipedia_traindata\"", ",", "max_seq_length", "=", "512", ",", "overwrite_cache", "=", "False", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "'data_config.json'", ")", ")", ")", "\n", "\n", "assert", "(", "config", "[", "'max_seq_length'", "]", "==", "max_seq_length", ")", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "self", ".", "num_samples", "=", "num_samples", "=", "config", "[", "'num_samples'", "]", "\n", "self", ".", "K", "=", "K", "=", "config", "[", "'max_copy_per_seq'", "]", "\n", "self", ".", "R", "=", "config", "[", "'max_coref_np'", "]", "\n", "\n", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "'input_ids.memmap'", ")", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading features from cached file %s\"", ",", "corpus_path", ")", "\n", "\n", "self", ".", "input_ids", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "'input_ids.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "max_seq_length", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "lm_labels", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "'lm_labels.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "max_seq_length", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "span_start", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "'span_start.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "K", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "labels", "=", "np", ".", "memmap", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "'labels.memmap'", ")", ",", "shape", "=", "(", "num_samples", ",", "K", ",", "self", ".", "R", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "self", ".", "all_label_masks", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "corpus_path", ",", "\"other_label_masks.pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "assert", "(", "len", "(", "self", ".", "all_label_masks", ")", "==", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.TextDataset.__len__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.TextDataset.__getitem__": [[80, 99], ["torch.BoolTensor().zero_", "range", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.BoolTensor", "run_pretrain.TextDataset.input_ids[].astype", "run_pretrain.TextDataset.span_start[].astype", "run_pretrain.TextDataset.lm_labels[].astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "data", "=", "self", ".", "all_label_masks", "[", "item", "]", "\n", "npdata", "=", "self", ".", "labels", "[", "item", "]", "\n", "label_masks", "=", "torch", ".", "BoolTensor", "(", "self", ".", "K", ",", "self", ".", "max_seq_length", ")", ".", "zero_", "(", ")", "\n", "\n", "for", "idx", ",", "a", "in", "data", ":", "\n", "            ", "label_masks", "[", "idx", "]", "[", "a", "]", "=", "1", "\n", "\n", "", "for", "idx", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "            ", "for", "r", "in", "range", "(", "self", ".", "R", ")", ":", "\n", "                ", "a", "=", "npdata", "[", "idx", "]", "[", "r", "]", "\n", "if", "a", "==", "0", ":", "\n", "                    ", "break", "\n", "", "label_masks", "[", "idx", "]", "[", "a", "]", "=", "1", "\n", "\n", "", "", "return", "(", "torch", ".", "tensor", "(", "self", ".", "input_ids", "[", "item", "]", ".", "astype", "(", "np", ".", "int64", ")", ")", ",", "\n", "torch", ".", "tensor", "(", "self", ".", "span_start", "[", "item", "]", ".", "astype", "(", "np", ".", "int64", ")", ")", ",", "\n", "label_masks", ",", "\n", "torch", ".", "tensor", "(", "self", ".", "lm_labels", "[", "item", "]", ".", "astype", "(", "np", ".", "int64", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.load_and_cache_examples": [[102, 105], ["run_pretrain.TextDataset"], "function", ["None"], ["", "", "def", "load_and_cache_examples", "(", "args", ",", "tokenizer", ",", "evaluate", "=", "False", ")", ":", "\n", "    ", "dataset", "=", "TextDataset", "(", "tokenizer", ",", "corpus_path", "=", "args", ".", "corpus_path", ",", "max_seq_length", "=", "args", ".", "max_seq_length", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed": [[107, 113], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "args", ".", "n_gpu", ">", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain._rotate_checkpoints": [[114, 141], ["glob.glob", "sorted", "max", "os.path.join", "len", "logger.info", "shutil.rmtree", "ordering_and_checkpoint_path.append", "re.match", "len", "re.match.groups", "ordering_and_checkpoint_path.append", "os.path.getmtime", "int", "re.match.groups"], "function", ["None"], ["", "", "def", "_rotate_checkpoints", "(", "args", ",", "checkpoint_prefix", ",", "use_mtime", "=", "False", ")", ":", "\n", "    ", "if", "not", "args", ".", "save_total_limit", ":", "\n", "        ", "return", "\n", "", "if", "args", ".", "save_total_limit", "<=", "0", ":", "\n", "        ", "return", "\n", "\n", "# Check if we should delete older checkpoint(s)", "\n", "", "glob_checkpoints", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'{}-*'", ".", "format", "(", "checkpoint_prefix", ")", ")", ")", "\n", "if", "len", "(", "glob_checkpoints", ")", "<=", "args", ".", "save_total_limit", ":", "\n", "        ", "return", "\n", "\n", "", "ordering_and_checkpoint_path", "=", "[", "]", "\n", "for", "path", "in", "glob_checkpoints", ":", "\n", "        ", "if", "use_mtime", ":", "\n", "            ", "ordering_and_checkpoint_path", ".", "append", "(", "(", "os", ".", "path", ".", "getmtime", "(", "path", ")", ",", "path", ")", ")", "\n", "", "else", ":", "\n", "            ", "regex_match", "=", "re", ".", "match", "(", "'.*{}-([0-9]+)'", ".", "format", "(", "checkpoint_prefix", ")", ",", "path", ")", "\n", "if", "regex_match", "and", "regex_match", ".", "groups", "(", ")", ":", "\n", "                ", "ordering_and_checkpoint_path", ".", "append", "(", "(", "int", "(", "regex_match", ".", "groups", "(", ")", "[", "0", "]", ")", ",", "path", ")", ")", "\n", "\n", "", "", "", "checkpoints_sorted", "=", "sorted", "(", "ordering_and_checkpoint_path", ")", "\n", "checkpoints_sorted", "=", "[", "checkpoint", "[", "1", "]", "for", "checkpoint", "in", "checkpoints_sorted", "]", "\n", "number_of_checkpoints_to_delete", "=", "max", "(", "0", ",", "len", "(", "checkpoints_sorted", ")", "-", "args", ".", "save_total_limit", ")", "\n", "checkpoints_to_be_deleted", "=", "checkpoints_sorted", "[", ":", "number_of_checkpoints_to_delete", "]", "\n", "for", "checkpoint", "in", "checkpoints_to_be_deleted", ":", "\n", "        ", "logger", ".", "info", "(", "\"Deleting older checkpoint [{}] due to args.save_total_limit\"", ".", "format", "(", "checkpoint", ")", ")", "\n", "shutil", ".", "rmtree", "(", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.train": [[142, 271], ["torch.utils.data.DataLoader", "transformers.AdamW", "transformers.get_linear_schedule_with_warmup", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "torch.nn.parallel.DistributedDataParallel.zero_grad", "tqdm.trange", "run_pretrain.set_seed", "torch.nn.parallel.DistributedDataParallel.train", "SummaryWriter", "max", "torch.utils.data.RandomSampler", "torch.utils.data.distributed.DistributedSampler", "amp.initialize", "torch.nn.DataParallel", "torch.nn.parallel.DistributedDataParallel", "len", "int", "tqdm.tqdm", "enumerate", "SummaryWriter.close", "torch.nn.parallel.DistributedDataParallel.", "masked_lm_loss.mean.item", "copy_loss.mean.item", "tqdm.trange.close", "len", "ImportError", "torch.distributed.get_world_size", "t.to", "loss.mean.mean", "masked_lm_loss.mean.mean", "copy_loss.mean.mean", "loss.mean.backward", "transformers.AdamW.step", "transformers.get_linear_schedule_with_warmup.step", "torch.nn.parallel.DistributedDataParallel.zero_grad", "tqdm.tqdm.close", "len", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters", "any", "amp.scale_loss", "scaled_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "os.path.join", "model_to_save.save_pretrained", "torch.save", "logger.info", "run_pretrain._rotate_checkpoints", "any", "amp.master_params", "torch.nn.parallel.DistributedDataParallel.parameters", "os.path.exists", "os.makedirs", "hasattr", "os.path.join", "args.output_dir.find", "transformers.get_linear_schedule_with_warmup.get_lr"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.train", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain._rotate_checkpoints"], ["", "", "def", "train", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "eval_dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\" Train the model \"\"\"", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "tb_writer", "=", "SummaryWriter", "(", "\"log/\"", "+", "args", ".", "output_dir", "[", "args", ".", "output_dir", ".", "find", "(", "'/'", ")", "+", "1", ":", "]", ")", "\n", "\n", "", "args", ".", "train_batch_size", "=", "args", ".", "per_gpu_train_batch_size", "*", "max", "(", "1", ",", "args", ".", "n_gpu", ")", "\n", "train_sampler", "=", "RandomSampler", "(", "train_dataset", ")", "if", "args", ".", "local_rank", "==", "-", "1", "else", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "1", ")", "\n", "\n", "if", "args", ".", "max_steps", ">", "0", ":", "\n", "        ", "t_total", "=", "args", ".", "max_steps", "\n", "args", ".", "num_train_epochs", "=", "args", ".", "max_steps", "//", "(", "len", "(", "train_dataloader", ")", "//", "args", ".", "gradient_accumulation_steps", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "t_total", "=", "len", "(", "train_dataloader", ")", "//", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "num_train_epochs", "\n", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "learning_rate", ",", "eps", "=", "args", ".", "adam_epsilon", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "args", ".", "warmup_steps", ",", "num_training_steps", "=", "t_total", ")", "\n", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "fp16_opt_level", ")", "\n", "\n", "# multi-gpu training (should be after apex fp16 initialization)", "\n", "", "if", "args", ".", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# Distributed training (should be after apex fp16 initialization)", "\n", "", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "\n", "# Train!", "\n", "", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\"  Instantaneous batch size per GPU = %d\"", ",", "args", ".", "per_gpu_train_batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Total train batch size (w. parallel, distributed & accumulation) = %d\"", ",", "\n", "args", ".", "train_batch_size", "*", "args", ".", "gradient_accumulation_steps", "*", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "args", ".", "local_rank", "!=", "-", "1", "else", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "t_total", ")", "\n", "\n", "global_step", "=", "0", "\n", "tr_masked_lm_loss", ",", "logging_masked_lm_loss", "=", "0.0", ",", "0.0", "\n", "tr_copy_loss", ",", "logging_copy_loss", "=", "0.0", ",", "0.0", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "train_iterator", "=", "trange", "(", "int", "(", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ",", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "set_seed", "(", "args", ")", "# Added here for reproducibility (even between python 2 and 3)", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "_", "in", "train_iterator", ":", "\n", "        ", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "desc", "=", "\"Iteration\"", ",", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "            ", "input_ids", ",", "span_start", ",", "label_masks", ",", "lm_labels", "=", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", "[", ":", "5", "]", ")", "\n", "\n", "input_mask", "=", "(", "input_ids", ">", "0", ")", "\n", "masked_lm_loss", ",", "copy_loss", "=", "model", "(", "input_ids", ",", "input_mask", ",", "span_start", "=", "span_start", ",", "label_masks", "=", "label_masks", ",", "masked_lm_labels", "=", "lm_labels", ")", "#, ign_labels=ign_labels) ", "\n", "\n", "if", "args", ".", "n_gpu", ">", "1", ":", "\n", "                ", "loss", "=", "loss", ".", "mean", "(", ")", "# mean() to average on multi-gpu parallel training", "\n", "masked_lm_loss", "=", "masked_lm_loss", ".", "mean", "(", ")", "\n", "copy_loss", "=", "copy_loss", ".", "mean", "(", ")", "\n", "", "loss", "=", "masked_lm_loss", "+", "copy_loss", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "if", "args", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "tr_masked_lm_loss", "+=", "masked_lm_loss", ".", "item", "(", ")", "\n", "tr_copy_loss", "+=", "copy_loss", ".", "item", "(", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "if", "args", ".", "fp16", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "args", ".", "logging_steps", "==", "0", ":", "\n", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "'lr'", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ",", "global_step", ")", "\n", "\n", "tb_writer", ".", "add_scalar", "(", "'masked_lm_loss'", ",", "(", "tr_masked_lm_loss", "-", "logging_masked_lm_loss", ")", "/", "args", ".", "logging_steps", ",", "global_step", ")", "\n", "logging_masked_lm_loss", "=", "tr_masked_lm_loss", "\n", "\n", "tb_writer", ".", "add_scalar", "(", "'copy_loss'", ",", "(", "tr_copy_loss", "-", "logging_copy_loss", ")", "/", "args", ".", "logging_steps", ",", "global_step", ")", "\n", "logging_copy_loss", "=", "tr_copy_loss", "\n", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "save_steps", ">", "0", "and", "global_step", "%", "args", ".", "save_steps", "==", "0", ":", "\n", "                    ", "checkpoint_prefix", "=", "'checkpoint'", "\n", "# Save model checkpoint", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'{}-{}'", ".", "format", "(", "checkpoint_prefix", ",", "global_step", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "# Take care of distributed/parallel training", "\n", "model_to_save", ".", "save_pretrained", "(", "output_dir", ")", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'training_args.bin'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "output_dir", ")", "\n", "\n", "_rotate_checkpoints", "(", "args", ",", "checkpoint_prefix", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "                ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "            ", "train_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "tb_writer", ".", "close", "(", ")", "\n", "\n", "", "return", "global_step", ",", "0", "/", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.to_list": [[272, 274], ["tensor.detach().cpu().tolist", "tensor.detach().cpu", "tensor.detach"], "function", ["None"], ["", "def", "to_list", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.main": [[275, 460], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logger.warning", "run_pretrain.set_seed", "config_class.from_pretrained", "tokenizer_class.from_pretrained", "model_class.from_pretrained", "model_class.from_pretrained.to", "logger.info", "os.path.exists", "os.listdir", "ValueError", "parser.parse_args.output_dir.endswith", "print", "run_pretrain.main.create_exp_dir"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.set_seed", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "## Required parameters", "\n", "parser", ".", "add_argument", "(", "\"--corpus_path\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The input training data path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model predictions and checkpoints will be written.\"", ")", "\n", "\n", "## Other parameters", "\n", "parser", ".", "add_argument", "(", "\"--model_type\"", ",", "default", "=", "\"bert\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The model architecture to be fine-tuned.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name_or_path\"", ",", "default", "=", "\"bert-base-cased\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The model checkpoint for weights initialization.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_name\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Optional pretrained config name or path if not the same as model_name_or_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tokenizer_name\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Optional pretrained tokenizer name or path if not the same as model_name_or_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "default", "=", "512", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Set this flag if you are using an uncased model.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--per_gpu_train_batch_size\"", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Batch size per GPU/CPU for training.\"", ")", "\n", "# parser.add_argument(\"--per_gpu_eval_batch_size\", default=4, type=int,", "\n", "#                     help=\"Batch size per GPU/CPU for evaluation.\")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "5e-5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Weight deay if we apply some.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_epsilon\"", ",", "default", "=", "1e-8", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Epsilon for Adam optimizer.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Max gradient norm.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_train_epochs\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"If > 0: set total number of training steps to perform. Override num_train_epochs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_steps\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Linear warmup over warmup_steps.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--logging_steps'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Log every X updates steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save_steps'", ",", "type", "=", "int", ",", "default", "=", "3000", ",", "\n", "help", "=", "\"Save checkpoint every X updates steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save_total_limit'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--no_cuda\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Avoid using CUDA when available\"", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite_output_dir'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Overwrite the content of the output directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite_cache'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Overwrite the cached training and evaluation sets\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"For distributed training: local_rank\"", ")", "\n", "parser", ".", "add_argument", "(", "'--server_ip'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"For distant debugging.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--server_port'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"For distant debugging.\"", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# if args.eval_data_file is None and args.do_eval:", "\n", "#     raise ValueError(\"Cannot do evaluation without an evaluation data file. Either supply a file to --eval_data_file \"", "\n", "#                      \"or remove the --do_eval argument.\")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", "and", "os", ".", "listdir", "(", "args", ".", "output_dir", ")", "and", "args", ".", "do_train", "and", "not", "args", ".", "overwrite_output_dir", ":", "\n", "        ", "raise", "ValueError", "(", "\"Output directory ({}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n", "", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "        ", "if", "args", ".", "output_dir", ".", "endswith", "(", "\"test\"", ")", ":", "\n", "            ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "", "for", "script", "in", "scripts_to_save", ":", "\n", "                ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n", "", "", "", "if", "args", ".", "do_train", "and", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "create_exp_dir", "(", "args", ".", "output_dir", ",", "scripts_to_save", "=", "[", "'run_pretrain.py'", ",", "'transformers/modeling_bert.py'", ",", "'transformers/modeling_roberta.py'", "]", ")", "\n", "\n", "\n", "# Setup distant debugging if needed", "\n", "", "if", "args", ".", "server_ip", "and", "args", ".", "server_port", ":", "\n", "# Distant debugging - see https://code.visualstudio.com/docs/python/debugging#_attach-to-a-local-script", "\n", "        ", "import", "ptvsd", "\n", "print", "(", "\"Waiting for debugger attach\"", ")", "\n", "ptvsd", ".", "enable_attach", "(", "address", "=", "(", "args", ".", "server_ip", ",", "args", ".", "server_port", ")", ",", "redirect_output", "=", "True", ")", "\n", "ptvsd", ".", "wait_for_attach", "(", ")", "\n", "\n", "# Setup CUDA, GPU & distributed training", "\n", "", "if", "args", ".", "local_rank", "==", "-", "1", "or", "args", ".", "no_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "no_cuda", "else", "\"cpu\"", ")", "\n", "args", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "# Initializes the distributed backend which will take care of sychronizing nodes/GPUs", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "args", ".", "n_gpu", "=", "1", "\n", "", "args", ".", "device", "=", "device", "\n", "\n", "# Setup logging", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "else", "logging", ".", "WARN", ")", "\n", "logger", ".", "warning", "(", "\"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\"", ",", "\n", "args", ".", "local_rank", ",", "device", ",", "args", ".", "n_gpu", ",", "bool", "(", "args", ".", "local_rank", "!=", "-", "1", ")", ",", "args", ".", "fp16", ")", "\n", "\n", "# Set seed", "\n", "set_seed", "(", "args", ")", "\n", "\n", "\n", "# Load pretrained model and tokenizer", "\n", "if", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# Barrier to make sure only the first process in distributed training download model & vocab", "\n", "\n", "", "config_class", ",", "model_class", ",", "tokenizer_class", "=", "MODEL_CLASSES", "[", "args", ".", "model_type", "]", "\n", "config", "=", "config_class", ".", "from_pretrained", "(", "args", ".", "config_name", "if", "args", ".", "config_name", "else", "args", ".", "model_name_or_path", ")", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "tokenizer_name", "if", "args", ".", "tokenizer_name", "else", "args", ".", "model_name_or_path", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "\n", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ",", "from_tf", "=", "bool", "(", "'.ckpt'", "in", "args", ".", "model_name_or_path", ")", ",", "config", "=", "config", ")", "\n", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# End of barrier to make sure only the first process in distributed training download model & vocab", "\n", "\n", "", "logger", ".", "info", "(", "\"Training/evaluation parameters %s\"", ",", "args", ")", "\n", "\n", "\n", "# Training", "\n", "if", "args", ".", "do_train", ":", "\n", "        ", "if", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# Barrier to make sure only the first process in distributed training process the dataset, and the others will use the cache", "\n", "\n", "# eval_dataset = load_and_cache_examples(args, tokenizer, evaluate=True)", "\n", "", "train_dataset", "=", "load_and_cache_examples", "(", "args", ",", "tokenizer", ",", "evaluate", "=", "False", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "global_step", ",", "tr_loss", "=", "train", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ")", "\n", "logger", ".", "info", "(", "\" global_step = %s, average loss = %s\"", ",", "global_step", ",", "tr_loss", ")", "\n", "\n", "\n", "# Saving best-practices: if you use save_pretrained for the model and tokenizer, you can reload them using from_pretrained()", "\n", "", "if", "args", ".", "do_train", "and", "(", "args", ".", "local_rank", "==", "-", "1", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ")", ":", "\n", "# Create output directory if needed", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", "and", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "args", ".", "output_dir", ")", "\n", "# Save a trained model, configuration and tokenizer using `save_pretrained()`.", "\n", "# They can then be reloaded using `from_pretrained()`", "\n", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "# Take care of distributed/parallel training", "\n", "model_to_save", ".", "save_pretrained", "(", "args", ".", "output_dir", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "args", ".", "output_dir", ")", "\n", "\n", "# Good practice: save your training arguments together with the trained model", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'training_args.bin'", ")", ")", "\n", "\n", "# Load a trained model and vocabulary that you have fine-tuned", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "output_dir", ")", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "output_dir", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.gen_copy_data_NN.main": [[28, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "sorted", "os.path.exists", "os.makedirs", "os.listdir", "int", "print", "os.path.join", "os.path.exists", "open", "open", "tqdm.tqdm", "os.path.join", "json.loads", "bs4.BeautifulSoup", "bs4.BeautifulSoup.text.strip", "text.strip.strip", "nlp", "open.write", "line.strip", "title.find", "json.dumps"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--train_corpus'", ",", "type", "=", "Path", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "Path", ",", "required", "=", "True", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "train_corpus", "=", "os", ".", "path", ".", "join", "(", "args", ".", "train_corpus", ",", "'AA'", ")", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "files", "=", "sorted", "(", "os", ".", "listdir", "(", "train_corpus", ")", ",", "reverse", "=", "False", ")", "\n", "\n", "for", "file", "in", "files", ":", "\n", "        ", "num", "=", "int", "(", "file", "[", "5", ":", "]", ")", "\n", "print", "(", "file", ",", "num", ")", "\n", "ofile", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file", "+", "\".NN\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "ofile", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "output_file", "=", "open", "(", "ofile", ",", "\"w\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "train_corpus", ",", "file", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "tqdm", "(", "f", ")", ":", "\n", "                ", "article", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "title", "=", "article", "[", "'title'", "]", "\n", "if", "title", ".", "find", "(", "'(disambiguation)'", ")", "!=", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "soup", "=", "bs", "(", "article", "[", "'text'", "]", ",", "\"html.parser\"", ")", "\n", "text", "=", "soup", ".", "text", ".", "strip", "(", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "\n", "doc", "=", "nlp", "(", "text", ")", "\n", "item", "=", "[", "(", "token", ".", "text", ",", "token", ".", "tag_", ")", "for", "token", "in", "doc", "]", "\n", "item", "=", "{", "'title'", ":", "title", ",", "'info'", ":", "item", "}", "\n", "output_file", ".", "write", "(", "json", ".", "dumps", "(", "item", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.__init__": [[45, 66], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "models.kernal_mus", "models.kernel_sigmas"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.kernal_mus", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.kernel_sigmas"], ["\n", "", "class", "inference_model", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "bert_model", ",", "args", ")", ":", "\n", "        ", "super", "(", "inference_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert_hidden_dim", "=", "args", ".", "bert_hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "self", ".", "num_labels", "=", "args", ".", "num_labels", "\n", "self", ".", "pred_model", "=", "bert_model", "\n", "self", ".", "evi_num", "=", "args", ".", "evi_num", "\n", "self", ".", "nlayer", "=", "args", ".", "layer", "\n", "self", ".", "kernel", "=", "args", ".", "kernel", "\n", "self", ".", "proj_inference_de", "=", "nn", ".", "Linear", "(", "self", ".", "bert_hidden_dim", "*", "2", ",", "self", ".", "num_labels", ")", "\n", "self", ".", "proj_att", "=", "nn", ".", "Linear", "(", "self", ".", "kernel", ",", "1", ")", "\n", "self", ".", "proj_input_de", "=", "nn", ".", "Linear", "(", "self", ".", "bert_hidden_dim", ",", "self", ".", "bert_hidden_dim", ")", "\n", "self", ".", "proj_gat", "=", "nn", ".", "Sequential", "(", "\n", "Linear", "(", "self", ".", "bert_hidden_dim", "*", "2", ",", "128", ")", ",", "\n", "ReLU", "(", "True", ")", ",", "\n", "Linear", "(", "128", ",", "1", ")", "\n", ")", "\n", "self", ".", "proj_select", "=", "nn", ".", "Linear", "(", "self", ".", "kernel", ",", "1", ")", "\n", "self", ".", "mu", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "kernal_mus", "(", "self", ".", "kernel", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "21", ")", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.self_attention": [[68, 98], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "mask.view.view.view", "mask_evidence.view.view.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "own_hidden.repeat.repeat.repeat", "own_mask.repeat.repeat.repeat", "own_input.repeat.repeat.repeat", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "models.inference_model.get_intersect_matrix_att", "att_score.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.inference_model.proj_gat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.inference_model.proj_gat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.normalize.view", "torch.normalize.view", "mask_evidence.view.view.view", "own_mask.repeat.repeat.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.get_intersect_matrix_att"], ["\n", "\n", "", "def", "self_attention", "(", "self", ",", "inputs", ",", "inputs_hiddens", ",", "mask", ",", "mask_evidence", ",", "index", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "LongTensor", "(", "[", "index", "]", ")", ".", "cuda", "(", ")", "\n", "mask", "=", "mask", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", "]", ")", "\n", "mask_evidence", "=", "mask_evidence", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", "]", ")", "\n", "own_hidden", "=", "torch", ".", "index_select", "(", "inputs_hiddens", ",", "1", ",", "idx", ")", "\n", "own_mask", "=", "torch", ".", "index_select", "(", "mask", ",", "1", ",", "idx", ")", "\n", "own_input", "=", "torch", ".", "index_select", "(", "inputs", ",", "1", ",", "idx", ")", "\n", "own_hidden", "=", "own_hidden", ".", "repeat", "(", "1", ",", "self", ".", "evi_num", ",", "1", ",", "1", ")", "\n", "own_mask", "=", "own_mask", ".", "repeat", "(", "1", ",", "self", ".", "evi_num", ",", "1", ")", "\n", "own_input", "=", "own_input", ".", "repeat", "(", "1", ",", "self", ".", "evi_num", ",", "1", ")", "\n", "\n", "hiddens_norm", "=", "F", ".", "normalize", "(", "inputs_hiddens", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "own_norm", "=", "F", ".", "normalize", "(", "own_hidden", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "att_score", "=", "self", ".", "get_intersect_matrix_att", "(", "hiddens_norm", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", ")", ",", "own_norm", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", ")", ",", "\n", "mask_evidence", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", ",", "own_mask", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", ")", "\n", "att_score", "=", "att_score", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ",", "1", ")", "\n", "#if index == 1:", "\n", "#    for i in range(self.evi_num):", "\n", "#print (att_score.view(-1, self.evi_num, self.max_len)[0, 1, :])", "\n", "denoise_inputs", "=", "torch", ".", "sum", "(", "att_score", "*", "inputs_hiddens", ",", "2", ")", "\n", "weight_inp", "=", "torch", ".", "cat", "(", "[", "own_input", ",", "inputs", "]", ",", "-", "1", ")", "\n", "weight_inp", "=", "self", ".", "proj_gat", "(", "weight_inp", ")", "\n", "weight_inp", "=", "F", ".", "softmax", "(", "weight_inp", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "(", "inputs", "*", "weight_inp", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "weight_de", "=", "torch", ".", "cat", "(", "[", "own_input", ",", "denoise_inputs", "]", ",", "-", "1", ")", "\n", "weight_de", "=", "self", ".", "proj_gat", "(", "weight_de", ")", "\n", "weight_de", "=", "F", ".", "softmax", "(", "weight_de", ",", "dim", "=", "1", ")", "\n", "outputs_de", "=", "(", "denoise_inputs", "*", "weight_de", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.get_intersect_matrix": [[99, 109], ["attn_q.view.view.view", "attn_d.view.view.view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.inference_model.proj_select().view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attn_q.view.view.size", "attn_q.view.view.size", "attn_d.view.view.size", "attn_d.view.view.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "q_embed.size", "q_embed.size", "d_embed.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.inference_model.proj_select", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "models.inference_model.sigma.cuda", "models.inference_model.mu.cuda"], "methods", ["None"], ["return", "outputs", ",", "outputs_de", "\n", "\n", "", "def", "get_intersect_matrix", "(", "self", ",", "q_embed", ",", "d_embed", ",", "attn_q", ",", "attn_d", ")", ":", "\n", "        ", "attn_q", "=", "attn_q", ".", "view", "(", "attn_q", ".", "size", "(", ")", "[", "0", "]", ",", "attn_q", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "attn_d", "=", "attn_d", ".", "view", "(", "attn_d", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "attn_d", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "sim", "=", "torch", ".", "bmm", "(", "q_embed", ",", "torch", ".", "transpose", "(", "d_embed", ",", "1", ",", "2", ")", ")", ".", "view", "(", "q_embed", ".", "size", "(", ")", "[", "0", "]", ",", "q_embed", ".", "size", "(", ")", "[", "1", "]", ",", "d_embed", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "pooling_value", "=", "torch", ".", "exp", "(", "(", "-", "(", "(", "sim", "-", "self", ".", "mu", ".", "cuda", "(", ")", ")", "**", "2", ")", "/", "(", "self", ".", "sigma", ".", "cuda", "(", ")", "**", "2", ")", "/", "2", ")", ")", "*", "attn_d", "\n", "pooling_sum", "=", "torch", ".", "sum", "(", "pooling_value", ",", "2", ")", "\n", "log_pooling_sum", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "pooling_sum", ",", "min", "=", "1e-10", ")", ")", "*", "attn_q", "\n", "log_pooling_sum", "=", "torch", ".", "sum", "(", "log_pooling_sum", ",", "1", ")", "/", "(", "torch", ".", "sum", "(", "attn_q", ",", "1", ")", "+", "1e-10", ")", "\n", "log_pooling_sum", "=", "self", ".", "proj_select", "(", "log_pooling_sum", ")", ".", "view", "(", "[", "-", "1", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.get_intersect_matrix_att": [[110, 121], ["attn_q.view.view.view", "attn_d.view.view.view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "models.inference_model.proj_att().squeeze", "torch.softmax.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "attn_q.view.view.size", "attn_q.view.view.size", "attn_d.view.view.size", "attn_d.view.view.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "q_embed.size", "q_embed.size", "d_embed.size", "models.inference_model.proj_att", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "models.inference_model.sigma.cuda", "models.inference_model.mu.cuda"], "methods", ["None"], ["return", "log_pooling_sum", "\n", "\n", "", "def", "get_intersect_matrix_att", "(", "self", ",", "q_embed", ",", "d_embed", ",", "attn_q", ",", "attn_d", ")", ":", "\n", "        ", "attn_q", "=", "attn_q", ".", "view", "(", "attn_q", ".", "size", "(", ")", "[", "0", "]", ",", "attn_q", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "attn_d", "=", "attn_d", ".", "view", "(", "attn_d", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "attn_d", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "sim", "=", "torch", ".", "bmm", "(", "q_embed", ",", "torch", ".", "transpose", "(", "d_embed", ",", "1", ",", "2", ")", ")", ".", "view", "(", "q_embed", ".", "size", "(", ")", "[", "0", "]", ",", "q_embed", ".", "size", "(", ")", "[", "1", "]", ",", "d_embed", ".", "size", "(", ")", "[", "1", "]", ",", "1", ")", "\n", "pooling_value", "=", "torch", ".", "exp", "(", "(", "-", "(", "(", "sim", "-", "self", ".", "mu", ".", "cuda", "(", ")", ")", "**", "2", ")", "/", "(", "self", ".", "sigma", ".", "cuda", "(", ")", "**", "2", ")", "/", "2", ")", ")", "*", "attn_d", "\n", "log_pooling_sum", "=", "torch", ".", "sum", "(", "pooling_value", ",", "2", ")", "\n", "log_pooling_sum", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "log_pooling_sum", ",", "min", "=", "1e-10", ")", ")", "\n", "log_pooling_sum", "=", "self", ".", "proj_att", "(", "log_pooling_sum", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "log_pooling_sum", "=", "log_pooling_sum", ".", "masked_fill_", "(", "(", "1", "-", "attn_q", ")", ".", "bool", "(", ")", ",", "-", "1e4", ")", "\n", "log_pooling_sum", "=", "F", ".", "softmax", "(", "log_pooling_sum", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.forward": [[122, 156], ["msk_tensor.view.view.view", "inp_tensor.view.view.view", "seg_tensor.view.view.view", "msk_tensor.view.view.view().float", "inputs_hiddens.view.view.view", "torch.normalize", "torch.normalize", "torch.normalize", "models.inference_model.get_intersect_matrix", "log_pooling_sum.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "inputs.view.view.view", "inputs_hiddens.view.view.view", "range", "inputs.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs_att_de.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.inference_model.proj_inference_de", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "models.inference_model.pred_model", "models.inference_model.pred_model", "seg_tensor.view.view.float", "models.inference_model.self_attention", "inputs_att_de.view.view.append", "msk_tensor.view.view.view", "seg_tensor.view.view.float", "torch.softmax.squeeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.get_intersect_matrix", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.inference_model.self_attention"], ["return", "log_pooling_sum", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# print(\"inputs shape:\", inputs.shape)", "\n", "        ", "inp_tensor", ",", "msk_tensor", ",", "seg_tensor", "=", "inputs", "\n", "msk_tensor", "=", "msk_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", "\n", "inp_tensor", "=", "inp_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", "\n", "seg_tensor", "=", "seg_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", "\n", "inputs_hiddens", ",", "inputs", "=", "self", ".", "pred_model", "(", "inp_tensor", ",", "msk_tensor", ",", "seg_tensor", ")", "\n", "\n", "# print(\"seg_tensor shape:\" , seg_tensor.shape)", "\n", "mask_text", "=", "msk_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ")", ".", "float", "(", ")", "\n", "# print(\"mask_text (before) shape: \", mask_text.shape)", "\n", "mask_text", "[", ":", ",", "0", "]", "=", "0.0", "\n", "# print(\"mask_text shape: \", mask_text.shape)", "\n", "mask_claim", "=", "(", "1", "-", "seg_tensor", ".", "float", "(", ")", ")", "*", "mask_text", "\n", "# print(\"mask_claim shape:\", mask_claim.shape)", "\n", "mask_evidence", "=", "seg_tensor", ".", "float", "(", ")", "*", "mask_text", "\n", "# print(\"mask_evidence shape:\", mask_evidence.shape)", "\n", "inputs_hiddens", "=", "inputs_hiddens", ".", "view", "(", "-", "1", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", ")", "\n", "inputs_hiddens_norm", "=", "F", ".", "normalize", "(", "inputs_hiddens", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "# print(\"inputs_hiddens_norm shape:\", inputs_hiddens_norm.shape)", "\n", "log_pooling_sum", "=", "self", ".", "get_intersect_matrix", "(", "inputs_hiddens_norm", ",", "inputs_hiddens_norm", ",", "mask_claim", ",", "mask_evidence", ")", "\n", "# print(\"log_pooling_sum shape:\", log_pooling_sum.shape)", "\n", "log_pooling_sum", "=", "log_pooling_sum", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "1", "]", ")", "# shape", "\n", "select_prob", "=", "F", ".", "softmax", "(", "log_pooling_sum", ",", "dim", "=", "1", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_hiddens", "=", "inputs_hiddens", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_att_de", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "evi_num", ")", ":", "\n", "            ", "outputs", ",", "outputs_de", "=", "self", ".", "self_attention", "(", "inputs", ",", "inputs_hiddens", ",", "mask_text", ",", "mask_text", ",", "i", ")", "\n", "inputs_att_de", ".", "append", "(", "outputs_de", ")", "\n", "", "inputs_att", "=", "inputs", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n", "inputs_att_de", "=", "torch", ".", "cat", "(", "inputs_att_de", ",", "dim", "=", "1", ")", "\n", "inputs_att_de", "=", "inputs_att_de", ".", "view", "(", "[", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "bert_hidden_dim", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.kernal_mus": [[11, 26], ["l_mu.append", "range", "l_mu.append"], "function", ["None"], ["\n", "\n", "def", "kernal_mus", "(", "n_kernels", ")", ":", "\n", "    ", "\"\"\"\n    get the mu for each guassian kernel. Mu is the middle of each bin\n    :param n_kernels: number of kernels (including exact match). first one is exact match\n    :return: l_mu, a list of mu.\n    \"\"\"", "\n", "l_mu", "=", "[", "1", "]", "\n", "if", "n_kernels", "==", "1", ":", "\n", "        ", "return", "l_mu", "\n", "\n", "", "bin_size", "=", "2.0", "/", "(", "n_kernels", "-", "1", ")", "# score range from [-1, 1]", "\n", "l_mu", ".", "append", "(", "1", "-", "bin_size", "/", "2", ")", "# mu: middle of the bin", "\n", "for", "i", "in", "range", "(", "1", ",", "n_kernels", "-", "1", ")", ":", "\n", "        ", "l_mu", ".", "append", "(", "l_mu", "[", "i", "]", "-", "bin_size", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.models.kernel_sigmas": [[28, 43], ["None"], "function", ["None"], ["\n", "\n", "", "def", "kernel_sigmas", "(", "n_kernels", ")", ":", "\n", "    ", "\"\"\"\n    get sigmas for each guassian kernel.\n    :param n_kernels: number of kernels (including exactmath.)\n    :param lamb:\n    :param use_exact:\n    :return: l_sigma, a list of simga\n    \"\"\"", "\n", "bin_size", "=", "2.0", "/", "(", "n_kernels", "-", "1", ")", "\n", "l_sigma", "=", "[", "0.001", "]", "# for exact match. small variance -> exact match", "\n", "if", "n_kernels", "==", "1", ":", "\n", "        ", "return", "l_sigma", "\n", "\n", "", "l_sigma", "+=", "[", "0.1", "]", "*", "(", "n_kernels", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_bert.BertConfig.__init__": [[79, 115], ["configuration_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30522", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.__init__": [[76, 100], ["data_loader.DataLoader.read_file", "list", "len", "zip", "data_loader.DataLoader.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.read_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["        ", "inp_padding", "=", "inp_padding", "[", ":", "max_seq_size", "]", "\n", "msk_padding", "=", "msk_padding", "[", ":", "max_seq_size", "]", "\n", "seg_padding", "=", "seg_padding", "[", ":", "max_seq_size", "]", "\n", "inp_padding", "+=", "(", "[", "[", "0", "]", "*", "max_seq_length", "]", "*", "(", "max_seq_size", "-", "len", "(", "inp_padding", ")", ")", ")", "\n", "msk_padding", "+=", "(", "[", "[", "0", "]", "*", "max_seq_length", "]", "*", "(", "max_seq_size", "-", "len", "(", "msk_padding", ")", ")", ")", "\n", "seg_padding", "+=", "(", "[", "[", "0", "]", "*", "max_seq_length", "]", "*", "(", "max_seq_size", "-", "len", "(", "seg_padding", ")", ")", ")", "\n", "", "return", "inp_padding", ",", "msk_padding", ",", "seg_padding", "\n", "\n", "\n", "", "class", "DataLoader", "(", "object", ")", ":", "\n", "    ", "''' For data iteration '''", "\n", "\n", "def", "__init__", "(", "self", ",", "data_path", ",", "label_map", ",", "tokenizer", ",", "args", ",", "test", "=", "False", ",", "cuda", "=", "True", ",", "batch_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "cuda", "=", "cuda", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_len", "=", "args", ".", "max_len", "\n", "self", ".", "evi_num", "=", "args", ".", "evi_num", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "threshold", "=", "args", ".", "threshold", "\n", "self", ".", "data_path", "=", "data_path", "\n", "examples", "=", "self", ".", "read_file", "(", "data_path", ")", "\n", "self", ".", "examples", "=", "examples", "\n", "inputs", ",", "labels", "=", "list", "(", "zip", "(", "*", "examples", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.read_file": [[103, 116], ["list", "open", "enumerate", "json.loads", "list", "list.append", "line.strip", "list.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["self", ".", "test", "=", "test", "\n", "\n", "self", ".", "total_num", "=", "len", "(", "examples", ")", "\n", "if", "self", ".", "test", ":", "\n", "            ", "self", ".", "total_step", "=", "self", ".", "total_num", "/", "batch_size", "#np.ceil(self.total_num * 1.0 / batch_size)", "\n", "", "else", ":", "\n", "            ", "self", ".", "total_step", "=", "self", ".", "total_num", "/", "batch_size", "\n", "self", ".", "shuffle", "(", ")", "\n", "", "self", ".", "step", "=", "0", "\n", "\n", "\n", "\n", "", "def", "read_file", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "examples", "=", "list", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.shuffle": [[118, 120], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["            ", "for", "step", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "instance", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "claim", "=", "instance", "[", "'claim'", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.process_sent": [[134, 144], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_sent", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "sentence", "=", "re", ".", "sub", "(", "\" LSB.*?RSB\"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"LRB RRB \"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"LRB\"", ",", "\" ( \"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"RRB\"", ",", "\" )\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"--\"", ",", "\"-\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"``\"", ",", "'\"'", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"''\"", ",", "'\"'", ",", "sentence", ")", "\n", "\n", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.process_wiki_title": [[145, 151], ["re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_wiki_title", "(", "self", ",", "title", ")", ":", "\n", "        ", "title", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"LRB\"", ",", "\" ( \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"RRB\"", ",", "\" )\"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"COLON\"", ",", "\":\"", ",", "title", ")", "\n", "return", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.__iter__": [[122, 124], ["None"], "methods", ["None"], ["for", "evidence", "in", "instance", "[", "'evidence'", "]", ":", "\n", "                    ", "evi_list", ".", "append", "(", "[", "self", ".", "process_sent", "(", "claim", ")", ",", "self", ".", "process_wiki_title", "(", "evidence", "[", "0", "]", ")", ",", "\n", "self", ".", "process_sent", "(", "evidence", "[", "2", "]", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.__next__": [[125, 127], ["data_loader.DataLoader.next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "label", "=", "self", ".", "label_map", "[", "instance", "[", "'label'", "]", "]", "\n", "evi_list", "=", "evi_list", "[", ":", "self", ".", "evi_num", "]", "# only the first were considered", "\n", "examples", ".", "append", "(", "[", "evi_list", ",", "label", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.__len__": [[128, 130], ["None"], "methods", ["None"], ["", "", "return", "examples", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoader.next": [[131, 167], ["range", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "StopIteration", "len", "data_loader.tok2int_list", "torch.LongTensor", "inp_tensor_input.cuda.cuda.cuda", "msk_tensor_input.cuda.cuda.cuda", "seg_tensor_input.cuda.cuda.cuda", "lab_tensor.cuda.cuda.cuda", "data_loader.DataLoader.shuffle", "list", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "zip", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_list", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "process_sent", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "sentence", "=", "re", ".", "sub", "(", "\" LSB.*?RSB\"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"LRB RRB \"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"LRB\"", ",", "\" ( \"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"RRB\"", ",", "\" )\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"--\"", ",", "\"-\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"``\"", ",", "'\"'", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"''\"", ",", "'\"'", ",", "sentence", ")", "\n", "\n", "return", "sentence", "\n", "\n", "", "def", "process_wiki_title", "(", "self", ",", "title", ")", ":", "\n", "        ", "title", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"LRB\"", ",", "\" ( \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"RRB\"", ",", "\" )\"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"COLON\"", ",", "\":\"", ",", "title", ")", "\n", "return", "title", "\n", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_batch", "\n", "\n", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "''' Get the next batch '''", "\n", "\n", "if", "self", ".", "step", "<", "self", ".", "total_step", ":", "\n", "            ", "inputs", "=", "self", ".", "inputs", "[", "self", ".", "step", "*", "self", ".", "batch_size", ":", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "labels", "=", "self", ".", "labels", "[", "self", ".", "step", "*", "self", ".", "batch_size", ":", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.__init__": [[171, 189], ["data_loader.DataLoaderTest.read_file", "list", "len", "numpy.ceil", "zip"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.read_file"], ["inp_padding_inputs", "+=", "inp", "\n", "msk_padding_inputs", "+=", "msk", "\n", "seg_padding_inputs", "+=", "seg", "\n", "\n", "", "inp_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "inp_padding_inputs", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ")", "\n", "msk_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "msk_padding_inputs", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ")", "\n", "seg_tensor_input", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "seg_padding_inputs", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "evi_num", ",", "self", ".", "max_len", ")", "\n", "lab_tensor", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "labels", ")", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "inp_tensor_input", "=", "inp_tensor_input", ".", "cuda", "(", ")", "\n", "msk_tensor_input", "=", "msk_tensor_input", ".", "cuda", "(", ")", "\n", "seg_tensor_input", "=", "seg_tensor_input", ".", "cuda", "(", ")", "\n", "lab_tensor", "=", "lab_tensor", ".", "cuda", "(", ")", "\n", "", "self", ".", "step", "+=", "1", "\n", "return", "(", "inp_tensor_input", ",", "msk_tensor_input", ",", "seg_tensor_input", ")", ",", "lab_tensor", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_sent": [[222, 232], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_sent", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "sentence", "=", "re", ".", "sub", "(", "\" \\-LSB\\-.*?\\-RSB\\-\"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"\\-LRB\\- \\-RRB\\- \"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\" -LRB-\"", ",", "\" ( \"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"-RRB-\"", ",", "\" )\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"--\"", ",", "\"-\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"``\"", ",", "'\"'", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"''\"", ",", "'\"'", ",", "sentence", ")", "\n", "\n", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.process_wiki_title": [[233, 239], ["re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "process_wiki_title", "(", "self", ",", "title", ")", ":", "\n", "        ", "title", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\" -LRB-\"", ",", "\" ( \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"-RRB-\"", ",", "\" )\"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"-COLON-\"", ",", "\":\"", ",", "title", ")", "\n", "return", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.read_file": [[191, 206], ["jsonlines.open", "jsonlines.open", "list", "list", "zip", "retrieval[].items", "jsonlines.open", "list", "list.append", "list.append", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["            ", "self", ".", "step", "=", "0", "\n", "if", "not", "self", ".", "test", ":", "\n", "                ", "self", ".", "shuffle", "(", ")", "\n", "inputs", ",", "labels", "=", "list", "(", "zip", "(", "*", "self", ".", "examples", ")", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "labels", "=", "labels", "\n", "", "raise", "StopIteration", "(", ")", "\n", "\n", "", "", "", "class", "DataLoaderTest", "(", "object", ")", ":", "\n", "    ", "''' For data iteration '''", "\n", "\n", "def", "__init__", "(", "self", ",", "data_path", ",", "label_map", ",", "tokenizer", ",", "args", ",", "cuda", "=", "True", ",", "batch_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "cuda", "=", "cuda", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle": [[208, 210], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["self", ".", "evi_num", "=", "args", ".", "evi_num", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "threshold", "=", "args", ".", "threshold", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.__iter__": [[211, 213], ["None"], "methods", ["None"], ["self", ".", "data_path", "=", "data_path", "\n", "examples", "=", "self", ".", "read_file", "(", "data_path", ")", "\n", "self", ".", "examples", "=", "examples", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.__next__": [[214, 216], ["data_loader.DataLoaderTest.next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["inputs", ",", "ids", "=", "list", "(", "zip", "(", "*", "examples", ")", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "ids", "=", "ids", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.__len__": [[217, 219], ["None"], "methods", ["None"], ["\n", "self", ".", "total_num", "=", "len", "(", "examples", ")", "\n", "self", ".", "total_step", "=", "np", ".", "ceil", "(", "self", ".", "total_num", "*", "1.0", "/", "batch_size", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.next": [[220, 252], ["range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "StopIteration", "len", "data_loader.tok2int_list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "inp_tensor_input.cuda.cuda.cuda", "msk_tensor_input.cuda.cuda.cuda", "seg_tensor_input.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_list"], ["self", ".", "step", "=", "0", "\n", "\n", "", "def", "process_sent", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "sentence", "=", "re", ".", "sub", "(", "\" \\-LSB\\-.*?\\-RSB\\-\"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"\\-LRB\\- \\-RRB\\- \"", ",", "\"\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\" -LRB-\"", ",", "\" ( \"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"-RRB-\"", ",", "\" )\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"--\"", ",", "\"-\"", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"``\"", ",", "'\"'", ",", "sentence", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "\"''\"", ",", "'\"'", ",", "sentence", ")", "\n", "\n", "return", "sentence", "\n", "\n", "", "def", "process_wiki_title", "(", "self", ",", "title", ")", ":", "\n", "        ", "title", "=", "re", ".", "sub", "(", "\"_\"", ",", "\" \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\" -LRB-\"", ",", "\" ( \"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"-RRB-\"", ",", "\" )\"", ",", "title", ")", "\n", "title", "=", "re", ".", "sub", "(", "\"-COLON-\"", ",", "\":\"", ",", "title", ")", "\n", "return", "title", "\n", "\n", "\n", "", "def", "read_file", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "examples", "=", "list", "(", ")", "\n", "with", "open", "(", "data_path", ")", "as", "fin", ":", "\n", "            ", "for", "step", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "instance", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "claim", "=", "instance", "[", "'claim'", "]", "\n", "evi_list", "=", "list", "(", ")", "\n", "for", "evidence", "in", "instance", "[", "'evidence'", "]", ":", "\n", "                    ", "evi_list", ".", "append", "(", "[", "self", ".", "process_sent", "(", "claim", ")", ",", "self", ".", "process_wiki_title", "(", "evidence", "[", "0", "]", ")", ",", "\n", "self", ".", "process_sent", "(", "evidence", "[", "2", "]", ")", "]", ")", "\n", "", "id", "=", "instance", "[", "'id'", "]", "\n", "evi_list", "=", "evi_list", "[", ":", "self", ".", "evi_num", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader._truncate_seq_pair": [[10, 25], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["    ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "tokens_b", ".", "pop", "(", ")", "\n", "\n", "", "", "", "def", "tok2int_sent", "(", "sentence", ",", "tokenizer", ",", "max_seq_length", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_sent": [[26, 49], ["tokenizer.tokenize", "tokenizer.tokenize", "data_loader._truncate_seq_pair", "tokenizer.convert_tokens_to_ids", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader._truncate_seq_pair", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["    ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "sent_a", ",", "title", ",", "sent_b", "=", "sentence", "\n", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "sent_a", ")", "\n", "\n", "tokens_b", "=", "None", "\n", "tokens_t", "=", "None", "\n", "if", "sent_b", "and", "title", ":", "\n", "        ", "tokens_t", "=", "tokenizer", ".", "tokenize", "(", "title", ")", "\n", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "sent_b", ")", "\n", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "4", "-", "len", "(", "tokens_t", ")", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "        ", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "            ", "tokens_a", "=", "tokens_a", "[", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "", "", "tokens", "=", "[", "\"<s>\"", "]", "+", "tokens_a", "+", "[", "\"</s>\"", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "tokens", ")", "\n", "if", "tokens_b", "and", "tokens_t", ":", "\n", "        ", "tokens", "=", "tokens", "+", "tokens_t", "+", "[", "\"</s>\"", "]", "+", "tokens_b", "+", "[", "\"</s>\"", "]", "\n", "segment_ids", "+=", "[", "1", "]", "*", "(", "len", "(", "tokens_b", ")", "+", "len", "(", "tokens_t", ")", "+", "2", ")", "\n", "#print (tokens)", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "padding", "=", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_list": [[54, 71], ["list", "list", "list", "enumerate", "data_loader.tok2int_sent", "list.append", "list.append", "list.append", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.tok2int_sent"], ["segment_ids", "+=", "padding", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "return", "input_ids", ",", "input_mask", ",", "segment_ids", "\n", "\n", "\n", "\n", "\n", "\n", "", "def", "tok2int_list", "(", "src_list", ",", "tokenizer", ",", "max_seq_length", ",", "max_seq_size", "=", "-", "1", ")", ":", "\n", "    ", "inp_padding", "=", "list", "(", ")", "\n", "msk_padding", "=", "list", "(", ")", "\n", "seg_padding", "=", "list", "(", ")", "\n", "for", "step", ",", "sent", "in", "enumerate", "(", "src_list", ")", ":", "\n", "        ", "input_ids", ",", "input_mask", ",", "input_seg", "=", "tok2int_sent", "(", "sent", ",", "tokenizer", ",", "max_seq_length", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.is_torch_available": [[75, 77], ["None"], "function", ["None"], ["def", "is_torch_available", "(", ")", ":", "\n", "    ", "return", "_torch_available", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.is_tf_available": [[78, 80], ["None"], "function", ["None"], ["", "def", "is_tf_available", "(", ")", ":", "\n", "    ", "return", "_tf_available", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.url_to_filename": [[105, 127], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "url.endswith", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode"], ["", "", "def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    If the url ends with .h5 (Keras HDF5 weights) ands '.h5' to the name\n    so that TF 2.0 can identify it as a HDF5 file\n    (see https://github.com/tensorflow/tensorflow/blob/00fad90125b18b80fe054de1055770cfb8fe4ba3/tensorflow/python/keras/engine/network.py#L1380)\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "if", "url", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "        ", "filename", "+=", "'.h5'", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.filename_to_url": [[129, 153], ["os.path.join", "isinstance", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path": [[155, 186], ["urlparse", "isinstance", "str", "isinstance", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    Args:\n        cache_dir: specify a cache directory to save the file to (overwrite the default cache dir).\n        force_download: if True, re-dowload the file even if it's already cached in the cache dir.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path": [[188, 199], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_request": [[201, 218], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_etag": [[220, 227], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object", "botocore.config.Config"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_get": [[229, 235], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "botocore.config.Config", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.http_get": [[237, 247], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "proxies", "=", "proxies", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.get_from_cache": [[249, 325], ["url.startswith", "file_utils.url_to_filename", "os.path.join", "isinstance", "str", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "response.headers.get.decode", "fnmatch.filter", "list", "isinstance", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "os.path.exists", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "isinstance", "unicode", "s.endswith"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.url_to_filename", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_etag", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.s3_get", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.http_get", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ",", "etag_timeout", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "not", "isinstance", "(", "cache_dir", ",", "str", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ",", "proxies", "=", "proxies", ",", "timeout", "=", "etag_timeout", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "(", "EnvironmentError", ",", "requests", ".", "exceptions", ".", "Timeout", ")", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "etag", "is", "not", "None", ":", "\n", "        ", "etag", "=", "etag", ".", "decode", "(", "'utf-8'", ")", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "or", "force_download", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache or force_download set to True, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "output_string", ",", "str", ")", ":", "\n", "                    ", "output_string", "=", "unicode", "(", "output_string", ",", "'utf-8'", ")", "# The beauty of python 2", "\n", "", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train.accuracy": [[20, 25], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train.correct_prediction": [[26, 31], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "correct_prediction", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train.eval_model": [[33, 42], ["model.eval", "enumerate", "model", "train.correct_prediction"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.correct_prediction"], ["", "def", "eval_model", "(", "model", ",", "validset_reader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct_pred", "=", "0.0", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "validset_reader", ")", ":", "\n", "        ", "inputs", ",", "lab_tensor", "=", "data", "\n", "prob", "=", "model", "(", "inputs", ")", "\n", "correct_pred", "+=", "correct_prediction", "(", "prob", ",", "lab_tensor", ")", "\n", "", "dev_accuracy", "=", "correct_pred", "/", "validset_reader", ".", "total_num", "\n", "return", "dev_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train.train_model": [[45, 95], ["int", "AdamW", "get_linear_schedule_with_warmup", "range", "int", "AdamW.zero_grad", "enumerate", "model.train", "model", "torch.log", "torch.log", "torch.log", "torch.log", "torch.nll_loss", "F.nll_loss.item", "F.nll_loss.backward", "AdamW.step", "get_linear_schedule_with_warmup.step", "AdamW.zero_grad", "logger.info", "logger.info", "model.named_parameters", "model.named_parameters", "any", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.eval_model", "logger.info", "any", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "ori_model.state_dict"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.train", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.eval_model"], ["", "def", "train_model", "(", "model", ",", "ori_model", ",", "args", ",", "trainset_reader", ",", "validset_reader", ")", ":", "\n", "    ", "save_path", "=", "args", ".", "outdir", "+", "'/model'", "\n", "best_accuracy", "=", "0.0", "\n", "running_loss", "=", "0.0", "\n", "t_total", "=", "int", "(", "\n", "trainset_reader", ".", "total_num", "/", "args", ".", "train_batch_size", "/", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "num_train_epochs", ")", "\n", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "learning_rate", ",", "eps", "=", "1e-8", ",", "correct_bias", "=", "True", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "int", "(", "args", ".", "warmup_proportion", "*", "t_total", ")", ",", "num_training_steps", "=", "t_total", ")", "\n", "\n", "\n", "global_step", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "int", "(", "args", ".", "num_train_epochs", ")", ")", ":", "\n", "# optimizer.zero_grad()", "\n", "        ", "for", "index", ",", "data", "in", "enumerate", "(", "trainset_reader", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n", "inputs", ",", "lab_tensor", "=", "data", "\n", "prob", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "prob", ",", "lab_tensor", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "               ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "global_step", "+=", "1", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "model", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "%", "(", "args", ".", "gradient_accumulation_steps", "*", "10", ")", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Epoch: {0}, Step: {1}, Loss: {2}'", ".", "format", "(", "epoch", ",", "global_step", "//", "args", ".", "gradient_accumulation_steps", ",", "(", "running_loss", "/", "10", ")", ")", ")", "\n", "running_loss", "=", "0", "\n", "\n", "", "", "if", "global_step", "%", "(", "args", ".", "eval_step", "*", "args", ".", "gradient_accumulation_steps", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Start eval!'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "dev_accuracy", "=", "eval_model", "(", "model", ",", "validset_reader", ")", "\n", "logger", ".", "info", "(", "'Dev total acc: {0}'", ".", "format", "(", "dev_accuracy", ")", ")", "\n", "if", "dev_accuracy", ">", "best_accuracy", ":", "\n", "                        ", "best_accuracy", "=", "dev_accuracy", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaEmbeddings.__init__": [[46, 52], ["modeling_bert.BertEmbeddings.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ",", "\n", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaEmbeddings.forward": [[53, 71], ["super().forward", "input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs_embeds.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.forward", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "# Position numbers begin at padding_idx+1. Padding symbols are ignored.", "\n", "# cf. fairseq's `utils.make_positions`", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "return", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "forward", "(", "input_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaModel.__init__": [[180, 185], ["modeling_bert.BertModel.__init__", "modeling_roberta.RobertaEmbeddings", "modeling_roberta.RobertaModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaModel.get_input_embeddings": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaModel.set_input_embeddings": [[189, 191], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForMaskedLM.__init__": [[228, 235], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaLMHead", "modeling_roberta.RobertaForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForMaskedLM.get_output_embeddings": [[236, 238], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForMaskedLM.forward": [[239, 258], ["modeling_roberta.RobertaForMaskedLM.roberta", "modeling_roberta.RobertaForMaskedLM.lm_head", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaLMHead.__init__": [[263, 270], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaLMHead.forward": [[271, 280], ["modeling_roberta.RobertaLMHead.dense", "modeling_bert.gelu", "modeling_roberta.RobertaLMHead.layer_norm", "modeling_roberta.RobertaLMHead.decoder"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.gelu"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "gelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForSequenceClassification.__init__": [[320, 326], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "RobertaClassificationHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForSequenceClassification.forward": [[327, 350], ["modeling_roberta.RobertaForSequenceClassification.roberta", "modeling_roberta.RobertaForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForMultipleChoice.__init__": [[429, 437], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForMultipleChoice.forward": [[438, 462], ["input_ids.view", "modeling_roberta.RobertaForMultipleChoice.roberta", "modeling_roberta.RobertaForMultipleChoice.dropout", "modeling_roberta.RobertaForMultipleChoice.classifier", "modeling_roberta.RobertaForMultipleChoice.view", "input_ids.size", "position_ids.view", "token_type_ids.view", "attention_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "position_ids.size", "token_type_ids.size", "attention_mask.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "outputs", "=", "self", ".", "roberta", "(", "flat_input_ids", ",", "position_ids", "=", "flat_position_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "attention_mask", "=", "flat_attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForTokenClassification.__init__": [[500, 509], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaForTokenClassification.forward": [[510, 539], ["modeling_roberta.RobertaForTokenClassification.roberta", "modeling_roberta.RobertaForTokenClassification.dropout", "modeling_roberta.RobertaForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_roberta.RobertaForTokenClassification.view", "labels.view", "modeling_roberta.RobertaForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.BertForSequenceEncoder.__init__": [[574, 583], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.BertForSequenceEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "input_ids", ",", "\n", "attention_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.BertForSequenceEncoder.forward": [[584, 602], ["modeling_roberta.BertForSequenceEncoder.roberta"], "methods", ["None"], ["end_positions", "=", "None", ",", "\n", "answer_masks", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaClassificationHead.__init__": [[607, 612], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], []], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_roberta.RobertaClassificationHead.forward": [[613, 621], ["modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.out_proj"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.__init__": [[74, 85], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.base_model": [[86, 89], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_model", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.get_input_embeddings": [[90, 98], ["getattr", "getattr.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "return", "base_model", ".", "get_input_embeddings", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.set_input_embeddings": [[99, 107], ["getattr", "getattr.set_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.set_input_embeddings"], ["", "", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\" Set model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "base_model", ".", "set_input_embeddings", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.get_output_embeddings": [[108, 113], ["None"], "methods", ["None"], ["", "", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's output embeddings\n            Return None if the model doesn't have output embeddings\n        \"\"\"", "\n", "return", "None", "# Overwrite for models with output embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights": [[114, 121], ["modeling_utils.PreTrainedModel.get_output_embeddings", "modeling_utils.PreTrainedModel._tie_or_clone_weights", "modeling_utils.PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMaskedLM.get_output_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._tie_or_clone_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "output_embeddings", "=", "self", ".", "get_output_embeddings", "(", ")", "\n", "if", "output_embeddings", "is", "not", "None", ":", "\n", "            ", "self", ".", "_tie_or_clone_weights", "(", "output_embeddings", ",", "self", ".", "get_input_embeddings", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._tie_or_clone_weights": [[122, 139], ["torch.nn.Parameter", "hasattr", "torch.nn.functional.pad", "hasattr", "hasattr", "input_embeddings.weight.clone"], "methods", ["None"], ["", "", "def", "_tie_or_clone_weights", "(", "self", ",", "output_embeddings", ",", "input_embeddings", ")", ":", "\n", "        ", "\"\"\" Tie or clone module weights depending of weither we are using TorchScript or not\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "nn", ".", "Parameter", "(", "input_embeddings", ".", "weight", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "input_embeddings", ".", "weight", "\n", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "'bias'", ")", "and", "output_embeddings", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output_embeddings", ".", "bias", ".", "data", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "output_embeddings", ".", "bias", ".", "data", ",", "\n", "(", "0", ",", "output_embeddings", ".", "weight", ".", "shape", "[", "0", "]", "-", "output_embeddings", ".", "bias", ".", "shape", "[", "0", "]", ")", ",", "\n", "'constant'", ",", "\n", "0", "\n", ")", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "'out_features'", ")", "and", "hasattr", "(", "input_embeddings", ",", "'num_embeddings'", ")", ":", "\n", "            ", "output_embeddings", ".", "out_features", "=", "input_embeddings", ".", "num_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.resize_token_embeddings": [[140, 167], ["getattr", "getattr._resize_token_embeddings", "hasattr", "modeling_utils.PreTrainedModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._resize_token_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights"], ["", "", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Resize input token embeddings matrix of the model if new_num_tokens != config.vocab_size.\n        Take care of tying weights embeddings afterwards if the model class has a `tie_weights()` method.\n\n        Arguments:\n\n            new_num_tokens: (`optional`) int:\n                New number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end.\n                If not provided or None: does nothing and just returns a pointer to the input tokens ``torch.nn.Embeddings`` Module of the model.\n\n        Return: ``torch.nn.Embeddings``\n            Pointer to the input tokens Embeddings Module of the model\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "# get the base model if needed", "\n", "model_embeds", "=", "base_model", ".", "_resize_token_embeddings", "(", "new_num_tokens", ")", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "model_embeds", "\n", "\n", "# Update base model and current model config", "\n", "", "self", ".", "config", ".", "vocab_size", "=", "new_num_tokens", "\n", "base_model", ".", "vocab_size", "=", "new_num_tokens", "\n", "\n", "# Tie weights again if needed", "\n", "if", "hasattr", "(", "self", ",", "'tie_weights'", ")", ":", "\n", "            ", "self", ".", "tie_weights", "(", ")", "\n", "\n", "", "return", "model_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._resize_token_embeddings": [[168, 173], ["modeling_utils.PreTrainedModel.get_input_embeddings", "modeling_utils.PreTrainedModel._get_resized_embeddings", "modeling_utils.PreTrainedModel.set_input_embeddings", "modeling_utils.PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._get_resized_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.set_input_embeddings", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "old_embeddings", "=", "self", ".", "get_input_embeddings", "(", ")", "\n", "new_embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "old_embeddings", ",", "new_num_tokens", ")", "\n", "self", ".", "set_input_embeddings", "(", "new_embeddings", ")", "\n", "return", "self", ".", "get_input_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel._get_resized_embeddings": [[174, 207], ["old_embeddings.weight.size", "torch.nn.Embedding", "torch.nn.Embedding.to", "modeling_utils.PreTrainedModel._init_weights", "min"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPreTrainedModel._init_weights"], ["", "def", "_get_resized_embeddings", "(", "self", ",", "old_embeddings", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Build a resized Embedding Module from a provided token Embedding Module.\n            Increasing the size will add newly initialized vectors at the end\n            Reducing the size will remove vectors from the end\n\n        Args:\n            new_num_tokens: (`optional`) int\n                New number of tokens in the embedding matrix.\n                Increasing the size will add newly initialized vectors at the end\n                Reducing the size will remove vectors from the end\n                If not provided or None: return the provided token Embedding Module.\n        Return: ``torch.nn.Embeddings``\n            Pointer to the resized Embedding Module or the old Embedding Module if new_num_tokens is None\n        \"\"\"", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "", "old_num_tokens", ",", "old_embedding_dim", "=", "old_embeddings", ".", "weight", ".", "size", "(", ")", "\n", "if", "old_num_tokens", "==", "new_num_tokens", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "# Build new embeddings", "\n", "", "new_embeddings", "=", "nn", ".", "Embedding", "(", "new_num_tokens", ",", "old_embedding_dim", ")", "\n", "new_embeddings", ".", "to", "(", "old_embeddings", ".", "weight", ".", "device", ")", "\n", "\n", "# initialize all new embeddings (in particular added tokens)", "\n", "self", ".", "_init_weights", "(", "new_embeddings", ")", "\n", "\n", "# Copy word embeddings from the previous weights", "\n", "num_tokens_to_copy", "=", "min", "(", "old_num_tokens", ",", "new_num_tokens", ")", "\n", "new_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "=", "old_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "\n", "\n", "return", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights": [[208, 219], ["modeling_utils.PreTrainedModel.apply", "modeling_utils.PreTrainedModel.tie_weights", "modeling_utils.PreTrainedModel.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.tie_weights", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize and prunes weights if needed. \"\"\"", "\n", "# Initialize weights", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# Prune heads if needed", "\n", "if", "self", ".", "config", ".", "pruned_heads", ":", "\n", "            ", "self", ".", "prune_heads", "(", "self", ".", "config", ".", "pruned_heads", ")", "\n", "\n", "# Tie weights if needed", "\n", "", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.prune_heads": [[220, 234], ["heads_to_prune.items", "modeling_utils.PreTrainedModel.base_model._prune_heads", "list", "set", "set", "modeling_utils.PreTrainedModel.config.pruned_heads.get"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel._prune_heads"], ["", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n                E.g. {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on layer 1 and heads 2 and 3 on layer 2.\n        \"\"\"", "\n", "# save new sets of pruned heads as union of previously stored pruned heads and newly pruned heads", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "union_heads", "=", "set", "(", "self", ".", "config", ".", "pruned_heads", ".", "get", "(", "layer", ",", "[", "]", ")", ")", "|", "set", "(", "heads", ")", "\n", "self", ".", "config", ".", "pruned_heads", "[", "layer", "]", "=", "list", "(", "union_heads", ")", "# Unfortunately we have to store it as list for JSON", "\n", "\n", "", "self", ".", "base_model", ".", "_prune_heads", "(", "heads_to_prune", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.save_pretrained": [[235, 251], ["os.path.isdir", "model_to_save.config.save_pretrained", "os.path.join", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Only save the model itself if we are using distributed training", "\n", "model_to_save", "=", "self", ".", "module", "if", "hasattr", "(", "self", ",", "'module'", ")", "else", "self", "\n", "\n", "# Save configuration file", "\n", "model_to_save", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "WEIGHTS_NAME", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.from_pretrained": [[252, 472], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls", "hasattr", "load_tf2_checkpoint_in_pytorch_model.eval", "cls.config_class.from_pretrained", "torch.load", "file_utils.cached_path.endswith", "state_dict.copy.copy.keys", "zip", "getattr", "state_dict.copy.copy.copy", "modeling_utils.PreTrainedModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained pytorch model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n                - None if you are both providing the configuration and state dictionary (resp. with keyword arguments ``config`` and ``state_dict``)\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "config", "=", "kwargs", ".", "pop", "(", "'config'", ",", "None", ")", "\n", "state_dict", "=", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_tf", "=", "kwargs", ".", "pop", "(", "'from_tf'", ",", "False", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "output_loading_info", "=", "kwargs", ".", "pop", "(", "'output_loading_info'", ",", "False", ")", "\n", "\n", "# Load config", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", ",", "model_kwargs", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "\n", "cache_dir", "=", "cache_dir", ",", "return_unused_kwargs", "=", "True", ",", "\n", "force_download", "=", "force_download", ",", "\n", "proxies", "=", "proxies", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Load model", "\n", "", "if", "pretrained_model_name_or_path", "is", "not", "None", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "if", "from_tf", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", ")", ":", "\n", "# Load from a TF 1.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", "\n", "", "elif", "from_tf", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a TF 2.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Error no file named {} found in directory {} or `from_tf` set to False\"", ".", "format", "(", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", "]", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "", "else", ":", "\n", "                ", "assert", "from_tf", ",", "\"Error finding file {}, no file or TF 1.X checkpoint found\"", ".", "format", "(", "pretrained_model_name_or_path", ")", "\n", "archive_file", "=", "pretrained_model_name_or_path", "+", "\".index\"", "\n", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "                ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "                ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                    ", "msg", "=", "\"Couldn't reach server at '{}' to download pretrained weights.\"", ".", "format", "(", "\n", "archive_file", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to model weight files named one of {} but \"", "\"couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_model_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ",", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", ",", "TF_WEIGHTS_NAME", "]", ")", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "resolved_archive_file", "=", "None", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "state_dict", "is", "None", "and", "not", "from_tf", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "resolved_archive_file", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "if", "from_tf", ":", "\n", "            ", "if", "resolved_archive_file", ".", "endswith", "(", "'.index'", ")", ":", "\n", "# Load from a TensorFlow 1.X checkpoint - provided by original authors", "\n", "                ", "model", "=", "cls", ".", "load_tf_weights", "(", "model", ",", "config", ",", "resolved_archive_file", "[", ":", "-", "6", "]", ")", "# Remove the '.index'", "\n", "", "else", ":", "\n", "# Load from our TensorFlow 2.0 checkpoints", "\n", "                ", "try", ":", "\n", "                    ", "from", "transformers", "import", "load_tf2_checkpoint_in_pytorch_model", "\n", "model", "=", "load_tf2_checkpoint_in_pytorch_model", "(", "model", ",", "resolved_archive_file", ",", "allow_missing_keys", "=", "True", ")", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "", "", "", "else", ":", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "            ", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                    ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "                ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "                ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# PyTorch's `_load_from_state_dict` does not copy parameters in a module's descendants", "\n", "# so we need to apply the function recursively.", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "                ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                    ", "if", "child", "is", "not", "None", ":", "\n", "                        ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "# Make sure we are able to load base models as well as derived models (with heads)", "\n", "", "", "", "start_prefix", "=", "''", "\n", "model_to_load", "=", "model", "\n", "if", "not", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "start_prefix", "=", "cls", ".", "base_model_prefix", "+", "'.'", "\n", "", "if", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "not", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "model_to_load", "=", "getattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "\n", "\n", "", "load", "(", "model_to_load", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n", "", "", "if", "hasattr", "(", "model", ",", "'tie_weights'", ")", ":", "\n", "            ", "model", ".", "tie_weights", "(", ")", "# make sure word embedding weights are still tied", "\n", "\n", "# Set model in evaluation mode to desactivate DropOut modules by default", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "output_loading_info", ":", "\n", "            ", "loading_info", "=", "{", "\"missing_keys\"", ":", "missing_keys", ",", "\"unexpected_keys\"", ":", "unexpected_keys", ",", "\"error_msgs\"", ":", "error_msgs", "}", "\n", "return", "model", ",", "loading_info", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.Conv1D.__init__": [[475, 485], ["torch.nn.Module.__init__", "torch.empty", "torch.nn.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ")", ":", "\n", "        ", "\"\"\" Conv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "Conv1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "w", "=", "torch", ".", "empty", "(", "nx", ",", "nf", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "w", ",", "std", "=", "0.02", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.Conv1D.forward": [[486, 491], ["torch.addmm", "x.view.view.view", "x.view.view.view", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size_out", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "nf", ",", ")", "\n", "x", "=", "torch", ".", "addmm", "(", "self", ".", "bias", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "self", ".", "weight", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "size_out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PoolerStartLogits.__init__": [[495, 498], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerStartLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PoolerStartLogits.forward": [[499, 514], ["modeling_utils.PoolerStartLogits.dense().squeeze", "modeling_utils.PoolerStartLogits.dense", "next", "modeling_utils.PoolerStartLogits.parameters"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape `(batch_size, seq_len)`\n                invalid position mask such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "x", "=", "self", ".", "dense", "(", "hidden_states", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "65500", "*", "p_mask", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PoolerEndLogits.__init__": [[519, 525], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.LayerNorm", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerEndLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PoolerEndLogits.forward": [[526, 558], ["modeling_utils.PoolerEndLogits.dense_0", "modeling_utils.PoolerEndLogits.activation", "modeling_utils.PoolerEndLogits.LayerNorm", "modeling_utils.PoolerEndLogits.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather", "start_states.expand.expand.expand", "torch.cat", "modeling_utils.PoolerEndLogits.dense_1", "next", "modeling_utils.PoolerEndLogits.parameters"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to hidden_states\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape ``(batch_size, seq_len)``\n                Mask of invalid position such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "slen", ",", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "2", ":", "]", "\n", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "start_states", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ")", "# shape (bsz, slen, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "hidden_states", ",", "start_states", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "LayerNorm", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "65500", "*", "p_mask", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PoolerAnswerClass.__init__": [[562, 567], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerAnswerClass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PoolerAnswerClass.forward": [[568, 602], ["modeling_utils.PoolerAnswerClass.dense_0", "modeling_utils.PoolerAnswerClass.activation", "modeling_utils.PoolerAnswerClass.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather().squeeze", "cls_index[].expand", "hidden_states.gather().squeeze", "torch.cat", "modeling_utils.PoolerAnswerClass.dense_1", "hidden_states.gather", "hidden_states.gather"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to ``hidden_states``.\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span.\n            **cls_index**: torch.LongTensor of shape ``(batch_size,)``\n                position of the CLS token. If None, take the last token.\n\n            note(Original repo):\n                no dependency on end_feature so that we can obtain one single `cls_logits`\n                for each sample\n        \"\"\"", "\n", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "1", "]", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "\n", "", "if", "cls_index", "is", "not", "None", ":", "\n", "            ", "cls_index", "=", "cls_index", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "cls_token_state", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "", "else", ":", "\n", "            ", "cls_token_state", "=", "hidden_states", "[", ":", ",", "-", "1", ",", ":", "]", "# shape (bsz, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "start_states", ",", "cls_token_state", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.SQuADHead.__init__": [[644, 652], ["torch.nn.Module.__init__", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SQuADHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.SQuADHead.forward": [[653, 711], ["modeling_utils.SQuADHead.start_logits", "modeling_utils.SQuADHead.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_utils.SQuADHead.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_utils.SQuADHead.answer_class", "modeling_utils.SQuADHead.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "cls_index", "=", "None", ",", "is_impossible", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "(", ")", "\n", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.SequenceSummary.__init__": [[728, 757], ["torch.nn.Module.__init__", "Identity", "Identity", "Identity", "Identity", "hasattr", "hasattr", "torch.nn.Linear", "hasattr", "torch.nn.Tanh", "hasattr", "torch.nn.Dropout", "hasattr", "torch.nn.Dropout", "hasattr"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SequenceSummary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "summary_type", "=", "config", ".", "summary_type", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "else", "'last'", "\n", "if", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "# We should use a standard multi-head attention module with absolute positional embedding for that.", "\n", "# Cf. https://github.com/zihangdai/xlnet/blob/master/modeling.py#L253-L276", "\n", "# We can probably just use the multi-head attention module of PyTorch >=1.1.0", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "summary", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "and", "config", ".", "summary_use_proj", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "'summary_proj_to_labels'", ")", "and", "config", ".", "summary_proj_to_labels", "and", "config", ".", "num_labels", ">", "0", ":", "\n", "                ", "num_classes", "=", "config", ".", "num_labels", "\n", "", "else", ":", "\n", "                ", "num_classes", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "summary", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "activation", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_activation'", ")", "and", "config", ".", "summary_activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "", "self", ".", "first_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_first_dropout'", ")", "and", "config", ".", "summary_first_dropout", ">", "0", ":", "\n", "            ", "self", ".", "first_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_first_dropout", ")", "\n", "\n", "", "self", ".", "last_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_last_dropout'", ")", "and", "config", ".", "summary_last_dropout", ">", "0", ":", "\n", "            ", "self", ".", "last_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_last_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.SequenceSummary.forward": [[758, 788], ["modeling_utils.SequenceSummary.first_dropout", "modeling_utils.SequenceSummary.summary", "modeling_utils.SequenceSummary.activation", "modeling_utils.SequenceSummary.last_dropout", "hidden_states.mean", "hidden_states.gather().squeeze", "torch.full_like", "cls_index.expand.expand.unsqueeze().unsqueeze", "cls_index.expand.expand.expand", "hidden_states.gather", "cls_index.expand.expand.unsqueeze", "hidden_states.size", "cls_index.expand.expand.dim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\" hidden_states: float Tensor in shape [bsz, ..., seq_len, hidden_size], the hidden-states of the last layer.\n            cls_index: [optional] position of the classification token if summary_type == 'cls_index',\n                shape (bsz,) or more generally (bsz, ...) where ... are optional leading dimensions of hidden_states.\n                if summary_type == 'cls_index' and cls_index is None:\n                    we take the last token of the sequence as classification token\n        \"\"\"", "\n", "if", "self", ".", "summary_type", "==", "'last'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'first'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'mean'", ":", "\n", "            ", "output", "=", "hidden_states", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "summary_type", "==", "'cls_index'", ":", "\n", "            ", "if", "cls_index", "is", "None", ":", "\n", "                ", "cls_index", "=", "torch", ".", "full_like", "(", "hidden_states", "[", "...", ",", ":", "1", ",", ":", "]", ",", "hidden_states", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "cls_index", "=", "cls_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "cls_index", "=", "cls_index", ".", "expand", "(", "(", "-", "1", ",", ")", "*", "(", "cls_index", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", ")", "\n", "# shape of cls_index: (bsz, XX, 1, hidden_size) where XX are optional leading dim of hidden_states", "\n", "", "output", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, XX, hidden_size)", "\n", "", "elif", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "output", "=", "self", ".", "first_dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "summary", "(", "output", ")", "\n", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "output", "=", "self", ".", "last_dropout", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer": [[790, 813], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "torch.nn.Linear().to", "nn.Linear().to.weight.copy_", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "nn.Linear().to.bias.copy_", "layer.weight.index_select().clone", "layer.bias.clone().detach", "layer.bias[].clone().detach", "torch.nn.Linear", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select", "layer.bias.clone", "layer.bias[].clone"], "function", ["None"], ["", "", "def", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\" Prune a linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "if", "dim", "==", "1", ":", "\n", "            ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "nn", ".", "Linear", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ",", "bias", "=", "layer", ".", "bias", "is", "not", "None", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer": [[815, 837], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "Conv1D().to", "Conv1D().to.weight.copy_", "Conv1D().to.bias.copy_", "layer.bias.clone().detach", "layer.bias[].clone().detach", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select().clone", "modeling_utils.Conv1D", "layer.bias.clone", "layer.bias[].clone", "layer.weight.index_select"], "function", ["None"], ["", "def", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D layer (a model parameters) to keep only entries in index.\n        A Conv1D work as a Linear layer (see e.g. BERT) but the weights are transposed.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "dim", "==", "0", ":", "\n", "        ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "Conv1D", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_layer": [[839, 850], ["isinstance", "modeling_utils.prune_linear_layer", "isinstance", "modeling_utils.prune_conv1d_layer", "ValueError"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_layer", "(", "layer", ",", "index", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D or nn.Linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "Conv1D", ")", ":", "\n", "        ", "return", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Can't prune layer of class {}\"", ".", "format", "(", "layer", ".", "__class__", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertEmbeddings.__init__": [[150, 160], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertEmbeddings.forward": [[161, 184], ["modeling_bert.BertEmbeddings.position_embeddings", "modeling_bert.BertEmbeddings.token_type_embeddings", "modeling_bert.BertEmbeddings.LayerNorm", "modeling_bert.BertEmbeddings.dropout", "input_ids.size", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.zeros", "modeling_bert.BertEmbeddings.word_embeddings", "modeling_bert.BertEmbeddings.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.__init__": [[187, 204], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores": [[205, 209], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.forward": [[210, 254], ["modeling_bert.BertSelfAttention.query", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "torch.matmul", "modeling_bert.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "\n", "# If this is instantiated as a cross-attention module, the keys", "\n", "# and values come from an encoder; the attention mask needs to be", "\n", "# such that the encoder's padding tokens are not attended to.", "\n", "if", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "mixed_key_layer", "=", "self", ".", "key", "(", "encoder_hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "encoder_hidden_states", ")", "\n", "attention_mask", "=", "encoder_attention_mask", "\n", "", "else", ":", "\n", "            ", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfOutput.__init__": [[257, 262], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertSelfOutput.forward": [[263, 268], ["modeling_bert.BertSelfOutput.dense", "modeling_bert.BertSelfOutput.dropout", "modeling_bert.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.__init__": [[271, 276], ["torch.nn.Module.__init__", "modeling_bert.BertSelfAttention", "modeling_bert.BertSelfOutput", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads": [[277, 299], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_bert.BertAttention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "self", ".", "num_attention_heads", ",", "self", ".", "self", ".", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "\n", "# Prune linear layers", "\n", "self", ".", "self", ".", "query", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "query", ",", "index", ")", "\n", "self", ".", "self", ".", "key", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "key", ",", "index", ")", "\n", "self", ".", "self", ".", "value", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "value", ",", "index", ")", "\n", "self", ".", "output", ".", "dense", "=", "prune_linear_layer", "(", "self", ".", "output", ".", "dense", ",", "index", ",", "dim", "=", "1", ")", "\n", "\n", "# Update hyper params and store pruned heads", "\n", "self", ".", "self", ".", "num_attention_heads", "=", "self", ".", "self", ".", "num_attention_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "self", ".", "all_head_size", "=", "self", ".", "self", ".", "attention_head_size", "*", "self", ".", "self", ".", "num_attention_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.forward": [[300, 305], ["modeling_bert.BertAttention.self", "modeling_bert.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "self_outputs", "=", "self", ".", "self", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "hidden_states", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertIntermediate.__init__": [[308, 315], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertIntermediate.forward": [[316, 320], ["modeling_bert.BertIntermediate.dense", "modeling_bert.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertOutput.__init__": [[323, 328], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertOutput.forward": [[329, 334], ["modeling_bert.BertOutput.dense", "modeling_bert.BertOutput.dropout", "modeling_bert.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertLayer.__init__": [[337, 345], ["torch.nn.Module.__init__", "modeling_bert.BertAttention", "modeling_bert.BertIntermediate", "modeling_bert.BertOutput", "modeling_bert.BertAttention"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "self", ".", "crossattention", "=", "BertAttention", "(", "config", ")", "\n", "", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertLayer.forward": [[346, 360], ["modeling_bert.BertLayer.attention", "modeling_bert.BertLayer.intermediate", "modeling_bert.BertLayer.output", "modeling_bert.BertLayer.crossattention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "self_attention_outputs", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "self_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "self_attention_outputs", "[", "1", ":", "]", "# add self attentions if we output attention weights", "\n", "\n", "if", "self", ".", "is_decoder", "and", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "cross_attention_outputs", "=", "self", ".", "crossattention", "(", "attention_output", ",", "attention_mask", ",", "head_mask", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "attention_output", "=", "cross_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "outputs", "+", "cross_attention_outputs", "[", "1", ":", "]", "# add cross attentions if we output attention weights", "\n", "\n", "", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "outputs", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertEncoder.__init__": [[363, 368], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "modeling_bert.BertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertEncoder.forward": [[369, 392], ["enumerate", "layer_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPooler.__init__": [[395, 399], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPooler.forward": [[400, 407], ["modeling_bert.BertPooler.dense", "modeling_bert.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPredictionHeadTransform.__init__": [[410, 418], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPredictionHeadTransform.forward": [[419, 424], ["modeling_bert.BertPredictionHeadTransform.dense", "modeling_bert.BertPredictionHeadTransform.transform_act_fn", "modeling_bert.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertLMPredictionHead.__init__": [[427, 438], ["torch.nn.Module.__init__", "modeling_bert.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "\n", "config", ".", "vocab_size", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertLMPredictionHead.forward": [[439, 443], ["modeling_bert.BertLMPredictionHead.transform", "modeling_bert.BertLMPredictionHead.decoder"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.transform"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertOnlyMLMHead.__init__": [[446, 449], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertOnlyMLMHead.forward": [[450, 453], ["modeling_bert.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertOnlyNSPHead.__init__": [[456, 459], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertOnlyNSPHead.forward": [[460, 463], ["modeling_bert.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPreTrainingHeads.__init__": [[466, 470], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPreTrainingHeads.forward": [[471, 475], ["modeling_bert.BertPreTrainingHeads.predictions", "modeling_bert.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertPreTrainedModel._init_weights": [[486, 497], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel.__init__": [[605, 614], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertEmbeddings", "modeling_bert.BertEncoder", "modeling_bert.BertPooler", "modeling_bert.BertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel.get_input_embeddings": [[615, 617], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel.set_input_embeddings": [[618, 620], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel._prune_heads": [[621, 628], ["heads_to_prune.items", "modeling_bert.BertModel.encoder.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertAttention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertModel.forward": [[629, 725], ["extended_attention_mask.to.to.to", "encoder_extended_attention_mask.to.to.to", "modeling_bert.BertModel.embeddings", "modeling_bert.BertModel.encoder", "modeling_bert.BertModel.pooler", "ValueError", "torch.ones", "torch.ones", "torch.zeros", "torch.ones.dim", "torch.ones.dim", "torch.ones.dim", "torch.ones.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "input_ids.size", "torch.arange", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "ValueError", "seq_ids[].repeat", "next", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "inputs_embeds.size", "modeling_bert.BertModel.parameters", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass on the Model.\n\n        The model can behave as an encoder (with only self-attention) as well\n        as a decoder, in which case a layer of cross-attention is added between\n        the self-attention layers, following the architecture described in `Attention is all you need`_ by Ashish Vaswani,\n        Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser and Illia Polosukhin.\n\n        To behave as an decoder the model needs to be initialized with the\n        `is_decoder` argument of the configuration set to `True`; an\n        `encoder_hidden_states` is expected as an input to the forward pass.\n\n        .. _`Attention is all you need`:\n            https://arxiv.org/abs/1706.03762\n\n        \"\"\"", "\n", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "\n", "", "if", "encoder_attention_mask", "is", "None", ":", "\n", "            ", "encoder_attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "# We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]", "\n", "# ourselves in which case we just need to make it broadcastable to all heads.", "\n", "", "if", "attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "# Provided a padding mask of dimensions [batch_size, seq_length]", "\n", "# - if the model is a decoder, apply a causal mask in addition to the padding mask", "\n", "# - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]", "\n", "", "if", "attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "if", "self", ".", "config", ".", "is_decoder", ":", "\n", "                ", "batch_size", ",", "seq_length", "=", "input_shape", "\n", "seq_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "device", "=", "device", ")", "\n", "causal_mask", "=", "seq_ids", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "batch_size", ",", "seq_length", ",", "1", ")", "<=", "seq_ids", "[", "None", ",", ":", ",", "None", "]", "\n", "extended_attention_mask", "=", "causal_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# If a 2D ou 3D attention mask is provided for the cross-attention", "\n", "# we need to make broadcastabe to [batch_size, num_heads, seq_length, seq_length]", "\n", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "", "encoder_extended_attention_mask", "=", "encoder_extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "encoder_extended_attention_mask", "=", "(", "1.0", "-", "encoder_extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", "=", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "attention_mask", "=", "extended_attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_extended_attention_mask", ")", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForPreTraining.__init__": [[768, 775], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertPreTrainingHeads", "modeling_bert.BertForPreTraining.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertPreTrainingHeads", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForPreTraining.get_output_embeddings": [[776, 778], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForPreTraining.forward": [[779, 802], ["modeling_bert.BertForPreTraining.bert", "modeling_bert.BertForPreTraining.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "prediction_scores.view", "masked_lm_labels.view", "seq_relationship_score.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", ",", "pooled_output", "=", "outputs", "[", ":", "2", "]", "\n", "prediction_scores", ",", "seq_relationship_score", "=", "self", ".", "cls", "(", "sequence_output", ",", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", "and", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), prediction_scores, seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForMaskedLM.__init__": [[844, 851], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyMLMHead", "modeling_bert.BertForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForMaskedLM.get_output_embeddings": [[852, 854], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForMaskedLM.forward": [[855, 892], ["modeling_bert.BertForMaskedLM.bert", "modeling_bert.BertForMaskedLM.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "prediction_scores[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "prediction_scores[].contiguous.view", "masked_lm_labels.view", "prediction_scores[].contiguous.view", "lm_labels[].contiguous.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ",", "lm_labels", "=", "None", ",", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_attention_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "# Although this may seem awkward, BertForMaskedLM supports two scenarios:", "\n", "# 1. If a tensor that contains the indices of masked labels is provided,", "\n", "#    the cross-entropy is the MLM cross-entropy that measures the likelihood", "\n", "#    of predictions for masked words.", "\n", "# 2. If `lm_labels` is provided we are in a causal scenario where we", "\n", "#    try to predict the next token for each input in the decoder.", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "# -1 index = padding token", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "# we are doing next-token prediction; shift prediction scores and input ids by one", "\n", "            ", "prediction_scores", "=", "prediction_scores", "[", ":", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "lm_labels", "=", "lm_labels", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "ltr_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "ltr_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), (ltr_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForNextSentencePrediction.__init__": [[927, 934], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyNSPHead", "modeling_bert.BertForNextSentencePrediction.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyNSPHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForNextSentencePrediction.forward": [[935, 956], ["modeling_bert.BertForNextSentencePrediction.bert", "modeling_bert.BertForNextSentencePrediction.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForNextSentencePrediction.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "next_sentence_label", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "seq_relationship_score", "=", "self", ".", "cls", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "next_sentence_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (next_sentence_loss), seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForSequenceClassification.__init__": [[993, 1002], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForSequenceClassification.forward": [[1003, 1031], ["modeling_bert.BertForSequenceClassification.bert", "modeling_bert.BertForSequenceClassification.dropout", "modeling_bert.BertForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForSequenceClassification.view", "labels.view", "modeling_bert.BertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForMultipleChoice.__init__": [[1069, 1077], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForMultipleChoice.forward": [[1078, 1108], ["input_ids.view.view.view", "modeling_bert.BertForMultipleChoice.bert", "modeling_bert.BertForMultipleChoice.dropout", "modeling_bert.BertForMultipleChoice.classifier", "modeling_bert.BertForMultipleChoice.view", "input_ids.view.view.size", "attention_mask.view", "token_type_ids.view", "position_ids.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "attention_mask.size", "token_type_ids.size", "position_ids.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForTokenClassification.__init__": [[1143, 1152], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForTokenClassification.forward": [[1153, 1182], ["modeling_bert.BertForTokenClassification.bert", "modeling_bert.BertForTokenClassification.dropout", "modeling_bert.BertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_bert.BertForTokenClassification.view", "labels.view", "modeling_bert.BertForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForQuestionAnswering.__init__": [[1229, 1237], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Linear", "modeling_bert.BertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.BertForQuestionAnswering.forward": [[1238, 1274], ["modeling_bert.BertForQuestionAnswering.bert", "modeling_bert.BertForQuestionAnswering.qa_outputs", "modeling_bert.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n", "\n", "\n", "", "", "class", "BertForCopy", "(", "BertPreTrainedModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForCopy", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.load_tf_weights_in_bert": [[54, 119], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "any", "logger.info", "torch.from_numpy", "logger.error", "logger.info", "re.fullmatch", "getattr", "re.split", "getattr", "len", "int", "np.transpose", "getattr", "getattr", "getattr", "getattr", "logger.info"], "function", ["None"], ["def", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", ",", "\"global_step\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'squad'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'classifier'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.gelu": [[121, 128], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.gelu_new": [[130, 135], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function currently in Google Bert repo (identical to OpenAI GPT).\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.swish": [[137, 139], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.test.eval_model": [[22, 49], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "dict", "dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "model", "logits.max.max", "logits[].tolist", "logits[].tolist", "select_prob.tolist.tolist", "range", "f.write", "len", "len", "len", "len", "len", "list.append", "dict", "dict", "json.dumps"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["import", "numpy", "as", "np", "\n", "from", "models", "import", "inference_model", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "\n", "def", "eval_model", "(", "model", ",", "label_list", ",", "validset_reader", ",", "outdir", ",", "name", ")", ":", "\n", "    ", "outpath", "=", "outdir", "+", "name", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "open", "(", "outpath", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "index", ",", "data", "in", "enumerate", "(", "validset_reader", ")", ":", "\n", "                ", "inputs", ",", "ids", "=", "data", "\n", "logits", "=", "model", "(", "inputs", ")", "\n", "preds", "=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "preds", ")", "==", "len", "(", "ids", ")", "\n", "for", "step", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                    ", "instance", "=", "{", "\"id\"", ":", "ids", "[", "step", "]", ",", "\"predicted_label\"", ":", "label_list", "[", "preds", "[", "step", "]", "]", "}", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "instance", ")", "+", "\"\\n\"", ")", "\n", "\n", "\n", "\n", "", "", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_type\"", ",", "type", "=", "str", ",", "default", "=", "\"bert\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--test_path'", ",", "help", "=", "'train path'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "help", "=", "'train path'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_origin_path'", ",", "help", "=", "'train path'", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.__init__": [[51, 61], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "finetuning_task", "=", "kwargs", ".", "pop", "(", "'finetuning_task'", ",", "None", ")", "\n", "self", ".", "num_labels", "=", "kwargs", ".", "pop", "(", "'num_labels'", ",", "2", ")", "\n", "self", ".", "output_attentions", "=", "kwargs", ".", "pop", "(", "'output_attentions'", ",", "False", ")", "\n", "self", ".", "output_hidden_states", "=", "kwargs", ".", "pop", "(", "'output_hidden_states'", ",", "False", ")", "\n", "self", ".", "output_past", "=", "kwargs", ".", "pop", "(", "'output_past'", ",", "True", ")", "# Not used by all models", "\n", "self", ".", "torchscript", "=", "kwargs", ".", "pop", "(", "'torchscript'", ",", "False", ")", "# Only used by PyTorch models", "\n", "self", ".", "use_bfloat16", "=", "kwargs", ".", "pop", "(", "'use_bfloat16'", ",", "False", ")", "\n", "self", ".", "pruned_heads", "=", "kwargs", ".", "pop", "(", "'pruned_heads'", ",", "{", "}", ")", "\n", "self", ".", "is_decoder", "=", "kwargs", ".", "pop", "(", "'is_decoder'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.save_pretrained": [[62, 73], ["os.path.isdir", "os.path.join", "configuration_utils.PretrainedConfig.to_json_file", "logger.info"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_file"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a configuration object to the directory `save_directory`, so that it\n            can be re-loaded using the :func:`~transformers.PretrainedConfig.from_pretrained` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "CONFIG_NAME", ")", "\n", "\n", "self", ".", "to_json_file", "(", "output_config_file", ")", "\n", "logger", ".", "info", "(", "\"Configuration saved in {}\"", ".", "format", "(", "output_config_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained": [[74, 174], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls.from_json_file", "hasattr", "kwargs.items", "logger.info", "os.path.isdir", "file_utils.cached_path", "logger.info", "logger.info", "dict", "hasattr", "kwargs.pop", "str", "os.path.join", "EnvironmentError", "setattr", "to_remove.append", "int", "cls.from_json_file.pruned_heads.items", "cls.pretrained_config_archive_map.keys"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.file_utils.cached_path", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Frame.pop"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a :class:`~transformers.PretrainedConfig` (or a derived class) from a pre-trained model configuration.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PretrainedConfig` so let's show the examples on a\n            # derived class: BertConfig\n            config = BertConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = BertConfig.from_pretrained('./test/saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = BertConfig.from_pretrained('./test/saved_model/my_configuration.json')\n            config = BertConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = BertConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "return_unused_kwargs", "=", "kwargs", ".", "pop", "(", "'return_unused_kwargs'", ",", "False", ")", "\n", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "            ", "config_file", "=", "cls", ".", "pretrained_config_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "config_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CONFIG_NAME", ")", "\n", "", "else", ":", "\n", "            ", "config_file", "=", "pretrained_model_name_or_path", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_config_file", "=", "cached_path", "(", "config_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "                ", "msg", "=", "\"Couldn't reach server at '{}' to download pretrained model configuration file.\"", ".", "format", "(", "\n", "config_file", ")", "\n", "", "else", ":", "\n", "                ", "msg", "=", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to a configuration file named {} or \"", "\"a directory containing such a file but couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_config_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "config_file", ",", "CONFIG_NAME", ")", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "if", "resolved_config_file", "==", "config_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {}\"", ".", "format", "(", "config_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {} from cache at {}\"", ".", "format", "(", "\n", "config_file", ",", "resolved_config_file", ")", ")", "\n", "\n", "# Load config", "\n", "", "config", "=", "cls", ".", "from_json_file", "(", "resolved_config_file", ")", "\n", "\n", "if", "hasattr", "(", "config", ",", "'pruned_heads'", ")", ":", "\n", "            ", "config", ".", "pruned_heads", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "value", ")", "for", "key", ",", "value", "in", "config", ".", "pruned_heads", ".", "items", "(", ")", ")", "\n", "\n", "# Update config with kwargs if needed", "\n", "", "to_remove", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "key", ")", ":", "\n", "                ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Model config %s\"", ",", "str", "(", "config", ")", ")", "\n", "if", "return_unused_kwargs", ":", "\n", "            ", "return", "config", ",", "kwargs", "\n", "", "else", ":", "\n", "            ", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_dict": [[175, 182], ["cls", "json_object.items", "setattr"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `Config` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "cls", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_json_file": [[183, 189], ["cls.from_dict", "io.open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_dict", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.__eq__": [[190, 192], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "==", "other", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.__repr__": [[193, 195], ["str", "configuration_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict": [[196, 200], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string": [[201, 204], ["json.dumps", "configuration_utils.PretrainedConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_file": [[205, 209], ["io.open", "writer.write", "configuration_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaEmbeddings.__init__": [[46, 52], ["modeling_bert.BertEmbeddings.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ",", "\n", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaEmbeddings.forward": [[53, 71], ["super().forward", "input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs_embeds.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.forward", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "# Position numbers begin at padding_idx+1. Padding symbols are ignored.", "\n", "# cf. fairseq's `utils.make_positions`", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "return", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "forward", "(", "input_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.__init__": [[180, 185], ["modeling_bert.BertModel.__init__", "bert_model.RobertaEmbeddings", "bert_model.RobertaModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.get_input_embeddings": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaModel.set_input_embeddings": [[189, 191], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMaskedLM.__init__": [[228, 235], ["modeling_bert.BertPreTrainedModel.__init__", "bert_model.RobertaModel", "bert_model.RobertaLMHead", "bert_model.RobertaForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMaskedLM.get_output_embeddings": [[236, 238], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMaskedLM.forward": [[239, 258], ["bert_model.RobertaForMaskedLM.roberta", "bert_model.RobertaForMaskedLM.lm_head", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "bert_model.RobertaForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaLMHead.__init__": [[263, 270], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaLMHead.forward": [[271, 280], ["bert_model.RobertaLMHead.dense", "modeling_bert.gelu", "bert_model.RobertaLMHead.layer_norm", "bert_model.RobertaLMHead.decoder"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_bert.gelu"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "gelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForSequenceClassification.__init__": [[320, 326], ["modeling_bert.BertPreTrainedModel.__init__", "bert_model.RobertaModel", "bert_model.RobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "RobertaClassificationHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForSequenceClassification.forward": [[327, 350], ["bert_model.RobertaForSequenceClassification.roberta", "bert_model.RobertaForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "bert_model.RobertaForSequenceClassification.view", "labels.view", "bert_model.RobertaForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMultipleChoice.__init__": [[429, 437], ["modeling_bert.BertPreTrainedModel.__init__", "bert_model.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "bert_model.RobertaForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForMultipleChoice.forward": [[438, 462], ["input_ids.view", "bert_model.RobertaForMultipleChoice.roberta", "bert_model.RobertaForMultipleChoice.dropout", "bert_model.RobertaForMultipleChoice.classifier", "bert_model.RobertaForMultipleChoice.view", "input_ids.size", "position_ids.view", "token_type_ids.view", "attention_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "position_ids.size", "token_type_ids.size", "attention_mask.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "outputs", "=", "self", ".", "roberta", "(", "flat_input_ids", ",", "position_ids", "=", "flat_position_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "attention_mask", "=", "flat_attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForTokenClassification.__init__": [[500, 509], ["modeling_bert.BertPreTrainedModel.__init__", "bert_model.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "bert_model.RobertaForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaForTokenClassification.forward": [[510, 539], ["bert_model.RobertaForTokenClassification.roberta", "bert_model.RobertaForTokenClassification.dropout", "bert_model.RobertaForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "bert_model.RobertaForTokenClassification.view", "labels.view", "bert_model.RobertaForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.BertForSequenceEncoder.__init__": [[574, 583], ["modeling_bert.BertPreTrainedModel.__init__", "bert_model.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "bert_model.BertForSequenceEncoder.init_weights"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForSequenceEncoder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.BertForSequenceEncoder.forward": [[584, 602], ["bert_model.BertForSequenceEncoder.roberta"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "#sequence_output = self.dropout(sequence_output)", "\n", "#logits = self.classifier(sequence_output)", "\n", "\n", "#outputs = (logits,) + outputs[2:]  # add hidden states and attention if they are here", "\n", "\n", "return", "sequence_output", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaClassificationHead.__init__": [[607, 612], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaClassificationHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.bert_model.RobertaClassificationHead.forward": [[613, 621], ["bert_model.RobertaClassificationHead.dropout", "bert_model.RobertaClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "bert_model.RobertaClassificationHead.dropout", "bert_model.RobertaClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.accuracy": [[20, 25], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.correct_prediction": [[26, 31], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "correct_prediction", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.eval_model": [[33, 42], ["model.eval", "enumerate", "model", "train_roberta.correct_prediction"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.correct_prediction"], ["", "def", "eval_model", "(", "model", ",", "validset_reader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct_pred", "=", "0.0", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "validset_reader", ")", ":", "\n", "        ", "inputs", ",", "lab_tensor", "=", "data", "\n", "prob", "=", "model", "(", "inputs", ",", "roberta", "=", "True", ")", "\n", "correct_pred", "+=", "correct_prediction", "(", "prob", ",", "lab_tensor", ")", "\n", "", "dev_accuracy", "=", "correct_pred", "/", "validset_reader", ".", "total_num", "\n", "return", "dev_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.train_model": [[45, 103], ["int", "model.named_parameters", "AdamW", "get_linear_schedule_with_warmup", "range", "any", "int", "AdamW.zero_grad", "enumerate", "model.train", "model", "torch.log", "torch.log", "torch.log", "torch.log", "torch.nll_loss", "F.nll_loss.item", "F.nll_loss.backward", "AdamW.step", "get_linear_schedule_with_warmup.step", "AdamW.zero_grad", "logger.info", "logger.info", "model.named_parameters", "model.named_parameters", "any", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_roberta.eval_model", "logger.info", "any", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "ori_model.state_dict"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.run_pretrain.train", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.train_roberta.eval_model"], ["", "def", "train_model", "(", "model", ",", "ori_model", ",", "args", ",", "trainset_reader", ",", "validset_reader", ")", ":", "\n", "    ", "save_path", "=", "args", ".", "outdir", "+", "'/model'", "\n", "best_accuracy", "=", "0.0", "\n", "running_loss", "=", "0.0", "\n", "t_total", "=", "int", "(", "\n", "trainset_reader", ".", "total_num", "/", "args", ".", "train_batch_size", "/", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "num_train_epochs", ")", "\n", "no_grad", "=", "[", "\"embeddings\"", ",", "\"encoder.layer.0\"", ",", "\"encoder.layer.1\"", ",", "\"encoder.layer.2\"", ",", "\n", "\"encoder.layer.3\"", ",", "\"encoder.layer.4\"", ",", "\"encoder.layer.5\"", ",", "\"encoder.layer.6\"", ",", "\n", "\"encoder.layer.7\"", ",", "\"encoder.layer.8\"", ",", "\"encoder.layer.9\"", ",", "\"encoder.layer.10\"", ",", "\"encoder.layer.11\"", "]", "\n", "no_grad", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_grad", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "p_optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "p_optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "learning_rate", ",", "eps", "=", "1e-8", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "0", ",", "num_training_steps", "=", "t_total", "\n", ")", "\n", "\n", "global_step", "=", "0", "\n", "for", "epoch", "in", "range", "(", "int", "(", "args", ".", "num_train_epochs", ")", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "trainset_reader", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "inputs", ",", "lab_tensor", "=", "data", "\n", "prob", "=", "model", "(", "inputs", ",", "roberta", "=", "True", ")", "\n", "prob", "=", "torch", ".", "log", "(", "prob", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "prob", ",", "lab_tensor", ")", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "", "loss", ".", "backward", "(", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logger", ".", "info", "(", "'Epoch: {0}, Step: {1}, Loss: {2}'", ".", "format", "(", "epoch", ",", "global_step", ",", "(", "running_loss", "/", "global_step", ")", ")", ")", "\n", "", "if", "global_step", "%", "(", "args", ".", "eval_step", "*", "args", ".", "gradient_accumulation_steps", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Start eval!'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "dev_accuracy", "=", "eval_model", "(", "model", ",", "validset_reader", ")", "\n", "logger", ".", "info", "(", "'Dev total acc: {0}'", ".", "format", "(", "dev_accuracy", ")", ")", "\n", "if", "dev_accuracy", ">", "best_accuracy", ":", "\n", "                        ", "best_accuracy", "=", "dev_accuracy", "\n", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "ori_model", ".", "state_dict", "(", ")", ",", "\n", "'best_accuracy'", ":", "best_accuracy", "}", ",", "save_path", "+", "\".best.pt\"", ")", "\n", "logger", ".", "info", "(", "\"Saved best epoch {0}, best accuracy {1}\"", ".", "format", "(", "epoch", ",", "best_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.safe_divide": [[17, 22], ["None"], "function", ["None"], ["def", "safe_divide", "(", "num", ",", "denom", ")", ":", "\n", "    ", "if", "denom", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "num", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_f1": [[24, 30], ["metrics.safe_divide", "metrics.safe_divide", "metrics.safe_divide"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.safe_divide", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.safe_divide", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.safe_divide"], ["", "", "def", "compute_f1", "(", "counts", ",", "difficulty", "=", "None", ")", ":", "\n", "    ", "correct_key", "=", "\"correct\"", "if", "difficulty", "is", "None", "else", "f\"correct_{difficulty}\"", "\n", "precision", "=", "safe_divide", "(", "counts", "[", "correct_key", "]", ",", "counts", "[", "\"retrieved\"", "]", ")", "\n", "recall", "=", "safe_divide", "(", "counts", "[", "correct_key", "]", ",", "counts", "[", "\"relevant\"", "]", ")", "\n", "f1", "=", "safe_divide", "(", "2", "*", "precision", "*", "recall", ",", "precision", "+", "recall", ")", "\n", "return", "{", "\"precision\"", ":", "precision", ",", "\"recall\"", ":", "recall", ",", "\"f1\"", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.contains_evidence": [[36, 43], ["gold_rat.issubset"], "function", ["None"], ["", "def", "contains_evidence", "(", "predicted", ",", "gold", ")", ":", "\n", "# If any of gold are contained in predicted, we're good.", "\n", "    ", "for", "gold_rat", "in", "gold", ":", "\n", "        ", "if", "gold_rat", ".", "issubset", "(", "predicted", ")", ":", "\n", "            ", "return", "True", "\n", "# If we get to the end, didn't find one.", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.is_correct": [[45, 61], ["metrics.contains_evidence", "set", "set"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.contains_evidence"], ["", "def", "is_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", ":", "\n", "    ", "pred_rationales", "=", "doc_pred", ".", "rationale", "[", ":", "MAX_ABSTRACT_SENTS", "]", "\n", "\n", "# If it's not an evidence document, we lose.", "\n", "if", "doc_id", "not", "in", "gold", ".", "evidence", ":", "\n", "        ", "return", "False", ",", "False", "\n", "\n", "# If the label's wrong, we lose.", "\n", "", "gold_label", "=", "gold", ".", "evidence", "[", "doc_id", "]", ".", "label", "\n", "if", "doc_pred", ".", "label", "!=", "gold_label", ":", "\n", "        ", "return", "False", ",", "False", "\n", "\n", "", "gold_rationales", "=", "[", "set", "(", "x", ")", "for", "x", "in", "gold", ".", "evidence", "[", "doc_id", "]", ".", "rationales", "]", "\n", "good_rationalized", "=", "contains_evidence", "(", "set", "(", "pred_rationales", ")", ",", "gold_rationales", ")", "\n", "good_label_only", "=", "True", "\n", "return", "good_label_only", ",", "good_rationalized", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.update_counts_abstract": [[63, 78], ["len", "pred.predictions.items", "metrics.is_correct"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.evaluate.rationale_selection.is_correct"], ["", "def", "update_counts_abstract", "(", "pred", ",", "gold", ",", "counts_abstract", ")", ":", "\n", "    ", "counts_abstract", "[", "\"relevant\"", "]", "+=", "len", "(", "gold", ".", "evidence", ")", "\n", "for", "doc_id", ",", "doc_pred", "in", "pred", ".", "predictions", ".", "items", "(", ")", ":", "\n", "# If it's NEI, doesn't count one way or the other.", "\n", "        ", "if", "doc_pred", ".", "label", "==", "Label", ".", "NEI", ":", "\n", "            ", "continue", "\n", "", "counts_abstract", "[", "\"retrieved\"", "]", "+=", "1", "\n", "\n", "good_label_only", ",", "good_rationalized", "=", "is_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", "\n", "if", "good_label_only", ":", "\n", "            ", "counts_abstract", "[", "\"correct_label_only\"", "]", "+=", "1", "\n", "", "if", "good_rationalized", ":", "\n", "            ", "counts_abstract", "[", "\"correct_rationalized\"", "]", "+=", "1", "\n", "\n", "", "", "return", "counts_abstract", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.count_rationale_sents": [[84, 99], ["gold_set.issubset", "len", "len"], "function", ["None"], ["", "def", "count_rationale_sents", "(", "predicted", ",", "gold", ")", ":", "\n", "    ", "n_correct", "=", "0", "\n", "\n", "for", "ix", "in", "predicted", ":", "\n", "        ", "gold_sets", "=", "[", "entry", "for", "entry", "in", "gold", "if", "ix", "in", "entry", "]", "\n", "assert", "len", "(", "gold_sets", ")", "<", "2", "# Can't be in two rationales.", "\n", "# If it's not in a gold set, no dice.", "\n", "if", "len", "(", "gold_sets", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# If it's in a gold set, make sure the rest got retrieved.", "\n", "", "gold_set", "=", "gold_sets", "[", "0", "]", "\n", "if", "gold_set", ".", "issubset", "(", "predicted", ")", ":", "\n", "            ", "n_correct", "+=", "1", "\n", "\n", "", "", "return", "n_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.count_correct": [[101, 117], ["metrics.count_rationale_sents", "int", "set", "set"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.count_rationale_sents"], ["", "def", "count_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", ":", "\n", "# If not an evidence doc, no good.", "\n", "    ", "if", "doc_id", "not", "in", "gold", ".", "evidence", ":", "\n", "        ", "return", "0", ",", "0", "\n", "\n", "# Count the number of rationale sentences we get credit for.", "\n", "", "gold_rationales", "=", "[", "set", "(", "x", ")", "for", "x", "in", "gold", ".", "evidence", "[", "doc_id", "]", ".", "rationales", "]", "\n", "n_correct", "=", "count_rationale_sents", "(", "set", "(", "doc_pred", ".", "rationale", ")", ",", "gold_rationales", ")", "\n", "\n", "gold_label", "=", "gold", ".", "evidence", "[", "doc_id", "]", ".", "label", "\n", "\n", "n_correct_selection", "=", "n_correct", "\n", "correct_label", "=", "int", "(", "doc_pred", ".", "label", "==", "gold_label", ")", "\n", "n_correct_label", "=", "correct_label", "*", "n_correct", "\n", "\n", "return", "n_correct_selection", ",", "n_correct_label", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.update_counts_sentence": [[119, 135], ["gold.evidence.values", "pred.predictions.items", "sum", "len", "metrics.count_correct", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.count_correct"], ["", "def", "update_counts_sentence", "(", "pred", ",", "gold", ",", "counts_sentence", ")", ":", "\n", "# Update the gold evidence sentences.", "\n", "    ", "for", "gold_doc", "in", "gold", ".", "evidence", ".", "values", "(", ")", ":", "\n", "        ", "counts_sentence", "[", "\"relevant\"", "]", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_doc", ".", "rationales", "]", ")", "\n", "\n", "", "for", "doc_id", ",", "doc_pred", "in", "pred", ".", "predictions", ".", "items", "(", ")", ":", "\n", "# If it's NEI, skip it.", "\n", "        ", "if", "doc_pred", ".", "label", "==", "Label", ".", "NEI", ":", "\n", "            ", "continue", "\n", "\n", "", "counts_sentence", "[", "\"retrieved\"", "]", "+=", "len", "(", "doc_pred", ".", "rationale", ")", "\n", "n_correct_selection", ",", "n_correct_label", "=", "count_correct", "(", "doc_id", ",", "doc_pred", ",", "gold", ")", "\n", "counts_sentence", "[", "\"correct_selection\"", "]", "+=", "n_correct_selection", "\n", "counts_sentence", "[", "\"correct_label\"", "]", "+=", "n_correct_label", "\n", "\n", "", "return", "counts_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.check_rationale_lengths": [[141, 158], ["predictions.items", "pandas.DataFrame", "warnings.warn", "print", "len", "pd.DataFrame.append", "pd.DataFrame.__repr__"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.ClaimPredictions.__repr__"], ["", "def", "check_rationale_lengths", "(", "preds", ")", ":", "\n", "    ", "bad", "=", "[", "]", "\n", "for", "pred", "in", "preds", ":", "\n", "        ", "claim_id", "=", "pred", ".", "claim_id", "\n", "predictions", "=", "pred", ".", "predictions", "\n", "for", "doc_key", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "n_rationales", "=", "len", "(", "prediction", ".", "rationale", ")", "\n", "if", "n_rationales", ">", "MAX_ABSTRACT_SENTS", ":", "\n", "                ", "to_append", "=", "{", "\"claim_id\"", ":", "claim_id", ",", "\"abstract\"", ":", "doc_key", ",", "\"n_rationales\"", ":", "n_rationales", "}", "\n", "bad", ".", "append", "(", "to_append", ")", "\n", "", "", "", "if", "bad", ":", "\n", "        ", "bad", "=", "pd", ".", "DataFrame", "(", "bad", ")", "\n", "msg", "=", "(", "f\"\\nRationales with more than {MAX_ABSTRACT_SENTS} sentences found.\\n\"", "\n", "f\"The first 3 will be used for abstract-level evaluation\\n\\n\"", "\n", "f\"{bad.__repr__()}\"", ")", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_metrics": [[162, 180], ["collections.Counter", "collections.Counter", "metrics.check_rationale_lengths", "preds.gold.get_claim", "metrics.update_counts_abstract", "metrics.update_counts_sentence", "metrics.compute_f1", "metrics.compute_f1", "metrics.compute_f1", "metrics.compute_f1"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.check_rationale_lengths", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset.get_claim", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.update_counts_abstract", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.update_counts_sentence", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_f1", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_f1", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_f1", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_f1"], ["", "", "def", "compute_metrics", "(", "preds", ")", ":", "\n", "    ", "\"\"\"\n    Compute pipeline metrics based on dataset of predictions.\n    \"\"\"", "\n", "counts_abstract", "=", "Counter", "(", ")", "\n", "counts_sentence", "=", "Counter", "(", ")", "\n", "\n", "check_rationale_lengths", "(", "preds", ")", "\n", "\n", "for", "pred", "in", "preds", ":", "\n", "        ", "gold", "=", "preds", ".", "gold", ".", "get_claim", "(", "pred", ".", "claim_id", ")", "\n", "counts_abstract", "=", "update_counts_abstract", "(", "pred", ",", "gold", ",", "counts_abstract", ")", "\n", "counts_sentence", "=", "update_counts_sentence", "(", "pred", ",", "gold", ",", "counts_sentence", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", "(", "\n", "{", "\"sentence_selection\"", ":", "compute_f1", "(", "counts_sentence", ",", "\"selection\"", ")", ",", "\n", "\"sentence_label\"", ":", "compute_f1", "(", "counts_sentence", ",", "\"label\"", ")", ",", "\n", "\"abstract_label_only\"", ":", "compute_f1", "(", "counts_abstract", ",", "\"label_only\"", ")", ",", "\n", "\"abstract_rationalized\"", ":", "compute_f1", "(", "counts_abstract", ",", "\"rationalized\"", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.__repr__": [[48, 50], ["data.Document.title.upper"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "title", ".", "upper", "(", ")", "+", "\"\\n\"", "+", "\"\\n\"", ".", "join", "(", "[", "\"- \"", "+", "entry", "for", "entry", "in", "self", ".", "sentences", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.__lt__": [[51, 53], ["data.Document.title.__lt__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.__lt__"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "title", ".", "__lt__", "(", "other", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.dump": [[54, 60], ["json.dumps", "data.Document.is_structured"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "res", "=", "{", "\"doc_id\"", ":", "self", ".", "id", ",", "\n", "\"title\"", ":", "self", ".", "title", ",", "\n", "\"abstract\"", ":", "self", ".", "sentences", ",", "\n", "\"structured\"", ":", "self", ".", "is_structured", "(", ")", "}", "\n", "return", "json", ".", "dumps", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.__repr__": [[70, 72], ["len"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"Corpus of {len(self.documents)} documents.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.__getitem__": [[73, 76], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"Get document by index in list.\"", "\n", "return", "self", ".", "documents", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.get_document": [[77, 82], ["len"], "methods", ["None"], ["", "def", "get_document", "(", "self", ",", "doc_id", ")", ":", "\n", "        ", "\"Get document by ID.\"", "\n", "res", "=", "[", "x", "for", "x", "in", "self", ".", "documents", "if", "x", ".", "id", "==", "doc_id", "]", "\n", "assert", "len", "(", "res", ")", "==", "1", "\n", "return", "res", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.from_jsonl": [[83, 92], ["data.load_jsonl", "cls", "data.Document", "documents.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.load_jsonl"], ["", "@", "classmethod", "\n", "def", "from_jsonl", "(", "cls", ",", "corpus_file", ")", ":", "\n", "        ", "corpus", "=", "load_jsonl", "(", "corpus_file", ")", "\n", "documents", "=", "[", "]", "\n", "for", "entry", "in", "corpus", ":", "\n", "            ", "doc", "=", "Document", "(", "entry", "[", "\"doc_id\"", "]", ",", "entry", "[", "\"title\"", "]", ",", "entry", "[", "\"abstract\"", "]", ")", "\n", "documents", ".", "append", "(", "doc", ")", "\n", "\n", "", "return", "cls", "(", "documents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset.__init__": [[102, 105], ["data.Corpus.from_jsonl", "data.GoldDataset._read_claims"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.from_jsonl", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset._read_claims"], ["def", "__init__", "(", "self", ",", "corpus_file", ",", "data_file", ")", ":", "\n", "        ", "self", ".", "corpus", "=", "Corpus", ".", "from_jsonl", "(", "corpus_file", ")", "\n", "self", ".", "claims", "=", "self", ".", "_read_claims", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset.__repr__": [[106, 109], ["data.GoldDataset.corpus.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.ClaimPredictions.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"{self.corpus.__repr__()} {len(self.claims)} claims.\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset.__getitem__": [[110, 112], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "claims", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset._read_claims": [[113, 128], ["data.load_jsonl", "sorted", "copy.deepcopy", "sorted.append", "data.GoldDataset.corpus.get_document", "len", "len", "data.Claim"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.load_jsonl", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.get_document"], ["", "def", "_read_claims", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "\"Read claims from file.\"", "\n", "examples", "=", "load_jsonl", "(", "data_file", ")", "\n", "res", "=", "[", "]", "\n", "for", "this_example", "in", "examples", ":", "\n", "            ", "entry", "=", "copy", ".", "deepcopy", "(", "this_example", ")", "\n", "entry", "[", "\"release\"", "]", "=", "self", "\n", "entry", "[", "\"cited_docs\"", "]", "=", "[", "self", ".", "corpus", ".", "get_document", "(", "doc", ")", "\n", "for", "doc", "in", "entry", "[", "\"cited_doc_ids\"", "]", "]", "\n", "assert", "len", "(", "entry", "[", "\"cited_docs\"", "]", ")", "==", "len", "(", "entry", "[", "\"cited_doc_ids\"", "]", ")", "\n", "del", "entry", "[", "\"cited_doc_ids\"", "]", "\n", "res", ".", "append", "(", "Claim", "(", "**", "entry", ")", ")", "\n", "\n", "", "res", "=", "sorted", "(", "res", ",", "key", "=", "lambda", "x", ":", "x", ".", "id", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset.get_claim": [[129, 134], ["len"], "methods", ["None"], ["", "def", "get_claim", "(", "self", ",", "example_id", ")", ":", "\n", "        ", "\"Get a single claim by ID.\"", "\n", "keep", "=", "[", "x", "for", "x", "in", "self", ".", "claims", "if", "x", ".", "id", "==", "example_id", "]", "\n", "assert", "len", "(", "keep", ")", "==", "1", "\n", "return", "keep", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Claim.__post_init__": [[155, 157], ["data.Claim._format_evidence"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Claim._format_evidence"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "evidence", "=", "self", ".", "_format_evidence", "(", "self", ".", "evidence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Claim._format_evidence": [[158, 179], ["evidence_dict.items", "int", "data.make_label", "data.EvidenceAbstract", "len", "Exception", "set"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.make_label"], ["", "@", "staticmethod", "\n", "def", "_format_evidence", "(", "evidence_dict", ")", ":", "\n", "# This function is needed because the data schema is designed so that", "\n", "# each rationale can have its own support label. But, in the dataset,", "\n", "# all rationales for a given claim / abstract pair all have the same", "\n", "# label. So, we store the label at the \"abstract level\" rather than the", "\n", "# \"rationale level\".", "\n", "        ", "res", "=", "{", "}", "\n", "for", "doc_id", ",", "rationales", "in", "evidence_dict", ".", "items", "(", ")", ":", "\n", "            ", "doc_id", "=", "int", "(", "doc_id", ")", "\n", "labels", "=", "[", "x", "[", "\"label\"", "]", "for", "x", "in", "rationales", "]", "\n", "if", "len", "(", "set", "(", "labels", ")", ")", ">", "1", ":", "\n", "                ", "msg", "=", "(", "\"In this SciFact release, each claim / abstract pair \"", "\n", "\"should only have one label.\"", ")", "\n", "raise", "Exception", "(", "msg", ")", "\n", "", "label", "=", "make_label", "(", "labels", "[", "0", "]", ")", "\n", "rationale_sents", "=", "[", "x", "[", "\"sentences\"", "]", "for", "x", "in", "rationales", "]", "\n", "this_abstract", "=", "EvidenceAbstract", "(", "doc_id", ",", "label", ",", "rationale_sents", ")", "\n", "res", "[", "doc_id", "]", "=", "this_abstract", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Claim.__repr__": [[180, 183], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"Example {self.id}: {self.claim}\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Claim.pretty_print": [[184, 202], ["data.Claim.__repr__", "print", "print", "data.Claim.evidence.items", "print", "data.Claim.release.corpus.get_document", "print", "enumerate", "print", "print", "enumerate"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.ClaimPredictions.__repr__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.get_document"], ["", "def", "pretty_print", "(", "self", ",", "evidence_doc_id", "=", "None", ",", "file", "=", "None", ")", ":", "\n", "        ", "\"Pretty-print the claim, together with all evidence.\"", "\n", "msg", "=", "self", ".", "__repr__", "(", ")", "\n", "print", "(", "msg", ",", "file", "=", "file", ")", "\n", "# Print the evidence", "\n", "print", "(", "\"\\nEvidence sets:\"", ",", "file", "=", "file", ")", "\n", "for", "doc_id", ",", "evidence", "in", "self", ".", "evidence", ".", "items", "(", ")", ":", "\n", "# If asked for a specific evidence doc, only show that one.", "\n", "            ", "if", "evidence_doc_id", "is", "not", "None", "and", "doc_id", "!=", "evidence_doc_id", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"\\n\"", "+", "20", "*", "\"#\"", "+", "\"\\n\"", ",", "file", "=", "file", ")", "\n", "ev_doc", "=", "self", ".", "release", ".", "corpus", ".", "get_document", "(", "doc_id", ")", "\n", "print", "(", "f\"{doc_id}: {evidence.label.name}\"", ",", "file", "=", "file", ")", "\n", "for", "i", ",", "sents", "in", "enumerate", "(", "evidence", ".", "rationales", ")", ":", "\n", "                ", "print", "(", "f\"Set {i}:\"", ",", "file", "=", "file", ")", "\n", "kept", "=", "[", "sent", "for", "i", ",", "sent", "in", "enumerate", "(", "ev_doc", ".", "sentences", ")", "if", "i", "in", "sents", "]", "\n", "for", "entry", "in", "kept", ":", "\n", "                    ", "print", "(", "f\"\\t- {entry}\"", ",", "file", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset.__init__": [[212, 219], ["data.PredictedDataset._read_predictions"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset._read_predictions"], ["def", "__init__", "(", "self", ",", "gold", ",", "prediction_file", ")", ":", "\n", "        ", "\"\"\"\n        Takes a GoldDataset, as well as files with rationale and label\n        predictions.\n        \"\"\"", "\n", "self", ".", "gold", "=", "gold", "\n", "self", ".", "predictions", "=", "self", ".", "_read_predictions", "(", "prediction_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset.__getitem__": [[220, 222], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "predictions", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset.__repr__": [[223, 226], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"Predictions for {len(self.predictions)} claims.\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset._read_predictions": [[227, 236], ["data.load_jsonl", "data.PredictedDataset._parse_prediction", "res.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.load_jsonl", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset._parse_prediction"], ["", "def", "_read_predictions", "(", "self", ",", "prediction_file", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "\n", "predictions", "=", "load_jsonl", "(", "prediction_file", ")", "\n", "for", "pred", "in", "predictions", ":", "\n", "            ", "prediction", "=", "self", ".", "_parse_prediction", "(", "pred", ")", "\n", "res", ".", "append", "(", "prediction", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.PredictedDataset._parse_prediction": [[237, 255], ["predicted_evidence.items", "data.PredictedDataset.gold.get_claim", "data.ClaimPredictions", "data.PredictedAbstract", "int", "data.make_label", "int"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.GoldDataset.get_claim", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.make_label"], ["", "def", "_parse_prediction", "(", "self", ",", "pred_dict", ")", ":", "\n", "        ", "claim_id", "=", "pred_dict", "[", "\"id\"", "]", "\n", "predicted_evidence", "=", "pred_dict", "[", "\"evidence\"", "]", "\n", "\n", "res", "=", "{", "}", "\n", "\n", "# Predictions should never be NEI; there should only be predictions for", "\n", "# the abstracts that contain evidence.", "\n", "for", "key", ",", "this_prediction", "in", "predicted_evidence", ".", "items", "(", ")", ":", "\n", "            ", "label", "=", "this_prediction", "[", "\"label\"", "]", "\n", "evidence", "=", "this_prediction", "[", "\"sentences\"", "]", "\n", "pred", "=", "PredictedAbstract", "(", "int", "(", "key", ")", ",", "\n", "make_label", "(", "label", ",", "allow_NEI", "=", "False", ")", ",", "\n", "evidence", ")", "\n", "res", "[", "int", "(", "key", ")", "]", "=", "pred", "\n", "\n", "", "gold_claim", "=", "self", ".", "gold", ".", "get_claim", "(", "claim_id", ")", "\n", "return", "ClaimPredictions", "(", "claim_id", ",", "res", ",", "gold_claim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.ClaimPredictions.__repr__": [[272, 275], ["None"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "f\"Predictions for {self.claim_id}: {self.gold.claim}\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.ClaimPredictions.pretty_print": [[276, 293], ["data.ClaimPredictions.__repr__", "print", "print", "data.ClaimPredictions.predictions.items", "print", "data.ClaimPredictions.gold.release.corpus.get_document", "print", "print", "enumerate"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.ClaimPredictions.__repr__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Corpus.get_document"], ["", "def", "pretty_print", "(", "self", ",", "evidence_doc_id", "=", "None", ",", "file", "=", "None", ")", ":", "\n", "        ", "msg", "=", "self", ".", "__repr__", "(", ")", "\n", "print", "(", "msg", ",", "file", "=", "file", ")", "\n", "# Print the evidence", "\n", "print", "(", "\"\\nEvidence sets:\"", ",", "file", "=", "file", ")", "\n", "for", "doc_id", ",", "prediction", "in", "self", ".", "predictions", ".", "items", "(", ")", ":", "\n", "# If asked for a specific evidence doc, only show that one.", "\n", "            ", "if", "evidence_doc_id", "is", "not", "None", "and", "doc_id", "!=", "evidence_doc_id", ":", "\n", "                ", "continue", "\n", "", "print", "(", "\"\\n\"", "+", "20", "*", "\"#\"", "+", "\"\\n\"", ",", "file", "=", "file", ")", "\n", "ev_doc", "=", "self", ".", "gold", ".", "release", ".", "corpus", ".", "get_document", "(", "doc_id", ")", "\n", "print", "(", "f\"{doc_id}: {prediction.label.name}\"", ",", "file", "=", "file", ")", "\n", "# Print the predicted rationale.", "\n", "sents", "=", "prediction", ".", "rationale", "\n", "kept", "=", "[", "sent", "for", "i", ",", "sent", "in", "enumerate", "(", "ev_doc", ".", "sentences", ")", "if", "i", "in", "sents", "]", "\n", "for", "entry", "in", "kept", ":", "\n", "                ", "print", "(", "f\"\\t- {entry}\"", ",", "file", "=", "file", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.load_jsonl": [[16, 18], ["json.loads", "open"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "load_jsonl", "(", "fname", ")", ":", "\n", "    ", "return", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "open", "(", "fname", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.make_label": [[26, 36], ["ValueError"], "function", ["None"], ["", "def", "make_label", "(", "label_str", ",", "allow_NEI", "=", "True", ")", ":", "\n", "    ", "lookup", "=", "{", "\"SUPPORT\"", ":", "Label", ".", "SUPPORTS", ",", "\n", "\"NOT_ENOUGH_INFO\"", ":", "Label", ".", "NEI", ",", "\n", "\"CONTRADICT\"", ":", "Label", ".", "REFUTES", "}", "\n", "\n", "res", "=", "lookup", "[", "label_str", "]", "\n", "if", "(", "not", "allow_NEI", ")", "and", "(", "res", "is", "Label", ".", "NEI", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"An NEI was given.\"", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.rationale_selection.transformer.output_k": [[57, 79], ["jsonlines.open", "jsonlines.open.write", "result[].items", "list", "list", "list", "enumerate", "sorted", "sorted", "result[].items", "list.append", "[].tolist", "sorted.append", "sentence_scores.argsort"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "", "def", "output_k", "(", "output_path", ",", "k", "=", "None", ")", ":", "\n", "    ", "output", "=", "jsonlines", ".", "open", "(", "output_path", ",", "'w'", ")", "\n", "for", "result", "in", "results", ":", "\n", "        ", "if", "k", ":", "\n", "            ", "evidence", "=", "{", "doc_id", ":", "list", "(", "sorted", "(", "sentence_scores", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", ")", ")", "\n", "for", "doc_id", ",", "sentence_scores", "in", "result", "[", "'evidence_scores'", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "evidence", "=", "{", "}", "\n", "for", "doc_id", ",", "sentence_scores", "in", "result", "[", "'evidence_scores'", "]", ".", "items", "(", ")", ":", "\n", "                ", "score_list", "=", "list", "(", ")", "\n", "evidence_list", "=", "list", "(", ")", "\n", "for", "step", ",", "score", "in", "enumerate", "(", "sentence_scores", ")", ":", "\n", "                    ", "if", "score", ">", "args", ".", "threshold", ":", "\n", "                        ", "score_list", ".", "append", "(", "[", "step", ",", "score", "]", ")", "\n", "", "", "score_list", "=", "sorted", "(", "score_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "for", "id", ",", "score", "in", "score_list", "[", ":", "3", "]", ":", "\n", "                    ", "evidence_list", ".", "append", "(", "id", ")", "\n", "", "evidence", "[", "doc_id", "]", "=", "evidence_list", "\n", "\n", "", "", "output", ".", "write", "(", "{", "\n", "'claim_id'", ":", "result", "[", "'claim_id'", "]", ",", "\n", "'evidence'", ":", "evidence", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.inference.dev": [[13, 36], ["list", "enumerate", "doc_scores[].squeeze", "doc_scores[].squeeze.detach().cpu().tolist", "zip", "open", "torch.no_grad", "model", "rst_dict[].append", "sorted", "fout.write", "doc_scores[].squeeze.detach().cpu", "list.append", "data[].append", "json.dumps", "doc_scores[].squeeze.detach"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["def", "dev", "(", "args", ",", "model", ",", "dev_data", ")", ":", "\n", "    ", "rst_dict", "=", "{", "}", "\n", "qid_record", "=", "list", "(", ")", "\n", "for", "s", ",", "batch", "in", "enumerate", "(", "dev_data", ")", ":", "\n", "        ", "query_ids", ",", "doc_ids", ",", "input_ids", ",", "input_masks", ",", "segment_ids", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "doc_scores", ",", "_", "=", "model", "(", "input_ids", ",", "input_masks", ",", "segment_ids", ")", "\n", "\n", "", "doc_scores", "=", "doc_scores", "[", ":", ",", "1", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "d_scores", "=", "doc_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "(", "q_id", ",", "d_id", ",", "d_s", ")", "in", "zip", "(", "query_ids", ",", "doc_ids", ",", "d_scores", ")", ":", "\n", "            ", "if", "q_id", "not", "in", "rst_dict", ":", "\n", "                ", "rst_dict", "[", "q_id", "]", "=", "[", "]", "\n", "qid_record", ".", "append", "(", "q_id", ")", "\n", "", "rst_dict", "[", "q_id", "]", ".", "append", "(", "[", "d_id", ",", "d_s", "]", ")", "\n", "", "", "with", "open", "(", "args", ".", "outpath", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "for", "qid", "in", "qid_record", ":", "\n", "            ", "dids", "=", "rst_dict", "[", "qid", "]", "\n", "dids", "=", "sorted", "(", "dids", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "data", "=", "{", "\"claim_id\"", ":", "qid", ",", "\"doc_ids\"", ":", "[", "]", "}", "\n", "for", "did", "in", "dids", "[", ":", "3", "]", ":", "\n", "                ", "data", "[", "\"doc_ids\"", "]", ".", "append", "(", "did", "[", "0", "]", ")", "\n", "", "fout", ".", "write", "(", "json", ".", "dumps", "(", "data", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.inference.main": [[41, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logger.info", "logger.info", "AutoTokenizer.from_pretrained", "bert_dataloader.BertDataLoaderDev", "scibert.SciBertForRanking", "torch.load", "scibert.SciBertForRanking.load_state_dict", "scibert.SciBertForRanking.cuda", "logger.info", "inference.dev", "logger.info", "logging.StreamHandler"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.inference.dev"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-checkpoint'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-corpus'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-abstract_retrieval'", ")", "\n", "parser", ".", "add_argument", "(", "'-dataset'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-outpath'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-max_query_len'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'-max_seq_len'", ",", "type", "=", "int", ",", "default", "=", "150", ")", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", ")", "]", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'[%(asctime)s] %(levelname)s: %(message)s'", ",", "level", "=", "logging", ".", "DEBUG", ",", "\n", "datefmt", "=", "'%d-%m-%Y %H:%M:%S'", ",", "handlers", "=", "handlers", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "logger", ".", "info", "(", "'Start training!'", ")", "\n", "\n", "\n", "bert_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "'allenai/scibert_scivocab_uncased'", ")", "\n", "dev_data", "=", "BertDataLoaderDev", "(", "bert_tokenizer", ",", "args", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "model", "=", "SciBertForRanking", "(", ")", "\n", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "logger", ".", "info", "(", "'initilization done!'", ")", "\n", "dev", "(", "args", ",", "model", ",", "dev_data", ")", "\n", "logger", ".", "info", "(", "'inference done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.__init__": [[39, 48], ["bert_dataloader.BertDataLoaderDev.read_file", "len", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.read_file"], ["def", "__init__", "(", "self", ",", "tokenizer", ",", "args", ",", "batch_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "max_query_len", "=", "args", ".", "max_query_len", "\n", "self", ".", "max_seq_len", "=", "args", ".", "max_seq_len", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "data", "=", "self", ".", "read_file", "(", "args", ".", "corpus", ",", "args", ".", "abstract_retrieval", ",", "args", ".", "dataset", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "total_step", "=", "np", ".", "ceil", "(", "self", ".", "total_num", "*", "1.0", "/", "batch_size", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.read_file": [[50, 73], ["jsonlines.open", "jsonlines.open", "list", "zip", "jsonlines.open", "bert_dataloader.BertDataLoaderDev.tokenizer.tokenize", "bert_dataloader.BertDataLoaderDev.tokenizer.tokenize", "all_data.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "read_file", "(", "self", ",", "corpus", ",", "abstract_retrieval", ",", "dataset", ")", ":", "\n", "        ", "all_data", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "abstract_retrieval", "=", "jsonlines", ".", "open", "(", "abstract_retrieval", ")", "\n", "dataset", "=", "jsonlines", ".", "open", "(", "dataset", ")", "\n", "for", "data", ",", "retrieval", "in", "list", "(", "zip", "(", "dataset", ",", "abstract_retrieval", ")", ")", ":", "\n", "            ", "assert", "data", "[", "'id'", "]", "==", "retrieval", "[", "'claim_id'", "]", "\n", "claim", "=", "data", "[", "'claim'", "]", "\n", "for", "doc_id", "in", "retrieval", "[", "'doc_ids'", "]", ":", "\n", "                ", "doc", "=", "corpus", "[", "doc_id", "]", "\n", "sentences", "=", "doc", "[", "'abstract'", "]", "\n", "title", "=", "doc", "[", "\"title\"", "]", "\n", "abstract", "=", "\" \"", ".", "join", "(", "sentences", ")", "\n", "abstract", "=", "title", "+", "\" \"", "+", "abstract", "\n", "query_toks", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "claim", ")", "\n", "doc_toks", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "abstract", ")", "\n", "\n", "all_data", ".", "append", "(", "{", "\n", "'query_id'", ":", "retrieval", "[", "'claim_id'", "]", ",", "\n", "'doc_id'", ":", "doc_id", ",", "\n", "'query_toks'", ":", "query_toks", ",", "\n", "'doc_toks'", ":", "doc_toks", "}", ")", "\n", "", "", "return", "all_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.__iter__": [[75, 77], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.__next__": [[78, 80], ["bert_dataloader.BertDataLoaderDev.next"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.__len__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.BertDataLoaderDev.next": [[84, 114], ["range", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "StopIteration", "min", "query_ids.append", "doc_ids.append", "bert_dataloader.bert_sentence_pair_tokenzier", "torch.autograd.Variable().cuda.append", "torch.autograd.Variable().cuda.append", "torch.autograd.Variable().cuda.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.bert_sentence_pair_tokenzier"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "''' Get the next batch '''", "\n", "\n", "if", "self", ".", "step", "<", "self", ".", "total_step", ":", "\n", "            ", "query_ids", ",", "doc_ids", ",", "input_ids", ",", "input_masks", ",", "segment_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "step", "*", "self", ".", "batch_size", ",", "min", "(", "(", "self", ".", "step", "+", "1", ")", "*", "self", ".", "batch_size", ",", "self", ".", "total_num", ")", ")", ":", "\n", "                ", "query_ids", ".", "append", "(", "self", ".", "data", "[", "i", "]", "[", "'query_id'", "]", ")", "\n", "doc_ids", ".", "append", "(", "self", ".", "data", "[", "i", "]", "[", "'doc_id'", "]", ")", "\n", "\n", "query_toks", "=", "self", ".", "data", "[", "i", "]", "[", "'query_toks'", "]", "[", ":", "self", ".", "max_query_len", "]", "\n", "doc_toks", "=", "self", ".", "data", "[", "i", "]", "[", "'doc_toks'", "]", "[", ":", "self", ".", "max_seq_len", "]", "\n", "\n", "max_len", "=", "self", ".", "max_seq_len", "+", "self", ".", "max_query_len", "+", "3", "\n", "input_id", ",", "input_mask", ",", "segment_id", "=", "bert_sentence_pair_tokenzier", "(", "query_toks", ",", "doc_toks", ",", "self", ".", "tokenizer", ",", "max_len", ")", "\n", "\n", "input_ids", ".", "append", "(", "input_id", ")", "\n", "input_masks", ".", "append", "(", "input_mask", ")", "\n", "segment_ids", ".", "append", "(", "segment_id", ")", "\n", "\n", "", "input_ids", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "input_ids", ")", ")", ".", "cuda", "(", ")", "\n", "input_masks", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "input_masks", ")", ")", ".", "cuda", "(", ")", "\n", "segment_ids", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "segment_ids", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "return", "(", "query_ids", ",", "doc_ids", ",", "input_ids", ",", "input_masks", ",", "segment_ids", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "=", "0", "\n", "raise", "StopIteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.bert_dataloader.bert_sentence_pair_tokenzier": [[9, 34], ["tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["def", "bert_sentence_pair_tokenzier", "(", "q_tokens", ",", "p_tokens", ",", "tokenizer", ",", "max_seq_length", ")", ":", "\n", "    ", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "tokens", "=", "tokens", "+", "q_tokens", "\n", "segment_ids", "=", "segment_ids", "+", "[", "0", "]", "*", "len", "(", "q_tokens", ")", "\n", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "tokens", "=", "tokens", "+", "p_tokens", "\n", "segment_ids", "=", "segment_ids", "+", "[", "1", "]", "*", "len", "(", "p_tokens", ")", "\n", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "input_ids", "=", "input_ids", "+", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n", "input_mask", "=", "input_mask", "+", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_mask", ")", ")", "\n", "segment_ids", "=", "segment_ids", "+", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "segment_ids", ")", ")", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "return", "input_ids", ",", "input_mask", ",", "segment_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.scibert.SciBertForRanking.__init__": [[6, 11], ["torch.Module.__init__", "AutoModel.from_pretrained", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SciBertForRanking", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bert", "=", "AutoModel", ".", "from_pretrained", "(", "'allenai/scibert_scivocab_uncased'", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "2", ")", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.abstract_rerank.scibert.SciBertForRanking.forward": [[13, 20], ["scibert.SciBertForRanking.bert", "scibert.SciBertForRanking.classifier().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scibert.SciBertForRanking.classifier", "raw_score.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "raw_score", "=", "None", ")", ":", "\n", "        ", "_", ",", "features", "=", "self", ".", "bert", "(", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "token_type_ids", "=", "token_type_ids", ")", "\n", "score", "=", "self", ".", "classifier", "(", "features", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "score", "=", "F", ".", "softmax", "(", "score", ",", "-", "1", ")", "\n", "if", "raw_score", "is", "not", "None", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "raw_score", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "", "return", "score", ",", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.pipeline.merge_predictions.get_args": [[8, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "desc", "=", "\"Merge predictions of rationale selection and label prediction modules.\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "desc", ")", "\n", "parser", ".", "add_argument", "(", "\"--rationale-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"File with rationale predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--label-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"File with label predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--result-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"File to write merged results to.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.pipeline.merge_predictions.merge_one": [[21, 48], ["sorted", "evidence.keys", "labels.keys", "ValueError", "evidence.keys"], "function", ["None"], ["", "def", "merge_one", "(", "rationale", ",", "label", ")", ":", "\n", "    ", "\"\"\"\n    Merge a single rationale / label pair. Throw out NEI predictions.\n    \"\"\"", "\n", "evidence", "=", "rationale", "[", "\"evidence\"", "]", "\n", "labels", "=", "label", "[", "\"labels\"", "]", "\n", "claim_id", "=", "rationale", "[", "\"claim_id\"", "]", "\n", "\n", "# Check that the documents match.", "\n", "if", "evidence", ".", "keys", "(", ")", "!=", "labels", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Evidence docs for rationales and labels don't match for claim {claim_id}.\"", ")", "\n", "\n", "", "docs", "=", "sorted", "(", "evidence", ".", "keys", "(", ")", ")", "\n", "\n", "final_predictions", "=", "{", "}", "\n", "\n", "for", "this_doc", "in", "docs", ":", "\n", "        ", "this_evidence", "=", "evidence", "[", "this_doc", "]", "\n", "this_label", "=", "labels", "[", "this_doc", "]", "[", "\"label\"", "]", "\n", "\n", "if", "this_label", "!=", "NEI_LABEL", ":", "\n", "            ", "final_predictions", "[", "this_doc", "]", "=", "{", "\"sentences\"", ":", "this_evidence", ",", "\n", "\"label\"", ":", "this_label", "}", "\n", "\n", "", "", "res", "=", "{", "\"id\"", ":", "claim_id", ",", "\n", "\"evidence\"", ":", "final_predictions", "}", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.pipeline.merge_predictions.merge": [[50, 69], ["json.loads", "json.loads", "ValueError", "merge_predictions.merge_one", "open", "open", "open", "zip", "print", "json.dumps"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.merge_one", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "merge", "(", "rationale_file", ",", "label_file", ",", "result_file", ")", ":", "\n", "    ", "\"\"\"\n    Merge rationales with predicted labels.\n    \"\"\"", "\n", "rationales", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "open", "(", "rationale_file", ")", "]", "\n", "labels", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "open", "(", "label_file", ")", "]", "\n", "\n", "# Check the ordering", "\n", "rationale_ids", "=", "[", "x", "[", "\"claim_id\"", "]", "for", "x", "in", "rationales", "]", "\n", "label_ids", "=", "[", "x", "[", "\"claim_id\"", "]", "for", "x", "in", "labels", "]", "\n", "if", "rationale_ids", "!=", "label_ids", ":", "\n", "        ", "raise", "ValueError", "(", "\"Claim ID's for label and rationale file don't match.\"", ")", "\n", "\n", "", "res", "=", "[", "merge_one", "(", "rationale", ",", "label", ")", "\n", "for", "rationale", ",", "label", "in", "zip", "(", "rationales", ",", "labels", ")", "]", "\n", "\n", "with", "open", "(", "result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "entry", "in", "res", ":", "\n", "            ", "print", "(", "json", ".", "dumps", "(", "entry", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.pipeline.merge_predictions.main": [[71, 74], ["merge_predictions.get_args", "merge_predictions.merge", "vars"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.get_args", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.merge"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "merge", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.pipeline.scifact_eval.get_args": [[17, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Evaluate SciFact predictions.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--gold'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The gold labels.'", ")", "\n", "parser", ".", "add_argument", "(", "'--corpus'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The corpus of documents.'", ")", "\n", "parser", ".", "add_argument", "(", "'--prediction'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The predictions.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'If provided, save metrics to this file.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.pipeline.scifact_eval.main": [[33, 45], ["scifact_eval.get_args", "lib.data.GoldDataset", "lib.data.PredictedDataset", "lib.metrics.compute_metrics", "print", "open", "json.dump", "metrics.compute_metrics.to_dict"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.get_args", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_metrics", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.dump", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "data", "=", "GoldDataset", "(", "args", ".", "corpus", ",", "args", ".", "gold", ")", "\n", "predictions", "=", "PredictedDataset", "(", "data", ",", "args", ".", "prediction", ")", "\n", "\n", "res", "=", "metrics", ".", "compute_metrics", "(", "predictions", ")", "\n", "if", "args", ".", "output", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "output", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "res", ".", "to_dict", "(", ")", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.evaluate.rationale_selection.is_correct": [[15, 30], ["all"], "function", ["None"], ["def", "is_correct", "(", "pred_sentence", ",", "pred_sentences", ",", "gold_sets", ")", ":", "\n", "    ", "\"\"\"\n    A predicted sentence is correctly identified if it is part of a gold\n    rationale, and all other sentences in the gold rationale are also\n    predicted rationale sentences.\n    \"\"\"", "\n", "for", "gold_set", "in", "gold_sets", ":", "\n", "        ", "gold_sents", "=", "gold_set", "[", "\"sentences\"", "]", "\n", "if", "pred_sentence", "in", "gold_sents", ":", "\n", "            ", "if", "all", "(", "[", "x", "in", "pred_sentences", "for", "x", "in", "gold_sents", "]", ")", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.evaluate.pipeline.get_args": [[18, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Evaluate SciFact predictions.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--gold'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The gold labels.'", ")", "\n", "parser", ".", "add_argument", "(", "'--corpus'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The corpus of documents.'", ")", "\n", "parser", ".", "add_argument", "(", "'--prediction'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'The predictions.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'If provided, save metrics to this file.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.evaluate.pipeline.main": [[34, 46], ["pipeline.get_args", "lib.data.GoldDataset", "lib.data.PredictedDataset", "lib.metrics.compute_metrics", "print", "open", "json.dump", "metrics.compute_metrics.to_dict"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.get_args", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.metrics.compute_metrics", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.lib.data.Document.dump", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.to_dict"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "data", "=", "GoldDataset", "(", "args", ".", "corpus", ",", "args", ".", "gold", ")", "\n", "predictions", "=", "PredictedDataset", "(", "data", ",", "args", ".", "prediction", ")", "\n", "\n", "res", "=", "metrics", ".", "compute_metrics", "(", "predictions", ")", "\n", "if", "args", ".", "output", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "output", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "res", ".", "to_dict", "(", ")", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.label_prediction_transformer.encode": [[33, 55], ["tokenizer.batch_encode_plus", "encoded_dict[].size", "tokenizer.batch_encode_plus", "tensor.to", "list", "tokenizer.batch_encode_plus.items", "zip"], "function", ["None"], ["def", "encode", "(", "sentences", ",", "claims", ")", ":", "\n", "    ", "text", "=", "{", "\n", "\"claim_and_rationale\"", ":", "list", "(", "zip", "(", "sentences", ",", "claims", ")", ")", ",", "\n", "\"only_claim\"", ":", "claims", ",", "\n", "\"only_rationale\"", ":", "sentences", "\n", "}", "[", "args", ".", "mode", "]", "\n", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "text", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", "\n", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "512", ":", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "text", ",", "\n", "max_length", "=", "512", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "truncation_strategy", "=", "'only_first'", ",", "\n", "return_tensors", "=", "'pt'", "\n", ")", "\n", "", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "\n", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "return", "encoded_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.rationale_selection_transformer.output_k": [[58, 70], ["jsonlines.open", "jsonlines.open.write", "list", "[].tolist", "sorted", "result[].items", "result[].items", "[].tolist", "sentence_scores.argsort"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.write"], ["", "", "def", "output_k", "(", "output_path", ",", "k", "=", "None", ")", ":", "\n", "    ", "output", "=", "jsonlines", ".", "open", "(", "output_path", ",", "'w'", ")", "\n", "for", "result", "in", "results", ":", "\n", "        ", "if", "k", ":", "\n", "            ", "evidence", "=", "{", "doc_id", ":", "list", "(", "sorted", "(", "sentence_scores", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", ")", ")", "\n", "for", "doc_id", ",", "sentence_scores", "in", "result", "[", "'evidence_scores'", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "evidence", "=", "{", "doc_id", ":", "(", "sentence_scores", ">=", "args", ".", "threshold", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "for", "doc_id", ",", "sentence_scores", "in", "result", "[", "'evidence_scores'", "]", ".", "items", "(", ")", "}", "\n", "", "output", ".", "write", "(", "{", "\n", "'claim_id'", ":", "result", "[", "'claim_id'", "]", ",", "\n", "'evidence'", ":", "evidence", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.get_args": [[8, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "desc", "=", "\"Merge predictions of rationale selection and label prediction modules.\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "desc", ")", "\n", "parser", ".", "add_argument", "(", "\"--rationale-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"File with rationale predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--label-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"File with label predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--result-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"File to write merged results to.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.merge_one": [[21, 48], ["sorted", "evidence.keys", "labels.keys", "ValueError", "evidence.keys"], "function", ["None"], ["", "def", "merge_one", "(", "rationale", ",", "label", ")", ":", "\n", "    ", "\"\"\"\n    Merge a single rationale / label pair. Throw out NEI predictions.\n    \"\"\"", "\n", "evidence", "=", "rationale", "[", "\"evidence\"", "]", "\n", "labels", "=", "label", "[", "\"labels\"", "]", "\n", "claim_id", "=", "rationale", "[", "\"claim_id\"", "]", "\n", "\n", "# Check that the documents match.", "\n", "if", "evidence", ".", "keys", "(", ")", "!=", "labels", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Evidence docs for rationales and labels don't match for claim {claim_id}.\"", ")", "\n", "\n", "", "docs", "=", "sorted", "(", "evidence", ".", "keys", "(", ")", ")", "\n", "\n", "final_predictions", "=", "{", "}", "\n", "\n", "for", "this_doc", "in", "docs", ":", "\n", "        ", "this_evidence", "=", "evidence", "[", "this_doc", "]", "\n", "this_label", "=", "labels", "[", "this_doc", "]", "[", "\"label\"", "]", "\n", "\n", "if", "this_label", "!=", "NEI_LABEL", ":", "\n", "            ", "final_predictions", "[", "this_doc", "]", "=", "{", "\"sentences\"", ":", "this_evidence", ",", "\n", "\"label\"", ":", "this_label", "}", "\n", "\n", "", "", "res", "=", "{", "\"id\"", ":", "claim_id", ",", "\n", "\"evidence\"", ":", "final_predictions", "}", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.merge": [[50, 69], ["json.loads", "json.loads", "ValueError", "merge_predictions.merge_one", "open", "open", "open", "zip", "print", "json.dumps"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.merge_one", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "merge", "(", "rationale_file", ",", "label_file", ",", "result_file", ")", ":", "\n", "    ", "\"\"\"\n    Merge rationales with predicted labels.\n    \"\"\"", "\n", "rationales", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "open", "(", "rationale_file", ")", "]", "\n", "labels", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "open", "(", "label_file", ")", "]", "\n", "\n", "# Check the ordering", "\n", "rationale_ids", "=", "[", "x", "[", "\"claim_id\"", "]", "for", "x", "in", "rationales", "]", "\n", "label_ids", "=", "[", "x", "[", "\"claim_id\"", "]", "for", "x", "in", "labels", "]", "\n", "if", "rationale_ids", "!=", "label_ids", ":", "\n", "        ", "raise", "ValueError", "(", "\"Claim ID's for label and rationale file don't match.\"", ")", "\n", "\n", "", "res", "=", "[", "merge_one", "(", "rationale", ",", "label", ")", "\n", "for", "rationale", ",", "label", "in", "zip", "(", "rationales", ",", "labels", ")", "]", "\n", "\n", "with", "open", "(", "result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "entry", "in", "res", ":", "\n", "            ", "print", "(", "json", ".", "dumps", "(", "entry", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.main": [[71, 74], ["merge_predictions.get_args", "merge_predictions.merge", "vars"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.get_args", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.inference.merge_predictions.merge"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "merge", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.ComputeBioSentVecAbstractEmbedding.preprocess_sentence": [[12, 22], ["text.lower.replace", "text.lower.replace", "text.lower.replace", "text.lower.replace", "text.lower.lower", "nltk.word_tokenize"], "function", ["None"], ["def", "preprocess_sentence", "(", "text", ")", ":", "\n", "    ", "text", "=", "text", ".", "replace", "(", "'/'", ",", "' / '", ")", "\n", "text", "=", "text", ".", "replace", "(", "'.-'", ",", "' .- '", ")", "\n", "text", "=", "text", ".", "replace", "(", "'.'", ",", "' . '", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\\''", ",", "' \\' '", ")", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "\n", "tokens", "=", "[", "token", "for", "token", "in", "word_tokenize", "(", "text", ")", "if", "token", "not", "in", "punctuation", "and", "token", "not", "in", "stop_words", "]", "\n", "\n", "return", "' '", ".", "join", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.TimeDistributed.__init__": [[21, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "batch_first", "=", "False", ")", ":", "\n", "        ", "super", "(", "TimeDistributed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.TimeDistributed.forward": [[26, 43], ["x.contiguous().view", "paragraph_model_dynamic.TimeDistributed.module", "len", "paragraph_model_dynamic.TimeDistributed.module", "x.size", "y.view.view.contiguous().view", "y.view.view.view", "x.size", "x.contiguous", "x.size", "y.view.view.size", "x.size", "y.view.view.size", "y.view.view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "<=", "2", ":", "\n", "            ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n", "# Squash samples and timesteps into a single axis", "\n", "", "x_reshape", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "# (samples * timesteps, input_size)", "\n", "\n", "y", "=", "self", ".", "module", "(", "x_reshape", ")", "\n", "\n", "# We have to reshape Y", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "y", ".", "size", "(", "-", "1", ")", ")", "# (samples, timesteps, output_size)", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "1", ")", ",", "y", ".", "size", "(", "-", "1", ")", ")", "# (timesteps, samples, output_size)", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.TimeDistributedDense.__init__": [[45, 51], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "paragraph_model_dynamic.TimeDistributed"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "INPUT_SIZE", ",", "OUTPUT_SIZE", ")", ":", "\n", "        ", "super", "(", "TimeDistributedDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "INPUT_SIZE", "\n", "self", ".", "output_size", "=", "OUTPUT_SIZE", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "INPUT_SIZE", ",", "OUTPUT_SIZE", ",", "bias", "=", "True", ")", "\n", "self", ".", "timedistributedlayer", "=", "TimeDistributed", "(", "self", ".", "linear", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.TimeDistributedDense.forward": [[51, 55], ["paragraph_model_dynamic.TimeDistributedDense.timedistributedlayer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: (BATCH_SIZE, ARRAY_LEN, INPUT_SIZE)", "\n", "\n", "        ", "return", "self", ".", "timedistributedlayer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.ClassificationHead.__init__": [[59, 64], ["torch.Module.__init__", "paragraph_model_dynamic.TimeDistributedDense", "torch.Dropout", "torch.Dropout", "torch.Dropout", "paragraph_model_dynamic.TimeDistributedDense"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "num_labels", ",", "hidden_dropout_prob", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "TimeDistributedDense", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "TimeDistributedDense", "(", "hidden_size", ",", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.ClassificationHead.forward": [[65, 72], ["paragraph_model_dynamic.ClassificationHead.dropout", "paragraph_model_dynamic.ClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "paragraph_model_dynamic.ClassificationHead.dropout", "paragraph_model_dynamic.ClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.WordAttention.__init__": [[81, 87], ["torch.Module.__init__", "paragraph_model_dynamic.TimeDistributedDense", "torch.Dropout", "torch.Dropout", "torch.Dropout", "paragraph_model_dynamic.TimeDistributedDense"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "INPUT_SIZE", ",", "PROJ_SIZE", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "WordAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "self", ".", "att_proj", "=", "TimeDistributedDense", "(", "INPUT_SIZE", ",", "PROJ_SIZE", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "att_scorer", "=", "TimeDistributedDense", "(", "PROJ_SIZE", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.WordAttention.forward": [[88, 100], ["paragraph_model_dynamic.WordAttention.att_proj", "paragraph_model_dynamic.WordAttention.dropout", "paragraph_model_dynamic.WordAttention.att_scorer().squeeze().view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.view", "torch.where.view", "torch.where.view", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "out.view.view.view", "paragraph_model_dynamic.WordAttention.dropout", "paragraph_model_dynamic.WordAttention.activation", "x.size", "x.size", "x.size", "paragraph_model_dynamic.WordAttention.masked_fill", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where.size", "torch.where.size", "torch.where.size", "x.size", "x.size", "x.size", "x.view", "paragraph_model_dynamic.WordAttention.att_scorer().squeeze", "float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.size", "torch.where.view.unsqueeze", "x.view", "paragraph_model_dynamic.WordAttention.att_scorer", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "token_mask", ")", ":", "\n", "        ", "proj_input", "=", "self", ".", "att_proj", "(", "self", ".", "dropout", "(", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ")", ")", "\n", "proj_input", "=", "self", ".", "dropout", "(", "self", ".", "activation", "(", "proj_input", ")", ")", "\n", "raw_att_scores", "=", "self", ".", "att_scorer", "(", "proj_input", ")", ".", "squeeze", "(", "-", "1", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "# (Batch_size, N_sentence, N_token)", "\n", "att_scores", "=", "F", ".", "softmax", "(", "raw_att_scores", ".", "masked_fill", "(", "(", "1", "-", "token_mask", ")", ".", "bool", "(", ")", ",", "float", "(", "'-inf'", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "att_scores", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "att_scores", ")", ",", "torch", ".", "zeros_like", "(", "att_scores", ")", ",", "att_scores", ")", "# Replace NaN with 0", "\n", "batch_att_scores", "=", "att_scores", ".", "view", "(", "-", "1", ",", "att_scores", ".", "size", "(", "-", "1", ")", ")", "# (Batch_size * N_sentence, N_token)", "\n", "out", "=", "torch", ".", "bmm", "(", "batch_att_scores", ".", "unsqueeze", "(", "1", ")", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "# (Batch_size * N_sentence, INPUT_SIZE)", "\n", "out", "=", "out", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "mask", "=", "token_mask", "[", ":", ",", ":", ",", "0", "]", "\n", "return", "out", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.DynamicSentenceAttention.__init__": [[106, 119], ["torch.Module.__init__", "paragraph_model_dynamic.TimeDistributedDense", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "paragraph_model_dynamic.TimeDistributedDense", "paragraph_model_dynamic.TimeDistributedDense"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__"], ["def", "__init__", "(", "self", ",", "INPUT_SIZE", ",", "PROJ_SIZE", ",", "REC_HID_SIZE", "=", "None", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DynamicSentenceAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "self", ".", "att_proj", "=", "TimeDistributedDense", "(", "INPUT_SIZE", ",", "PROJ_SIZE", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "if", "REC_HID_SIZE", "is", "not", "None", ":", "\n", "            ", "self", ".", "contextualized", "=", "True", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "PROJ_SIZE", ",", "REC_HID_SIZE", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "att_scorer", "=", "TimeDistributedDense", "(", "REC_HID_SIZE", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "contextualized", "=", "False", "\n", "self", ".", "att_scorer", "=", "TimeDistributedDense", "(", "PROJ_SIZE", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.DynamicSentenceAttention.forward": [[120, 140], ["torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "sentence_reps.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.softmax.masked_fill", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "sentence_reps", ",", "sentence_mask", ",", "att_scores", ",", "valid_scores", ")", ":", "\n", "# sentence_reps: (BATCH_SIZE, N_sentence, INPUT_SIZE)", "\n", "# sentence_mask: (BATCH_SIZE, N_sentence)", "\n", "# att_scores: (BATCH_SIZE, N_sentence)", "\n", "# valid_scores: (BATCH_SIZE, N_sentence)", "\n", "# result: (BATCH_SIZE, INPUT_SIZE)", "\n", "#att_scores = rationale_out[:,:,1] # (BATCH_SIZE, N_sentence)", "\n", "#valid_scores = rationale_out[:,:,1] > rationale_out[:,:,0] # Only consider sentences predicted as rationales", "\n", "        ", "sentence_mask", "=", "torch", ".", "logical_and", "(", "sentence_mask", ",", "valid_scores", ")", "\n", "\n", "# Force those sentence representations in paragraph without rationale to be 0. ", "\n", "#NEI_mask = (torch.sum(sentence_mask, axis=1) > 0).long().unsqueeze(-1).expand(-1, sentence_reps.size(-1))", "\n", "\n", "if", "sentence_reps", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "            ", "att_scores", "=", "F", ".", "softmax", "(", "att_scores", ".", "masked_fill", "(", "(", "~", "sentence_mask", ")", ".", "bool", "(", ")", ",", "-", "1e4", ")", ",", "dim", "=", "-", "1", ")", "\n", "#att_scores = torch.where(torch.isnan(att_scores), torch.zeros_like(att_scores), att_scores) # Replace NaN with 0", "\n", "result", "=", "torch", ".", "bmm", "(", "att_scores", ".", "unsqueeze", "(", "1", ")", ",", "sentence_reps", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "result", "# * NEI_mask ", "\n", "", "else", ":", "\n", "            ", "return", "sentence_reps", "[", ":", ",", "0", ",", ":", "]", "# * NEI_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.JointParagraphClassifier.__init__": [[143, 164], ["torch.Module.__init__", "transformers.AutoModel.from_pretrained", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "paragraph_model_dynamic.DynamicSentenceAttention", "paragraph_model_dynamic.WordAttention", "paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.ClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "bert_path", ",", "bert_dim", ",", "dropout", "=", "0.1", ",", "ignore_index", "=", "2", ")", ":", "\n", "        ", "super", "(", "JointParagraphClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stance_label_size", "=", "3", "\n", "self", ".", "rationale_label_size", "=", "2", "\n", "self", ".", "ignore_index", "=", "2", "\n", "self", ".", "bert", "=", "AutoModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "self", ".", "stance_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "rationale_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "2", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bert_dim", "=", "bert_dim", "\n", "self", ".", "sentence_attention", "=", "DynamicSentenceAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "word_attention", "=", "WordAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "rationale_linear", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "rationale_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "stance_linear", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "stance_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "sentence_attention", ",", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "rationale_linear", ",", "\n", "self", ".", "stance_linear", ",", "\n", "self", ".", "stance_criterion", ",", "\n", "self", ".", "rationale_criterion", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.JointParagraphClassifier.reinitialize": [[166, 178], ["paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.DynamicSentenceAttention"], "methods", ["None"], ["", "def", "reinitialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "extra_modules", "=", "[", "]", "\n", "self", ".", "rationale_linear", "=", "ClassificationHead", "(", "self", ".", "bert_dim", ",", "self", ".", "rationale_label_size", ",", "hidden_dropout_prob", "=", "self", ".", "dropout", ")", "\n", "self", ".", "stance_linear", "=", "ClassificationHead", "(", "self", ".", "bert_dim", ",", "self", ".", "stance_label_size", ",", "hidden_dropout_prob", "=", "self", ".", "dropout", ")", "\n", "self", ".", "sentence_attention", "=", "DynamicSentenceAttention", "(", "self", ".", "bert_dim", ",", "self", ".", "bert_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "rationale_linear", ",", "\n", "self", ".", "stance_linear", ",", "\n", "self", ".", "stance_criterion", ",", "\n", "self", ".", "rationale_criterion", ",", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "sentence_attention", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.JointParagraphClassifier.forward": [[180, 217], ["paragraph_model_dynamic.JointParagraphClassifier.word_attention", "paragraph_model_dynamic.JointParagraphClassifier.rationale_linear", "bool", "paragraph_model_dynamic.JointParagraphClassifier.sentence_attention", "paragraph_model_dynamic.JointParagraphClassifier.stance_linear", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "paragraph_model_dynamic.JointParagraphClassifier.bert", "paragraph_model_dynamic.JointParagraphClassifier.stance_criterion", "paragraph_model_dynamic.JointParagraphClassifier.rationale_criterion", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "rationale_pred_paragraph[].detach().numpy().tolist", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "paragraph_model_dynamic.JointParagraphClassifier.view", "rationale_label.view", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "paragraph_model_dynamic.JointParagraphClassifier.cpu", "paragraph_model_dynamic.JointParagraphClassifier.cpu", "zip", "rationale_pred_paragraph[].detach().numpy", "sentence_mask.bool", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "rationale_pred_paragraph[].detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax().detach().numpy().tolist.cpu", "torch.argmax().detach().numpy().tolist.cpu", "torch.argmax().detach().numpy().tolist.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded_dict", ",", "transformation_indices", ",", "stance_label", "=", "None", ",", "rationale_label", "=", "None", ",", "sample_p", "=", "1", ",", "rationale_score", "=", "False", ")", ":", "\n", "        ", "batch_indices", ",", "indices_by_batch", ",", "mask", "=", "transformation_indices", "# (batch_size, N_sep, N_token)", "\n", "bert_out", "=", "self", ".", "bert", "(", "**", "encoded_dict", ")", "[", "0", "]", "# (BATCH_SIZE, sequence_len, BERT_DIM)", "\n", "bert_tokens", "=", "bert_out", "[", "batch_indices", ",", "indices_by_batch", ",", ":", "]", "\n", "# bert_tokens: (batch_size, N_sep, N_token, BERT_dim)", "\n", "sentence_reps", ",", "sentence_mask", "=", "self", ".", "word_attention", "(", "bert_tokens", ",", "mask", ")", "\n", "# (Batch_size, N_sep, BERT_DIM), (Batch_size, N_sep)", "\n", "#print(bert_out.shape, bert_tokens.shape, sentence_reps.shape, sentence_mask.shape, rationale_label.shape)", "\n", "rationale_out", "=", "self", ".", "rationale_linear", "(", "sentence_reps", ")", "# (Batch_size, N_sep, 2)", "\n", "att_scores", "=", "rationale_out", "[", ":", ",", ":", ",", "1", "]", "# (BATCH_SIZE, N_sentence)", "\n", "\n", "if", "bool", "(", "torch", ".", "rand", "(", "1", ")", "<", "sample_p", ")", ":", "# Choose sentence according to predicted rationale", "\n", "            ", "valid_scores", "=", "rationale_out", "[", ":", ",", ":", ",", "1", "]", ">", "rationale_out", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "valid_scores", "=", "rationale_label", "==", "1", "# Ground truth", "\n", "", "paragraph_rep", "=", "self", ".", "sentence_attention", "(", "sentence_reps", ",", "sentence_mask", ",", "att_scores", ",", "valid_scores", ")", "\n", "# (BATCH_SIZE, BERT_DIM) ", "\n", "\n", "stance_out", "=", "self", ".", "stance_linear", "(", "paragraph_rep", ")", "# (Batch_size, 3)", "\n", "\n", "if", "stance_label", "is", "not", "None", ":", "\n", "            ", "stance_loss", "=", "self", ".", "stance_criterion", "(", "stance_out", ",", "stance_label", ")", "\n", "", "else", ":", "\n", "            ", "stance_loss", "=", "None", "\n", "", "if", "rationale_label", "is", "not", "None", ":", "\n", "            ", "rationale_loss", "=", "self", ".", "rationale_criterion", "(", "rationale_out", ".", "view", "(", "-", "1", ",", "self", ".", "rationale_label_size", ")", ",", "\n", "rationale_label", ".", "view", "(", "-", "1", ")", ")", "# ignore index 2", "\n", "", "else", ":", "\n", "            ", "rationale_loss", "=", "None", "\n", "\n", "", "stance_out", "=", "torch", ".", "argmax", "(", "stance_out", ".", "cpu", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "if", "rationale_score", ":", "\n", "            ", "rationale_pred", "=", "rationale_out", ".", "cpu", "(", ")", "[", ":", ",", ":", ",", "1", "]", "# (Batch_size, N_sep)", "\n", "", "else", ":", "\n", "            ", "rationale_pred", "=", "torch", ".", "argmax", "(", "rationale_out", ".", "cpu", "(", ")", ",", "dim", "=", "-", "1", ")", "# (Batch_size, N_sep)", "\n", "", "rationale_out", "=", "[", "rationale_pred_paragraph", "[", "mask", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "for", "rationale_pred_paragraph", ",", "mask", "in", "zip", "(", "rationale_pred", ",", "sentence_mask", ".", "bool", "(", ")", ")", "]", "\n", "return", "rationale_out", ",", "stance_out", ",", "rationale_loss", ",", "stance_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.__init__": [[219, 246], ["torch.Module.__init__", "transformers.AutoModel.from_pretrained", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.DynamicSentenceAttention", "paragraph_model_dynamic.DynamicSentenceAttention", "paragraph_model_dynamic.WordAttention"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "bert_path", ",", "bert_dim", ",", "dropout", "=", "0.1", ",", "ignore_index", "=", "2", ")", ":", "\n", "        ", "super", "(", "DomainAdaptationJointParagraphClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stance_label_size", "=", "3", "\n", "self", ".", "rationale_label_size", "=", "2", "\n", "self", ".", "ignore_index", "=", "2", "\n", "self", ".", "bert", "=", "AutoModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "self", ".", "stance_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "rationale_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "2", ")", "\n", "self", ".", "rationale_linear_fever", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "rationale_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "rationale_linear_scifact", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "rationale_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "stance_linear_scifact", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "stance_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "stance_linear_fever", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "stance_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "\n", "self", ".", "sentence_attention_scifact", "=", "DynamicSentenceAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "sentence_attention_fever", "=", "DynamicSentenceAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "word_attention", "=", "WordAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "sentence_attention_scifact", ",", "\n", "self", ".", "sentence_attention_fever", ",", "\n", "self", ".", "stance_linear_fever", ",", "\n", "self", ".", "stance_linear_scifact", ",", "\n", "self", ".", "rationale_linear_fever", ",", "\n", "self", ".", "rationale_linear_scifact", ",", "\n", "self", ".", "stance_criterion", ",", "\n", "self", ".", "rationale_criterion", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.forward": [[248, 325], ["paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.word_attention", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.rationale_linear_fever", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.rationale_linear_scifact", "bool", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.sentence_attention_fever", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.sentence_attention_scifact", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.stance_linear_fever", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.stance_linear_scifact", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.bert", "domain_indices.size", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.stance_criterion", "paragraph_model_dynamic.DomainAdaptationJointParagraphClassifier.rationale_criterion", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "rationale_pred_paragraph[].detach().numpy().tolist", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "rationale_label.view", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "zip", "rationale_pred_paragraph[].detach().numpy", "sentence_mask.bool", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "rationale_pred_paragraph[].detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax().detach().numpy().tolist.cpu", "torch.argmax().detach().numpy().tolist.cpu", "torch.argmax().detach().numpy().tolist.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded_dict", ",", "transformation_indices", ",", "domain_indices", ",", "stance_label", "=", "None", ",", "rationale_label", "=", "None", ",", "sample_p", "=", "1", ")", ":", "\n", "        ", "batch_indices", ",", "indices_by_batch", ",", "mask", "=", "transformation_indices", "# (batch_size, N_sep, N_token)", "\n", "bert_out", "=", "self", ".", "bert", "(", "**", "encoded_dict", ")", "[", "0", "]", "# (BATCH_SIZE, sequence_len, BERT_DIM)", "\n", "bert_tokens", "=", "bert_out", "[", "batch_indices", ",", "indices_by_batch", ",", ":", "]", "\n", "# bert_tokens: (batch_size, N_sep, N_token, BERT_dim)", "\n", "sentence_reps", ",", "sentence_mask", "=", "self", ".", "word_attention", "(", "bert_tokens", ",", "mask", ")", "\n", "# (Batch_size, N_sep, BERT_DIM), (Batch_size, N_sep)", "\n", "\n", "# Prepare splitting", "\n", "indices", "=", "torch", ".", "arange", "(", "domain_indices", ".", "size", "(", "0", ")", ")", "\n", "select_fever", "=", "domain_indices", "==", "0", "\n", "select_scifact", "=", "domain_indices", "==", "1", "\n", "\n", "fever_indices", "=", "indices", "[", "select_fever", "]", "\n", "scifact_indices", "=", "indices", "[", "select_scifact", "]", "\n", "original_indices", "=", "torch", ".", "cat", "(", "[", "fever_indices", ",", "scifact_indices", "]", ")", "\n", "\n", "# Split sentence_reps and sentence_mask", "\n", "fever_sentence_reps", "=", "sentence_reps", "[", "select_fever", "]", "\n", "fever_sentence_mask", "=", "sentence_mask", "[", "select_fever", "]", "\n", "\n", "scifact_sentence_reps", "=", "sentence_reps", "[", "select_scifact", "]", "\n", "scifact_sentence_mask", "=", "sentence_mask", "[", "select_scifact", "]", "\n", "\n", "if", "rationale_label", "is", "not", "None", ":", "\n", "            ", "fever_rationale_label", "=", "rationale_label", "[", "select_fever", "]", "\n", "scifact_rationale_label", "=", "rationale_label", "[", "select_scifact", "]", "\n", "\n", "# Compute rationale_out", "\n", "", "fever_rationale_out", "=", "self", ".", "rationale_linear_fever", "(", "fever_sentence_reps", ")", "# (Batch_size, N_sep, 2)", "\n", "scifact_rationale_out", "=", "self", ".", "rationale_linear_scifact", "(", "scifact_sentence_reps", ")", "\n", "\n", "fever_att_scores", "=", "fever_rationale_out", "[", ":", ",", ":", ",", "1", "]", "# (BATCH_SIZE, N_sentence)", "\n", "scifact_att_scores", "=", "scifact_rationale_out", "[", ":", ",", ":", ",", "1", "]", "# (BATCH_SIZE, N_sentence)", "\n", "\n", "if", "bool", "(", "torch", ".", "rand", "(", "1", ")", "<", "sample_p", ")", ":", "# Choose sentence according to predicted rationale", "\n", "            ", "fever_valid_scores", "=", "fever_rationale_out", "[", ":", ",", ":", ",", "1", "]", ">", "fever_rationale_out", "[", ":", ",", ":", ",", "0", "]", "\n", "scifact_valid_scores", "=", "scifact_rationale_out", "[", ":", ",", ":", ",", "1", "]", ">", "scifact_rationale_out", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "fever_valid_scores", "=", "fever_rationale_label", "==", "1", "# Ground truth", "\n", "scifact_valid_scores", "=", "scifact_rationale_label", "==", "1", "\n", "\n", "", "fever_paragraph_rep", "=", "self", ".", "sentence_attention_fever", "(", "fever_sentence_reps", ",", "\n", "fever_sentence_mask", ",", "fever_att_scores", ",", "fever_valid_scores", ")", "\n", "# (BATCH_SIZE, BERT_DIM) ", "\n", "\n", "scifact_paragraph_rep", "=", "self", ".", "sentence_attention_scifact", "(", "scifact_sentence_reps", ",", "\n", "scifact_sentence_mask", ",", "scifact_att_scores", ",", "scifact_valid_scores", ")", "\n", "# (BATCH_SIZE, BERT_DIM)", "\n", "\n", "fever_stance_out", "=", "self", ".", "stance_linear_fever", "(", "fever_paragraph_rep", ")", "# (Batch_size, 3)", "\n", "scifact_stance_out", "=", "self", ".", "stance_linear_scifact", "(", "scifact_paragraph_rep", ")", "# (Batch_size, 3)", "\n", "\n", "# Combine splitted ones to the original order", "\n", "stance_out", "=", "torch", ".", "cat", "(", "[", "fever_stance_out", ",", "scifact_stance_out", "]", ")", "\n", "stance_out", "=", "stance_out", "[", "original_indices", "]", "\n", "\n", "rationale_out", "=", "torch", ".", "cat", "(", "[", "fever_rationale_out", ",", "scifact_rationale_out", "]", ")", "\n", "rationale_out", "=", "rationale_out", "[", "original_indices", "]", "\n", "\n", "if", "stance_label", "is", "not", "None", ":", "\n", "            ", "stance_loss", "=", "self", ".", "stance_criterion", "(", "stance_out", ",", "stance_label", ")", "\n", "", "else", ":", "\n", "            ", "stance_loss", "=", "None", "\n", "", "if", "rationale_label", "is", "not", "None", ":", "\n", "            ", "rationale_loss", "=", "self", ".", "rationale_criterion", "(", "rationale_out", ".", "view", "(", "-", "1", ",", "self", ".", "rationale_label_size", ")", ",", "\n", "rationale_label", ".", "view", "(", "-", "1", ")", ")", "# ignore index 2", "\n", "", "else", ":", "\n", "            ", "rationale_loss", "=", "None", "\n", "\n", "", "stance_out", "=", "torch", ".", "argmax", "(", "stance_out", ".", "cpu", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "rationale_pred", "=", "torch", ".", "argmax", "(", "rationale_out", ".", "cpu", "(", ")", ",", "dim", "=", "-", "1", ")", "# (Batch_size, N_sep)", "\n", "rationale_out", "=", "[", "rationale_pred_paragraph", "[", "mask", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "for", "rationale_pred_paragraph", ",", "mask", "in", "zip", "(", "rationale_pred", ",", "sentence_mask", ".", "bool", "(", ")", ")", "]", "\n", "\n", "\n", "return", "rationale_out", ",", "stance_out", ",", "rationale_loss", ",", "stance_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.StanceParagraphClassifier.__init__": [[327, 343], ["torch.Module.__init__", "transformers.AutoModel.from_pretrained", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "paragraph_model_dynamic.DynamicSentenceAttention", "paragraph_model_dynamic.WordAttention", "paragraph_model_dynamic.ClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "bert_path", ",", "bert_dim", ",", "dropout", "=", "0.1", ",", "ignore_index", "=", "2", ")", ":", "\n", "        ", "super", "(", "StanceParagraphClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stance_label_size", "=", "3", "\n", "self", ".", "ignore_index", "=", "2", "\n", "self", ".", "bert", "=", "AutoModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "self", ".", "stance_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bert_dim", "=", "bert_dim", "\n", "self", ".", "sentence_attention", "=", "DynamicSentenceAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "word_attention", "=", "WordAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "stance_linear", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "stance_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "sentence_attention", ",", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "stance_linear", ",", "\n", "self", ".", "stance_criterion", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.StanceParagraphClassifier.reinitialize": [[345, 354], ["paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.DynamicSentenceAttention"], "methods", ["None"], ["", "def", "reinitialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "extra_modules", "=", "[", "]", "\n", "self", ".", "stance_linear", "=", "ClassificationHead", "(", "self", ".", "bert_dim", ",", "self", ".", "stance_label_size", ",", "hidden_dropout_prob", "=", "self", ".", "dropout", ")", "\n", "self", ".", "sentence_attention", "=", "DynamicSentenceAttention", "(", "self", ".", "bert_dim", ",", "self", ".", "bert_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "stance_linear", ",", "\n", "self", ".", "stance_criterion", ",", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "sentence_attention", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.StanceParagraphClassifier.forward": [[356, 377], ["paragraph_model_dynamic.StanceParagraphClassifier.word_attention", "paragraph_model_dynamic.StanceParagraphClassifier.sentence_attention", "paragraph_model_dynamic.StanceParagraphClassifier.stance_linear", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "torch.argmax().detach().numpy().tolist", "paragraph_model_dynamic.StanceParagraphClassifier.bert", "sentence_mask.float", "paragraph_model_dynamic.StanceParagraphClassifier.stance_criterion", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach().numpy", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax().detach().numpy().tolist.cpu", "torch.argmax().detach().numpy().tolist.cpu", "torch.argmax().detach().numpy().tolist.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded_dict", ",", "transformation_indices", ",", "stance_label", "=", "None", ")", ":", "\n", "        ", "batch_indices", ",", "indices_by_batch", ",", "mask", "=", "transformation_indices", "# (batch_size, N_sep, N_token)", "\n", "bert_out", "=", "self", ".", "bert", "(", "**", "encoded_dict", ")", "[", "0", "]", "# (BATCH_SIZE, sequence_len, BERT_DIM)", "\n", "bert_tokens", "=", "bert_out", "[", "batch_indices", ",", "indices_by_batch", ",", ":", "]", "\n", "# bert_tokens: (batch_size, N_sep, N_token, BERT_dim)", "\n", "sentence_reps", ",", "sentence_mask", "=", "self", ".", "word_attention", "(", "bert_tokens", ",", "mask", ")", "\n", "# (Batch_size, N_sep, BERT_DIM), (Batch_size, N_sep)", "\n", "\n", "paragraph_rep", "=", "self", ".", "sentence_attention", "(", "sentence_reps", ",", "sentence_mask", ",", "sentence_mask", ".", "float", "(", ")", ",", "sentence_mask", ")", "\n", "# (BATCH_SIZE, BERT_DIM) ", "\n", "\n", "stance_out", "=", "self", ".", "stance_linear", "(", "paragraph_rep", ")", "# (Batch_size, 3)", "\n", "\n", "if", "stance_label", "is", "not", "None", ":", "\n", "            ", "stance_loss", "=", "self", ".", "stance_criterion", "(", "stance_out", ",", "stance_label", ")", "\n", "", "else", ":", "\n", "            ", "stance_loss", "=", "None", "\n", "\n", "", "stance_out", "=", "torch", ".", "argmax", "(", "stance_out", ".", "cpu", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "stance_out", ",", "stance_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.__init__": [[379, 395], ["torch.Module.__init__", "transformers.AutoModel.from_pretrained", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "paragraph_model_dynamic.DynamicSentenceAttention", "paragraph_model_dynamic.WordAttention", "paragraph_model_dynamic.ClassificationHead"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.configuration_utils.PretrainedConfig.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "bert_path", ",", "bert_dim", ",", "dropout", "=", "0.1", ",", "ignore_index", "=", "2", ")", ":", "\n", "        ", "super", "(", "RationaleParagraphClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rationale_label_size", "=", "2", "\n", "self", ".", "ignore_index", "=", "2", "\n", "self", ".", "bert", "=", "AutoModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "self", ".", "rationale_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "2", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bert_dim", "=", "bert_dim", "\n", "self", ".", "sentence_attention", "=", "DynamicSentenceAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "word_attention", "=", "WordAttention", "(", "bert_dim", ",", "bert_dim", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "rationale_linear", "=", "ClassificationHead", "(", "bert_dim", ",", "self", ".", "rationale_label_size", ",", "hidden_dropout_prob", "=", "dropout", ")", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "sentence_attention", ",", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "rationale_linear", ",", "\n", "self", ".", "rationale_criterion", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.reinitialize": [[397, 406], ["paragraph_model_dynamic.ClassificationHead", "paragraph_model_dynamic.DynamicSentenceAttention"], "methods", ["None"], ["", "def", "reinitialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "extra_modules", "=", "[", "]", "\n", "self", ".", "rationale_linear", "=", "ClassificationHead", "(", "self", ".", "bert_dim", ",", "self", ".", "rationale_label_size", ",", "hidden_dropout_prob", "=", "self", ".", "dropout", ")", "\n", "self", ".", "sentence_attention", "=", "DynamicSentenceAttention", "(", "self", ".", "bert_dim", ",", "self", ".", "bert_dim", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "extra_modules", "=", "[", "\n", "self", ".", "rationale_linear", ",", "\n", "self", ".", "rationale_criterion", ",", "\n", "self", ".", "word_attention", ",", "\n", "self", ".", "sentence_attention", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.paragraph_model_dynamic.RationaleParagraphClassifier.forward": [[408, 438], ["paragraph_model_dynamic.RationaleParagraphClassifier.word_attention", "paragraph_model_dynamic.RationaleParagraphClassifier.rationale_linear", "bool", "paragraph_model_dynamic.RationaleParagraphClassifier.sentence_attention", "paragraph_model_dynamic.RationaleParagraphClassifier.bert", "paragraph_model_dynamic.RationaleParagraphClassifier.rationale_criterion", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "rationale_pred_paragraph[].detach().numpy().tolist", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "paragraph_model_dynamic.RationaleParagraphClassifier.view", "rationale_label.view", "paragraph_model_dynamic.RationaleParagraphClassifier.cpu", "paragraph_model_dynamic.RationaleParagraphClassifier.cpu", "zip", "rationale_pred_paragraph[].detach().numpy", "sentence_mask.bool", "rationale_pred_paragraph[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded_dict", ",", "transformation_indices", ",", "rationale_label", "=", "None", ",", "sample_p", "=", "1", ",", "rationale_score", "=", "False", ")", ":", "\n", "        ", "batch_indices", ",", "indices_by_batch", ",", "mask", "=", "transformation_indices", "# (batch_size, N_sep, N_token)", "\n", "bert_out", "=", "self", ".", "bert", "(", "**", "encoded_dict", ")", "[", "0", "]", "# (BATCH_SIZE, sequence_len, BERT_DIM)", "\n", "bert_tokens", "=", "bert_out", "[", "batch_indices", ",", "indices_by_batch", ",", ":", "]", "\n", "# bert_tokens: (batch_size, N_sep, N_token, BERT_dim)", "\n", "sentence_reps", ",", "sentence_mask", "=", "self", ".", "word_attention", "(", "bert_tokens", ",", "mask", ")", "\n", "# (Batch_size, N_sep, BERT_DIM), (Batch_size, N_sep)", "\n", "#print(bert_out.shape, bert_tokens.shape, sentence_reps.shape, sentence_mask.shape, rationale_label.shape)", "\n", "rationale_out", "=", "self", ".", "rationale_linear", "(", "sentence_reps", ")", "# (Batch_size, N_sep, 2)", "\n", "att_scores", "=", "rationale_out", "[", ":", ",", ":", ",", "1", "]", "# (BATCH_SIZE, N_sentence)", "\n", "\n", "if", "bool", "(", "torch", ".", "rand", "(", "1", ")", "<", "sample_p", ")", ":", "# Choose sentence according to predicted rationale", "\n", "            ", "valid_scores", "=", "rationale_out", "[", ":", ",", ":", ",", "1", "]", ">", "rationale_out", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "valid_scores", "=", "rationale_label", "==", "1", "# Ground truth", "\n", "", "paragraph_rep", "=", "self", ".", "sentence_attention", "(", "sentence_reps", ",", "sentence_mask", ",", "att_scores", ",", "valid_scores", ")", "\n", "# (BATCH_SIZE, BERT_DIM) ", "\n", "\n", "if", "rationale_label", "is", "not", "None", ":", "\n", "            ", "rationale_loss", "=", "self", ".", "rationale_criterion", "(", "rationale_out", ".", "view", "(", "-", "1", ",", "self", ".", "rationale_label_size", ")", ",", "\n", "rationale_label", ".", "view", "(", "-", "1", ")", ")", "# ignore index 2", "\n", "", "else", ":", "\n", "            ", "rationale_loss", "=", "None", "\n", "\n", "", "if", "rationale_score", ":", "\n", "            ", "rationale_pred", "=", "rationale_out", ".", "cpu", "(", ")", "[", ":", ",", ":", ",", "1", "]", "# (Batch_size, N_sep)", "\n", "", "else", ":", "\n", "            ", "rationale_pred", "=", "torch", ".", "argmax", "(", "rationale_out", ".", "cpu", "(", ")", ",", "dim", "=", "-", "1", ")", "# (Batch_size, N_sep)", "\n", "", "rationale_out", "=", "[", "rationale_pred_paragraph", "[", "mask", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "for", "rationale_pred_paragraph", ",", "mask", "in", "zip", "(", "rationale_pred", ",", "sentence_mask", ".", "bool", "(", ")", ")", "]", "\n", "return", "rationale_out", ",", "rationale_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciDTdataset.__init__": [[8, 74], ["util.read_passages", "enumerate", "util.clean_words", "enumerate", "dataset.SciDTdataset.true_pairs.append", "util.to_BIO", "len", "zip", "range", "dataset.SciDTdataset.label_ind.items", "len", "range", "enumerate", "len", "len", "dataset.SciDTdataset.samples.append", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.read_passages", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_words", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.to_BIO"], ["    ", "def", "__init__", "(", "self", ",", "path", ":", "str", ",", "MAX_SEQ_LEN", ":", "int", ",", "CHUNK_SIZE", ":", "int", ",", "label_ind", "=", "None", ",", "train", "=", "False", ",", "shuffle", "=", "False", ",", "BIO", "=", "True", ")", ":", "\n", "        ", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "n_paragraph_slices", "=", "0", "\n", "self", ".", "MAX_SEQ_LEN", "=", "MAX_SEQ_LEN", "\n", "self", ".", "CHUNK_SIZE", "=", "CHUNK_SIZE", "\n", "n_pieces", "=", "MAX_SEQ_LEN", "//", "CHUNK_SIZE", "\n", "n_pieces", "+=", "1", "if", "MAX_SEQ_LEN", "%", "CHUNK_SIZE", ">", "0", "else", "0", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "true_pairs", "=", "[", "]", "# The unprocessed paragraph - tag pairs.", "\n", "str_seqs", ",", "label_seqs", "=", "read_passages", "(", "path", ",", "is_labeled", "=", "train", ")", "\n", "self", ".", "str_seqs", "=", "str_seqs", "\n", "self", ".", "label_seqs", "=", "label_seqs", "\n", "for", "pi", ",", "str_seq", "in", "enumerate", "(", "str_seqs", ")", ":", "\n", "            ", "self", ".", "true_pairs", ".", "append", "(", "{", "\n", "'paragraph_id'", ":", "pi", ",", "\n", "'paragraph'", ":", "str_seq", ",", "\n", "'label'", ":", "label_seqs", "[", "pi", "]", "\n", "}", ")", "\n", "\n", "", "str_seqs", "=", "clean_words", "(", "str_seqs", ")", "\n", "if", "BIO", ":", "\n", "            ", "label_seqs", "=", "to_BIO", "(", "label_seqs", ")", "\n", "\n", "", "if", "not", "label_ind", ":", "\n", "            ", "self", ".", "label_ind", "=", "{", "\"none\"", ":", "0", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "label_ind", "=", "label_ind", "\n", "\n", "", "if", "len", "(", "self", ".", "label_ind", ")", "<=", "1", ":", "\n", "            ", "for", "str_seq", ",", "label_seq", "in", "zip", "(", "str_seqs", ",", "label_seqs", ")", ":", "\n", "                ", "for", "label", "in", "label_seq", ":", "\n", "                    ", "if", "label", "not", "in", "self", ".", "label_ind", ":", "\n", "# Add new labels with values 0,1,2,....", "\n", "                        ", "self", ".", "label_ind", "[", "label", "]", "=", "len", "(", "self", ".", "label_ind", ")", "\n", "\n", "", "", "", "", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "\n", "for", "pi", ",", "str_seq", "in", "enumerate", "(", "str_seqs", ")", ":", "\n", "            ", "n_paragraph_slices", "=", "len", "(", "str_seq", ")", "//", "MAX_SEQ_LEN", "\n", "n_paragraph_slices", "+=", "1", "if", "len", "(", "str_seq", ")", "%", "MAX_SEQ_LEN", ">", "0", "else", "0", "\n", "self", ".", "n_paragraph_slices", "+=", "n_paragraph_slices", "\n", "for", "p_slice", "in", "range", "(", "n_paragraph_slices", ")", ":", "\n", "                ", "this_slice", "=", "str_seq", "[", "p_slice", "*", "MAX_SEQ_LEN", ":", "(", "p_slice", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "padded_paragraph", "=", "this_slice", "+", "[", "\"\"", "for", "i", "in", "range", "(", "CHUNK_SIZE", "*", "n_pieces", "-", "len", "(", "this_slice", ")", ")", "]", "\n", "\n", "if", "train", ":", "\n", "                    ", "this_slice_tag", "=", "label_seqs", "[", "pi", "]", "[", "p_slice", "*", "MAX_SEQ_LEN", ":", "(", "p_slice", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "padded_tag", "=", "this_slice_tag", "+", "[", "\"none\"", "for", "i", "in", "range", "(", "CHUNK_SIZE", "*", "n_pieces", "-", "len", "(", "this_slice", ")", ")", "]", "\n", "\n", "", "for", "p", "in", "range", "(", "n_pieces", ")", ":", "\n", "                    ", "this_piece", "=", "padded_paragraph", "[", "p", "*", "CHUNK_SIZE", ":", "(", "p", "+", "1", ")", "*", "CHUNK_SIZE", "]", "\n", "if", "train", ":", "\n", "                        ", "this_piece_tag", "=", "padded_tag", "[", "p", "*", "CHUNK_SIZE", ":", "(", "p", "+", "1", ")", "*", "CHUNK_SIZE", "]", "\n", "\n", "", "for", "i", ",", "sentence", "in", "enumerate", "(", "this_piece", ")", ":", "\n", "                        ", "sentence_id", "=", "i", "+", "p", "*", "CHUNK_SIZE", "+", "p_slice", "*", "MAX_SEQ_LEN", "\n", "this_sample", "=", "{", "\n", "'paragraph_id'", ":", "pi", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'sentence_id'", ":", "sentence_id", ",", "\n", "}", "\n", "\n", "if", "train", ":", "\n", "                            ", "this_sample", "[", "'label'", "]", "=", "self", ".", "label_ind", "[", "this_piece_tag", "[", "i", "]", "]", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "this_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciDTdataset.__make_shuffle_idx": [[75, 78], ["random.shuffle", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "", "", "", "", "def", "__make_shuffle_idx", "(", "self", ")", ":", "\n", "        ", "self", ".", "paragraph_indices", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "n_paragraph_slices", ")", "]", "\n", "random", ".", "shuffle", "(", "self", ".", "paragraph_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciDTdataset.__len__": [[79, 81], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciDTdataset.__getitem__": [[82, 96], ["dataset.SciDTdataset.__make_shuffle_idx"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactSubParagraphDataset.__make_shuffle_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "self", ".", "__make_shuffle_idx", "(", ")", "\n", "\n", "", "paragraph_idx", "=", "idx", "//", "self", ".", "MAX_SEQ_LEN", "\n", "offset", "=", "idx", "%", "self", ".", "MAX_SEQ_LEN", "\n", "\n", "original_idx", "=", "self", ".", "paragraph_indices", "[", "paragraph_idx", "]", "*", "self", ".", "MAX_SEQ_LEN", "+", "offset", "\n", "\n", "", "else", ":", "\n", "            ", "original_idx", "=", "idx", "\n", "\n", "", "return", "self", ".", "samples", "[", "original_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactSubParagraphDataset.__init__": [[99, 207], ["jsonlines.open", "len", "enumerate", "dataset.SciFactSubParagraphDataset.label_ind.items", "dataset.SciFactSubParagraphDataset.stance_ind.items", "jsonlines.open", "str", "set", "dataset.SciFactSubParagraphDataset.__init__.sample_negative_sentence"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["    ", "def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ",", "MAX_SEQ_LEN", ":", "int", ",", "CHUNK_SIZE", ":", "int", ",", "train", "=", "False", ",", "shuffle", "=", "False", ",", "negative_paragraph_sample_ratio", "=", "1", ",", "negative_sentence_sample_ratio", "=", "1", ")", ":", "\n", "\n", "\n", "        ", "def", "sample_negative_sentence", "(", "sentences", ",", "rationale_labels", ",", "negative_paragraph_sample_ratio", ")", ":", "\n", "            ", "kept_sentences", "=", "[", "]", "\n", "kept_labels", "=", "[", "]", "\n", "while", "len", "(", "kept_sentences", ")", "==", "0", ":", "# Avoid empty sentences returned", "\n", "                ", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "                    ", "if", "i", "in", "rationale_labels", "or", "random", ".", "random", "(", ")", "<", "negative_paragraph_sample_ratio", ":", "\n", "                        ", "kept_sentences", ".", "append", "(", "sentence", ")", "\n", "kept_labels", ".", "append", "(", "i", "in", "rationale_labels", ")", "\n", "", "", "", "return", "kept_sentences", ",", "kept_labels", "\n", "\n", "\n", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "n_paragraph_slices", "=", "0", "\n", "self", ".", "MAX_SEQ_LEN", "=", "MAX_SEQ_LEN", "\n", "self", ".", "CHUNK_SIZE", "=", "CHUNK_SIZE", "\n", "n_pieces", "=", "MAX_SEQ_LEN", "//", "CHUNK_SIZE", "\n", "n_pieces", "+=", "1", "if", "MAX_SEQ_LEN", "%", "CHUNK_SIZE", ">", "0", "else", "0", "\n", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"SUPPORT\"", ":", "1", ",", "\"CONTRADICT\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "true_pairs", "=", "[", "]", "# The unprocessed claim - abstract pairs.", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "for", "doc_id", "in", "claim", "[", "\"cited_doc_ids\"", "]", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "if", "doc_id", "in", "claim", "[", "'evidence'", "]", ":", "\n", "                    ", "evidence", "=", "claim", "[", "'evidence'", "]", "[", "doc_id", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "stances", "=", "set", "(", "[", "es", "[", "\"label\"", "]", "for", "es", "in", "evidence", "]", ")", "\n", "still_include", "=", "False", "\n", "if", "\"SUPPORT\"", "in", "stances", ":", "\n", "                        ", "stance", "=", "\"SUPPORT\"", "\n", "", "elif", "\"CONTRADICT\"", "in", "stances", ":", "\n", "                        ", "stance", "=", "\"CONTRADICT\"", "\n", "", "else", ":", "\n", "                        ", "stance", "=", "\"NEI\"", "\n", "", "", "else", ":", "\n", "                    ", "evidence_sentence_idx", "=", "{", "}", "\n", "stance", "=", "\"NEI\"", "\n", "still_include", "=", "random", ".", "random", "(", ")", "<", "negative_paragraph_sample_ratio", "\n", "\n", "", "if", "stance", "!=", "\"NEI\"", "or", "still_include", ":", "\n", "                    ", "sentences", ",", "labels", "=", "sample_negative_sentence", "(", "doc", "[", "'abstract'", "]", ",", "evidence_sentence_idx", ",", "\n", "negative_paragraph_sample_ratio", ")", "\n", "\n", "self", ".", "true_pairs", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "sentences", ",", "\n", "'label'", ":", "labels", ",", "\n", "'stance'", ":", "stance", "\n", "}", ")", "\n", "\n", "\n", "\n", "n_paragraph_slices", "=", "len", "(", "sentences", ")", "//", "MAX_SEQ_LEN", "\n", "n_paragraph_slices", "+=", "1", "if", "len", "(", "sentences", ")", "%", "MAX_SEQ_LEN", ">", "0", "else", "0", "\n", "self", ".", "n_paragraph_slices", "+=", "n_paragraph_slices", "\n", "\n", "for", "p_slice", "in", "range", "(", "n_paragraph_slices", ")", ":", "\n", "                        ", "this_slice", "=", "sentences", "[", "p_slice", "*", "MAX_SEQ_LEN", ":", "(", "p_slice", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "padded_paragraph", "=", "this_slice", "+", "[", "\"\"", "for", "i", "in", "range", "(", "CHUNK_SIZE", "*", "n_pieces", "-", "len", "(", "this_slice", ")", ")", "]", "\n", "for", "p", "in", "range", "(", "n_pieces", ")", ":", "\n", "                            ", "this_piece", "=", "padded_paragraph", "[", "p", "*", "CHUNK_SIZE", ":", "(", "p", "+", "1", ")", "*", "CHUNK_SIZE", "]", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "this_piece", ")", ":", "\n", "                                ", "sentence_id", "=", "i", "+", "p", "*", "CHUNK_SIZE", "+", "p_slice", "*", "MAX_SEQ_LEN", "\n", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "                                    ", "label", "=", "1", "if", "sentence_id", "in", "evidence_sentence_idx", "else", "0", "\n", "mask", "=", "1", "\n", "sentence_stance", "=", "self", ".", "stance_ind", "[", "stance", "]", "if", "label", "==", "1", "else", "self", ".", "stance_ind", "[", "\"NEI\"", "]", "\n", "", "else", ":", "\n", "                                    ", "label", "=", "0", "\n", "mask", "=", "0", "\n", "sentence_stance", "=", "self", ".", "stance_ind", "[", "\"NEI\"", "]", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'sentence_id'", ":", "sentence_id", ",", "\n", "'label'", ":", "label", ",", "\n", "'sentence_stance'", ":", "sentence_stance", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "stance", "]", ",", "\n", "'mask'", ":", "mask", "\n", "}", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "                    ", "self", ".", "excluded_pairs", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "doc", "[", "'abstract'", "]", ",", "\n", "'label'", ":", "[", "1", "if", "i", "in", "evidence_sentence_idx", "else", "0", "for", "i", "in", "range", "(", "len", "(", "doc", "[", "'abstract'", "]", ")", ")", "]", ",", "\n", "'stance'", ":", "stance", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactSubParagraphDataset.__make_shuffle_idx": [[209, 212], ["random.shuffle", "range"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.kgat.data_loader.DataLoaderTest.shuffle"], ["", "", "", "", "def", "__make_shuffle_idx", "(", "self", ")", ":", "\n", "        ", "self", ".", "paragraph_indices", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "n_paragraph_slices", ")", "]", "\n", "random", ".", "shuffle", "(", "self", ".", "paragraph_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactSubParagraphDataset.__len__": [[213, 215], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactSubParagraphDataset.__getitem__": [[216, 230], ["dataset.SciFactSubParagraphDataset.__make_shuffle_idx"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactSubParagraphDataset.__make_shuffle_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "self", ".", "__make_shuffle_idx", "(", ")", "\n", "\n", "", "paragraph_idx", "=", "idx", "//", "self", ".", "MAX_SEQ_LEN", "\n", "offset", "=", "idx", "%", "self", ".", "MAX_SEQ_LEN", "\n", "\n", "original_idx", "=", "self", ".", "paragraph_indices", "[", "paragraph_idx", "]", "*", "self", ".", "MAX_SEQ_LEN", "+", "offset", "\n", "\n", "", "else", ":", "\n", "            ", "original_idx", "=", "idx", "\n", "\n", "", "return", "self", ".", "samples", "[", "original_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphDataset.__init__": [[235, 308], ["range", "jsonlines.open", "len", "enumerate", "dataset.SciFactParagraphDataset.label_ind.items", "dataset.SciFactParagraphDataset.stance_ind.items", "jsonlines.open", "str", "kept_sentences.append", "kept_labels.append", "set", "dataset.SciFactParagraphDataset.__init__.sample_negative_sentence"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ",", "train", "=", "False", ",", "negative_paragraph_sample_ratio", "=", "1", ",", "negative_sentence_sample_ratio", "=", "1", ",", "N_sample", "=", "1", ")", ":", "\n", "\n", "        ", "def", "sample_negative_sentence", "(", "sentences", ",", "rationale_labels", ",", "negative_paragraph_sample_ratio", ")", ":", "\n", "            ", "kept_sentences", "=", "[", "]", "\n", "kept_labels", "=", "[", "]", "\n", "while", "len", "(", "kept_sentences", ")", "==", "0", ":", "# Avoid empty sentences returned", "\n", "                ", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "                    ", "if", "i", "in", "rationale_labels", "or", "random", ".", "random", "(", ")", "<", "negative_paragraph_sample_ratio", ":", "\n", "                        ", "kept_sentences", ".", "append", "(", "sentence", ")", "\n", "kept_labels", ".", "append", "(", "i", "in", "rationale_labels", ")", "\n", "", "", "", "return", "kept_sentences", ",", "kept_labels", "\n", "\n", "", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"SUPPORT\"", ":", "1", ",", "\"CONTRADICT\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "\n", "for", "N", "in", "range", "(", "N_sample", ")", ":", "\n", "            ", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "                ", "for", "doc_id", "in", "claim", "[", "\"cited_doc_ids\"", "]", ":", "\n", "                    ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "\n", "if", "\"discourse\"", "in", "doc", ":", "\n", "                        ", "abstract_sentences", "=", "[", "discourse", "+", "\" \"", "+", "sentence", "for", "discourse", ",", "sentence", "in", "zip", "(", "doc", "[", "'discourse'", "]", ",", "doc", "[", "'abstract'", "]", ")", "]", "\n", "", "else", ":", "\n", "                        ", "abstract_sentences", "=", "doc", "[", "'abstract'", "]", "\n", "\n", "", "if", "doc_id", "in", "claim", "[", "'evidence'", "]", ":", "\n", "                        ", "evidence", "=", "claim", "[", "'evidence'", "]", "[", "doc_id", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "stances", "=", "set", "(", "[", "es", "[", "\"label\"", "]", "for", "es", "in", "evidence", "]", ")", "\n", "still_include", "=", "False", "\n", "if", "\"SUPPORT\"", "in", "stances", ":", "\n", "                            ", "stance", "=", "\"SUPPORT\"", "\n", "", "elif", "\"CONTRADICT\"", "in", "stances", ":", "\n", "                            ", "stance", "=", "\"CONTRADICT\"", "\n", "", "else", ":", "\n", "                            ", "stance", "=", "\"NEI\"", "\n", "", "", "else", ":", "\n", "                        ", "evidence_sentence_idx", "=", "{", "}", "\n", "stance", "=", "\"NEI\"", "\n", "still_include", "=", "random", ".", "random", "(", ")", "<", "negative_paragraph_sample_ratio", "\n", "\n", "", "if", "stance", "!=", "\"NEI\"", "or", "still_include", ":", "\n", "                        ", "selected_sentences", ",", "selected_labels", "=", "sample_negative_sentence", "(", "\n", "abstract_sentences", ",", "evidence_sentence_idx", ",", "negative_sentence_sample_ratio", ")", "\n", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "selected_sentences", ",", "\n", "'label'", ":", "selected_labels", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "stance", "]", "\n", "}", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "self", ".", "excluded_pairs", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "abstract_sentences", ",", "\n", "'label'", ":", "[", "1", "if", "i", "in", "evidence_sentence_idx", "else", "0", "for", "i", "in", "range", "(", "len", "(", "doc", "[", "'abstract'", "]", ")", ")", "]", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "stance", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphDataset.__len__": [[310, 312], ["len"], "methods", ["None"], ["", "", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphDataset.__getitem__": [[313, 315], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactStancePredictionDataset.__init__": [[320, 358], ["zip", "jsonlines.open", "jsonlines.open", "sum", "dataset.SciFactStancePredictionDataset.label_ind.items", "dataset.SciFactStancePredictionDataset.stance_ind.items", "jsonlines.open", "dataset.SciFactStancePredictionDataset.excluded_pairs.append", "len", "str", "rationale[].items", "len", "enumerate", "util.clean_num", "dataset.SciFactStancePredictionDataset.samples.append", "int", "util.clean_url", "selected_sentences.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url"], ["def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ",", "rationales", ":", "str", ",", "sep_token", "=", "\"</s>\"", ")", ":", "\n", "        ", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"SUPPORT\"", ":", "1", ",", "\"CONTRADICT\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "\n", "for", "claim", ",", "rationale", "in", "zip", "(", "jsonlines", ".", "open", "(", "claims", ")", ",", "jsonlines", ".", "open", "(", "rationales", ")", ")", ":", "\n", "            ", "N_rationale", "=", "sum", "(", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "rationale", "[", "\"evidence\"", "]", ".", "items", "(", ")", "]", ")", "\n", "if", "N_rationale", ">", "0", ":", "\n", "                ", "for", "doc_id", "in", "rationale", "[", "\"evidence\"", "]", ":", "\n", "                    ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "evidence_sentence_idx", "=", "rationale", "[", "\"evidence\"", "]", "[", "doc_id", "]", "\n", "if", "len", "(", "evidence_sentence_idx", ")", ">", "0", ":", "\n", "                        ", "selected_sentences", "=", "[", "]", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", "[", "'abstract'", "]", ")", ":", "\n", "                            ", "if", "i", "in", "evidence_sentence_idx", ":", "\n", "                                ", "selected_sentences", ".", "append", "(", "sentence", ")", "\n", "\n", "", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "selected_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", "\n", "}", ")", "\n", "", "", "", "else", ":", "\n", "                ", "self", ".", "excluded_pairs", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactStancePredictionDataset.__len__": [[361, 363], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactStancePredictionDataset.__getitem__": [[364, 366], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERParagraphDataset.__init__": [[371, 400], ["jsonlines.open", "dataset.FEVERParagraphDataset.label_ind.items", "dataset.FEVERParagraphDataset.stance_ind.items", "len", "set", "dataset.FEVERParagraphDataset.samples.append", "dataset.FEVERParagraphDataset.nei_pairs.append", "rationales.extend", "range", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["def", "__init__", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NOT ENOUGH INFO\"", ":", "0", ",", "\"SUPPORTS\"", ":", "1", ",", "\"REFUTES\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "nei_pairs", "=", "[", "]", "\n", "\n", "for", "data", "in", "jsonlines", ".", "open", "(", "data_path", ")", ":", "\n", "            ", "if", "len", "(", "data", "[", "\"sentences\"", "]", ")", ">", "0", ":", "\n", "                ", "rationales", "=", "[", "]", "\n", "for", "evid", "in", "data", "[", "\"evidence_sets\"", "]", ":", "\n", "                    ", "rationales", ".", "extend", "(", "evid", ")", "\n", "", "evidence_idx", "=", "set", "(", "rationales", ")", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "data", "[", "\"sentences\"", "]", ",", "\n", "'label'", ":", "[", "1", "if", "i", "in", "evidence_idx", "else", "0", "for", "i", "in", "range", "(", "len", "(", "data", "[", "\"sentences\"", "]", ")", ")", "]", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "data", "[", "\"label\"", "]", "]", "\n", "}", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "nei_pairs", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERParagraphDataset.__len__": [[402, 404], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERParagraphDataset.__getitem__": [[405, 407], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFact_FEVER_Dataset.__init__": [[409, 416], ["len", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset1", ",", "dataset2", ",", "multiplier", "=", "1", ")", ":", "\n", "        ", "if", "len", "(", "dataset1", ")", "<", "len", "(", "dataset2", ")", ":", "\n", "            ", "self", ".", "samples", "=", "dataset1", ".", "samples", "*", "multiplier", "+", "dataset2", ".", "samples", "\n", "", "elif", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "            ", "self", ".", "samples", "=", "dataset1", ".", "samples", "+", "dataset2", ".", "samples", "*", "multiplier", "\n", "", "else", ":", "\n", "            ", "self", ".", "samples", "=", "dataset1", ".", "samples", "+", "dataset2", ".", "samples", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFact_FEVER_Dataset.__len__": [[416, 418], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFact_FEVER_Dataset.__getitem__": [[419, 421], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.Multiple_SciFact_Dataset.__init__": [[423, 425], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "multiplier", "=", "1", ")", ":", "\n", "        ", "self", ".", "samples", "=", "dataset", ".", "samples", "*", "multiplier", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.Multiple_SciFact_Dataset.__len__": [[425, 427], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.Multiple_SciFact_Dataset.__getitem__": [[428, 430], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphBatchDataset.__init__": [[435, 525], ["jsonlines.open", "dataset.SciFactParagraphBatchDataset.label_ind.items", "dataset.SciFactParagraphBatchDataset.stance_ind.items", "jsonlines.open", "int", "sorted", "str", "int", "list", "range", "dataset.SciFactParagraphBatchDataset.samples.append", "list", "set", "int", "sent.strip", "util.clean_num", "dataset.SciFactParagraphBatchDataset.samples.append", "claim[].keys", "sentence.strip", "zip", "set", "util.clean_url", "dataset.SciFactParagraphBatchDataset.downsample", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphBatchDataset.downsample"], ["def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ",", "sep_token", "=", "\"</s>\"", ",", "k", "=", "0", ",", "train", "=", "True", ",", "dummy", "=", "True", ",", "\n", "downsample_n", "=", "0", ",", "downsample_p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"SUPPORT\"", ":", "1", ",", "\"CONTRADICT\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "if", "k", ">", "0", "and", "\"retrieved_doc_ids\"", "in", "claim", ":", "\n", "                ", "candidates", "=", "claim", "[", "\"retrieved_doc_ids\"", "]", "[", ":", "k", "]", "\n", "", "else", ":", "\n", "                ", "candidates", "=", "claim", "[", "\"cited_doc_ids\"", "]", "\n", "", "candidates", "=", "[", "int", "(", "cand", ")", "for", "cand", "in", "candidates", "]", "\n", "if", "train", ":", "\n", "                ", "evidence_doc_ids", "=", "[", "int", "(", "ID", ")", "for", "ID", "in", "list", "(", "claim", "[", "'evidence'", "]", ".", "keys", "(", ")", ")", "]", "\n", "all_candidates", "=", "sorted", "(", "list", "(", "set", "(", "candidates", "+", "evidence_doc_ids", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "all_candidates", "=", "candidates", "\n", "\n", "", "for", "doc_id", "in", "all_candidates", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "\n", "if", "\"discourse\"", "in", "doc", ":", "\n", "                    ", "abstract_sentences", "=", "[", "discourse", "+", "\" \"", "+", "sentence", ".", "strip", "(", ")", "for", "discourse", ",", "sentence", "in", "zip", "(", "doc", "[", "'discourse'", "]", ",", "doc", "[", "'abstract'", "]", ")", "]", "\n", "", "else", ":", "\n", "                    ", "abstract_sentences", "=", "[", "sent", ".", "strip", "(", ")", "for", "sent", "in", "doc", "[", "'abstract'", "]", "]", "\n", "\n", "", "if", "train", ":", "\n", "                    ", "for", "down_n", "in", "range", "(", "downsample_n", "+", "1", ")", ":", "\n", "                        ", "if", "doc_id", "in", "claim", "[", "'evidence'", "]", ":", "\n", "                            ", "evidence", "=", "claim", "[", "'evidence'", "]", "[", "doc_id", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "stances", "=", "set", "(", "[", "es", "[", "\"label\"", "]", "for", "es", "in", "evidence", "]", ")", "\n", "\n", "if", "\"SUPPORT\"", "in", "stances", ":", "\n", "                                ", "stance", "=", "\"SUPPORT\"", "\n", "", "elif", "\"CONTRADICT\"", "in", "stances", ":", "\n", "                                ", "stance", "=", "\"CONTRADICT\"", "\n", "", "else", ":", "\n", "                                ", "stance", "=", "\"NEI\"", "\n", "\n", "", "if", "down_n", ">", "0", ":", "\n", "                                ", "abstract_sentences", ",", "evidence_sentence_idx", ",", "stance", "=", "self", ".", "downsample", "(", "abstract_sentences", ",", "evidence_sentence_idx", ",", "stance", ",", "downsample_p", ")", "\n", "if", "len", "(", "abstract_sentences", ")", "==", "0", ":", "\n", "                                    ", "break", "\n", "\n", "", "", "", "else", ":", "\n", "                            ", "evidence_sentence_idx", "=", "{", "}", "\n", "stance", "=", "\"NEI\"", "\n", "\n", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "abstract_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "rationale_label_string", "=", "\"\"", ".", "join", "(", "[", "\"1\"", "if", "i", "in", "evidence_sentence_idx", "else", "\"0\"", "for", "i", "in", "range", "(", "len", "(", "abstract_sentences", ")", ")", "]", ")", "\n", "\n", "if", "dummy", ":", "\n", "                            ", "concat_sentences", "=", "\"@ \"", "+", "sep_token", "+", "\" \"", "+", "concat_sentences", "\n", "rationale_label_string", "=", "\"0\"", "+", "rationale_label_string", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "stance", "]", "\n", "}", ")", "\n", "\n", "if", "doc_id", "not", "in", "claim", "[", "'evidence'", "]", ":", "\n", "                            ", "break", "# Do not downsample if contain no evidence", "\n", "", "", "", "else", ":", "\n", "                    ", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "abstract_sentences", ")", "\n", "\n", "if", "dummy", ":", "\n", "                        ", "concat_sentences", "=", "\"@ \"", "+", "sep_token", "+", "\" \"", "+", "concat_sentences", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphBatchDataset.downsample": [[527, 543], ["enumerate", "enumerate", "set", "random.random", "kept_sentences.append", "kept_evidence_idx.append", "len", "evidence_bitmap.append", "evidence_bitmap.append"], "methods", ["None"], ["", "", "", "", "def", "downsample", "(", "self", ",", "abstract_sentences", ",", "evidence_sentence_idx", ",", "stance", ",", "downsample_p", ")", ":", "\n", "        ", "kept_sentences", "=", "[", "]", "\n", "evidence_bitmap", "=", "[", "]", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "abstract_sentences", ")", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "downsample_p", ":", "\n", "                ", "kept_sentences", ".", "append", "(", "sentence", ")", "\n", "if", "i", "in", "evidence_sentence_idx", ":", "\n", "                    ", "evidence_bitmap", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "evidence_bitmap", ".", "append", "(", "False", ")", "\n", "", "", "", "kept_evidence_idx", "=", "[", "]", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "evidence_bitmap", ")", ":", "\n", "            ", "if", "e", ":", "\n", "                ", "kept_evidence_idx", ".", "append", "(", "i", ")", "\n", "", "", "kept_stance", "=", "stance", "if", "len", "(", "kept_evidence_idx", ")", ">", "0", "else", "\"NEI\"", "\n", "return", "kept_sentences", ",", "set", "(", "kept_evidence_idx", ")", ",", "kept_stance", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphBatchDataset.__len__": [[544, 546], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactParagraphBatchDataset.__getitem__": [[547, 549], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERParagraphBatchDataset.__init__": [[554, 640], ["jsonlines.open", "max", "dataset.FEVERParagraphBatchDataset.label_ind.items", "dataset.FEVERParagraphBatchDataset.stance_ind.items", "len", "len", "util.clean_num", "len", "sent.split", "util.clean_url", "set", "dataset.FEVERParagraphBatchDataset.samples.append", "util.clean_num", "dataset.FEVERParagraphBatchDataset.__init__.max_sent_len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num"], ["def", "__init__", "(", "self", ",", "datapath", ":", "str", ",", "sep_token", "=", "\"</s>\"", ",", "train", "=", "True", ",", "k", "=", "0", ",", "dummy", "=", "True", ")", ":", "\n", "        ", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NOT ENOUGH INFO\"", ":", "0", ",", "\"SUPPORTS\"", ":", "1", ",", "\"REFUTES\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "\n", "def", "max_sent_len", "(", "sentences", ")", ":", "\n", "            ", "return", "max", "(", "[", "len", "(", "sent", ".", "split", "(", ")", ")", "for", "sent", "in", "sentences", "]", ")", "\n", "\n", "", "for", "data", "in", "jsonlines", ".", "open", "(", "datapath", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "len", "(", "data", "[", "\"sentences\"", "]", ")", ">", "0", ":", "\n", "                    ", "sentences", "=", "data", "[", "\"sentences\"", "]", "\n", "if", "max_sent_len", "(", "sentences", ")", ">", "100", "or", "len", "(", "sentences", ")", ">", "100", ":", "\n", "                        ", "continue", "\n", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "if", "train", ":", "\n", "                        ", "rationales", "=", "[", "]", "\n", "for", "evid", "in", "data", "[", "\"evidence_sets\"", "]", ":", "\n", "                            ", "rationales", ".", "extend", "(", "evid", ")", "\n", "", "evidence_idx", "=", "set", "(", "rationales", ")", "\n", "rationale_label_string", "=", "\"\"", ".", "join", "(", "[", "\"1\"", "if", "i", "in", "evidence_idx", "else", "\"0\"", "for", "i", "in", "range", "(", "len", "(", "sentences", ")", ")", "]", ")", "\n", "\n", "if", "dummy", ":", "\n", "                            ", "concat_sentences", "=", "\"@ \"", "+", "sep_token", "+", "\" \"", "+", "concat_sentences", "\n", "rationale_label_string", "=", "\"0\"", "+", "rationale_label_string", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "data", "[", "\"label\"", "]", "]", "\n", "}", ")", "\n", "", "elif", "data", "[", "\"hit\"", "]", ":", "# The retrieved pages hit the gold page.", "\n", "                        ", "if", "dummy", ":", "\n", "                            ", "concat_sentences", "=", "\"@ \"", "+", "sep_token", "+", "\" \"", "+", "concat_sentences", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", "\n", "}", ")", "\n", "", "", "", "except", ":", "\n", "                ", "pass", "\n", "", "try", ":", "\n", "                ", "if", "len", "(", "data", "[", "\"negative_sentences\"", "]", ")", ">", "0", ":", "\n", "                    ", "for", "sentences", "in", "data", "[", "\"negative_sentences\"", "]", "[", ":", "k", "]", ":", "\n", "                        ", "if", "max_sent_len", "(", "sentences", ")", ">", "100", "or", "len", "(", "sentences", ")", ">", "100", ":", "\n", "                            ", "continue", "\n", "\n", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "\n", "if", "train", ":", "\n", "                            ", "rationale_label_string", "=", "\"0\"", "*", "len", "(", "sentences", ")", "\n", "\n", "if", "dummy", ":", "\n", "                                ", "concat_sentences", "=", "\"@ \"", "+", "sep_token", "+", "\" \"", "+", "concat_sentences", "\n", "rationale_label_string", "=", "\"0\"", "+", "rationale_label_string", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "\"NOT ENOUGH INFO\"", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "                            ", "if", "dummy", ":", "\n", "                                ", "concat_sentences", "=", "\"@ \"", "+", "sep_token", "+", "\" \"", "+", "concat_sentences", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", "\n", "}", ")", "\n", "", "", "", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERParagraphBatchDataset.__len__": [[641, 643], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERParagraphBatchDataset.__getitem__": [[644, 646], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactStanceDataset.__init__": [[651, 792], ["jsonlines.open", "sorted", "dataset.SciFactStanceDataset.label_ind.items", "dataset.SciFactStanceDataset.stance_ind.items", "jsonlines.open", "int", "int", "list", "set().difference", "str", "list", "set", "set", "random.sample", "util.clean_num", "dataset.SciFactStanceDataset.samples.append", "dataset.SciFactStanceDataset.samples.append", "claim[].keys", "set", "int", "sent.strip", "set", "set", "len", "dataset.SciFactStanceDataset.samples.append", "range", "util.clean_num", "dataset.SciFactStanceDataset.samples.append", "set", "abstract_sentences[].strip", "util.clean_url", "len", "len", "range", "util.clean_num", "zip", "set", "len", "util.clean_url", "len", "range", "util.clean_num", "dataset.SciFactStanceDataset.samples.append", "range", "min", "sorted", "len", "util.clean_url", "evidence_sentences.append", "len", "util.clean_url", "len", "len", "random.randint", "len", "list", "evidence_sentences.append", "evidence_sentences.append"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url"], ["def", "__init__", "(", "self", ",", "corpus", ":", "str", ",", "claims", ":", "str", ",", "sep_token", "=", "\"</s>\"", ",", "k", "=", "0", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"SUPPORT\"", ":", "1", ",", "\"CONTRADICT\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "corpus", "=", "{", "doc", "[", "'doc_id'", "]", ":", "doc", "for", "doc", "in", "jsonlines", ".", "open", "(", "corpus", ")", "}", "\n", "\n", "for", "claim", "in", "jsonlines", ".", "open", "(", "claims", ")", ":", "\n", "            ", "if", "k", ">", "0", "and", "\"retrieved_doc_ids\"", "in", "claim", ":", "\n", "                ", "candidates", "=", "claim", "[", "\"retrieved_doc_ids\"", "]", "[", ":", "k", "]", "\n", "", "else", ":", "\n", "                ", "candidates", "=", "claim", "[", "\"cited_doc_ids\"", "]", "\n", "\n", "", "candidates", "=", "[", "int", "(", "cand", ")", "for", "cand", "in", "candidates", "]", "\n", "evidence_doc_ids", "=", "[", "int", "(", "ID", ")", "for", "ID", "in", "list", "(", "claim", "[", "'evidence'", "]", ".", "keys", "(", ")", ")", "]", "\n", "all_candidates", "=", "sorted", "(", "list", "(", "set", "(", "candidates", "+", "evidence_doc_ids", ")", ")", ")", "\n", "if", "not", "train", ":", "\n", "                ", "missed_doc_ids", "=", "set", "(", "all_candidates", ")", ".", "difference", "(", "set", "(", "candidates", ")", ")", "\n", "all_candidates", "=", "candidates", "\n", "# Add missed_candidate to excluded_pairs?", "\n", "\n", "", "for", "doc_id", "in", "all_candidates", ":", "\n", "                ", "doc", "=", "corpus", "[", "int", "(", "doc_id", ")", "]", "\n", "doc_id", "=", "str", "(", "doc_id", ")", "\n", "\n", "if", "\"discourse\"", "in", "doc", ":", "\n", "                    ", "abstract_sentences", "=", "[", "discourse", "+", "\" \"", "+", "sentence", "for", "discourse", ",", "sentence", "in", "zip", "(", "doc", "[", "'discourse'", "]", ",", "doc", "[", "'abstract'", "]", ")", "]", "\n", "", "else", ":", "\n", "                    ", "abstract_sentences", "=", "[", "sent", ".", "strip", "(", ")", "for", "sent", "in", "doc", "[", "'abstract'", "]", "]", "\n", "\n", "", "if", "train", ":", "\n", "                    ", "if", "doc_id", "in", "claim", "[", "'evidence'", "]", ":", "\n", "                        ", "evidence", "=", "claim", "[", "'evidence'", "]", "[", "doc_id", "]", "\n", "evidence_sentence_idx", "=", "{", "s", "for", "es", "in", "evidence", "for", "s", "in", "es", "[", "'sentences'", "]", "}", "\n", "evidence_sentence_idx_sets", "=", "[", "set", "(", "es", "[", "'sentences'", "]", ")", "for", "es", "in", "evidence", "]", "\n", "stances", "=", "set", "(", "[", "es", "[", "\"label\"", "]", "for", "es", "in", "evidence", "]", ")", "\n", "if", "\"SUPPORT\"", "in", "stances", ":", "\n", "                            ", "stance", "=", "\"SUPPORT\"", "\n", "", "elif", "\"CONTRADICT\"", "in", "stances", ":", "\n", "                            ", "stance", "=", "\"CONTRADICT\"", "\n", "", "else", ":", "\n", "                            ", "stance", "=", "\"NEI\"", "\n", "", "", "else", ":", "\n", "                        ", "evidence_sentence_idx", "=", "set", "(", "[", "]", ")", "\n", "stance", "=", "\"NEI\"", "\n", "\n", "", "if", "len", "(", "evidence_sentence_idx", ")", "==", "0", ":", "\n", "                        ", "concat_sentences", "=", "\"@\"", "\n", "rationale_label_string", "=", "\"0\"", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "\"NEI\"", "]", "\n", "}", ")", "\n", "\n", "", "else", ":", "\n", "# Full-evidence sentences", "\n", "                        ", "evidence_sentences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "abstract_sentences", ")", ")", ":", "\n", "                            ", "if", "i", "in", "evidence_sentence_idx", ":", "\n", "                                ", "evidence_sentences", ".", "append", "(", "abstract_sentences", "[", "i", "]", ")", "\n", "", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "evidence_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "rationale_label_string", "=", "\"1\"", "*", "len", "(", "evidence_sentence_idx", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "stance", "]", "\n", "}", ")", "\n", "\n", "# Each evidence sentence set", "\n", "for", "es_idx", "in", "evidence_sentence_idx_sets", ":", "\n", "                            ", "evidence_sentences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "abstract_sentences", ")", ")", ":", "\n", "                                ", "if", "i", "in", "es_idx", ":", "\n", "                                    ", "evidence_sentences", ".", "append", "(", "abstract_sentences", "[", "i", "]", ")", "\n", "", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "evidence_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "rationale_label_string", "=", "\"1\"", "*", "len", "(", "evidence_sentence_idx", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "stance", "]", "\n", "}", ")", "\n", "\n", "# Negative sentences for both positive and negative paragraphs", "\n", "", "", "non_rationale_idx", "=", "set", "(", "range", "(", "len", "(", "abstract_sentences", ")", ")", ")", "-", "evidence_sentence_idx", "\n", "non_rationale_idx", "=", "random", ".", "sample", "(", "non_rationale_idx", ",", "\n", "k", "=", "min", "(", "random", ".", "randint", "(", "1", ",", "3", ")", ",", "len", "(", "non_rationale_idx", ")", ")", ")", "\n", "non_rationale_sentences", "=", "[", "abstract_sentences", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "sorted", "(", "list", "(", "non_rationale_idx", ")", ")", "]", "\n", "\n", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "non_rationale_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "rationale_label_string", "=", "\"0\"", "*", "len", "(", "non_rationale_sentences", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "\"NEI\"", "]", "\n", "}", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "if", "len", "(", "evidence_sentence_idx", ")", "==", "0", ":", "\n", "                        ", "concat_sentences", "=", "\"@\"", "\n", "", "else", ":", "\n", "                        ", "evidence_sentences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "abstract_sentences", ")", ")", ":", "\n", "                            ", "if", "i", "in", "evidence_sentence_idx", ":", "\n", "                                ", "evidence_sentences", ".", "append", "(", "abstract_sentences", "[", "i", "]", ")", "\n", "", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "evidence_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "\n", "", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactStanceDataset.__len__": [[795, 797], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.SciFactStanceDataset.__getitem__": [[798, 800], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__init__": [[805, 897], ["jsonlines.open", "max", "dataset.FEVERStanceDataset.label_ind.items", "dataset.FEVERStanceDataset.stance_ind.items", "len", "len", "sent.strip().split", "sent.strip", "set", "range", "util.clean_num", "dataset.FEVERStanceDataset.samples.append", "random.sample", "util.clean_num", "dataset.FEVERStanceDataset.samples.append", "dataset.FEVERStanceDataset.__init__.max_sent_len"], "methods", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num"], ["def", "__init__", "(", "self", ",", "datapath", ":", "str", ",", "sep_token", "=", "\"</s>\"", ",", "train", "=", "True", ",", "k", "=", "0", ")", ":", "\n", "        ", "self", ".", "label_ind", "=", "{", "\"NEI\"", ":", "0", ",", "\"rationale\"", ":", "1", "}", "\n", "self", ".", "rev_label_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "label_ind", ".", "items", "(", ")", "}", "\n", "self", ".", "stance_ind", "=", "{", "\"NOT ENOUGH INFO\"", ":", "0", ",", "\"SUPPORTS\"", ":", "1", ",", "\"REFUTES\"", ":", "2", "}", "\n", "self", ".", "rev_stance_ind", "=", "{", "i", ":", "l", "for", "(", "l", ",", "i", ")", "in", "self", ".", "stance_ind", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "excluded_pairs", "=", "[", "]", "\n", "\n", "def", "max_sent_len", "(", "sentences", ")", ":", "\n", "            ", "return", "max", "(", "[", "len", "(", "sent", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "for", "sent", "in", "sentences", "]", ")", "\n", "\n", "", "for", "data", "in", "jsonlines", ".", "open", "(", "datapath", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "len", "(", "data", "[", "\"sentences\"", "]", ")", ">", "0", ":", "\n", "                    ", "sentences", "=", "[", "sent", ".", "strip", "(", ")", "for", "sent", "in", "data", "[", "\"sentences\"", "]", "]", "\n", "if", "max_sent_len", "(", "sentences", ")", ">", "100", "or", "len", "(", "sentences", ")", ">", "100", ":", "\n", "                        ", "continue", "\n", "\n", "", "if", "train", ":", "\n", "                        ", "rationales", "=", "[", "]", "\n", "rationale_sets", "=", "[", "]", "\n", "for", "evid", "in", "data", "[", "\"evidence_sets\"", "]", ":", "\n", "                            ", "rationales", ".", "extend", "(", "evid", ")", "\n", "rationale_sets", ".", "append", "(", "set", "(", "evid", ")", ")", "\n", "", "evidence_idx", "=", "set", "(", "rationales", ")", "\n", "evidence_sentences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentences", ")", ")", ":", "\n", "                            ", "if", "i", "in", "evidence_idx", ":", "\n", "                                ", "evidence_sentences", ".", "append", "(", "sentences", "[", "i", "]", ")", "\n", "\n", "# Full evidence sentencees", "\n", "", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "evidence_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "data", "[", "\"label\"", "]", "]", "\n", "}", ")", "\n", "\n", "# For each evidence set", "\n", "for", "evidence_set_idx", "in", "rationale_sets", ":", "\n", "                            ", "evidence_idx", "=", "set", "(", "evidence_set_idx", ")", "\n", "evidence_sentences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentences", ")", ")", ":", "\n", "                                ", "if", "i", "in", "evidence_idx", ":", "\n", "                                    ", "evidence_sentences", ".", "append", "(", "sentences", "[", "i", "]", ")", "\n", "\n", "", "", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "evidence_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "data", "[", "\"label\"", "]", "]", "\n", "}", ")", "\n", "\n", "# Negative sentences for both positive and negative paragraphs", "\n", "", "non_rationale_idx", "=", "set", "(", "range", "(", "len", "(", "sentences", ")", ")", ")", "-", "evidence_idx", "\n", "non_rationale_idx", "=", "random", ".", "sample", "(", "non_rationale_idx", ",", "\n", "k", "=", "min", "(", "random", ".", "randint", "(", "1", ",", "3", ")", ",", "len", "(", "non_rationale_idx", ")", ")", ")", "\n", "non_rationale_sentences", "=", "[", "sentences", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "sorted", "(", "list", "(", "non_rationale_idx", ")", ")", "]", "\n", "\n", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "non_rationale_sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "1", ",", "\n", "'claim'", ":", "claim", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "claim", "[", "'id'", "]", ",", "\n", "'doc_id'", ":", "doc", "[", "'doc_id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", ",", "\n", "'label'", ":", "rationale_label_string", ",", "\n", "'stance'", ":", "self", ".", "stance_ind", "[", "\"NOT ENOUGH INFO\"", "]", "\n", "}", ")", "\n", "\n", "", "elif", "data", "[", "\"hit\"", "]", ":", "# The retrieved pages hit the gold page.", "\n", "                        ", "concat_sentences", "=", "(", "\" \"", "+", "sep_token", "+", "\" \"", ")", ".", "join", "(", "sentences", ")", "\n", "concat_sentences", "=", "clean_num", "(", "clean_url", "(", "concat_sentences", ")", ")", "\n", "self", ".", "samples", ".", "append", "(", "{", "\n", "'dataset'", ":", "0", ",", "\n", "'claim'", ":", "data", "[", "'claim'", "]", ",", "\n", "'claim_id'", ":", "data", "[", "'id'", "]", ",", "\n", "'paragraph'", ":", "concat_sentences", "\n", "}", ")", "\n", "", "", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__len__": [[900, 902], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.dataset.FEVERStanceDataset.__getitem__": [[903, 905], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "idx", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.flatten": [[8, 16], ["array.extend", "array.append"], "function", ["None"], ["def", "flatten", "(", "arrayOfArray", ")", ":", "\n", "    ", "array", "=", "[", "]", "\n", "for", "arr", "in", "arrayOfArray", ":", "\n", "        ", "try", ":", "\n", "            ", "array", ".", "extend", "(", "arr", ")", "\n", "", "except", ":", "\n", "            ", "array", ".", "append", "(", "arr", ")", "\n", "", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.read_passages": [[17, 43], ["codecs.open", "line.strip", "len", "str_seqs.append", "label_seqs.append", "str_seq.append", "len", "str_seqs.append", "label_seqs.append", "line.strip.split", "label_seq.append", "label.strip"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.OutputSplitter.open"], ["", "def", "read_passages", "(", "filename", ",", "is_labeled", ")", ":", "\n", "    ", "str_seqs", "=", "[", "]", "\n", "str_seq", "=", "[", "]", "\n", "label_seqs", "=", "[", "]", "\n", "label_seq", "=", "[", "]", "\n", "for", "line", "in", "codecs", ".", "open", "(", "filename", ",", "\"r\"", ",", "\"utf-8\"", ")", ":", "\n", "        ", "lnstrp", "=", "line", ".", "strip", "(", ")", "\n", "if", "lnstrp", "==", "\"\"", ":", "\n", "            ", "if", "len", "(", "str_seq", ")", "!=", "0", ":", "\n", "                ", "str_seqs", ".", "append", "(", "str_seq", ")", "\n", "str_seq", "=", "[", "]", "\n", "label_seqs", ".", "append", "(", "label_seq", ")", "\n", "label_seq", "=", "[", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "is_labeled", ":", "\n", "                ", "clause", ",", "label", "=", "lnstrp", ".", "split", "(", "\"\\t\"", ")", "\n", "label_seq", ".", "append", "(", "label", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "clause", "=", "lnstrp", "\n", "", "str_seq", ".", "append", "(", "clause", ")", "\n", "", "", "if", "len", "(", "str_seq", ")", "!=", "0", ":", "\n", "        ", "str_seqs", ".", "append", "(", "str_seq", ")", "\n", "str_seq", "=", "[", "]", "\n", "label_seqs", ".", "append", "(", "label_seq", ")", "\n", "label_seq", "=", "[", "]", "\n", "", "return", "str_seqs", ",", "label_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.from_BIO_ind": [[44, 61], ["indices.items", "original_labels.index", "len", "original_labels.append"], "function", ["None"], ["", "def", "from_BIO_ind", "(", "BIO_pred", ",", "BIO_target", ",", "indices", ")", ":", "\n", "    ", "table", "=", "{", "}", "# Make a mapping between the indices of BIO_labels and temporary original label indices", "\n", "original_labels", "=", "[", "]", "\n", "for", "BIO_label", ",", "BIO_index", "in", "indices", ".", "items", "(", ")", ":", "\n", "        ", "if", "BIO_label", "[", ":", "2", "]", "==", "\"I_\"", "or", "BIO_label", "[", ":", "2", "]", "==", "\"B_\"", ":", "\n", "            ", "label", "=", "BIO_label", "[", "2", ":", "]", "\n", "", "else", ":", "\n", "            ", "label", "=", "BIO_label", "\n", "", "if", "label", "in", "original_labels", ":", "\n", "            ", "table", "[", "BIO_index", "]", "=", "original_labels", ".", "index", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "table", "[", "BIO_index", "]", "=", "len", "(", "original_labels", ")", "\n", "original_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "original_pred", "=", "[", "table", "[", "label", "]", "for", "label", "in", "BIO_pred", "]", "\n", "original_target", "=", "[", "table", "[", "label", "]", "for", "label", "in", "BIO_target", "]", "\n", "return", "original_pred", ",", "original_target", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.to_BIO": [[62, 79], ["new_label_seqs.append", "new_label_para.append"], "function", ["None"], ["", "def", "to_BIO", "(", "label_seqs", ")", ":", "\n", "    ", "new_label_seqs", "=", "[", "]", "\n", "for", "label_para", "in", "label_seqs", ":", "\n", "        ", "new_label_para", "=", "[", "]", "\n", "prev", "=", "\"\"", "\n", "for", "label", "in", "label_para", ":", "\n", "            ", "if", "label", "!=", "\"none\"", ":", "# \"none\" is O, remain unchanged.", "\n", "                ", "if", "label", "==", "prev", ":", "\n", "                    ", "new_label", "=", "\"I_\"", "+", "label", "\n", "", "else", ":", "\n", "                    ", "new_label", "=", "\"B_\"", "+", "label", "\n", "", "", "else", ":", "\n", "                ", "new_label", "=", "label", "# \"none\"", "\n", "", "prev", "=", "label", "\n", "new_label_para", ".", "append", "(", "new_label", ")", "\n", "", "new_label_seqs", ".", "append", "(", "new_label_para", ")", "\n", "", "return", "new_label_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.from_BIO": [[80, 92], ["new_label_seqs.append", "new_label_para.append"], "function", ["None"], ["", "def", "from_BIO", "(", "label_seqs", ")", ":", "\n", "    ", "new_label_seqs", "=", "[", "]", "\n", "for", "label_para", "in", "label_seqs", ":", "\n", "        ", "new_label_para", "=", "[", "]", "\n", "for", "label", "in", "label_para", ":", "\n", "            ", "if", "label", "[", ":", "2", "]", "==", "\"I_\"", "or", "label", "[", ":", "2", "]", "==", "\"B_\"", ":", "\n", "                ", "new_label", "=", "label", "[", "2", ":", "]", "\n", "", "else", ":", "\n", "                ", "new_label", "=", "label", "\n", "", "new_label_para", ".", "append", "(", "new_label", ")", "\n", "", "new_label_seqs", ".", "append", "(", "new_label_para", ")", "\n", "", "return", "new_label_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url": [[93, 101], ["re.sub", "re.sub"], "function", ["None"], ["", "def", "clean_url", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n        Clean specific data format from social media\n    \"\"\"", "\n", "# clean urls", "\n", "word", "=", "re", ".", "sub", "(", "r'https? : \\/\\/.*[\\r\\n]*'", ",", "'<URL>'", ",", "word", ")", "\n", "word", "=", "re", ".", "sub", "(", "r'exlink'", ",", "'<URL>'", ",", "word", ")", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num": [[102, 112], ["any", "char.isdigit", "float", "word.replace", "any", "char.isalpha"], "function", ["None"], ["", "def", "clean_num", "(", "word", ")", ":", "\n", "# check if the word contain number and no letters", "\n", "    ", "if", "any", "(", "char", ".", "isdigit", "(", ")", "for", "char", "in", "word", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "num", "=", "float", "(", "word", ".", "replace", "(", "','", ",", "''", ")", ")", "\n", "return", "'@'", "\n", "", "except", ":", "\n", "            ", "if", "not", "any", "(", "char", ".", "isalpha", "(", ")", "for", "char", "in", "word", ")", ":", "\n", "                ", "return", "'@'", "\n", "", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_words": [[114, 129], ["processed_seqs.append", "clause.split", "processed_clauses.append", "util.clean_url", "util.clean_num", "filtered.append"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_url", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.clean_num"], ["", "def", "clean_words", "(", "str_seqs", ")", ":", "\n", "    ", "processed_seqs", "=", "[", "]", "\n", "for", "str_seq", "in", "str_seqs", ":", "\n", "        ", "processed_clauses", "=", "[", "]", "\n", "for", "clause", "in", "str_seq", ":", "\n", "            ", "filtered", "=", "[", "]", "\n", "tokens", "=", "clause", ".", "split", "(", ")", "\n", "for", "word", "in", "tokens", ":", "\n", "                ", "word", "=", "clean_url", "(", "word", ")", "\n", "word", "=", "clean_num", "(", "word", ")", "\n", "filtered", ".", "append", "(", "word", ")", "\n", "", "filtered_clause", "=", "\" \"", ".", "join", "(", "filtered", ")", "\n", "processed_clauses", ".", "append", "(", "filtered_clause", ")", "\n", "", "processed_seqs", ".", "append", "(", "processed_clauses", ")", "\n", "", "return", "processed_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.test_f1": [[130, 144], ["read_passages_original", "util.test_f1.linearize"], "function", ["None"], ["", "def", "test_f1", "(", "test_file", ",", "pred_label_seqs", ")", ":", "\n", "    ", "def", "linearize", "(", "labels", ")", ":", "\n", "        ", "linearized", "=", "[", "]", "\n", "for", "paper", "in", "labels", ":", "\n", "            ", "for", "label", "in", "paper", ":", "\n", "                ", "linearized", ".", "append", "(", "label", ")", "\n", "", "", "return", "linearized", "\n", "", "_", ",", "label_seqs", "=", "read_passages_original", "(", "test_file", ",", "True", ")", "\n", "true_label", "=", "linearize", "(", "label_seqs", ")", "\n", "pred_label", "=", "linearize", "(", "pred_label_seqs", ")", "\n", "\n", "f1", "=", "f1_score", "(", "true_label", ",", "pred_label", ",", "average", "=", "\"weighted\"", ")", "\n", "print", "(", "\"F1 score:\"", ",", "f1", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.postprocess": [[145, 184], ["raw_flattened_output.tolist.tolist", "raw_flattened_labels.tolist.tolist", "util.from_BIO", "util.from_BIO", "paragraph_lens.append", "ground_truth_labels.append", "predict_idx.extend", "gt_tag.extend", "from_BIO.append", "gt_tags.append", "len", "predict_idx.extend", "gt_tag.extend"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.from_BIO", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.from_BIO"], ["", "def", "postprocess", "(", "dataset", ",", "raw_flattened_output", ",", "raw_flattened_labels", ",", "MAX_SEQ_LEN", ")", ":", "\n", "    ", "ground_truth_labels", "=", "[", "]", "\n", "paragraph_lens", "=", "[", "]", "\n", "for", "para", "in", "dataset", ".", "true_pairs", ":", "\n", "        ", "paragraph_lens", ".", "append", "(", "len", "(", "para", "[", "\"paragraph\"", "]", ")", ")", "\n", "ground_truth_labels", ".", "append", "(", "para", "[", "\"label\"", "]", ")", "\n", "\n", "", "raw_flattened_output", "=", "raw_flattened_output", ".", "tolist", "(", ")", "\n", "raw_flattened_labels", "=", "raw_flattened_labels", ".", "tolist", "(", ")", "\n", "batch_i", "=", "0", "\n", "predicted_tags", "=", "[", "]", "\n", "gt_tags", "=", "[", "]", "\n", "for", "length", "in", "paragraph_lens", ":", "\n", "        ", "remaining_len", "=", "length", "\n", "predict_idx", "=", "[", "]", "\n", "gt_tag", "=", "[", "]", "\n", "while", "remaining_len", ">", "MAX_SEQ_LEN", ":", "\n", "            ", "this_batch", "=", "raw_flattened_output", "[", "batch_i", "*", "MAX_SEQ_LEN", ":", "(", "batch_i", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "this_batch_label", "=", "raw_flattened_labels", "[", "batch_i", "*", "MAX_SEQ_LEN", ":", "(", "batch_i", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "predict_idx", ".", "extend", "(", "this_batch", ")", "\n", "gt_tag", ".", "extend", "(", "this_batch_label", ")", "\n", "batch_i", "+=", "1", "\n", "remaining_len", "-=", "MAX_SEQ_LEN", "\n", "\n", "", "this_batch", "=", "raw_flattened_output", "[", "batch_i", "*", "MAX_SEQ_LEN", ":", "(", "batch_i", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "this_batch_label", "=", "raw_flattened_labels", "[", "batch_i", "*", "MAX_SEQ_LEN", ":", "(", "batch_i", "+", "1", ")", "*", "MAX_SEQ_LEN", "]", "\n", "predict_idx", ".", "extend", "(", "this_batch", "[", ":", "remaining_len", "]", ")", "\n", "gt_tag", ".", "extend", "(", "this_batch_label", "[", ":", "remaining_len", "]", ")", "\n", "predict_tag", "=", "[", "dataset", ".", "rev_label_ind", "[", "idx", "]", "for", "idx", "in", "predict_idx", "]", "\n", "gt_tag", "=", "[", "dataset", ".", "rev_label_ind", "[", "idx", "]", "for", "idx", "in", "gt_tag", "]", "\n", "batch_i", "+=", "1", "\n", "predicted_tags", ".", "append", "(", "predict_tag", ")", "\n", "gt_tags", ".", "append", "(", "gt_tag", ")", "\n", "\n", "\n", "", "predicted_tags", "=", "from_BIO", "(", "predicted_tags", ")", "\n", "final_gt", "=", "from_BIO", "(", "gt_tags", ")", "\n", "\n", "return", "predicted_tags", ",", "final_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.stance_postprocess": [[185, 232], ["raw_output.tolist.tolist", "raw_labels.tolist.tolist", "set", "paragraph_lens.append", "ground_truth_labels.append", "predict_idx.append", "combine.append", "util.stance_postprocess.combine"], "function", ["None"], ["", "def", "stance_postprocess", "(", "dataset", ",", "raw_output", ",", "raw_labels", ",", "MAX_SEQ_LEN", ")", ":", "\n", "\n", "    ", "def", "combine", "(", "candidates", ")", ":", "\n", "        ", "assert", "(", "len", "(", "candidates", ")", ">", "0", ")", "\n", "types", "=", "set", "(", "candidates", ")", "\n", "if", "len", "(", "types", ")", "==", "1", ":", "\n", "            ", "return", "list", "(", "types", ")", "[", "0", "]", "\n", "", "elif", "2", "in", "types", ":", "\n", "            ", "return", "2", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "\n", "\n", "", "", "ground_truth_labels", "=", "[", "]", "\n", "paragraph_lens", "=", "[", "]", "\n", "for", "para", "in", "dataset", ".", "true_pairs", ":", "\n", "        ", "paragraph_lens", ".", "append", "(", "len", "(", "para", "[", "\"paragraph\"", "]", ")", ")", "\n", "ground_truth_labels", ".", "append", "(", "para", "[", "\"label\"", "]", ")", "\n", "\n", "", "raw_output", "=", "raw_output", ".", "tolist", "(", ")", "\n", "raw_labels", "=", "raw_labels", ".", "tolist", "(", ")", "\n", "batch_i", "=", "0", "\n", "predicted_tags", "=", "[", "]", "\n", "gt_tags", "=", "[", "]", "\n", "for", "length", "in", "paragraph_lens", ":", "\n", "        ", "remaining_len", "=", "length", "\n", "predict_idx", "=", "[", "]", "\n", "gt_tag", "=", "[", "]", "\n", "while", "remaining_len", ">", "MAX_SEQ_LEN", ":", "\n", "            ", "this_batch", "=", "raw_output", "[", "batch_i", "]", "\n", "this_batch_label", "=", "raw_labels", "[", "batch_i", "]", "\n", "predict_idx", ".", "append", "(", "this_batch", ")", "\n", "gt_tag", ".", "append", "(", "this_batch_label", ")", "\n", "batch_i", "+=", "1", "\n", "remaining_len", "-=", "MAX_SEQ_LEN", "\n", "\n", "", "this_batch", "=", "raw_output", "[", "batch_i", "]", "\n", "this_batch_label", "=", "raw_labels", "[", "batch_i", "]", "\n", "predict_idx", ".", "append", "(", "this_batch", ")", "\n", "gt_tag", ".", "append", "(", "this_batch_label", ")", "\n", "predict_tag", "=", "combine", "(", "predict_idx", ")", "\n", "gt_tag", "=", "combine", "(", "gt_tag", ")", "\n", "batch_i", "+=", "1", "\n", "predicted_tags", ".", "append", "(", "predict_tag", ")", "\n", "gt_tags", ".", "append", "(", "gt_tag", ")", "\n", "\n", "", "return", "predicted_tags", ",", "gt_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.rationale2json": [[233, 255], ["zip", "len", "len", "claim_ids.append", "enumerate", "claims.get", "claim_ids.append", "sorted", "predicted_sentences.append", "list", "set"], "function", ["None"], ["", "def", "rationale2json", "(", "true_pairs", ",", "predictions", ",", "excluded_pairs", "=", "None", ")", ":", "\n", "    ", "claim_ids", "=", "[", "]", "\n", "claims", "=", "{", "}", "\n", "assert", "(", "len", "(", "true_pairs", ")", "==", "len", "(", "predictions", ")", ")", "\n", "for", "pair", ",", "prediction", "in", "zip", "(", "true_pairs", ",", "predictions", ")", ":", "\n", "        ", "claim_id", "=", "pair", "[", "\"claim_id\"", "]", "\n", "claim_ids", ".", "append", "(", "claim_id", ")", "\n", "\n", "predicted_sentences", "=", "[", "]", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "prediction", ")", ":", "\n", "            ", "if", "pred", "==", "\"rationale\"", "or", "pred", "==", "1", ":", "\n", "                ", "predicted_sentences", ".", "append", "(", "i", ")", "\n", "\n", "", "", "this_claim", "=", "claims", ".", "get", "(", "claim_id", ",", "{", "\"claim_id\"", ":", "claim_id", ",", "\"evidence\"", ":", "{", "}", "}", ")", "\n", "#if len(predicted_sentences) > 0:", "\n", "this_claim", "[", "\"evidence\"", "]", "[", "pair", "[", "\"doc_id\"", "]", "]", "=", "predicted_sentences", "\n", "claims", "[", "claim_id", "]", "=", "this_claim", "\n", "", "if", "excluded_pairs", "is", "not", "None", ":", "\n", "        ", "for", "pair", "in", "excluded_pairs", ":", "\n", "            ", "claims", "[", "pair", "[", "\"claim_id\"", "]", "]", "=", "{", "\"claim_id\"", ":", "pair", "[", "\"claim_id\"", "]", ",", "\"evidence\"", ":", "{", "}", "}", "\n", "claim_ids", ".", "append", "(", "pair", "[", "\"claim_id\"", "]", ")", "\n", "", "", "return", "[", "claims", "[", "claim_id", "]", "for", "claim_id", "in", "sorted", "(", "list", "(", "set", "(", "claim_ids", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.stance2json": [[256, 273], ["zip", "len", "len", "claim_ids.append", "claims.get", "claim_ids.append", "sorted", "list", "set"], "function", ["None"], ["", "def", "stance2json", "(", "true_pairs", ",", "predictions", ",", "excluded_pairs", "=", "None", ")", ":", "\n", "    ", "claim_ids", "=", "[", "]", "\n", "claims", "=", "{", "}", "\n", "idx2stance", "=", "[", "\"NOT_ENOUGH_INFO\"", ",", "\"SUPPORT\"", ",", "\"CONTRADICT\"", "]", "\n", "assert", "(", "len", "(", "true_pairs", ")", "==", "len", "(", "predictions", ")", ")", "\n", "for", "pair", ",", "prediction", "in", "zip", "(", "true_pairs", ",", "predictions", ")", ":", "\n", "        ", "claim_id", "=", "pair", "[", "\"claim_id\"", "]", "\n", "claim_ids", ".", "append", "(", "claim_id", ")", "\n", "\n", "this_claim", "=", "claims", ".", "get", "(", "claim_id", ",", "{", "\"claim_id\"", ":", "claim_id", ",", "\"labels\"", ":", "{", "}", "}", ")", "\n", "this_claim", "[", "\"labels\"", "]", "[", "pair", "[", "\"doc_id\"", "]", "]", "=", "{", "\"label\"", ":", "idx2stance", "[", "prediction", "]", ",", "'confidence'", ":", "1", "}", "\n", "claims", "[", "claim_id", "]", "=", "this_claim", "\n", "", "if", "excluded_pairs", "is", "not", "None", ":", "\n", "        ", "for", "pair", "in", "excluded_pairs", ":", "\n", "            ", "claims", "[", "pair", "[", "\"claim_id\"", "]", "]", "=", "{", "\"claim_id\"", ":", "pair", "[", "\"claim_id\"", "]", ",", "\"labels\"", ":", "{", "}", "}", "\n", "claim_ids", ".", "append", "(", "pair", "[", "\"claim_id\"", "]", ")", "\n", "", "", "return", "[", "claims", "[", "claim_id", "]", "for", "claim_id", "in", "sorted", "(", "list", "(", "set", "(", "claim_ids", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.merge_json": [[274, 289], ["str", "str", "jsons.append", "rationale_json[].items", "int", "len", "int", "int"], "function", ["None"], ["", "def", "merge_json", "(", "rationale_jsons", ",", "stance_jsons", ")", ":", "\n", "    ", "stance_json_dict", "=", "{", "str", "(", "stance_json", "[", "\"claim_id\"", "]", ")", ":", "stance_json", "for", "stance_json", "in", "stance_jsons", "}", "\n", "jsons", "=", "[", "]", "\n", "for", "rationale_json", "in", "rationale_jsons", ":", "\n", "        ", "id", "=", "str", "(", "rationale_json", "[", "\"claim_id\"", "]", ")", "\n", "result", "=", "{", "}", "\n", "if", "id", "in", "stance_json_dict", ":", "\n", "            ", "for", "k", ",", "v", "in", "rationale_json", "[", "\"evidence\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "0", "and", "stance_json_dict", "[", "id", "]", "[", "\"labels\"", "]", "[", "int", "(", "k", ")", "]", "[", "\"label\"", "]", "is", "not", "\"NOT_ENOUGH_INFO\"", ":", "\n", "                    ", "result", "[", "k", "]", "=", "{", "\n", "\"sentences\"", ":", "v", ",", "\n", "\"label\"", ":", "stance_json_dict", "[", "id", "]", "[", "\"labels\"", "]", "[", "int", "(", "k", ")", "]", "[", "\"label\"", "]", "\n", "}", "\n", "", "", "", "jsons", ".", "append", "(", "{", "\"id\"", ":", "int", "(", "id", ")", ",", "\"evidence\"", ":", "result", "}", ")", "\n", "", "return", "jsons", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.util.arg2param": [[290, 298], ["vars"], "function", ["None"], ["", "def", "arg2param", "(", "args", ")", ":", "\n", "    ", "params", "=", "vars", "(", "args", ")", "\n", "params", "[", "\"MAX_SEQ_LEN\"", "]", "=", "params", "[", "\"CHUNK_SIZE\"", "]", "*", "params", "[", "\"CHUNK_PER_SEQ\"", "]", "\n", "params", "[", "\"MINIBATCH_SIZE\"", "]", "=", "params", "[", "\"CHUNK_PER_SEQ\"", "]", "\n", "params", "[", "\"SENTENCE_BATCH_SIZE\"", "]", "=", "params", "[", "\"CHUNK_SIZE\"", "]", "\n", "params", "[", "\"CHUNK_PER_STEP\"", "]", "=", "params", "[", "\"PARAGRAPH_PER_STEP\"", "]", "*", "params", "[", "\"CHUNK_PER_SEQ\"", "]", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.reset_random_seed": [[29, 33], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["def", "reset_random_seed", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.predict": [[34, 54], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.utils.data.DataLoader", "scifact_joint_paragraph_dynamic_prediction.encode", "scifact_joint_paragraph_dynamic_prediction.token_idx_by_sentence", "model", "stance_preds.extend", "rationale_predictions.extend", "tensor.to", "tensor.to", "scifact_joint_paragraph_dynamic_prediction.predict.remove_dummy"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.token_idx_by_sentence"], ["", "def", "predict", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "rationale_predictions", "=", "[", "]", "\n", "stance_preds", "=", "[", "]", "\n", "\n", "def", "remove_dummy", "(", "rationale_out", ")", ":", "\n", "        ", "return", "[", "out", "[", "1", ":", "]", "for", "out", "in", "rationale_out", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "tqdm", "(", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", ")", ":", "\n", "            ", "encoded_dict", "=", "encode", "(", "tokenizer", ",", "batch", ")", "\n", "transformation_indices", "=", "token_idx_by_sentence", "(", "encoded_dict", "[", "\"input_ids\"", "]", ",", "\n", "tokenizer", ".", "sep_token_id", ",", "args", ".", "repfile", ")", "\n", "encoded_dict", "=", "{", "key", ":", "tensor", ".", "to", "(", "device", ")", "for", "key", ",", "tensor", "in", "encoded_dict", ".", "items", "(", ")", "}", "\n", "transformation_indices", "=", "[", "tensor", ".", "to", "(", "device", ")", "for", "tensor", "in", "transformation_indices", "]", "\n", "rationale_out", ",", "stance_out", ",", "_", ",", "_", "=", "model", "(", "encoded_dict", ",", "transformation_indices", ")", "\n", "stance_preds", ".", "extend", "(", "stance_out", ")", "\n", "rationale_predictions", ".", "extend", "(", "remove_dummy", "(", "rationale_out", ")", ")", "\n", "\n", "", "", "return", "rationale_predictions", ",", "stance_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.encode": [[56, 104], ["zip", "tokenizer.batch_encode_plus", "torch.cat", "torch.cat", "torch.cat", "encoded_dict[].size", "len", "numpy.sum", "numpy.argmax", "valid_paragraph.size", "all_paragraphs.append", "longest_first_truncation"], "function", ["None"], ["", "def", "encode", "(", "tokenizer", ",", "batch", ",", "max_sent_len", "=", "512", ")", ":", "\n", "    ", "def", "truncate", "(", "input_ids", ",", "max_length", ",", "sep_token_id", ",", "pad_token_id", ")", ":", "\n", "        ", "def", "longest_first_truncation", "(", "sentences", ",", "objective", ")", ":", "\n", "            ", "sent_lens", "=", "[", "len", "(", "sent", ")", "for", "sent", "in", "sentences", "]", "\n", "while", "np", ".", "sum", "(", "sent_lens", ")", ">", "objective", ":", "\n", "                ", "max_position", "=", "np", ".", "argmax", "(", "sent_lens", ")", "\n", "sent_lens", "[", "max_position", "]", "-=", "1", "\n", "", "return", "[", "sentence", "[", ":", "length", "]", "for", "sentence", ",", "length", "in", "zip", "(", "sentences", ",", "sent_lens", ")", "]", "\n", "\n", "", "all_paragraphs", "=", "[", "]", "\n", "for", "paragraph", "in", "input_ids", ":", "\n", "            ", "valid_paragraph", "=", "paragraph", "[", "paragraph", "!=", "pad_token_id", "]", "\n", "if", "valid_paragraph", ".", "size", "(", "0", ")", "<=", "max_length", ":", "\n", "                ", "all_paragraphs", ".", "append", "(", "paragraph", "[", ":", "max_length", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "sep_token_idx", "=", "np", ".", "arange", "(", "valid_paragraph", ".", "size", "(", "0", ")", ")", "[", "(", "valid_paragraph", "==", "sep_token_id", ")", ".", "numpy", "(", ")", "]", "\n", "idx_by_sentence", "=", "[", "]", "\n", "prev_idx", "=", "0", "\n", "for", "idx", "in", "sep_token_idx", ":", "\n", "                    ", "idx_by_sentence", ".", "append", "(", "paragraph", "[", "prev_idx", ":", "idx", "]", ")", "\n", "prev_idx", "=", "idx", "\n", "", "objective", "=", "max_length", "-", "1", "-", "len", "(", "idx_by_sentence", "[", "0", "]", ")", "# The last sep_token left out", "\n", "truncated_sentences", "=", "longest_first_truncation", "(", "idx_by_sentence", "[", "1", ":", "]", ",", "objective", ")", "\n", "truncated_paragraph", "=", "torch", ".", "cat", "(", "[", "idx_by_sentence", "[", "0", "]", "]", "+", "truncated_sentences", "+", "[", "torch", ".", "tensor", "(", "[", "sep_token_id", "]", ")", "]", ",", "0", ")", "\n", "all_paragraphs", ".", "append", "(", "truncated_paragraph", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "all_paragraphs", ",", "0", ")", "\n", "\n", "", "inputs", "=", "zip", "(", "batch", "[", "\"claim\"", "]", ",", "batch", "[", "\"paragraph\"", "]", ")", "\n", "encoded_dict", "=", "tokenizer", ".", "batch_encode_plus", "(", "\n", "inputs", ",", "\n", "pad_to_max_length", "=", "True", ",", "add_special_tokens", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ")", "\n", "if", "encoded_dict", "[", "'input_ids'", "]", ".", "size", "(", "1", ")", ">", "max_sent_len", ":", "\n", "        ", "if", "'token_type_ids'", "in", "encoded_dict", ":", "\n", "            ", "encoded_dict", "=", "{", "\n", "\"input_ids\"", ":", "truncate", "(", "encoded_dict", "[", "'input_ids'", "]", ",", "max_sent_len", ",", "\n", "tokenizer", ".", "sep_token_id", ",", "tokenizer", ".", "pad_token_id", ")", ",", "\n", "'token_type_ids'", ":", "encoded_dict", "[", "'token_type_ids'", "]", "[", ":", ",", ":", "max_sent_len", "]", ",", "\n", "'attention_mask'", ":", "encoded_dict", "[", "'attention_mask'", "]", "[", ":", ",", ":", "max_sent_len", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "encoded_dict", "=", "{", "\n", "\"input_ids\"", ":", "truncate", "(", "encoded_dict", "[", "'input_ids'", "]", ",", "max_sent_len", ",", "\n", "tokenizer", ".", "sep_token_id", ",", "tokenizer", ".", "pad_token_id", ")", ",", "\n", "'attention_mask'", ":", "encoded_dict", "[", "'attention_mask'", "]", "[", ":", ",", ":", "max_sent_len", "]", "\n", "}", "\n", "", "", "return", "encoded_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.token_idx_by_sentence": [[105, 133], ["torch.sum().numpy().tolist", "torch.sum().numpy().tolist", "torch.sum().numpy().tolist", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.split", "torch.split", "torch.split", "torch.utils.rnn.pad_sequence", "torch.split", "torch.split", "torch.split", "torch.utils.rnn.pad_sequence", "torch.arange().unsqueeze().unsqueeze().expand", "torch.arange().unsqueeze().unsqueeze().expand", "torch.arange().unsqueeze().unsqueeze().expand", "sep_tokens.size", "torch.sum().numpy().tolist.append", "all_word_indices.extend", "nn.utils.rnn.pad_sequence.size", "nn.utils.rnn.pad_sequence.size", "torch.arange().unsqueeze().unsqueeze().expand.long", "nn.utils.rnn.pad_sequence.long", "mask.long", "torch.sum().numpy", "torch.sum().numpy", "torch.sum().numpy", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "len", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "range", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "sep_tokens.size", "paragraph.size", "torch.arange", "torch.arange", "torch.arange", "sep_tokens.size"], "function", ["home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand", "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.Pretrain.WikiExtractor.Extractor.expand"], ["", "def", "token_idx_by_sentence", "(", "input_ids", ",", "sep_token_id", ",", "model_name", ")", ":", "\n", "    ", "\"\"\"\n    Compute the token indices matrix of the BERT output.\n    input_ids: (batch_size, paragraph_len)\n    batch_indices, indices_by_batch, mask: (batch_size, N_sentence, N_token)\n    bert_out: (batch_size, paragraph_len,BERT_dim)\n    bert_out[batch_indices,indices_by_batch,:]: (batch_size, N_sentence, N_token, BERT_dim)\n    \"\"\"", "\n", "padding_idx", "=", "-", "1", "\n", "sep_tokens", "=", "(", "input_ids", "==", "sep_token_id", ")", ".", "bool", "(", ")", "\n", "paragraph_lens", "=", "torch", ".", "sum", "(", "sep_tokens", ",", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "indices", "=", "torch", ".", "arange", "(", "sep_tokens", ".", "size", "(", "-", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "sep_tokens", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "sep_indices", "=", "torch", ".", "split", "(", "indices", "[", "sep_tokens", "]", ",", "paragraph_lens", ")", "\n", "paragraph_lens", "=", "[", "]", "\n", "all_word_indices", "=", "[", "]", "\n", "for", "paragraph", "in", "sep_indices", ":", "\n", "        ", "if", "\"roberta\"", "in", "model_name", ":", "\n", "            ", "paragraph", "=", "paragraph", "[", "1", ":", "]", "\n", "", "word_indices", "=", "[", "torch", ".", "arange", "(", "paragraph", "[", "i", "]", "+", "1", ",", "paragraph", "[", "i", "+", "1", "]", "+", "1", ")", "for", "i", "in", "range", "(", "paragraph", ".", "size", "(", "0", ")", "-", "1", ")", "]", "\n", "paragraph_lens", ".", "append", "(", "len", "(", "word_indices", ")", ")", "\n", "all_word_indices", ".", "extend", "(", "word_indices", ")", "\n", "", "indices_by_sentence", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "all_word_indices", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_idx", ")", "\n", "indices_by_sentence_split", "=", "torch", ".", "split", "(", "indices_by_sentence", ",", "paragraph_lens", ")", "\n", "indices_by_batch", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "indices_by_sentence_split", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_idx", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "sep_tokens", ".", "size", "(", "0", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "indices_by_batch", ".", "size", "(", "1", ")", ",", "indices_by_batch", ".", "size", "(", "-", "1", ")", ")", "\n", "mask", "=", "(", "indices_by_batch", ">=", "0", ")", "\n", "\n", "return", "batch_indices", ".", "long", "(", ")", ",", "indices_by_batch", ".", "long", "(", ")", ",", "mask", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.post_process_stance": [[134, 142], ["zip", "len", "len", "rationale_pred[].items", "len"], "function", ["None"], ["", "def", "post_process_stance", "(", "rationale_json", ",", "stance_json", ")", ":", "\n", "    ", "assert", "(", "len", "(", "rationale_json", ")", "==", "len", "(", "stance_json", ")", ")", "\n", "for", "stance_pred", ",", "rationale_pred", "in", "zip", "(", "stance_json", ",", "rationale_json", ")", ":", "\n", "        ", "assert", "(", "stance_pred", "[", "\"claim_id\"", "]", "==", "rationale_pred", "[", "\"claim_id\"", "]", ")", "\n", "for", "doc_id", ",", "pred", "in", "rationale_pred", "[", "\"evidence\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "                ", "stance_pred", "[", "\"labels\"", "]", "[", "doc_id", "]", "[", "\"label\"", "]", "=", "\"NOT_ENOUGH_INFO\"", "\n", "", "", "", "return", "stance_json", "\n", "\n"]], "home.repos.pwc.inspect_result.yibing-du_adversarial-factcheck.ParagraphJoint.scifact_joint_paragraph_dynamic_prediction.post_process_rationale_score": [[143, 154], ["numpy.array", "np.zeros.tolist", "scifact_joint_paragraph_dynamic_prediction.post_process_rationale_score.process_rationale_score"], "function", ["None"], ["", "def", "post_process_rationale_score", "(", "rationale_scores", ",", "max_positive", "=", "3", ")", ":", "### Doesn't seem to be helpful?", "\n", "    ", "def", "process_rationale_score", "(", "paragraph_rationale_scores", ")", ":", "\n", "        ", "paragraph_rationale_scores", "=", "np", ".", "array", "(", "paragraph_rationale_scores", ")", "\n", "if", "np", ".", "sum", "(", "paragraph_rationale_scores", ">", "0.5", ")", ">", "max_positive", ":", "\n", "            ", "output", "=", "np", ".", "zeros", "(", "paragraph_rationale_scores", ".", "shape", ")", "\n", "positive_indices", "=", "np", ".", "argsort", "(", "paragraph_rationale_scores", ")", "[", ":", ":", "-", "1", "]", "[", ":", "max_positive", "]", "\n", "output", "[", "positive_indices", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "paragraph_rationale_scores", ">", "0.5", ")", ".", "astype", "(", "int", ")", "\n", "", "return", "output", ".", "tolist", "(", ")", "\n", "", "return", "[", "process_rationale_score", "(", "paragraph_rationale_scores", ")", "for", "paragraph_rationale_scores", "in", "rationale_scores", "]", "\n", "\n"]]}