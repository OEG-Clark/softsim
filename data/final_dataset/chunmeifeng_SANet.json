{"home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.MSE.__init__": [[26, 28], ["pytorch_lightning.metrics.metric.NumpyMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "\"MSE\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.MSE.forward": [[29, 31], ["evaluate.mse"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.mse"], ["", "def", "forward", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "return", "mse", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.NMSE.__init__": [[36, 38], ["pytorch_lightning.metrics.metric.NumpyMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "\"NMSE\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.NMSE.forward": [[39, 41], ["evaluate.nmse"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.nmse"], ["", "def", "forward", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "return", "nmse", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.PSNR.__init__": [[46, 48], ["pytorch_lightning.metrics.metric.NumpyMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "\"PSNR\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.PSNR.forward": [[49, 51], ["evaluate.psnr"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.psnr"], ["", "def", "forward", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "return", "psnr", "(", "gt", ",", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.SSIM.__init__": [[56, 58], ["pytorch_lightning.metrics.metric.NumpyMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "\"SSIM\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.SSIM.forward": [[59, 61], ["evaluate.ssim"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.ssim"], ["", "def", "forward", "(", "self", ",", "gt", ",", "pred", ",", "maxval", "=", "None", ")", ":", "\n", "        ", "return", "ssim", "(", "gt", ",", "pred", ",", "maxval", "=", "maxval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.DistributedMetricSum.__init__": [[66, 68], ["pytorch_lightning.metrics.metric.TensorMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "\"DistributedMetricSum\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.DistributedMetricSum.forward": [[69, 71], ["x.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.Metrics.__init__": [[111, 118], ["runstats.Statistics"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric_funcs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            metric_funcs (dict): A dict where the keys are metric names and the\n                values are Python functions for evaluating that metric.\n        \"\"\"", "\n", "self", ".", "metrics", "=", "{", "metric", ":", "Statistics", "(", ")", "for", "metric", "in", "metric_funcs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.Metrics.push": [[119, 122], ["METRIC_FUNCS.items", "evaluate.Metrics.metrics[].push", "func"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.push"], ["", "def", "push", "(", "self", ",", "target", ",", "recons", ")", ":", "\n", "        ", "for", "metric", ",", "func", "in", "METRIC_FUNCS", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "metrics", "[", "metric", "]", ".", "push", "(", "func", "(", "target", ",", "recons", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.Metrics.means": [[123, 125], ["stat.mean", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "", "def", "means", "(", "self", ")", ":", "\n", "        ", "return", "{", "metric", ":", "stat", ".", "mean", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.Metrics.stddevs": [[126, 128], ["stat.stddev", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "def", "stddevs", "(", "self", ")", ":", "\n", "        ", "return", "{", "metric", ":", "stat", ".", "stddev", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.Metrics.__repr__": [[129, 136], ["evaluate.Metrics.means", "evaluate.Metrics.stddevs", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.means", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.stddevs"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "means", "=", "self", ".", "means", "(", ")", "\n", "stddevs", "=", "self", ".", "stddevs", "(", ")", "\n", "metric_names", "=", "sorted", "(", "list", "(", "means", ")", ")", "\n", "return", "\" \"", ".", "join", "(", "\n", "f\"{name} = {means[name]:.4g} +/- {2 * stddevs[name]:.4g}\"", "\n", "for", "name", "in", "metric_names", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.mse": [[73, 76], ["numpy.mean"], "function", ["None"], ["", "", "def", "mse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Mean Squared Error (MSE)\"\"\"", "\n", "return", "np", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.nmse": [[78, 81], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "nmse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Normalized Mean Squared Error (NMSE)\"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "gt", "-", "pred", ")", "**", "2", "/", "np", ".", "linalg", ".", "norm", "(", "gt", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.psnr": [[83, 86], ["skimage.metrics.peak_signal_noise_ratio", "gt.max"], "function", ["None"], ["", "def", "psnr", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Peak Signal to Noise Ratio metric (PSNR)\"\"\"", "\n", "return", "peak_signal_noise_ratio", "(", "gt", ",", "pred", ",", "data_range", "=", "gt", ".", "max", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.ssim": [[88, 101], ["range", "gt.max", "skimage.metrics.structural_similarity"], "function", ["None"], ["", "def", "ssim", "(", "gt", ",", "pred", ",", "maxval", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute Structural Similarity Index Metric (SSIM)\"\"\"", "\n", "maxval", "=", "gt", ".", "max", "(", ")", "if", "maxval", "is", "None", "else", "maxval", "\n", "\n", "ssim", "=", "0", "\n", "for", "slice_num", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ssim", "=", "ssim", "+", "structural_similarity", "(", "\n", "gt", "[", "slice_num", "]", ",", "pred", "[", "slice_num", "]", ",", "data_range", "=", "maxval", "\n", ")", "\n", "\n", "", "ssim", "=", "ssim", "/", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "return", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.evaluate.evaluate": [[139, 163], ["evaluate.Metrics", "args.target_path.iterdir", "h5py.File", "h5py.File", "fastmri.data.transforms.center_crop", "fastmri.data.transforms.center_crop", "evaluate.Metrics.push"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.push"], ["", "", "def", "evaluate", "(", "args", ",", "recons_key", ")", ":", "\n", "    ", "metrics", "=", "Metrics", "(", "METRIC_FUNCS", ")", "\n", "\n", "for", "tgt_file", "in", "args", ".", "target_path", ".", "iterdir", "(", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "tgt_file", ",", "\"r\"", ")", "as", "target", ",", "h5py", ".", "File", "(", "\n", "args", ".", "predictions_path", "/", "tgt_file", ".", "name", ",", "\"r\"", "\n", ")", "as", "recons", ":", "\n", "            ", "if", "args", ".", "acquisition", "and", "args", ".", "acquisition", "!=", "target", ".", "attrs", "[", "\"acquisition\"", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "args", ".", "acceleration", "and", "target", ".", "attrs", "[", "\"acceleration\"", "]", "!=", "args", ".", "acceleration", ":", "\n", "                ", "continue", "\n", "\n", "", "target", "=", "target", "[", "recons_key", "]", "[", "(", ")", "]", "\n", "recons", "=", "recons", "[", "\"reconstruction\"", "]", "[", "(", ")", "]", "\n", "target", "=", "transforms", ".", "center_crop", "(", "\n", "target", ",", "(", "target", ".", "shape", "[", "-", "1", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", ")", "\n", "recons", "=", "transforms", ".", "center_crop", "(", "\n", "recons", ",", "(", "target", ".", "shape", "[", "-", "1", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", ")", "\n", "metrics", ".", "push", "(", "target", ",", "recons", ")", "\n", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_mul": [[11, 30], ["torch.stack"], "function", ["None"], ["def", "complex_mul", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Complex multiplication.\n\n    This multiplies two complex tensors assuming that they are both stored as\n    real arrays with the last dimension being the complex dimension.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n        y (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        torch.Tensor: A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "y", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "re", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "1", "]", "\n", "im", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "0", "]", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "re", ",", "im", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_conj": [[32, 49], ["torch.stack"], "function", ["None"], ["", "def", "complex_conj", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Complex conjugate.\n\n    This applies the complex conjugate assuming that the input array has the\n    last dimension as the complex dimension.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n        y (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        torch.Tensor: A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x", "[", "...", ",", "0", "]", ",", "-", "x", "[", "...", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.fft2c": [[51, 70], ["math.ifftshift", "torch.fft", "math.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.ifftshift", "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.fftshift"], ["", "def", "fft2c", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Apply centered 2 dimensional Fast Fourier Transform.\n\n    Args:\n        data (torch.Tensor): Complex valued input data containing at least 3\n            dimensions: dimensions -3 & -2 are spatial dimensions and dimension\n            -1 has size 2. All other dimensions are assumed to be batch\n            dimensions.\n\n    Returns:\n        torch.Tensor: The FFT of the input.\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "fft", "(", "data", ",", "2", ",", "normalized", "=", "True", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.ifft2c": [[72, 91], ["math.ifftshift", "torch.ifft", "math.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.ifftshift", "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.fftshift"], ["", "def", "ifft2c", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Apply centered 2-dimensional Inverse Fast Fourier Transform.\n\n    Args:\n        data (torch.Tensor): Complex valued input data containing at least 3\n            dimensions: dimensions -3 & -2 are spatial dimensions and dimension\n            -1 has size 2. All other dimensions are assumed to be batch\n            dimensions.\n\n    Returns:\n        torch.Tensor: The IFFT of the input.\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "ifft", "(", "data", ",", "2", ",", "normalized", "=", "True", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_abs": [[93, 107], ["data.size"], "function", ["None"], ["", "def", "complex_abs", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Compute the absolute value of a complex valued input tensor.\n\n    Args:\n        data (torch.Tensor): A complex valued tensor, where the size of the\n            final dimension should be 2.\n\n    Returns:\n        torch.Tensor: Absolute value of data.\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "\n", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_abs_numpy": [[110, 114], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "complex_abs_numpy", "(", "data", ")", ":", "\n", "    ", "assert", "data", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "data", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_abs_sq": [[116, 129], ["data.size"], "function", ["None"], ["", "def", "complex_abs_sq", "(", "data", ")", ":", "#multi coil", "\n", "    ", "\"\"\"\n    Compute the squared absolute value of a complex tensor.\n\n    Args:\n        data (torch.Tensor): A complex valued tensor, where the size of the\n            final dimension should be 2.\n\n    Returns:\n        torch.Tensor: Squared absolute value of data.\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.roll": [[134, 157], ["isinstance", "roll.narrow", "roll.narrow", "torch.cat", "zip", "roll.size", "len", "len", "math.roll", "roll.size", "roll.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.roll"], ["", "def", "roll", "(", "x", ",", "shift", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.roll but applies to PyTorch Tensors.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        shift (int): Amount to roll.\n        dim (int): Which dimension to roll.\n\n    Returns:\n        torch.Tensor: Rolled version of x.\n    \"\"\"", "\n", "if", "isinstance", "(", "shift", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "assert", "len", "(", "shift", ")", "==", "len", "(", "dim", ")", "\n", "for", "s", ",", "d", "in", "zip", "(", "shift", ",", "dim", ")", ":", "\n", "            ", "x", "=", "roll", "(", "x", ",", "s", ",", "d", ")", "\n", "", "return", "x", "\n", "", "shift", "=", "shift", "%", "x", ".", "size", "(", "dim", ")", "\n", "if", "shift", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "left", "=", "x", ".", "narrow", "(", "dim", ",", "0", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ")", "\n", "right", "=", "x", ".", "narrow", "(", "dim", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ",", "shift", ")", "\n", "return", "torch", ".", "cat", "(", "(", "right", ",", "left", ")", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.fftshift": [[159, 179], ["math.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.roll"], ["", "def", "fftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.fftshift but applies to PyTorch Tensors\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        dim (int): Which dimension to fftshift.\n\n    Returns:\n        torch.Tensor: fftshifted version of x.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "dim", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "x", ".", "shape", "[", "dim", "]", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "x", ".", "shape", "[", "i", "]", "//", "2", "for", "i", "in", "dim", "]", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.ifftshift": [[181, 201], ["math.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.roll"], ["", "def", "ifftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.ifftshift but applies to PyTorch Tensors\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        dim (int): Which dimension to ifftshift.\n\n    Returns:\n        torch.Tensor: ifftshifted version of x.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "(", "dim", "+", "1", ")", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "(", "x", ".", "shape", "[", "dim", "]", "+", "1", ")", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "(", "x", ".", "shape", "[", "i", "]", "+", "1", ")", "//", "2", "for", "i", "in", "dim", "]", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.tensor_to_complex_np": [[203, 214], ["data.numpy.numpy"], "function", ["None"], ["", "def", "tensor_to_complex_np", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n    Args:\n        data (torch.Tensor): Input data to be converted to numpy.\n\n    Returns:\n        np.array: Complex numpy version of data\n    \"\"\"", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "return", "data", "[", "...", ",", "0", "]", "+", "1j", "*", "data", "[", "...", ",", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.coil_combine.rss": [[13, 27], ["torch.sqrt"], "function", ["None"], ["def", "rss", "(", "data", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS).\n\n    RSS is computed assuming that dim is the coil dimension.\n\n    Args:\n        data (torch.Tensor): The input tensor\n        dim (int): The dimensions along which to apply the RSS transform\n\n    Returns:\n        torch.Tensor: The RSS value.\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.coil_combine.rss_complex": [[29, 43], ["torch.sqrt", "fastmri.complex_abs_sq().sum", "fastmri.complex_abs_sq"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_abs_sq"], ["", "def", "rss_complex", "(", "data", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS) for complex inputs.\n\n    RSS is computed assuming that dim is the coil dimension.\n\n    Args:\n        data (torch.Tensor): The input tensor\n        dim (int): The dimensions along which to apply the RSS transform\n\n    Returns:\n        torch.Tensor: The RSS value.\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "fastmri", ".", "complex_abs_sq", "(", "data", ")", ".", "sum", "(", "dim", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.__init__": [[51, 96], ["pytorch_lightning.LightningModule.__init__", "fastmri.evaluate.DistributedMetricSum", "fastmri.evaluate.DistributedMetricSum", "fastmri.evaluate.DistributedMetricSum", "fastmri.evaluate.DistributedMetricSum", "fastmri.evaluate.DistributedMetricSum"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_path", ",", "\n", "challenge", ",", "\n", "exp_dir", ",", "\n", "exp_name", ",", "\n", "test_split", "=", "\"test\"", ",", "\n", "sample_rate", "=", "1.0", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "4", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_path (pathlib.Path): Path to root data directory. For example, if\n                knee/path is the root directory with subdirectories\n                multicoil_train and multicoil_val, you would input knee/path for\n                data_path.\n            challenge (str): Name of challenge from ('multicoil', 'singlecoil').\n            exp_dir (pathlib.Path): Top directory for where you want to store log\n                files.\n            exp_name (str): Name of this experiment - this will store logs in\n                exp_dir / {exp_name}.\n            test_split (str): Name of test split from (\"test\", \"challenge\").\n            sample_rate (float, default=1.0): Fraction of models from the\n                dataset to use.\n            batch_size (int, default=1): Batch size.\n            num_workers (int, default=4): Number of workers for PyTorch dataloader.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "challenge", "=", "challenge", "\n", "self", ".", "exp_dir", "=", "exp_dir", "\n", "self", ".", "exp_name", "=", "exp_name", "\n", "self", ".", "test_split", "=", "test_split", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n", "self", ".", "NMSE", "=", "DistributedMetricSum", "(", "name", "=", "\"NMSE\"", ")", "\n", "self", ".", "SSIM", "=", "DistributedMetricSum", "(", "name", "=", "\"SSIM\"", ")", "\n", "self", ".", "PSNR", "=", "DistributedMetricSum", "(", "name", "=", "\"PSNR\"", ")", "\n", "self", ".", "ValLoss", "=", "DistributedMetricSum", "(", "name", "=", "\"ValLoss\"", ")", "\n", "self", ".", "TotExamples", "=", "DistributedMetricSum", "(", "name", "=", "\"TotExamples\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._create_data_loader": [[97, 127], ["fastmri.data.SliceDataset", "torch.utils.data.DataLoader", "torch.utils.data.DistributedSampler", "fastmri.data.volume_sampler.VolumeSampler"], "methods", ["None"], ["", "def", "_create_data_loader", "(", "self", ",", "data_transform", ",", "data_partition", ",", "sample_rate", "=", "None", ")", ":", "\n", "        ", "sample_rate", "=", "sample_rate", "or", "self", ".", "sample_rate", "\n", "dataset", "=", "SliceDataset", "(", "\n", "root", "=", "self", ".", "data_path", "/", "f\"{self.challenge}_{data_partition}\"", ",", "\n", "transform", "=", "data_transform", ",", "\n", "sample_rate", "=", "sample_rate", ",", "\n", "challenge", "=", "self", ".", "challenge", ",", "\n", "mode", "=", "data_partition", "\n", ")", "\n", "\n", "is_train", "=", "data_partition", "==", "\"train\"", "\n", "\n", "# ensure that entire volumes go to the same GPU in the ddp setting", "\n", "sampler", "=", "None", "\n", "if", "self", ".", "use_ddp", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "sampler", "=", "DistributedSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "sampler", "=", "VolumeSampler", "(", "dataset", ")", "\n", "\n", "", "", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "is_train", ",", "\n", "sampler", "=", "sampler", ",", "\n", ")", "\n", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.train_data_transform": [[128, 131], ["None"], "methods", ["None"], ["", "def", "train_data_transform", "(", "self", ")", ":", "\n", "# raise NotImplementedError", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.train_dataloader": [[132, 135], ["mri_module.MriModule._create_data_loader", "mri_module.MriModule.train_data_transform"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._create_data_loader", "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.train_data_transform"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_data_loader", "(", "\n", "self", ".", "train_data_transform", "(", ")", ",", "data_partition", "=", "\"train\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.val_data_transform": [[137, 140], ["None"], "methods", ["None"], ["", "def", "val_data_transform", "(", "self", ")", ":", "\n", "# raise NotImplementedError", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.val_dataloader": [[141, 144], ["mri_module.MriModule._create_data_loader", "mri_module.MriModule.val_data_transform"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._create_data_loader", "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.val_data_transform"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "# print ('666')", "\n", "        ", "return", "self", ".", "_create_data_loader", "(", "self", ".", "val_data_transform", "(", ")", ",", "data_partition", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.test_data_transform": [[145, 148], ["None"], "methods", ["None"], ["", "def", "test_data_transform", "(", "self", ")", ":", "\n", "# raise NotImplementedError", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.test_dataloader": [[149, 152], ["mri_module.MriModule._create_data_loader", "mri_module.MriModule.test_data_transform"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._create_data_loader", "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.test_data_transform"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_data_loader", "(", "\n", "self", ".", "test_data_transform", "(", ")", ",", "data_partition", "=", "self", ".", "test_split", ",", "sample_rate", "=", "1.0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._visualize": [[154, 185], ["len", "range", "numpy.stack", "numpy.stack", "mri_module.MriModule._visualize._save_image"], "methods", ["None"], ["", "def", "_visualize", "(", "self", ",", "val_outputs", ",", "val_targets", ")", ":", "\n", "        ", "def", "_normalize", "(", "image", ")", ":", "\n", "            ", "image", "=", "image", "[", "np", ".", "newaxis", "]", "\n", "image", "=", "image", "-", "image", ".", "min", "(", ")", "\n", "return", "image", "/", "image", ".", "max", "(", ")", "\n", "\n", "", "def", "_save_image", "(", "image", ",", "tag", ")", ":", "\n", "            ", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "torch", ".", "Tensor", "(", "image", ")", ",", "nrow", "=", "4", ",", "pad_value", "=", "1", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "tag", ",", "grid", ",", "self", ".", "global_step", ")", "\n", "\n", "# only process first size to simplify visualization.", "\n", "", "visualize_size", "=", "val_outputs", "[", "0", "]", ".", "shape", "\n", "val_outputs", "=", "[", "x", "[", "0", "]", "for", "x", "in", "val_outputs", "if", "x", ".", "shape", "==", "visualize_size", "]", "\n", "val_targets", "=", "[", "x", "[", "0", "]", "for", "x", "in", "val_targets", "if", "x", ".", "shape", "==", "visualize_size", "]", "\n", "\n", "num_logs", "=", "len", "(", "val_outputs", ")", "\n", "assert", "num_logs", "==", "len", "(", "val_targets", ")", "\n", "\n", "num_viz_images", "=", "16", "\n", "step", "=", "(", "num_logs", "+", "num_viz_images", "-", "1", ")", "//", "num_viz_images", "\n", "outputs", ",", "targets", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_logs", ",", "step", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "_normalize", "(", "val_outputs", "[", "i", "]", ")", ")", "\n", "targets", ".", "append", "(", "_normalize", "(", "val_targets", "[", "i", "]", ")", ")", "\n", "\n", "", "outputs", "=", "np", ".", "stack", "(", "outputs", ")", "\n", "targets", "=", "np", ".", "stack", "(", "targets", ")", "\n", "_save_image", "(", "targets", ",", "\"Target\"", ")", "\n", "_save_image", "(", "outputs", ",", "\"Reconstruction\"", ")", "\n", "_save_image", "(", "np", ".", "abs", "(", "targets", "-", "outputs", ")", ",", "\"Error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._visualize_val": [[186, 224], ["len", "len", "range", "numpy.stack", "numpy.stack", "numpy.stack", "mri_module.MriModule._visualize._save_image"], "methods", ["None"], ["", "def", "_visualize_val", "(", "self", ",", "val_outputs", ",", "val_targets", ",", "val_inputs", ")", ":", "\n", "        ", "def", "_normalize", "(", "image", ")", ":", "\n", "            ", "image", "=", "image", "[", "np", ".", "newaxis", "]", "\n", "image", "=", "image", "-", "image", ".", "min", "(", ")", "\n", "return", "image", "/", "image", ".", "max", "(", ")", "\n", "\n", "", "def", "_save_image", "(", "image", ",", "tag", ")", ":", "\n", "            ", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "torch", ".", "Tensor", "(", "image", ")", ",", "nrow", "=", "4", ",", "pad_value", "=", "1", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "tag", ",", "grid", ",", "self", ".", "global_step", ")", "\n", "\n", "# only process first size to simplify visualization.", "\n", "", "visualize_size", "=", "val_outputs", "[", "0", "]", ".", "shape", "\n", "visualize_size_inputs", "=", "val_inputs", "[", "0", "]", ".", "shape", "\n", "val_outputs", "=", "[", "x", "[", "0", "]", "for", "x", "in", "val_outputs", "if", "x", ".", "shape", "==", "visualize_size", "]", "\n", "val_targets", "=", "[", "x", "[", "0", "]", "for", "x", "in", "val_targets", "if", "x", ".", "shape", "==", "visualize_size", "]", "\n", "val_inputs", "=", "[", "x", "[", "0", "]", "for", "x", "in", "val_inputs", "if", "x", ".", "shape", "==", "visualize_size_inputs", "]", "#????", "\n", "\n", "num_logs", "=", "len", "(", "val_outputs", ")", "\n", "num_logs", "=", "len", "(", "val_inputs", ")", "\n", "assert", "num_logs", "==", "len", "(", "val_targets", ")", "\n", "\n", "num_viz_images", "=", "16", "\n", "step", "=", "(", "num_logs", "+", "num_viz_images", "-", "1", ")", "//", "num_viz_images", "\n", "outputs", ",", "targets", ",", "inputs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_logs", ",", "step", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "_normalize", "(", "val_outputs", "[", "i", "]", ")", ")", "\n", "targets", ".", "append", "(", "_normalize", "(", "val_targets", "[", "i", "]", ")", ")", "\n", "inputs", ".", "append", "(", "_normalize", "(", "val_inputs", "[", "i", "]", ")", ")", "\n", "\n", "", "outputs", "=", "np", ".", "stack", "(", "outputs", ")", "#(2, 1, 1, 256, 256)", "\n", "targets", "=", "np", ".", "stack", "(", "targets", ")", "#(2, 1, 1, 256, 256)", "\n", "inputs", "=", "np", ".", "stack", "(", "inputs", ")", "#(2, 1, 1, 256, 256)", "\n", "\n", "_save_image", "(", "targets", ",", "\"Target\"", ")", "\n", "_save_image", "(", "outputs", ",", "\"Reconstruction\"", ")", "\n", "_save_image", "(", "inputs", ",", "\"Input\"", ")", "\n", "_save_image", "(", "np", ".", "abs", "(", "targets", "-", "outputs", ")", ",", "\"Error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.validation_step_end": [[225, 233], ["value.cpu", "val_logs.items"], "methods", ["None"], ["", "def", "validation_step_end", "(", "self", ",", "val_logs", ")", ":", "\n", "        ", "device", "=", "val_logs", "[", "\"output\"", "]", ".", "device", "\n", "# device = val_logs[\"output_k\"].device    #kspace branch", "\n", "# move to CPU to save GPU memory", "\n", "val_logs", "=", "{", "key", ":", "value", ".", "cpu", "(", ")", "for", "key", ",", "value", "in", "val_logs", ".", "items", "(", ")", "}", "\n", "val_logs", "[", "\"device\"", "]", "=", "device", "\n", "\n", "return", "val_logs", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.validation_epoch_end": [[234, 294], ["mri_module.MriModule._visualize_val", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "mri_module.MriModule.NMSE", "mri_module.MriModule.SSIM", "mri_module.MriModule.PSNR", "mri_module.MriModule.ValLoss", "torch.tensor().to", "mri_module.MriModule.TotExamples", "print", "fastmri.save_reconstructions", "dict", "losses.append", "enumerate", "torch.stack().numpy", "torch.stack().numpy", "torch.stack().numpy", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.sum().to", "zip", "fastmri.evaluate.nmse", "fastmri.evaluate.ssim", "fastmri.evaluate.psnr", "torch.tensor", "dict.items", "dict.items", "x[].numpy", "x[].numpy", "x[].numpy", "outputs[].append", "targets[].append", "inputs[].append", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "len", "torch.stack", "int", "int", "int", "sorted", "sorted", "sorted", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule._visualize_val", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.nmse", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.ssim", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.psnr"], ["", "def", "validation_epoch_end", "(", "self", ",", "val_logs", ")", ":", "\n", "#assert val_logs[0][\"output_im\"].ndim == 3", "\n", "        ", "device", "=", "val_logs", "[", "0", "]", "[", "\"device\"", "]", "\n", "\n", "# run the visualizations", "\n", "self", ".", "_visualize_val", "(", "\n", "val_outputs", "=", "[", "x", "[", "\"output\"", "]", ".", "numpy", "(", ")", "for", "x", "in", "val_logs", "]", ",", "\n", "val_targets", "=", "[", "x", "[", "\"target\"", "]", ".", "numpy", "(", ")", "for", "x", "in", "val_logs", "]", ",", "\n", "val_inputs", "=", "[", "x", "[", "\"input\"", "]", ".", "numpy", "(", ")", "for", "x", "in", "val_logs", "]", ",", "\n", ")", "\n", "\n", "# aggregate losses", "\n", "losses", "=", "[", "]", "\n", "outputs", "=", "defaultdict", "(", "list", ")", "\n", "targets", "=", "defaultdict", "(", "list", ")", "\n", "inputs", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "val_log", "in", "val_logs", ":", "\n", "            ", "losses", ".", "append", "(", "val_log", "[", "\"val_loss\"", "]", ")", "\n", "for", "i", ",", "(", "fname", ",", "slice_ind", ")", "in", "enumerate", "(", "\n", "zip", "(", "val_log", "[", "\"fname\"", "]", ",", "val_log", "[", "\"slice\"", "]", ")", "\n", ")", ":", "\n", "# need to check for duplicate slices", "\n", "                ", "if", "slice_ind", "not", "in", "[", "s", "for", "(", "s", ",", "_", ")", "in", "outputs", "[", "int", "(", "fname", ")", "]", "]", ":", "\n", "                    ", "outputs", "[", "int", "(", "fname", ")", "]", ".", "append", "(", "(", "int", "(", "slice_ind", ")", ",", "val_log", "[", "\"output\"", "]", "[", "i", "]", ")", ")", "\n", "targets", "[", "int", "(", "fname", ")", "]", ".", "append", "(", "(", "int", "(", "slice_ind", ")", ",", "val_log", "[", "\"target\"", "]", "[", "i", "]", ")", ")", "\n", "inputs", "[", "int", "(", "fname", ")", "]", ".", "append", "(", "(", "int", "(", "slice_ind", ")", ",", "val_log", "[", "\"input\"", "]", "[", "i", "]", ")", ")", "\n", "\n", "# handle aggregation for distributed case with pytorch_lightning metrics", "\n", "", "", "", "metrics", "=", "dict", "(", "val_loss", "=", "0", ",", "nmse", "=", "0", ",", "ssim", "=", "0", ",", "psnr", "=", "0", ")", "\n", "for", "fname", "in", "outputs", ":", "\n", "            ", "output", "=", "torch", ".", "stack", "(", "[", "out", "for", "_", ",", "out", "in", "sorted", "(", "outputs", "[", "fname", "]", ")", "]", ")", ".", "numpy", "(", ")", "\n", "target", "=", "torch", ".", "stack", "(", "[", "tgt", "for", "_", ",", "tgt", "in", "sorted", "(", "targets", "[", "fname", "]", ")", "]", ")", ".", "numpy", "(", ")", "\n", "input", "=", "torch", ".", "stack", "(", "[", "inn", "for", "_", ",", "inn", "in", "sorted", "(", "inputs", "[", "fname", "]", ")", "]", ")", ".", "numpy", "(", ")", "\n", "\n", "metrics", "[", "\"nmse\"", "]", "=", "metrics", "[", "\"nmse\"", "]", "+", "evaluate", ".", "nmse", "(", "target", ",", "output", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "metrics", "[", "\"ssim\"", "]", "+", "evaluate", ".", "ssim", "(", "target", ",", "output", ")", "\n", "metrics", "[", "\"psnr\"", "]", "=", "metrics", "[", "\"psnr\"", "]", "+", "evaluate", ".", "psnr", "(", "target", ",", "output", ")", "\n", "\n", "# currently ddp reduction requires everything on CUDA, so we'll do this manually", "\n", "", "metrics", "[", "\"nmse\"", "]", "=", "self", ".", "NMSE", "(", "torch", ".", "tensor", "(", "metrics", "[", "\"nmse\"", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "self", ".", "SSIM", "(", "torch", ".", "tensor", "(", "metrics", "[", "\"ssim\"", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "metrics", "[", "\"psnr\"", "]", "=", "self", ".", "PSNR", "(", "torch", ".", "tensor", "(", "metrics", "[", "\"psnr\"", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "metrics", "[", "\"val_loss\"", "]", "=", "self", ".", "ValLoss", "(", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "losses", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "num_examples", "=", "torch", ".", "tensor", "(", "len", "(", "outputs", ")", ")", ".", "to", "(", "device", ")", "\n", "tot_examples", "=", "self", ".", "TotExamples", "(", "num_examples", ")", "\n", "\n", "log_metrics", "=", "{", "\n", "f\"metrics/{metric}\"", ":", "values", "/", "tot_examples", "\n", "for", "metric", ",", "values", "in", "metrics", ".", "items", "(", ")", "\n", "}", "\n", "metrics", "=", "{", "metric", ":", "values", "/", "tot_examples", "for", "metric", ",", "values", "in", "metrics", ".", "items", "(", ")", "}", "\n", "print", "(", "tot_examples", ",", "device", ",", "metrics", ")", "\n", "\n", "fastmri", ".", "save_reconstructions", "(", "\n", "inputs", ",", "self", ".", "exp_dir", "/", "self", ".", "exp_name", "/", "\"bicubic\"", "\n", ")", "\n", "\n", "return", "dict", "(", "log", "=", "log_metrics", ",", "**", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.test_epoch_end": [[295, 310], ["collections.defaultdict", "fastmri.save_reconstructions", "dict", "enumerate", "numpy.stack", "zip", "outputs[].append", "sorted"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.utils.save_reconstructions"], ["", "def", "test_epoch_end", "(", "self", ",", "test_logs", ")", ":", "\n", "        ", "outputs", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "log", "in", "test_logs", ":", "\n", "            ", "for", "i", ",", "(", "fname", ",", "slice", ")", "in", "enumerate", "(", "zip", "(", "log", "[", "\"fname\"", "]", ",", "log", "[", "\"slice\"", "]", ")", ")", ":", "\n", "                ", "outputs", "[", "fname", "]", ".", "append", "(", "(", "slice", ",", "log", "[", "\"output\"", "]", "[", "i", "]", ")", ")", "\n", "\n", "", "", "for", "fname", "in", "outputs", ":", "\n", "            ", "outputs", "[", "fname", "]", "=", "np", ".", "stack", "(", "[", "out", "for", "_", ",", "out", "in", "sorted", "(", "outputs", "[", "fname", "]", ")", "]", ")", "\n", "\n", "", "fastmri", ".", "save_reconstructions", "(", "\n", "outputs", ",", "self", ".", "exp_dir", "/", "self", ".", "exp_name", "/", "\"bicubic\"", "\n", ")", "\n", "\n", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.mri_module.MriModule.add_model_specific_args": [[311, 353], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "pathlib.Path", "pathlib.Path"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ")", "\n", "\n", "# data arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_path\"", ",", "default", "=", "pathlib", ".", "Path", "(", "\"Datasets/\"", ")", ",", "type", "=", "pathlib", ".", "Path", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--challenge\"", ",", "\n", "choices", "=", "[", "\"singlecoil\"", ",", "\"multicoil\"", "]", ",", "\n", "default", "=", "\"singlecoil\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sample_rate\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_workers\"", ",", "default", "=", "4", ",", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "default", "=", "42", ",", "type", "=", "int", ",", "\n", ")", "\n", "\n", "# logging params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp_dir\"", ",", "default", "=", "pathlib", ".", "Path", "(", "\"logs/\"", ")", ",", "type", "=", "pathlib", ".", "Path", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp_name\"", ",", "default", "=", "\"my_experiment\"", ",", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_split\"", ",", "default", "=", "\"test\"", ",", "type", "=", "str", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.utils.save_reconstructions": [[12, 38], ["os.makedirs", "print", "reconstructions.items", "str", "print", "h5py.File", "print", "isinstance", "f.create_dataset", "torch.cat", "str", "str"], "function", ["None"], ["def", "save_reconstructions", "(", "reconstructions", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Save reconstruction images.\n\n    This function writes to h5 files that are appropriate for submission to the\n    leaderboard.\n\n    Args:\n        reconstructions (dict[str, np.array]): A dictionary mapping input\n            filenames to corresponding reconstructions (of shape num_slices x\n            height x width).\n        out_dir (pathlib.Path): Path to the output directory where the\n            reconstructions should be saved.\n    \"\"\"", "\n", "# out_dir.mkdir(exist_ok=True, parents=True)", "\n", "\n", "os", ".", "makedirs", "(", "str", "(", "out_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "out_dir", ")", "#logs/unet/unet_demo/zpCar6X/unet_demo/reconstructions", "\n", "for", "fname", ",", "recons", "in", "reconstructions", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "fname", ")", "\n", "with", "h5py", ".", "File", "(", "str", "(", "out_dir", ")", "+", "'/'", "+", "str", "(", "fname", ")", "+", "'.hdf5'", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "fname", ")", "\n", "if", "isinstance", "(", "recons", ",", "list", ")", ":", "\n", "                ", "recons", "=", "[", "r", "[", "1", "]", "[", "None", ",", "...", "]", "for", "r", "in", "recons", "]", "\n", "recons", "=", "torch", ".", "cat", "(", "recons", ",", "dim", "=", "0", ")", "\n", "", "f", ".", "create_dataset", "(", "\"reconstruction\"", ",", "data", "=", "recons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.losses.SSIMLoss.__init__": [[18, 31], ["torch.Module.__init__", "losses.SSIMLoss.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "win_size", "=", "7", ",", "k1", "=", "0.01", ",", "k2", "=", "0.03", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            win_size (int, default=7): Window size for SSIM calculation.\n            k1 (float, default=0.1): k1 parameter for SSIM calculation.\n            k2 (float, default=0.03): k2 parameter for SSIM calculation.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "k1", ",", "self", ".", "k2", "=", "k1", ",", "k2", "\n", "self", ".", "register_buffer", "(", "\"w\"", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "win_size", ",", "win_size", ")", "/", "win_size", "**", "2", ")", "\n", "NP", "=", "win_size", "**", "2", "\n", "self", ".", "cov_norm", "=", "NP", "/", "(", "NP", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.losses.SSIMLoss.forward": [[32, 54], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "S.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ",", "data_range", ")", ":", "\n", "        ", "data_range", "=", "data_range", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "C1", "=", "(", "self", ".", "k1", "*", "data_range", ")", "**", "2", "\n", "C2", "=", "(", "self", ".", "k2", "*", "data_range", ")", "**", "2", "\n", "ux", "=", "F", ".", "conv2d", "(", "X", ",", "self", ".", "w", ")", "\n", "uy", "=", "F", ".", "conv2d", "(", "Y", ",", "self", ".", "w", ")", "\n", "uxx", "=", "F", ".", "conv2d", "(", "X", "*", "X", ",", "self", ".", "w", ")", "\n", "uyy", "=", "F", ".", "conv2d", "(", "Y", "*", "Y", ",", "self", ".", "w", ")", "\n", "uxy", "=", "F", ".", "conv2d", "(", "X", "*", "Y", ",", "self", ".", "w", ")", "\n", "vx", "=", "self", ".", "cov_norm", "*", "(", "uxx", "-", "ux", "*", "ux", ")", "\n", "vy", "=", "self", ".", "cov_norm", "*", "(", "uyy", "-", "uy", "*", "uy", ")", "\n", "vxy", "=", "self", ".", "cov_norm", "*", "(", "uxy", "-", "ux", "*", "uy", ")", "\n", "A1", ",", "A2", ",", "B1", ",", "B2", "=", "(", "\n", "2", "*", "ux", "*", "uy", "+", "C1", ",", "\n", "2", "*", "vxy", "+", "C2", ",", "\n", "ux", "**", "2", "+", "uy", "**", "2", "+", "C1", ",", "\n", "vx", "+", "vy", "+", "C2", ",", "\n", ")", "\n", "D", "=", "B1", "*", "B2", "\n", "S", "=", "(", "A1", "*", "A2", ")", "/", "D", "\n", "\n", "return", "1", "-", "S", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.common.MeanShift.__init__": [[13, 23], ["torch.Conv2d.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "common.MeanShift.parameters", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.Tensor.view", "torch.Tensor.view", "torch.Tensor.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "rgb_range", ",", "\n", "rgb_mean", "=", "(", "0.4488", ",", "0.4371", ",", "0.4040", ")", ",", "rgb_std", "=", "(", "1.0", ",", "1.0", ",", "1.0", ")", ",", "sign", "=", "-", "1", ")", ":", "\n", "\n", "        ", "super", "(", "MeanShift", ",", "self", ")", ".", "__init__", "(", "3", ",", "3", ",", "kernel_size", "=", "1", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "rgb_std", ")", "\n", "self", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", "/", "std", ".", "view", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "bias", ".", "data", "=", "sign", "*", "rgb_range", "*", "torch", ".", "Tensor", "(", "rgb_mean", ")", "/", "std", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.common.BasicBlock.__init__": [[25, 36], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "conv", "m.append", "m.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "conv", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "bn", "=", "True", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "\n", "        ", "m", "=", "[", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "bias", ")", "]", "\n", "if", "bn", ":", "\n", "            ", "m", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "if", "act", "is", "not", "None", ":", "\n", "            ", "m", ".", "append", "(", "act", ")", "\n", "\n", "", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", "*", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.common.ResBlock.__init__": [[38, 53], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "m.append", "conv", "m.append", "m.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "conv", ",", "n_feats", ",", "kernel_size", ",", "\n", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "res_scale", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "m", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "m", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "\n", "                ", "m", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feats", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "m", ".", "append", "(", "act", ")", "\n", "\n", "", "", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "m", ")", "\n", "self", ".", "res_scale", "=", "res_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.common.ResBlock.forward": [[54, 59], ["common.ResBlock.body().mul", "common.ResBlock.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", ".", "mul", "(", "self", ".", "res_scale", ")", "\n", "res", "+=", "x", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.common.Upsampler.__init__": [[61, 88], ["torch.Sequential.__init__", "range", "int", "m.append", "m.append", "m.append", "m.append", "math.log", "conv", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "m.append", "m.append", "conv", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "m.append", "m.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "m.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "m.append", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv", ",", "scale", ",", "n_feats", ",", "bn", "=", "False", ",", "act", "=", "False", ",", "bias", "=", "True", ")", ":", "\n", "\n", "        ", "m", "=", "[", "]", "\n", "if", "(", "scale", "&", "(", "scale", "-", "1", ")", ")", "==", "0", ":", "# Is scale = 2^n?", "\n", "            ", "for", "_", "in", "range", "(", "int", "(", "math", ".", "log", "(", "scale", ",", "2", ")", ")", ")", ":", "\n", "                ", "m", ".", "append", "(", "conv", "(", "n_feats", ",", "4", "*", "n_feats", ",", "3", ",", "bias", ")", ")", "\n", "m", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "2", ")", ")", "\n", "if", "bn", ":", "\n", "                    ", "m", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feats", ")", ")", "\n", "", "if", "act", "==", "'relu'", ":", "\n", "                    ", "m", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "", "elif", "act", "==", "'prelu'", ":", "\n", "                    ", "m", ".", "append", "(", "nn", ".", "PReLU", "(", "n_feats", ")", ")", "\n", "\n", "", "", "", "elif", "scale", "==", "3", ":", "\n", "            ", "m", ".", "append", "(", "conv", "(", "n_feats", ",", "9", "*", "n_feats", ",", "3", ",", "bias", ")", ")", "\n", "m", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "3", ")", ")", "\n", "if", "bn", ":", "\n", "                ", "m", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feats", ")", ")", "\n", "", "if", "act", "==", "'relu'", ":", "\n", "                ", "m", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "", "elif", "act", "==", "'prelu'", ":", "\n", "                ", "m", ".", "append", "(", "nn", ".", "PReLU", "(", "n_feats", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "super", "(", "Upsampler", ",", "self", ")", ".", "__init__", "(", "*", "m", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.common.default_conv": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "default_conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "//", "2", ")", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.CALayer.__init__": [[15, 25], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# global average pooling: feature --> point", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.CALayer.forward": [[27, 31], ["SANet.CALayer.avg_pool", "SANet.CALayer.conv_du"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "conv_du", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.LAM_Module.__init__": [[34, 41], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "LAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.LAM_Module.forward": [[41, 63], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "SANet.LAM_Module.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "out.view.view.view", "[].expand_as", "x.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X N X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X N X N\n        \"\"\"", "\n", "m_batchsize", ",", "N", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "N", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "N", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "N", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "N", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.CSAM_Module.__init__": [[66, 75], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CSAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "1", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "#self.softmax  = nn.Softmax(dim=-1)", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.CSAM_Module.forward": [[75, 91], ["x.size", "x.unsqueeze", "SANet.CSAM_Module.sigmoid", "out.view.view.view", "SANet.CSAM_Module.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X N X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X N X N\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "out", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "self", ".", "conv", "(", "out", ")", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "x", "=", "x", "*", "out", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.RCAB.__init__": [[93, 106], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules_body.append", "SANet.CALayer", "conv", "modules_body.append", "modules_body.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "\n", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "res_scale", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "RCAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "modules_body", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feat", ")", ")", "\n", "if", "i", "==", "0", ":", "modules_body", ".", "append", "(", "act", ")", "\n", "", "modules_body", ".", "append", "(", "CALayer", "(", "n_feat", ",", "reduction", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "res_scale", "=", "res_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.RCAB.forward": [[107, 112], ["SANet.RCAB.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "#res = self.body(x).mul(self.res_scale)", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.ResidualGroup.__init__": [[115, 124], ["torch.Module.__init__", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "SANet.RCAB", "conv", "range", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "act", ",", "res_scale", ",", "n_resblocks", ")", ":", "\n", "        ", "super", "(", "ResidualGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "modules_body", "=", "[", "\n", "RCAB", "(", "\n", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "res_scale", "=", "1", ")", "for", "_", "in", "range", "(", "n_resblocks", ")", "]", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.ResidualGroup.forward": [[125, 129], ["SANet.ResidualGroup.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.SR_Branch.__init__": [[132, 176], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules_body.append", "fastmri.models.common.MeanShift", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "SANet.CSAM_Module", "SANet.LAM_Module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "conv", "SANet.ResidualGroup", "conv", "fastmri.models.common.Upsampler", "conv", "range"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "n_resgroups", ",", "n_resblocks", ",", "n_feats", ",", "conv", "=", "common", ".", "default_conv", ")", ":", "\n", "        ", "super", "(", "SR_Branch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "n_resgroups", "=", "n_resgroups", "#10", "\n", "self", ".", "n_resblocks", "=", "n_resblocks", "#20", "\n", "self", ".", "n_feats", "=", "n_feats", "#64", "\n", "kernel_size", "=", "3", "\n", "reduction", "=", "16", "#16", "\n", "# scale = args.scale[0]", "\n", "\n", "rgb_range", "=", "255", "\n", "n_colors", "=", "1", "\n", "res_scale", "=", "0.1", "\n", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "\n", "# define head module", "\n", "modules_head", "=", "[", "conv", "(", "n_colors", ",", "n_feats", ",", "kernel_size", ")", "]", "\n", "\n", "# define body module", "\n", "modules_body", "=", "[", "\n", "ResidualGroup", "(", "\n", "conv", ",", "n_feats", ",", "kernel_size", ",", "reduction", ",", "act", "=", "act", ",", "res_scale", "=", "res_scale", ",", "n_resblocks", "=", "n_resblocks", ")", "for", "_", "in", "range", "(", "n_resgroups", ")", "]", "\n", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ")", "\n", "\n", "# define tail module", "\n", "modules_tail", "=", "[", "\n", "common", ".", "Upsampler", "(", "conv", ",", "scale", ",", "n_feats", ",", "act", "=", "False", ")", ",", "\n", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", "]", "#n_colors", "\n", "\n", "self", ".", "add_mean", "=", "common", ".", "MeanShift", "(", "rgb_range", ",", "rgb_mean", ",", "rgb_std", ",", "1", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "modules_head", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "csa", "=", "CSAM_Module", "(", "n_feats", ")", "\n", "self", ".", "la", "=", "LAM_Module", "(", "n_feats", ")", "\n", "self", ".", "last_conv", "=", "nn", ".", "Conv2d", "(", "n_feats", "*", "(", "n_resgroups", "+", "2", ")", ",", "n_feats", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "last", "=", "nn", ".", "Conv2d", "(", "n_feats", "*", "2", ",", "n_feats", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "last1", "=", "nn", ".", "Conv2d", "(", "n_feats", ",", "n_feats", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "*", "modules_tail", ")", "\n", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "n_feats", ",", "n_colors", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.SR_Branch.forward": [[177, 208], ["SANet.SR_Branch.head", "outputs.append", "SANet.SR_Branch.body._modules.items", "SANet.SR_Branch.la", "SANet.SR_Branch.last_conv", "SANet.SR_Branch.csa", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SANet.SR_Branch.last", "outputs.append", "SANet.SR_Branch.tail", "midlayer", "outputs.append", "midlayer.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "midlayer.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "\n", "res", "=", "x", "\n", "\n", "for", "name", ",", "midlayer", "in", "self", ".", "body", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "res", "=", "midlayer", "(", "res", ")", "\n", "\n", "if", "name", "==", "'0'", ":", "\n", "                ", "res1", "=", "res", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "res1", "=", "torch", ".", "cat", "(", "[", "res", ".", "unsqueeze", "(", "1", ")", ",", "res1", "]", ",", "1", ")", "\n", "\n", "", "outputs", ".", "append", "(", "res1", ")", "\n", "\n", "", "out1", "=", "res", "\n", "res", "=", "self", ".", "la", "(", "res1", ")", "\n", "out2", "=", "self", ".", "last_conv", "(", "res", ")", "\n", "out1", "=", "self", ".", "csa", "(", "out1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "res", "=", "self", ".", "last", "(", "out", ")", "\n", "\n", "res", "+=", "x", "\n", "\n", "outputs", ".", "append", "(", "res", ")", "\n", "\n", "x", "=", "self", ".", "tail", "(", "res", ")", "\n", "\n", "return", "outputs", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.SR_Branch.load_state_dict": [[209, 234], ["SANet.SR_Branch.state_dict", "state_dict.items", "isinstance", "set", "set", "len", "KeyError", "own_state[].copy_", "SANet.SR_Branch.keys", "state_dict.keys", "name.find", "KeyError", "name.find", "print", "RuntimeError", "own_state[].size", "param.size"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "False", ")", ":", "\n", "        ", "own_state", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "own_state", ":", "\n", "                ", "if", "isinstance", "(", "param", ",", "nn", ".", "Parameter", ")", ":", "\n", "                    ", "param", "=", "param", ".", "data", "\n", "", "try", ":", "\n", "                    ", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "if", "name", ".", "find", "(", "'tail'", ")", ">=", "0", ":", "\n", "                        ", "print", "(", "'Replace pre-trained upsampler to new one...'", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'While copying the parameter named {}, '", "\n", "'whose dimensions in the model are {} and '", "\n", "'whose dimensions in the checkpoint are {}.'", "\n", ".", "format", "(", "name", ",", "own_state", "[", "name", "]", ".", "size", "(", ")", ",", "param", ".", "size", "(", ")", ")", ")", "\n", "", "", "", "elif", "strict", ":", "\n", "                ", "if", "name", ".", "find", "(", "'tail'", ")", "==", "-", "1", ":", "\n", "                    ", "raise", "KeyError", "(", "'unexpected key \"{}\" in state_dict'", "\n", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "", "", "if", "strict", ":", "\n", "            ", "missing", "=", "set", "(", "own_state", ".", "keys", "(", ")", ")", "-", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "                ", "raise", "KeyError", "(", "'missing keys in state_dict: \"{}\"'", ".", "format", "(", "missing", ")", ")", "\n", "", "", "", "", "class", "Pred_Layer", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.Pred_Layer.__init__": [[235, 244], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", "=", "32", ")", ":", "\n", "        ", "super", "(", "Pred_Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enlayer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "outlayer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.Pred_Layer.forward": [[245, 249], ["SANet.Pred_Layer.enlayer", "SANet.Pred_Layer.outlayer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "enlayer", "(", "x", ")", "\n", "x", "=", "self", ".", "outlayer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.Seatt.__init__": [[251, 266], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "SANet.Pred_Layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ")", ":", "\n", "        ", "super", "(", "Seatt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduce", "=", "nn", ".", "Conv2d", "(", "in_c", "*", "2", ",", "32", ",", "1", ")", "\n", "self", ".", "ff_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "bf_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "rgbd_pred_layer", "=", "Pred_Layer", "(", "32", "*", "2", ")", "\n", "self", ".", "convq", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.Seatt.forward": [[267, 286], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vis_attention_map_rgb_feat", "vis_attention_map_dep_feat", "vis_attention_map_feat", "SANet.Seatt.reduce", "SANet.Seatt.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "SANet.Seatt.ff_conv", "SANet.Seatt.bf_conv", "SANet.Seatt.rgbd_pred_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "rgb_feat", ",", "dep_feat", ",", "pred", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "(", "rgb_feat", ",", "dep_feat", ")", ",", "1", ")", "\n", "\n", "vis_attention_map_rgb_feat", "(", "rgb_feat", "[", "0", "]", "[", "0", "]", ")", "\n", "vis_attention_map_dep_feat", "(", "dep_feat", "[", "0", "]", "[", "0", "]", ")", "\n", "vis_attention_map_feat", "(", "feat", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "\n", "feat", "=", "self", ".", "reduce", "(", "feat", ")", "\n", "[", "_", ",", "_", ",", "H", ",", "W", "]", "=", "feat", ".", "size", "(", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "\n", "ni_pred", "=", "1", "-", "pred", "\n", "\n", "ff_feat", "=", "self", ".", "ff_conv", "(", "feat", "*", "pred", ")", "\n", "bf_feat", "=", "self", ".", "bf_conv", "(", "feat", "*", "(", "1", "-", "pred", ")", ")", "\n", "new_pred", "=", "self", ".", "rgbd_pred_layer", "(", "torch", ".", "cat", "(", "(", "ff_feat", ",", "bf_feat", ")", ",", "1", ")", ")", "\n", "\n", "return", "new_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.SANet.__init__": [[288, 332], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "SANet.SR_Branch", "SANet.SR_Branch", "SANet.SR_Branch", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "SANet.Pred_Layer", "SANet.SANet.net1.body._modules.items", "SANet.Seatt", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "range"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "n_resgroups", ",", "n_resblocks", ",", "n_feats", ")", ":", "\n", "        ", "super", "(", "SANet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "n_resgroups", "=", "n_resgroups", "\n", "self", ".", "n_resblocks", "=", "n_resblocks", "\n", "self", ".", "n_feats", "=", "n_feats", "\n", "\n", "cs", "=", "[", "64", ",", "64", ",", "64", ",", "64", "]", "\n", "self", ".", "Seatts", "=", "nn", ".", "ModuleList", "(", "[", "Seatt", "(", "c", ")", "for", "c", "in", "cs", "]", ")", "\n", "\n", "self", ".", "net1", "=", "SR_Branch", "(", "\n", "scale", "=", "self", ".", "scale", ",", "\n", "n_resgroups", "=", "self", ".", "n_resgroups", ",", "\n", "n_resblocks", "=", "self", ".", "n_resblocks", ",", "\n", "n_feats", "=", "self", ".", "n_feats", ",", "\n", ")", "\n", "\n", "self", ".", "net2", "=", "SR_Branch", "(", "\n", "scale", "=", "self", ".", "scale", ",", "\n", "n_resgroups", "=", "self", ".", "n_resgroups", ",", "\n", "n_resblocks", "=", "self", ".", "n_resblocks", ",", "\n", "n_feats", "=", "self", ".", "n_feats", ",", "\n", ")", "\n", "\n", "main_net", "=", "SR_Branch", "(", "\n", "scale", "=", "self", ".", "scale", ",", "\n", "n_resgroups", "=", "self", ".", "n_resgroups", ",", "\n", "n_resblocks", "=", "self", ".", "n_resblocks", ",", "\n", "n_feats", "=", "self", ".", "n_feats", ",", "\n", ")", "\n", "\n", "self", ".", "body", "=", "main_net", ".", "body", "\n", "self", ".", "csa", "=", "main_net", ".", "csa", "\n", "self", ".", "la", "=", "main_net", ".", "la", "\n", "self", ".", "last_conv", "=", "main_net", ".", "last_conv", "\n", "self", ".", "last", "=", "main_net", ".", "last", "\n", "self", ".", "last1", "=", "main_net", ".", "last1", "\n", "self", ".", "tail", "=", "main_net", ".", "tail", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "nlayer", "=", "len", "(", "self", ".", "net1", ".", "body", ".", "_modules", ".", "items", "(", ")", ")", "\n", "print", "(", "\"nlayer:\"", ",", "nlayer", ")", "\n", "self", ".", "fusion_convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "for", "i", "in", "range", "(", "nlayer", ")", "]", ")", "\n", "self", ".", "map_convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "for", "i", "in", "range", "(", "nlayer", ")", "]", ")", "\n", "self", ".", "rgbd_global", "=", "Pred_Layer", "(", "32", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.SANet.forward": [[333, 384], ["SANet.SANet.net1.head", "SANet.SANet.net2.head", "SANet.SANet.tail", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SANet.SANet.net2.la", "SANet.SANet.net2.last_conv", "SANet.SANet.net1.csa", "SANet.SANet.net2.csa", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SANet.SANet.net1.last1", "SANet.SANet.net2.last", "SANet.SANet.net1.final", "SANet.SANet.net2.final", "SANet.SANet.net1.body._modules.items", "SANet.SANet.net2.body._modules.items", "midlayer1", "midlayer2", "t1s.append", "t2s.append", "map_conv", "SANet.Seatt", "midlayer1.unsqueeze", "midlayer2.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "target_HR_T2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "net1", ".", "head", "(", "x1", ")", "\n", "x2", "=", "self", ".", "net2", ".", "head", "(", "x2", ")", "\n", "\n", "x2", "=", "self", ".", "tail", "(", "x2", ")", "\n", "\n", "resT1", "=", "x1", "\n", "resT2", "=", "x2", "\n", "\n", "t1s", "=", "[", "]", "\n", "t2s", "=", "[", "]", "\n", "\n", "for", "m1", ",", "m2", ",", "Seatt", ",", "map_conv", "in", "zip", "(", "self", ".", "net1", ".", "body", ".", "_modules", ".", "items", "(", ")", ",", "self", ".", "net2", ".", "body", ".", "_modules", ".", "items", "(", ")", ",", "self", ".", "Seatts", ",", "self", ".", "map_convs", ")", ":", "\n", "\n", "            ", "name1", ",", "midlayer1", "=", "m1", "\n", "_", ",", "midlayer2", "=", "m2", "\n", "\n", "resT1", "=", "midlayer1", "(", "resT1", ")", "\n", "resT2", "=", "midlayer2", "(", "resT2", ")", "\n", "\n", "t1s", ".", "append", "(", "resT1", ".", "unsqueeze", "(", "1", ")", ")", "\n", "t2s", ".", "append", "(", "resT2", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "pred", "=", "map_conv", "(", "resT1", ")", "\n", "res", "=", "Seatt", "(", "resT1", ",", "resT2", ",", "pred", ")", "\n", "\n", "resT2", "=", "res", "+", "resT2", "\n", "\n", "\n", "", "out1T1", "=", "resT1", "\n", "out1T2", "=", "resT2", "\n", "\n", "ts", "=", "t1s", "+", "t2s", "\n", "ts", "=", "torch", ".", "cat", "(", "ts", ",", "dim", "=", "1", ")", "\n", "res1_T2", "=", "self", ".", "net2", ".", "la", "(", "ts", ")", "\n", "out2_T2", "=", "self", ".", "net2", ".", "last_conv", "(", "res1_T2", ")", "\n", "\n", "out1T1", "=", "self", ".", "net1", ".", "csa", "(", "out1T1", ")", "\n", "out1T2", "=", "self", ".", "net2", ".", "csa", "(", "out1T2", ")", "\n", "\n", "outT2", "=", "torch", ".", "cat", "(", "[", "out1T2", ",", "out2_T2", "]", ",", "1", ")", "\n", "resT1", "=", "self", ".", "net1", ".", "last1", "(", "out1T1", ")", "\n", "resT2", "=", "self", ".", "net2", ".", "last", "(", "outT2", ")", "\n", "\n", "resT1", "+=", "x1", "\n", "resT2", "+=", "x2", "\n", "\n", "x1", "=", "self", ".", "net1", ".", "final", "(", "resT1", ")", "\n", "x2", "=", "self", ".", "net2", ".", "final", "(", "resT2", ")", "\n", "\n", "return", "x1", ",", "x2", "", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.SANet.make_model": [[10, 12], ["SANet.SR_Branch"], "function", ["None"], ["def", "make_model", "(", "args", ",", "parent", "=", "False", ")", ":", "\n", "    ", "return", "SR_Branch", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u": [[7, 13], ["abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs"], "function", ["None"], ["def", "u", "(", "s", ",", "a", ")", ":", "\n", "    ", "if", "(", "abs", "(", "s", ")", ">=", "0", ")", "&", "(", "abs", "(", "s", ")", "<=", "1", ")", ":", "\n", "        ", "return", "(", "a", "+", "2", ")", "*", "(", "abs", "(", "s", ")", "**", "3", ")", "-", "(", "a", "+", "3", ")", "*", "(", "abs", "(", "s", ")", "**", "2", ")", "+", "1", "\n", "", "elif", "(", "abs", "(", "s", ")", ">", "1", ")", "&", "(", "abs", "(", "s", ")", "<=", "2", ")", ":", "\n", "        ", "return", "a", "*", "(", "abs", "(", "s", ")", "**", "3", ")", "-", "(", "5", "*", "a", ")", "*", "(", "abs", "(", "s", ")", "**", "2", ")", "+", "(", "8", "*", "a", ")", "*", "abs", "(", "s", ")", "-", "4", "*", "a", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.padding": [[15, 29], ["numpy.zeros"], "function", ["None"], ["", "def", "padding", "(", "img", ",", "H", ",", "W", ",", "C", ")", ":", "\n", "    ", "zimg", "=", "np", ".", "zeros", "(", "(", "H", "+", "4", ",", "W", "+", "4", ",", "C", ")", ")", "\n", "zimg", "[", "2", ":", "H", "+", "2", ",", "2", ":", "W", "+", "2", ",", ":", "C", "]", "=", "img", "\n", "#Pad the first/last two col and row", "\n", "zimg", "[", "2", ":", "H", "+", "2", ",", "0", ":", "2", ",", ":", "C", "]", "=", "img", "[", ":", ",", "0", ":", "1", ",", ":", "C", "]", "\n", "zimg", "[", "H", "+", "2", ":", "H", "+", "4", ",", "2", ":", "W", "+", "2", ",", ":", "]", "=", "img", "[", "H", "-", "1", ":", "H", ",", ":", ",", ":", "]", "\n", "zimg", "[", "2", ":", "H", "+", "2", ",", "W", "+", "2", ":", "W", "+", "4", ",", ":", "]", "=", "img", "[", ":", ",", "W", "-", "1", ":", "W", ",", ":", "]", "\n", "zimg", "[", "0", ":", "2", ",", "2", ":", "W", "+", "2", ",", ":", "C", "]", "=", "img", "[", "0", ":", "1", ",", ":", ",", ":", "C", "]", "\n", "#Pad the missing eight points", "\n", "zimg", "[", "0", ":", "2", ",", "0", ":", "2", ",", ":", "C", "]", "=", "img", "[", "0", ",", "0", ",", ":", "C", "]", "\n", "zimg", "[", "H", "+", "2", ":", "H", "+", "4", ",", "0", ":", "2", ",", ":", "C", "]", "=", "img", "[", "H", "-", "1", ",", "0", ",", ":", "C", "]", "\n", "zimg", "[", "H", "+", "2", ":", "H", "+", "4", ",", "W", "+", "2", ":", "W", "+", "4", ",", ":", "C", "]", "=", "img", "[", "H", "-", "1", ",", "W", "-", "1", ",", ":", "C", "]", "\n", "zimg", "[", "0", ":", "2", ",", "W", "+", "2", ":", "W", "+", "4", ",", ":", "C", "]", "=", "img", "[", "0", ",", "W", "-", "1", ",", ":", "C", "]", "\n", "return", "zimg", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.get_progressbar_str": [[31, 39], ["int"], "function", ["None"], ["", "def", "get_progressbar_str", "(", "progress", ")", ":", "\n", "    ", "END", "=", "170", "\n", "MAX_LEN", "=", "30", "\n", "BAR_LEN", "=", "int", "(", "MAX_LEN", "*", "progress", ")", "\n", "return", "(", "'Progress:['", "+", "'='", "*", "BAR_LEN", "+", "\n", "(", "'>'", "if", "BAR_LEN", "<", "MAX_LEN", "else", "''", ")", "+", "\n", "' '", "*", "(", "MAX_LEN", "-", "BAR_LEN", ")", "+", "\n", "'] %.1f%%'", "%", "(", "progress", "*", "100.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.bicubic": [[41, 86], ["bicubic.padding", "math.floor", "math.floor", "numpy.zeros", "print", "print", "range", "sys.stderr.write", "sys.stderr.flush", "range", "range", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.dot", "sys.stderr.write", "sys.stderr.flush", "math.floor", "math.floor", "math.floor", "math.floor", "numpy.dot", "math.floor", "math.floor", "math.floor", "math.floor", "bicubic.get_progressbar_str", "bicubic.u", "bicubic.u", "bicubic.u", "bicubic.u", "bicubic.u", "bicubic.u", "bicubic.u", "bicubic.u", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.padding", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.get_progressbar_str", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u", "home.repos.pwc.inspect_result.chunmeifeng_SANet.models.bicubic.u"], ["", "def", "bicubic", "(", "img", ",", "ratio", ",", "a", ")", ":", "\n", "#Get image size", "\n", "    ", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "\n", "\n", "img", "=", "padding", "(", "img", ",", "H", ",", "W", ",", "C", ")", "\n", "#Create new image", "\n", "dH", "=", "math", ".", "floor", "(", "H", "*", "ratio", ")", "\n", "dW", "=", "math", ".", "floor", "(", "W", "*", "ratio", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "dH", ",", "dW", ",", "3", ")", ")", "\n", "\n", "h", "=", "1", "/", "ratio", "\n", "\n", "print", "(", "'Start bicubic interpolation'", ")", "\n", "print", "(", "'It will take a little while...'", ")", "\n", "inc", "=", "0", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "dH", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "dW", ")", ":", "\n", "                ", "x", ",", "y", "=", "i", "*", "h", "+", "2", ",", "j", "*", "h", "+", "2", "\n", "\n", "x1", "=", "1", "+", "x", "-", "math", ".", "floor", "(", "x", ")", "\n", "x2", "=", "x", "-", "math", ".", "floor", "(", "x", ")", "\n", "x3", "=", "math", ".", "floor", "(", "x", ")", "+", "1", "-", "x", "\n", "x4", "=", "math", ".", "floor", "(", "x", ")", "+", "2", "-", "x", "\n", "\n", "y1", "=", "1", "+", "y", "-", "math", ".", "floor", "(", "y", ")", "\n", "y2", "=", "y", "-", "math", ".", "floor", "(", "y", ")", "\n", "y3", "=", "math", ".", "floor", "(", "y", ")", "+", "1", "-", "y", "\n", "y4", "=", "math", ".", "floor", "(", "y", ")", "+", "2", "-", "y", "\n", "\n", "mat_l", "=", "np", ".", "matrix", "(", "[", "[", "u", "(", "x1", ",", "a", ")", ",", "u", "(", "x2", ",", "a", ")", ",", "u", "(", "x3", ",", "a", ")", ",", "u", "(", "x4", ",", "a", ")", "]", "]", ")", "\n", "mat_m", "=", "np", ".", "matrix", "(", "[", "[", "img", "[", "int", "(", "y", "-", "y1", ")", ",", "int", "(", "x", "-", "x1", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "-", "y2", ")", ",", "int", "(", "x", "-", "x1", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y3", ")", ",", "int", "(", "x", "-", "x1", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y4", ")", ",", "int", "(", "x", "-", "x1", ")", ",", "c", "]", "]", ",", "\n", "[", "img", "[", "int", "(", "y", "-", "y1", ")", ",", "int", "(", "x", "-", "x2", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "-", "y2", ")", ",", "int", "(", "x", "-", "x2", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y3", ")", ",", "int", "(", "x", "-", "x2", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y4", ")", ",", "int", "(", "x", "-", "x2", ")", ",", "c", "]", "]", ",", "\n", "[", "img", "[", "int", "(", "y", "-", "y1", ")", ",", "int", "(", "x", "+", "x3", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "-", "y2", ")", ",", "int", "(", "x", "+", "x3", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y3", ")", ",", "int", "(", "x", "+", "x3", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y4", ")", ",", "int", "(", "x", "+", "x3", ")", ",", "c", "]", "]", ",", "\n", "[", "img", "[", "int", "(", "y", "-", "y1", ")", ",", "int", "(", "x", "+", "x4", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "-", "y2", ")", ",", "int", "(", "x", "+", "x4", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y3", ")", ",", "int", "(", "x", "+", "x4", ")", ",", "c", "]", ",", "img", "[", "int", "(", "y", "+", "y4", ")", ",", "int", "(", "x", "+", "x4", ")", ",", "c", "]", "]", "]", ")", "\n", "mat_r", "=", "np", ".", "matrix", "(", "[", "[", "u", "(", "y1", ",", "a", ")", "]", ",", "[", "u", "(", "y2", ",", "a", ")", "]", ",", "[", "u", "(", "y3", ",", "a", ")", "]", ",", "[", "u", "(", "y4", ",", "a", ")", "]", "]", ")", "\n", "dst", "[", "j", ",", "i", ",", "c", "]", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "mat_l", ",", "mat_m", ")", ",", "mat_r", ")", "\n", "\n", "# Print progress", "\n", "inc", "=", "inc", "+", "1", "\n", "sys", ".", "stderr", ".", "write", "(", "'\\r\\033[K'", "+", "get_progressbar_str", "(", "inc", "/", "(", "C", "*", "dH", "*", "dW", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "", "", "sys", ".", "stderr", ".", "write", "(", "'\\n'", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.get_affine_transform": [[10, 36], ["transforms.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "transforms.get_3rd_point", "transforms.get_3rd_point", "cv2.getAffineTransform", "numpy.array", "numpy.array", "numpy.float32", "numpy.float32", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.get_dir", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.get_3rd_point", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.get_3rd_point"], ["def", "get_affine_transform", "(", "center", ",", "scale", ",", "rot", ",", "output_size", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ")", "\n", "", "scale_tmp", "=", "scale", "*", "200.0", "\n", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "1", "]", "\n", "dst_h", "=", "output_size", "[", "0", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.affine_transform": [[38, 42], ["numpy.array", "numpy.dot"], "function", ["None"], ["", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ")", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.get_3rd_point": [[44, 47], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.get_dir": [[49, 57], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.flip_back": [[59, 68], ["output[].copy"], "function", ["None"], ["", "def", "flip_back", "(", "output", ",", "pairs", ")", ":", "\n", "    ", "output", "=", "output", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "for", "pair", "in", "pairs", ":", "\n", "        ", "tmp", "=", "output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "=", "output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "=", "tmp", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.transforms.flip_joints": [[70, 80], ["joints[].copy", "joints_vis[].copy"], "function", ["None"], ["", "def", "flip_joints", "(", "joints", ",", "joints_vis", ",", "width", ",", "pairs", ")", ":", "\n", "    ", "joints", "[", ":", ",", "0", "]", "=", "width", "-", "joints", "[", ":", ",", "0", "]", "-", "1", "\n", "\n", "for", "pair", "in", "pairs", ":", "\n", "        ", "joints", "[", "pair", "[", "0", "]", ",", ":", "]", ",", "joints", "[", "pair", "[", "1", "]", ",", ":", "]", "=", "joints", "[", "pair", "[", "1", "]", ",", ":", "]", ",", "joints", "[", "pair", "[", "0", "]", ",", ":", "]", ".", "copy", "(", ")", "\n", "joints_vis", "[", "pair", "[", "0", "]", ",", ":", "]", ",", "joints_vis", "[", "pair", "[", "1", "]", ",", ":", "]", "=", "joints_vis", "[", "pair", "[", "1", "]", ",", ":", "]", ",", "joints_vis", "[", "pair", "[", "0", "]", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "", "return", "joints", ",", "joints_vis", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size": [[12, 18], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_rank": [[20, 26], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.is_main_process": [[28, 30], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.synchronize": [[32, 45], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.all_gather": [[47, 88], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.all_gather", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.reduce_dict": [[90, 117], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.solver.make_optimizer": [[8, 20], ["torch.Adam", "model.parameters", "torch.SGD", "model.parameters"], "function", ["None"], ["def", "make_optimizer", "(", "cfg", ",", "model", ",", "num_gpu", ")", ":", "\n", "    ", "if", "cfg", ".", "SOLVER", ".", "OPTIMIZER", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "num_gpu", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "\n", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "cfg", ".", "OPTIMIZER", "==", "'SGD'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "\n", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.solver.make_lr_scheduler": [[22, 32], ["torch.lr_scheduler.LambdaLR"], "function", ["None"], ["", "def", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "    ", "w_iters", "=", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", "\n", "w_fac", "=", "cfg", ".", "SOLVER", ".", "WARMUP_FACTOR", "\n", "max_iter", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "lr_lambda", "=", "lambda", "iteration", ":", "w_fac", "+", "(", "1", "-", "w_fac", ")", "*", "iteration", "/", "w_iters", "if", "iteration", "<", "w_iters", "else", "1", "-", "(", "iteration", "-", "w_iters", ")", "/", "(", "max_iter", "-", "w_iters", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.loss.JointsL2Loss.__init__": [[10, 18], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "has_ohkm", "=", "False", ",", "topk", "=", "8", ",", "thresh1", "=", "1", ",", "thresh2", "=", "0", ")", ":", "\n", "        ", "super", "(", "JointsL2Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "has_ohkm", "=", "has_ohkm", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "t1", "=", "thresh1", "\n", "self", ".", "t2", "=", "thresh2", "\n", "method", "=", "'none'", "if", "self", ".", "has_ohkm", "else", "'mean'", "\n", "self", ".", "calculate", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.loss.JointsL2Loss.forward": [[19, 48], ["output.size", "output.size", "range", "output[].reshape", "label[].reshape", "loss.JointsL2Loss.calculate", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "tmp_loss.mean.mean.mean", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.gt().float", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "topk_val.mean", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "valid[].squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "valid", ",", "label", ")", ":", "\n", "        ", "assert", "output", ".", "shape", "==", "label", ".", "shape", "\n", "batch_size", "=", "output", ".", "size", "(", "0", ")", "\n", "keypoint_num", "=", "output", ".", "size", "(", "1", ")", "\n", "loss", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "pred", "=", "output", "[", "i", "]", ".", "reshape", "(", "keypoint_num", ",", "-", "1", ")", "\n", "gt", "=", "label", "[", "i", "]", ".", "reshape", "(", "keypoint_num", ",", "-", "1", ")", "\n", "\n", "if", "not", "self", ".", "has_ohkm", ":", "\n", "                ", "weight", "=", "torch", ".", "gt", "(", "valid", "[", "i", "]", ",", "self", ".", "t1", ")", ".", "float", "(", ")", "\n", "gt", "=", "gt", "*", "weight", "\n", "\n", "", "tmp_loss", "=", "self", ".", "calculate", "(", "pred", ",", "gt", ")", "\n", "\n", "if", "self", ".", "has_ohkm", ":", "\n", "                ", "tmp_loss", "=", "tmp_loss", ".", "mean", "(", "dim", "=", "1", ")", "\n", "weight", "=", "torch", ".", "gt", "(", "valid", "[", "i", "]", ".", "squeeze", "(", ")", ",", "self", ".", "t2", ")", ".", "float", "(", ")", "\n", "tmp_loss", "=", "tmp_loss", "*", "weight", "\n", "topk_val", ",", "topk_id", "=", "torch", ".", "topk", "(", "tmp_loss", ",", "k", "=", "self", ".", "topk", ",", "dim", "=", "0", ",", "\n", "sorted", "=", "False", ")", "\n", "sample_loss", "=", "topk_val", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "sample_loss", "=", "tmp_loss", "\n", "\n", "", "loss", "=", "loss", "+", "sample_loss", "\n", "\n", "", "return", "loss", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.dataloader.get_train_loader": [[18, 73], ["torchvision.Normalize", "torchvision.Compose", "dataset.attribute.load_dataset", "Dataset", "cvpack.dataset.torch_samplers.IterationBasedBatchSampler", "torch.utils.data.DataLoader", "cvpack.dataset.torch_samplers.DistributedSampler", "cvpack.dataset.torch_samplers.GroupedBatchSampler", "torch.utils.data.sampler.BatchSampler", "torchvision.ToTensor", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler", "list", "torch.stack", "torch.stack", "torch.stack", "BatchCollator", "zip"], "function", ["None"], ["def", "get_train_loader", "(", "\n", "cfg", ",", "num_gpu", ",", "is_dist", "=", "True", ",", "is_shuffle", "=", "True", ",", "start_iter", "=", "0", ")", ":", "\n", "# -------- get raw dataset interface -------- #", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "MEANS", ",", "std", "=", "cfg", ".", "INPUT", ".", "STDS", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "attr", "=", "load_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ")", "\n", "if", "cfg", ".", "DATASET", ".", "NAME", "==", "'COCO'", ":", "\n", "        ", "Dataset", "=", "COCODataset", "\n", "", "elif", "cfg", ".", "DATASET", ".", "NAME", "==", "'MPII'", ":", "\n", "        ", "Dataset", "=", "MPIIDataset", "\n", "", "dataset", "=", "Dataset", "(", "attr", ",", "'train'", ",", "transform", ")", "\n", "\n", "# -------- make samplers -------- #", "\n", "if", "is_dist", ":", "\n", "        ", "sampler", "=", "torch_samplers", ".", "DistributedSampler", "(", "\n", "dataset", ",", "shuffle", "=", "is_shuffle", ")", "\n", "", "elif", "is_shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "", "images_per_gpu", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_GPU", "\n", "# images_per_gpu = cfg.SOLVER.IMS_PER_BATCH // num_gpu", "\n", "\n", "aspect_grouping", "=", "[", "1", "]", "if", "cfg", ".", "DATALOADER", ".", "ASPECT_RATIO_GROUPING", "else", "[", "]", "\n", "if", "aspect_grouping", ":", "\n", "        ", "batch_sampler", "=", "torch_samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "dataset", ",", "aspect_grouping", ",", "images_per_gpu", ",", "\n", "drop_uneven", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_gpu", ",", "drop_last", "=", "True", ")", "#False", "\n", "\n", "", "batch_sampler", "=", "torch_samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "cfg", ".", "SOLVER", ".", "MAX_ITER", ",", "start_iter", ")", "\n", "\n", "# -------- make data_loader -------- #", "\n", "class", "BatchCollator", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "size_divisible", ")", ":", "\n", "            ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "            ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "transposed_batch", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "valids", "=", "torch", ".", "stack", "(", "transposed_batch", "[", "1", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "transposed_batch", "[", "2", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "images", ",", "valids", ",", "labels", "\n", "\n", "", "", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "BatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", ",", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.dataloader.get_test_loader": [[75, 124], ["torchvision.Normalize", "torchvision.Compose", "dataset.attribute.load_dataset", "Dataset", "Dataset.__len__", "math.ceil", "min", "range", "torch.utils.data.Subset", "torch.utils.data.sampler.SequentialSampler", "torch.utils.data.sampler.BatchSampler", "torch.utils.data.DataLoader", "torchvision.ToTensor", "list", "torch.stack", "list", "list", "list", "list", "BatchCollator", "zip"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.volume_sampler.VolumeSampler.__len__"], ["", "def", "get_test_loader", "(", "cfg", ",", "num_gpu", ",", "local_rank", ",", "stage", ",", "is_dist", "=", "True", ")", ":", "\n", "# -------- get raw dataset interface -------- #", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "MEANS", ",", "std", "=", "cfg", ".", "INPUT", ".", "STDS", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "attr", "=", "load_dataset", "(", "cfg", ".", "DATASET", ".", "NAME", ")", "\n", "if", "cfg", ".", "DATASET", ".", "NAME", "==", "'COCO'", ":", "\n", "        ", "Dataset", "=", "COCODataset", "\n", "", "elif", "cfg", ".", "DATASET", ".", "NAME", "==", "'MPII'", ":", "\n", "        ", "Dataset", "=", "MPIIDataset", "\n", "", "dataset", "=", "Dataset", "(", "attr", ",", "stage", ",", "transform", ")", "\n", "\n", "# -------- split dataset to gpus -------- #", "\n", "num_data", "=", "dataset", ".", "__len__", "(", ")", "\n", "num_data_per_gpu", "=", "math", ".", "ceil", "(", "num_data", "/", "num_gpu", ")", "\n", "st", "=", "local_rank", "*", "num_data_per_gpu", "\n", "ed", "=", "min", "(", "num_data", ",", "st", "+", "num_data_per_gpu", ")", "\n", "indices", "=", "range", "(", "st", ",", "ed", ")", "\n", "subset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "indices", ")", "\n", "\n", "# -------- make samplers -------- #", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "subset", ")", "\n", "\n", "images_per_gpu", "=", "cfg", ".", "TEST", ".", "IMS_PER_GPU", "\n", "\n", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_gpu", ",", "drop_last", "=", "True", ")", "#False", "\n", "\n", "# -------- make data_loader -------- #", "\n", "class", "BatchCollator", "(", "object", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "size_divisible", ")", ":", "\n", "            ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "            ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "transposed_batch", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "scores", "=", "list", "(", "transposed_batch", "[", "1", "]", ")", "\n", "centers", "=", "list", "(", "transposed_batch", "[", "2", "]", ")", "\n", "scales", "=", "list", "(", "transposed_batch", "[", "3", "]", ")", "\n", "image_ids", "=", "list", "(", "transposed_batch", "[", "4", "]", ")", "\n", "\n", "return", "images", ",", "scores", ",", "centers", ",", "scales", ",", "image_ids", "\n", "\n", "", "", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "subset", ",", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "BatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", ",", ")", "\n", "data_loader", ".", "ori_dataset", "=", "dataset", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.to_tensor": [[12, 29], ["numpy.iscomplexobj", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["        ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ")", "\n", "", "scale_tmp", "=", "scale", "*", "200.0", "\n", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "1", "]", "\n", "dst_h", "=", "output_size", "[", "0", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ")", "+", "dst_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.tensor_to_complex_np": [[31, 44], ["data.numpy.numpy"], "function", ["None"], ["dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "return", "trans", "\n", "\n", "\n", "", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ")", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "\n", "\n", "", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.apply_mask": [[46, 73], ["numpy.array", "mask_func"], "function", ["None"], ["return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n", "\n", "", "def", "flip_back", "(", "output", ",", "pairs", ")", ":", "\n", "    ", "output", "=", "output", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "for", "pair", "in", "pairs", ":", "\n", "        ", "tmp", "=", "output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "=", "output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "=", "tmp", "\n", "\n", "", "return", "output", "\n", "\n", "\n", "", "def", "flip_joints", "(", "joints", ",", "joints_vis", ",", "width", ",", "pairs", ")", ":", "\n", "    ", "joints", "[", ":", ",", "0", "]", "=", "width", "-", "joints", "[", ":", ",", "0", "]", "-", "1", "\n", "\n", "for", "pair", "in", "pairs", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.mask_center": [[75, 80], ["torch.zeros_like"], "function", ["None"], ["joints", "[", "pair", "[", "1", "]", ",", ":", "]", ",", "joints", "[", "pair", "[", "0", "]", ",", ":", "]", ".", "copy", "(", ")", "\n", "joints_vis", "[", "pair", "[", "0", "]", ",", ":", "]", ",", "joints_vis", "[", "pair", "[", "1", "]", ",", ":", "]", "=", "joints_vis", "[", "pair", "[", "1", "]", ",", ":", "]", ",", "joints_vis", "[", "pair", "[", "0", "]", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "", "return", "joints", ",", "joints_vis", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop": [[82, 105], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.complex_center_crop": [[107, 131], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop_to_smallest": [[133, 154], ["min", "min", "transforms.center_crop", "transforms.center_crop"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop"], []], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.normalize": [[156, 172], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.normalize_instance": [[174, 192], ["data.mean", "data.std", "transforms.normalize"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.normalize"], []], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.SliceDataset.__init__": [[91, 135], ["pathlib.Path", "os.path.join", "ValueError", "open", "csv.reader", "random.shuffle", "round", "mri_data.SliceDataset._retrieve_metadata", "mri_data.SliceDataset._retrieve_metadata", "range", "os.path.join", "os.path.join", "min", "mri_data.SliceDataset.examples.append", "len", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.SliceDataset._retrieve_metadata", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.SliceDataset._retrieve_metadata"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "transform", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "dataset_cache_file", "=", "pathlib", ".", "Path", "(", "\"dataset_cache.pkl\"", ")", ",", "\n", "num_cols", "=", "None", ",", "\n", "mode", "=", "'train'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n", "#challenge", "\n", "if", "challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'challenge should be either \"singlecoil\" or \"multicoil\"'", ")", "\n", "", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "#transform", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "cur_path", "=", "root", "\n", "self", ".", "csv_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "\"singlecoil_\"", "+", "self", ".", "mode", "+", "\"_split_less.csv\"", ")", "\n", "\n", "#\u8bfb\u53d6CSV", "\n", "with", "open", "(", "self", ".", "csv_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "pd_metadata", ",", "pd_num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "0", "]", "+", "'.h5'", ")", ")", "\n", "\n", "pdfs_metadata", ",", "pdfs_num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "1", "]", "+", "'.h5'", ")", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "min", "(", "pd_num_slices", ",", "pdfs_num_slices", ")", ")", ":", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "0", "]", "+", "'.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "1", "]", "+", "'.h5'", ")", "\n", ",", "slice_id", ",", "pd_metadata", ",", "pdfs_metadata", ")", ")", "\n", "\n", "", "", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.SliceDataset.__len__": [[136, 138], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.SliceDataset.__getitem__": [[139, 177], ["h5py.File", "dict", "dict.update", "mri_data.SliceDataset.transform", "h5py.File", "dict", "dict.update", "mri_data.SliceDataset.transform", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "#\u8bfb\u53d6pd", "\n", "        ", "pd_fname", ",", "pdfs_fname", ",", "slice", ",", "pd_metadata", ",", "pdfs_metadata", "=", "self", ".", "examples", "[", "i", "]", "\n", "\n", "with", "h5py", ".", "File", "(", "pd_fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "pd_kspace", "=", "hf", "[", "\"kspace\"", "]", "[", "slice", "]", "\n", "\n", "pd_mask", "=", "np", ".", "asarray", "(", "hf", "[", "\"mask\"", "]", ")", "if", "\"mask\"", "in", "hf", "else", "None", "\n", "\n", "pd_target", "=", "hf", "[", "self", ".", "recons_key", "]", "[", "slice", "]", "if", "self", ".", "recons_key", "in", "hf", "else", "None", "\n", "\n", "attrs", "=", "dict", "(", "hf", ".", "attrs", ")", "\n", "\n", "attrs", ".", "update", "(", "pd_metadata", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "pd_sample", "=", "(", "pd_kspace", ",", "pd_mask", ",", "pd_target", ",", "attrs", ",", "pd_fname", ",", "slice", ")", "\n", "", "else", ":", "\n", "            ", "pd_sample", "=", "self", ".", "transform", "(", "pd_kspace", ",", "pd_mask", ",", "pd_target", ",", "attrs", ",", "pd_fname", ",", "slice", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "pdfs_fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "pdfs_kspace", "=", "hf", "[", "\"kspace\"", "]", "[", "slice", "]", "\n", "pdfs_mask", "=", "np", ".", "asarray", "(", "hf", "[", "\"mask\"", "]", ")", "if", "\"mask\"", "in", "hf", "else", "None", "\n", "\n", "pdfs_target", "=", "hf", "[", "self", ".", "recons_key", "]", "[", "slice", "]", "if", "self", ".", "recons_key", "in", "hf", "else", "None", "\n", "\n", "attrs", "=", "dict", "(", "hf", ".", "attrs", ")", "\n", "\n", "attrs", ".", "update", "(", "pdfs_metadata", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "pdfs_sample", "=", "(", "pdfs_kspace", ",", "pdfs_mask", ",", "pdfs_target", ",", "attrs", ",", "pdfs_fname", ",", "slice", ")", "\n", "", "else", ":", "\n", "            ", "pdfs_sample", "=", "self", ".", "transform", "(", "pdfs_kspace", ",", "pdfs_mask", ",", "pdfs_target", ",", "attrs", ",", "pdfs_fname", ",", "slice", ")", "\n", "\n", "\n", "", "return", "(", "pd_sample", ",", "pdfs_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.SliceDataset._retrieve_metadata": [[178, 212], ["h5py.File", "xml.fromstring", "int", "int", "int", "int", "int", "int", "int", "mri_data.et_query", "int", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query"], ["", "def", "_retrieve_metadata", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "et_root", "=", "etree", ".", "fromstring", "(", "hf", "[", "\"ismrmrd_header\"", "]", "[", "(", ")", "]", ")", "\n", "\n", "enc", "=", "[", "\"encoding\"", ",", "\"encodedSpace\"", ",", "\"matrixSize\"", "]", "\n", "enc_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "rec", "=", "[", "\"encoding\"", ",", "\"reconSpace\"", ",", "\"matrixSize\"", "]", "\n", "recon_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "\n", "lims", "=", "[", "\"encoding\"", ",", "\"encodingLimits\"", ",", "\"kspace_encoding_step_1\"", "]", "\n", "enc_limits_center", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"center\"", "]", ")", ")", "\n", "enc_limits_max", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"maximum\"", "]", ")", ")", "+", "1", "\n", "\n", "padding_left", "=", "enc_size", "[", "1", "]", "//", "2", "-", "enc_limits_center", "\n", "padding_right", "=", "padding_left", "+", "enc_limits_max", "\n", "\n", "num_slices", "=", "hf", "[", "\"kspace\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "metadata", "=", "{", "\n", "\"padding_left\"", ":", "padding_left", ",", "\n", "\"padding_right\"", ":", "padding_right", ",", "\n", "\"encoding_size\"", ":", "enc_size", ",", "\n", "\"recon_size\"", ":", "recon_size", ",", "\n", "}", "\n", "\n", "return", "metadata", ",", "num_slices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.fetch_dir": [[20, 57], ["pathlib.Path", "pathlib.Path", "data_config_file.is_file", "dict", "ValueError", "open", "pathlib.Path.exists", "ValueError", "open", "yaml.dump", "yaml.safe_load"], "function", ["None"], ["def", "fetch_dir", "(", "key", ",", "data_config_file", "=", "pathlib", ".", "Path", "(", "\"fastmri_dirs.yaml\"", ")", ")", ":", "\n", "    ", "\"\"\"\n    Data directory fetcher.\n\n    This is a brute-force simple way to configure data directories for a\n    project. Simply overwrite the variables for `knee_path` and `brain_path`\n    and this function will retrieve the requested subsplit of the data for use.\n\n    Args:\n        key (str): key to retrieve path from data_config_file.\n        data_config_file (pathlib.Path,\n            default=pathlib.Path(\"fastmri_dirs.yaml\")): Default path config\n            file.\n\n    Returns:\n        pathlib.Path: The path to the specified directory.\n    \"\"\"", "\n", "if", "not", "data_config_file", ".", "is_file", "(", ")", ":", "\n", "        ", "default_config", "=", "dict", "(", "\n", "knee_path", "=", "\"/home/chunmeifeng/Data/\"", ",", "\n", "brain_path", "=", "\"/home/chunmeifeng/Data/\"", ",", "\n", "# log_path=\"/home/chunmeifeng/experimental/MINet/\",", "\n", ")", "\n", "with", "open", "(", "data_config_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "default_config", ",", "f", ")", "\n", "\n", "", "raise", "ValueError", "(", "f\"Please populate {data_config_file} with directory paths.\"", ")", "\n", "\n", "", "with", "open", "(", "data_config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data_dir", "=", "yaml", ".", "safe_load", "(", "f", ")", "[", "key", "]", "\n", "\n", "", "data_dir", "=", "pathlib", ".", "Path", "(", "data_dir", ")", "\n", "\n", "if", "not", "data_dir", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Path {data_dir} from {data_config_file} does not exist.\"", ")", "\n", "\n", "", "return", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.et_query": [[58, 88], ["root.find", "str", "RuntimeError"], "function", ["None"], ["", "def", "et_query", "(", "\n", "root", ":", "etree", ".", "Element", ",", "\n", "qlist", ":", "Sequence", "[", "str", "]", ",", "\n", "namespace", ":", "str", "=", "\"http://www.ismrm.org/ISMRMRD\"", ",", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    ElementTree query function.\n    This can be used to query an xml document via ElementTree. It uses qlist\n    for nested queries.\n    Args:\n        root: Root of the xml to search through.\n        qlist: A list of strings for nested searches, e.g. [\"Encoding\",\n            \"matrixSize\"]\n        namespace: Optional; xml namespace to prepend query.\n    Returns:\n        The retrieved data as a string.\n    \"\"\"", "\n", "s", "=", "\".\"", "\n", "prefix", "=", "\"ismrmrd_namespace\"", "\n", "\n", "ns", "=", "{", "prefix", ":", "namespace", "}", "\n", "\n", "for", "el", "in", "qlist", ":", "\n", "        ", "s", "=", "s", "+", "f\"//{prefix}:{el}\"", "\n", "\n", "", "value", "=", "root", ".", "find", "(", "s", ",", "ns", ")", "\n", "if", "value", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Element not found\"", ")", "\n", "\n", "", "return", "str", "(", "value", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.volume_sampler.VolumeSampler.__init__": [[26, 81], ["int", "numpy.array", "numpy.array_split", "enumerate", "max", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "sorted", "list", "range", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "list", "range", "len", "indices[].append", "len"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_rank", "home.repos.pwc.inspect_result.chunmeifeng_SANet.utils.comm.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dataset (torch.utils.data.Dataset): An MRI dataset (e.g., SliceData).\n            num_replicas (int, optional): Number of processes participating in\n                distributed training. By default, :attr:`rank` is retrieved\n                from the current distributed group.\n            rank (int, optional): Rank of the current process within\n                :attr:`num_replicas`. By default, :attr:`rank` is retrieved\n                from the current distributed group.\n            shuffle (bool, optional): If ``True`` (default), sampler will\n                shuffle the indices.\n            seed (int, optional): random seed used to shuffle the sampler if\n                :attr:`shuffle=True`. This number should be identical across\n                all processes in the distributed group. Default: ``0``.\n        \"\"\"", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n", "# get all file names and split them based on number of processes", "\n", "self", ".", "all_volume_names", "=", "np", ".", "array", "(", "\n", "sorted", "(", "list", "(", "{", "example", "[", "0", "]", "for", "example", "in", "self", ".", "dataset", ".", "examples", "}", ")", ")", "\n", ")", "\n", "self", ".", "all_volumes_split", "=", "np", ".", "array_split", "(", "\n", "self", ".", "all_volume_names", ",", "self", ".", "num_replicas", "\n", ")", "\n", "\n", "# get slice indices for each file name", "\n", "indices", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_replicas", ")", "]", "\n", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "dataset", ".", "examples", ")", ":", "\n", "            ", "vname", "=", "example", "[", "0", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "num_replicas", ")", ":", "\n", "                ", "if", "vname", "in", "self", ".", "all_volumes_split", "[", "rank", "]", ":", "\n", "                    ", "indices", "[", "rank", "]", ".", "append", "(", "i", ")", "\n", "\n", "# need to send equal number of samples to each process - take the max", "\n", "", "", "", "self", ".", "num_samples", "=", "max", "(", "[", "len", "(", "l", ")", "for", "l", "in", "indices", "]", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "indices", "=", "indices", "[", "self", ".", "rank", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.volume_sampler.VolumeSampler.__iter__": [[82, 97], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "list", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "numpy.array", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch and seed", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "seed", "+", "self", ".", "epoch", ")", "\n", "ordering", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "indices", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "indices", "=", "list", "(", "np", ".", "array", "(", "self", ".", "indices", ")", "[", "ordering", "]", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "self", ".", "indices", "\n", "\n", "# add extra samples to match num_samples", "\n", "", "indices", "=", "indices", "+", "indices", "[", ":", "self", ".", "num_samples", "-", "len", "(", "indices", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.volume_sampler.VolumeSampler.__len__": [[98, 100], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.volume_sampler.VolumeSampler.set_epoch": [[101, 103], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.MaskFunc.__init__": [[41, 59], ["len", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            center_fractions (List[float]): Fraction of low-frequency columns to be\n                retained. If multiple values are provided, then one of these\n                numbers is chosen uniformly each time. \n            accelerations (List[int]): Amount of under-sampling. This should have\n                the same length as center_fractions. If multiple values are\n                provided, then one of these is chosen uniformly each time.\n        \"\"\"", "\n", "if", "len", "(", "center_fractions", ")", "!=", "len", "(", "accelerations", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of center fractions should match number of accelerations\"", "\n", ")", "\n", "\n", "", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "rng", "=", "np", ".", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.MaskFunc.choose_acceleration": [[60, 67], ["subsample.MaskFunc.rng.randint", "len"], "methods", ["None"], ["", "def", "choose_acceleration", "(", "self", ")", ":", "\n", "        ", "\"\"\"Choose acceleration based on class parameters.\"\"\"", "\n", "choice", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "accelerations", ")", ")", "\n", "center_fraction", "=", "self", ".", "center_fractions", "[", "choice", "]", "\n", "acceleration", "=", "self", ".", "accelerations", "[", "choice", "]", "\n", "\n", "return", "center_fraction", ",", "acceleration", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.RandomMaskFunc.__call__": [[92, 129], ["len", "ValueError", "subsample.temp_seed", "subsample.RandomMaskFunc.choose_acceleration", "int", "torch.from_numpy", "round", "subsample.RandomMaskFunc.rng.uniform", "torch.from_numpy.reshape().astype", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.temp_seed", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.MaskFunc.choose_acceleration"], ["def", "__call__", "(", "self", ",", "shape", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create the mask.\n\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n                \n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "\n", "# create the mask", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "prob", "=", "(", "num_cols", "/", "acceleration", "-", "num_low_freqs", ")", "/", "(", "\n", "num_cols", "-", "num_low_freqs", "\n", ")", "\n", "mask", "=", "self", ".", "rng", ".", "uniform", "(", "size", "=", "num_cols", ")", "<", "prob", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "True", "\n", "\n", "# reshape the mask", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.EquispacedMaskFunc.__call__": [[154, 196], ["len", "ValueError", "subsample.temp_seed", "subsample.EquispacedMaskFunc.choose_acceleration", "int", "numpy.zeros", "subsample.EquispacedMaskFunc.rng.randint", "numpy.arange", "numpy.around().astype", "torch.from_numpy", "round", "round", "torch.from_numpy.reshape().astype", "numpy.around", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.temp_seed", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.MaskFunc.choose_acceleration"], ["def", "__call__", "(", "self", ",", "shape", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n\n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "\n", "# create the mask", "\n", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "True", "\n", "\n", "# determine acceleration rate by adjusting for the number of low frequencies", "\n", "adjusted_accel", "=", "(", "acceleration", "*", "(", "num_low_freqs", "-", "num_cols", ")", ")", "/", "(", "\n", "num_low_freqs", "*", "acceleration", "-", "num_cols", "\n", ")", "\n", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "round", "(", "adjusted_accel", ")", ")", "\n", "\n", "accel_samples", "=", "np", ".", "arange", "(", "offset", ",", "num_cols", "-", "1", ",", "adjusted_accel", ")", "\n", "accel_samples", "=", "np", ".", "around", "(", "accel_samples", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "mask", "[", "accel_samples", "]", "=", "True", "\n", "\n", "# reshape the mask", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.temp_seed": [[14, 22], ["rng.get_state", "rng.seed", "rng.set_state"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ",", "seed", ")", ":", "\n", "    ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "rng", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.subsample.create_mask_for_mask_type": [[24, 31], ["subsample.RandomMaskFunc", "subsample.EquispacedMaskFunc", "Exception"], "function", ["None"], ["", "", "def", "create_mask_for_mask_type", "(", "mask_type_str", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "if", "mask_type_str", "==", "\"random\"", ":", "\n", "        ", "return", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"equispaced\"", ":", "\n", "        ", "return", "EquispacedMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"{mask_type_str} not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.__init__": [[30, 80], ["fastmri.MriModule.__init__", "fastmri.models.SANet.SANet"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_resgroups", "=", "5", ",", "#10", "\n", "n_resblocks", "=", "10", ",", "#20", "\n", "n_feats", "=", "64", ",", "#64", "\n", "lr", "=", "0.001", ",", "\n", "mask_type", "=", "\"random\"", ",", "\n", "center_fractions", "=", "[", "0.08", "]", ",", "\n", "accelerations", "=", "[", "4", "]", ",", "\n", "lr_step_size", "=", "40", ",", "\n", "lr_gamma", "=", "0.1", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input to the U-Net model.\n            out_chans (int): Number of channels in the output to the U-Net\n                model.\n            chans (int): Number of output channels of the first convolution\n                layer.\n            num_pool_layers (int): Number of down-sampling and up-sampling\n                layers.\n            drop_prob (float): Dropout probability.\n            mask_type (str): Type of mask from (\"random\", \"equispaced\").\n            center_fractions (list): Fraction of all samples to take from\n                center (i.e., list of floats).\n            accelerations (list): List of accelerations to apply (i.e., list\n                of ints).\n            lr (float): Learning rate.\n            lr_step_size (int): Learning rate step size.\n            lr_gamma (float): Learning rate gamma decay.\n            weight_decay (float): Parameter for penalizing weights norm.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_resgroups", "=", "n_resgroups", "\n", "self", ".", "n_resblocks", "=", "n_resblocks", "\n", "self", ".", "n_feats", "=", "n_feats", "\n", "self", ".", "mask_type", "=", "mask_type", "\n", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_step_size", "=", "lr_step_size", "\n", "self", ".", "lr_gamma", "=", "lr_gamma", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "\n", "self", ".", "sanet", "=", "SANet", "(", "n_resgroups", "=", "self", ".", "n_resgroups", ",", "\n", "n_resblocks", "=", "self", ".", "n_resblocks", ",", "\n", "n_feats", "=", "self", ".", "n_feats", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.forward": [[82, 87], ["module_SANet.SRModule.sanet", "pd.squeeze.squeeze.squeeze", "pdfs.squeeze.squeeze.squeeze", "targetpd.unsqueeze", "image.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "targetpd", ",", "image", ")", ":", "\n", "        ", "pd", ",", "pdfs", "=", "self", ".", "sanet", "(", "targetpd", ".", "unsqueeze", "(", "1", ")", ",", "image", ".", "unsqueeze", "(", "1", ")", ")", "\n", "pd", "=", "pd", ".", "squeeze", "(", "1", ")", "\n", "pdfs", "=", "pdfs", ".", "squeeze", "(", "1", ")", "\n", "return", "pd", ",", "pdfs", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.training_step": [[88, 99], ["module_SANet.SRModule.", "torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss", "dict", "loss.detach"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "batch", "[", "1", "]", "#pdfs", "\n", "imagepd", ",", "targetpd", ",", "meanpd", ",", "stdpd", ",", "fnamepd", ",", "slice_numpd", "=", "batch", "[", "0", "]", "#pd", "\n", "pd", ",", "pdfs", "=", "self", "(", "targetpd", ",", "image", ")", "\n", "loss_pd", "=", "F", ".", "l1_loss", "(", "pd", ",", "targetpd", ")", "\n", "loss_pdfs", "=", "F", ".", "l1_loss", "(", "pdfs", ",", "target", ")", "\n", "loss", "=", "0.3", "*", "loss_pdfs", "+", "0.7", "*", "loss_pd", "\n", "\n", "logs", "=", "{", "\"loss\"", ":", "loss", ".", "detach", "(", ")", "}", "\n", "\n", "return", "dict", "(", "loss", "=", "loss", ",", "log", "=", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.validation_step": [[100, 124], ["module_SANet.SRModule.", "mean.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "std.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.zeros", "enumerate", "len", "torch.nn.functional.l1_loss", "mean.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "std.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "int", "hashlib.sha256().hexdigest", "hashlib.sha256", "fn.encode"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "batch", "[", "1", "]", "#pdfs", "\n", "imagepd", ",", "targetpd", ",", "meanpd", ",", "stdpd", ",", "fnamepd", ",", "slice_numpd", "=", "batch", "[", "0", "]", "#pd", "\n", "\n", "pd", ",", "pdfs", "=", "self", "(", "targetpd", ",", "image", ")", "\n", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "output", "=", "pdfs", "\n", "\n", "# hash strings to int so pytorch can concat them", "\n", "fnumber", "=", "torch", ".", "zeros", "(", "len", "(", "fname", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "output", ".", "device", ")", "\n", "for", "i", ",", "fn", "in", "enumerate", "(", "fname", ")", ":", "\n", "            ", "fnumber", "[", "i", "]", "=", "(", "\n", "int", "(", "hashlib", ".", "sha256", "(", "fn", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "10", "**", "12", "\n", ")", "\n", "\n", "", "return", "{", "\n", "\"fname\"", ":", "fnumber", ",", "\n", "\"slice\"", ":", "slice_num", ",", "\n", "\"output\"", ":", "output", "*", "std", "+", "mean", ",", "\n", "\"target\"", ":", "target", "*", "std", "+", "mean", ",", "\n", "\"input\"", ":", "image", "*", "std", "+", "mean", ",", "\n", "\"val_loss\"", ":", "F", ".", "l1_loss", "(", "output", ",", "target", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.test_step": [[126, 136], ["module_SANet.SRModule.forward", "mean.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "std.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "mean.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "std.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.forward"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "image", ",", "_", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "batch", "\n", "output", "=", "self", ".", "forward", "(", "image", ")", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "return", "{", "\n", "\"fname\"", ":", "fname", ",", "\n", "\"slice\"", ":", "slice_num", ",", "\n", "\"output\"", ":", "(", "output", "*", "std", "+", "mean", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.contrastStretching": [[137, 148], ["numpy.sort", "numpy.size", "int", "numpy.minimum", "numpy.round", "numpy.maximum"], "methods", ["None"], ["", "def", "contrastStretching", "(", "self", ",", "img", ",", "saturated_pixel", "=", "0.004", ")", ":", "\n", "        ", "\"\"\" constrast stretching according to imageJ\n        http://homepages.inf.ed.ac.uk/rbf/HIPR2/stretch.htm\"\"\"", "\n", "values", "=", "np", ".", "sort", "(", "img", ",", "axis", "=", "None", ")", "\n", "nr_pixels", "=", "np", ".", "size", "(", "values", ")", "\n", "lim", "=", "int", "(", "np", ".", "round", "(", "saturated_pixel", "*", "nr_pixels", ")", ")", "\n", "v_min", "=", "values", "[", "lim", "]", "\n", "v_max", "=", "values", "[", "-", "lim", "-", "1", "]", "\n", "img", "=", "(", "img", "-", "v_min", ")", "*", "(", "255.0", ")", "/", "(", "v_max", "-", "v_min", ")", "\n", "img", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "img", ")", ")", "\n", "return", "img", "\n", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.configure_optimizers": [[148, 157], ["torch.optim.RMSprop", "torch.optim.lr_scheduler.StepLR", "module_SANet.SRModule.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optim", ",", "self", ".", "lr_step_size", ",", "self", ".", "lr_gamma", "\n", ")", "\n", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.train_data_transform": [[158, 164], ["fastmri.data.subsample.create_mask_for_mask_type", "module_SANet.DataTransform"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.create_mask_for_mask_type"], ["", "def", "train_data_transform", "(", "self", ")", ":", "\n", "        ", "mask", "=", "create_mask_for_mask_type", "(", "\n", "self", ".", "mask_type", ",", "self", ".", "center_fractions", ",", "self", ".", "accelerations", ",", "\n", ")", "\n", "\n", "return", "DataTransform", "(", "self", ".", "challenge", ",", "mask", ",", "use_seed", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.val_data_transform": [[165, 170], ["fastmri.data.subsample.create_mask_for_mask_type", "module_SANet.DataTransform"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.create_mask_for_mask_type"], ["", "def", "val_data_transform", "(", "self", ")", ":", "\n", "        ", "mask", "=", "create_mask_for_mask_type", "(", "\n", "self", ".", "mask_type", ",", "self", ".", "center_fractions", ",", "self", ".", "accelerations", ",", "\n", ")", "\n", "return", "DataTransform", "(", "self", ".", "challenge", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.test_data_transform": [[171, 173], ["module_SANet.DataTransform"], "methods", ["None"], ["", "def", "test_data_transform", "(", "self", ")", ":", "\n", "        ", "return", "DataTransform", "(", "self", ".", "challenge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.add_model_specific_args": [[174, 205], ["argparse.ArgumentParser", "fastmri.MriModule.add_model_specific_args", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument", "fastmri.MriModule.add_model_specific_args.add_argument"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.add_model_specific_args"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", "=", "MriModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "\n", "# param overwrites", "\n", "\n", "# network params", "\n", "parser", ".", "add_argument", "(", "\"--in_chans\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_chans\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--chans\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_pool_layers\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--drop_prob\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "\n", "# data params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "choices", "=", "[", "\"random\"", ",", "\"equispaced\"", "]", ",", "default", "=", "\"random\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--center_fractions\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "0.08", "]", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--accelerations\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "4", "]", ",", "type", "=", "int", ")", "\n", "\n", "# training params (opt)", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_step_size\"", ",", "default", "=", "40", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.DataTransform.__init__": [[212, 230], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "which_challenge", ",", "mask_func", "=", "None", ",", "use_seed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            which_challenge (str): Either \"singlecoil\" or \"multicoil\" denoting\n                the dataset.\n            mask_func (fastmri.data.subsample.MaskFunc): A function that can\n                create a mask of appropriate shape.\n            use_seed (bool): If true, this class computes a pseudo random\n                number generator seed from the filename. This ensures that the\n                same mask is used for all the slices of a given volume every\n                time.\n        \"\"\"", "\n", "if", "which_challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Challenge should either be \"singlecoil\" or \"multicoil\"'", ")", "\n", "\n", "", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "which_challenge", "=", "which_challenge", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.DataTransform.__call__": [[231, 293], ["fastmri.data.transforms.to_tensor", "fastmri.ifft2c", "fastmri.data.transforms.complex_center_crop", "fastmri.fft2c", "fastmri.data.transforms.complex_center_crop", "fastmri.ifft2c", "fastmri.complex_abs", "fastmri.data.transforms.normalize_instance", "LR_image.clamp.clamp.clamp", "fastmri.data.transforms.to_tensor", "fastmri.data.transforms.center_crop", "fastmri.data.transforms.normalize", "torch.Tensor.clamp", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.fft2c", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_SANet.fastmri.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.normalize"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice_num", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            kspace (numpy.array): Input k-space of shape (num_coils, rows,\n                cols, 2) for multi-coil data or (rows, cols, 2) for single coil\n                data.\n            mask (numpy.array): Mask from the test dataset.\n            target (numpy.array): Target image.\n            attrs (dict): Acquisition related information stored in the HDF5\n                object.\n            fname (str): File name.\n            slice_num (int): Serial number of the slice.\n\n        Returns:\n            (tuple): tuple containing:\n                image (torch.Tensor): Zero-filled input image.\n                target (torch.Tensor): Target image converted to a torch\n                    Tensor.\n                mean (float): Mean value used for normalization.\n                std (float): Standard deviation value used for normalization.\n                fname (str): File name.\n                slice_num (int): Serial number of the slice.\n        \"\"\"", "\n", "kspace", "=", "transforms", ".", "to_tensor", "(", "kspace", ")", "\n", "\n", "\n", "image", "=", "fastmri", ".", "ifft2c", "(", "kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "# check for sFLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "            ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "", "image", "=", "transforms", ".", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "#getLR", "\n", "imgfft", "=", "fastmri", ".", "fft2c", "(", "image", ")", "\n", "imgfft", "=", "transforms", ".", "complex_center_crop", "(", "imgfft", ",", "(", "160", ",", "160", ")", ")", "\n", "LR_image", "=", "fastmri", ".", "ifft2c", "(", "imgfft", ")", "\n", "\n", "# absolute value", "\n", "LR_image", "=", "fastmri", ".", "complex_abs", "(", "LR_image", ")", "\n", "\n", "# normalize input", "\n", "LR_image", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "LR_image", ",", "eps", "=", "1e-11", ")", "\n", "LR_image", "=", "LR_image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "transforms", ".", "to_tensor", "(", "target", ")", "\n", "target", "=", "transforms", ".", "center_crop", "(", "target", ",", "crop_size", ")", "\n", "target", "=", "transforms", ".", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "target", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "", "return", "LR_image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.train.main": [[22, 45], ["pytorch_lightning.seed_everything", "module_SANet.SRModule", "pytorch_lightning.Trainer.from_argparse_args", "Trainer.from_argparse_args.fit", "vars", "Trainer.from_argparse_args.test", "ValueError"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Main training routine.\"\"\"", "\n", "# ------------------------", "\n", "# 1 INIT LIGHTNING MODEL", "\n", "# ------------------------", "\n", "seed_everything", "(", "args", ".", "seed", ")", "\n", "model", "=", "SRModule", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n", "# ------------------------", "\n", "# 2 INIT TRAINER", "\n", "# ------------------------", "\n", "trainer", "=", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------------------", "\n", "# 3 START TRAINING OR TEST", "\n", "# ------------------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "assert", "args", ".", "resume_from_checkpoint", "is", "not", "None", "\n", "trainer", ".", "test", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.train.build_args": [[47, 110], ["fastmri.data.mri_data.fetch_dir", "argparse.ArgumentParser", "module_SANet.SRModule.add_model_specific_args", "pytorch_lightning.Trainer.add_argparse_args", "dict", "Trainer.add_argparse_args.set_defaults", "Trainer.add_argparse_args.set_defaults", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.parse_args", "pathlib.Path.cwd", "fastmri.data.mri_data.fetch_dir"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.module_SANet.SRModule.add_model_specific_args", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "# ------------------------", "\n", "# TRAINING ARGUMENTS", "\n", "# ------------------------", "\n", "    ", "path_config", "=", "pathlib", ".", "Path", ".", "cwd", "(", ")", "/", "\"mriSR_dirs.yaml\"", "\n", "knee_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "logdir", "=", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"sanet\"", "/", "\"2x_SR\"", "\n", "\n", "\n", "parent_parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "\n", "parser", "=", "SRModule", ".", "add_model_specific_args", "(", "parent_parser", ")", "\n", "parser", "=", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "\n", "num_gpus", "=", "1", "\n", "backend", "=", "\"ddp\"", "\n", "batch_size", "=", "4", "if", "backend", "==", "\"ddp\"", "else", "num_gpus", "\n", "\n", "# module config", "\n", "config", "=", "dict", "(", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "32", ",", "\n", "num_pool_layers", "=", "4", ",", "\n", "drop_prob", "=", "0.0", ",", "\n", "mask_type", "=", "\"random\"", ",", "\n", "center_fractions", "=", "[", "0.08", "]", ",", "\n", "accelerations", "=", "[", "4", "]", ",", "\n", "n_channels_in", "=", "1", ",", "\n", "n_channels_out", "=", "1", ",", "\n", "n_resgroups", "=", "6", ",", "\n", "n_resblocks", "=", "6", ",", "\n", "n_feats", "=", "64", ",", "\n", "lr", "=", "0.00001", ",", "\n", "lr_step_size", "=", "40", ",", "\n", "lr_gamma", "=", "0.1", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "data_path", "=", "knee_path", ",", "\n", "challenge", "=", "\"singlecoil\"", ",", "\n", "exp_dir", "=", "logdir", ",", "\n", "exp_name", "=", "\"unet_demo\"", ",", "\n", "test_split", "=", "\"test\"", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "**", "config", ")", "\n", "\n", "# trainer config", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "\n", "max_epochs", "=", "35", ",", "\n", "default_root_dir", "=", "logdir", ",", "\n", "replace_sampler_ddp", "=", "(", "backend", "!=", "\"ddp\"", ")", ",", "\n", "distributed_backend", "=", "backend", ",", "\n", "seed", "=", "42", ",", "\n", "deterministic", "=", "True", ",", "\n", "# resume_from_checkpoint = '/checkpoints/epoch=34.ckpt'", "\n", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"train\"", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.train.run_cli": [[112, 119], ["train.build_args", "train.main"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.train.build_args", "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.train.main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.RAdam.__init__": [[7, 24], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "if", "isinstance", "(", "params", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "params", ")", ">", "0", "and", "isinstance", "(", "params", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "for", "param", "in", "params", ":", "\n", "                ", "if", "'betas'", "in", "param", "and", "(", "param", "[", "'betas'", "]", "[", "0", "]", "!=", "betas", "[", "0", "]", "or", "param", "[", "'betas'", "]", "[", "1", "]", "!=", "betas", "[", "1", "]", ")", ":", "\n", "                    ", "param", "[", "'buffer'", "]", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "", "", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", ")", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.RAdam.__setstate__": [[25, 27], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.RAdam.step": [[28, 95], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "group", "[", "'buffer'", "]", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "-", "1", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "step_size", ">", "0", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.PlainRAdam.__init__": [[98, 112], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.PlainRAdam.__setstate__": [[113, 115], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.PlainRAdam.step": [[116, 171], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.AdamW.__init__": [[175, 188], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "warmup", "=", "0", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "warmup", "=", "warmup", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.AdamW.__setstate__": [[189, 191], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.SANet.RAdam.AdamW.step": [[192, 245], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'warmup'", "]", ">", "state", "[", "'step'", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "'step'", "]", "*", "group", "[", "'lr'", "]", "/", "group", "[", "'warmup'", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "step_size", "=", "scheduled_lr", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "scheduled_lr", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.__init__": [[54, 57], ["runstats.Statistics"], "methods", ["None"], ["    ", "\"\"\"Calculates SSIM and aggregates by summing across distr processes.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "name", "=", "\"SSIM\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.push": [[59, 62], ["METRIC_FUNCS.items", "evaluate.Metrics.metrics[].push", "func"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.push"], ["", "def", "forward", "(", "self", ",", "gt", ",", "pred", ",", "maxval", "=", "None", ")", ":", "\n", "        ", "return", "ssim", "(", "gt", ",", "pred", ",", "maxval", "=", "maxval", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.means": [[63, 66], ["stat.mean", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "", "class", "DistributedMetricSum", "(", "TensorMetric", ")", ":", "\n", "    ", "\"\"\"Used for summing parameters across distr processes.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "name", "=", "\"DistributedMetricSum\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.stddevs": [[68, 71], ["stat.stddev", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.__repr__": [[73, 79], ["evaluate.Metrics.means", "evaluate.Metrics.stddevs", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.means", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.stddevs"], ["", "", "def", "mse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Mean Squared Error (MSE)\"\"\"", "\n", "return", "np", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "\n", "\n", "\n", "", "def", "nmse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Normalized Mean Squared Error (NMSE)\"\"\"", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.mse": [[19, 22], ["numpy.mean"], "function", ["None"], ["\n", "from", "fastmri", ".", "data", "import", "transforms", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.nmse": [[24, 27], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["    ", "\"\"\"Calculates MSE and aggregates by summing across distr processes.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "name", "=", "\"MSE\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.psnr": [[29, 32], ["skimage.metrics.peak_signal_noise_ratio", "gt.max"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "return", "mse", "(", "gt", ",", "pred", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.ssim": [[34, 38], ["skimage.metrics.structural_similarity", "gt.transpose", "pred.transpose", "gt.max"], "function", ["None"], ["    ", "\"\"\"Calculates NMSE and aggregates by summing across distr processes.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "name", "=", "\"NMSE\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.evaluate": [[82, 100], ["evaluate.Metrics", "args.target_path.iterdir", "h5py.File", "h5py.File", "data.transforms.center_crop", "data.transforms.center_crop", "evaluate.Metrics.push"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.data.transforms.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.evaluate.Metrics.push"], ["\n", "", "def", "psnr", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Peak Signal to Noise Ratio metric (PSNR)\"\"\"", "\n", "return", "peak_signal_noise_ratio", "(", "gt", ",", "pred", ",", "data_range", "=", "gt", ".", "max", "(", ")", ")", "\n", "\n", "\n", "", "def", "ssim", "(", "gt", ",", "pred", ",", "maxval", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute Structural Similarity Index Metric (SSIM)\"\"\"", "\n", "maxval", "=", "gt", ".", "max", "(", ")", "if", "maxval", "is", "None", "else", "maxval", "\n", "\n", "ssim", "=", "0", "\n", "for", "slice_num", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ssim", "=", "ssim", "+", "structural_similarity", "(", "\n", "gt", "[", "slice_num", "]", ",", "pred", "[", "slice_num", "]", ",", "data_range", "=", "maxval", "\n", ")", "\n", "\n", "", "ssim", "=", "ssim", "/", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "return", "ssim", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.test_subsample.test_random_mask_reuse": [[15, 27], ["pytest.mark.parametrize", "common.subsample.RandomMaskFunc", "common.subsample.RandomMaskFunc.", "common.subsample.RandomMaskFunc.", "common.subsample.RandomMaskFunc.", "torch.all", "torch.all"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"center_fracs, accelerations, batch_size, dim\"", ",", "[", "\n", "(", "[", "0.2", "]", ",", "[", "4", "]", ",", "4", ",", "320", ")", ",", "\n", "(", "[", "0.2", ",", "0.4", "]", ",", "[", "4", ",", "8", "]", ",", "2", ",", "368", ")", ",", "\n", "]", ")", "\n", "def", "test_random_mask_reuse", "(", "center_fracs", ",", "accelerations", ",", "batch_size", ",", "dim", ")", ":", "\n", "    ", "mask_func", "=", "RandomMaskFunc", "(", "center_fracs", ",", "accelerations", ")", "\n", "shape", "=", "(", "batch_size", ",", "dim", ",", "dim", ",", "2", ")", "\n", "mask1", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "mask2", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "mask3", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "assert", "torch", ".", "all", "(", "mask1", "==", "mask2", ")", "\n", "assert", "torch", ".", "all", "(", "mask2", "==", "mask3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.test_subsample.test_random_mask_low_freqs": [[29, 48], ["pytest.mark.parametrize", "common.subsample.RandomMaskFunc", "common.subsample.RandomMaskFunc.", "list", "int", "numpy.all", "round", "mask[].numpy"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"center_fracs, accelerations, batch_size, dim\"", ",", "[", "\n", "(", "[", "0.2", "]", ",", "[", "4", "]", ",", "4", ",", "320", ")", ",", "\n", "(", "[", "0.2", ",", "0.4", "]", ",", "[", "4", ",", "8", "]", ",", "2", ",", "368", ")", ",", "\n", "]", ")", "\n", "def", "test_random_mask_low_freqs", "(", "center_fracs", ",", "accelerations", ",", "batch_size", ",", "dim", ")", ":", "\n", "    ", "mask_func", "=", "RandomMaskFunc", "(", "center_fracs", ",", "accelerations", ")", "\n", "shape", "=", "(", "batch_size", ",", "dim", ",", "dim", ",", "2", ")", "\n", "mask", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "dim", "\n", "assert", "list", "(", "mask", ".", "shape", ")", "==", "mask_shape", "\n", "\n", "num_low_freqs_matched", "=", "False", "\n", "for", "center_frac", "in", "center_fracs", ":", "\n", "        ", "num_low_freqs", "=", "int", "(", "round", "(", "dim", "*", "center_frac", ")", ")", "\n", "pad", "=", "(", "dim", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "if", "np", ".", "all", "(", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", ".", "numpy", "(", ")", "==", "1", ")", ":", "\n", "            ", "num_low_freqs_matched", "=", "True", "\n", "", "", "assert", "num_low_freqs_matched", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.MaskFunc.__init__": [[22, 39], ["numpy.random.RandomState", "len", "len", "ValueError"], "methods", ["None"], ["\n", "\n", "", "", "def", "create_mask_for_mask_type", "(", "mask_type_str", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "if", "mask_type_str", "==", "\"random\"", ":", "\n", "        ", "return", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"equispaced\"", ":", "\n", "        ", "return", "EquispacedMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"{mask_type_str} not supported\"", ")", "\n", "\n", "\n", "", "", "class", "MaskFunc", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    An object for GRAPPA-style sampling masks.\n\n    This crates a sampling mask that densely samples the center while\n    subsampling outer k-space regions based on the undersampling factor.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.MaskFunc.choose_acceleration": [[40, 45], ["subsample.MaskFunc.rng.randint", "len"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.RandomMaskFunc.__init__": [[68, 86], ["numpy.random.RandomState", "len", "len", "ValueError"], "methods", ["None"], ["\n", "", "", "class", "RandomMaskFunc", "(", "MaskFunc", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.RandomMaskFunc.__call__": [[87, 117], ["subsample.RandomMaskFunc.rng.seed", "subsample.RandomMaskFunc.choose_acceleration", "int", "torch.from_numpy", "len", "ValueError", "round", "subsample.RandomMaskFunc.rng.uniform", "torch.from_numpy.reshape().astype", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.MaskFunc.choose_acceleration"], ["\n", "\n", "def", "__call__", "(", "self", ",", "shape", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create the mask.\n\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n                \n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "\n", "# create the mask", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "prob", "=", "(", "num_cols", "/", "acceleration", "-", "num_low_freqs", ")", "/", "(", "\n", "num_cols", "-", "num_low_freqs", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.EquispacedMaskFunc.__call__": [[134, 171], ["subsample.EquispacedMaskFunc.rng.seed", "subsample.EquispacedMaskFunc.choose_acceleration", "int", "numpy.zeros", "subsample.EquispacedMaskFunc.rng.randint", "numpy.arange", "numpy.around().astype", "torch.from_numpy", "len", "ValueError", "round", "round", "torch.from_numpy.reshape().astype", "numpy.around", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.MaskFunc.choose_acceleration"], ["\n", "\n", "def", "__call__", "(", "self", ",", "shape", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n\n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.subsample.create_mask_for_mask_type": [[12, 19], ["subsample.RandomMaskFunc", "subsample.EquispacedMaskFunc", "Exception"], "function", ["None"], ["\n", "\n", "@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ",", "seed", ")", ":", "\n", "    ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "yield", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.utils.save_reconstructions": [[12, 27], ["out_dir.mkdir", "reconstructions.items", "h5py.File", "f.create_dataset"], "function", ["None"], ["def", "save_reconstructions", "(", "reconstructions", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Save reconstruction images.\n\n    This function writes to h5 files that are appropriate for submission to the\n    leaderboard.\n\n    Args:\n        reconstructions (dict[str, np.array]): A dictionary mapping input\n            filenames to corresponding reconstructions (of shape num_slices x\n            height x width).\n        out_dir (pathlib.Path): Path to the output directory where the\n            reconstructions should be saved.\n    \"\"\"", "\n", "# out_dir.mkdir(exist_ok=True, parents=True)", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.utils.tensor_to_complex_np": [[29, 40], ["data.numpy.numpy"], "function", ["None"], ["print", "(", "out_dir", ")", "#logs/unet/unet_demo/zpCar6X/unet_demo/reconstructions", "\n", "for", "fname", ",", "recons", "in", "reconstructions", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "fname", ")", "\n", "with", "h5py", ".", "File", "(", "str", "(", "out_dir", ")", "+", "'/'", "+", "str", "(", "fname", ")", "+", "'.hdf5'", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "fname", ")", "\n", "if", "isinstance", "(", "recons", ",", "list", ")", ":", "\n", "                ", "recons", "=", "[", "r", "[", "1", "]", "[", "None", ",", "...", "]", "for", "r", "in", "recons", "]", "\n", "recons", "=", "torch", ".", "cat", "(", "recons", ",", "dim", "=", "0", ")", "\n", "", "f", ".", "create_dataset", "(", "\"reconstruction\"", ",", "data", "=", "recons", ")", "\n", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__": [[17, 48], ["argparse.ArgumentParser.__init__", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.set_defaults"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_SANet.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "**", "overrides", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            **overrides (dict, optional): Keyword arguments used to override default argument values\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ",", "help", "=", "'Seed for random number generators'", ")", "\n", "self", ".", "add_argument", "(", "'--resolution'", ",", "default", "=", "320", ",", "type", "=", "int", ",", "help", "=", "'Resolution of images (brain \\\n                challenge expects resolution of 384, knee resolution expcts resolution of 320'", ")", "\n", "\n", "# Data parameters", "\n", "self", ".", "add_argument", "(", "'--challenge'", ",", "choices", "=", "[", "'singlecoil'", ",", "'multicoil'", "]", ",", "default", "=", "'singlecoil'", ",", "help", "=", "'Which challenge'", ")", "\n", "self", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'/home/jc3/Data/'", ",", "help", "=", "'Path to the dataset'", ")", "\n", "self", ".", "add_argument", "(", "'--sample-rate'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'Fraction of total volumes to include'", ")", "\n", "\n", "# Mask parameters", "\n", "self", ".", "add_argument", "(", "'--mask-type'", ",", "choices", "=", "[", "'random'", ",", "'equispaced'", "]", ",", "default", "=", "'random'", ",", "\n", "help", "=", "'The type of mask function to use'", ")", "\n", "self", ".", "add_argument", "(", "'--accelerations'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "4", "]", ",", "type", "=", "int", ",", "\n", "help", "=", "'Ratio of k-space columns to be sampled. If multiple values are '", "\n", "'provided, then one of those is chosen uniformly at random for '", "\n", "'each volume.'", ")", "\n", "self", ".", "add_argument", "(", "'--center-fractions'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0.08", "]", ",", "type", "=", "float", ",", "\n", "help", "=", "'Fraction of low-frequency k-space columns to be sampled. Should '", "\n", "'have the same length as accelerations'", ")", "\n", "\n", "# Override defaults with passed overrides", "\n", "self", ".", "set_defaults", "(", "**", "overrides", ")", "\n", "", "", ""]]}