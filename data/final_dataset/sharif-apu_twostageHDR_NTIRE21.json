{"home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.attentionDis.attentiomDiscriminator.__init__": [[12, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "attentiomDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "\n", "# Replaced original paper FC layers with FCN", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.attentionDis.attentiomDiscriminator.forward": [[34, 47], ["swish", "swish", "swish", "swish", "swish", "swish", "swish", "swish", "attentionDis.attentiomDiscriminator.conv9", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "attentionDis.attentiomDiscriminator.conv1", "attentionDis.attentiomDiscriminator.bn2", "attentionDis.attentiomDiscriminator.bn3", "attentionDis.attentiomDiscriminator.bn4", "attentionDis.attentiomDiscriminator.bn5", "attentionDis.attentiomDiscriminator.bn6", "attentionDis.attentiomDiscriminator.bn7", "attentionDis.attentiomDiscriminator.bn8", "attentionDis.attentiomDiscriminator.conv2", "attentionDis.attentiomDiscriminator.conv3", "attentionDis.attentiomDiscriminator.conv4", "attentionDis.attentiomDiscriminator.conv5", "attentionDis.attentiomDiscriminator.conv6", "attentionDis.attentiomDiscriminator.conv7", "attentionDis.attentiomDiscriminator.conv8", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "attentionDis.attentiomDiscriminator.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "attentionDis.attentiomDiscriminator.size"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "swish", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "x", "=", "swish", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "swish", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "swish", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "swish", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "swish", "(", "self", ".", "bn6", "(", "self", ".", "conv6", "(", "x", ")", ")", ")", "\n", "x", "=", "swish", "(", "self", ".", "bn7", "(", "self", ".", "conv7", "(", "x", ")", ")", ")", "\n", "x", "=", "swish", "(", "self", ".", "bn8", "(", "self", ".", "conv8", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "return", "torch", ".", "sigmoid", "(", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.attentionDis.Discriminator.__init__": [[50, 78], ["torch.Module.__init__", "enumerate", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "attentionDis.Discriminator.__init__.discriminator_block"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "in_channels", ",", "in_height", ",", "in_width", "=", "self", ".", "input_shape", "\n", "patch_h", ",", "patch_w", "=", "int", "(", "in_height", "/", "2", "**", "4", ")", ",", "int", "(", "in_width", "/", "2", "**", "4", ")", "\n", "self", ".", "output_shape", "=", "(", "1", ",", "patch_h", ",", "patch_w", ")", "\n", "\n", "def", "discriminator_block", "(", "in_filters", ",", "out_filters", ",", "first_block", "=", "False", ")", ":", "\n", "            ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "if", "not", "first_block", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_filters", ",", "out_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "return", "layers", "\n", "\n", "", "layers", "=", "[", "]", "\n", "in_filters", "=", "in_channels", "\n", "for", "i", ",", "out_filters", "in", "enumerate", "(", "[", "64", ",", "128", ",", "256", ",", "512", "]", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "discriminator_block", "(", "in_filters", ",", "out_filters", ",", "first_block", "=", "(", "i", "==", "0", ")", ")", ")", "\n", "in_filters", "=", "out_filters", "\n", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "out_filters", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.attentionDis.Discriminator.forward": [[79, 81], ["attentionDis.Discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "img", ")", "\n", "#net = attentiomDiscriminator()", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.SpatialAttention.__init__": [[18, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.SpatialAttention.forward": [[27, 33], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basicBlocks.SpatialAttention.conv1", "basicBlocks.SpatialAttention.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.SpatialAttentionBlock.__init__": [[35, 39], ["torch.Module.__init__", "basicBlocks.SpatialAttention", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spatial_filter", "=", "32", ")", ":", "\n", "        ", "super", "(", "SpatialAttentionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatialAttenton", "=", "SpatialAttention", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "spatial_filter", ",", "spatial_filter", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.SpatialAttentionBlock.forward": [[41, 46], ["basicBlocks.SpatialAttentionBlock.spatialAttenton", "basicBlocks.SpatialAttentionBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "spatialAttenton", "(", "x", ")", "\n", "xC", "=", "self", ".", "conv", "(", "x", ")", "\n", "y", "=", "x1", "*", "xC", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.SELayer.__init__": [[49, 57], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.SELayer.forward": [[59, 64], ["x.size", "basicBlocks.SELayer.avg_pool().view", "basicBlocks.SELayer.fc().view", "basicBlocks.SELayer.expand_as", "basicBlocks.SELayer.avg_pool", "basicBlocks.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.ResidualDenseBlock_5C.__init__": [[67, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "mFactor", "=", "0.2", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "mFactor", "=", "mFactor", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.ResidualDenseBlock_5C.forward": [[81, 88], ["basicBlocks.ResidualDenseBlock_5C.lrelu", "basicBlocks.ResidualDenseBlock_5C.lrelu", "basicBlocks.ResidualDenseBlock_5C.lrelu", "basicBlocks.ResidualDenseBlock_5C.lrelu", "basicBlocks.ResidualDenseBlock_5C.conv5", "basicBlocks.ResidualDenseBlock_5C.conv1", "basicBlocks.ResidualDenseBlock_5C.conv2", "basicBlocks.ResidualDenseBlock_5C.conv3", "basicBlocks.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "self", ".", "mFactor", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.RRDB.__init__": [[93, 96], ["torch.Module.__init__", "basicBlocks.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ",", "mFactor", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ",", "mFactor", "=", "mFactor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.RRDB.forward": [[98, 101], ["basicBlocks.RRDB.RDB1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "return", "out", "*", "0.8", "+", "x", "\n", "#net = multiKernelBlock(64, 64)#.cuda()", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.init_weights": [[7, 10], ["isinstance", "torch.init.xavier_uniform_"], "function", ["None"], ["def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.basicBlocks.swish": [[12, 14], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.MKHRD.ResMKHDR.__init__": [[10, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "RRDB", "SELayer", "SpatialAttentionBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "RRDB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SELayer", "SpatialAttentionBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResMKHDR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#print(\"Model 2\")", "\n", "self", ".", "inpConv", "=", "nn", ".", "Conv2d", "(", "3", ",", "features", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "features", ")", "\n", "\n", "\n", "block1", "=", "[", "]", "\n", "self", ".", "block1", "=", "RRDB", "(", "features", ")", "\n", "self", ".", "attention1", "=", "SELayer", "(", "features", ")", "# not included in the architectures", "\n", "self", ".", "attentionSpatial1", "=", "SpatialAttentionBlock", "(", "features", ")", "\n", "self", ".", "noiseGate1", "=", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "block2", "=", "[", "]", "\n", "\n", "self", ".", "block2", "=", "RRDB", "(", "features", ")", "\n", "self", ".", "noiseGate2", "=", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "attention2", "=", "SELayer", "(", "features", ")", "# not included in the architectures", "\n", "self", ".", "attentionSpatial2", "=", "SpatialAttentionBlock", "(", "features", ")", "\n", "\n", "self", ".", "convOut", "=", "nn", ".", "Conv2d", "(", "features", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "dropoutG", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.MKHRD.ResMKHDR.forward": [[38, 50], ["MKHRD.ResMKHDR.inpConv", "MKHRD.ResMKHDR.relu", "MKHRD.ResMKHDR.block1", "MKHRD.ResMKHDR.attentionSpatial1", "MKHRD.ResMKHDR.block2", "MKHRD.ResMKHDR.attentionSpatial2", "MKHRD.ResMKHDR.convOut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "\n", "#print(affinity.shape)", "\n", "        ", "xInp", "=", "self", ".", "inpConv", "(", "img", ")", "\n", "\n", "xG", "=", "self", ".", "block1", "(", "xInp", ")", "+", "self", ".", "attentionSpatial1", "(", "xInp", ")", "\n", "\n", "xG", "=", "self", ".", "block2", "(", "xG", ")", "+", "self", ".", "attentionSpatial2", "(", "xG", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "convOut", "(", "xG", ")", "+", "img", ")", "\n", "\n", "return", "out", "#, outUp'''", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.MKHRD.ResMKHDR._initialize_weights": [[52, 61], ["MKHRD.ResMKHDR.inpConv.apply", "MKHRD.ResMKHDR.block1.apply", "MKHRD.ResMKHDR.block2.apply", "MKHRD.ResMKHDR.convOut.apply"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "\n", "#self.inputConvLeft.apply(init_weights)", "\n", "        ", "self", ".", "inpConv", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "block1", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "block2", ".", "apply", "(", "init_weights", ")", "\n", "\n", "\n", "self", ".", "convOut", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.MKHRD.HDRRangeNet.__init__": [[64, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "RRDB", "SELayer", "SpatialAttentionBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "RRDB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "HDRRangeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#print(\"Model 2\")", "\n", "self", ".", "inpConv", "=", "nn", ".", "Conv2d", "(", "3", ",", "features", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "features", ")", "\n", "\n", "self", ".", "blockG", "=", "RRDB", "(", "features", ",", "mFactor", "=", "0.5", ")", "\n", "self", ".", "attention", "=", "SELayer", "(", "features", ")", "# not included in the architectures", "\n", "self", ".", "attentionSpatial", "=", "SpatialAttentionBlock", "(", "features", ")", "\n", "self", ".", "noiseGate1", "=", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "block1", "=", "RRDB", "(", "features", ",", "mFactor", "=", "0.5", ")", "# not included in the architectures", "\n", "\n", "\n", "self", ".", "convOut", "=", "nn", ".", "Conv2d", "(", "features", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "dropoutG", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.MKHRD.HDRRangeNet.forward": [[86, 95], ["MKHRD.HDRRangeNet.inpConv", "MKHRD.HDRRangeNet.relu", "MKHRD.HDRRangeNet.blockG", "MKHRD.HDRRangeNet.attentionSpatial", "MKHRD.HDRRangeNet.convOut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "xInp", "=", "self", ".", "inpConv", "(", "img", ")", "\n", "\n", "xG", "=", "self", ".", "blockG", "(", "xInp", ")", "+", "self", ".", "attentionSpatial", "(", "xInp", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "convOut", "(", "xG", ")", "+", "img", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.modelDefinitions.MKHRD.HDRRangeNet._initialize_weights": [[97, 103], ["MKHRD.HDRRangeNet.inpConv.apply", "MKHRD.HDRRangeNet.blockG.apply", "MKHRD.HDRRangeNet.convOut.apply"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "\n", "#self.inputConvLeft.apply(init_weights)", "\n", "        ", "self", ".", "inpConv", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "blockG", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "convOut", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.patchExtractor.patchExtract.__init__": [[12, 24], ["formatDirPath", "formatDirPath", "int", "createDir", "imageList"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "sourceDir", ",", "targetPath", ")", ":", "\n", "\n", "# Configuring parameters", "\n", "        ", "self", ".", "sourcePath", "=", "formatDirPath", "(", "sourceDir", ")", "\n", "self", ".", "targetPath", "=", "formatDirPath", "(", "targetPath", ")", "\n", "self", ".", "patchSize", "=", "int", "(", "config", "[", "'imageW'", "]", ")", "\n", "\n", "# Creating a directory to save processed samples", "\n", "createDir", "(", "self", ".", "targetPath", ")", "\n", "\n", "# Listing all images stored in the source directory", "\n", "self", ".", "sourceImages", "=", "imageList", "(", "self", ".", "sourcePath", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.patchExtractor.patchExtract.__call__": [[25, 43], ["etaprogress.progress.ProgressBar", "enumerate", "print", "len", "cv2.imread", "range", "int", "range", "print", "cv2.imwrite", "str"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "        ", "bar", "=", "ProgressBar", "(", "len", "(", "self", ".", "sourceImages", ")", ",", "max_width", "=", "int", "(", "50", ")", ")", "\n", "counter", "=", "0", "\n", "for", "IC", ",", "i", "in", "enumerate", "(", "self", ".", "sourceImages", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "i", ")", "\n", "imgTemp", "=", "img", "[", ":", "img", ".", "shape", "[", "0", "]", "-", "self", ".", "patchSize", ",", ":", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "patchSize", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "imgTemp", ".", "shape", "[", "0", "]", ",", "self", ".", "patchSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "imgTemp", ".", "shape", "[", "1", "]", ",", "self", ".", "patchSize", ")", ":", "\n", "                    ", "patch", "=", "img", "[", "i", ":", "i", "+", "self", ".", "patchSize", ",", "j", ":", "j", "+", "self", ".", "patchSize", ",", ":", "]", "\n", "#print (patch.shape)", "\n", "cv2", ".", "imwrite", "(", "self", ".", "targetPath", "+", "str", "(", "counter", ")", "+", "\".png\"", ",", "patch", ")", "\n", "counter", "+=", "1", "\n", "", "", "if", "IC", "%", "2", "==", "0", ":", "\n", "                ", "bar", ".", "numerator", "=", "IC", "\n", "print", "(", "Fore", ".", "CYAN", "+", "\"Image Processd |\"", ",", "bar", ",", "Fore", ".", "CYAN", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "", "print", "(", "\"\\n Patch Extracted:\"", ",", "counter", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customDataloader.customDatasetReader.__init__": [[43, 55], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "height", ",", "width", ",", "transformation", "=", "True", ")", ":", "\n", "        ", "self", ".", "image_list", "=", "image_list", "\n", "self", ".", "transformLR", "=", "transforms", "\n", "self", ".", "imageH", "=", "height", "\n", "self", ".", "imageW", "=", "width", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "normMean", ",", "normStd", ")", "\n", "\n", "self", ".", "transformRI", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "self", ".", "transformWN", "=", "transforms", ".", "Compose", "(", "[", "#transforms.Resize((self.imageH, self.imageW)),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customDataloader.customDatasetReader.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "image_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customDataloader.customDatasetReader.__getitem__": [[61, 100], ["customDataloader.customDatasetReader.image_list[].replace", "customDataloader.customDatasetReader.gtImageFileName.replace", "customDataloader.imread_uint16_png", "customDataloader.customDatasetReader.gtImageFileName.replace", "random.randint", "random.randint", "cv2.resize().astype", "cv2.resize().astype", "cv2.resize().astype", "customDataloader.customDatasetReader.transformRI", "customDataloader.customDatasetReader.transformWN", "customDataloader.customDatasetReader.transformWN", "cv2.cvtColor", "cv2.cvtColor", "cv2.imread", "cv2.imread", "cv2.resize", "cv2.resize", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imread_uint16_png"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "\n", "        ", "gamma", "=", "2.24", "\n", "self", ".", "sampledImageLeft", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "self", ".", "image_list", "[", "i", "]", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "255.0", "\n", "\n", "\n", "self", ".", "gtImageFileName", "=", "self", ".", "image_list", "[", "i", "]", ".", "replace", "(", "'_medium'", ",", "'_gt16'", ")", "#+ \".png\"", "\n", "alignPath", "=", "self", ".", "gtImageFileName", ".", "replace", "(", "\"_gt16.png\"", ",", "\"_alignratio.npy\"", ")", "\n", "#print(alignPath)", "\n", "self", ".", "gtImage", "=", "imread_uint16_png", "(", "self", ".", "gtImageFileName", ",", "alignPath", ")", "\n", "\n", "HDRGt8", "=", "self", ".", "gtImageFileName", ".", "replace", "(", "\"gt16\"", ",", "\"gt8\"", ")", "#self.imagePathGT.replace(\"XtrasHD2/HDRTrainingUnNorm\", \"XtrasHD1/HDRTrainingNorm\") + extractFileName(self.image_list[i],True).replace('_medium', '_gt') + \".png\"", "\n", "#print(HDRGt8)", "\n", "self", ".", "sampledImageHDR8", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "HDRGt8", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "255.0", "\n", "\n", "\n", "randH", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "imageH", "/", "2", ")", "\n", "randW", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "imageH", "/", "2", ")", "\n", "#print(randH, randW)", "\n", "self", ".", "sampledImageLeft", "=", "self", ".", "sampledImageLeft", "[", "randH", ":", "randH", "+", "self", ".", "imageH", ",", "randW", ":", "randW", "+", "self", ".", "imageW", ",", ":", "]", "\n", "self", ".", "gtImage", "=", "self", ".", "gtImage", "[", "randH", ":", "randH", "+", "self", ".", "imageH", ",", "randW", ":", "randW", "+", "self", ".", "imageW", ",", ":", "]", "\n", "self", ".", "sampledImageHDR8", "=", "self", ".", "sampledImageHDR8", "[", "randH", ":", "randH", "+", "self", ".", "imageH", ",", "randW", ":", "randW", "+", "self", ".", "imageW", ",", ":", "]", "\n", "\n", "\n", "self", ".", "sampledImageLeft", "=", "cv2", ".", "resize", "(", "self", ".", "sampledImageLeft", ",", "(", "128", ",", "128", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "#** gamma", "\n", "self", ".", "gtImage", "=", "cv2", ".", "resize", "(", "self", ".", "gtImage", ",", "(", "128", ",", "128", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "#** gamma", "\n", "self", ".", "sampledImageHDR8", "=", "cv2", ".", "resize", "(", "self", ".", "sampledImageHDR8", ",", "(", "128", ",", "128", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "#** gamma", "\n", "\n", "# Transforms Images for training ", "\n", "self", ".", "inputImageCrop", "=", "self", ".", "transformRI", "(", "self", ".", "sampledImageLeft", ")", "\n", "self", ".", "gtImageCrop", "=", "self", ".", "transformWN", "(", "self", ".", "gtImage", ")", "#self.transformRI(self.gtImageCrop)", "\n", "self", ".", "gt8bitCrop", "=", "self", ".", "transformWN", "(", "self", ".", "sampledImageHDR8", ")", "\n", "\n", "#print (self.gtImageHR.max(), self.gtImageHR.min(), self.inputImage.max(), self.inputImage.min())", "\n", "#print(self.lumImageCrop.shape)", "\n", "#print(self.inputImageCrop.shape, self.gtImageCrop.shape)", "\n", "#self.gtImageCrop = torch.clamp(self.gtImageCrop, 0, 2.5)", "\n", "return", "self", ".", "inputImageCrop", ",", "self", ".", "gt8bitCrop", ",", "self", ".", "gtImageCrop", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customDataloader.imread_uint16_png": [[21, 38], ["numpy.load().astype", "cv2.cvtColor", "numpy.load", "cv2.imread"], "function", ["None"], ["def", "imread_uint16_png", "(", "image_path", ",", "alignratio_path", ")", ":", "\n", "    ", "\"\"\" This function loads a uint16 png image from the specified path and restore its original image range with\n    the ratio stored in the specified alignratio.npy respective path.\n\n\n    Args:\n        image_path (str): Path to the uint16 png image\n        alignratio_path (str): Path to the alignratio.npy file corresponding to the image\n\n    Returns:\n        np.ndarray (np.float32, (h,w,3)): Returns the RGB HDR image specified in image_path.\n\n    \"\"\"", "\n", "# Load the align_ratio variable and ensure is in np.float32 precision", "\n", "align_ratio", "=", "np", ".", "load", "(", "alignratio_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# Load image without changing bit depth and normalize by align ratio", "\n", "return", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "image_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "align_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.dataNormalization.UnNormalize.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "std", "=", "normStd", "\n", "self", ".", "mean", "=", "normMean", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.dataNormalization.UnNormalize.__call__": [[13, 28], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "imageNetNormalize", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "if", "imageNetNormalize", ":", "\n", "            ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "                ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "", "", "else", ":", "\n", "            ", "tensor", "=", "(", "tensor", "*", "0.5", ")", "+", "0.5", "\n", "\n", "", "return", "tensor", "", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.bayerSampler": [[4, 20], ["image.copy"], "function", ["None"], ["def", "bayerSampler", "(", "image", ")", ":", "\n", "    ", "img", "=", "image", ".", "copy", "(", ")", "\n", "\n", "# R samler", "\n", "img", "[", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", "1", ":", "3", "]", "=", "0", "\n", "\n", "# B sampler", "\n", "img", "[", ":", ":", "2", ",", ":", ":", "2", ",", "0", ":", "2", "]", "=", "0", "\n", "\n", "# G12 sampler", "\n", "img", "[", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "# G21 sampler", "\n", "img", "[", "1", ":", ":", "2", ",", ":", ":", "2", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.quadBayerSampler": [[22, 51], ["image.copy"], "function", ["None"], ["", "def", "quadBayerSampler", "(", "image", ")", ":", "\n", "    ", "img", "=", "image", ".", "copy", "(", ")", "\n", "\n", "# Quad R ", "\n", "img", "[", ":", ":", "4", ",", ":", ":", "4", ",", "1", ":", "3", "]", "=", "0", "\n", "img", "[", "1", ":", ":", "4", ",", "1", ":", ":", "4", ",", "1", ":", "3", "]", "=", "0", "\n", "img", "[", ":", ":", "4", ",", "1", ":", ":", "4", ",", "1", ":", "3", "]", "=", "0", "\n", "img", "[", "1", ":", ":", "4", ",", ":", ":", "4", ",", "1", ":", "3", "]", "=", "0", "\n", "\n", "# Quad B ", "\n", "img", "[", "3", ":", ":", "4", ",", "2", ":", ":", "4", ",", "0", ":", "2", "]", "=", "0", "\n", "img", "[", "3", ":", ":", "4", ",", "3", ":", ":", "4", ",", "0", ":", "2", "]", "=", "0", "\n", "img", "[", "2", ":", ":", "4", ",", "3", ":", ":", "4", ",", "0", ":", "2", "]", "=", "0", "\n", "img", "[", "2", ":", ":", "4", ",", "2", ":", ":", "4", ",", "0", ":", "2", "]", "=", "0", "\n", "\n", "#Quad G12", "\n", "img", "[", "1", ":", ":", "4", ",", "2", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "img", "[", "1", ":", ":", "4", ",", "3", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "img", "[", ":", ":", "4", ",", "2", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "img", "[", ":", ":", "4", ",", "3", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "#Quad G21", "\n", "img", "[", "2", ":", ":", "4", ",", "1", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "img", "[", "3", ":", ":", "4", ",", "1", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "img", "[", "2", ":", ":", "4", ",", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "img", "[", "3", ":", ":", "4", ",", ":", ":", "4", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.dynamicBayerSamplerOpenCV": [[53, 102], ["image.copy", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "def", "dynamicBayerSamplerOpenCV", "(", "image", ",", "gridSize", "=", "4", ")", ":", "\n", "\n", "# Initiating parameters", "\n", "    ", "img", "=", "image", ".", "copy", "(", ")", "\n", "rows", "=", "img", ".", "shape", "[", "0", "]", "\n", "cols", "=", "img", ".", "shape", "[", "1", "]", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "\n", "while", "row", "<", "rows", ":", "\n", "        ", "while", "col", "<", "cols", ":", "\n", "# R sampler (opencv)", "\n", "            ", "for", "i", "in", "range", "(", "row", ",", "row", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", ",", "col", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", "1", ":", "3", "]", "=", "0", "\n", "\n", "# B sampler (opencv)", "\n", "", "", "for", "i", "in", "range", "(", "row", "+", "gridSize", ",", "row", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", "+", "gridSize", ",", "col", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", ":", "2", "]", "=", "0", "\n", "\n", "# G12 sampler", "\n", "", "", "for", "i", "in", "range", "(", "row", ",", "row", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", "+", "gridSize", ",", "col", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "# G21 sampler", "\n", "", "", "for", "i", "in", "range", "(", "row", "+", "gridSize", ",", "row", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", ",", "col", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "# Updading column index", "\n", "", "", "col", "+=", "(", "gridSize", "*", "2", ")", "\n", "\n", "# Initiating column index to iterate over a new row", "\n", "", "col", "=", "0", "\n", "\n", "# Updading row index", "\n", "row", "+=", "(", "gridSize", "*", "2", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.dynamicBayerSampler": [[104, 153], ["image.copy", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "def", "dynamicBayerSampler", "(", "image", ",", "gridSize", "=", "4", ")", ":", "\n", "\n", "# Initiating parameters", "\n", "    ", "img", "=", "image", ".", "copy", "(", ")", "\n", "rows", "=", "img", ".", "shape", "[", "0", "]", "\n", "cols", "=", "img", ".", "shape", "[", "1", "]", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "\n", "while", "row", "<", "rows", ":", "\n", "        ", "while", "col", "<", "cols", ":", "\n", "# R sampler ", "\n", "            ", "for", "i", "in", "range", "(", "row", ",", "row", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", ",", "col", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", ":", "2", "]", "=", "0", "\n", "\n", "# B sampler", "\n", "", "", "for", "i", "in", "range", "(", "row", "+", "gridSize", ",", "row", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", "+", "gridSize", ",", "col", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", "1", ":", "3", "]", "=", "0", "\n", "\n", "# G12 sampler", "\n", "", "", "for", "i", "in", "range", "(", "row", ",", "row", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", "+", "gridSize", ",", "col", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "# G21 sampler ", "\n", "", "", "for", "i", "in", "range", "(", "row", "+", "gridSize", ",", "row", "+", "gridSize", "+", "gridSize", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "col", ",", "col", "+", "gridSize", ")", ":", "\n", "                    ", "if", "(", "i", ">=", "rows", "or", "j", ">=", "cols", ")", ":", "\n", "                        ", "break", "\n", "", "img", "[", "i", ",", "j", ",", ":", ":", "2", "]", "=", "0", "\n", "\n", "# Updading column index", "\n", "", "", "col", "+=", "(", "gridSize", "*", "2", ")", "\n", "\n", "# Initiating column index to iterate over a new row", "\n", "", "col", "=", "0", "\n", "\n", "# Updading row index", "\n", "row", "+=", "(", "gridSize", "*", "2", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customTransform.AddGaussianNoise.__init__": [[7, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "0.", ",", "var", "=", ".1", ",", "pov", "=", "0.6", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "pov", "=", "pov", "\n", "", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customTransform.AddGaussianNoise.__call__": [[11, 15], ["random.uniform", "torch.randn().uniform_", "torch.randn", "tensor.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", "**", "self", ".", "pov", ")", "\n", "noisyTensor", "=", "tensor", "+", "torch", ".", "randn", "(", "tensor", ".", "size", "(", ")", ")", ".", "uniform_", "(", "0", ",", "1.", ")", "*", "sigma", "+", "self", ".", "mean", "\n", "return", "noisyTensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.customTransform.AddGaussianNoise.__repr__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(mean={0}, std={1})'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.__init__": [[19, 36], ["formatDirPath", "formatDirPath", "print", "int", "int", "int", "createDir", "imageList", "formatDirPath"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "source", ",", "target", ",", "gridSze", ",", "numberOfSamples", "=", "None", ")", ":", "\n", "\n", "# Configuring parameters", "\n", "        ", "self", ".", "gtPath", "=", "formatDirPath", "(", "source", ")", "\n", "self", ".", "targetPath", "=", "formatDirPath", "(", "target", ")", "\n", "self", ".", "numberOfSamples", "=", "numberOfSamples", "\n", "print", "(", "\"number of data samples to be processed\"", ",", "self", ".", "numberOfSamples", ")", "\n", "self", ".", "interval", "=", "int", "(", "config", "[", "'interval'", "]", ")", "\n", "self", ".", "barLen", "=", "int", "(", "config", "[", "'barLen'", "]", ")", "\n", "self", ".", "gridSze", "=", "int", "(", "gridSze", ")", "\n", "self", ".", "patchSize", "=", "128", "\n", "\n", "# Creating a directory to save processed samples", "\n", "createDir", "(", "self", ".", "targetPath", ")", "\n", "\n", "# Listing all images stored in the source directory", "\n", "self", ".", "sourceDataSamples", "=", "imageList", "(", "formatDirPath", "(", "self", ".", "gtPath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.startResumeProcess": [[37, 57], ["time.time", "printProgressBar", "enumerate", "timer", "print", "len", "printProgressBar", "sys.stdout.flush", "time.time", "extractFileName", "processDataset.datasetSampler.sourceDataSamples.remove", "len"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.printProgressBar", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.timer", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.printProgressBar", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName"], ["", "def", "startResumeProcess", "(", "self", ")", ":", "\n", "#self.numberOfSamples = numberOfSamples", "\n", "        ", "startTime", "=", "time", ".", "time", "(", ")", "\n", "count", "=", "0", "\n", "percent", "=", "10", "\n", "printProgressBar", "(", "0", ",", "len", "(", "self", ".", "samplesInTargetDirectory", ")", ",", "prefix", "=", "'Loading process'", ",", "suffix", "=", "'completed'", ",", "length", "=", "self", ".", "barLen", ")", "\n", "\n", "for", "s", ",", "i", "in", "enumerate", "(", "self", ".", "samplesInTargetDirectory", ")", ":", "\n", "            ", "targetFile", "=", "self", ".", "gtPath", "+", "extractFileName", "(", "i", ")", "\n", "try", ":", "\n", "                ", "self", ".", "sourceDataSamples", ".", "remove", "(", "targetFile", ")", "\n", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "printProgressBar", "(", "s", ",", "len", "(", "self", ".", "samplesInTargetDirectory", ")", ",", "prefix", "=", "'Loading process'", ",", "suffix", "=", "' completed'", ",", "length", "=", "self", ".", "barLen", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "hours", ",", "minutes", ",", "seconds", "=", "timer", "(", "startTime", ",", "time", ".", "time", "(", ")", ")", "\n", "print", "(", "\"\\nTime elapsed to resume process [{:0>2}:{:0>2}:{:0>2}]\"", ".", "format", "(", "hours", ",", "minutes", ",", "seconds", ")", ")", "\n", "\n", "return", "self", ".", "sourceDataSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.samplingImages": [[58, 102], ["print", "time.time", "ProgressBar", "timer", "print", "len", "sys.stdout.flush", "time.time", "time.time", "PIL.Image.open", "numpy.asarray", "PIL.Image.fromarray", "dynamicBayerSampler.save", "print", "print", "dynamicBayerSampler.resize", "bayerSampler", "quadBayerSampler", "dynamicBayerSampler", "os.remove", "extractFileName"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.timer", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.bayerSampler", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.quadBayerSampler", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.dynamicBayerSampler", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName"], ["", "def", "samplingImages", "(", "self", ")", ":", "\n", "#self.numberOfSamples = numberOfSamples", "\n", "        ", "print", "(", "\"in some fucking method\"", ",", "self", ".", "numberOfSamples", ")", "\n", "if", "not", "self", ".", "numberOfSamples", ":", "\n", "            ", "self", ".", "numberOfSamples", "=", "len", "(", "self", ".", "sourceDataSamples", ")", "\n", "", "i", "=", "0", "\n", "timerFlag", "=", "0", "\n", "startTime", "=", "time", ".", "time", "(", ")", "\n", "bar", "=", "ProgressBar", "(", "self", ".", "numberOfSamples", ",", "max_width", "=", "self", ".", "barLen", ")", "\n", "\n", "for", "sample", "in", "self", ".", "sourceDataSamples", ":", "\n", "# Tacking batch processing time", "\n", "            ", "if", "timerFlag", "==", "0", ":", "\n", "                ", "loopTime", "=", "time", ".", "time", "(", ")", "\n", "timerFlag", "=", "1", "\n", "\n", "", "try", ":", "\n", "# Read Images", "\n", "                ", "patchSize", "=", "(", "self", ".", "patchSize", ",", "self", ".", "patchSize", ")", "\n", "image", "=", "Image", ".", "open", "(", "sample", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ".", "resize", "(", "patchSize", ")", ")", "\n", "\n", "# Sampling Data", "\n", "if", "self", ".", "gridSze", "==", "1", ":", "\n", "                    ", "image", "=", "bayerSampler", "(", "image", ")", "\n", "", "if", "self", ".", "gridSze", "==", "2", ":", "\n", "                    ", "image", "=", "quadBayerSampler", "(", "image", ")", "\n", "", "else", ":", "\n", "                    ", "image", "=", "dynamicBayerSampler", "(", "image", ",", "self", ".", "gridSze", ")", "\n", "", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "image", ".", "save", "(", "self", ".", "targetPath", "+", "extractFileName", "(", "sample", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "except", ":", "\n", "                ", "os", ".", "remove", "(", "sample", ")", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "bar", ".", "numerator", "=", "i", "\n", "print", "(", "\"Image Sampled:\"", ",", "bar", ",", "end", "=", "'\\r'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "if", "i", "==", "self", ".", "numberOfSamples", ":", "\n", "                ", "print", "(", "\"Successfully sampled target {} of images!\"", ".", "format", "(", "self", ".", "numberOfSamples", ")", ")", "\n", "break", "\n", "", "", "hours", ",", "minutes", ",", "seconds", "=", "timer", "(", "startTime", ",", "time", ".", "time", "(", ")", ")", "\n", "print", "(", "\"Processed [{}] images! Total time elapsed [{:0>2}:{:0>2}:{:0>2}].\"", ".", "format", "(", "i", ",", "hours", ",", "minutes", ",", "seconds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.resumeSampling": [[104, 132], ["print", "imageList", "formatDirPath", "print", "print", "processDataset.datasetSampler.samplingImages", "int", "int", "print", "processDataset.datasetSampler.startResumeProcess", "processDataset.datasetSampler.samplingImages", "len", "len", "len", "print", "sys.exit", "int", "int", "int", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.samplingImages", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.startResumeProcess", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.processDataset.datasetSampler.samplingImages"], ["", "def", "resumeSampling", "(", "self", ",", "numberOfSamples", "=", "None", ")", ":", "\n", "#self.numberOfSamples = numberOfSamples", "\n", "# Resuming data processing  ", "\n", "        ", "print", "(", "\"Resuming Process....\"", ")", "\n", "self", ".", "samplesInTargetDirectory", "=", "imageList", "(", "formatDirPath", "(", "self", ".", "targetPath", ")", ")", "\n", "if", "self", ".", "samplesInTargetDirectory", ":", "\n", "            ", "print", "(", "\"[{}] image samples have been found in the target directory!\"", ".", "format", "(", "len", "(", "self", ".", "samplesInTargetDirectory", ")", ")", ")", "\n", "if", "int", "(", "len", "(", "self", ".", "samplesInTargetDirectory", ")", ")", ">=", "int", "(", "len", "(", "self", ".", "sourceDataSamples", ")", ")", ":", "\n", "                ", "print", "(", "\"All target images are already been processed! Thus, the process did not resume!\"", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "numberOfSamples", ":", "\n", "                    ", "if", "self", ".", "numberOfSamples", "-", "int", "(", "len", "(", "self", ".", "samplesInTargetDirectory", ")", ")", ">", "0", "and", "self", ".", "numberOfSamples", "<", "int", "(", "len", "(", "self", ".", "sourceDataSamples", ")", ")", ":", "\n", "                        ", "self", ".", "numberOfSamples", "=", "self", ".", "numberOfSamples", "-", "int", "(", "len", "(", "self", ".", "samplesInTargetDirectory", ")", ")", "\n", "\n", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"Invalid amount of target samples have been given!\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# Listing files already processed       ", "\n", "", "", "self", ".", "sourceDataSamples", "=", "self", ".", "startResumeProcess", "(", ")", "\n", "\n", "# Calling method to process samples", "\n", "self", ".", "samplingImages", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Target directory is empty! Unable to resume process. Process is starting from the beggining...\"", ")", "\n", "self", ".", "samplingImages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.__init__": [[33, 81], ["int", "int", "int", "int", "int", "int", "int", "float", "float", "float", "int", "UnNormalize", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "ResMKHDR().to", "HDRRangeNet().to", "attentiomDiscriminator().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "twostageHDR.twostageHDR.attentionNet.parameters", "twostageHDR.twostageHDR.HDRRec.parameters", "twostageHDR.twostageHDR.discriminator.parameters", "ResMKHDR", "HDRRangeNet", "attentiomDiscriminator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "\n", "# Model Configration ", "\n", "        ", "self", ".", "targetPath", "=", "config", "[", "'targetPath'", "]", "\n", "self", ".", "checkpointPath", "=", "config", "[", "'checkpointPath'", "]", "\n", "self", ".", "logPath", "=", "config", "[", "'logPath'", "]", "\n", "self", ".", "testImagesPath", "=", "config", "[", "'testImagePath'", "]", "\n", "self", ".", "resultDir", "=", "config", "[", "'resultDir'", "]", "\n", "self", ".", "modelName", "=", "config", "[", "'modelName'", "]", "\n", "self", ".", "dataSamples", "=", "config", "[", "'dataSamples'", "]", "\n", "self", ".", "batchSize", "=", "int", "(", "config", "[", "'batchSize'", "]", ")", "\n", "self", ".", "imageH", "=", "int", "(", "config", "[", "'imageH'", "]", ")", "\n", "self", ".", "imageW", "=", "int", "(", "config", "[", "'imageW'", "]", ")", "\n", "self", ".", "inputC", "=", "int", "(", "config", "[", "'inputC'", "]", ")", "\n", "self", ".", "outputC", "=", "int", "(", "config", "[", "'outputC'", "]", ")", "\n", "self", ".", "totalEpoch", "=", "int", "(", "config", "[", "'epoch'", "]", ")", "\n", "self", ".", "interval", "=", "int", "(", "config", "[", "'interval'", "]", ")", "\n", "self", ".", "learningRate", "=", "float", "(", "config", "[", "'learningRate'", "]", ")", "\n", "self", ".", "adamBeta1", "=", "float", "(", "config", "[", "'adamBeta1'", "]", ")", "\n", "self", ".", "adamBeta2", "=", "float", "(", "config", "[", "'adamBeta2'", "]", ")", "\n", "self", ".", "barLen", "=", "int", "(", "config", "[", "'barLen'", "]", ")", "\n", "\n", "# Initiating Training Parameters(for step)", "\n", "self", ".", "currentEpoch", "=", "0", "\n", "self", ".", "startSteps", "=", "0", "\n", "self", ".", "totalSteps", "=", "0", "\n", "self", ".", "adversarialMean", "=", "0", "\n", "\n", "# Normalization", "\n", "self", ".", "unNorm", "=", "UnNormalize", "(", ")", "\n", "\n", "# Noise Level for inferencing", "\n", "self", ".", "noiseSet", "=", "[", "10", ",", "20", ",", "50", "]", "\n", "\n", "\n", "# Preapring model(s) for GPU acceleration", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "#torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')#", "\n", "self", ".", "attentionNet", "=", "ResMKHDR", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "HDRRec", "=", "HDRRangeNet", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "discriminator", "=", "attentiomDiscriminator", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Optimizers", "\n", "self", ".", "optimizerEG", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "attentionNet", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "learningRate", ",", "betas", "=", "(", "self", ".", "adamBeta1", ",", "self", ".", "adamBeta2", ")", ")", "\n", "self", ".", "optimizerER", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "HDRRec", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "learningRate", ",", "betas", "=", "(", "self", ".", "adamBeta1", ",", "self", ".", "adamBeta2", ")", ")", "\n", "self", ".", "optimizerED", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "learningRate", ",", "betas", "=", "(", "self", ".", "adamBeta1", ",", "self", ".", "adamBeta2", ")", ")", "\n", "\n", "# Scheduler for Super Convergance", "\n", "self", ".", "scheduleLR", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.customTrainLoader": [[82, 106], ["imageList", "print", "customDatasetReader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList"], ["", "def", "customTrainLoader", "(", "self", ",", "overFitTest", "=", "False", ")", ":", "\n", "\n", "        ", "targetImageList", "=", "imageList", "(", "self", ".", "targetPath", ")", "\n", "targetImageList", "=", "[", "k", "for", "k", "in", "targetImageList", "if", "'_medium'", "in", "k", "]", "\n", "print", "(", "\"Trining Samples (Input):\"", ",", "self", ".", "targetPath", ",", "len", "(", "targetImageList", ")", ")", "\n", "\n", "if", "overFitTest", "==", "True", ":", "\n", "            ", "targetImageList", "=", "targetImageList", "[", "-", "1", ":", "]", "\n", "", "if", "self", ".", "dataSamples", ":", "\n", "            ", "targetImageList", "=", "targetImageList", "[", ":", "self", ".", "dataSamples", "]", "\n", "\n", "", "datasetReader", "=", "customDatasetReader", "(", "\n", "image_list", "=", "targetImageList", ",", "\n", "height", "=", "self", ".", "imageH", ",", "\n", "width", "=", "self", ".", "imageW", ",", "\n", ")", "\n", "\n", "self", ".", "trainLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "datasetReader", ",", "\n", "batch_size", "=", "self", ".", "batchSize", ",", "\n", "shuffle", "=", "True", ",", "\n", "#num_workers=8", "\n", ")", "\n", "\n", "return", "self", ".", "trainLoader", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.modelTraining": [[107, 264], ["regularizedFeatureLoss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.nn.L1Loss().to", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "MSSSIM().to", "deltaEColorLoss().to", "torch.BCELoss().to", "torch.BCELoss().to", "torch.BCELoss().to", "torch.BCELoss().to", "torch.BCELoss().to", "customPrint", "int", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "np.log", "etaprogress.progress.ProgressBar", "customPrint", "twostageHDR.twostageHDR.customTrainLoader", "twostageHDR.twostageHDR.customTrainLoader", "twostageHDR.twostageHDR.modelLoad", "regularizedFeatureLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "MSSSIM", "deltaEColorLoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "len", "int", "time.time", "LRImagesLeft.to", "HRGTImages.to", "HRGTImages16.to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "twostageHDR.twostageHDR.attentionNet", "twostageHDR.twostageHDR.HDRRec", "twostageHDR.twostageHDR.optimizerEG.zero_grad", "torch.BCELoss().to.", "lossEG.backward", "twostageHDR.twostageHDR.optimizerEG.step", "twostageHDR.twostageHDR.optimizerED.zero_grad", "lossED.backward", "twostageHDR.twostageHDR.optimizerED.step", "twostageHDR.twostageHDR.optimizerER.zero_grad", "lossER.backward", "twostageHDR.twostageHDR.optimizerER.step", "customPrint", "twostageHDR.twostageHDR.savingWeights", "customPrint", "exit", "twostageHDR.twostageHDR.detach", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "twostageHDR.twostageHDR.discriminator", "torch.BCELoss().to.", "torch.BCELoss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "torch.nn.L1Loss().to.", "deltaEColorLoss().to.", "print", "tbLogWritter", "torchvision.utils.save_image", "torchvision.utils.save_image", "twostageHDR.twostageHDR.savingWeights", "timer", "print", "twostageHDR.twostageHDR.savingWeights", "input", "exit", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "MSSSIM().to.", "twostageHDR.twostageHDR.discriminator", "twostageHDR.twostageHDR.discriminator", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "lossEG.item", "lossER.item", "lossED.item", "twostageHDR.twostageHDR.unNorm", "time.time", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "twostageHDR.twostageHDR.detach", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.MSELoss.", "twostageHDR.twostageHDR.max", "HRGTImages16.to.max", "twostageHDR.twostageHDR.max", "HRGTImages.to.max"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.customTrainLoader", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.customTrainLoader", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.modelLoad", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.savingWeights", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.tbLogWritter", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.savingWeights", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.timer", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.savingWeights"], ["", "def", "modelTraining", "(", "self", ",", "resumeTraning", "=", "False", ",", "overFitTest", "=", "False", ",", "dataSamples", "=", "None", ")", ":", "\n", "\n", "        ", "if", "dataSamples", ":", "\n", "            ", "self", ".", "dataSamples", "=", "dataSamples", "\n", "\n", "# Losses", "\n", "", "featureLoss", "=", "regularizedFeatureLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reconstructionLoss", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mseLoss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "ssimLoss", "=", "MSSSIM", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "colorLoss", "=", "deltaEColorLoss", "(", "normalize", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "adversarialLoss", "=", "nn", ".", "BCELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Overfitting Testing", "\n", "if", "overFitTest", "==", "True", ":", "\n", "            ", "customPrint", "(", "Fore", ".", "RED", "+", "\"Over Fitting Testing with an arbitary image!\"", ",", "self", ".", "barLen", ")", "\n", "trainingImageLoader", "=", "self", ".", "customTrainLoader", "(", "overFitTest", "=", "True", ")", "\n", "self", ".", "interval", "=", "1", "\n", "self", ".", "totalEpoch", "=", "100000", "\n", "", "else", ":", "\n", "            ", "trainingImageLoader", "=", "self", ".", "customTrainLoader", "(", ")", "\n", "\n", "\n", "# Resuming Training", "\n", "", "if", "resumeTraning", "==", "True", ":", "\n", "            ", "self", ".", "modelLoad", "(", "cpu", "=", "True", ")", "\n", "try", ":", "\n", "                ", "pass", "#self.modelLoad()", "\n", "\n", "", "except", ":", "\n", "#print()", "\n", "                ", "customPrint", "(", "Fore", ".", "RED", "+", "\"Would you like to start training from sketch (default: Y): \"", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "userInput", "=", "input", "(", ")", "or", "\"Y\"", "\n", "if", "not", "(", "userInput", "==", "\"Y\"", "or", "userInput", "==", "\"y\"", ")", ":", "\n", "                    ", "exit", "(", ")", "\n", "\n", "\n", "# Starting Training", "\n", "", "", "", "customPrint", "(", "'Training is about to begin using:'", "+", "Fore", ".", "YELLOW", "+", "'[{}]'", ".", "format", "(", "self", ".", "device", ")", ".", "upper", "(", ")", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "\n", "# Initiating steps", "\n", "#print(\"len of tranLoader:\", len(trainingImageLoader))", "\n", "self", ".", "totalSteps", "=", "int", "(", "len", "(", "trainingImageLoader", ")", "*", "self", ".", "totalEpoch", ")", "\n", "\n", "# Instantiating Super Convergance ", "\n", "self", ".", "scheduleLG", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizerEG", ",", "step_size", "=", "1", ",", "gamma", "=", "0.01", ")", "#optim.lr_scheduler.OneCycleLR(optimizer=self.optimizerEG, max_lr=self.learningRate, total_steps=self.totalSteps)", "\n", "self", ".", "scheduleLR", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizerER", ",", "step_size", "=", "1", ",", "gamma", "=", "0.01", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# Initiating progress bar ", "\n", "log10", "=", "np", ".", "log", "(", "10", ")", "\n", "MAX_DIFF", "=", "2", "\n", "bar", "=", "ProgressBar", "(", "self", ".", "totalSteps", ",", "max_width", "=", "int", "(", "self", ".", "barLen", "/", "2", ")", ")", "\n", "currentStep", "=", "self", ".", "startSteps", "\n", "while", "currentStep", "<", "self", ".", "totalSteps", ":", "\n", "#print(currentStep, self.startSteps)", "\n", "            ", "lossEG", "=", "0", "\n", "for", "LRImagesLeft", ",", "HRGTImages", ",", "HRGTImages16", "in", "trainingImageLoader", ":", "\n", "\n", "##############################", "\n", "#### Initiating Variables ####", "\n", "##############################", "\n", "\n", "# Time tracker", "\n", "                ", "iterTime", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Updating Steps", "\n", "currentStep", "+=", "1", "\n", "if", "currentStep", ">", "self", ".", "totalSteps", ":", "\n", "                    ", "self", ".", "savingWeights", "(", "currentStep", ")", "\n", "customPrint", "(", "Fore", ".", "YELLOW", "+", "\"Training Completed Successfully!\"", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "exit", "(", ")", "\n", "\n", "# Images", "\n", "", "rawInputLeft", "=", "LRImagesLeft", ".", "to", "(", "self", ".", "device", ")", "\n", "highResReal", "=", "HRGTImages", ".", "to", "(", "self", ".", "device", ")", "\n", "highResReal16", "=", "HRGTImages16", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# GAN Variables", "\n", "onesConst", "=", "torch", ".", "ones", "(", "rawInputLeft", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "targetReal", "=", "(", "torch", ".", "rand", "(", "rawInputLeft", ".", "shape", "[", "0", "]", ",", "1", ")", "*", "0.5", "+", "0.7", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "targetFake", "=", "(", "torch", ".", "rand", "(", "rawInputLeft", ".", "shape", "[", "0", "]", ",", "1", ")", "*", "0.3", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "##############################", "\n", "####### Training Phase #######", "\n", "##############################", "\n", "\n", "# Image Generation", "\n", "highResFake", "=", "self", ".", "attentionNet", "(", "rawInputLeft", ")", "\n", "highResHDR", "=", "self", ".", "HDRRec", "(", "highResFake", ".", "detach", "(", ")", ")", "\n", "\n", "# Optimization of generator Stage I", "\n", "self", ".", "optimizerEG", ".", "zero_grad", "(", ")", "\n", "generatorContentLoss", "=", "reconstructionLoss", "(", "highResFake", ",", "highResReal", ")", "+", "(", "1", "-", "ssimLoss", "(", "highResFake", ",", "highResReal", ")", ")", "#+ colorLoss(highResFake, highResReal)", "\n", "\n", "generatorAdversarialLoss", "=", "adversarialLoss", "(", "self", ".", "discriminator", "(", "highResFake", ")", ",", "onesConst", ")", "\n", "lossEG", "=", "generatorContentLoss", "+", "1e-3", "*", "generatorAdversarialLoss", "\n", "lossEG", ".", "backward", "(", ")", "\n", "self", ".", "optimizerEG", ".", "step", "(", ")", "\n", "\n", "\n", "# Optimaztion of Discriminator", "\n", "self", ".", "optimizerED", ".", "zero_grad", "(", ")", "\n", "lossED", "=", "adversarialLoss", "(", "self", ".", "discriminator", "(", "highResReal", ")", ",", "targetReal", ")", "+", "adversarialLoss", "(", "self", ".", "discriminator", "(", "highResFake", ".", "detach", "(", ")", ")", ",", "targetFake", ")", "\n", "lossED", ".", "backward", "(", ")", "\n", "self", ".", "optimizerED", ".", "step", "(", ")", "\n", "\n", "\n", "# Optimization of generator Stage II", "\n", "self", ".", "optimizerER", ".", "zero_grad", "(", ")", "\n", "#edgeLossC = colorLoss(highResFake, highResReal)", "\n", "psnr", "=", "10", "*", "torch", ".", "log", "(", "MAX_DIFF", "**", "2", "/", "mseLoss", "(", "highResHDR", ",", "highResReal16", ")", ")", "/", "log10", "\n", "generatorContentLoss", "=", "reconstructionLoss", "(", "highResHDR", ",", "highResReal16", ")", "+", "colorLoss", "(", "highResHDR", ",", "highResReal16", ")", "\n", "lossER", "=", "generatorContentLoss", "\n", "lossER", ".", "backward", "(", ")", "\n", "self", ".", "optimizerER", ".", "step", "(", ")", "\n", "\n", "##########################", "\n", "###### Model Logger ######", "\n", "##########################   ", "\n", "\n", "# Progress Bar", "\n", "if", "(", "currentStep", "+", "1", ")", "%", "25", "==", "0", ":", "\n", "                    ", "bar", ".", "numerator", "=", "currentStep", "+", "1", "\n", "print", "(", "Fore", ".", "YELLOW", "+", "\"Steps |\"", ",", "bar", ",", "Fore", ".", "YELLOW", "+", "\"| LossEG: {:.4f}, LossER: {:.4f}, outMax: {:.4f}, gtMax: {:.4f}, PSNR: {:.4f}\"", ".", "format", "(", "lossEG", ",", "lossER", ",", "highResHDR", ".", "max", "(", ")", ",", "highResReal16", ".", "max", "(", ")", ",", "psnr", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Updating training log", "\n", "", "if", "(", "currentStep", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "\n", "# Updating Tensorboard", "\n", "                    ", "summaryInfo", "=", "{", "\n", "'Input Images'", ":", "rawInputLeft", ",", "\n", "'HDR Images (8Bit)'", ":", "highResFake", ",", "\n", "'HDR Images (16Bit)'", ":", "highResHDR", ",", "\n", "'GT Images (8Bit)'", ":", "highResReal", ",", "\n", "'GT Images (16Bit)'", ":", "highResReal16", ",", "\n", "'Step'", ":", "currentStep", "+", "1", ",", "\n", "'Epoch'", ":", "self", ".", "currentEpoch", ",", "\n", "'LossEG'", ":", "lossEG", ".", "item", "(", ")", ",", "\n", "'LossER'", ":", "lossER", ".", "item", "(", ")", ",", "\n", "'LossED'", ":", "lossED", ".", "item", "(", ")", ",", "\n", "'Path'", ":", "self", ".", "logPath", ",", "\n", "'Atttention Net'", ":", "self", ".", "attentionNet", ",", "\n", "}", "\n", "tbLogWritter", "(", "summaryInfo", ")", "\n", "save_image", "(", "self", ".", "unNorm", "(", "highResFake", "[", "0", "]", ")", ",", "'modelOutput.png'", ")", "\n", "\n", "# Saving Weights and state of the model for resume training ", "\n", "self", ".", "savingWeights", "(", "currentStep", ")", "\n", "\n", "", "if", "(", "currentStep", "+", "1", ")", "%", "10000", "==", "0", ":", "\n", "# Epoch Summary", "\n", "#print(\"\\n\")", "\n", "                    ", "eHours", ",", "eMinutes", ",", "eSeconds", "=", "timer", "(", "iterTime", ",", "time", ".", "time", "(", ")", ")", "\n", "print", "(", "Fore", ".", "CYAN", "+", "'Steps [{}/{}] | Time elapsed [{:0>2}:{:0>2}:{:0>2}] | OutMax: {:.2f}, GTMax: {:.2f}, PSNR: {:.2f}, LossEG: {:.2f}, LossER: {:.2f}, LossED: {:.2f}'", "\n", ".", "format", "(", "currentStep", "+", "1", ",", "self", ".", "totalSteps", ",", "eHours", ",", "eMinutes", ",", "eSeconds", ",", "highResFake", ".", "max", "(", ")", ",", "highResReal", ".", "max", "(", ")", ",", "psnr", ",", "lossEG", ",", "lossER", ",", "lossED", ")", ")", "\n", "self", ".", "savingWeights", "(", "currentStep", "+", "1", ",", "True", ")", "\n", "#self.modelInference(validation=True, steps = currentStep + 1)", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.modelInference": [[274, 325], ["inference", "inference.testingSetProcessor", "etaprogress.progress.ProgressBar", "twostageHDR.twostageHDR.modelLoad", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "len", "int", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "inference.inputForInference", "datetime.now", "twostageHDR.twostageHDR.attentionNet", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "twostageHDR.twostageHDR.HDRRec", "datetime.now", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "inference.saveModelOutput", "imgLDR.to", "twostageHDR.twostageHDR.detach", "print"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.testingSetProcessor", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.modelLoad", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.inputForInference", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.saveModelOutput"], ["", "", "", "", "def", "modelInference", "(", "self", ",", "testImagesPath", "=", "None", ",", "outputDir", "=", "None", ",", "resize", "=", "None", ",", "validation", "=", "None", ",", "noiseSet", "=", "None", ",", "steps", "=", "None", ")", ":", "\n", "        ", "if", "not", "validation", ":", "\n", "            ", "self", ".", "modelLoad", "(", "cpu", "=", "False", ")", "\n", "print", "(", "\"\\nInferencing on pretrained weights.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Validation about to begin.\"", ")", "\n", "", "if", "not", "noiseSet", ":", "\n", "            ", "noiseSet", "=", "self", ".", "noiseSet", "\n", "", "if", "testImagesPath", ":", "\n", "            ", "self", ".", "testImagesPath", "=", "testImagesPath", "\n", "", "if", "outputDir", ":", "\n", "            ", "self", ".", "resultDir", "=", "outputDir", "\n", "\n", "\n", "", "modelInference", "=", "inference", "(", "inputRootDir", "=", "self", ".", "testImagesPath", ",", "outputRootDir", "=", "self", ".", "resultDir", ",", "modelName", "=", "self", ".", "modelName", ",", "validation", "=", "validation", ")", "\n", "\n", "testImageList", "=", "modelInference", ".", "testingSetProcessor", "(", ")", "\n", "#print(testImageList, self.testImagesPath)", "\n", "barVal", "=", "ProgressBar", "(", "len", "(", "testImageList", ")", "/", "3", ",", "max_width", "=", "int", "(", "50", ")", ")", "\n", "imageCounter", "=", "0", "\n", "PSNRval", "=", "[", "]", "\n", "SSIMVal", "=", "[", "]", "\n", "c", "=", "0", "\n", "from", "datetime", "import", "datetime", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "imgPath", "in", "testImageList", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "\"_medium\"", "in", "imgPath", ":", "\n", "#if int(extractFileName(imgPath, True).split(\"_\")[0]) % 3 ==0:", "\n", "#print(extractFileName(imgPath, True).split(\"_\")[0])", "\n", "                    ", "c", "+=", "1", "\n", "device", "=", "self", ".", "device", "\n", "imgLDR", ",", "lumLDR", "=", "modelInference", ".", "inputForInference", "(", "imgPath", ",", "noiseLevel", "=", "0", ")", "#.to(self.device)", "\n", "#print(imgL.shape, imgR.shape, imgPath)", "\n", "a", "=", "datetime", ".", "now", "(", ")", "\n", "output", "=", "self", ".", "attentionNet", "(", "imgLDR", ".", "to", "(", "device", ")", ")", "#.to(device)", "\n", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "output", "=", "self", ".", "HDRRec", "(", "output", ".", "detach", "(", ")", ")", "\n", "b", "=", "datetime", ".", "now", "(", ")", "\n", "d", "=", "b", "-", "a", "\n", "#print( d)", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "modelInference", ".", "saveModelOutput", "(", "output", ",", "imgPath", ",", "steps", ")", "\n", "\n", "imageCounter", "+=", "1", "\n", "if", "imageCounter", "%", "2", "==", "0", ":", "\n", "                        ", "barVal", ".", "numerator", "=", "imageCounter", "\n", "print", "(", "Fore", ".", "CYAN", "+", "\"Image Processd |\"", ",", "barVal", ",", "Fore", ".", "CYAN", ",", "end", "=", "'\\r'", ")", "\n", "", "", "", "print", "(", "c", ")", "\n", "#print(\"\\nSteps: {} | PSNR: {:.2f} | SSIM: {:.2f}\".format(steps, np.mean(PSNRval), np.mean(SSIMVal)))", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.modelSummary": [[327, 353], ["customPrint", "torchsummary.summary", "print", "print", "customPrint", "torchsummary.summary", "print", "print", "ptflops.get_model_complexity_info", "customPrint", "customPrint", "ptflops.get_model_complexity_info", "customPrint", "customPrint", "print", "configShower", "print"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configShower"], ["", "", "def", "modelSummary", "(", "self", ",", "input_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "input_size", ":", "\n", "            ", "input_size", "=", "(", "3", ",", "self", ".", "imageH", "//", "self", ".", "scalingFactor", ",", "self", ".", "imageW", "//", "self", ".", "scalingFactor", ")", "\n", "\n", "\n", "", "customPrint", "(", "Fore", ".", "YELLOW", "+", "\"AttentionNet (Generator)\"", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "summary", "(", "self", ".", "attentionNet", ",", "input_size", "=", "input_size", ")", "\n", "print", "(", "\"*\"", "*", "self", ".", "barLen", ")", "\n", "print", "(", ")", "\n", "\n", "customPrint", "(", "Fore", ".", "YELLOW", "+", "\"AttentionNet (Discriminator)\"", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "summary", "(", "self", ".", "discriminator", ",", "input_size", "=", "input_size", ")", "\n", "print", "(", "\"*\"", "*", "self", ".", "barLen", ")", "\n", "print", "(", ")", "\n", "\n", "flops", ",", "params", "=", "get_model_complexity_info", "(", "self", ".", "attentionNet", ",", "input_size", ",", "as_strings", "=", "True", ",", "print_per_layer_stat", "=", "False", ")", "\n", "customPrint", "(", "'Computational complexity (Enhace-Gen):{}'", ".", "format", "(", "flops", ")", ",", "self", ".", "barLen", ",", "'-'", ")", "\n", "customPrint", "(", "'Number of parameters (Enhace-Gen):{}'", ".", "format", "(", "params", ")", ",", "self", ".", "barLen", ",", "'-'", ")", "\n", "\n", "flops", ",", "params", "=", "get_model_complexity_info", "(", "self", ".", "discriminator", ",", "input_size", ",", "as_strings", "=", "True", ",", "print_per_layer_stat", "=", "False", ")", "\n", "customPrint", "(", "'Computational complexity (Enhace-Dis):{}'", ".", "format", "(", "flops", ")", ",", "self", ".", "barLen", ",", "'-'", ")", "\n", "customPrint", "(", "'Number of parameters (Enhace-Dis):{}'", ".", "format", "(", "params", ")", ",", "self", ".", "barLen", ",", "'-'", ")", "\n", "print", "(", ")", "\n", "\n", "configShower", "(", ")", "\n", "print", "(", "\"*\"", "*", "self", ".", "barLen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.savingWeights": [[354, 369], ["saveCheckpoint", "twostageHDR.twostageHDR.attentionNet.state_dict", "twostageHDR.twostageHDR.HDRRec.state_dict", "twostageHDR.twostageHDR.discriminator.state_dict", "twostageHDR.twostageHDR.optimizerEG.state_dict", "twostageHDR.twostageHDR.optimizerER.state_dict", "twostageHDR.twostageHDR.optimizerED.state_dict", "saveCheckpoint", "str"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.saveCheckpoint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.saveCheckpoint"], ["", "def", "savingWeights", "(", "self", ",", "currentStep", ",", "duplicate", "=", "None", ")", ":", "\n", "# Saving weights ", "\n", "        ", "checkpoint", "=", "{", "\n", "'step'", ":", "currentStep", "+", "1", ",", "\n", "'stateDictEG'", ":", "self", ".", "attentionNet", ".", "state_dict", "(", ")", ",", "\n", "'stateDictER'", ":", "self", ".", "HDRRec", ".", "state_dict", "(", ")", ",", "\n", "'stateDictED'", ":", "self", ".", "discriminator", ".", "state_dict", "(", ")", ",", "\n", "'optimizerEG'", ":", "self", ".", "optimizerEG", ".", "state_dict", "(", ")", ",", "\n", "'optimizerER'", ":", "self", ".", "optimizerER", ".", "state_dict", "(", ")", ",", "\n", "'optimizerED'", ":", "self", ".", "optimizerED", ".", "state_dict", "(", ")", ",", "\n", "'schedulerLR'", ":", "self", ".", "scheduleLR", "\n", "}", "\n", "saveCheckpoint", "(", "modelStates", "=", "checkpoint", ",", "path", "=", "self", ".", "checkpointPath", ",", "modelName", "=", "self", ".", "modelName", ")", "\n", "if", "duplicate", ":", "\n", "            ", "saveCheckpoint", "(", "modelStates", "=", "checkpoint", ",", "path", "=", "self", ".", "checkpointPath", "+", "str", "(", "currentStep", ")", "+", "\"/\"", ",", "modelName", "=", "self", ".", "modelName", ",", "backup", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.mainModule.twostageHDR.twostageHDR.modelLoad": [[370, 389], ["customPrint", "twostageHDR.twostageHDR.attentionNet.load_state_dict", "twostageHDR.twostageHDR.HDRRec.load_state_dict", "twostageHDR.twostageHDR.discriminator.load_state_dict", "twostageHDR.twostageHDR.optimizerEG.load_state_dict", "twostageHDR.twostageHDR.optimizerER.load_state_dict", "twostageHDR.twostageHDR.optimizerED.load_state_dict", "int", "customPrint", "loadCheckpoints", "loadCheckpoints"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.loadCheckpoints", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.loadCheckpoints"], ["", "", "def", "modelLoad", "(", "self", ",", "cpu", "=", "False", ")", ":", "\n", "\n", "        ", "customPrint", "(", "Fore", ".", "RED", "+", "\"Loading pretrained weight\"", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "if", "cpu", "==", "True", ":", "\n", "            ", "previousWeight", "=", "loadCheckpoints", "(", "self", ".", "checkpointPath", ",", "self", ".", "modelName", ",", "True", ")", "\n", "#print(cpu)", "\n", "", "else", ":", "\n", "            ", "previousWeight", "=", "loadCheckpoints", "(", "self", ".", "checkpointPath", ",", "self", ".", "modelName", ")", "\n", "", "self", ".", "attentionNet", ".", "load_state_dict", "(", "previousWeight", "[", "'stateDictEG'", "]", ")", "\n", "self", ".", "HDRRec", ".", "load_state_dict", "(", "previousWeight", "[", "'stateDictER'", "]", ")", "\n", "self", ".", "discriminator", ".", "load_state_dict", "(", "previousWeight", "[", "'stateDictED'", "]", ")", "\n", "self", ".", "optimizerEG", ".", "load_state_dict", "(", "previousWeight", "[", "'optimizerEG'", "]", ")", "\n", "self", ".", "optimizerER", ".", "load_state_dict", "(", "previousWeight", "[", "'optimizerER'", "]", ")", "\n", "self", ".", "optimizerED", ".", "load_state_dict", "(", "previousWeight", "[", "'optimizerED'", "]", ")", "\n", "self", ".", "scheduleLR", "=", "previousWeight", "[", "'schedulerLR'", "]", "\n", "self", ".", "startSteps", "=", "int", "(", "previousWeight", "[", "'step'", "]", ")", "\n", "#print(self.startSteps)", "\n", "\n", "customPrint", "(", "Fore", ".", "YELLOW", "+", "\"Weight loaded successfully\"", ",", "textWidth", "=", "self", ".", "barLen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.timer": [[15, 19], ["divmod", "divmod", "int", "int", "int"], "function", ["None"], ["def", "timer", "(", "start", ",", "end", ")", ":", "\n", "    ", "hours", ",", "rem", "=", "divmod", "(", "end", "-", "start", ",", "3600", ")", "\n", "minutes", ",", "seconds", "=", "divmod", "(", "rem", ",", "60", ")", "\n", "return", "int", "(", "hours", ")", ",", "int", "(", "minutes", ")", ",", "int", "(", "seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.extractFileName": [[20, 28], ["ntpath.basename", "ntpath.split", "ntpath.basename", "tail.split", "ntpath.basename().split", "ntpath.basename"], "function", ["None"], ["", "def", "extractFileName", "(", "path", ",", "withoutExtension", "=", "None", ")", ":", "\n", "    ", "ntpath", ".", "basename", "(", "\"a/b/c\"", ")", "\n", "head", ",", "tail", "=", "ntpath", ".", "split", "(", "path", ")", "\n", "\n", "if", "withoutExtension", ":", "\n", "        ", "return", "tail", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", "or", "ntpath", ".", "basename", "(", "head", ")", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", "\n", "\n", "", "return", "tail", "or", "ntpath", ".", "basename", "(", "head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configCreator": [[32, 95], ["print", "customUtils.formatDirPath", "customUtils.formatDirPath", "customUtils.formatDirPath", "customUtils.formatDirPath", "config.update", "customUtils.configWriter", "customUtils.formatDirPath", "customUtils.formatDirPath", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "input", "print", "input", "print", "input", "input", "input", "input"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configWriter", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath"], ["", "def", "configCreator", "(", "path", "=", "'mainModule/'", ")", ":", "\n", "    ", "config", "=", "{", "}", "\n", "\n", "print", "(", "Fore", ".", "YELLOW", "+", "\"Please configure following hyperparameters:\"", ")", "\n", "\n", "while", "(", "True", ")", ":", "\n", "        ", "gtPath", "=", "formatDirPath", "(", "input", "(", "\"Path of ground gruth samples (i.e., /home/gtDir/): \"", ")", ")", "\n", "if", "not", "gtPath", "==", "\"\"", ":", "\n", "            ", "print", "(", "Fore", ".", "RED", "+", "\"Ground truth path has been set to: \"", ",", "gtPath", ")", "\n", "break", "\n", "\n", "", "", "while", "(", "True", ")", ":", "\n", "        ", "targetPath", "=", "formatDirPath", "(", "input", "(", "\"Path of input images (i.e., /home/tarDir/): \"", ")", ")", "\n", "if", "not", "targetPath", "==", "\"\"", ":", "\n", "            ", "print", "(", "Fore", ".", "RED", "+", "\"Target path has been set to: \"", ",", "targetPath", ")", "\n", "break", "\n", "\n", "", "", "checkpointPath", "=", "formatDirPath", "(", "input", "(", "\"Path to the checkpoint (default: checkpointDir/): \"", ")", "or", "\"checkpointDir/\"", ")", "\n", "logPath", "=", "formatDirPath", "(", "input", "(", "\"Path to the log files (default: logDir/): \"", ")", "or", "\"logDir/\"", ")", "\n", "testImagePath", "=", "formatDirPath", "(", "input", "(", "\"Path to save inference outputs(default: testImageDir/): \"", ")", "or", "\"testImageDir/\"", ")", "\n", "resultDir", "=", "formatDirPath", "(", "input", "(", "\"Path to save inference outputs(default: result/): \"", ")", "or", "\"logDir/\"", ")", "\n", "modelName", "=", "input", "(", "\"Name of model (default: DPBS): \"", ")", "or", "\"DBPS\"", "\n", "dataSamples", "=", "input", "(", "\"Number of samples should be used for training/sampling (default: Undefined): \"", ")", "or", "None", "\n", "interval", "=", "input", "(", "\"Number of steps to update log files (default: 100): \"", ")", "or", "\"100\"", "\n", "batchSize", "=", "input", "(", "\"Batch size for model training (default: 16): \"", ")", "or", "\"16\"", "\n", "barLen", "=", "input", "(", "\"Length of progress bar (default: 64): \"", ")", "or", "\"64\"", "\n", "imageH", "=", "input", "(", "\"Height of input images (default: 256): \"", ")", "or", "\"256\"", "\n", "imageW", "=", "input", "(", "\"Width of input images (default: 256): \"", ")", "or", "\"256\"", "\n", "inputC", "=", "input", "(", "\"Number of input channels (default: 3): \"", ")", "or", "\"3\"", "\n", "outputC", "=", "input", "(", "\"Number of output channels (default: 3): \"", ")", "or", "\"3\"", "\n", "scalingFactor", "=", "input", "(", "\"Scaling factor for binning sensor (default: 4): \"", ")", "or", "\"4\"", "\n", "binnigFactor", "=", "input", "(", "\"Binning factor of image sensor (default: 2): \"", ")", "or", "\"2\"", "\n", "epoch", "=", "input", "(", "\"Number of total epochs (default: 50): \"", ")", "or", "\"50\"", "\n", "learningRate", "=", "input", "(", "\"Learning rate (default: 0.0001): \"", ")", "or", "\"0.0001\"", "\n", "adamBeta1", "=", "input", "(", "\"Value of Adam Beta1 (default: 0.5): \"", ")", "or", "\"0.5\"", "\n", "adamBeta2", "=", "input", "(", "\"Value of Adam Beta2 (default: 0.99): \"", ")", "or", "\"0.99\"", "\n", "\n", "# Updating dictionary", "\n", "config", ".", "update", "(", "{", "\"gtPath\"", ":", "gtPath", ",", "\n", "\"targetPath\"", ":", "targetPath", ",", "\n", "\"checkpointPath\"", ":", "checkpointPath", ",", "\n", "\"testImagePath\"", ":", "testImagePath", ",", "\n", "\"resultDir\"", ":", "resultDir", ",", "\n", "\"logPath\"", ":", "logPath", ",", "\n", "\"modelName\"", ":", "modelName", ",", "\n", "\"dataSamples\"", ":", "dataSamples", ",", "\n", "\"batchSize\"", ":", "batchSize", ",", "\n", "\"barLen\"", ":", "barLen", ",", "\n", "\"interval\"", ":", "interval", ",", "\n", "\"imageH\"", ":", "imageH", ",", "\n", "\"imageW\"", ":", "imageW", ",", "\n", "\"inputC\"", ":", "inputC", ",", "\n", "\"outputC\"", ":", "outputC", ",", "\n", "\"scalingFactor\"", ":", "scalingFactor", ",", "\n", "\"binnigFactor\"", ":", "binnigFactor", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"learningRate\"", ":", "learningRate", ",", "\n", "\"adamBeta1\"", ":", "adamBeta1", ",", "\n", "\"adamBeta2\"", ":", "adamBeta2", "}", ")", "\n", "\n", "# Creating config file", "\n", "configWriter", "(", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.manualUpdateEntity": [[96, 108], ["input", "input", "customUtils.updateConfig", "input"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.updateConfig"], ["", "def", "manualUpdateEntity", "(", ")", ":", "\n", "\n", "    ", "while", "(", "True", ")", ":", "\n", "        ", "entity", "=", "input", "(", "\"Enter name of key: \"", ")", "\n", "value", "=", "input", "(", "\"Enter value for the corresponding key: \"", ")", "\n", "config", "=", "updateConfig", "(", "entity", ",", "value", ")", "\n", "\n", "userInput", "=", "input", "(", "\"Would you like to continue to update the config file? (default: N): \"", ")", "or", "\"N\"", "\n", "if", "userInput", "==", "\"N\"", "or", "userInput", "==", "\"n\"", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.updateConfig": [[109, 131], ["customUtils.configReader", "print", "print", "print", "configReader.items", "input", "customUtils.configWriter", "print", "print"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configReader", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configWriter"], ["", "def", "updateConfig", "(", "entity", ",", "value", ",", "path", "=", "'mainModule/'", ")", ":", "\n", "\n", "    ", "config", "=", "configReader", "(", ")", "\n", "try", ":", "\n", "        ", "if", "config", "[", "entity", "]", "==", "value", ":", "\n", "            ", "print", "(", "\"Noting to update!\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"The value of config entity {} is changing from {} to {}\"", ".", "format", "(", "entity", ",", "config", "[", "entity", "]", ",", "value", ")", ")", "\n", "config", "[", "entity", "]", "=", "value", "\n", "userInput", "=", "input", "(", "\"Do you want to update config.json file? (default: N): \"", ")", "or", "\"N\"", "\n", "if", "userInput", "==", "\"Y\"", "or", "userInput", "==", "\"y\"", ":", "\n", "                ", "configWriter", "(", "config", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"config.json file remainy unchanged!\"", ")", "\n", "\n", "", "", "return", "config", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Incorrect input! Please refer to the following keys:\"", ")", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"Key name:\"", ",", "key", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configReader": [[133, 148], ["open", "json.load", "input", "customUtils.configCreator", "print", "print", "exit"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configCreator"], ["", "", "def", "configReader", "(", "path", "=", "'mainModule/'", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "path", "+", "'config.json'", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "", "except", ":", "\n", "        ", "userInput", "=", "input", "(", "\"Unable to read config.json file! Would you like to create new config file? (default: N): \"", ")", "or", "\"N\"", "\n", "if", "userInput", "==", "\"Y\"", "or", "userInput", "==", "\"y\"", ":", "\n", "            ", "config", "=", "configCreator", "(", ")", "\n", "print", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Process aborted! Please configure config.json file to continue!\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configWriter": [[151, 156], ["print", "open", "json.dump"], "function", ["None"], ["", "def", "configWriter", "(", "config", ",", "path", "=", "'mainModule/'", ")", ":", "\n", "    ", "with", "open", "(", "path", "+", "'config.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "fp", ")", "\n", "", "print", "(", "\"Successfully updated config file!\"", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.createDir": [[157, 161], ["pathlib.Path().mkdir", "pathlib.Path"], "function", ["None"], ["", "def", "createDir", "(", "path", ")", ":", "\n", "# Create a directory to save processed samples", "\n", "    ", "Path", "(", "path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.imageList": [[162, 174], ["imageList.extend", "imageList.extend", "glob.glob", "glob.glob"], "function", ["None"], ["", "def", "imageList", "(", "path", ",", "multiDir", "=", "False", ",", "imageExtension", "=", "[", "'*.jpg'", ",", "'*.png'", ",", "'*.jpeg'", ",", "'*.tif'", ",", "'*.bmp'", "]", ")", ":", "\n", "#types = () # the tuple of file types", "\n", "    ", "imageList", "=", "[", "]", "\n", "for", "ext", "in", "imageExtension", ":", "\n", "\n", "        ", "if", "multiDir", "==", "True", ":", "\n", "            ", "imageList", ".", "extend", "(", "glob", ".", "glob", "(", "path", "+", "\"*/\"", "+", "ext", ")", ")", "\n", "", "else", ":", "\n", "            ", "imageList", ".", "extend", "(", "glob", ".", "glob", "(", "path", "+", "ext", ")", ")", "\n", "\n", "", "imageList", "\n", "", "return", "imageList", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.formatDirPath": [[175, 181], ["path.endswith", "path.rstrip"], "function", ["None"], ["", "def", "formatDirPath", "(", "path", ")", ":", "\n", "\n", "    ", "if", "not", "path", ".", "endswith", "(", "\"/\"", ")", ":", "\n", "        ", "path", "=", "path", ".", "rstrip", "(", ")", "+", "\"/\"", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.removeFiles": [[182, 192], ["os.listdir", "os.path.join", "os.path.isfile", "os.path.islink", "os.unlink", "os.path.isdir", "print", "shutil.rmtree"], "function", ["None"], ["", "def", "removeFiles", "(", "path", ")", ":", "\n", "    ", "for", "filename", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "try", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", "or", "os", ".", "path", ".", "islink", "(", "file_path", ")", ":", "\n", "                ", "os", ".", "unlink", "(", "file_path", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "file_path", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "file_path", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Failed to delete %s. Reason: %s'", "%", "(", "file_path", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configShower": [[194, 200], ["customUtils.configReader", "customPrint", "customPrint"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.configReader", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint"], ["", "", "", "def", "configShower", "(", "textWidth", "=", "64", ")", ":", "\n", "\n", "    ", "config", "=", "configReader", "(", ")", "\n", "customPrint", "(", "Fore", ".", "YELLOW", "+", "\"Hyperparameters and Configurations\"", ",", "textWidth", "=", "textWidth", ")", "\n", "for", "c", "in", "config", ":", "\n", "        ", "customPrint", "(", "\"{}:\"", ".", "format", "(", "c", ")", ".", "upper", "(", ")", "+", "Fore", ".", "YELLOW", "+", "\"{}\"", ".", "format", "(", "config", "[", "c", "]", ")", ",", "textWidth", "=", "textWidth", ",", "style", "=", "'-'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.findLastWeights": [[20, 45], ["glob.glob", "len", "weights.sort", "len", "print", "int", "print", "extractFileName().split", "extractFileName"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName"], ["def", "findLastWeights", "(", "path", ",", "modelName", "=", "None", ",", "lastWeight", "=", "None", ")", ":", "\n", "\n", "# Taking backup of last weights", "\n", "    ", "previousWeights", "=", "glob", ".", "glob", "(", "path", "+", "\"*.pth\"", ")", "\n", "if", "modelName", ":", "\n", "        ", "path", "=", "path", "+", "modelName", "\n", "\n", "", "if", "len", "(", "previousWeights", ")", ">", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "weights", "=", "[", "int", "(", "extractFileName", "(", "p", ",", "True", ")", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "for", "p", "in", "previousWeights", "]", "\n", "weights", ".", "sort", "(", ")", "\n", "lastWeight", "=", "path", "+", "\"_checkpoint_{}.pth\"", ".", "format", "(", "weights", "[", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Multi format checkpoints have been found! However, the checkpoint without epoch flag has been selected arbitarily.\"", ")", "\n", "lastWeight", "=", "path", "+", "\"_checkpoint.pth\"", "\n", "", "", "elif", "len", "(", "previousWeights", ")", "==", "1", ":", "\n", "        ", "lastWeight", "=", "previousWeights", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "print", "(", "\"Checkpoint directory is empty\"", ")", "\n", "\n", "return", "\n", "\n", "", "return", "lastWeight", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.saveCheckpoint": [[47, 76], ["createDir", "torch.save", "torch.save", "createDir", "removeFiles", "len", "str", "glob.glob", "len", "torchUtils.findLastWeights", "shutil.copyfile", "shutil.copyfile", "glob.glob", "extractFileName", "extractFileName"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.customUtils.removeFiles", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.findLastWeights", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName"], ["", "def", "saveCheckpoint", "(", "modelStates", ",", "path", ",", "modelName", "=", "None", ",", "currentEpoch", "=", "None", ",", "backup", "=", "True", ")", ":", "\n", "\n", "    ", "if", "modelName", ":", "\n", "        ", "cpPath", "=", "path", "+", "modelName", "\n", "", "else", ":", "\n", "        ", "cpPath", "=", "path", "\n", "", "createDir", "(", "path", ")", "\n", "\n", "if", "currentEpoch", ":", "\n", "        ", "cpName", "=", "cpPath", "+", "\"_checkpoint_{}.pth\"", ".", "format", "(", "str", "(", "currentEpoch", ")", ")", "\n", "", "else", ":", "\n", "        ", "cpName", "=", "cpPath", "+", "\"_checkpoint.pth\"", "\n", "\n", "\n", "", "if", "backup", ":", "\n", "# Taking backup of last weight", "\n", "        ", "backupPath", "=", "path", "+", "\"/backup/\"", "\n", "createDir", "(", "backupPath", ")", "\n", "removeFiles", "(", "backupPath", ")", "\n", "\n", "if", "(", "len", "(", "glob", ".", "glob", "(", "path", "+", "\"*.pth\"", ")", ")", "<", "1", ")", ":", "\n", "            ", "pass", "\n", "", "elif", "(", "len", "(", "glob", ".", "glob", "(", "path", "+", "\"*.pth\"", ")", ")", ">", "1", ")", ":", "\n", "            ", "lastWeight", "=", "findLastWeights", "(", "path", ",", "modelName", ")", "\n", "copyfile", "(", "lastWeight", ",", "backupPath", "+", "extractFileName", "(", "lastWeight", ")", ")", "\n", "", "else", ":", "\n", "            ", "copyfile", "(", "cpName", ",", "backupPath", "+", "extractFileName", "(", "cpName", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "modelStates", ",", "cpName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.loadCheckpoints": [[79, 95], ["torch.device", "torch.device", "torch.load", "torch.load", "torchUtils.findLastWeights"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.findLastWeights"], ["", "def", "loadCheckpoints", "(", "path", ",", "modelName", ",", "epoch", "=", "False", ",", "lastWeights", "=", "True", ",", "cpu", "=", "False", ")", ":", "\n", "# Checking wights saving format", "\n", "    ", "if", "lastWeights", "==", "True", ":", "\n", "        ", "cpPath", "=", "findLastWeights", "(", "path", ",", "modelName", ")", "\n", "", "else", ":", "\n", "        ", "cpPath", "=", "path", "+", "modelName", "\n", "\n", "# Loading checkpoint", "\n", "\n", "#if cpu == True:", "\n", "", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cpPath", ",", "map_location", "=", "device", ")", "\n", "#print(cpu)", "\n", "#else:", "\n", "#    checkpoint = torch.load(cpPath)", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.loadCheckpointsGAN": [[96, 114], ["torch.load", "torch.load", "generator.load_state_dict", "discriminator.load_state_dict", "optimizerG.load_state_dict", "optimizerD.load_state_dict", "print", "torchUtils.findLastWeights"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.findLastWeights"], ["", "def", "loadCheckpointsGAN", "(", "generator", ",", "discriminator", ",", "optimizerG", ",", "optimizerD", ",", "path", ",", "modelName", ",", "epoch", "=", "False", ",", "lastWeights", "=", "True", ")", ":", "\n", "\n", "# Checking wights saving format", "\n", "    ", "if", "lastWeights", "==", "True", ":", "\n", "        ", "cpPath", "=", "findLastWeights", "(", "path", ",", "modelName", ")", "\n", "", "else", ":", "\n", "        ", "cpPath", "=", "path", "+", "modelName", "\n", "\n", "# Loading checkpoint", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "cpPath", ")", "\n", "generator", ".", "load_state_dict", "(", "checkpoint", "[", "'stateDictG'", "]", ")", "\n", "discriminator", ".", "load_state_dict", "(", "checkpoint", "[", "'stateDictD'", "]", ")", "\n", "optimizerG", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizerG'", "]", ")", "\n", "optimizerD", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizerD'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "print", "(", "\"Previous weights loaded successfully!\"", ")", "\n", "\n", "return", "generator", ",", "discriminator", ",", "optimizerG", ",", "optimizerD", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.show_img": [[117, 125], ["matplotlib.figure", "img.numpy", "numpy.clip", "matplotlib.imshow", "matplotlib.show", "numpy.transpose"], "function", ["None"], ["", "def", "show_img", "(", "img", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "18", ",", "15", ")", ")", "\n", "# unnormalize", "\n", "img", "=", "img", "/", "2", "+", "0.5", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "npimg", "=", "np", ".", "clip", "(", "npimg", ",", "0.", ",", "1.", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.tbLogWritter2": [[126, 140], ["createDir", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_image", "torch.utils.tensorboard.SummaryWriter.add_graph", "torch.utils.tensorboard.SummaryWriter.close", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir"], ["", "def", "tbLogWritter2", "(", "model", ",", "loss", ",", "currentSteps", ",", "epoch", ",", "inputImage", ",", "outputImage", ",", "gtImage", ",", "path", ")", ":", "\n", "\n", "    ", "createDir", "(", "path", ")", "\n", "# Defining summary writter", "\n", "writer", "=", "SummaryWriter", "(", "path", "+", "'epoch_{}'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# Writiting images to the tensorboard", "\n", "writer", ".", "add_scalar", "(", "'Training Loss'", ",", "loss", ",", "currentSteps", ")", "\n", "writer", ".", "add_image", "(", "'Input images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "inputImage", ")", ")", "\n", "writer", ".", "add_image", "(", "'Output images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "outputImage", ")", ")", "\n", "writer", ".", "add_image", "(", "'GT images'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "gtImage", ")", ")", "\n", "writer", ".", "add_graph", "(", "model", ",", "inputImage", ")", "\n", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.tbLogWritter": [[141, 160], ["createDir", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter.close", "torch.utils.tensorboard.SummaryWriter.add_image", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_graph"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir"], ["", "def", "tbLogWritter", "(", "summaryInfo", ")", ":", "\n", "\n", "    ", "createDir", "(", "summaryInfo", "[", "'Path'", "]", ")", "\n", "writer", "=", "SummaryWriter", "(", "summaryInfo", "[", "'Path'", "]", "+", "'epoch_{}'", ".", "format", "(", "summaryInfo", "[", "'Epoch'", "]", ")", ")", "\n", "\n", "# Defining summary writter", "\n", "for", "k", "in", "summaryInfo", ":", "\n", "#print (k)", "\n", "        ", "if", "'Image'", "in", "k", ":", "\n", "            ", "writer", ".", "add_image", "(", "k", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "summaryInfo", "[", "k", "]", ")", ",", "summaryInfo", "[", "'Step'", "]", ")", "\n", "\n", "", "elif", "'Loss'", "in", "k", ":", "\n", "#print(k)", "\n", "            ", "writer", ".", "add_scalar", "(", "k", ",", "summaryInfo", "[", "k", "]", ")", "\n", "\n", "", "elif", "'Model'", "in", "k", ":", "\n", "            ", "writer", ".", "add_graph", "(", "summaryInfo", "[", "k", "]", ",", "summaryInfo", "[", "'Input Image'", "]", ")", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.inputForInference": [[161, 185], ["PIL.Image.open", "numpy.asarray", "quadBayerSampler", "PIL.Image.fromarray", "torchvision.Compose", "transforms.Compose.unsqueeze", "save_image", "un", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomApply", "transforms.Compose.", "AddGaussianNoise"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.dataTools.sampler.quadBayerSampler"], ["", "def", "inputForInference", "(", "path", ",", "imgW", "=", "256", ",", "imgH", "=", "256", ",", "gridSize", "=", "4", ")", ":", "\n", "\n", "    ", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "#img = img.resize((2048,1280))", "\n", "#print (path)", "\n", "#img = quadBayerSampler(img)", "\n", "#if imgH and imgW:", "\n", "#    img = cv2.resize(img,(imgW,imgH))", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img", "=", "quadBayerSampler", "(", "img", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "transformHRGT", "=", "transforms", ".", "Compose", "(", "[", "\n", "#transforms.Resize((256,256), interpolation=Image.BICUBIC),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "normMean", ",", "normStd", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "AddGaussianNoise", "(", "0.", ",", ".1", ")", "]", ",", "p", "=", "1", ")", "\n", "]", ")", "\n", "\n", "imgTest", "=", "transformHRGT", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "#print (imgTest.max(), imgTest.min())", "\n", "save_image", "(", "un", "(", "imgTest", ")", ",", "\"\u00cdnputImage.png\"", ")", "\n", "\n", "return", "imgTest", "#* 255", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.torchUtils.saveModelOutput": [[187, 202], ["createDir", "save_image", "un", "extractFileName"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName"], ["", "def", "saveModelOutput", "(", "output", ",", "path", ",", "fileName", ",", "ext", "=", "\".png\"", ")", ":", "\n", "\n", "    ", "createDir", "(", "path", ")", "\n", "\n", "imageSavingPath", "=", "path", "+", "extractFileName", "(", "fileName", ",", "True", ")", "+", "\"_ANET\"", "+", "ext", "\n", "#output = un(output) ", "\n", "#outputImg = output.reshape(output.shape[2],output.shape[3],3).squeeze(0).cpu().numpy()", "\n", "#print (outputImg.shape, type(outputImg))", "\n", "'''finalImage = output[0].reshape(output.shape[2],output.shape[3],3) #* 255\n    finalImage = finalImage.cpu().numpy()\n    print(finalImage.shape, finalImage.max(), finalImage.min())\n    #print (finalImage)\n    cv2.imwrite(  imageSavingPath, finalImage )\n    #finalImage.save(path + 'pilsave.png')'''", "\n", "save_image", "(", "un", "(", "output", "[", "0", "]", ")", ",", "imageSavingPath", ")", "\n", "#print(\"Image seccessfully saved!\")", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.printProgressBar": [[1, 21], ["int", "print", "print", "float", "str"], "function", ["None"], ["def", "printProgressBar", "(", "iteration", ",", "total", ",", "prefix", "=", "''", ",", "suffix", "=", "''", ",", "decimals", "=", "1", ",", "length", "=", "100", ",", "fill", "=", "'\u2588'", ",", "printEnd", "=", "\"\\r\"", ")", ":", "\n", "    ", "\"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        length      - Optional  : character length of bar (Int)\n        fill        - Optional  : bar fill character (Str)\n        printEnd    - Optional  : end character (e.g. \"\\r\", \"\\r\\n\") (Str)\n    \"\"\"", "\n", "percent", "=", "(", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", ")", ".", "format", "(", "100", "*", "(", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "filledLength", "=", "int", "(", "length", "*", "iteration", "//", "total", ")", "\n", "bar", "=", "fill", "*", "filledLength", "+", "'-'", "*", "(", "length", "-", "filledLength", ")", "\n", "print", "(", "'\\r%s |%s| %s%% %s'", "%", "(", "prefix", ",", "bar", ",", "percent", ",", "suffix", ")", ",", "end", "=", "printEnd", ")", "\n", "# Print New Line on Complete", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.aestheticUtils.customPrint": [[22, 30], ["print", "print", "print"], "function", ["None"], ["", "", "def", "customPrint", "(", "strPrint", ",", "textWidth", "=", "64", ",", "style", "=", "'*'", ",", "topBorder", "=", "True", ",", "bottomBorder", "=", "True", ")", ":", "\n", "    ", "if", "topBorder", "==", "True", ":", "\n", "        ", "print", "(", "style", "*", "textWidth", ")", "\n", "\n", "", "print", "(", "'{:^{width}}'", ".", "format", "(", "strPrint", ",", "width", "=", "textWidth", ")", ")", "\n", "\n", "if", "bottomBorder", "==", "True", ":", "\n", "        ", "print", "(", "style", "*", "textWidth", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.parserUtils.mainParser": [[4, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.error", "argparse.ArgumentParser.error"], "function", ["None"], ["def", "mainParser", "(", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", ")", ":", "\n", "\n", "# Parser definition", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Parses command.\"", ")", "\n", "\n", "# Parser Options", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--conf\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Create/update config file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ts\"", ",", "\"--train\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Start training with default parameters\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-tr\"", ",", "\"--retrain\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Resume training with pretrained weights\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-to\"", ",", "\"--overFitTest\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Over fitting testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-e\"", ",", "\"--epoch\"", ",", "type", "=", "int", ",", "help", "=", "\"Set number of epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-b\"", ",", "\"--batch\"", ",", "type", "=", "int", ",", "help", "=", "\"Set batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-i\"", ",", "\"--inference\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Inference with pretrained weights\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "\"--sourceDir\"", ",", "help", "=", "\"Directory to fetch images for testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-d\"", ",", "\"--resultDir\"", ",", "help", "=", "\"Directory to save inference outputs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-u\"", ",", "\"--manualUpdate\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Manually update the configuration (entity)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ms\"", ",", "\"--modelSummary\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Show the summary of models and configurations\"", ")", "\n", "\n", "options", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "#if options.inference and (options.sourceDir is None ):", "\n", "#    parser.error(\"--inference requires sourceDir \")", "\n", "\n", "if", "options", ".", "epoch", "and", "(", "not", "(", "options", ".", "train", "==", "True", "or", "options", ".", "retrain", "==", "True", ")", ")", ":", "\n", "        ", "parser", ".", "error", "(", "\"--please enable training (-t) or retraining (-r) flag prior to update the number of epoch(s)\"", ")", "\n", "\n", "", "if", "options", ".", "batch", "and", "(", "not", "(", "options", ".", "train", "==", "True", "or", "options", ".", "retrain", "==", "True", ")", ")", ":", "\n", "        ", "parser", ".", "error", "(", "\"--please enable training (-t) or retraining (-r) flag prior to set batch size\"", ")", "\n", "\n", "\n", "\n", "", "return", "options", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.AddGaussianNoise.__init__": [[39, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "noiseLevel", ")", ":", "\n", "        ", "self", ".", "var", "=", "0.1", "\n", "self", ".", "mean", "=", "0.0", "\n", "self", ".", "noiseLevel", "=", "noiseLevel", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.AddGaussianNoise.__call__": [[44, 48], ["torch.randn().uniform_", "torch.randn().uniform_", "torch.randn().uniform_", "torch.randn().uniform_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "tensor.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "sigma", "=", "self", ".", "noiseLevel", "/", "255", "\n", "noisyTensor", "=", "tensor", "+", "torch", ".", "randn", "(", "tensor", ".", "size", "(", ")", ")", ".", "uniform_", "(", "0", ",", "1.", ")", "*", "sigma", "+", "self", ".", "mean", "\n", "return", "noisyTensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.AddGaussianNoise.__repr__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(mean={0}, std={1})'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.__init__": [[54, 61], ["UnNormalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputRootDir", ",", "outputRootDir", ",", "modelName", ",", "resize", "=", "None", ",", "validation", "=", "None", ")", ":", "\n", "        ", "self", ".", "inputRootDir", "=", "inputRootDir", "\n", "self", ".", "outputRootDir", "=", "outputRootDir", "\n", "self", ".", "modelName", "=", "modelName", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "validation", "=", "validation", "\n", "self", ".", "unNormalize", "=", "UnNormalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.inputForInference": [[64, 93], ["imgL.astype.astype.astype", "numpy.concatenate().astype", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose.unsqueeze", "torchvision.Compose.unsqueeze", "cv2.cvtColor", "cv2.cvtColor", "cv2.imread", "cv2.imread", "numpy.concatenate", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Compose.", "torchvision.Compose."], "methods", ["None"], ["", "def", "inputForInference", "(", "self", ",", "imagePath", ",", "noiseLevel", ")", ":", "\n", "\n", "\n", "#print(imagePath, imagePath.replace(\"_l\", \"_r\"))", "\n", "        ", "imgL", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "imagePath", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "255.0", "\n", "imgL", "=", "imgL", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "lumImg", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "imagePath", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ",", "cv2", ".", "COLOR_BGR2LAB", ")", "/", "255.0", "\n", "lumImg", "=", "lumImg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "lumImg", "=", "np", ".", "concatenate", "(", "(", "lumImg", ",", "lumImg", ",", "lumImg", ")", ",", "axis", "=", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#print(lumImg.shape)", "\n", "#print(type(imgL), imagePath)", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "#transforms.Resize((512, 512)), ", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize(normMean, normStd),", "\n", "]", ")", "\n", "transformD", "=", "transforms", ".", "Compose", "(", "[", "#transforms.Resize((512, 512)),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize(normMean, normStd),", "\n", "]", ")", "\n", "\n", "testImgL", "=", "transform", "(", "imgL", ")", ".", "unsqueeze", "(", "0", ")", "\n", "testLumL", "=", "transform", "(", "lumImg", ")", ".", "unsqueeze", "(", "0", ")", "\n", "#testImgLD = transformD(imgLD).unsqueeze(0)", "\n", "#testImgR = transform(imgR).unsqueeze(0)", "\n", "#testImgRD = transformD(imgRD).unsqueeze(0)", "\n", "#print(\"input\",imagePath,self.unNormalize(testImg).max(), self.unNormalize(testImg).min())", "\n", "return", "testImgL", ",", "testLumL", "#, testImgLD, testImgR, testImgRD", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.saveModelOutput": [[95, 111], ["inputImagePath.split", "save_image", "modelOutput.squeeze().cpu().numpy", "numpy.transpose", "inferenceUtils.imwrite_uint16_png", "str", "extractFileName", "modelOutput.squeeze().cpu", "extractFileName().split", "extractFileName().split", "extractFileName", "modelOutput.squeeze", "extractFileName", "extractFileName"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imwrite_uint16_png", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName"], ["", "def", "saveModelOutput", "(", "self", ",", "modelOutput", ",", "inputImagePath", ",", "step", "=", "None", ",", "ext", "=", "\".png\"", ")", ":", "\n", "        ", "datasetName", "=", "inputImagePath", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "if", "step", ":", "\n", "\n", "\n", "            ", "imageSavingPath", "=", "self", ".", "outputRootDir", "+", "self", ".", "modelName", "+", "\"/\"", "+", "datasetName", "+", "\"/\"", "+", "extractFileName", "(", "inputImagePath", ",", "True", ")", "+", "\"_\"", "+", "str", "(", "step", ")", "+", "ext", "\n", "save_image", "(", "modelOutput", "[", "0", "]", ",", "imageSavingPath", ")", "\n", "\n", "", "else", ":", "\n", "            ", "imageSavingPath", "=", "self", ".", "outputRootDir", "+", "self", ".", "modelName", "+", "\"/\"", "+", "datasetName", "+", "\"/\"", "+", "extractFileName", "(", "inputImagePath", ",", "True", ")", "+", "ext", "\n", "imageSavingPath16bit", "=", "self", ".", "outputRootDir", "+", "self", ".", "modelName", "+", "\"/\"", "+", "datasetName", "+", "\"/\"", "+", "extractFileName", "(", "inputImagePath", ",", "True", ")", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "+", "ext", "\n", "alignRationPath", "=", "self", ".", "outputRootDir", "+", "self", ".", "modelName", "+", "\"/\"", "+", "datasetName", "+", "\"/\"", "+", "extractFileName", "(", "inputImagePath", ",", "True", ")", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "+", "'_alignratio.npy'", "\n", "imgSq", "=", "modelOutput", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "imgReshape", "=", "np", ".", "transpose", "(", "imgSq", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "imwrite_uint16_png", "(", "imageSavingPath16bit", ",", "imgReshape", ",", "alignRationPath", ")", "\n", "#save_image(modelOutput[0], imageSavingPath)", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.inference.testingSetProcessor": [[119, 135], ["glob.glob", "createDir", "imageList", "t.split"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList"], ["", "", "def", "testingSetProcessor", "(", "self", ")", ":", "\n", "        ", "testSets", "=", "glob", ".", "glob", "(", "self", ".", "inputRootDir", "+", "\"*/\"", ")", "\n", "#print (\"DirPath\",self.inputRootDir+\"*/\")", "\n", "if", "self", ".", "validation", ":", "\n", "#print(self.validation)", "\n", "            ", "testSets", "=", "testSets", "[", ":", "1", "]", "\n", "#print (testSets)", "\n", "", "testImageList", "=", "[", "]", "\n", "for", "t", "in", "testSets", ":", "\n", "            ", "testSetName", "=", "t", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "#print(\"Dir Path\",self.outputRootDir + self.modelName  + \"/\" + testSetName )", "\n", "createDir", "(", "self", ".", "outputRootDir", "+", "self", ".", "modelName", "+", "\"/\"", "+", "testSetName", ")", "\n", "imgInTargetDir", "=", "imageList", "(", "t", ",", "False", ")", "\n", "testImageList", "+=", "imgInTargetDir", "\n", "\n", "", "return", "testImageList", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.torchTensorToNumpy": [[18, 21], ["image.cpu().detach().numpy", "image.cpu().detach", "image.cpu"], "function", ["None"], ["def", "torchTensorToNumpy", "(", "image", ")", ":", "\n", "        ", "imageNP", "=", "image", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "#.reshape(image.shape[1], image.shape[2], image.shape[0])", "\n", "return", "imageNP", "\n", "", "def", "imwrite_uint16_png", "(", "image_path", ",", "image", ",", "alignratio_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.utilities.inferenceUtils.imwrite_uint16_png": [[21, 38], ["numpy.save", "numpy.round().astype", "cv2.imwrite", "image.max", "cv2.cvtColor", "numpy.round"], "function", ["None"], ["", "def", "imwrite_uint16_png", "(", "image_path", ",", "image", ",", "alignratio_path", ")", ":", "\n", "    ", "\"\"\" This function writes the hdr image as a uint16 png and stores its related align_ratio value in the specified paths.\n\n        Args:\n            image_path (str): Write path to the uint16 png image (needs to finish in .png, e.g. 0000.png)\n            image (np.ndarray): HDR image in float format.\n            alignratio_path (str): Write path to the align_ratio value (needs to finish in .npy, e.g. 0000_alignratio.npy)\n\n        Returns:\n            np.ndarray (np.float32, (h,w,3)): Returns the RGB HDR image specified in image_path.\n\n    \"\"\"", "\n", "align_ratio", "=", "(", "2", "**", "16", "-", "1", ")", "/", "image", ".", "max", "(", ")", "\n", "np", ".", "save", "(", "alignratio_path", ",", "align_ratio", ")", "\n", "uint16_image_gt", "=", "np", ".", "round", "(", "image", "*", "align_ratio", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "cv2", ".", "imwrite", "(", "image_path", ",", "cv2", ".", "cvtColor", "(", "uint16_image_gt", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "return", "None", "\n", "", "class", "AddGaussianNoise", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.percetualLoss.regularizedFeatureLoss.__init__": [[8, 14], ["torch.Module.__init__", "torchvision.models.vgg19", "torchvision.models.vgg19", "torch.Sequential", "torch.Sequential", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "list", "torchvision.models.vgg19.features.children", "torchvision.models.vgg19.features.children"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "percepRegulator", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "regularizedFeatureLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg19_model", "=", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg19_model", ".", "features", ".", "children", "(", ")", ")", "[", ":", "35", "]", ")", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "percepRegulator", "=", "percepRegulator", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.percetualLoss.regularizedFeatureLoss.forward": [[16, 32], ["percetualLoss.regularizedFeatureLoss.feature_extractor", "percetualLoss.regularizedFeatureLoss.feature_extractor", "x.size", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "percetualLoss.regularizedFeatureLoss.loss", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "# VGG Feature Loss", "\n", "        ", "genFeature", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "gtFeature", "=", "self", ".", "feature_extractor", "(", "y", ")", "\n", "featureLoss", "=", "self", ".", "loss", "(", "genFeature", ",", "gtFeature", ")", "*", "self", ".", "percepRegulator", "\n", "\n", "# TV loss", "\n", "size", "=", "x", ".", "size", "(", ")", "\n", "h_tv_diff", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "y", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", ")", ".", "sum", "(", ")", "\n", "w_tv_diff", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "(", "y", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "y", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", ")", ".", "sum", "(", ")", "\n", "tvloss", "=", "(", "h_tv_diff", "+", "w_tv_diff", ")", "/", "size", "[", "0", "]", "/", "size", "[", "1", "]", "/", "size", "[", "2", "]", "/", "size", "[", "3", "]", "\n", "\n", "# Total Loss", "\n", "totalLoss", "=", "tvloss", "*", "featureLoss", "\n", "return", "totalLoss", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.Charbonnier_loss.__init__": [[21, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "Charbonnier_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "epsilon", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.Charbonnier_loss.forward": [[25, 30], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# batchsize = X.data.shape[0]", "\n", "        ", "diff", "=", "X", "-", "Y", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "diff", "**", "2", "+", "self", ".", "eps", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.L1_TVLoss.__init__": [[33, 35], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "TVLoss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "L1_TVLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.L1_TVLoss.forward": [[36, 41], ["torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "x.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_tv", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", ".", "sum", "(", ")", "\n", "w_tv", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", ".", "sum", "(", ")", "\n", "return", "h_tv", "+", "w_tv", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.L1_TVLoss_Charbonnier.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "TVLoss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "L1_TVLoss_Charbonnier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "e", "=", "0.000001", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.L1_TVLoss_Charbonnier.forward": [[47, 54], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_tv", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "h_tv", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "h_tv", "**", "2", "+", "self", ".", "e", ")", ")", "\n", "w_tv", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", "\n", "w_tv", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "w_tv", "**", "2", "+", "self", ".", "e", ")", ")", "\n", "return", "h_tv", "+", "w_tv", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.TV_L1LOSS.__init__": [[56, 58], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "TVLoss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "TV_L1LOSS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.TV_L1LOSS.forward": [[59, 64], ["x.size", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "\n", "h_tv_diff", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "y", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", ")", ".", "sum", "(", ")", "\n", "w_tv_diff", "=", "torch", ".", "abs", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "(", "y", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "y", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", ")", ".", "sum", "(", ")", "\n", "return", "(", "h_tv_diff", "+", "w_tv_diff", ")", "/", "size", "[", "0", "]", "/", "size", "[", "1", "]", "/", "size", "[", "2", "]", "/", "size", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.MSEloss.__init__": [[68, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-3", ")", ":", "\n", "        ", "super", "(", "MSEloss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "epsilon", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.MSEloss.forward": [[72, 78], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "diff", "=", "torch", ".", "add", "(", "X", ",", "-", "Y", ")", "\n", "sum_square_err", "=", "torch", ".", "sum", "(", "diff", "*", "diff", ")", "\n", "loss", "=", "sum_square_err", "/", "X", ".", "data", ".", "shape", "[", "0", "]", "/", "2.", "\n", "# loss = torch.sum(error)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.Perceptual_loss.__init__": [[81, 109], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "list", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torchvision.models.vgg19", "isinstance", "isinstance", "isinstance", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "content_layer", ")", ":", "\n", "        ", "super", "(", "Perceptual_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "i", "=", "1", "\n", "j", "=", "1", "\n", "temp", "=", "list", "(", "vgg", ")", "\n", "for", "layer", "in", "list", "(", "vgg", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "name", "=", "\"conv_\"", "+", "str", "(", "i", ")", "\n", "model", ".", "add_module", "(", "name", ",", "layer", ")", "\n", "if", "name", "==", "content_layer", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "name", "=", "\"relu_\"", "+", "str", "(", "i", ")", "\n", "model", ".", "add_module", "(", "name", ",", "layer", ")", "\n", "if", "name", "==", "content_layer", ":", "\n", "                    ", "break", "\n", "", "i", "+=", "1", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "                ", "name", "=", "\"pool_\"", "+", "str", "(", "j", ")", "\n", "model", ".", "add_module", "(", "name", ",", "layer", ")", "\n", "j", "+=", "1", "\n", "\n", "", "", "self", ".", "model", "=", "model", "\n", "self", ".", "criteria", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.Perceptual_loss.forward": [[110, 116], ["loss.Perceptual_loss.model", "loss.Perceptual_loss.model", "loss.Perceptual_loss.size", "loss.Perceptual_loss.size", "loss.Perceptual_loss.size", "loss.Perceptual_loss.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "X_content", "=", "self", ".", "model", "(", "X", ")", "\n", "Y_content", "=", "self", ".", "model", "(", "Y", ")", "\n", "loss", "=", "(", "(", "X_content", "-", "Y_content", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "loss", "/=", "(", "X_content", ".", "size", "(", ")", "[", "0", "]", "*", "X_content", ".", "size", "(", ")", "[", "1", "]", "*", "X_content", ".", "size", "(", ")", "[", "2", "]", "*", "X_content", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.__init__": [[365, 387], ["torch.Module.__init__", "torchvision.models.vgg19", "torchvision.models.vgg19.load_state_dict", "int", "loss.VGGLoss.vgg.append", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Exception", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "torchvision.models.vgg19.features.children"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["def", "__init__", "(", "self", ",", "vgg_path", ",", "layers", "=", "'45'", ",", "input", "=", "'RGB'", ",", "loss", "=", "'l1'", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input", "=", "input", "\n", "vgg", "=", "models", ".", "vgg19", "(", "pretrained", "=", "False", ")", "\n", "if", "vgg_path", "is", "not", "''", ":", "\n", "            ", "vgg", ".", "load_state_dict", "(", "torch", ".", "load", "(", "vgg_path", ")", ")", "\n", "# vgg.load_state_dict(torch.load('../../../'+vgg_path))", "\n", "", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "layers_dict", "=", "[", "0", ",", "4", ",", "9", ",", "18", ",", "27", ",", "36", "]", "\n", "self", ".", "vgg", "=", "[", "]", "\n", "if", "loss", "==", "'l1'", ":", "\n", "            ", "self", ".", "loss_func", "=", "l1_loss", "\n", "# pytorch 0.4 l1_loss malfunction", "\n", "", "elif", "loss", "==", "'l2'", ":", "\n", "            ", "self", ".", "loss_func", "=", "nn", ".", "functional", ".", "mse_loss", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Do not support this loss.'", ")", "\n", "\n", "", "i", "=", "0", "\n", "for", "j", "in", "self", ".", "layers", ":", "\n", "            ", "self", ".", "vgg", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", "[", "layers_dict", "[", "i", "]", ":", "layers_dict", "[", "j", "]", "]", ")", ")", "\n", "i", "=", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda": [[388, 391], ["Seq.cuda"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda"], ["", "", "def", "cuda", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "for", "Seq", "in", "self", ".", "vgg", ":", "\n", "            ", "Seq", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.forward": [[392, 416], ["range", "sum", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input_list.append", "target_list.append", "len", "loss.append", "Sequential", "Sequential", "loss.VGGLoss.loss_func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "input", "==", "'RGB'", ":", "\n", "            ", "input_R", ",", "input_G", ",", "input_B", "=", "torch", ".", "split", "(", "input", ",", "1", ",", "dim", "=", "1", ")", "\n", "target_R", ",", "target_G", ",", "target_B", "=", "torch", ".", "split", "(", "target", ",", "1", ",", "dim", "=", "1", ")", "\n", "input_BGR", "=", "torch", ".", "cat", "(", "[", "input_B", ",", "input_G", ",", "input_R", "]", ",", "dim", "=", "1", ")", "\n", "target_BGR", "=", "torch", ".", "cat", "(", "[", "target_B", ",", "target_G", ",", "target_R", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_BGR", "=", "input", "\n", "target_BGR", "=", "target", "\n", "\n", "# pdb.set_trace()", "\n", "", "input_list", "=", "[", "input_BGR", "]", "\n", "target_list", "=", "[", "target_BGR", "]", "\n", "\n", "for", "Sequential", "in", "self", ".", "vgg", ":", "\n", "            ", "input_list", ".", "append", "(", "Sequential", "(", "input_list", "[", "-", "1", "]", ")", ")", "\n", "target_list", ".", "append", "(", "Sequential", "(", "target_list", "[", "-", "1", "]", ")", ")", "\n", "\n", "# pdb.set_trace()        ", "\n", "", "loss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "            ", "loss", ".", "append", "(", "self", ".", "loss_func", "(", "input_list", "[", "i", "+", "1", "]", ",", "target_list", "[", "i", "+", "1", "]", ")", ")", "\n", "# pdb.set_trace()  ", "\n", "", "return", "sum", "(", "loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.euclideanLoss": [[118, 122], ["mse_loss"], "function", ["None"], ["", "", "def", "euclideanLoss", "(", "output", ",", "label", ",", "input_size", ")", ":", "\n", "    ", "mse", "=", "mse_loss", "(", "output", ",", "label", ")", "\n", "mse", "=", "mse", "*", "(", "(", "input_size", ")", "/", "2.", ")", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.euclideanLoss2": [[123, 126], ["loss.MSEloss"], "function", ["None"], ["", "def", "euclideanLoss2", "(", "output", ",", "label", ")", ":", "\n", "    ", "mse", "=", "MSEloss", "(", ")", "(", "output", ",", "label", ")", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.L1NormLoss": [[127, 131], ["loss.l1_loss"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.l1_loss"], ["", "def", "L1NormLoss", "(", "output", ",", "label", ",", "input_size", ")", ":", "\n", "    ", "l1norm", "=", "l1_loss", "(", "output", ",", "label", ")", "\n", "l1norm", "=", "l1norm", "*", "(", "(", "input_size", ")", "/", "2.", ")", "\n", "return", "l1norm", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.C_Loss": [[132, 135], ["loss.Charbonnier_loss", "Charbonnier_loss."], "function", ["None"], ["", "def", "C_Loss", "(", "output", ",", "label", ")", ":", "\n", "    ", "c_loss_func", "=", "Charbonnier_loss", "(", "epsilon", "=", "1e-3", ")", "\n", "return", "c_loss_func", "(", "output", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.TVLoss": [[136, 140], ["loss.L1_TVLoss", "output.size", "L1_TVLoss."], "function", ["None"], ["", "def", "TVLoss", "(", "output", ")", ":", "\n", "    ", "l1_tvloss", "=", "L1_TVLoss", "(", ")", "\n", "size", "=", "output", ".", "size", "(", ")", "\n", "return", "l1_tvloss", "(", "output", ")", "/", "size", "[", "0", "]", "/", "size", "[", "1", "]", "/", "size", "[", "2", "]", "/", "size", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.TVLoss_Charbonnier": [[141, 144], ["loss.L1_TVLoss_Charbonnier", "L1_TVLoss_Charbonnier."], "function", ["None"], ["", "def", "TVLoss_Charbonnier", "(", "output", ")", ":", "\n", "    ", "l1_tvloss", "=", "L1_TVLoss_Charbonnier", "(", ")", "\n", "return", "l1_tvloss", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.TV_l1loss": [[145, 148], ["loss.TV_L1LOSS", "TV_L1LOSS."], "function", ["None"], ["", "def", "TV_l1loss", "(", "output", ",", "label", ")", ":", "\n", "    ", "tv_l1loss", "=", "TV_L1LOSS", "(", ")", "\n", "return", "tv_l1loss", "(", "output", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.perception_loss_filter": [[150, 161], ["loss_network2", "loss_network2", "loss_network3", "loss_network3", "mse_loss", "mse_loss"], "function", ["None"], ["", "def", "perception_loss_filter", "(", "output", ",", "label", ",", "var_bound", ",", "loss_network2", ",", "loss_network3", ")", ":", "\n", "    ", "output_network2", "=", "loss_network2", "(", "output", ")", "\n", "label_network2", "=", "loss_network2", "(", "label", ")", "\n", "output_network3", "=", "loss_network3", "(", "output_network2", ")", "\n", "label_network3", "=", "loss_network3", "(", "label_network2", ")", "\n", "\n", "perception2", "=", "mse_loss", "(", "output_network2", ",", "label_network2", ")", "\n", "perception3", "=", "mse_loss", "(", "output_network3", ",", "label_network3", ")", "\n", "\n", "out_loss", "=", "perception2", "+", "2", "*", "perception3", "\n", "return", "out_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.invert_preproc": [[163, 170], ["loss.sRGBforward"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.sRGBforward"], ["", "def", "invert_preproc", "(", "imgs", ",", "white_level", ")", ":", "\n", "# return sRGBforward(torch.transpose(imgs) / white_level)", "\n", "# print torch.min(white_level)", "\n", "\t", "a", "=", "sRGBforward", "(", "imgs", "/", "white_level", ")", "\n", "# print 'bala:', a.shape", "\n", "# print a", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.sRGBforward": [[171, 184], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "gammafn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda"], ["", "def", "sRGBforward", "(", "x", ")", ":", "\n", "\t", "b", "=", "torch", ".", "Tensor", "(", "[", ".0031308", "]", ")", ".", "cuda", "(", ")", "\n", "gamma", "=", "1.", "/", "2.4", "\n", "a", "=", "1.", "/", "(", "1.", "/", "(", "b", "**", "gamma", "*", "(", "1.", "-", "gamma", ")", ")", "-", "1.", ")", "\n", "k0", "=", "(", "1", "+", "a", ")", "*", "gamma", "*", "b", "**", "(", "gamma", "-", "1.", ")", "\n", "gammafn", "=", "lambda", "x", ":", "(", "1", "+", "a", ")", "*", "torch", ".", "pow", "(", "torch", ".", "max", "(", "x", ",", "b", ")", ",", "gamma", ")", "-", "a", "\n", "\n", "srgb", "=", "torch", ".", "where", "(", "x", "<", "b", ",", "k0", "*", "x", ",", "gammafn", "(", "x", ")", ")", "\n", "\n", "k1", "=", "(", "1", "+", "a", ")", "*", "gamma", "\n", "srgb", "=", "torch", ".", "where", "(", "x", ">", "1", ",", "k1", "*", "x", "-", "k1", "+", "1", ",", "srgb", ")", "\n", "\n", "return", "srgb", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gradient": [[185, 188], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "gradient", "(", "imgs", ")", ":", "\n", "\t", "return", "torch", ".", "stack", "(", "[", "0.5", "*", "(", "imgs", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", "-", "imgs", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", ")", ",", "\n", "0.5", "*", "(", "imgs", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "]", "-", "imgs", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gradient_loss": [[189, 200], ["loss.gradient", "loss.gradient", "range", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gradient", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gradient"], ["", "def", "gradient_loss", "(", "img", ",", "truth", ")", ":", "\n", "\t", "gi", "=", "gradient", "(", "img", ")", "\n", "gt", "=", "gradient", "(", "truth", ")", "\n", "\n", "sh", "=", "gi", ".", "shape", "\n", "# print 'sh', sh", "\n", "length", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "sh", ")", ")", ":", "\n", "\t\t", "length", "*=", "sh", "[", "i", "]", "\n", "\n", "", "return", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "gi", "-", "gt", ")", ")", "/", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.basic_img_loss": [[201, 212], ["range", "loss.gradient_loss", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gradient_loss"], ["", "def", "basic_img_loss", "(", "img", ",", "truth", ")", ":", "\n", "# pdb.set_trace()", "\n", "\t", "sh", "=", "img", ".", "shape", "\n", "# print 'sh', sh", "\n", "length", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "sh", ")", ")", ":", "\n", "\t\t", "length", "*=", "sh", "[", "i", "]", "\n", "", "l2_pixel", "=", "torch", ".", "sum", "(", "(", "img", "-", "truth", ")", "*", "(", "img", "-", "truth", ")", ")", "/", "length", "\n", "l1_grad", "=", "gradient_loss", "(", "img", ",", "truth", ")", "\n", "# print 'l2_pixel', l2_pixel", "\n", "return", "l2_pixel", "+", "l1_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gaussian2d": [[265, 269], ["math.exp"], "function", ["None"], ["", "def", "gaussian2d", "(", "u", ",", "v", ",", "sigma", ")", ":", "\n", "    ", "pi", "=", "3.1416", "\n", "intensity", "=", "1", "/", "(", "2.0", "*", "pi", "*", "sigma", "*", "sigma", ")", "*", "math", ".", "exp", "(", "-", "1", "/", "2.0", "*", "(", "(", "u", "**", "2", ")", "+", "(", "v", "**", "2", ")", ")", "/", "(", "sigma", "**", "2", ")", ")", "\n", "return", "intensity", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gaussianKernal": [[270, 278], ["numpy.zeros", "range", "numpy.sum", "range", "numpy.sum", "loss.gaussian2d"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gaussian2d"], ["", "def", "gaussianKernal", "(", "r", ",", "sigma", ")", ":", "\n", "    ", "kernal", "=", "np", ".", "zeros", "(", "[", "r", ",", "r", "]", ")", "\n", "center", "=", "(", "r", "-", "1", ")", "/", "2.0", "\n", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "            ", "kernal", "[", "i", ",", "j", "]", "=", "gaussian2d", "(", "i", "-", "center", ",", "j", "-", "center", ",", "sigma", ")", "\n", "", "", "kernal", "/=", "np", ".", "sum", "(", "np", ".", "sum", "(", "kernal", ")", ")", "\n", "return", "kernal", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.weights_init_Gaussian_blur": [[279, 290], ["classname.find", "m.weight.data.size", "loss.gaussianKernal", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "m.bias.data.zero_"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.gaussianKernal"], ["", "def", "weights_init_Gaussian_blur", "(", "sigma", "=", "1.0", ")", ":", "\n", "    ", "def", "sub_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "            ", "weight_shape", "=", "m", ".", "weight", ".", "data", ".", "size", "(", ")", "\n", "gaussian_blur", "=", "gaussianKernal", "(", "weight_shape", "[", "2", "]", ",", "sigma", ")", "\n", "for", "i", "in", "range", "(", "weight_shape", "[", "0", "]", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", "[", "i", ",", "0", ",", ":", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "gaussian_blur", ")", "\n", "", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "return", "sub_func", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.weights_init_He_normal": [[291, 312], ["classname.find", "m.weight.data.normal_", "m.bias.data.zero_", "classname.find", "torch.kaiming_normal_", "m.bias.data.zero_", "classname.find", "m.weight.data.fill_", "m.bias.data.zero_", "classname.find", "m.weight.data.normal_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "weights_init_He_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#     print classname", "\n", "if", "classname", ".", "find", "(", "'Transpose'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.001", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# std = np.sqrt(2. / (m.kernel_size[0] * m.kernel_size[1] * m.out_channels))", "\n", "# m.weight.data.normal_(0.0, std)", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.001", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.l1_loss": [[313, 315], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "", "def", "l1_loss", "(", "input", ",", "output", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "input", "-", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.colorLoss.deltaEColorLoss.__init__": [[8, 13], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "normalize", "=", "None", ")", ":", "\n", "        ", "super", "(", "deltaEColorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "[", "]", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.colorLoss.deltaEColorLoss.torchTensorToNumpy": [[15, 18], ["image.cpu().detach().numpy().reshape", "image.cpu().detach().numpy", "image.cpu().detach", "image.cpu"], "methods", ["None"], ["", "def", "torchTensorToNumpy", "(", "self", ",", "image", ")", ":", "\n", "        ", "imageNP", "=", "image", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "return", "imageNP", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.colorLoss.deltaEColorLoss.__call__": [[19, 37], ["range", "torch.mean().to", "torch.mean().to", "torch.mean().to", "torch.mean().to", "len", "colorLoss.deltaEColorLoss.torchTensorToNumpy", "colorLoss.deltaEColorLoss.torchTensorToNumpy", "numpy.absolute", "colorLoss.deltaEColorLoss.loss.append", "skimage.color.deltaE_ciede2000", "numpy.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "skimage.color.rgb2lab", "skimage.color.rgb2lab", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.colorLoss.deltaEColorLoss.torchTensorToNumpy", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.colorLoss.deltaEColorLoss.torchTensorToNumpy"], ["", "def", "__call__", "(", "self", ",", "genImage", ",", "gtImage", ")", ":", "\n", "\n", "        ", "for", "pair", "in", "range", "(", "len", "(", "genImage", ")", ")", ":", "\n", "\n", "# Converting and changing shape of torch tensor into numpy", "\n", "            ", "imageGTNP", "=", "self", ".", "torchTensorToNumpy", "(", "gtImage", "[", "pair", "]", ")", "\n", "imageGenNP", "=", "self", ".", "torchTensorToNumpy", "(", "genImage", "[", "pair", "]", ")", "\n", "\n", "# Calculating color difference", "\n", "deltaE", "=", "np", ".", "absolute", "(", "color", ".", "deltaE_ciede2000", "(", "color", ".", "rgb2lab", "(", "imageGTNP", ")", ",", "color", ".", "rgb2lab", "(", "imageGenNP", ")", ")", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "deltaE", "/=", "255.0", "\n", "\n", "# Mean deifference for an image pair", "\n", "", "self", ".", "loss", ".", "append", "(", "np", ".", "mean", "(", "deltaE", ")", ")", "\n", "", "deltaELoss", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "self", ".", "loss", ",", "requires_grad", "=", "True", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "deltaELoss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.SSIM.__init__": [[102, 111], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "val_range", "=", "None", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "val_range", "=", "val_range", "\n", "\n", "# Assume 1 channel for SSIM", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.SSIM.forward": [[112, 123], ["img1.size", "__init__.ssim", "create_window().to().type", "create_window().to", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "dtype", "==", "img1", ".", "dtype", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", ".", "to", "(", "img1", ".", "device", ")", ".", "type", "(", "img1", ".", "dtype", ")", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "ssim", "(", "img1", ",", "img2", ",", "window", "=", "window", ",", "window_size", "=", "self", ".", "window_size", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.MSSSIM.__init__": [[125, 130], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "channel", "=", "3", ")", ":", "\n", "        ", "super", "(", "MSSSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.MSSSIM.forward": [[131, 134], ["__init__.msssim"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.msssim"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "# TODO: store window between calls if possible", "\n", "        ", "return", "msssim", "(", "img1", ",", "img2", ",", "window_size", "=", "self", ".", "window_size", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.create_window": [[12, 17], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", "=", "1", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.ssim": [[19, 69], ["img1.size", "torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.mean", "torch.mean", "min", "create_window().to", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "torch.max", "torch.max", "torch.min", "torch.min", "__init__.create_window", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window"], ["", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "window", "=", "None", ",", "size_average", "=", "True", ",", "full", "=", "False", ",", "val_range", "=", "None", ")", ":", "\n", "# Value range can be different from 255. Other common ranges are 1 (sigmoid) and 2 (tanh).", "\n", "    ", "if", "val_range", "is", "None", ":", "\n", "        ", "if", "torch", ".", "max", "(", "img1", ")", ">", "128", ":", "\n", "            ", "max_val", "=", "255", "\n", "", "else", ":", "\n", "            ", "max_val", "=", "1", "\n", "\n", "", "if", "torch", ".", "min", "(", "img1", ")", "<", "-", "0.5", ":", "\n", "            ", "min_val", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "min_val", "=", "0", "\n", "", "L", "=", "max_val", "-", "min_val", "\n", "", "else", ":", "\n", "        ", "L", "=", "val_range", "\n", "\n", "", "padd", "=", "0", "\n", "(", "_", ",", "channel", ",", "height", ",", "width", ")", "=", "img1", ".", "size", "(", ")", "\n", "if", "window", "is", "None", ":", "\n", "        ", "real_size", "=", "min", "(", "window_size", ",", "height", ",", "width", ")", "\n", "window", "=", "create_window", "(", "real_size", ",", "channel", "=", "channel", ")", ".", "to", "(", "img1", ".", "device", ")", "\n", "\n", "", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "(", "0.01", "*", "L", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "L", ")", "**", "2", "\n", "\n", "v1", "=", "2.0", "*", "sigma12", "+", "C2", "\n", "v2", "=", "sigma1_sq", "+", "sigma2_sq", "+", "C2", "\n", "cs", "=", "torch", ".", "mean", "(", "v1", "/", "v2", ")", "# contrast sensitivity", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "v1", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "v2", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "", "if", "full", ":", "\n", "        ", "return", "ret", ",", "cs", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_msssim.__init__.msssim": [[71, 98], ["torch.FloatTensor().to", "torch.FloatTensor().to", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "torch.FloatTensor().to.size", "__init__.ssim", "torch.stack.append", "torch.stack.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.ssim"], ["", "def", "msssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "val_range", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "device", "=", "img1", ".", "device", "\n", "weights", "=", "torch", ".", "FloatTensor", "(", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", ")", ".", "to", "(", "device", ")", "\n", "levels", "=", "weights", ".", "size", "(", ")", "[", "0", "]", "\n", "mssim", "=", "[", "]", "\n", "mcs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "levels", ")", ":", "\n", "        ", "sim", ",", "cs", "=", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "window_size", ",", "size_average", "=", "size_average", ",", "full", "=", "True", ",", "val_range", "=", "val_range", ")", "\n", "mssim", ".", "append", "(", "sim", ")", "\n", "mcs", ".", "append", "(", "cs", ")", "\n", "\n", "img1", "=", "F", ".", "avg_pool2d", "(", "img1", ",", "(", "2", ",", "2", ")", ")", "\n", "img2", "=", "F", ".", "avg_pool2d", "(", "img2", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "mssim", "=", "torch", ".", "stack", "(", "mssim", ")", "\n", "mcs", "=", "torch", ".", "stack", "(", "mcs", ")", "\n", "\n", "# Normalize (to avoid NaNs during training unstable models, not compliant with original definition)", "\n", "if", "normalize", ":", "\n", "        ", "mssim", "=", "(", "mssim", "+", "1", ")", "/", "2", "\n", "mcs", "=", "(", "mcs", "+", "1", ")", "/", "2", "\n", "\n", "", "pow1", "=", "mcs", "**", "weights", "\n", "pow2", "=", "mssim", "**", "weights", "\n", "# From Matlab implementation https://ece.uwaterloo.ca/~z70wang/research/iwssim/", "\n", "output", "=", "torch", ".", "prod", "(", "pow1", "[", ":", "-", "1", "]", "*", "pow2", "[", "-", "1", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.SSIM.__init__": [[40, 46], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window"], ["\n", "", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.SSIM.forward": [[47, 64], ["img1.size", "__init__._ssim", "__init__.create_window", "window.cuda.cuda.type_as", "__init__.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__._ssim", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda"], ["\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "padd", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "(", "0.01", "*", "L", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "L", ")", "**", "2", "\n", "\n", "v1", "=", "2.0", "*", "sigma12", "+", "C2", "\n", "v2", "=", "sigma1_sq", "+", "sigma2_sq", "+", "C2", "\n", "cs", "=", "torch", ".", "mean", "(", "v1", "/", "v2", ")", "# contrast sensitivity", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "v1", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "v2", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.gaussian"], ["\n", "", "def", "create_window", "(", "window_size", ",", "channel", "=", "1", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", "\n", "return", "window", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__._ssim": [[17, 38], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["\n", "\n", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "window", "=", "None", ",", "size_average", "=", "True", ",", "full", "=", "False", ",", "val_range", "=", "None", ")", ":", "\n", "# Value range can be different from 255. Other common ranges are 1 (sigmoid) and 2 (tanh).", "\n", "    ", "if", "val_range", "is", "None", ":", "\n", "        ", "if", "torch", ".", "max", "(", "img1", ")", ">", "128", ":", "\n", "            ", "max_val", "=", "255", "\n", "", "else", ":", "\n", "            ", "max_val", "=", "1", "\n", "\n", "", "if", "torch", ".", "min", "(", "img1", ")", "<", "-", "0.5", ":", "\n", "            ", "min_val", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "min_val", "=", "0", "\n", "", "L", "=", "max_val", "-", "min_val", "\n", "", "else", ":", "\n", "        ", "L", "=", "val_range", "\n", "\n", "", "padd", "=", "0", "\n", "(", "_", ",", "channel", ",", "height", ",", "width", ")", "=", "img1", ".", "size", "(", ")", "\n", "if", "window", "is", "None", ":", "\n", "        ", "real_size", "=", "min", "(", "window_size", ",", "height", ",", "width", ")", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.ssim": [[65, 74], ["img1.size", "__init__.create_window", "window.cuda.type_as", "__init__._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__.create_window", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.pytorch_ssim.__init__._ssim", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.loss.loss.VGGLoss.cuda"], ["\n", "", "if", "full", ":", "\n", "        ", "return", "ret", ",", "cs", "\n", "", "return", "ret", "\n", "\n", "\n", "", "def", "msssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "val_range", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "device", "=", "img1", ".", "device", "\n", "weights", "=", "torch", ".", "FloatTensor", "(", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", ")", ".", "to", "(", "device", ")", "\n", "levels", "=", "weights", ".", "size", "(", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__init__": [[104, 115], ["processHDMDHR.createDir"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir"], ["    ", "def", "__init__", "(", "self", ",", "rootDir", ",", "targetDir", ",", "patchSize", "=", "256", ")", ":", "\n", "        ", "self", ".", "targetDir", "=", "targetDir", "\n", "self", ".", "rootDir", "=", "rootDir", "\n", "\n", "self", ".", "targetDir", "=", "targetDir", "\n", "createDir", "(", "self", ".", "targetDir", ")", "\n", "self", ".", "rootDir", "=", "rootDir", "\n", "\n", "#gamma=2.24", "\n", "\n", "self", ".", "patchSize", "=", "patchSize", "\n", "", "def", "patchExtract", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.patchExtract": [[115, 166], ["processHDMDHR.imageList", "print", "len", "im.replace", "im.replace", "im.replace", "im.replace", "im.replace", "processHDMDHR.imread_uint16_png", "numpy.load", "range", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "range", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "processHDMDHR.imwrite_uint16_png", "print", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imread_uint16_png", "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imwrite_uint16_png"], ["", "def", "patchExtract", "(", "self", ")", ":", "\n", "        ", "images", "=", "imageList", "(", "self", ".", "rootDir", ",", "multiDir", "=", "True", ")", "\n", "print", "(", "len", "(", "images", ")", ")", "\n", "countT", "=", "0", "\n", "countGT", "=", "0", "\n", "for", "im", "in", "images", ":", "\n", "            ", "if", "'_medium'", "in", "im", ":", "\n", "\n", "# Path Defination", "\n", "                ", "lognPath", "=", "im", ".", "replace", "(", "\"_medium\"", ",", "\"_long\"", ")", "\n", "shortPath", "=", "im", ".", "replace", "(", "\"_medium\"", ",", "\"_short\"", ")", "\n", "gtPath", "=", "im", ".", "replace", "(", "\"_medium\"", ",", "\"_gt\"", ")", "\n", "alignPath", "=", "im", ".", "replace", "(", "\"_medium.png\"", ",", "'_alignratio.npy'", ")", "\n", "exposurePath", "=", "im", ".", "replace", "(", "\"_medium.png\"", ",", "\"_exposures.npy\"", ")", "\n", "\n", "# Read Images", "\n", "image_long", "=", "cv2", ".", "imread", "(", "lognPath", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "/", "255.0", "\n", "image_short", "=", "cv2", ".", "imread", "(", "shortPath", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "/", "255.0", "\n", "image_medium", "=", "cv2", ".", "imread", "(", "im", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "/", "255.0", "\n", "imageGT16", "=", "imread_uint16_png", "(", "gtPath", ",", "alignPath", ")", "\n", "\n", "\n", "# Exposure Normalization ", "\n", "exposures", "=", "np", ".", "load", "(", "exposurePath", ")", "\n", "floating_exposures", "=", "exposures", "-", "exposures", "[", "1", "]", "\n", "\n", "image_short_corrected", "=", "image_short", "#(((image_short**gamma)*2.0**(-1*floating_exposures[0]))**(1/gamma))", "\n", "image_long_corrected", "=", "image_long", "#(((image_long**gamma)*2.0**(-1*floating_exposures[2]))**(1/gamma))", "\n", "image_medium_corrected", "=", "image_medium", "\n", "\n", "# Extracting Patch", "\n", "imgTemp", "=", "imageGT16", "[", ":", "imageGT16", ".", "shape", "[", "0", "]", "-", "imageGT16", ".", "shape", "[", "0", "]", "%", "patchSize", ",", ":", "imageGT16", ".", "shape", "[", "1", "]", "-", "imageGT16", ".", "shape", "[", "1", "]", "%", "patchSize", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "imgTemp", ".", "shape", "[", "0", "]", ",", "patchSize", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "0", ",", "imgTemp", ".", "shape", "[", "1", "]", ",", "patchSize", ")", ":", "\n", "\n", "                        ", "image_long_corrected_crop", "=", "image_long_corrected", "[", "i", ":", "i", "+", "patchSize", ",", "j", ":", "j", "+", "patchSize", ",", ":", "]", "\n", "image_short_corrected_crop", "=", "image_short_corrected", "[", "i", ":", "i", "+", "patchSize", ",", "j", ":", "j", "+", "patchSize", ",", ":", "]", "\n", "image_medium_crop", "=", "image_medium_corrected", "[", "i", ":", "i", "+", "patchSize", ",", "j", ":", "j", "+", "patchSize", ",", ":", "]", "\n", "imageGT_crop", "=", "imageGT16", "[", "i", ":", "i", "+", "patchSize", ",", "j", ":", "j", "+", "patchSize", ",", ":", "]", "\n", "\n", "targetCounter", "=", "\"{:05d}\"", ".", "format", "(", "countT", ")", "+", "\"_\"", "\n", "\n", "cv2", ".", "imwrite", "(", "self", ".", "targetDir", "+", "targetCounter", "+", "\"medium.png\"", ",", "image_medium_crop", "*", "255", ")", "\n", "cv2", ".", "imwrite", "(", "self", ".", "targetDir", "+", "targetCounter", "+", "\"long.png\"", ",", "image_long_corrected_crop", "*", "255", ")", "\n", "cv2", ".", "imwrite", "(", "self", ".", "targetDir", "+", "targetCounter", "+", "\"short.png\"", ",", "image_short_corrected_crop", "*", "255", ")", "\n", "cv2", ".", "imwrite", "(", "self", ".", "targetDir", "+", "targetCounter", "+", "\"gt8.png\"", ",", "cv2", ".", "cvtColor", "(", "imageGT_crop", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "*", "255", ")", "\n", "imwrite_uint16_png", "(", "self", ".", "targetDir", "+", "targetCounter", "+", "\"gt16.png\"", ",", "imageGT_crop", ",", "self", ".", "targetDir", "+", "targetCounter", "+", "\"alignratio.npy\"", ")", "\n", "\n", "countT", "+=", "1", "\n", "if", "countT", "%", "100", "==", "0", ":", "\n", "                            ", "print", "(", "countT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.__call__": [[169, 171], ["processHDMDHR.HDMHDRProcess.patchExtract"], "methods", ["home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.HDMHDRProcess.patchExtract"], ["", "", "", "", "", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "self", ".", "patchExtract", "(", ")", "\n", "#self.modelEvaluation()", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.mainParser": [[18, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "mainParser", "(", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", ")", ":", "\n", "\n", "# Parser definition", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Parses command.\"", ")", "\n", "\n", "# Parser Options", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--sourcePath\"", ",", "help", "=", "\"Path to the test datasets\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "\"--targetPath\"", ",", "help", "=", "\"Path to the model outputs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-p\"", ",", "\"--patchSize\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"Set patch size\"", ")", "\n", "\n", "options", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.extractFileName": [[31, 39], ["ntpath.basename", "ntpath.split", "ntpath.basename", "tail.split", "ntpath.basename().split", "ntpath.basename"], "function", ["None"], ["", "def", "extractFileName", "(", "path", ",", "withoutExtension", "=", "None", ")", ":", "\n", "    ", "ntpath", ".", "basename", "(", "\"a/b/c\"", ")", "\n", "head", ",", "tail", "=", "ntpath", ".", "split", "(", "path", ")", "\n", "\n", "if", "withoutExtension", ":", "\n", "        ", "return", "tail", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", "or", "ntpath", ".", "basename", "(", "head", ")", ".", "split", "(", "\".\"", ")", "[", "-", "2", "]", "\n", "\n", "", "return", "tail", "or", "ntpath", ".", "basename", "(", "head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.createDir": [[41, 45], ["pathlib.Path().mkdir", "pathlib.Path"], "function", ["None"], ["", "def", "createDir", "(", "path", ")", ":", "\n", "# Create a directory to save processed samples", "\n", "    ", "Path", "(", "path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imageList": [[46, 58], ["imageList.extend", "imageList.extend", "glob.glob", "glob.glob"], "function", ["None"], ["", "def", "imageList", "(", "path", ",", "multiDir", "=", "False", ",", "imageExtension", "=", "[", "'*.jpg'", ",", "'*.png'", ",", "'*.jpeg'", ",", "'*.tif'", ",", "'*.npy'", "]", ")", ":", "\n", "#types = () # the tuple of file types", "\n", "    ", "imageList", "=", "[", "]", "\n", "for", "ext", "in", "imageExtension", ":", "\n", "\n", "        ", "if", "multiDir", "==", "True", ":", "\n", "            ", "imageList", ".", "extend", "(", "glob", ".", "glob", "(", "path", "+", "\"*/\"", "+", "ext", ")", ")", "\n", "", "else", ":", "\n", "            ", "imageList", ".", "extend", "(", "glob", ".", "glob", "(", "path", "+", "ext", ")", ")", "\n", "\n", "", "imageList", "\n", "", "return", "imageList", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imread_uint16_png": [[60, 78], ["numpy.load().astype", "cv2.cvtColor", "cv2.cvtColor", "numpy.load", "cv2.imread", "cv2.imread"], "function", ["None"], ["", "def", "imread_uint16_png", "(", "image_path", ",", "alignratio_path", ")", ":", "\n", "    ", "\"\"\" This function loads a uint16 png image from the specified path and restore its original image range with\n    the ratio stored in the specified alignratio.npy respective path.\n\n\n    Args:\n        image_path (str): Path to the uint16 png image\n        alignratio_path (str): Path to the alignratio.npy file corresponding to the image\n\n    Returns:\n        np.ndarray (np.float32, (h,w,3)): Returns the RGB HDR image specified in image_path.\n\n    \"\"\"", "\n", "# Load the align_ratio variable and ensure is in np.float32 precision", "\n", "align_ratio", "=", "np", ".", "load", "(", "alignratio_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#print(\"Read Max: \", align_ratio)", "\n", "# Load image without changing bit depth and normalize by align ratio", "\n", "return", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "image_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "align_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.sharif-apu_twostageHDR_NTIRE21.Extras.processHDMDHR.imwrite_uint16_png": [[79, 97], ["numpy.save", "numpy.round().astype", "cv2.imwrite", "cv2.imwrite", "cv2.cvtColor", "cv2.cvtColor", "image.max", "cv2.cvtColor", "cv2.cvtColor", "numpy.round"], "function", ["None"], ["", "def", "imwrite_uint16_png", "(", "image_path", ",", "image", ",", "alignratio_path", ")", ":", "\n", "    ", "\"\"\" This function writes the hdr image as a uint16 png and stores its related align_ratio value in the specified paths.\n\n        Args:\n            image_path (str): Write path to the uint16 png image (needs to finish in .png, e.g. 0000.png)\n            image (np.ndarray): HDR image in float format.\n            alignratio_path (str): Write path to the align_ratio value (needs to finish in .npy, e.g. 0000_alignratio.npy)\n\n        Returns:\n            np.ndarray (np.float32, (h,w,3)): Returns the RGB HDR image specified in image_path.\n\n    \"\"\"", "\n", "align_ratio", "=", "(", "2", "**", "16", "-", "1", ")", "/", "image", ".", "max", "(", ")", "\n", "#print(\"Write Max: \",align_ratio)", "\n", "np", ".", "save", "(", "alignratio_path", ",", "align_ratio", ")", "\n", "uint16_image_gt", "=", "np", ".", "round", "(", "image", "*", "align_ratio", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "cv2", ".", "imwrite", "(", "image_path", ",", "cv2", ".", "cvtColor", "(", "uint16_image_gt", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "return", "cv2", ".", "cvtColor", "(", "uint16_image_gt", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n"]]}