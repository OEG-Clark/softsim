{"home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.read_table_cols": [[14, 27], ["list", "open", "f.readlines", "os.path.join", "line.strip().split", "list.append", "line.strip"], "function", ["None"], ["", "def", "read_table_cols", "(", ")", ":", "\n", "    ", "tab_cols", "=", "list", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "t2d_dir", ",", "'col_class_checked_fg.csv'", ")", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line_tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "line_tmp", "[", "0", "]", "=", "line_tmp", "[", "0", "]", "[", "1", ":", "]", "\n", "line_tmp", "[", "-", "1", "]", "=", "line_tmp", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "tab_id", "=", "line_tmp", "[", "0", "]", "\n", "col_id", "=", "line_tmp", "[", "1", "]", "\n", "tab_col", "=", "'%s %s'", "%", "(", "tab_id", ",", "col_id", ")", "\n", "tab_cols", ".", "append", "(", "tab_col", ")", "\n", "", "", "return", "tab_cols", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.read_col_header": [[30, 45], ["dict", "os.path.join", "os.listdir", "open", "f.readlines", "os.path.join", "prop_filename.split", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "read_col_header", "(", ")", ":", "\n", "    ", "col_headers", "=", "dict", "(", ")", "\n", "prop_dir", "=", "os", ".", "path", ".", "join", "(", "t2d_dir", ",", "'property'", ")", "\n", "for", "prop_filename", "in", "os", ".", "listdir", "(", "prop_dir", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "prop_dir", ",", "prop_filename", ")", ")", "as", "f", ":", "\n", "            ", "tab_id", "=", "prop_filename", ".", "split", "(", "'.csv'", ")", "[", "0", "]", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line_tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "line_tmp", "[", "0", "]", "=", "line_tmp", "[", "0", "]", "[", "1", ":", "]", "\n", "line_tmp", "[", "-", "1", "]", "=", "line_tmp", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "header", "=", "line_tmp", "[", "1", "]", "\n", "col_id", "=", "line_tmp", "[", "3", "]", "\n", "col", "=", "'%s %s'", "%", "(", "tab_id", ",", "col_id", ")", "\n", "col_headers", "[", "col", "]", "=", "header", "\n", "", "", "", "return", "col_headers", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.read_t2d_cells": [[48, 69], ["util_t2d.read_table_cols", "util_t2d.read_col_header", "dict", "os.path.join", "col.split", "col.split", "open", "f.readline", "tab_line.strip.strip", "col_content.split", "col_list[].replace", "col_list[].replace", "os.path.join", "[].split", "col_contents.split", "int", "tab_line.strip.split"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.read_table_cols", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.read_col_header"], ["", "def", "read_t2d_cells", "(", ")", ":", "\n", "    ", "cols", "=", "read_table_cols", "(", ")", "\n", "col_headers", "=", "read_col_header", "(", ")", "\n", "col_cells", "=", "dict", "(", ")", "\n", "table_dir", "=", "os", ".", "path", ".", "join", "(", "t2d_dir", ",", "'tables'", ")", "\n", "for", "col", "in", "cols", ":", "\n", "        ", "tab_id", "=", "col", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "col_id", "=", "col", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "table_dir", ",", "(", "'%s.json'", "%", "tab_id", ")", ")", ")", "as", "f", ":", "\n", "            ", "tab_line", "=", "f", ".", "readline", "(", ")", "\n", "tab_line", "=", "tab_line", ".", "strip", "(", ")", "\n", "col_contents", "=", "tab_line", ".", "split", "(", "\"[[\"", ")", "[", "1", "]", ".", "split", "(", "\"]]\"", ")", "[", "0", "]", "\n", "col_content", "=", "col_contents", ".", "split", "(", "'],['", ")", "[", "int", "(", "col_id", ")", "]", "\n", "col_list", "=", "col_content", ".", "split", "(", "'\",\"'", ")", "\n", "col_list", "[", "0", "]", "=", "col_list", "[", "0", "]", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "col_list", "[", "-", "1", "]", "=", "col_list", "[", "-", "1", "]", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "if", "col_headers", "[", "col", "]", "!=", "'NULL'", ":", "\n", "                ", "col_list", "=", "col_list", "[", "1", ":", "]", "\n", "", "col_cells", "[", "col", "]", "=", "col_list", "\n", "\n", "", "", "return", "col_cells", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.read_col_gt": [[72, 86], ["dict", "open", "f.readlines", "os.path.join", "line.strip().split", "cls_URI.split", "line.strip"], "function", ["None"], ["", "def", "read_col_gt", "(", ")", ":", "\n", "    ", "col_classes", "=", "dict", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "t2d_dir", ",", "'col_class_checked_fg.csv'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line_tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "line_tmp", "[", "0", "]", "=", "line_tmp", "[", "0", "]", "[", "1", ":", "]", "\n", "line_tmp", "[", "-", "1", "]", "=", "line_tmp", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "tab_id", "=", "line_tmp", "[", "0", "]", "\n", "col_id", "=", "line_tmp", "[", "1", "]", "\n", "cls_URI", "=", "line_tmp", "[", "3", "]", "\n", "ori_cls", "=", "cls_URI", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "col", "=", "'%s %s'", "%", "(", "tab_id", ",", "col_id", ")", "\n", "col_classes", "[", "col", "]", "=", "[", "ori_cls", "]", "\n", "", "", "return", "col_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_t2d.primary_key_cols": [[89, 104], ["set", "os.path.join", "os.listdir", "open", "f.readlines", "os.path.join", "line.strip().split", "set.add", "line.strip", "file_name.split"], "function", ["None"], ["", "def", "primary_key_cols", "(", ")", ":", "\n", "    ", "pk_col", "=", "set", "(", ")", "\n", "pro_dir", "=", "os", ".", "path", ".", "join", "(", "t2d_dir", ",", "'property'", ")", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "pro_dir", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "pro_dir", ",", "file_name", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line_tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "line_tmp", "[", "0", "]", "=", "line_tmp", "[", "0", "]", "[", "1", ":", "]", "\n", "line_tmp", "[", "-", "1", "]", "=", "line_tmp", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "if", "line_tmp", "[", "2", "]", "==", "'True'", ":", "\n", "                    ", "col_id", "=", "line_tmp", "[", "3", "]", "\n", "tab_id", "=", "file_name", ".", "split", "(", "'.csv'", ")", "[", "0", "]", "\n", "col", "=", "'%s %s'", "%", "(", "tab_id", ",", "col_id", ")", "\n", "pk_col", ".", "add", "(", "col", ")", "\n", "", "", "", "", "return", "pk_col", "\n", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_kb.lookup_resources": [[11, 41], ["dict", "list", "re.findall", "cell_text.replace.strip", "cell_text.replace.replace", "len", "list.append", "len", "list.append", "requests.get", "xml.fromstring", "cell_bracket.strip", "list", "child[].text.split", "list.append", "cls_URI.split"], "function", ["None"], ["def", "lookup_resources", "(", "cell_text", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "dbp_prefix", "=", "'http://dbpedia.org/resource/'", "\n", "entity_classes", "=", "dict", "(", ")", "\n", "cell_items", "=", "list", "(", ")", "\n", "cell_brackets", "=", "re", ".", "findall", "(", "'\\((.*?)\\)'", ",", "cell_text", ")", "\n", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "cell_text", "=", "cell_text", ".", "replace", "(", "'(%s)'", "%", "cell_bracket", ",", "''", ")", "\n", "", "cell_text", "=", "cell_text", ".", "strip", "(", ")", "\n", "if", "len", "(", "cell_text", ")", ">", "2", ":", "\n", "        ", "cell_items", ".", "append", "(", "cell_text", ")", "\n", "", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "if", "len", "(", "cell_bracket", ")", ">", "2", ":", "\n", "            ", "cell_items", ".", "append", "(", "cell_bracket", ".", "strip", "(", ")", ")", "\n", "", "", "for", "cell_item", "in", "cell_items", ":", "\n", "        ", "try", ":", "\n", "            ", "lookup_url", "=", "'http://lookup.dbpedia.org/api/search/KeywordSearch?MaxHits=2&QueryString=%s'", "%", "cell_item", "\n", "lookup_res", "=", "requests", ".", "get", "(", "lookup_url", ")", "\n", "root", "=", "ET", ".", "fromstring", "(", "lookup_res", ".", "content", ")", "\n", "for", "child", "in", "root", ":", "\n", "                ", "entity", "=", "child", "[", "1", "]", ".", "text", ".", "split", "(", "dbp_prefix", ")", "[", "1", "]", "\n", "classes", "=", "list", "(", ")", "\n", "for", "cc", "in", "child", "[", "3", "]", ":", "\n", "                    ", "cls_URI", "=", "cc", "[", "1", "]", ".", "text", "\n", "if", "dbo_prefix", "in", "cls_URI", ":", "\n", "                        ", "classes", ".", "append", "(", "cls_URI", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", ")", "\n", "", "", "entity_classes", "[", "entity", "]", "=", "classes", "\n", "", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pass", "\n", "", "", "return", "entity_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_kb.lookup_dbo_classes": [[44, 71], ["list", "re.findall", "cell_text.replace.strip", "set", "cell_text.replace.replace", "len", "list.append", "len", "list.append", "requests.get", "xml.fromstring", "cell_bracket.strip", "set", "set.add", "cls_uri.split"], "function", ["None"], ["", "def", "lookup_dbo_classes", "(", "cell_text", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "cell_items", "=", "list", "(", ")", "\n", "cell_brackets", "=", "re", ".", "findall", "(", "'\\((.*?)\\)'", ",", "cell_text", ")", "\n", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "cell_text", "=", "cell_text", ".", "replace", "(", "'(%s)'", "%", "cell_bracket", ",", "''", ")", "\n", "", "cell_text", "=", "cell_text", ".", "strip", "(", ")", "\n", "if", "len", "(", "cell_text", ")", ">", "2", ":", "\n", "        ", "cell_items", ".", "append", "(", "cell_text", ")", "\n", "", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "if", "len", "(", "cell_bracket", ")", ">", "2", ":", "\n", "            ", "cell_items", ".", "append", "(", "cell_bracket", ".", "strip", "(", ")", ")", "\n", "", "", "for", "cell_item", "in", "cell_items", ":", "\n", "        ", "try", ":", "\n", "            ", "lookup_url", "=", "'http://lookup.dbpedia.org/api/search/KeywordSearch?MaxHits=1&QueryString=%s'", "%", "cell_item", "\n", "lookup_res", "=", "requests", ".", "get", "(", "lookup_url", ")", "\n", "root", "=", "ET", ".", "fromstring", "(", "lookup_res", ".", "content", ")", "\n", "for", "child", "in", "root", ":", "\n", "                ", "classes", "=", "set", "(", ")", "\n", "for", "c", "in", "child", "[", "3", "]", ":", "\n", "                    ", "cls_uri", "=", "c", "[", "1", "]", ".", "text", "\n", "if", "dbo_prefix", "in", "cls_uri", ":", "\n", "                        ", "classes", ".", "add", "(", "cls_uri", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", ")", "\n", "", "", "return", "classes", "\n", "", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pass", "\n", "", "", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_kb.query_general_entities": [[74, 91], ["dict", "sparql.Service", "cls_entities.keys", "list", "sparql.Service.query", "s.query.fetchone", "print", "str", "str.split", "list.append", "len"], "function", ["None"], ["", "def", "query_general_entities", "(", "cls_entities", ")", ":", "\n", "    ", "dbp_prefix", "=", "'http://dbpedia.org/resource/'", "\n", "cls_gen_entities", "=", "dict", "(", ")", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "cls", "in", "cls_entities", ".", "keys", "(", ")", ":", "\n", "        ", "par_entities", "=", "cls_entities", "[", "cls", "]", "\n", "entities", "=", "list", "(", ")", "\n", "statement", "=", "'select distinct ?e where {?e a dbo:%s} ORDER BY RAND() limit 1000'", "%", "cls", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "ent_uri", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "ent", "=", "ent_uri", ".", "split", "(", "dbp_prefix", ")", "[", "1", "]", "\n", "if", "ent", "not", "in", "par_entities", ":", "\n", "                ", "entities", ".", "append", "(", "ent", ")", "\n", "", "", "cls_gen_entities", "[", "cls", "]", "=", "entities", "\n", "print", "(", "'%s done, %d entities'", "%", "(", "cls", ",", "len", "(", "entities", ")", ")", ")", "\n", "", "return", "cls_gen_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_kb.super_classes": [[94, 110], ["sparql.Service", "enumerate", "col_classes.keys", "sparql.Service.query", "s.query.fetchone", "str", "print", "str.split", "col_classes[].append"], "function", ["None"], ["", "def", "super_classes", "(", "col_classes", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "i", ",", "col", "in", "enumerate", "(", "col_classes", ".", "keys", "(", ")", ")", ":", "\n", "        ", "ori_cls", "=", "col_classes", "[", "col", "]", "[", "0", "]", "\n", "statement", "=", "'SELECT distinct ?superclass WHERE { dbo:%s rdfs:subClassOf* ?superclass. '", "'FILTER ( strstarts(str(?superclass), \"%s\"))}'", "%", "(", "ori_cls", ",", "dbo_prefix", ")", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "super_cls", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "super_cls_name", "=", "super_cls", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", "\n", "if", "super_cls_name", "not", "in", "col_classes", "[", "col", "]", ":", "\n", "                ", "col_classes", "[", "col", "]", ".", "append", "(", "super_cls_name", ")", "\n", "", "", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'%d columns done'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "", "return", "col_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_kb.super_classes_of_classes": [[113, 131], ["dict", "sparql.Service", "set", "sparql.Service.query", "s.query.fetchone", "str", "str.split", "set.add"], "function", ["None"], ["", "def", "super_classes_of_classes", "(", "classes", ")", ":", "\n", "    ", "super_clses", "=", "dict", "(", ")", "\n", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "cls", "in", "classes", ":", "\n", "        ", "supers", "=", "set", "(", ")", "\n", "statement", "=", "'SELECT distinct ?superclass WHERE { dbo:%s rdfs:subClassOf* ?superclass. '", "'FILTER ( strstarts(str(?superclass), \"%s\"))}'", "%", "(", "cls", ",", "dbo_prefix", ")", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "super_str", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "super_name", "=", "super_str", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", "\n", "if", "super_name", "not", "in", "supers", ":", "\n", "                ", "supers", ".", "add", "(", "super_name", ")", "\n", "\n", "", "", "super_clses", "[", "cls", "]", "=", "supers", "\n", "\n", "", "return", "super_clses", "\n", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.SyntheticColumnCNN.__init__": [[88, 147], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "enumerate", "tensorflow.concat", "tensorflow.reshape", "len", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.constant", "tensorflow.argmax", "tensorflow.cast", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "embedding_size", ",", "channel_num", ",", "filter_sizes", ",", "num_filters", ")", ":", "\n", "# Placeholders for input, output and dropout", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "sequence_length", ",", "embedding_size", ",", "channel_num", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# Keeping track of l2 regularization loss (optional)", "\n", "# l2_loss = tf.constant(0.0)", "\n", "# l2_reg_lambda = 0.0", "\n", "\n", "pooled_outputs", "=", "[", "]", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "filter_sizes", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"conv-max_pool-%s\"", "%", "filter_size", ")", ":", "\n", "                ", "filter_shape", "=", "[", "filter_size", ",", "embedding_size", ",", "1", ",", "num_filters", "]", "\n", "Conv_W", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"Conv_W\"", ")", "\n", "Conv_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filters", "]", ")", ",", "name", "=", "\"Conv_b\"", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "self", ".", "input_x", ",", "\n", "Conv_W", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv\"", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "Conv_b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "sequence_length", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "\n", "", "", "num_filters_total", "=", "num_filters", "*", "len", "(", "filter_sizes", ")", "\n", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "pooled_outputs", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "h_pool_flat", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "FC_W", "=", "tf", ".", "get_variable", "(", "\"FC_W\"", ",", "\n", "shape", "=", "[", "num_filters_total", ",", "num_classes", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "FC_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_classes", "]", ")", ",", "name", "=", "\"FC_b\"", ")", "\n", "# l2_loss += tf.nn.l2_loss(W)", "\n", "# l2_loss += tf.nn.l2_loss(b)", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "h_drop", ",", "FC_W", ",", "FC_b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "probabilities", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores", ",", "name", "=", "'probabilities'", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "# self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss", "\n", "\n", "# Accuracy", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.permutation_cells2synthetic_columns": [[7, 17], ["list", "len", "len", "list.append"], "function", ["None"], ["def", "permutation_cells2synthetic_columns", "(", "col_cells", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "2", ":", "\n", "        ", "for", "ci", "in", "col_cells", ":", "\n", "            ", "for", "cj", "in", "col_cells", ":", "\n", "                ", "if", "not", "ci", "==", "cj", ":", "\n", "                    ", "cell_units", ".", "append", "(", "[", "ci", ",", "cj", "]", ")", "\n", "", "", "", "", "elif", "len", "(", "col_cells", ")", "==", "1", ":", "\n", "        ", "cell_units", "=", "[", "col_cells", "[", "0", "]", ",", "'NaN'", "]", "\n", "", "return", "cell_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.ordered_cells2synthetic_columns": [[19, 29], ["list", "len", "range", "list.append", "list.append", "len", "len"], "function", ["None"], ["", "def", "ordered_cells2synthetic_columns", "(", "col_cells", ",", "synthetic_column_size", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "cell_i", "in", "range", "(", "len", "(", "col_cells", ")", "-", "synthetic_column_size", "+", "1", ")", ":", "\n", "            ", "cell_unit", "=", "col_cells", "[", "cell_i", ":", "cell_i", "+", "synthetic_column_size", "]", "\n", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "", "", "else", ":", "\n", "        ", "cell_unit", "=", "col_cells", "+", "[", "'NaN'", "]", "*", "(", "len", "(", "col_cells", ")", "-", "synthetic_column_size", ")", "\n", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "", "return", "cell_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.random_cells2synthetic_columns": [[31, 44], ["list", "len", "range", "range", "list.append", "list", "range", "list.append", "random.sample", "random.sample"], "function", ["None"], ["", "def", "random_cells2synthetic_columns", "(", "col_cells", ",", "synthetic_column_size", ",", "synthetic_column_num", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "synthetic_column_num", ")", ":", "\n", "            ", "cell_units", ".", "append", "(", "random", ".", "sample", "(", "col_cells", ",", "synthetic_column_size", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "synthetic_column_num", ")", ":", "\n", "            ", "cell_unit", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "synthetic_column_size", ")", ":", "\n", "                ", "cell_unit", "+=", "random", ".", "sample", "(", "col_cells", ",", "1", ")", "\n", "", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "\n", "", "", "return", "cell_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.generate_synthetic_columns": [[46, 57], ["list", "len", "enumerate", "list.append", "random.sample", "random.sample.append", "list.append", "len"], "function", ["None"], ["", "def", "generate_synthetic_columns", "(", "entities", ",", "synthetic_column_size", ")", ":", "\n", "    ", "ent_units", "=", "list", "(", ")", "\n", "if", "len", "(", "entities", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "i", ",", "ent", "in", "enumerate", "(", "entities", ")", ":", "\n", "            ", "unit", "=", "random", ".", "sample", "(", "entities", "[", "0", ":", "i", "]", "+", "entities", "[", "(", "i", "+", "1", ")", ":", "]", ",", "synthetic_column_size", "-", "1", ")", "\n", "unit", ".", "append", "(", "ent", ")", "\n", "ent_units", ".", "append", "(", "unit", ")", "\n", "", "", "else", ":", "\n", "        ", "unit", "=", "entities", "+", "[", "'NaN'", "]", "*", "(", "len", "(", "entities", ")", "-", "synthetic_column_size", ")", "\n", "ent_units", ".", "append", "(", "unit", ")", "\n", "", "return", "ent_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.synthetic_columns2sequence": [[59, 71], ["list", "ent.replace().replace().replace().replace().replace().replace", "len", "pattern.text.en.tokenize", "ent.replace().replace().replace().replace().replace", "tokenized_line.lower().split", "word.isalpha", "len", "ent.replace().replace().replace().replace", "tokenized_line.lower", "ent.replace().replace().replace", "ent.replace().replace", "ent.replace"], "function", ["None"], ["", "def", "synthetic_columns2sequence", "(", "ent_units", ",", "sequence_size", ")", ":", "\n", "    ", "word_seq", "=", "list", "(", ")", "\n", "for", "ent", "in", "ent_units", ":", "\n", "        ", "ent_n", "=", "ent", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'.'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", ".", "replace", "(", "'\"'", ",", "' '", ")", ".", "replace", "(", "\"'\"", ",", "' '", ")", "\n", "tokenized_line", "=", "' '", ".", "join", "(", "tokenize", "(", "ent_n", ")", ")", "\n", "is_alpha_word_line", "=", "[", "word", "for", "word", "in", "tokenized_line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "word", ".", "isalpha", "(", ")", "]", "\n", "word_seq", "+=", "is_alpha_word_line", "\n", "", "if", "len", "(", "word_seq", ")", ">=", "sequence_size", ":", "\n", "        ", "return", "word_seq", "[", "0", ":", "sequence_size", "]", "\n", "", "else", ":", "\n", "        ", "return", "word_seq", "+", "[", "'NaN'", "]", "*", "(", "sequence_size", "-", "len", "(", "word_seq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_T2D.util_cnn.sequence2matrix": [[73, 80], ["numpy.zeros", "enumerate", "w_vec.reshape"], "function", ["None"], ["", "", "def", "sequence2matrix", "(", "word_seq", ",", "sequence_size", ",", "w2v_model", ")", ":", "\n", "    ", "ent_v", "=", "np", ".", "zeros", "(", "(", "sequence_size", ",", "w2v_model", ".", "vector_size", ",", "1", ")", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "word_seq", ")", ":", "\n", "        ", "if", "not", "word", "==", "'NaN'", "and", "word", "in", "w2v_model", ".", "wv", ".", "vocab", ":", "\n", "            ", "w_vec", "=", "w2v_model", ".", "wv", "[", "word", "]", "\n", "ent_v", "[", "i", "]", "=", "w_vec", ".", "reshape", "(", "(", "w2v_model", ".", "vector_size", ",", "1", ")", ")", "\n", "", "", "return", "ent_v", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_limaye.read_cells_by_cols": [[11, 31], ["dict", "col.split", "int", "os.path.join", "list", "open", "f.readlines", "line.strip.strip", "line.strip.strip().split", "list.append", "line.strip.strip"], "function", ["None"], ["", "def", "read_cells_by_cols", "(", "cols", ")", ":", "\n", "    ", "col_cells", "=", "dict", "(", ")", "\n", "for", "col", "in", "cols", ":", "\n", "        ", "col_tmp", "=", "col", ".", "split", "(", "' '", ")", "\n", "filename", "=", "col_tmp", "[", "0", "]", "\n", "col_order", "=", "int", "(", "col_tmp", "[", "1", "]", ")", "\n", "col_f", "=", "os", ".", "path", ".", "join", "(", "limaye_dir", ",", "'tables_instance'", ",", "filename", ")", "\n", "cells", "=", "list", "(", ")", "\n", "with", "open", "(", "col_f", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", "==", "''", ":", "\n", "                    ", "tmp_line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "tmp_line", "[", "0", "]", "=", "tmp_line", "[", "0", "]", "[", "1", ":", "]", "\n", "tmp_line", "[", "-", "1", "]", "=", "tmp_line", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "cell", "=", "tmp_line", "[", "col_order", "]", "\n", "if", "not", "cell", "==", "''", ":", "\n", "                        ", "cells", ".", "append", "(", "cell", ")", "\n", "", "", "", "", "col_cells", "[", "col", "]", "=", "cells", "\n", "", "return", "col_cells", "\n", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.lookup_resources": [[11, 34], ["list", "list", "re.findall", "cell_text.replace.strip", "cell_text.replace.replace", "len", "list.append", "len", "list.append", "requests.get", "xml.fromstring", "cell_bracket.strip", "list.append", "child[].text.split"], "function", ["None"], ["def", "lookup_resources", "(", "cell_text", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "dbp_prefix", "=", "'http://dbpedia.org/resource/'", "\n", "entity_classes", "=", "dict", "(", ")", "\n", "cell_items", "=", "list", "(", ")", "\n", "cell_brackets", "=", "re", ".", "findall", "(", "'\\((.*?)\\)'", ",", "cell_text", ")", "\n", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "cell_text", "=", "cell_text", ".", "replace", "(", "'(%s)'", "%", "cell_bracket", ",", "''", ")", "\n", "", "cell_text", "=", "cell_text", ".", "strip", "(", ")", "\n", "if", "len", "(", "cell_text", ")", ">", "2", ":", "\n", "        ", "cell_items", ".", "append", "(", "cell_text", ")", "\n", "", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "if", "len", "(", "cell_bracket", ")", ">", "2", ":", "\n", "            ", "cell_items", ".", "append", "(", "cell_bracket", ".", "strip", "(", ")", ")", "\n", "", "", "for", "cell_item", "in", "cell_items", ":", "\n", "        ", "try", ":", "\n", "            ", "lookup_url", "=", "'http://lookup.dbpedia.org/api/search/KeywordSearch?MaxHits=2&QueryString=%s'", "%", "cell_item", "\n", "lookup_res", "=", "requests", ".", "get", "(", "lookup_url", ")", "\n", "root", "=", "ET", ".", "fromstring", "(", "lookup_res", ".", "content", ")", "\n", "for", "child", "in", "root", ":", "\n", "                ", "entity", "=", "child", "[", "1", "]", ".", "text", ".", "split", "(", "dbp_prefix", ")", "[", "1", "]", "\n", "classes", "=", "list", "(", ")", "\n", "for", "cc", "in", "child", "[", "3", "]", ":", "\n", "                    ", "cls_URI", "=", "cc", "[", "1", "]", ".", "text", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.lookup_dbo_classes": [[37, 63], ["list", "re.findall", "cell_text.replace.strip", "set", "cell_text.replace.replace", "len", "list.append", "len", "list.append", "requests.get", "xml.fromstring", "cell_bracket.strip", "set", "set.add", "cls_uri.split"], "function", ["None"], ["", "", "entity_classes", "[", "entity", "]", "=", "classes", "\n", "", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pass", "\n", "", "", "return", "entity_classes", "\n", "\n", "\n", "# lookup dbo_classes of matched entity by cell text", "\n", "", "def", "lookup_dbo_classes", "(", "cell_text", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "cell_items", "=", "list", "(", ")", "\n", "cell_brackets", "=", "re", ".", "findall", "(", "'\\((.*?)\\)'", ",", "cell_text", ")", "\n", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "cell_text", "=", "cell_text", ".", "replace", "(", "'(%s)'", "%", "cell_bracket", ",", "''", ")", "\n", "", "cell_text", "=", "cell_text", ".", "strip", "(", ")", "\n", "if", "len", "(", "cell_text", ")", ">", "2", ":", "\n", "        ", "cell_items", ".", "append", "(", "cell_text", ")", "\n", "", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "if", "len", "(", "cell_bracket", ")", ">", "2", ":", "\n", "            ", "cell_items", ".", "append", "(", "cell_bracket", ".", "strip", "(", ")", ")", "\n", "", "", "for", "cell_item", "in", "cell_items", ":", "\n", "        ", "try", ":", "\n", "            ", "lookup_url", "=", "'http://lookup.dbpedia.org/api/search/KeywordSearch?MaxHits=1&QueryString=%s'", "%", "cell_item", "\n", "lookup_res", "=", "requests", ".", "get", "(", "lookup_url", ")", "\n", "root", "=", "ET", ".", "fromstring", "(", "lookup_res", ".", "content", ")", "\n", "for", "child", "in", "root", ":", "\n", "                ", "classes", "=", "set", "(", ")", "\n", "for", "c", "in", "child", "[", "3", "]", ":", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.query_general_entities": [[66, 82], ["dict", "sparql.Service", "cls_entities.keys", "list", "sparql.Service.query", "s.query.fetchone", "print", "str", "str.split", "list.append", "len"], "function", ["None"], ["                        ", "classes", ".", "add", "(", "cls_uri", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", ")", "\n", "", "", "return", "classes", "\n", "", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pass", "\n", "", "", "return", "set", "(", ")", "\n", "\n", "\n", "# Query DBPedia", "\n", "", "def", "query_general_entities", "(", "cls_entities", ")", ":", "\n", "    ", "dbp_prefix", "=", "'http://dbpedia.org/resource/'", "\n", "cls_gen_entities", "=", "dict", "(", ")", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "cls", "in", "cls_entities", ".", "keys", "(", ")", ":", "\n", "        ", "par_entities", "=", "cls_entities", "[", "cls", "]", "\n", "entities", "=", "list", "(", ")", "\n", "statement", "=", "'select distinct ?e where {?e a dbo:%s} ORDER BY RAND() limit 1000'", "%", "cls", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.query_super_classes": [[85, 97], ["sparql.Service", "set", "sparql.Service.query", "s.query.fetchone", "str", "set.add", "str.split"], "function", ["None"], ["ent", "=", "ent_uri", ".", "split", "(", "dbp_prefix", ")", "[", "1", "]", "\n", "if", "ent", "not", "in", "par_entities", ":", "\n", "                ", "entities", ".", "append", "(", "ent", ")", "\n", "", "", "cls_gen_entities", "[", "cls", "]", "=", "entities", "\n", "print", "(", "'%s done, %d entities'", "%", "(", "cls", ",", "len", "(", "entities", ")", ")", ")", "\n", "", "return", "cls_gen_entities", "\n", "\n", "\n", "# extend table's classes with super classes", "\n", "", "def", "super_classes", "(", "col_classes", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "i", ",", "col", "in", "enumerate", "(", "col_classes", ".", "keys", "(", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.query_sub_classes": [[100, 112], ["sparql.Service", "set", "sparql.Service.query", "s.query.fetchone", "str", "set.add", "str.split"], "function", ["None"], ["'FILTER ( strstarts(str(?superclass), \"%s\"))}'", "%", "(", "ori_cls", ",", "dbo_prefix", ")", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "super_cls", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "super_cls_name", "=", "super_cls", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", "\n", "if", "super_cls_name", "not", "in", "col_classes", "[", "col", "]", ":", "\n", "                ", "col_classes", "[", "col", "]", ".", "append", "(", "super_cls_name", ")", "\n", "", "", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'%d columns done'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "", "return", "col_classes", "\n", "\n", "\n", "# extend classes with their super classes", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.query_complete_classes_of_entity": [[115, 131], ["set", "sparql.Service", "sparql.Service.query", "s.query.fetchone", "str", "set.add", "print", "str.split"], "function", ["None"], ["dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "cls", "in", "classes", ":", "\n", "        ", "supers", "=", "set", "(", ")", "\n", "statement", "=", "'SELECT distinct ?superclass WHERE { dbo:%s rdfs:subClassOf* ?superclass. '", "'FILTER ( strstarts(str(?superclass), \"%s\"))}'", "%", "(", "cls", ",", "dbo_prefix", ")", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "super_str", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "super_name", "=", "super_str", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", "\n", "if", "super_name", "not", "in", "supers", ":", "\n", "                ", "supers", ".", "add", "(", "super_name", ")", "\n", "\n", "", "", "super_clses", "[", "cls", "]", "=", "supers", "\n", "\n", "", "return", "super_clses", "\n", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.equivalent_classes": [[134, 145], ["set", "sparql.Service", "sparql.Service.query", "s.query.fetchone", "str", "set.add", "str.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.fine_grained_class": [[148, 155], ["set", "util_kb.query_sub_classes", "len", "set.add", "cs.intersection"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_kb.query_sub_classes"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.SyntheticColumnCNN.__init__": [[88, 147], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "enumerate", "tensorflow.concat", "tensorflow.reshape", "len", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.constant", "tensorflow.argmax", "tensorflow.cast", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "embedding_size", ",", "channel_num", ",", "filter_sizes", ",", "num_filters", ")", ":", "\n", "# Placeholders for input, output and dropout", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "sequence_length", ",", "embedding_size", ",", "channel_num", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# Keeping track of l2 regularization loss (optional)", "\n", "# l2_loss = tf.constant(0.0)", "\n", "# l2_reg_lambda = 0.0", "\n", "\n", "pooled_outputs", "=", "[", "]", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "filter_sizes", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"conv-max_pool-%s\"", "%", "filter_size", ")", ":", "\n", "                ", "filter_shape", "=", "[", "filter_size", ",", "embedding_size", ",", "1", ",", "num_filters", "]", "\n", "Conv_W", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"Conv_W\"", ")", "\n", "Conv_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filters", "]", ")", ",", "name", "=", "\"Conv_b\"", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "self", ".", "input_x", ",", "\n", "Conv_W", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv\"", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "Conv_b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "sequence_length", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "\n", "", "", "num_filters_total", "=", "num_filters", "*", "len", "(", "filter_sizes", ")", "\n", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "pooled_outputs", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "h_pool_flat", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "FC_W", "=", "tf", ".", "get_variable", "(", "\"FC_W\"", ",", "\n", "shape", "=", "[", "num_filters_total", ",", "num_classes", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "FC_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_classes", "]", ")", ",", "name", "=", "\"FC_b\"", ")", "\n", "# l2_loss += tf.nn.l2_loss(W)", "\n", "# l2_loss += tf.nn.l2_loss(b)", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "h_drop", ",", "FC_W", ",", "FC_b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "probabilities", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores", ",", "name", "=", "'probabilities'", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "# self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss", "\n", "\n", "# Accuracy", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.permutation_cells2synthetic_columns": [[7, 17], ["list", "len", "len", "list.append"], "function", ["None"], ["def", "permutation_cells2synthetic_columns", "(", "col_cells", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "2", ":", "\n", "        ", "for", "ci", "in", "col_cells", ":", "\n", "            ", "for", "cj", "in", "col_cells", ":", "\n", "                ", "if", "not", "ci", "==", "cj", ":", "\n", "                    ", "cell_units", ".", "append", "(", "[", "ci", ",", "cj", "]", ")", "\n", "", "", "", "", "elif", "len", "(", "col_cells", ")", "==", "1", ":", "\n", "        ", "cell_units", "=", "[", "col_cells", "[", "0", "]", ",", "'NaN'", "]", "\n", "", "return", "cell_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.ordered_cells2synthetic_columns": [[19, 29], ["list", "len", "range", "list.append", "list.append", "len", "len"], "function", ["None"], ["", "def", "ordered_cells2synthetic_columns", "(", "col_cells", ",", "synthetic_column_size", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "cell_i", "in", "range", "(", "len", "(", "col_cells", ")", "-", "synthetic_column_size", "+", "1", ")", ":", "\n", "            ", "cell_unit", "=", "col_cells", "[", "cell_i", ":", "cell_i", "+", "synthetic_column_size", "]", "\n", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "", "", "else", ":", "\n", "        ", "cell_unit", "=", "col_cells", "+", "[", "'NaN'", "]", "*", "(", "len", "(", "col_cells", ")", "-", "synthetic_column_size", ")", "\n", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "", "return", "cell_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.random_cells2synthetic_columns": [[31, 44], ["list", "len", "range", "range", "list.append", "list", "range", "list.append", "random.sample", "random.sample"], "function", ["None"], ["", "def", "random_cells2synthetic_columns", "(", "col_cells", ",", "synthetic_column_size", ",", "synthetic_column_num", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "synthetic_column_num", ")", ":", "\n", "            ", "cell_units", ".", "append", "(", "random", ".", "sample", "(", "col_cells", ",", "synthetic_column_size", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "synthetic_column_num", ")", ":", "\n", "            ", "cell_unit", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "synthetic_column_size", ")", ":", "\n", "                ", "cell_unit", "+=", "random", ".", "sample", "(", "col_cells", ",", "1", ")", "\n", "", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "\n", "", "", "return", "cell_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.generate_synthetic_columns": [[46, 57], ["list", "len", "enumerate", "list.append", "random.sample", "random.sample.append", "list.append", "len"], "function", ["None"], ["", "def", "generate_synthetic_columns", "(", "entities", ",", "synthetic_column_size", ")", ":", "\n", "    ", "ent_units", "=", "list", "(", ")", "\n", "if", "len", "(", "entities", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "i", ",", "ent", "in", "enumerate", "(", "entities", ")", ":", "\n", "            ", "unit", "=", "random", ".", "sample", "(", "entities", "[", "0", ":", "i", "]", "+", "entities", "[", "(", "i", "+", "1", ")", ":", "]", ",", "synthetic_column_size", "-", "1", ")", "\n", "unit", ".", "append", "(", "ent", ")", "\n", "ent_units", ".", "append", "(", "unit", ")", "\n", "", "", "else", ":", "\n", "        ", "unit", "=", "entities", "+", "[", "'NaN'", "]", "*", "(", "len", "(", "entities", ")", "-", "synthetic_column_size", ")", "\n", "ent_units", ".", "append", "(", "unit", ")", "\n", "", "return", "ent_units", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.synthetic_columns2sequence": [[59, 71], ["list", "ent.replace().replace().replace().replace().replace().replace", "len", "pattern.text.en.tokenize", "ent.replace().replace().replace().replace().replace", "tokenized_line.lower().split", "word.isalpha", "len", "ent.replace().replace().replace().replace", "tokenized_line.lower", "ent.replace().replace().replace", "ent.replace().replace", "ent.replace"], "function", ["None"], ["", "def", "synthetic_columns2sequence", "(", "ent_units", ",", "sequence_size", ")", ":", "\n", "    ", "word_seq", "=", "list", "(", ")", "\n", "for", "ent", "in", "ent_units", ":", "\n", "        ", "ent_n", "=", "ent", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'.'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", ".", "replace", "(", "'\"'", ",", "' '", ")", ".", "replace", "(", "\"'\"", ",", "' '", ")", "\n", "tokenized_line", "=", "' '", ".", "join", "(", "tokenize", "(", "ent_n", ")", ")", "\n", "is_alpha_word_line", "=", "[", "word", "for", "word", "in", "tokenized_line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "word", ".", "isalpha", "(", ")", "]", "\n", "word_seq", "+=", "is_alpha_word_line", "\n", "", "if", "len", "(", "word_seq", ")", ">=", "sequence_size", ":", "\n", "        ", "return", "word_seq", "[", "0", ":", "sequence_size", "]", "\n", "", "else", ":", "\n", "        ", "return", "word_seq", "+", "[", "'NaN'", "]", "*", "(", "sequence_size", "-", "len", "(", "word_seq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.exp_Limaye.util_cnn.sequence2matrix": [[73, 80], ["numpy.zeros", "enumerate", "w_vec.reshape"], "function", ["None"], ["", "", "def", "sequence2matrix", "(", "word_seq", ",", "sequence_size", ",", "w2v_model", ")", ":", "\n", "    ", "ent_v", "=", "np", ".", "zeros", "(", "(", "sequence_size", ",", "w2v_model", ".", "vector_size", ",", "1", ")", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "word_seq", ")", ":", "\n", "        ", "if", "not", "word", "==", "'NaN'", "and", "word", "in", "w2v_model", ".", "wv", ".", "vocab", ":", "\n", "            ", "w_vec", "=", "w2v_model", ".", "wv", "[", "word", "]", "\n", "ent_v", "[", "i", "]", "=", "w_vec", ".", "reshape", "(", "(", "w2v_model", ".", "vector_size", ",", "1", ")", ")", "\n", "", "", "return", "ent_v", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.T2D_IO.col_split.read_class_cols": [[10, 22], ["dict", "open", "csv.reader", "col.replace.replace", "cls_cols[].append"], "function", ["None"], ["def", "read_class_cols", "(", "gt_file", ")", ":", "\n", "    ", "cls_cols", "=", "dict", "(", ")", "\n", "with", "open", "(", "gt_file", ")", "as", "f", ":", "\n", "        ", "for", "row", "in", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", ":", "\n", "            ", "col", ",", "cls", "=", "row", "[", "0", "]", ",", "row", "[", "1", "]", "\n", "if", "'.csv '", "in", "col", ":", "\n", "                ", "col", "=", "col", ".", "replace", "(", "'.csv '", ",", "' '", ")", "\n", "", "if", "cls", "in", "cls_cols", ":", "\n", "                ", "cls_cols", "[", "cls", "]", ".", "append", "(", "col", ")", "\n", "", "else", ":", "\n", "                ", "cls_cols", "[", "cls", "]", "=", "[", "col", "]", "\n", "", "", "", "return", "cls_cols", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_limaye.read_limaye_columns": [[14, 30], ["os.path.join", "open", "f.readline", "json.loads", "list", "len", "os.path.join", "f.readline.decode", "len", "range", "list", "range", "list.append", "list.append"], "function", ["None"], ["        ", "col_tmp", "=", "col", ".", "split", "(", "' '", ")", "\n", "filename", "=", "col_tmp", "[", "0", "]", "\n", "col_order", "=", "int", "(", "col_tmp", "[", "1", "]", ")", "\n", "col_f", "=", "os", ".", "path", ".", "join", "(", "limaye_dir", ",", "'tables_instance'", ",", "filename", ")", "\n", "cells", "=", "list", "(", ")", "\n", "with", "open", "(", "col_f", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", "==", "''", ":", "\n", "                    ", "tmp_line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "tmp_line", "[", "0", "]", "=", "tmp_line", "[", "0", "]", "[", "1", ":", "]", "\n", "tmp_line", "[", "-", "1", "]", "=", "tmp_line", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "cell", "=", "tmp_line", "[", "col_order", "]", "\n", "if", "not", "cell", "==", "''", ":", "\n", "                        ", "cells", ".", "append", "(", "cell", ")", "\n", "", "", "", "", "col_cells", "[", "col", "]", "=", "cells", "\n", "", "return", "col_cells", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_wikipedia.read_wikipedia_columns": [[15, 57], ["list", "os.path.join", "open", "csv.reader", "enumerate", "open.close", "list", "range", "os.path.join", "list", "list.append", "len", "list", "len", "list.append", "item.decode().encode.replace", "re.findall", "list.append", "item.decode().encode.replace", "item.decode().encode.decode().encode", "list.append", "list.append", "item.decode().encode.decode"], "function", ["None"], ["", "def", "read_wikipedia_columns", "(", "tab_id", ")", ":", "\n", "    ", "rows", "=", "list", "(", ")", "\n", "table_dir", "=", "os", ".", "path", ".", "join", "(", "wikipedia_dir", ",", "'select_tables'", ")", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "table_dir", ",", "(", "'%s.csv'", "%", "tab_id", ")", ")", ")", "\n", "csv_r", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "csv_r", ")", ":", "\n", "\n", "# the size of the first line (often the header)", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "row_len", "=", "len", "(", "line", ")", "\n", "\n", "# from the second line, pad with zero (cut) if the line is shorter (longer) than the first line", "\n", "# ignore the empty line", "\n", "", "else", ":", "\n", "            ", "line2", "=", "list", "(", ")", "\n", "for", "item", "in", "line", ":", "\n", "                ", "item", "=", "item", ".", "replace", "(", "'\\/'", ",", "' '", ")", "\n", "for", "bracket", "in", "re", ".", "findall", "(", "'\\[([0-9]*?)\\]'", ",", "item", ")", ":", "\n", "                    ", "item", "=", "item", ".", "replace", "(", "'['", "+", "bracket", "+", "']'", ",", "' '", ")", "\n", "", "try", ":", "\n", "                    ", "item", "=", "item", ".", "decode", "(", "'unicode-escape'", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "                    ", "item", "=", "''", "\n", "", "line2", ".", "append", "(", "item", ")", "\n", "\n", "", "m", "=", "len", "(", "line2", ")", "\n", "if", "m", ">", "0", ":", "\n", "                ", "if", "m", ">=", "row_len", ":", "\n", "                    ", "row", "=", "line2", "[", "0", ":", "row_len", "]", "\n", "rows", ".", "append", "(", "row", ")", "\n", "", "else", ":", "\n", "                    ", "row", "=", "line2", "+", "[", "''", "]", "*", "(", "row_len", "-", "m", ")", "\n", "rows", ".", "append", "(", "row", ")", "\n", "", "", "", "", "f", ".", "close", "(", ")", "\n", "cols", "=", "list", "(", ")", "\n", "for", "r", "in", "range", "(", "row_len", ")", ":", "\n", "        ", "col", "=", "list", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "col", ".", "append", "(", "row", "[", "r", "]", ")", "\n", "", "cols", ".", "append", "(", "col", ")", "\n", "\n", "", "return", "cols", "\n", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_hnn.HNN.__init__": [[133, 246], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "list", "range", "tensorflow.reshape", "list", "enumerate", "enumerate", "tensorflow.stack", "len", "range", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.concat", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.variable_scope", "tensorflow.python.ops.rnn.bidirectional_dynamic_rnn", "tensorflow.name_scope", "util_rnn.attention", "tensorflow.name_scope", "tensorflow.nn.dropout", "list.append", "tensorflow.stack", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "conv_col_pooled.append", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "conv_row_pooled.append", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "len", "len", "tensorflow.concat", "tensorflow.reshape", "tensorflow.constant", "tensorflow.argmax", "tensorflow.cast", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.variable_scope", "tensorflow.python.ops.rnn.bidirectional_dynamic_rnn", "tensorflow.name_scope", "util_rnn.attention", "tensorflow.name_scope", "tensorflow.nn.dropout", "list.append", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.attention", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.attention"], ["    ", "def", "__init__", "(", "self", ",", "micro_table_size", ",", "sequence_length", ",", "num_classes", ",", "channel_num", ",", "rnn_hidden_size", ",", "attention_size", ",", "\n", "col_filters", ",", "row_filters", ",", "num_filters", ",", "num_cell_features", ")", ":", "\n", "        ", "M", ",", "N", "=", "micro_table_size", "\n", "rnn_dim", "=", "2", "*", "rnn_hidden_size", "\n", "\n", "self", ".", "input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "M", ",", "(", "N", "+", "1", ")", ",", "sequence_length", ",", "channel_num", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# encode each cell of the target column", "\n", "# by bidirectional RNN, attention layer, dropout layer", "\n", "col_att_drops", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "M", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'col_rnn_%d'", "%", "i", ")", ":", "\n", "                ", "rnn_outputs", ",", "_", "=", "bi_rnn", "(", "GRUCell", "(", "rnn_hidden_size", ")", ",", "GRUCell", "(", "rnn_hidden_size", ")", ",", "\n", "inputs", "=", "self", ".", "input_x", "[", ":", ",", "i", ",", "0", ",", ":", ",", ":", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'col_attention_layer_%d'", "%", "i", ")", ":", "\n", "                ", "att_output", ",", "alphas", "=", "attention", "(", "rnn_outputs", ",", "attention_size", ",", "return_alphas", "=", "True", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "\"col_dropout_%d\"", "%", "i", ")", ":", "\n", "                ", "att_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "att_output", ",", "self", ".", "dropout_keep_prob", ")", "\n", "col_att_drops", ".", "append", "(", "att_drop", ")", "\n", "", "", "self", ".", "col_atts", "=", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "col_att_drops", ",", "axis", "=", "1", ")", ",", "[", "-", "1", ",", "M", ",", "1", ",", "rnn_dim", "]", ")", "\n", "\n", "row_att_drops", "=", "list", "(", ")", "\n", "if", "len", "(", "row_filters", ")", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "N", "+", "1", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'row_rnn_%d'", "%", "i", ")", ":", "\n", "                    ", "rnn_outputs", ",", "_", "=", "bi_rnn", "(", "GRUCell", "(", "rnn_hidden_size", ")", ",", "GRUCell", "(", "rnn_hidden_size", ")", ",", "\n", "inputs", "=", "self", ".", "input_x", "[", ":", ",", "0", ",", "i", ",", ":", ",", ":", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'row_attention_layer_%d'", "%", "i", ")", ":", "\n", "                    ", "att_output", ",", "alphas", "=", "attention", "(", "rnn_outputs", ",", "attention_size", ",", "return_alphas", "=", "True", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "\"row_dropout_%d\"", "%", "i", ")", ":", "\n", "                    ", "att_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "att_output", ",", "self", ".", "dropout_keep_prob", ")", "\n", "row_att_drops", ".", "append", "(", "att_drop", ")", "\n", "", "", "self", ".", "row_atts", "=", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "row_att_drops", ",", "axis", "=", "2", ")", ",", "[", "-", "1", ",", "1", ",", "N", "+", "1", ",", "rnn_dim", "]", ")", "\n", "\n", "# Conv layer", "\n", "# Get col features over the target column, i.e., col_filters", "\n", "", "conv_col_pooled", "=", "[", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "col_filters", ")", ":", "\n", "            ", "x_col_0", "=", "self", ".", "col_atts", "\n", "with", "tf", ".", "name_scope", "(", "\"conv-col-%d\"", "%", "f", ")", ":", "\n", "                ", "f_shape", "=", "[", "f", ",", "1", ",", "rnn_dim", ",", "num_filters", "]", "\n", "Conv_W", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "f_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"conv_%d_W\"", "%", "f", ")", "\n", "Conv_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filters", "]", ")", ",", "name", "=", "\"conv_%d_b\"", "%", "f", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "x_col_0", ",", "Conv_W", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"VALID\"", ",", "name", "=", "\"conv_%d\"", "%", "f", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "Conv_b", ")", ",", "name", "=", "\"relu_%d\"", "%", "f", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "h", ",", "ksize", "=", "[", "1", ",", "M", "-", "f", "+", "1", ",", "1", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool_%s\"", "%", "f", ")", "\n", "conv_col_pooled", ".", "append", "(", "pooled", ")", "\n", "\n", "# Get col (context) features, i.e., row_filters", "\n", "", "", "conv_row_pooled", "=", "[", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "row_filters", ")", ":", "\n", "            ", "x_row_0", "=", "self", ".", "row_atts", "\n", "with", "tf", ".", "name_scope", "(", "'conv-row-%d'", "%", "f", ")", ":", "\n", "                ", "f_shape", "=", "[", "1", ",", "f", ",", "rnn_dim", ",", "num_filters", "]", "\n", "Conv_W", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "f_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"conv_%d_W\"", "%", "f", ")", "\n", "Conv_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filters", "]", ")", ",", "name", "=", "\"conv_%d_b\"", "%", "f", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "x_row_0", ",", "Conv_W", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"VALID\"", ",", "name", "=", "\"conv_%d\"", "%", "f", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "Conv_b", ")", ",", "name", "=", "\"relu_%d\"", "%", "f", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "h", ",", "ksize", "=", "[", "1", ",", "1", ",", "N", "+", "1", "-", "f", "+", "1", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "name", "=", "\"pool_%d\"", "%", "f", ")", "\n", "conv_row_pooled", ".", "append", "(", "pooled", ")", "\n", "\n", "# Feature of the cell", "\n", "", "", "if", "num_cell_features", ">", "0", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'cell'", ")", ":", "\n", "                ", "Cell_W", "=", "tf", ".", "get_variable", "(", "\"Cell_W\"", ",", "shape", "=", "[", "rnn_dim", ",", "num_cell_features", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "Cell_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_cell_features", "]", ")", ",", "name", "=", "\"Cell_b\"", ")", "\n", "self", ".", "cell_f", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "col_atts", "[", ":", ",", "0", ",", "0", ",", ":", "]", ",", "Cell_W", ",", "Cell_b", ",", "name", "=", "'cell_feature'", ")", "\n", "\n", "# col/row Conv features + cell features", "\n", "", "", "num_filters_total", "=", "num_filters", "*", "(", "len", "(", "conv_col_pooled", ")", "+", "len", "(", "conv_row_pooled", ")", ")", "\n", "if", "num_filters_total", ">", "0", "and", "num_cell_features", ">", "0", ":", "\n", "            ", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "conv_col_pooled", "+", "conv_row_pooled", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ")", "\n", "\n", "self", ".", "feature", "=", "tf", ".", "concat", "(", "[", "self", ".", "cell_f", ",", "self", ".", "h_pool_flat", "]", ",", "1", ")", "\n", "num_features", "=", "num_filters_total", "+", "num_cell_features", "\n", "\n", "# cell features", "\n", "", "elif", "num_filters_total", "==", "0", "and", "num_cell_features", ">", "0", ":", "\n", "            ", "self", ".", "feature", "=", "self", ".", "cell_f", "\n", "num_features", "=", "num_cell_features", "\n", "\n", "# col/row Conv features", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "conv_col_pooled", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ")", "\n", "self", ".", "feature", "=", "self", ".", "h_pool_flat", "\n", "num_features", "=", "num_filters_total", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "feature_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "feature", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "# FC layer", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "FC_W", "=", "tf", ".", "get_variable", "(", "\"FC_W\"", ",", "shape", "=", "[", "num_features", ",", "num_classes", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "FC_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_classes", "]", ")", ",", "name", "=", "\"FC_b\"", ")", "\n", "self", ".", "fc_out", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "feature_drop", ",", "FC_W", ",", "FC_b", ",", "name", "=", "\"FC_out\"", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "fc_out", ",", "name", "=", "'scores'", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "fc_out", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_hnn.hnn_train": [[9, 87], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.as_default", "util_hnn.HNN", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.compute_gradients", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.summary.merge", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "os.path.join", "tensorflow.summary.FileWriter", "os.path.abspath", "os.path.join", "tensorflow.train.Saver", "tf.Session.run", "util_rnn.batch_iter", "util_hnn.hnn_train.train_eva"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_cnn.batch_iter"], ["def", "hnn_train", "(", "x_train", ",", "y_train", ",", "FLAGS", ",", "w2v_model", ",", "hnn_dir", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "session_conf", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "\n", "            ", "hnn", "=", "HNN", "(", "micro_table_size", "=", "FLAGS", ".", "micro_table_size", ",", "sequence_length", "=", "FLAGS", ".", "cell_seq_size", ",", "\n", "num_classes", "=", "y_train", ".", "shape", "[", "1", "]", ",", "channel_num", "=", "w2v_model", ".", "vector_size", ",", "\n", "rnn_hidden_size", "=", "FLAGS", ".", "rnn_hidden_size", ",", "attention_size", "=", "FLAGS", ".", "attention_size", ",", "\n", "col_filters", "=", "FLAGS", ".", "col_filters", ",", "row_filters", "=", "FLAGS", ".", "row_filters", ",", "\n", "num_filters", "=", "FLAGS", ".", "num_filters", ",", "num_cell_features", "=", "FLAGS", ".", "num_cell_features", ")", "\n", "\n", "# Define Training procedure", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "1e-3", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "hnn", ".", "loss", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "\n", "# Keep track of gradient values and sparsity (optional)", "\n", "grad_summaries", "=", "[", "]", "\n", "for", "g", ",", "v", "in", "grads_and_vars", ":", "\n", "                ", "if", "g", "is", "not", "None", ":", "\n", "                    ", "grad_hist_summary", "=", "tf", ".", "summary", ".", "histogram", "(", "\"{}/grad/hist\"", ".", "format", "(", "v", ".", "name", ")", ",", "g", ")", "\n", "sparsity_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"{}/grad/sparsity\"", ".", "format", "(", "v", ".", "name", ")", ",", "tf", ".", "nn", ".", "zero_fraction", "(", "g", ")", ")", "\n", "grad_summaries", ".", "append", "(", "grad_hist_summary", ")", "\n", "grad_summaries", ".", "append", "(", "sparsity_summary", ")", "\n", "", "", "grad_summaries_merged", "=", "tf", ".", "summary", ".", "merge", "(", "grad_summaries", ")", "\n", "\n", "# Summaries for loss and accuracy", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "hnn", ".", "loss", ")", "\n", "acc_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"accuracy\"", ",", "hnn", ".", "accuracy", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", ",", "acc_summary", ",", "grad_summaries_merged", "]", ")", "\n", "train_summary_dir", "=", "os", ".", "path", ".", "join", "(", "hnn_dir", ",", "\"summaries\"", ",", "\"train\"", ")", "\n", "train_summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "train_summary_dir", ",", "sess", ".", "graph", ")", "\n", "\n", "# Checkpoint directory", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "hnn_dir", ",", "\"checkpoints\"", ")", ")", "\n", "checkpoint_prefix", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"model\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "5", ")", "\n", "\n", "# Initialize all variables", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "def", "train_step", "(", "train_x_batch", ",", "train_y_batch", ")", ":", "\n", "                ", "feed_dict", "=", "{", "\n", "hnn", ".", "input_x", ":", "train_x_batch", ",", "\n", "hnn", ".", "input_y", ":", "train_y_batch", ",", "\n", "hnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "_", ",", "step", ",", "summaries", ",", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "train_summary_op", ",", "hnn", ".", "loss", ",", "hnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "\n", "if", "step", "%", "FLAGS", ".", "evaluate_every", "==", "0", ":", "\n", "                    ", "print", "(", "\"\\t {}: step {}, train loss {:g}, train acc {:g}\"", ".", "format", "(", "time_str", ",", "step", ",", "loss", ",", "accuracy", ")", ")", "\n", "", "train_summary_writer", ".", "add_summary", "(", "summaries", ",", "step", ")", "\n", "\n", "", "def", "train_eva", "(", "train_x_all", ",", "train_y_all", ")", ":", "\n", "                ", "feed_dict", "=", "{", "\n", "hnn", ".", "input_x", ":", "train_x_all", ",", "\n", "hnn", ".", "input_y", ":", "train_y_all", ",", "\n", "hnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "[", "hnn", ".", "loss", ",", "hnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "print", "(", "\"\\t finally, train loss {:g}, train acc {:g}\"", ".", "format", "(", "loss", ",", "accuracy", ")", ")", "\n", "\n", "", "batches", "=", "batch_iter", "(", "list", "(", "zip", "(", "x_train", ",", "y_train", ")", ")", ",", "FLAGS", ".", "num_epochs", ",", "FLAGS", ".", "batch_size", ")", "\n", "current_step", "=", "0", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "x_batch", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "train_step", "(", "x_batch", ",", "y_batch", ")", "\n", "current_step", "=", "tf", ".", "train", ".", "global_step", "(", "sess", ",", "global_step", ")", "\n", "\n", "", "train_eva", "(", "x_train", ",", "y_train", ")", "\n", "\n", "path", "=", "saver", ".", "save", "(", "sess", ",", "checkpoint_prefix", ",", "global_step", "=", "current_step", ")", "\n", "print", "(", "\"\\t Saved model checkpoint to {}\\n\"", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_hnn.hnn_predict": [[94, 118], ["os.path.join", "tensorflow.train.latest_checkpoint", "tensorflow.Graph", "tf.Graph.as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.as_default", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tf.Session.run", "tf.Session.run", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name"], "function", ["None"], ["def", "hnn_predict", "(", "test_x", ",", "hnn_dir", ",", "need_fc_out", ")", ":", "\n", "    ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "hnn_dir", ",", "'checkpoints'", ")", "\n", "checkpoint_file", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "checkpoint_dir", ")", "\n", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "session_conf", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "# Load the saved meta graph and restore variables", "\n", "            ", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "\"{}.meta\"", ".", "format", "(", "checkpoint_file", ")", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint_file", ")", "\n", "input_x", "=", "graph", ".", "get_operation_by_name", "(", "\"input_x\"", ")", ".", "outputs", "[", "0", "]", "\n", "dropout_keep_prob", "=", "graph", ".", "get_operation_by_name", "(", "\"dropout_keep_prob\"", ")", ".", "outputs", "[", "0", "]", "\n", "scores", "=", "graph", ".", "get_operation_by_name", "(", "\"output/scores\"", ")", ".", "outputs", "[", "0", "]", "\n", "if", "need_fc_out", ":", "\n", "                ", "FC_out", "=", "graph", ".", "get_operation_by_name", "(", "\"output/FC_out\"", ")", ".", "outputs", "[", "0", "]", "\n", "test_y", ",", "test_fc_out", "=", "sess", ".", "run", "(", "[", "scores", ",", "FC_out", "]", ",", "{", "input_x", ":", "test_x", ",", "dropout_keep_prob", ":", "1.0", "}", ")", "\n", "", "else", ":", "\n", "                ", "test_y", "=", "sess", ".", "run", "(", "scores", ",", "{", "input_x", ":", "test_x", ",", "dropout_keep_prob", ":", "1.0", "}", ")", "\n", "test_fc_out", "=", "None", "\n", "\n", "", "", "", "return", "test_y", ",", "test_fc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_t2d.read_t2d_columns": [[16, 26], ["os.path.join", "open", "f.readline", "json.loads", "list", "os.path.join", "f.readline.decode", "list.append"], "function", ["None"], ["with", "open", "(", "os", ".", "path", ".", "join", "(", "t2d_dir", ",", "'col_class_checked_fg.csv'", ")", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line_tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\",\"'", ")", "\n", "line_tmp", "[", "0", "]", "=", "line_tmp", "[", "0", "]", "[", "1", ":", "]", "\n", "line_tmp", "[", "-", "1", "]", "=", "line_tmp", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "tab_id", "=", "line_tmp", "[", "0", "]", "\n", "col_id", "=", "line_tmp", "[", "1", "]", "\n", "tab_col", "=", "'%s %s'", "%", "(", "tab_id", ",", "col_id", ")", "\n", "tab_cols", ".", "append", "(", "tab_col", ")", "\n", "", "", "return", "tab_cols", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.lookup_entities": [[17, 42], ["list", "list", "re.findall", "cell_text.replace.strip", "cell_text.replace.replace", "len", "list.append", "len", "list.append", "requests.get", "cell_bracket.strip", "xml.fromstring", "list.append"], "function", ["None"], ["for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "cell_text", "=", "cell_text", ".", "replace", "(", "'(%s)'", "%", "cell_bracket", ",", "''", ")", "\n", "", "cell_text", "=", "cell_text", ".", "strip", "(", ")", "\n", "if", "len", "(", "cell_text", ")", ">", "2", ":", "\n", "        ", "cell_items", ".", "append", "(", "cell_text", ")", "\n", "", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "if", "len", "(", "cell_bracket", ")", ">", "2", ":", "\n", "            ", "cell_items", ".", "append", "(", "cell_bracket", ".", "strip", "(", ")", ")", "\n", "", "", "for", "cell_item", "in", "cell_items", ":", "\n", "        ", "try", ":", "\n", "            ", "lookup_url", "=", "'http://lookup.dbpedia.org/api/search/KeywordSearch?MaxHits=2&QueryString=%s'", "%", "cell_item", "\n", "lookup_res", "=", "requests", ".", "get", "(", "lookup_url", ")", "\n", "root", "=", "ET", ".", "fromstring", "(", "lookup_res", ".", "content", ")", "\n", "for", "child", "in", "root", ":", "\n", "                ", "entity", "=", "child", "[", "1", "]", ".", "text", ".", "split", "(", "dbp_prefix", ")", "[", "1", "]", "\n", "classes", "=", "list", "(", ")", "\n", "for", "cc", "in", "child", "[", "3", "]", ":", "\n", "                    ", "cls_URI", "=", "cc", "[", "1", "]", ".", "text", "\n", "if", "dbo_prefix", "in", "cls_URI", ":", "\n", "                        ", "classes", ".", "append", "(", "cls_URI", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", ")", "\n", "", "", "entity_classes", "[", "entity", "]", "=", "classes", "\n", "", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pass", "\n", "", "", "return", "entity_classes", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.lookup_entities_with_repeat": [[45, 74], ["list", "list", "re.findall", "cell_text.replace.strip", "cell_text.replace.replace", "len", "list.append", "len", "list.append", "requests.get", "cell_bracket.strip", "time.sleep", "requests.get", "xml.fromstring", "list.append"], "function", ["None"], ["    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "cell_items", "=", "list", "(", ")", "\n", "cell_brackets", "=", "re", ".", "findall", "(", "'\\((.*?)\\)'", ",", "cell_text", ")", "\n", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "cell_text", "=", "cell_text", ".", "replace", "(", "'(%s)'", "%", "cell_bracket", ",", "''", ")", "\n", "", "cell_text", "=", "cell_text", ".", "strip", "(", ")", "\n", "if", "len", "(", "cell_text", ")", ">", "2", ":", "\n", "        ", "cell_items", ".", "append", "(", "cell_text", ")", "\n", "", "for", "cell_bracket", "in", "cell_brackets", ":", "\n", "        ", "if", "len", "(", "cell_bracket", ")", ">", "2", ":", "\n", "            ", "cell_items", ".", "append", "(", "cell_bracket", ".", "strip", "(", ")", ")", "\n", "", "", "for", "cell_item", "in", "cell_items", ":", "\n", "        ", "try", ":", "\n", "            ", "lookup_url", "=", "'http://lookup.dbpedia.org/api/search/KeywordSearch?MaxHits=1&QueryString=%s'", "%", "cell_item", "\n", "lookup_res", "=", "requests", ".", "get", "(", "lookup_url", ")", "\n", "root", "=", "ET", ".", "fromstring", "(", "lookup_res", ".", "content", ")", "\n", "for", "child", "in", "root", ":", "\n", "                ", "classes", "=", "set", "(", ")", "\n", "for", "c", "in", "child", "[", "3", "]", ":", "\n", "                    ", "cls_uri", "=", "c", "[", "1", "]", ".", "text", "\n", "if", "dbo_prefix", "in", "cls_uri", ":", "\n", "                        ", "classes", ".", "add", "(", "cls_uri", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", ")", "\n", "", "", "return", "classes", "\n", "", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pass", "\n", "", "", "return", "set", "(", ")", "\n", "\n", "\n", "# Query DBPedia", "\n", "", "def", "query_general_entities", "(", "cls_entities", ")", ":", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.lookup_entities_with_partial": [[78, 128], ["list", "re.findall", "cell_text.replace.strip", "cell_text.replace.replace", "cell_text.replace.replace", "requests.get", "cell_origin.split", "xml.fromstring", "len", "s.strip.strip", "len", "len", "list.append", "requests.get", "len", "requests.get", "xml.fromstring", "xml.fromstring", "len", "list.append", "len", "list.append"], "function", ["None"], ["for", "cls", "in", "cls_entities", ".", "keys", "(", ")", ":", "\n", "        ", "par_entities", "=", "cls_entities", "[", "cls", "]", "\n", "entities", "=", "list", "(", ")", "\n", "statement", "=", "'select distinct ?e where {?e a dbo:%s} ORDER BY RAND() limit 1000'", "%", "cls", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "ent_uri", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "ent", "=", "ent_uri", ".", "split", "(", "dbp_prefix", ")", "[", "1", "]", "\n", "if", "ent", "not", "in", "par_entities", ":", "\n", "                ", "entities", ".", "append", "(", "ent", ")", "\n", "", "", "cls_gen_entities", "[", "cls", "]", "=", "entities", "\n", "print", "(", "'%s done, %d entities'", "%", "(", "cls", ",", "len", "(", "entities", ")", ")", ")", "\n", "", "return", "cls_gen_entities", "\n", "\n", "\n", "# extend table's classes with super classes", "\n", "", "def", "super_classes", "(", "col_classes", ")", ":", "\n", "    ", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "i", ",", "col", "in", "enumerate", "(", "col_classes", ".", "keys", "(", ")", ")", ":", "\n", "        ", "ori_cls", "=", "col_classes", "[", "col", "]", "[", "0", "]", "\n", "statement", "=", "'SELECT distinct ?superclass WHERE { dbo:%s rdfs:subClassOf* ?superclass. '", "'FILTER ( strstarts(str(?superclass), \"%s\"))}'", "%", "(", "ori_cls", ",", "dbo_prefix", ")", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "super_cls", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "super_cls_name", "=", "super_cls", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", "\n", "if", "super_cls_name", "not", "in", "col_classes", "[", "col", "]", ":", "\n", "                ", "col_classes", "[", "col", "]", ".", "append", "(", "super_cls_name", ")", "\n", "", "", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'%d columns done'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "", "return", "col_classes", "\n", "\n", "\n", "# extend classes with their super classes", "\n", "", "def", "super_classes_of_classes", "(", "classes", ")", ":", "\n", "    ", "super_clses", "=", "dict", "(", ")", "\n", "dbo_prefix", "=", "'http://dbpedia.org/ontology/'", "\n", "s", "=", "sparql", ".", "Service", "(", "'http://dbpedia.org/sparql'", ",", "\"utf-8\"", ",", "\"GET\"", ")", "\n", "for", "cls", "in", "classes", ":", "\n", "        ", "supers", "=", "set", "(", ")", "\n", "statement", "=", "'SELECT distinct ?superclass WHERE { dbo:%s rdfs:subClassOf* ?superclass. '", "'FILTER ( strstarts(str(?superclass), \"%s\"))}'", "%", "(", "cls", ",", "dbo_prefix", ")", "\n", "result", "=", "s", ".", "query", "(", "statement", ")", "\n", "for", "row", "in", "result", ".", "fetchone", "(", ")", ":", "\n", "            ", "super_str", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "super_name", "=", "super_str", ".", "split", "(", "dbo_prefix", ")", "[", "1", "]", "\n", "if", "super_name", "not", "in", "supers", ":", "\n", "                ", "supers", ".", "add", "(", "super_name", ")", "\n", "\n", "", "", "super_clses", "[", "cls", "]", "=", "supers", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.query_complete_classes_of_entity": [[132, 160], ["ent.startswith", "set", "sparql.Service", "sparql.Service.query", "s.query.fetchone", "sparql.Service.query", "s.query.fetchone", "ent.split", "str", "set.add", "str", "set.add", "print", "str.split", "str.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.query_complete_classes_of_entity_with_repeat": [[163, 201], ["ent.startswith", "set", "sparql.Service", "s.query.fetchone", "s.query.fetchone", "ent.split", "sparql.Service.query", "str", "set.add", "sparql.Service.query", "str", "set.add", "print", "time.sleep", "sparql.Service.query", "str.split", "time.sleep", "sparql.Service.query", "str.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.query_property_ent_num": [[206, 218], ["dict", "sparql.Service", "sparql.Service.query", "s.query.fetchone", "str", "int", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.query_ent_num": [[222, 228], ["sparql.Service", "sparql.Service.query", "s.query.fetchone", "int", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_kb.query_property_object": [[233, 251], ["sparql.Service", "s.query.fetchone", "sparql.Service.query", "time.sleep", "sparql.Service.query", "str", "pro_obj_s.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.AttRNN.__init__": [[177, 211], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.python.ops.rnn.bidirectional_dynamic_rnn", "tensorflow.contrib.rnn.GRUCell", "tensorflow.contrib.rnn.GRUCell", "tensorflow.name_scope", "util_rnn.attention", "tensorflow.summary.histogram", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.argmax", "tensorflow.cast", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.attention"], ["    ", "def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "channel_num", ",", "rnn_hidden_size", ",", "attention_size", ")", ":", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "sequence_length", ",", "channel_num", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# Bidirectional RNN", "\n", "self", ".", "rnn_outputs", ",", "_", "=", "bi_rnn", "(", "GRUCell", "(", "rnn_hidden_size", ")", ",", "GRUCell", "(", "rnn_hidden_size", ")", ",", "\n", "inputs", "=", "self", ".", "input_x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Attention layer", "\n", "with", "tf", ".", "name_scope", "(", "'Attention_layer'", ")", ":", "\n", "            ", "self", ".", "att_output", ",", "alphas", "=", "attention", "(", "self", ".", "rnn_outputs", ",", "attention_size", ",", "return_alphas", "=", "True", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'alphas'", ",", "alphas", ")", "\n", "\n", "# Dropout layer", "\n", "", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "att_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "att_output", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "# FC layer", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "FC_W", "=", "tf", ".", "get_variable", "(", "\"FC_W\"", ",", "shape", "=", "[", "rnn_hidden_size", "*", "2", ",", "num_classes", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "FC_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_classes", "]", ")", ",", "name", "=", "\"FC_b\"", ")", "\n", "self", ".", "fc_out", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "att_drop", ",", "FC_W", ",", "FC_b", ",", "name", "=", "\"FC_out\"", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "fc_out", ",", "name", "=", "'scores'", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "fc_out", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.rnn_train": [[9, 84], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.as_default", "util_rnn.AttRNN", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.compute_gradients", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.summary.merge", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "os.path.join", "tensorflow.summary.FileWriter", "os.path.abspath", "os.path.join", "tensorflow.train.Saver", "tf.Session.run", "util_rnn.batch_iter", "util_rnn.rnn_train.train_eva"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_cnn.batch_iter"], ["def", "rnn_train", "(", "x_train", ",", "y_train", ",", "FLAGS", ",", "w2v_model", ",", "rnn_dir", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "session_conf", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "rnn", "=", "AttRNN", "(", "sequence_length", "=", "FLAGS", ".", "cell_seq_size", ",", "num_classes", "=", "y_train", ".", "shape", "[", "1", "]", ",", "\n", "channel_num", "=", "w2v_model", ".", "vector_size", ",", "rnn_hidden_size", "=", "FLAGS", ".", "rnn_hidden_size", ",", "\n", "attention_size", "=", "FLAGS", ".", "attention_size", ")", "\n", "\n", "# Define Training procedure", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "1e-3", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "rnn", ".", "loss", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "\n", "# Keep track of gradient values and sparsity (optional)", "\n", "grad_summaries", "=", "[", "]", "\n", "for", "g", ",", "v", "in", "grads_and_vars", ":", "\n", "                ", "if", "g", "is", "not", "None", ":", "\n", "                    ", "grad_hist_summary", "=", "tf", ".", "summary", ".", "histogram", "(", "\"{}/grad/hist\"", ".", "format", "(", "v", ".", "name", ")", ",", "g", ")", "\n", "sparsity_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"{}/grad/sparsity\"", ".", "format", "(", "v", ".", "name", ")", ",", "tf", ".", "nn", ".", "zero_fraction", "(", "g", ")", ")", "\n", "grad_summaries", ".", "append", "(", "grad_hist_summary", ")", "\n", "grad_summaries", ".", "append", "(", "sparsity_summary", ")", "\n", "", "", "grad_summaries_merged", "=", "tf", ".", "summary", ".", "merge", "(", "grad_summaries", ")", "\n", "\n", "# Summaries for loss and accuracy", "\n", "loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "rnn", ".", "loss", ")", "\n", "acc_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "\"accuracy\"", ",", "rnn", ".", "accuracy", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_summary", ",", "acc_summary", ",", "grad_summaries_merged", "]", ")", "\n", "train_summary_dir", "=", "os", ".", "path", ".", "join", "(", "rnn_dir", ",", "\"summaries\"", ",", "\"train\"", ")", "\n", "train_summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "train_summary_dir", ",", "sess", ".", "graph", ")", "\n", "\n", "# Checkpoint directory", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "rnn_dir", ",", "\"checkpoints\"", ")", ")", "\n", "checkpoint_prefix", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"model\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "5", ")", "\n", "\n", "# Initialize all variables", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "def", "train_step", "(", "train_x_batch", ",", "train_y_batch", ")", ":", "\n", "                ", "feed_dict", "=", "{", "\n", "rnn", ".", "input_x", ":", "train_x_batch", ",", "\n", "rnn", ".", "input_y", ":", "train_y_batch", ",", "\n", "rnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "_", ",", "step", ",", "summaries", ",", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "train_summary_op", ",", "rnn", ".", "loss", ",", "rnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "\n", "if", "step", "%", "FLAGS", ".", "evaluate_every", "==", "0", ":", "\n", "                    ", "print", "(", "\"\\t {}: step {}, train loss {:g}, train acc {:g}\"", ".", "format", "(", "time_str", ",", "step", ",", "loss", ",", "accuracy", ")", ")", "\n", "", "train_summary_writer", ".", "add_summary", "(", "summaries", ",", "step", ")", "\n", "\n", "", "def", "train_eva", "(", "train_x_all", ",", "train_y_all", ")", ":", "\n", "                ", "feed_dict", "=", "{", "\n", "rnn", ".", "input_x", ":", "train_x_all", ",", "\n", "rnn", ".", "input_y", ":", "train_y_all", ",", "\n", "rnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "[", "rnn", ".", "loss", ",", "rnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "print", "(", "\"\\t finally, train loss {:g}, train acc {:g}\"", ".", "format", "(", "loss", ",", "accuracy", ")", ")", "\n", "\n", "", "batches", "=", "batch_iter", "(", "list", "(", "zip", "(", "x_train", ",", "y_train", ")", ")", ",", "FLAGS", ".", "num_epochs", ",", "FLAGS", ".", "batch_size", ")", "\n", "current_step", "=", "0", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "x_batch", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "train_step", "(", "x_batch", ",", "y_batch", ")", "\n", "current_step", "=", "tf", ".", "train", ".", "global_step", "(", "sess", ",", "global_step", ")", "\n", "\n", "", "train_eva", "(", "x_train", ",", "y_train", ")", "\n", "\n", "path", "=", "saver", ".", "save", "(", "sess", ",", "checkpoint_prefix", ",", "global_step", "=", "current_step", ")", "\n", "print", "(", "\"\\t Saved model checkpoint to {}\\n\"", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.rnn_predict": [[90, 110], ["os.path.join", "tensorflow.train.latest_checkpoint", "tensorflow.Graph", "tf.Graph.as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.as_default", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tf.Session.run", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name"], "function", ["None"], ["def", "rnn_predict", "(", "test_x", ",", "rnn_dir", ")", ":", "\n", "    ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "rnn_dir", ",", "'checkpoints'", ")", "\n", "checkpoint_file", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "checkpoint_dir", ")", "\n", "\n", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "session_conf", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "# Load the saved meta graph and restore variables", "\n", "            ", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "\"{}.meta\"", ".", "format", "(", "checkpoint_file", ")", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint_file", ")", "\n", "input_x", "=", "graph", ".", "get_operation_by_name", "(", "\"input_x\"", ")", ".", "outputs", "[", "0", "]", "\n", "dropout_keep_prob", "=", "graph", ".", "get_operation_by_name", "(", "\"dropout_keep_prob\"", ")", ".", "outputs", "[", "0", "]", "\n", "scores", "=", "graph", ".", "get_operation_by_name", "(", "\"output/scores\"", ")", ".", "outputs", "[", "0", "]", "\n", "\n", "test_y", "=", "sess", ".", "run", "(", "scores", ",", "{", "input_x", ":", "test_x", ",", "dropout_keep_prob", ":", "1.0", "}", ")", "\n", "\n", "", "", "return", "test_y", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.batch_iter": [[115, 133], ["numpy.array", "len", "range", "int", "numpy.random.permutation", "range", "numpy.arange", "min"], "function", ["None"], ["def", "batch_iter", "(", "data", ",", "num_epochs", ",", "batch_size", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "data_size", "=", "len", "(", "data", ")", "\n", "num_batches", "=", "int", "(", "(", "data_size", "-", "1", ")", "/", "batch_size", ")", "+", "1", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "batch_shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "data_size", ")", ")", "\n", "shuffled_data", "=", "data", "[", "batch_shuffle_indices", "]", "\n", "", "else", ":", "\n", "            ", "shuffled_data", "=", "data", "\n", "\n", "", "if", "num_batches", ">", "0", ":", "\n", "            ", "for", "batch_num", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "start_index", "=", "batch_num", "*", "batch_size", "\n", "end_index", "=", "min", "(", "(", "batch_num", "+", "1", ")", "*", "batch_size", ",", "data_size", ")", "\n", "yield", "shuffled_data", "[", "start_index", ":", "end_index", "]", "\n", "", "", "else", ":", "\n", "            ", "yield", "shuffled_data", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_rnn.attention": [[141, 169], ["isinstance", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.tensordot", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.array_ops.transpose", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.name_scope", "tensorflow.tanh", "tensorflow.expand_dims", "tensorflow.tensordot"], "function", ["None"], ["def", "attention", "(", "inputs", ",", "attention_size", ",", "time_major", "=", "False", ",", "return_alphas", "=", "False", ")", ":", "\n", "# In case of Bi-RNN, concatenate the forward and the backward RNN outputs.", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "2", ")", "\n", "\n", "", "if", "time_major", ":", "\n", "        ", "inputs", "=", "tf", ".", "array_ops", ".", "transpose", "(", "inputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "", "hidden_size", "=", "inputs", ".", "shape", "[", "2", "]", ".", "value", "# D value - hidden size of the RNN layer", "\n", "\n", "# Trainable parameters", "\n", "w_omega", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "hidden_size", ",", "attention_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "b_omega", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "attention_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "u_omega", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "attention_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'v'", ")", ":", "\n", "# Applying fully connected layer with non-linear activation to each of the B*T timestamps;", "\n", "#  the shape of `v` is (B,T,D)*(D,A)=(B,T,A), where A=attention_size", "\n", "        ", "v", "=", "tf", ".", "tanh", "(", "tf", ".", "tensordot", "(", "inputs", ",", "w_omega", ",", "axes", "=", "1", ")", "+", "b_omega", ")", "\n", "\n", "# For each of the timestamps its vector of size A from `v` is reduced with `u` vector", "\n", "", "vu", "=", "tf", ".", "tensordot", "(", "v", ",", "u_omega", ",", "axes", "=", "1", ",", "name", "=", "'vu'", ")", "# (B,T) shape", "\n", "alphas", "=", "tf", ".", "nn", ".", "softmax", "(", "vu", ",", "name", "=", "'alphas'", ")", "# (B,T) shape", "\n", "\n", "# Output of (Bi-)RNN is reduced with attention vector; the result has (B,D) shape", "\n", "output", "=", "tf", ".", "reduce_sum", "(", "inputs", "*", "tf", ".", "expand_dims", "(", "alphas", ",", "-", "1", ")", ",", "1", ")", "\n", "\n", "return", "output", "if", "not", "return_alphas", "else", "output", ",", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Is_Number_Col": [[11, 25], ["util_micro_table.Is_Number", "cell.strip", "float", "float"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Is_Number"], ["def", "Is_Number_Col", "(", "col_cells", ")", ":", "\n", "    ", "threshold", "=", "0.7", "\n", "num_cell", ",", "non_empty", "=", "0", ",", "0", "\n", "for", "cell", "in", "col_cells", ":", "\n", "        ", "if", "cell", ".", "strip", "(", ")", "!=", "''", ":", "\n", "            ", "non_empty", "+=", "1", "\n", "\n", "", "if", "Is_Number", "(", "cell", ")", ":", "\n", "            ", "num_cell", "+=", "1", "\n", "\n", "", "", "if", "non_empty", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "float", "(", "num_cell", ")", "/", "float", "(", "non_empty", ")", ">=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Is_Number": [[28, 42], ["float", "unicodedata.numeric"], "function", ["None"], ["", "", "def", "Is_Number", "(", "s", ")", ":", "\n", "    ", "num_flag", "=", "False", "\n", "try", ":", "\n", "        ", "float", "(", "s", ")", "\n", "num_flag", "=", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "if", "not", "num_flag", ":", "\n", "        ", "try", ":", "\n", "            ", "unicodedata", ".", "numeric", "(", "s", ")", "\n", "num_flag", "=", "True", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "            ", "pass", "\n", "", "", "return", "num_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.To_Number": [[48, 62], ["float", "unicodedata.numeric", "cell.lower", "cell.lower"], "function", ["None"], ["def", "To_Number", "(", "cell", ")", ":", "\n", "    ", "if", "cell", ".", "lower", "(", ")", "==", "'nan'", "or", "cell", ".", "lower", "(", ")", "==", "'inf'", ":", "\n", "        ", "return", "0.0", "\n", "", "try", ":", "\n", "        ", "v", "=", "float", "(", "cell", ")", "\n", "return", "v", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "v", "=", "unicodedata", ".", "numeric", "(", "cell", ")", "\n", "return", "v", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "        ", "pass", "\n", "", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.extract_samples_by_col": [[68, 115], ["list", "col.split", "int", "list", "enumerate", "list", "range", "len", "len", "len", "range", "list.append", "list.append", "len", "[].strip", "list.append", "row.append", "len", "range", "range", "len"], "function", ["None"], ["def", "extract_samples_by_col", "(", "columns", ",", "col", ",", "micro_table_size", ")", ":", "\n", "    ", "M", ",", "N", "=", "micro_table_size", "\n", "samples", "=", "list", "(", ")", "\n", "\n", "tab_name", ",", "col_id", "=", "col", ".", "split", "(", "' '", ")", "\n", "col_id", "=", "int", "(", "col_id", ")", "\n", "N_col_ids", "=", "list", "(", ")", "\n", "for", "i", ",", "cells", "in", "enumerate", "(", "columns", ")", ":", "\n", "        ", "if", "i", "!=", "col_id", ":", "\n", "            ", "N_col_ids", ".", "append", "(", "i", ")", "\n", "", "if", "len", "(", "N_col_ids", ")", ">=", "N", ":", "\n", "            ", "break", "\n", "\n", "", "", "''' organize the table as rows (transform), \n        filter out rows whose cell of target column is empty, \n        fill columns with 'NaN' if len(N_col_ids) < N '''", "\n", "rows_filter", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "columns", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "columns", "[", "col_id", "]", "[", "i", "]", ".", "strip", "(", ")", "!=", "''", ":", "\n", "            ", "row", "=", "[", "columns", "[", "col_id", "]", "[", "i", "]", "]", "\n", "for", "N_col_id", "in", "N_col_ids", ":", "\n", "                ", "row", ".", "append", "(", "columns", "[", "N_col_id", "]", "[", "i", "]", ")", "\n", "", "if", "len", "(", "N_col_ids", ")", "<", "N", ":", "\n", "                ", "row", "+=", "[", "'NaN'", "]", "*", "(", "N", "-", "len", "(", "N_col_ids", ")", ")", "\n", "", "rows_filter", ".", "append", "(", "row", ")", "\n", "\n", "", "", "''' slide a window in row dimension, \n                re-organize each table segment as dict,\n                append a segment whose length is less than M with rows of 'NaN' (0) '''", "\n", "row_num", ",", "i", "=", "len", "(", "rows_filter", ")", ",", "0", "\n", "while", "i", "<", "row_num", ":", "\n", "        ", "seg", "=", "rows_filter", "[", "i", ":", "(", "i", "+", "M", ")", "]", "if", "i", "+", "M", "<=", "row_num", "else", "rows_filter", "[", "i", ":", "row_num", "]", "\n", "seg_len", "=", "len", "(", "seg", ")", "\n", "\n", "col_0", "=", "[", "seg", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "seg_len", ")", "]", "\n", "col_0", "+=", "[", "'NaN'", "]", "*", "(", "M", "-", "seg_len", ")", "\n", "sample", "=", "{", "'col_0'", ":", "col_0", "}", "\n", "\n", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "            ", "col_k", "=", "[", "seg", "[", "j", "]", "[", "k", "+", "1", "]", "for", "j", "in", "range", "(", "seg_len", ")", "]", "\n", "col_k", "+=", "[", "'NaN'", "]", "*", "(", "M", "-", "seg_len", ")", "\n", "sample", "[", "'col_N_%d'", "%", "k", "]", "=", "col_k", "\n", "\n", "", "i", "+=", "1", "\n", "samples", ".", "append", "(", "sample", ")", "\n", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_phrase_preprocess": [[121, 125], ["cell.replace().replace().replace().replace().replace().replace().replace().replace().replace", "cell.replace().replace().replace().replace().replace().replace().replace().replace", "cell.replace().replace().replace().replace().replace().replace().replace", "cell.replace().replace().replace().replace().replace().replace", "cell.replace().replace().replace().replace().replace", "cell.replace().replace().replace().replace", "cell.replace().replace().replace", "cell.replace().replace", "cell.replace"], "function", ["None"], ["def", "cell_phrase_preprocess", "(", "cell", ")", ":", "\n", "    ", "cell_new", "=", "cell", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'.'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", ".", "replace", "(", "'\"'", ",", "' '", ")", ".", "replace", "(", "\"'\"", ",", "' '", ")", ".", "replace", "(", "'\\\\'", ",", "' '", ")", ".", "replace", "(", "'('", ",", "' '", ")", ".", "replace", "(", "')'", ",", "' '", ")", "\n", "return", "cell_new", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_vector_avg": [[131, 143], ["numpy.zeros", "util_micro_table.cell_phrase_preprocess", "enumerate", "pattern.text.en.tokenize", "tokenized_line.lower().split", "word.isalpha", "w_vec.reshape", "tokenized_line.lower"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_phrase_preprocess"], ["def", "cell_vector_avg", "(", "cell", ",", "w2v_model", ")", ":", "\n", "    ", "vector", ",", "n", "=", "np", ".", "zeros", "(", "w2v_model", ".", "vector_size", ")", ",", "0", "\n", "if", "not", "cell", "==", "'NaN'", ":", "\n", "        ", "ent_n", "=", "cell_phrase_preprocess", "(", "cell", ")", "\n", "tokenized_line", "=", "' '", ".", "join", "(", "tokenize", "(", "ent_n", ")", ")", "\n", "is_alpha_word_line", "=", "[", "word", "for", "word", "in", "tokenized_line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "word", ".", "isalpha", "(", ")", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "is_alpha_word_line", ")", ":", "\n", "            ", "if", "word", "in", "w2v_model", ".", "wv", ".", "vocab", ":", "\n", "                ", "w_vec", "=", "w2v_model", ".", "wv", "[", "word", "]", "\n", "vector", "+=", "w_vec", ".", "reshape", "(", "w2v_model", ".", "vector_size", ")", "\n", "n", "+=", "1", "\n", "", "", "", "return", "vector", "if", "n", "==", "0", "else", "vector", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_vector": [[149, 162], ["numpy.zeros", "util_micro_table.cell_phrase_preprocess", "enumerate", "pattern.text.en.tokenize", "tokenized_line.lower().split", "word.isalpha", "tokenized_line.lower"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_phrase_preprocess"], ["def", "cell_vector", "(", "cell", ",", "w2v_model", ",", "seq_size", ")", ":", "\n", "    ", "vectors", "=", "np", ".", "zeros", "(", "(", "seq_size", ",", "w2v_model", ".", "vector_size", ")", ")", "\n", "if", "not", "cell", "==", "'NaN'", ":", "\n", "        ", "ent_n", "=", "cell_phrase_preprocess", "(", "cell", ")", "\n", "tokenized_line", "=", "' '", ".", "join", "(", "tokenize", "(", "ent_n", ")", ")", "\n", "is_alpha_word_line", "=", "[", "word", "for", "word", "in", "tokenized_line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "word", ".", "isalpha", "(", ")", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "is_alpha_word_line", ")", ":", "\n", "            ", "if", "i", ">=", "seq_size", ":", "\n", "                ", "break", "\n", "", "if", "word", "in", "w2v_model", ".", "wv", ".", "vocab", ":", "\n", "                ", "w_vec", "=", "w2v_model", ".", "wv", "[", "word", "]", "\n", "vectors", "[", "i", "]", "=", "w_vec", "\n", "", "", "", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Table_Encode_WV_Avg": [[170, 190], ["enumerate", "numpy.zeros", "numpy.zeros", "util_micro_table.cell_vector_avg", "range", "util_micro_table.Is_Number_Col", "enumerate", "enumerate", "util_micro_table.To_Number", "util_micro_table.cell_vector_avg"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_vector_avg", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Is_Number_Col", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.To_Number", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_vector_avg"], ["def", "Table_Encode_WV_Avg", "(", "micro_table", ",", "table_size", ",", "w2v_model", ",", "use_surrounding_columns", "=", "True", ")", ":", "\n", "    ", "M", ",", "N", "=", "table_size", "\n", "D", "=", "w2v_model", ".", "vector_size", "\n", "emd", "=", "np", ".", "zeros", "(", "(", "M", ",", "(", "N", "+", "1", ")", ",", "D", ")", ")", "if", "use_surrounding_columns", "else", "np", ".", "zeros", "(", "(", "M", ",", "1", ",", "D", ")", ")", "\n", "\n", "col_0", "=", "micro_table", "[", "'col_0'", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "col_0", ")", ":", "\n", "        ", "emd", "[", "i", "]", "[", "0", "]", "=", "cell_vector_avg", "(", "cell", ",", "w2v_model", ")", "\n", "\n", "", "if", "use_surrounding_columns", ":", "\n", "        ", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "            ", "col_k", "=", "micro_table", "[", "'col_N_%d'", "%", "k", "]", "\n", "if", "Is_Number_Col", "(", "col_k", ")", ":", "\n", "                ", "for", "i", ",", "cell", "in", "enumerate", "(", "col_k", ")", ":", "\n", "                    ", "emd", "[", "i", "]", "[", "k", "+", "1", "]", "[", "0", "]", "=", "To_Number", "(", "cell", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", ",", "cell", "in", "enumerate", "(", "col_k", ")", ":", "\n", "                    ", "emd", "[", "i", "]", "[", "k", "+", "1", "]", "=", "cell_vector_avg", "(", "cell", ",", "w2v_model", ")", "\n", "\n", "", "", "", "", "return", "emd", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Table_Encode_WV": [[198, 218], ["enumerate", "numpy.zeros", "numpy.zeros", "util_micro_table.cell_vector", "range", "util_micro_table.Is_Number_Col", "enumerate", "enumerate", "util_micro_table.To_Number", "util_micro_table.cell_vector"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_vector", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Is_Number_Col", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.To_Number", "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_vector"], ["def", "Table_Encode_WV", "(", "micro_table", ",", "table_size", ",", "w2v_model", ",", "cell_seq_size", ",", "use_surrounding_columns", "=", "True", ")", ":", "\n", "    ", "M", ",", "N", "=", "table_size", "\n", "D", "=", "w2v_model", ".", "vector_size", "\n", "emd", "=", "np", ".", "zeros", "(", "(", "M", ",", "(", "N", "+", "1", ")", ",", "cell_seq_size", ",", "D", ")", ")", "if", "use_surrounding_columns", "else", "np", ".", "zeros", "(", "(", "M", ",", "1", ",", "cell_seq_size", ",", "D", ")", ")", "\n", "\n", "col_0", "=", "micro_table", "[", "'col_0'", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "col_0", ")", ":", "\n", "        ", "emd", "[", "i", "]", "[", "0", "]", "=", "cell_vector", "(", "cell", "=", "cell", ",", "w2v_model", "=", "w2v_model", ",", "seq_size", "=", "cell_seq_size", ")", "\n", "\n", "", "if", "use_surrounding_columns", ":", "\n", "        ", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "            ", "col_k", "=", "micro_table", "[", "'col_N_%d'", "%", "k", "]", "\n", "if", "Is_Number_Col", "(", "col_k", ")", ":", "\n", "                ", "for", "i", ",", "cell", "in", "enumerate", "(", "col_k", ")", ":", "\n", "                    ", "emd", "[", "i", "]", "[", "k", "+", "1", "]", "[", "0", "]", "[", "0", "]", "=", "To_Number", "(", "cell", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", ",", "cell", "in", "enumerate", "(", "col_k", ")", ":", "\n", "                    ", "emd", "[", "i", "]", "[", "k", "+", "1", "]", "=", "cell_vector", "(", "cell", "=", "cell", ",", "w2v_model", "=", "w2v_model", ",", "seq_size", "=", "cell_seq_size", ")", "\n", "\n", "", "", "", "", "return", "emd", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.Synth_Column_Encode_WV": [[226, 240], ["numpy.zeros", "list", "enumerate", "range", "util_micro_table.cell_phrase_preprocess", "pattern.text.en.tokenize", "len", "tokenized_line.lower().split", "word.isalpha", "tokenized_line.lower"], "function", ["home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_micro_table.cell_phrase_preprocess"], ["def", "Synth_Column_Encode_WV", "(", "micro_table", ",", "seq_size", ",", "w2v_model", ")", ":", "\n", "    ", "D", "=", "w2v_model", ".", "vector_size", "\n", "emd", "=", "np", ".", "zeros", "(", "(", "seq_size", ",", "1", ",", "D", ")", ")", "\n", "col_0", "=", "micro_table", "[", "'col_0'", "]", "\n", "seq", "=", "list", "(", ")", "\n", "for", "j", ",", "cell", "in", "enumerate", "(", "col_0", ")", ":", "\n", "        ", "ent_n", "=", "cell_phrase_preprocess", "(", "cell", ")", "\n", "tokenized_line", "=", "' '", ".", "join", "(", "tokenize", "(", "ent_n", ")", ")", "\n", "seq", "+=", "[", "word", "for", "word", "in", "tokenized_line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "word", ".", "isalpha", "(", ")", "]", "\n", "", "for", "j", "in", "range", "(", "seq_size", ")", ":", "\n", "        ", "if", "j", "<", "len", "(", "seq", ")", ":", "\n", "            ", "if", "seq", "[", "j", "]", "in", "w2v_model", ".", "wv", ".", "vocab", ":", "\n", "                ", "emd", "[", "j", ",", "0", ",", ":", "]", "=", "w2v_model", ".", "wv", "[", "seq", "[", "j", "]", "]", "\n", "", "", "", "return", "emd", "\n", "", ""]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_cnn.MicroTableCNN.__init__": [[160, 252], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "enumerate", "enumerate", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "tensorflow.concat", "tensorflow.reshape", "tensorflow.concat", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.relu_layer", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs_col.append", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs_row.append", "tensorflow.concat", "tensorflow.constant", "len", "len", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.argmax", "tensorflow.cast", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], []], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_cnn.cnn_train": [[7, 93], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.as_default", "util_cnn.MicroTableCNN", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.compute_gradients", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.summary.merge", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "os.path.join", "tensorflow.summary.FileWriter", "os.path.abspath", "os.path.join", "tensorflow.train.Saver", "tf.Session.run", "util_cnn.cnn_train.train_eva"], "function", ["None"], ["def", "permutation_cells2synthetic_columns", "(", "col_cells", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "2", ":", "\n", "        ", "for", "ci", "in", "col_cells", ":", "\n", "            ", "for", "cj", "in", "col_cells", ":", "\n", "                ", "if", "not", "ci", "==", "cj", ":", "\n", "                    ", "cell_units", ".", "append", "(", "[", "ci", ",", "cj", "]", ")", "\n", "", "", "", "", "elif", "len", "(", "col_cells", ")", "==", "1", ":", "\n", "        ", "cell_units", "=", "[", "col_cells", "[", "0", "]", ",", "'NaN'", "]", "\n", "", "return", "cell_units", "\n", "\n", "\n", "", "def", "ordered_cells2synthetic_columns", "(", "col_cells", ",", "synthetic_column_size", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "cell_i", "in", "range", "(", "len", "(", "col_cells", ")", "-", "synthetic_column_size", "+", "1", ")", ":", "\n", "            ", "cell_unit", "=", "col_cells", "[", "cell_i", ":", "cell_i", "+", "synthetic_column_size", "]", "\n", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "", "", "else", ":", "\n", "        ", "cell_unit", "=", "col_cells", "+", "[", "'NaN'", "]", "*", "(", "len", "(", "col_cells", ")", "-", "synthetic_column_size", ")", "\n", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "", "return", "cell_units", "\n", "\n", "\n", "", "def", "random_cells2synthetic_columns", "(", "col_cells", ",", "synthetic_column_size", ",", "synthetic_column_num", ")", ":", "\n", "    ", "cell_units", "=", "list", "(", ")", "\n", "if", "len", "(", "col_cells", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "synthetic_column_num", ")", ":", "\n", "            ", "cell_units", ".", "append", "(", "random", ".", "sample", "(", "col_cells", ",", "synthetic_column_size", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "synthetic_column_num", ")", ":", "\n", "            ", "cell_unit", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "synthetic_column_size", ")", ":", "\n", "                ", "cell_unit", "+=", "random", ".", "sample", "(", "col_cells", ",", "1", ")", "\n", "", "cell_units", ".", "append", "(", "cell_unit", ")", "\n", "\n", "", "", "return", "cell_units", "\n", "\n", "\n", "", "def", "generate_synthetic_columns", "(", "entities", ",", "synthetic_column_size", ")", ":", "\n", "    ", "ent_units", "=", "list", "(", ")", "\n", "if", "len", "(", "entities", ")", ">=", "synthetic_column_size", ":", "\n", "        ", "for", "i", ",", "ent", "in", "enumerate", "(", "entities", ")", ":", "\n", "            ", "unit", "=", "random", ".", "sample", "(", "entities", "[", "0", ":", "i", "]", "+", "entities", "[", "(", "i", "+", "1", ")", ":", "]", ",", "synthetic_column_size", "-", "1", ")", "\n", "unit", ".", "append", "(", "ent", ")", "\n", "ent_units", ".", "append", "(", "unit", ")", "\n", "", "", "else", ":", "\n", "        ", "unit", "=", "entities", "+", "[", "'NaN'", "]", "*", "(", "len", "(", "entities", ")", "-", "synthetic_column_size", ")", "\n", "ent_units", ".", "append", "(", "unit", ")", "\n", "", "return", "ent_units", "\n", "\n", "\n", "", "def", "synthetic_columns2sequence", "(", "ent_units", ",", "sequence_size", ")", ":", "\n", "    ", "word_seq", "=", "list", "(", ")", "\n", "for", "ent", "in", "ent_units", ":", "\n", "        ", "ent_n", "=", "ent", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'.'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", ".", "replace", "(", "'\"'", ",", "' '", ")", ".", "replace", "(", "\"'\"", ",", "' '", ")", "\n", "tokenized_line", "=", "' '", ".", "join", "(", "tokenize", "(", "ent_n", ")", ")", "\n", "is_alpha_word_line", "=", "[", "word", "for", "word", "in", "tokenized_line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "word", ".", "isalpha", "(", ")", "]", "\n", "word_seq", "+=", "is_alpha_word_line", "\n", "", "if", "len", "(", "word_seq", ")", ">=", "sequence_size", ":", "\n", "        ", "return", "word_seq", "[", "0", ":", "sequence_size", "]", "\n", "", "else", ":", "\n", "        ", "return", "word_seq", "+", "[", "'NaN'", "]", "*", "(", "sequence_size", "-", "len", "(", "word_seq", ")", ")", "\n", "\n", "\n", "", "", "def", "sequence2matrix", "(", "word_seq", ",", "sequence_size", ",", "w2v_model", ")", ":", "\n", "    ", "ent_v", "=", "np", ".", "zeros", "(", "(", "sequence_size", ",", "w2v_model", ".", "vector_size", ",", "1", ")", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "word_seq", ")", ":", "\n", "        ", "if", "not", "word", "==", "'NaN'", "and", "word", "in", "w2v_model", ".", "wv", ".", "vocab", ":", "\n", "            ", "w_vec", "=", "w2v_model", ".", "wv", "[", "word", "]", "\n", "ent_v", "[", "i", "]", "=", "w_vec", ".", "reshape", "(", "(", "w2v_model", ".", "vector_size", ",", "1", ")", ")", "\n", "", "", "return", "ent_v", "\n", "\n", "\n", "", "class", "SyntheticColumnCNN", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    A CNN for classification of entity units.\n    Uses a Conv layer with multiple filters, followed by a max-pooling and softmax layer.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "embedding_size", ",", "channel_num", ",", "filter_sizes", ",", "num_filters", ")", ":", "\n", "# Placeholders for input, output and dropout", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "sequence_length", ",", "embedding_size", ",", "channel_num", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_cnn.cnn_predict": [[101, 121], ["os.path.join", "tensorflow.train.latest_checkpoint", "tensorflow.Graph", "tf.Graph.as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.as_default", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tf.Session.run", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name", "tf.Graph.get_operation_by_name"], "function", ["None"], ["                ", "filter_shape", "=", "[", "filter_size", ",", "embedding_size", ",", "1", ",", "num_filters", "]", "\n", "Conv_W", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"Conv_W\"", ")", "\n", "Conv_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filters", "]", ")", ",", "name", "=", "\"Conv_b\"", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "self", ".", "input_x", ",", "\n", "Conv_W", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv\"", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "Conv_b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "sequence_length", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "\n", "", "", "num_filters_total", "=", "num_filters", "*", "len", "(", "filter_sizes", ")", "\n", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "pooled_outputs", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ")", "\n"]], "home.repos.pwc.inspect_result.alan-turing-institute_SemAIDA.util.util_cnn.batch_iter": [[128, 146], ["numpy.array", "len", "range", "int", "numpy.random.permutation", "range", "numpy.arange", "min"], "function", ["None"], ["shape", "=", "[", "num_filters_total", ",", "num_classes", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "FC_b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_classes", "]", ")", ",", "name", "=", "\"FC_b\"", ")", "\n", "# l2_loss += tf.nn.l2_loss(W)", "\n", "# l2_loss += tf.nn.l2_loss(b)", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "h_drop", ",", "FC_W", ",", "FC_b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "probabilities", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores", ",", "name", "=", "'probabilities'", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "# self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss", "\n", "\n", "# Accuracy", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n"]]}