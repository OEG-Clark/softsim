{"home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.Encoder.__init__": [[13, 37], ["numpy.load", "tensorflow.variable_scope", "weights[].transpose", "kernel.astype.astype.astype", "bias.astype.astype.astype", "encoder.Encoder.weight_vars.append", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "weights_path", ")", ":", "\n", "# load weights (kernel and bias) from npz file", "\n", "        ", "weights", "=", "np", ".", "load", "(", "weights_path", ")", "\n", "\n", "idx", "=", "0", "\n", "self", ".", "weight_vars", "=", "[", "]", "\n", "ENCODER_LAYERS", "=", "settings", ".", "config", "[", "\"ENCODER_LAYERS\"", "]", "\n", "# create the TensorFlow variables", "\n", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "            ", "for", "layer", "in", "ENCODER_LAYERS", ":", "\n", "                ", "kind", "=", "layer", "[", ":", "4", "]", "\n", "\n", "if", "kind", "==", "'conv'", ":", "\n", "                    ", "kernel", "=", "weights", "[", "'arr_%d'", "%", "idx", "]", ".", "transpose", "(", "[", "2", ",", "3", ",", "1", ",", "0", "]", ")", "\n", "bias", "=", "weights", "[", "'arr_%d'", "%", "(", "idx", "+", "1", ")", "]", "\n", "kernel", "=", "kernel", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bias", "=", "bias", ".", "astype", "(", "np", ".", "float32", ")", "\n", "idx", "+=", "2", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "layer", ")", ":", "\n", "                        ", "W", "=", "tf", ".", "Variable", "(", "kernel", ",", "trainable", "=", "False", ",", "name", "=", "'kernel'", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "bias", ",", "trainable", "=", "False", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "self", ".", "weight_vars", ".", "append", "(", "(", "W", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.Encoder.encode": [[38, 67], ["enumerate", "print", "pool2d.shape.as_list", "len", "len", "encoder.conv2d", "tensorflow.nn.relu", "encoder.pool2d"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.pool2d"], ["", "", "", "", "def", "encode", "(", "self", ",", "image", ")", ":", "\n", "\n", "# create the computational graph", "\n", "        ", "idx", "=", "0", "\n", "layers", "=", "{", "}", "\n", "current", "=", "image", "\n", "ENCODER_LAYERS", "=", "settings", ".", "config", "[", "\"ENCODER_LAYERS\"", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "ENCODER_LAYERS", ")", ":", "\n", "            ", "kind", "=", "layer", "[", ":", "4", "]", "\n", "\n", "if", "kind", "==", "'conv'", ":", "\n", "                ", "kernel", ",", "bias", "=", "self", ".", "weight_vars", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "current", "=", "conv2d", "(", "current", ",", "kernel", ",", "bias", ")", "\n", "\n", "", "elif", "kind", "==", "'relu'", ":", "\n", "                ", "current", "=", "tf", ".", "nn", ".", "relu", "(", "current", ")", "\n", "\n", "", "elif", "kind", "==", "'pool'", ":", "\n", "                ", "current", "=", "pool2d", "(", "current", ")", "\n", "\n", "", "layers", "[", "layer", "]", "=", "current", "\n", "", "print", "(", "\"encoder %d shape: \"", "%", "i", ",", "current", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "\n", "assert", "(", "len", "(", "layers", ")", "==", "len", "(", "ENCODER_LAYERS", ")", ")", "\n", "\n", "enc", "=", "layers", "[", "ENCODER_LAYERS", "[", "-", "1", "]", "]", "\n", "\n", "return", "enc", ",", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.Encoder.preprocess": [[68, 81], ["tensorflow.reverse", "numpy.array", "tensorflow.image.resize"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "image", ",", "mode", "=", "'RGB'", ")", ":", "\n", "        ", "assert", "mode", "==", "\"RGB\"", "\n", "# preprocess", "\n", "if", "settings", ".", "config", "[", "\"IMAGE_SHAPE\"", "]", "[", "0", "]", "!=", "224", "and", "\"NO_SCALE\"", "not", "in", "settings", ".", "config", ":", "\n", "            ", "if", "\"pre_scale\"", "in", "image", ".", "__dict__", ":", "\n", "                ", "image", "=", "image", ".", "pre_scale", "\n", "", "else", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "resize", "(", "image", ",", "size", "=", "[", "224", ",", "224", "]", ")", "\n", "\n", "# To BGR", "\n", "", "", "image", "=", "tf", ".", "reverse", "(", "image", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "\n", "return", "image", "-", "np", ".", "array", "(", "[", "103.939", ",", "116.779", ",", "123.68", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.Encoder.deprocess": [[82, 95], ["tensorflow.reverse", "tensorflow.clip_by_value", "numpy.array", "tensorflow.image.resize"], "methods", ["None"], ["", "def", "deprocess", "(", "self", ",", "image", ",", "mode", "=", "'BGR'", ")", ":", "\n", "        ", "assert", "mode", "==", "\"BGR\"", "\n", "image", "=", "image", "+", "np", ".", "array", "(", "[", "103.939", ",", "116.779", ",", "123.68", "]", ")", "\n", "\n", "image", "=", "tf", ".", "reverse", "(", "image", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.0", ",", "255.0", ")", "\n", "\n", "pre_scale", "=", "image", "\n", "if", "settings", ".", "config", "[", "\"IMAGE_SHAPE\"", "]", "[", "0", "]", "!=", "224", "and", "\"NO_SCALE\"", "not", "in", "settings", ".", "config", ":", "\n", "            ", "image", "=", "tf", ".", "image", ".", "resize", "(", "\n", "image", ",", "size", "=", "settings", ".", "config", "[", "\"IMAGE_SHAPE\"", "]", "[", ":", "2", "]", ")", "\n", "", "image", ".", "pre_scale", "=", "pre_scale", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.conv2d": [[96, 105], ["tensorflow.pad", "tensorflow.nn.conv2d", "tensorflow.nn.bias_add"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d"], ["", "", "def", "conv2d", "(", "x", ",", "kernel", ",", "bias", ")", ":", "\n", "# padding image with reflection mode", "\n", "    ", "x_padded", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'REFLECT'", ")", "\n", "\n", "# conv and add bias", "\n", "out", "=", "tf", ".", "nn", ".", "conv2d", "(", "x_padded", ",", "kernel", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "out", "=", "tf", ".", "nn", ".", "bias_add", "(", "out", ",", "bias", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.pool2d": [[107, 109], ["tensorflow.nn.max_pool"], "function", ["None"], ["", "def", "pool2d", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "max_pool", "(", "x", ",", "ksize", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapairs.__init__": [[10, 19], ["range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "batch_size", ",", "stack_num", "=", "10", ")", ":", "\n", "        ", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "bucket", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "class_num", ")", "]", "\n", "self", ".", "bucket_size", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "class_num", ")", "]", "\n", "self", ".", "tot_pair", "=", "0", "\n", "self", ".", "index", "=", "0", "\n", "self", ".", "stack_num", "=", "stack_num", "\n", "self", ".", "loaded", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapairs.add_data": [[20, 28], ["dataprep.datapairs.bucket[].append", "numpy.stack"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "if", "self", ".", "bucket_size", "[", "y", "]", "<", "self", ".", "stack_num", ":", "\n", "            ", "self", ".", "bucket", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "self", ".", "bucket_size", "[", "y", "]", "+=", "1", "\n", "if", "self", ".", "bucket_size", "[", "y", "]", "==", "self", ".", "stack_num", ":", "\n", "                ", "self", ".", "loaded", "+=", "1", "\n", "self", ".", "bucket", "[", "y", "]", "=", "np", ".", "stack", "(", "self", ".", "bucket", "[", "y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapairs.feed_pair": [[29, 36], ["range", "dataprep.datapairs.add_data"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.add_data"], ["", "", "", "def", "feed_pair", "(", "self", ",", "x_batch", ",", "y_batch", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "self", ".", "add_data", "(", "x_batch", "[", "i", "]", ",", "y_batch", "[", "i", "]", ")", "\n", "", "if", "self", ".", "loaded", "==", "self", ".", "class_num", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.__init__": [[38, 45], ["range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "bucket", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "class_num", ")", "]", "\n", "self", ".", "bucket_size", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "class_num", ")", "]", "\n", "self", ".", "tot_pair", "=", "0", "\n", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.add_data": [[46, 52], ["dataprep.datapair.bucket[].append"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "bucket_size", "[", "y", "]", "+=", "1", "\n", "\n", "if", "self", ".", "bucket_size", "[", "y", "]", "%", "2", "==", "0", ":", "\n", "            ", "self", ".", "tot_pair", "+=", "1", "\n", "", "self", ".", "bucket", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.feed_pair": [[53, 56], ["range", "dataprep.datapair.add_data"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.add_data"], ["", "def", "feed_pair", "(", "self", ",", "x_batch", ",", "y_batch", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "self", ".", "add_data", "(", "x_batch", "[", "i", "]", ",", "y_batch", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.get_pair": [[57, 92], ["range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack.extend", "numpy.stack.extend", "numpy.stack.extend", "numpy.stack.extend", "min"], "methods", ["None"], ["", "", "def", "get_pair", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "tot_pair", "<", "self", ".", "batch_size", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "x1", "=", "[", "]", "\n", "y1", "=", "[", "]", "\n", "x2", "=", "[", "]", "\n", "y2", "=", "[", "]", "\n", "left", "=", "self", ".", "batch_size", "\n", "i", "=", "self", ".", "index", "# ensure random start of each class", "\n", "for", "_", "in", "range", "(", "self", ".", "class_num", ")", ":", "\n", "                ", "if", "left", "==", "0", ":", "\n", "                    ", "break", "\n", "", "sz", "=", "self", ".", "bucket_size", "[", "i", "]", "\n", "if", "sz", ">=", "2", ":", "\n", "                    ", "pairs", "=", "min", "(", "left", ",", "sz", "//", "2", ")", "\n", "", "else", ":", "\n", "                    ", "i", "=", "(", "i", "+", "1", ")", "%", "self", ".", "class_num", "\n", "continue", "\n", "", "x1", ".", "extend", "(", "self", ".", "bucket", "[", "i", "]", "[", ":", "pairs", "]", ")", "\n", "x2", ".", "extend", "(", "self", ".", "bucket", "[", "i", "]", "[", "pairs", ":", "2", "*", "pairs", "]", ")", "\n", "y1", ".", "extend", "(", "[", "i", "]", "*", "pairs", ")", "\n", "y2", ".", "extend", "(", "[", "i", "]", "*", "pairs", ")", "\n", "self", ".", "bucket", "[", "i", "]", "=", "self", ".", "bucket", "[", "i", "]", "[", "2", "*", "pairs", ":", "]", "\n", "self", ".", "bucket_size", "[", "i", "]", "-=", "2", "*", "pairs", "\n", "left", "-=", "pairs", "\n", "i", "=", "(", "i", "+", "1", ")", "%", "self", ".", "class_num", "\n", "#print(i)", "\n", "", "self", ".", "index", "=", "i", "\n", "self", ".", "tot_pair", "-=", "self", ".", "batch_size", "\n", "x1", "=", "np", ".", "stack", "(", "x1", ")", "\n", "x2", "=", "np", ".", "stack", "(", "x2", ")", "\n", "y1", "=", "np", ".", "stack", "(", "y1", ")", "\n", "y2", "=", "np", ".", "stack", "(", "y2", ")", "\n", "", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.init_data": [[94, 120], ["dataprep.datapair", "imagenetmod.interface.imagenet", "cifar10.cifar10_input.CIFAR10Data", "imagenetmod.interface.imagenet"], "function", ["None"], ["", "", "def", "init_data", "(", "mode", ")", ":", "\n", "    ", "global", "CLASS_NUM", ",", "BATCH_SIZE", ",", "inet", ",", "cifar_data", ",", "data_set", ",", "dp", ",", "config_name", ",", "raw_cifar", "\n", "assert", "mode", "in", "[", "\"train\"", ",", "\"eval\"", "]", "\n", "CLASS_NUM", "=", "settings", ".", "config", "[", "\"CLASS_NUM\"", "]", "\n", "BATCH_SIZE", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "data_set", "=", "settings", ".", "config", "[", "\"data_set\"", "]", "\n", "config_name", "=", "settings", ".", "config", "[", "\"config_name\"", "]", "\n", "\n", "assert", "data_set", "in", "[", "\"cifar10\"", ",", "\"svhn\"", ",", "\"imagenet\"", "]", "\n", "data_set", "=", "data_set", "\n", "\n", "if", "data_set", "==", "\"imagenet\"", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "inet", "=", "imagenet", "(", "BATCH_SIZE", ",", "dataset", "=", "\"train\"", ")", "\n", "", "elif", "mode", "==", "\"eval\"", ":", "\n", "            ", "inet", "=", "imagenet", "(", "BATCH_SIZE", ",", "dataset", "=", "\"val\"", ")", "\n", "", "", "elif", "data_set", "==", "\"cifar10\"", ":", "\n", "\n", "        ", "raw_cifar", "=", "cifar10_input", ".", "CIFAR10Data", "(", "\"cifar10_data\"", ")", "\n", "if", "mode", "==", "\"eval\"", ":", "\n", "            ", "cifar_data", "=", "raw_cifar", ".", "eval_data", "\n", "", "elif", "mode", "==", "\"train\"", ":", "\n", "            ", "cifar_data", "=", "raw_cifar", ".", "train_data", "\n", "", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Not implemented\"", "\n", "", "dp", "=", "datapair", "(", "CLASS_NUM", ",", "BATCH_SIZE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.init_polygon_data": [[121, 151], ["os.path.exists", "os.path.exists", "numpy.load", "numpy.load", "dataprep.datapairs", "print", "numpy.concatenate", "range", "print", "numpy.concatenate", "numpy.concatenate", "numpy.save", "numpy.save", "dataprep.get_data", "dp.feed_pair", "fetch_embed", "_mean.append", "_sigma.append"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.serve-data.get_data", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.feed_pair"], ["", "def", "init_polygon_data", "(", "stack_num", ",", "fetch_embed", ")", ":", "\n", "    ", "global", "_mean_all", ",", "_sigma_all", "\n", "mean_file", "=", "\"polygon_mean_%s.npy\"", "%", "config_name", "\n", "sigma_file", "=", "\"polygon_sigma_%s.npy\"", "%", "config_name", "\n", "if", "os", ".", "path", ".", "exists", "(", "mean_file", ")", "and", "os", ".", "path", ".", "exists", "(", "sigma_file", ")", ":", "\n", "        ", "_mean_all", "=", "np", ".", "load", "(", "mean_file", ")", "\n", "_sigma_all", "=", "np", ".", "load", "(", "sigma_file", ")", "\n", "", "else", ":", "\n", "## Populate polygon point", "\n", "        ", "dps", "=", "datapairs", "(", "CLASS_NUM", ",", "BATCH_SIZE", ",", "stack_num", ")", "\n", "f", "=", "True", "\n", "while", "f", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "get_data", "(", ")", "\n", "f", "=", "dp", ".", "feed_pair", "(", "x_batch", ",", "y_batch", ")", "\n", "", "print", "(", "\"datapairs loading\"", ")", "\n", "polygon_arr", "=", "np", ".", "concatenate", "(", "dp", ".", "bucket", ")", "\n", "len_arr", "=", "polygon_arr", ".", "shape", "[", "0", "]", "\n", "_mean", "=", "[", "]", "\n", "_sigma", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "(", "len_arr", "-", "1", ")", "//", "BATCH_SIZE", "+", "1", ")", ":", "\n", "# sess.run([stn.meanC, stn.sigmaC], feed_dict={", "\n", "            ", "_meanC", ",", "_sigmaC", "=", "fetch_embed", "(", "\n", "polygon_arr", "[", "i", "*", "BATCH_SIZE", ":", "(", "i", "+", "1", ")", "*", "BATCH_SIZE", "]", ")", "\n", "_mean", ".", "append", "(", "_meanC", ")", "\n", "_sigma", ".", "append", "(", "_sigmaC", ")", "\n", "", "print", "(", "\"datapairs loaded\"", ")", "\n", "_mean_all", "=", "np", ".", "concatenate", "(", "_mean", ",", "axis", "=", "0", ")", "\n", "_sigma_all", "=", "np", ".", "concatenate", "(", "_sigma", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "mean_file", ",", "_mean_all", ")", "\n", "np", ".", "save", "(", "sigma_file", ",", "_sigma_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.popoulate_data": [[152, 177], ["range", "range", "numpy.stack", "numpy.stack", "res_mean.append", "res_sigma.append", "res_mean.append", "res_sigma.append", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "", "def", "popoulate_data", "(", "_meanC", ",", "_sigmaC", ",", "y_batch", ",", "include_self", "=", "True", ")", ":", "\n", "\n", "    ", "res_mean", "=", "[", "]", "\n", "res_sigma", "=", "[", "]", "\n", "\n", "if", "include_self", ":", "\n", "        ", "real_num", "=", "INTERPOLATE_NUM", "-", "1", "\n", "for", "i", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "            ", "y", "=", "y_batch", "[", "i", "]", "\n", "meanCi", "=", "_meanC", "[", "i", ":", "i", "+", "1", "]", "\n", "meanC_pop", "=", "_mean_all", "[", "y", "*", "real_num", ":", "(", "y", "+", "1", ")", "*", "real_num", "]", "\n", "res_mean", ".", "append", "(", "np", ".", "concatenate", "(", "[", "meanCi", ",", "meanC_pop", "]", ")", ")", "\n", "sigmaCi", "=", "_sigmaC", "[", "i", ":", "i", "+", "1", "]", "\n", "sigmaC_pop", "=", "_sigma_all", "[", "y", "*", "real_num", ":", "(", "y", "+", "1", ")", "*", "real_num", "]", "\n", "res_sigma", ".", "append", "(", "np", ".", "concatenate", "(", "[", "sigmaCi", ",", "sigmaC_pop", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "real_num", "=", "INTERPOLATE_NUM", "\n", "for", "i", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "            ", "y", "=", "y_batch", "[", "i", "]", "\n", "meanC_pop", "=", "_mean_all", "[", "y", "*", "real_num", ":", "(", "y", "+", "1", ")", "*", "real_num", "]", "\n", "res_mean", ".", "append", "(", "meanC_pop", ")", "\n", "sigmaCi", "=", "_sigmaC", "[", "i", ":", "i", "+", "1", "]", "\n", "sigmaC_pop", "=", "_sigma_all", "[", "y", "*", "real_num", ":", "(", "y", "+", "1", ")", "*", "real_num", "]", "\n", "res_sigma", ".", "append", "(", "sigmaC_pop", ")", "\n", "", "", "return", "np", ".", "stack", "(", "res_mean", ")", ",", "np", ".", "stack", "(", "res_sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.get_fetch_func": [[178, 180], ["functools.partial"], "function", ["None"], ["", "def", "get_fetch_func", "(", "sess", ",", "content", ",", "pred", ")", ":", "\n", "    ", "return", "functools", ".", "partial", "(", "_fetch_embed", ",", "sess", "=", "sess", ",", "content", "=", "content", ",", "pred", "=", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep._fetch_embed": [[181, 184], ["sess.run"], "function", ["None"], ["", "def", "_fetch_embed", "(", "sess", ",", "content", ",", "pred", ")", ":", "\n", "    ", "_pred", "=", "sess", ".", "run", "(", "pred", ",", "feed_dict", "=", "{", "content", ":", "content", "}", ")", "\n", "return", "_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep._get_data": [[185, 194], ["cifar_data.get_next_batch", "inet.get_next_batch"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.DataSubset.get_next_batch", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.DataSubset.get_next_batch"], ["", "def", "_get_data", "(", ")", ":", "\n", "\n", "    ", "if", "data_set", "==", "\"cifar10\"", ":", "\n", "        ", "x_batch", ",", "y_batch", "=", "cifar_data", ".", "get_next_batch", "(", "\n", "batch_size", "=", "BATCH_SIZE", ",", "multiple_passes", "=", "True", ")", "\n", "", "elif", "data_set", "==", "\"imagenet\"", ":", "\n", "         ", "x_batch", ",", "y_batch", "=", "inet", ".", "get_next_batch", "(", ")", "\n", "\n", "", "return", "x_batch", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.get_data": [[195, 197], ["dataprep._get_data"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep._get_data"], ["", "def", "get_data", "(", ")", ":", "\n", "    ", "return", "_get_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.get_data_pair": [[198, 213], ["range", "dp.get_pair", "ret_list.extend", "dataprep.get_data", "dp.feed_pair", "dp.get_pair", "dataprep.get_data"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.get_pair", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.serve-data.get_data", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.feed_pair", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.dataprep.datapair.get_pair", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.serve-data.get_data"], ["", "def", "get_data_pair", "(", ")", ":", "\n", "    ", "mode", "=", "settings", ".", "config", "[", "\"data_mode\"", "]", "\n", "if", "mode", "==", "1", ":", "\n", "        ", "ret_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "ret_list", ".", "extend", "(", "get_data", "(", ")", ")", "\n", "", "return", "ret_list", "\n", "\n", "", "else", ":", "\n", "        ", "res", "=", "dp", ".", "get_pair", "(", ")", "\n", "while", "res", "is", "None", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "get_data", "(", ")", "\n", "dp", ".", "feed_pair", "(", "x_batch", ",", "y_batch", ")", "\n", "res", "=", "dp", ".", "get_pair", "(", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.__init__": [[13, 19], ["encoder.Encoder", "decoder.Decoder"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "encoder_weights_path", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "Encoder", "(", "encoder_weights_path", ")", "\n", "config_name", "=", "settings", ".", "config", "[", "\"config_name\"", "]", "\n", "\n", "self", ".", "decode_mode", "=", "\"vgg\"", "\n", "self", ".", "decoder", "=", "Decoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.set_stat": [[20, 23], ["None"], "methods", ["None"], ["", "def", "set_stat", "(", "self", ",", "meanS", ",", "sigmaS", ")", ":", "\n", "        ", "self", ".", "meanS", "=", "meanS", "\n", "self", ".", "sigmaS", "=", "sigmaS", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.decode": [[24, 30], ["style_transfer_net.Base_Style_Transfer.decoder.decode", "style_transfer_net.Base_Style_Transfer.encoder.deprocess"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.Encoder.deprocess"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "img", "=", "self", ".", "decoder", ".", "decode", "(", "x", ")", "\n", "\n", "# post processing for output of decoder", "\n", "img", "=", "self", ".", "encoder", ".", "deprocess", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode": [[31, 37], ["style_transfer_net.Base_Style_Transfer.encoder.preprocess", "style_transfer_net.Base_Style_Transfer.encoder.encode"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.encoder.Encoder.preprocess", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode"], ["", "def", "encode", "(", "self", ",", "img", ")", ":", "\n", "# Note that the pretrained vgg model accepts BGR format, but the function by default take RGB value", "\n", "        ", "img", "=", "self", ".", "encoder", ".", "preprocess", "(", "img", ")", "\n", "\n", "x", "=", "self", ".", "encoder", ".", "encode", "(", "img", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.StyleTransferNet.transform": [[41, 63], ["style_transfer_net.StyleTransferNet.encode", "style_transfer_net.StyleTransferNet.encode", "style_transfer_net.StyleTransferNet.set_stat", "style_transfer_net.StyleTransferNet.decode", "style_transfer_net.StyleTransferNet.decode", "tensorflow.variable_scope", "adaptive_instance_norm.AdaIN"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.set_stat", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.AdaIN"], ["    ", "def", "transform", "(", "self", ",", "content", ",", "style", ")", ":", "\n", "\n", "# encode image", "\n", "        ", "enc_c", ",", "enc_c_layers", "=", "self", ".", "encode", "(", "content", ")", "\n", "enc_s", ",", "enc_s_layers", "=", "self", ".", "encode", "(", "style", ")", "\n", "\n", "self", ".", "encoded_content_layers", "=", "enc_c_layers", "\n", "self", ".", "encoded_style_layers", "=", "enc_s_layers", "\n", "\n", "self", ".", "norm_features", "=", "enc_c", "\n", "# pass the encoded images to AdaIN", "\n", "with", "tf", ".", "variable_scope", "(", "\"transform\"", ")", ":", "\n", "            ", "target_features", ",", "meanS", ",", "sigmaS", "=", "AdaIN", "(", "enc_c", ",", "enc_s", ")", "\n", "", "self", ".", "set_stat", "(", "meanS", ",", "sigmaS", ")", "\n", "self", ".", "target_features", "=", "target_features", "\n", "\n", "\n", "# decode target features back to image", "\n", "generated_adv_img", "=", "self", ".", "decode", "(", "target_features", ")", "\n", "generated_img", "=", "self", ".", "decode", "(", "enc_c", ")", "\n", "\n", "return", "generated_img", ",", "generated_adv_img", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.StyleTransferNet_adv.transform": [[67, 95], ["style_transfer_net.StyleTransferNet_adv.encode", "style_transfer_net.StyleTransferNet_adv.set_stat", "tensorflow.placeholder", "tensorflow.placeholder", "style_transfer_net.StyleTransferNet_adv.decode", "style_transfer_net.StyleTransferNet_adv.decode", "tensorflow.variable_scope", "adaptive_instance_norm.AdaIN_adv", "tensorflow.assign", "tensorflow.assign", "style_transfer_net.StyleTransferNet_adv.meanS.shape.as_list", "style_transfer_net.StyleTransferNet_adv.sigmaS.shape.as_list"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.set_stat", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.AdaIN_adv"], ["    ", "def", "transform", "(", "self", ",", "content", ",", "p", "=", "1.5", ")", ":", "\n", "\n", "# encode image", "\n", "        ", "enc_c", ",", "enc_c_layers", "=", "self", ".", "encode", "(", "content", ")", "\n", "\n", "self", ".", "encoded_content_layers", "=", "enc_c_layers", "\n", "\n", "self", ".", "norm_features", "=", "enc_c", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"transform\"", ")", ":", "\n", "            ", "target_features", ",", "self", ".", "init_style", ",", "self", ".", "style_bound", ",", "sigmaS", ",", "meanS", ",", "self", ".", "meanC", ",", "self", ".", "sigmaC", ",", "self", ".", "init_style_rand", ",", "self", ".", "normalized", "=", "AdaIN_adv", "(", "enc_c", ",", "p", "=", "p", ")", "\n", "\n", "", "self", ".", "set_stat", "(", "meanS", ",", "sigmaS", ")", "\n", "bs", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "self", ".", "meanS_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "bs", "]", "+", "self", ".", "meanS", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "self", ".", "sigmaS_ph", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "[", "bs", "]", "+", "self", ".", "sigmaS", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "self", ".", "asgn", "=", "[", "tf", ".", "assign", "(", "self", ".", "meanS", ",", "self", ".", "meanS_ph", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "sigmaS", ",", "self", ".", "sigmaS_ph", ")", "]", "\n", "\n", "self", ".", "target_features", "=", "target_features", "\n", "\n", "# decode target features back to image", "\n", "generated_adv_img", "=", "self", ".", "decode", "(", "target_features", ")", "\n", "generated_img", "=", "self", ".", "decode", "(", "enc_c", ")", "\n", "\n", "return", "generated_img", ",", "generated_adv_img", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.StyleTransferNet_adv.transform_from_internal": [[96, 115], ["style_transfer_net.StyleTransferNet_adv.encode", "adaptive_instance_norm.normalize", "tensorflow.assign", "style_transfer_net.StyleTransferNet_adv.set_stat", "tensorflow.reduce_sum", "style_transfer_net.StyleTransferNet_adv.decode", "style_transfer_net.StyleTransferNet_adv.decode", "tensorflow.abs"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.normalize", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.set_stat", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode"], ["", "def", "transform_from_internal", "(", "self", ",", "content", ",", "store_var", ",", "sigma", ",", "mean", ")", ":", "\n", "\n", "# encode image", "\n", "        ", "enc_c", ",", "enc_c_layers", "=", "self", ".", "encode", "(", "content", ")", "\n", "\n", "self", ".", "normalized", ",", "self", ".", "meanC", ",", "self", ".", "sigmaC", "=", "normalize", "(", "enc_c", ")", "\n", "\n", "self", ".", "store_normalize", "=", "tf", ".", "assign", "(", "store_var", ",", "self", ".", "normalized", ")", "\n", "self", ".", "set_stat", "(", "mean", ",", "sigma", ")", "\n", "self", ".", "restored_internal", "=", "store_var", "*", "sigma", "+", "mean", "\n", "self", ".", "target_features", "=", "self", ".", "restored_internal", "\n", "\n", "self", ".", "loss_l1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "enc_c", "-", "self", ".", "target_features", ")", ")", "\n", "\n", "generated_adv_img", "=", "self", ".", "decode", "(", "\n", "self", ".", "target_features", ")", "\n", "generated_img", "=", "self", ".", "decode", "(", "enc_c", ")", "\n", "\n", "return", "generated_img", ",", "generated_adv_img", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.StyleTransferNet_adv.transform_from_internal_poly": [[116, 167], ["style_transfer_net.StyleTransferNet_adv.encode", "adaptive_instance_norm.normalize", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "style_transfer_net.StyleTransferNet_adv.set_stat", "tensorflow.reduce_sum", "style_transfer_net.StyleTransferNet_adv.decode", "style_transfer_net.StyleTransferNet_adv.decode", "tensorflow.zeros", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.abs", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.assign", "tensorflow.reshape", "tensorflow.ones_initializer", "tensorflow.nn.softmax", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.encode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.normalize", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.style_transfer_net.Base_Style_Transfer.set_stat", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode"], ["", "def", "transform_from_internal_poly", "(", "self", ",", "content", ")", ":", "\n", "\n", "# encode image", "\n", "        ", "enc_c", ",", "enc_c_layers", "=", "self", ".", "encode", "(", "content", ")", "\n", "self", ".", "normalized", ",", "self", ".", "meanC", ",", "self", ".", "sigmaC", "=", "normalize", "(", "enc_c", ")", "\n", "\n", "INTERPOLATE_NUM", "=", "settings", ".", "config", "[", "\"INTERPOLATE_NUM\"", "]", "\n", "BATCH_SIZE", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "DIM", "=", "settings", ".", "config", "[", "\"DECODER_DIM\"", "]", "\n", "STORE_SHAPE", "=", "[", "BATCH_SIZE", "]", "+", "DIM", "\n", "\n", "self", ".", "store_var", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "zeros", "(", "STORE_SHAPE", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "internal_sigma", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "shape", "=", "(", "BATCH_SIZE", ",", "INTERPOLATE_NUM", ",", "1", ",", "1", ",", "DIM", "[", "2", "]", ")", ")", "\n", "self", ".", "internal_mean", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "\n", "BATCH_SIZE", ",", "INTERPOLATE_NUM", ",", "1", ",", "1", ",", "DIM", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "coef_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "BATCH_SIZE", ",", "INTERPOLATE_NUM", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"transform\"", ")", ":", "\n", "            ", "self", ".", "coef", "=", "tf", ".", "get_variable", "(", "\"coef\"", ",", "shape", "=", "[", "BATCH_SIZE", ",", "INTERPOLATE_NUM", "]", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "self", ".", "coef_asgn", "=", "tf", ".", "assign", "(", "self", ".", "coef", ",", "self", ".", "coef_ph", ")", "\n", "method", "=", "\"relu\"", "\n", "if", "method", "==", "\"relu\"", ":", "\n", "                ", "postive_coef", "=", "tf", ".", "nn", ".", "relu", "(", "self", ".", "coef", ")", "\n", "sum_coef", "=", "tf", ".", "reduce_sum", "(", "postive_coef", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "coef_poss", "=", "postive_coef", "/", "(", "sum_coef", "+", "1e-7", ")", "\n", "self", ".", "regulate", "=", "tf", ".", "assign", "(", "self", ".", "coef", ",", "coef_poss", ")", "\n", "coef_poss", "=", "tf", ".", "reshape", "(", "\n", "coef_poss", ",", "shape", "=", "[", "BATCH_SIZE", ",", "INTERPOLATE_NUM", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "method", "==", "\"softmax\"", ":", "\n", "                ", "coef", "=", "self", ".", "coef", "*", "2", "# control the gradient not to be too large", "\n", "coef_poss", "=", "tf", ".", "nn", ".", "softmax", "(", "coef", ",", "axis", "=", "-", "1", ")", "\n", "coef_poss", "=", "tf", ".", "reshape", "(", "coef_poss", ",", "shape", "=", "[", "BATCH_SIZE", ",", "INTERPOLATE_NUM", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "regulate", "=", "[", "]", "\n", "\n", "", "", "self", ".", "store_normalize", "=", "[", "tf", ".", "assign", "(", "self", ".", "store_var", ",", "self", ".", "normalized", ")", ",", "self", ".", "coef", ".", "initializer", "]", "\n", "self", ".", "sigma_poly", "=", "tf", ".", "reduce_sum", "(", "self", ".", "internal_sigma", "*", "coef_poss", ",", "axis", "=", "1", ")", "\n", "self", ".", "mean_poly", "=", "tf", ".", "reduce_sum", "(", "self", ".", "internal_mean", "*", "coef_poss", ",", "axis", "=", "1", ")", "\n", "self", ".", "set_stat", "(", "self", ".", "mean_poly", ",", "self", ".", "sigma_poly", ")", "\n", "self", ".", "restored_internal", "=", "self", ".", "store_var", "*", "self", ".", "sigma_poly", "+", "self", ".", "mean_poly", "\n", "self", ".", "target_features", "=", "self", ".", "restored_internal", "\n", "\n", "self", ".", "loss_l1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "enc_c", "-", "self", ".", "target_features", ")", ")", "\n", "\n", "generated_adv_img", "=", "self", ".", "decode", "(", "self", ".", "target_features", ")", "\n", "generated_img", "=", "self", ".", "decode", "(", "enc_c", ")", "\n", "\n", "return", "generated_img", ",", "generated_adv_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.attack.grad_attack": [[105, 137], ["sess.run", "sess.run", "sess.run", "print", "range", "sess.run", "sess.run", "sess.run", "sess.run", "range", "numpy.mean", "print"], "function", ["None"], ["", "def", "grad_attack", "(", ")", ":", "\n", "    ", "sess", ".", "run", "(", "stn", ".", "init_style", ",", "feed_dict", "=", "fdict", ")", "\n", "sess", ".", "run", "(", "global_step", ".", "initializer", ")", "\n", "rst_img", ",", "rst_loss", ",", "nat_acc", ",", "rst_acc", ",", "rst_mean", ",", "rst_sigma", "=", "sess", ".", "run", "(", "\n", "[", "adv_img", ",", "content_loss_y", ",", "nat_output", ".", "acc_y_auto", ",", "adv_output", ".", "acc_y_auto", ",", "stn", ".", "meanS", ",", "stn", ".", "sigmaS", "]", ",", "feed_dict", "=", "fdict", ")", "\n", "print", "(", "\"Nature Acc:\"", ",", "nat_acc", ")", "\n", "for", "i", "in", "range", "(", "ITER", ")", ":", "\n", "# Run an optimization step", "\n", "        ", "_", "=", "sess", ".", "run", "(", "[", "train_op", "]", ",", "feed_dict", "=", "fdict", ")", "\n", "\n", "# Clip the bound", "\n", "sess", ".", "run", "(", "stn", ".", "style_bound", ",", "feed_dict", "=", "fdict", ")", "\n", "\n", "# Monitor the progress", "\n", "_adv_img", ",", "acc", ",", "aloss", ",", "closs", ",", "_mean", ",", "_sigma", "=", "sess", ".", "run", "(", "\n", "[", "adv_img", ",", "adv_output", ".", "acc_y_auto", ",", "adv_loss", ",", "content_loss_y", ",", "stn", ".", "meanS", ",", "stn", ".", "sigmaS", "]", ",", "feed_dict", "=", "fdict", ")", "\n", "for", "j", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "# Save the best samples", "\n", "            ", "if", "acc", "[", "j", "]", "<", "rst_acc", "[", "j", "]", "or", "(", "acc", "[", "j", "]", "==", "rst_acc", "[", "j", "]", "and", "closs", "[", "j", "]", "<", "rst_loss", "[", "j", "]", ")", ":", "\n", "                ", "rst_img", "[", "j", "]", "=", "_adv_img", "[", "j", "]", "\n", "rst_acc", "[", "j", "]", "=", "acc", "[", "j", "]", "\n", "rst_loss", "[", "j", "]", "=", "closs", "[", "j", "]", "\n", "rst_mean", "[", "j", "]", "=", "_mean", "[", "j", "]", "\n", "rst_sigma", "[", "j", "]", "=", "_sigma", "[", "j", "]", "\n", "\n", "", "", "if", "i", "%", "50", "==", "0", ":", "\n", "            ", "acc", "=", "np", ".", "mean", "(", "acc", ")", "\n", "print", "(", "i", ",", "acc", ",", "\"advl\"", ",", "aloss", ",", "\"contentl\"", ",", "closs", ")", "\n", "\n", "# Reload the best saved samples", "\n", "", "", "sess", ".", "run", "(", "stn", ".", "asgn", ",", "feed_dict", "=", "{", "stn", ".", "meanS_ph", ":", "rst_mean", ",", "stn", ".", "sigmaS_ph", ":", "rst_sigma", "}", ")", "\n", "return", "rst_img", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.attack.gradient": [[144, 161], ["zip", "zip", "opt.apply_gradients.apply_gradients", "tensorflow.unstack", "numpy.sqrt", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "g1_list.append", "g2_list.append", "tensorflow.stack", "tensorflow.stack", "zip", "opt.apply_gradients.compute_gradients", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["def", "gradient", "(", "opt", ",", "vars", ",", "loss", ")", ":", "\n", "    ", "gradients", ",", "variables", "=", "zip", "(", "*", "opt", ".", "compute_gradients", "(", "loss", ",", "vars", ")", ")", "\n", "g_split", "=", "[", "tf", ".", "unstack", "(", "g", ",", "BATCH_SIZE", ",", "axis", "=", "0", ")", "for", "g", "in", "gradients", "]", "\n", "g1_list", "=", "[", "]", "\n", "g2_list", "=", "[", "]", "\n", "DIM", "=", "settings", ".", "config", "[", "\"DECODER_DIM\"", "]", "[", "-", "1", "]", "\n", "limit", "=", "10", "/", "np", ".", "sqrt", "(", "DIM", ")", "\n", "for", "g1", ",", "g2", "in", "zip", "(", "g_split", "[", "0", "]", ",", "g_split", "[", "1", "]", ")", ":", "\n", "#(g1, g2), _ = tf.clip_by_global_norm([g1, g2], CLIP_NORM_VALUE)", "\n", "        ", "g1", "=", "tf", ".", "clip_by_value", "(", "g1", ",", "-", "1", "/", "np", ".", "sqrt", "(", "limit", ")", ",", "1", "/", "np", ".", "sqrt", "(", "limit", ")", ")", "\n", "g2", "=", "tf", ".", "clip_by_value", "(", "g2", ",", "-", "1", "/", "np", ".", "sqrt", "(", "limit", ")", ",", "1", "/", "np", ".", "sqrt", "(", "limit", ")", ")", "\n", "g1_list", ".", "append", "(", "g1", ")", "\n", "g2_list", ".", "append", "(", "g2", ")", "\n", "", "gradients", "=", "[", "tf", ".", "stack", "(", "g1_list", ",", "axis", "=", "0", ")", ",", "tf", ".", "stack", "(", "g2_list", ",", "axis", "=", "0", ")", "]", "\n", "#gradients, _ = tf.clip_by_global_norm(gradients, 1.0)", "\n", "opt", "=", "opt", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "variables", ")", ",", "global_step", "=", "global_step", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.settings.init_settings": [[6, 158], ["logging.basicConfig", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "config_name.find", "config_name.find", "config_name.find", "config_name.find"], "function", ["None"], ["def", "init_settings", "(", "config_name", ",", "suffix", "=", "\"\"", ",", "task_dir", "=", "\"\"", ")", ":", "\n", "    ", "global", "config", "\n", "config", "=", "{", "}", "\n", "assert", "config_name", "in", "[", "\"cifar10\"", ",", "\"cifar10_shallow\"", ",", "\"cifar10_shallowest\"", ",", "\"cifar10_unscale\"", ",", "\"imagenet\"", ",", "\n", "\"imagenet_shallow\"", ",", "\"imagenet_shallowest\"", "]", "\n", "if", "config_name", ".", "find", "(", "\"cifar10\"", ")", ">=", "0", ":", "\n", "        ", "data_set", "=", "\"cifar10\"", "\n", "", "elif", "config_name", ".", "find", "(", "\"imagenet\"", ")", ">=", "0", ":", "\n", "        ", "data_set", "=", "\"imagenet\"", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "config", "[", "\"config_name\"", "]", "=", "config_name", "\n", "config", "[", "\"data_set\"", "]", "=", "data_set", "\n", "config", "[", "\"style_weight\"", "]", "=", "1", "\n", "\n", "# data mode:", "\n", "# 1: allowing any pairs to feed into training", "\n", "# 2: only allowing pairs from the same class to feed into training", "\n", "config", "[", "\"data_mode\"", "]", "=", "2", "\n", "config", "[", "\"INTERPOLATE_NUM\"", "]", "=", "50", "+", "1", "\n", "\n", "if", "config_name", ".", "find", "(", "\"_shallowest\"", ")", ">=", "0", ":", "\n", "        ", "config", "[", "\"BATCH_SIZE\"", "]", "=", "8", "\n", "\n", "config", "[", "\"ENCODER_LAYERS\"", "]", "=", "(", "\n", "'conv1_1'", ",", "'relu1_1'", ",", "'conv1_2'", ",", "'relu1_2'", ",", "'pool1'", ",", "\n", "'conv2_1'", ",", "'relu2_1'", ")", "\n", "config", "[", "\"DECODER_LAYERS\"", "]", "=", "(", "'conv2_1'", ",", "'conv1_2'", ",", "'conv1_1'", ")", "\n", "config", "[", "\"upsample_indices\"", "]", "=", "(", "0", ",", ")", "\n", "config", "[", "\"STYLE_LAYERS\"", "]", "=", "(", "'relu1_1'", ",", "'relu2_1'", ")", "\n", "", "elif", "config_name", ".", "find", "(", "\"_shallow\"", ")", ">=", "0", ":", "\n", "        ", "config", "[", "\"BATCH_SIZE\"", "]", "=", "8", "\n", "config", "[", "\"ENCODER_LAYERS\"", "]", "=", "(", "\n", "'conv1_1'", ",", "'relu1_1'", ",", "'conv1_2'", ",", "'relu1_2'", ",", "'pool1'", ",", "\n", "'conv2_1'", ",", "'relu2_1'", ",", "'conv2_2'", ",", "'relu2_2'", ",", "'pool2'", ",", "\n", "'conv3_1'", ",", "'relu3_1'", ",", ")", "\n", "config", "[", "\"DECODER_LAYERS\"", "]", "=", "(", "'conv3_1'", ",", "\n", "'conv2_2'", ",", "'conv2_1'", ",", "\n", "'conv1_2'", ",", "'conv1_1'", ")", "\n", "config", "[", "\"upsample_indices\"", "]", "=", "(", "1", ",", "3", ")", "\n", "config", "[", "\"STYLE_LAYERS\"", "]", "=", "(", "'relu1_1'", ",", "'relu2_1'", ",", "'relu3_1'", ")", "\n", "", "else", ":", "\n", "        ", "config", "[", "\"BATCH_SIZE\"", "]", "=", "8", "\n", "config", "[", "\"ENCODER_LAYERS\"", "]", "=", "(", "\n", "'conv1_1'", ",", "'relu1_1'", ",", "'conv1_2'", ",", "'relu1_2'", ",", "'pool1'", ",", "\n", "'conv2_1'", ",", "'relu2_1'", ",", "'conv2_2'", ",", "'relu2_2'", ",", "'pool2'", ",", "\n", "'conv3_1'", ",", "'relu3_1'", ",", "'conv3_2'", ",", "'relu3_2'", ",", "'conv3_3'", ",", "'relu3_3'", ",", "'conv3_4'", ",", "'relu3_4'", ",", "'pool3'", ",", "\n", "'conv4_1'", ",", "'relu4_1'", ")", "\n", "config", "[", "\"DECODER_LAYERS\"", "]", "=", "(", "'conv4_1'", ",", "\n", "'conv3_4'", ",", "'conv3_3'", ",", "'conv3_2'", ",", "'conv3_1'", ",", "\n", "'conv2_2'", ",", "'conv2_1'", ",", "\n", "'conv1_2'", ",", "'conv1_1'", ")", "\n", "config", "[", "\"upsample_indices\"", "]", "=", "(", "0", ",", "4", ",", "6", ")", "\n", "config", "[", "\"STYLE_LAYERS\"", "]", "=", "(", "'relu1_1'", ",", "'relu2_1'", ",", "'relu3_1'", ",", "'relu4_1'", ")", "\n", "\n", "", "if", "config_name", "==", "\"cifar10_unscale\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "10", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "16", ",", "16", ",", "128", "]", "\n", "\n", "config", "[", "\"NO_SCALE\"", "]", "=", "True", "\n", "config", "[", "\"BATCH_SIZE\"", "]", "=", "64", "\n", "config", "[", "\"ENCODER_LAYERS\"", "]", "=", "(", "\n", "'conv1_1'", ",", "'relu1_1'", ",", "'conv1_2'", ",", "'relu1_2'", ",", "'pool1'", ",", "\n", "'conv2_1'", ",", "'relu2_1'", ")", "\n", "config", "[", "\"DECODER_LAYERS\"", "]", "=", "(", "'conv2_1'", ",", "'conv1_2'", ",", "'conv1_1'", ")", "\n", "config", "[", "\"upsample_indices\"", "]", "=", "(", "0", ",", ")", "\n", "config", "[", "\"STYLE_LAYERS\"", "]", "=", "(", "'relu1_1'", ",", "'relu2_1'", ")", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./cifar10transform%d.ckpt\"", "%", "(", "config", "[", "\"style_weight\"", "]", ")", "\n", "\n", "", "elif", "config_name", "==", "\"cifar10_shallowest\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "10", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "112", ",", "112", ",", "128", "]", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./cifar10shallowesttransform_scale%d.ckpt\"", "%", "(", "\n", "config", "[", "\"style_weight\"", "]", ")", "\n", "\n", "", "elif", "config_name", "==", "\"cifar10_shallow\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "10", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "112", ",", "112", ",", "128", "]", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./cifar10shallowtransform_scale%d.ckpt\"", "%", "(", "\n", "config", "[", "\"style_weight\"", "]", ")", "\n", "\n", "", "elif", "config_name", "==", "\"cifar10\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "10", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "28", ",", "28", ",", "512", "]", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./cifar10transform_scale%d.ckpt\"", "%", "(", "\n", "config", "[", "\"style_weight\"", "]", ")", "\n", "\n", "", "elif", "config_name", "==", "\"imagenet\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "1000", "\n", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "224", ",", "224", ",", "3", "]", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "28", ",", "28", ",", "512", "]", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"imagenet_pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"imagenet_hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./imagenettransform%d.ckpt.mode2\"", "%", "(", "\n", "config", "[", "\"style_weight\"", "]", ")", "\n", "\n", "\n", "", "elif", "config_name", "==", "\"imagenet_shallow\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "1000", "\n", "config", "[", "\"INTERPOLATE_NUM\"", "]", "=", "50", "+", "1", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "56", ",", "56", ",", "256", "]", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "224", ",", "224", ",", "3", "]", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"imagenet_pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"imagenet_hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./imagenetshallowtransform%d.ckpt.mode2\"", "%", "(", "\n", "config", "[", "\"style_weight\"", "]", ")", "\n", "config", "[", "\"Decoder_Layer\"", "]", "=", "\"deconv\"", "\n", "\n", "", "elif", "config_name", "==", "\"imagenet_shallowest\"", ":", "\n", "        ", "config", "[", "\"CLASS_NUM\"", "]", "=", "1000", "\n", "config", "[", "\"INTERPOLATE_NUM\"", "]", "=", "50", "+", "1", "\n", "config", "[", "\"DECODER_DIM\"", "]", "=", "[", "112", ",", "112", ",", "128", "]", "\n", "config", "[", "\"IMAGE_SHAPE\"", "]", "=", "[", "224", ",", "224", ",", "3", "]", "\n", "\n", "config", "[", "\"pretrained_model\"", "]", "=", "\"imagenet_pretrained.ckpt\"", "\n", "config", "[", "\"hardened_model\"", "]", "=", "\"imagenet_hardened.ckpt\"", "\n", "config", "[", "\"model_save_path\"", "]", "=", "\"./imagenetshallowesttransform%d.ckpt.mode2\"", "%", "(", "\n", "config", "[", "\"style_weight\"", "]", ")", "\n", "config", "[", "\"Decoder_Layer\"", "]", "=", "\"deconv\"", "\n", "\n", "", "global", "logger", "\n", "\n", "FORMAT", "=", "'%(asctime)-15s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "FORMAT", ",", "\n", "filename", "=", "task_dir", "+", "\"log.log\"", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.settings.common_const_init": [[160, 204], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "print", "config.update", "settings.init_settings", "locals", "locals", "settings.init_settings"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.settings.init_settings", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.settings.init_settings"], ["", "def", "common_const_init", "(", "data_set", ",", "model_name", ",", "decoder_name", ",", "task_name", ")", ":", "\n", "\n", "    ", "global", "config", "\n", "\n", "\n", "assert", "data_set", "in", "[", "\"imagenet\"", ",", "\"cifar10\"", "]", "\n", "ENCODER_WEIGHTS_PATH", "=", "'vgg19_normalised.npz'", "\n", "base_dir_data", "=", "os", ".", "path", ".", "join", "(", "\"store\"", ",", "data_set", ")", "\n", "base_dir_decoder", "=", "os", ".", "path", ".", "join", "(", "\"store\"", ",", "data_set", ",", "decoder_name", ")", "\n", "base_dir_model", "=", "os", ".", "path", ".", "join", "(", "\"store\"", ",", "data_set", ",", "decoder_name", ",", "model_name", ")", "\n", "task_dir", "=", "os", ".", "path", ".", "join", "(", "\"store\"", ",", "data_set", ",", "decoder_name", ",", "model_name", ",", "task_name", ")", "\n", "os", ".", "makedirs", "(", "task_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "data_set", "==", "\"cifar10\"", ":", "\n", "        ", "assert", "model_name", "in", "[", "\"cifar10_nat\"", ",", "\"cifar10_adv\"", ",", "\"cifar10_trades\"", "]", "\n", "assert", "decoder_name", "in", "[", "\"cifar10\"", ",", "\"cifar10_shallow\"", ",", "\"cifar10_shallowest\"", ",", "\"cifar10_unscale\"", "]", "\n", "init_settings", "(", "decoder_name", ",", "task_dir", "=", "task_dir", ")", "\n", "\n", "if", "decoder_name", "==", "\"cifar10_unscale\"", ":", "\n", "            ", "Decoder_Model", "=", "\"./cifar10transform1.ckpt\"", "\n", "", "elif", "decoder_name", "==", "\"cifar10\"", ":", "\n", "            ", "Decoder_Model", "=", "\"./cifar10transform_scale1.ckpt\"", "\n", "", "elif", "decoder_name", "==", "\"cifar10_shallow\"", ":", "\n", "            ", "Decoder_Model", "=", "\"./cifar10shallowtransform_scale1.ckpt\"", "\n", "", "elif", "decoder_name", "==", "\"cifar10_shallowest\"", ":", "\n", "            ", "Decoder_Model", "=", "\"./cifar10shallowesttransform_scale1.ckpt\"", "\n", "\n", "", "", "elif", "data_set", "==", "\"imagenet\"", ":", "\n", "        ", "assert", "model_name", "in", "[", "\"imagenet_denoise\"", ",", "\"imagenet_normal\"", "]", "\n", "assert", "decoder_name", "in", "[", "\"imagenet\"", ",", "\n", "\"imagenet_shallow\"", ",", "\"imagenet_shallowest\"", "]", "\n", "init_settings", "(", "decoder_name", ",", "task_dir", "=", "task_dir", ")", "\n", "from", "imagenetmod", ".", "interface", "import", "imagenet", "\n", "\n", "if", "decoder_name", "==", "\"imagenet_shallowest\"", ":", "\n", "            ", "Decoder_Model", "=", "\"./imagenetshallowesttransform1.ckpt.mode2\"", "\n", "", "elif", "decoder_name", "==", "\"imagenet_shallow\"", ":", "\n", "# \"./trans_pretrained/imagenetshallowtransform1.ckpt-104000\"", "\n", "            ", "Decoder_Model", "=", "\"./imagenetshallowtransform1.ckpt.mode2\"", "\n", "", "elif", "decoder_name", "==", "\"imagenet\"", ":", "\n", "            ", "Decoder_Model", "=", "\"./imagenettransform1.ckpt.mode2\"", "\n", "\n", "", "", "print", "(", "locals", "(", ")", ")", "\n", "config", ".", "update", "(", "locals", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.__init__": [[10, 31], ["tensorflow.variable_scope", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables", "decoder.Decoder._create_variables"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight_vars", "=", "[", "]", "\n", "\n", "if", "\"Decoder_Layer\"", "in", "settings", ".", "config", ":", "\n", "            ", "self", ".", "decoder_layer", "=", "settings", ".", "config", "[", "\"Decoder_Layer\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "decoder_layer", "=", "\"conv\"", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'decoder'", ")", ":", "\n", "            ", "self", ".", "_create_variables", "(", "512", ",", "256", ",", "3", ",", "scope", "=", "'conv4_1'", ")", "\n", "\n", "self", ".", "_create_variables", "(", "256", ",", "256", ",", "3", ",", "scope", "=", "'conv3_4'", ")", "\n", "self", ".", "_create_variables", "(", "256", ",", "256", ",", "3", ",", "scope", "=", "'conv3_3'", ")", "\n", "self", ".", "_create_variables", "(", "256", ",", "256", ",", "3", ",", "scope", "=", "'conv3_2'", ")", "\n", "self", ".", "_create_variables", "(", "256", ",", "128", ",", "3", ",", "scope", "=", "'conv3_1'", ")", "\n", "\n", "self", ".", "_create_variables", "(", "128", ",", "128", ",", "3", ",", "scope", "=", "'conv2_2'", ")", "\n", "self", ".", "_create_variables", "(", "128", ",", "64", ",", "3", ",", "scope", "=", "'conv2_1'", ")", "\n", "\n", "self", ".", "_create_variables", "(", "64", ",", "64", ",", "3", ",", "scope", "=", "'conv1_2'", ")", "\n", "self", ".", "_create_variables", "(", "64", ",", "3", ",", "3", ",", "scope", "=", "'conv1_1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables": [[32, 41], ["decoder.Decoder._create_variables_c", "decoder.Decoder._create_variables_t"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables_c", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables_t"], ["", "", "def", "_create_variables", "(", "self", ",", "input_filters", ",", "output_filters", ",", "kernel_size", ",", "scope", ")", ":", "\n", "        ", "if", "self", ".", "decoder_layer", "==", "\"conv\"", ":", "\n", "            ", "self", ".", "_create_variables_c", "(", "\n", "input_filters", ",", "output_filters", ",", "kernel_size", ",", "scope", ")", "\n", "", "elif", "self", ".", "decoder_layer", "==", "\"deconv\"", ":", "\n", "            ", "self", ".", "_create_variables_t", "(", "\n", "input_filters", ",", "output_filters", ",", "kernel_size", ",", "scope", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables_c": [[42, 54], ["decoder.Decoder.weight_vars.append", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "", "def", "_create_variables_c", "(", "self", ",", "input_filters", ",", "output_filters", ",", "kernel_size", ",", "scope", ")", ":", "\n", "        ", "if", "scope", "in", "settings", ".", "config", "[", "\"DECODER_LAYERS\"", "]", ":", "\n", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "shape", "=", "[", "kernel_size", ",", "kernel_size", ",", "\n", "input_filters", ",", "output_filters", "]", "\n", "kernel", "=", "tf", ".", "get_variable", "(", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "\n", "uniform", "=", "False", ")", ",", "shape", "=", "shape", ",", "name", "=", "'kernel'", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "\n", "uniform", "=", "False", ")", ",", "shape", "=", "[", "output_filters", "]", ",", "name", "=", "'bias'", ")", "\n", "pack", "=", "(", "kernel", ",", "bias", ")", "\n", "", "self", ".", "weight_vars", ".", "append", "(", "pack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder._create_variables_t": [[55, 66], ["decoder.Decoder.weight_vars.append", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "", "def", "_create_variables_t", "(", "self", ",", "input_filters", ",", "output_filters", ",", "kernel_size", ",", "scope", ")", ":", "\n", "        ", "if", "scope", "in", "settings", ".", "config", "[", "\"DECODER_LAYERS\"", "]", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "shape", "=", "[", "kernel_size", ",", "kernel_size", ",", "\n", "output_filters", ",", "input_filters", "]", "\n", "kernel", "=", "tf", ".", "get_variable", "(", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "\n", "uniform", "=", "False", ")", ",", "shape", "=", "shape", ",", "name", "=", "'kernel'", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "\n", "uniform", "=", "False", ")", ",", "shape", "=", "[", "output_filters", "]", ",", "name", "=", "'bias'", ")", "\n", "", "pack", "=", "(", "kernel", ",", "bias", ")", "\n", "self", ".", "weight_vars", ".", "append", "(", "pack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode": [[67, 94], ["range", "len", "len", "func", "func", "decoder.upsample"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.upsample"], ["", "", "def", "decode", "(", "self", ",", "image", ")", ":", "\n", "# upsampling after 'conv4_1', 'conv3_1', 'conv2_1'", "\n", "        ", "upsample_indices", "=", "settings", ".", "config", "[", "\"upsample_indices\"", "]", "\n", "final_layer_idx", "=", "len", "(", "self", ".", "weight_vars", ")", "-", "1", "\n", "\n", "if", "self", ".", "decoder_layer", "==", "\"conv\"", ":", "\n", "            ", "func", "=", "conv2d", "\n", "", "else", ":", "\n", "            ", "func", "=", "transconv2d", "\n", "\n", "", "out", "=", "image", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "weight_vars", ")", ")", ":", "\n", "#print(\"decoder in %d shape: \" % i, out.shape.as_list())", "\n", "            ", "kernel", ",", "bias", "=", "self", ".", "weight_vars", "[", "i", "]", "\n", "#if i in upsample_indices:", "\n", "#    out=transconv2d(out,kernel,bias)", "\n", "#else:", "\n", "if", "i", "==", "final_layer_idx", ":", "\n", "                ", "out", "=", "func", "(", "out", ",", "kernel", ",", "bias", ",", "use_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "func", "(", "out", ",", "kernel", ",", "bias", ")", "\n", "\n", "", "if", "i", "in", "upsample_indices", ":", "\n", "                ", "out", "=", "upsample", "(", "out", ")", "\n", "#print(\"decoder out %d shape: \"%i, out.shape.as_list())", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d": [[96, 108], ["tensorflow.pad", "tensorflow.nn.conv2d", "tensorflow.nn.bias_add", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d"], ["", "", "def", "conv2d", "(", "x", ",", "kernel", ",", "bias", ",", "use_relu", "=", "True", ")", ":", "\n", "# padding image with reflection mode", "\n", "    ", "x_padded", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'REFLECT'", ")", "\n", "\n", "# conv and add bias", "\n", "out", "=", "tf", ".", "nn", ".", "conv2d", "(", "x_padded", ",", "kernel", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "out", "=", "tf", ".", "nn", ".", "bias_add", "(", "out", ",", "bias", ")", "\n", "\n", "if", "use_relu", ":", "\n", "        ", "out", "=", "tf", ".", "nn", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.transconv2d": [[110, 125], ["tensorflow.nn.conv2d_transpose", "tensorflow.shape", "x.shape.as_list", "kernel.shape.as_list", "tensorflow.nn.relu"], "function", ["None"], ["", "def", "transconv2d", "(", "x", ",", "kernel", ",", "bias", ",", "use_relu", "=", "True", ",", "stride", "=", "1", ")", ":", "\n", "\n", "    ", "bs", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "img_sz", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", "\n", "#print(img_sz)", "\n", "filter_size", "=", "kernel", ".", "shape", ".", "as_list", "(", ")", "[", "2", "]", "\n", "# conv and add bias", "\n", "g_deconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "kernel", ",", "output_shape", "=", "[", "\n", "bs", ",", "img_sz", "*", "stride", ",", "img_sz", "*", "stride", ",", "filter_size", "]", ",", "strides", "=", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "out", "=", "g_deconv", "+", "bias", "\n", "\n", "if", "use_relu", ":", "\n", "        ", "out", "=", "tf", ".", "nn", ".", "relu", "(", "out", ")", "\n", "#print(out.shape.as_list())", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.upsample": [[127, 134], ["tensorflow.image.resize_images", "x.shape.as_list", "x.shape.as_list"], "function", ["None"], ["", "def", "upsample", "(", "x", ",", "scale", "=", "2", ")", ":", "\n", "    ", "height", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", "*", "scale", "#tf.shape(x)[1] * scale", "\n", "width", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "2", "]", "*", "scale", "# tf.shape(x)[2] * scale", "\n", "output", "=", "tf", ".", "image", ".", "resize_images", "(", "x", ",", "[", "height", ",", "width", "]", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "NEAREST_NEIGHBOR", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.modelprep.init_classifier": [[14, 72], ["tensorflow.reverse", "imagenetmod.build_imagenet_model", "utils.build_logits", "numpy.array().reshape", "models.build_imagenet_model", "utils.build_logits", "models.cifar10_class.Model", "resnet_cifar10.Model._build_model", "utils.build_logits", "utils.get_scope_var", "tensorflow.train.Saver", "numpy.array", "tf.train.Saver.restore", "models.trade_interface.get_model", "utils.build_logits", "tf.train.Saver.restore"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.build_imagenet_model", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.build_imagenet_model", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._build_model", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.get_scope_var", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.get_model"], ["def", "init_classifier", "(", "conf", "=", "1", ")", ":", "\n", "    ", "global", "build_model", ",", "restore_model", "\n", "model_name", "=", "settings", ".", "config", "[", "\"model_name\"", "]", "\n", "assert", "model_name", "in", "[", "\"imagenet_denoise\"", ",", "\"imagenet_normal\"", ",", "\"cifar10_nat\"", ",", "\"cifar10_adv\"", ",", "\"cifar10_trades\"", "]", "\n", "if", "model_name", "in", "[", "\"imagenet_denoise\"", "]", ":", "\n", "\n", "        ", "def", "_build_model", "(", "input", ",", "label", ",", "reuse", ")", ":", "\n", "            ", "input", "=", "tf", ".", "reverse", "(", "input", ",", "axis", "=", "[", "-", "1", "]", ")", "# rgb to bgr", "\n", "logits", "=", "imagenet_denoise_interface", ".", "build_imagenet_model", "(", "\n", "input", ",", "label", ",", "reuse", ",", "conf", "=", "conf", ")", "\n", "container", "=", "utils", ".", "build_logits", "(", "logits", ",", "label", ",", "conf", ")", "\n", "return", "container", "\n", "\n", "", "_restore_model", "=", "imagenet_denoise_interface", ".", "restore_parameter", "\n", "\n", "", "elif", "model_name", "in", "[", "\"imagenet_normal\"", "]", ":", "\n", "        ", "def", "_build_model", "(", "input", ",", "label", ",", "reuse", ")", ":", "\n", "# refer to https://github.com/tensorflow/models/blob/6e63dfee4118df6e889227b1a32badf7d0a09e3b/research/slim/preprocessing/vgg_preprocessing.py", "\n", "            ", "_R_MEAN", "=", "123.68", "\n", "_G_MEAN", "=", "116.78", "\n", "_B_MEAN", "=", "103.94", "\n", "_mean", "=", "np", ".", "array", "(", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "input", "=", "input", "-", "_mean", "\n", "\n", "logits", "=", "imagenet_normal_interface", ".", "build_imagenet_model", "(", "\n", "input", ",", "label", ",", "reuse", ",", "conf", "=", "conf", ")", "\n", "container", "=", "utils", ".", "build_logits", "(", "logits", ",", "label", ",", "conf", ")", "\n", "return", "container", "\n", "\n", "", "_restore_model", "=", "imagenet_normal_interface", ".", "restore_parameter", "\n", "\n", "", "elif", "model_name", "in", "[", "\"cifar10_nat\"", ",", "\"cifar10_adv\"", "]", ":", "\n", "        ", "def", "_build_model", "(", "input", ",", "label", ",", "reuse", ")", ":", "\n", "            ", "model", "=", "resnet_cifar10", ".", "Model", "(", "\"eval\"", ",", "dataprep", ".", "raw_cifar", ".", "train_images", ")", "\n", "model", ".", "_build_model", "(", "input", ",", "label", ",", "reuse", ",", "conf", "=", "conf", ")", "\n", "container", "=", "utils", ".", "build_logits", "(", "model", ".", "logits", ",", "label", ",", "conf", ")", "\n", "return", "container", "\n", "\n", "", "def", "_restore_model", "(", "sess", ")", ":", "\n", "            ", "classifier_vars", "=", "utils", ".", "get_scope_var", "(", "\"model\"", ")", "\n", "classifier_saver", "=", "tf", ".", "train", ".", "Saver", "(", "classifier_vars", ",", "max_to_keep", "=", "1", ")", "\n", "if", "model_name", "==", "\"cifar10_nat\"", ":", "\n", "                ", "classifier_saver", ".", "restore", "(", "sess", ",", "\"./pretrained/pretrained.ckpt\"", ")", "\n", "", "elif", "model_name", "==", "\"cifar10_adv\"", ":", "\n", "                ", "classifier_saver", ".", "restore", "(", "sess", ",", "\"./pretrained/hardened.ckpt\"", ")", "\n", "\n", "", "", "", "elif", "model_name", "in", "[", "\"cifar10_trades\"", "]", ":", "\n", "        ", "def", "_build_model", "(", "input", ",", "label", ",", "reuse", ")", ":", "\n", "            ", "assert", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "==", "64", ",", "\"Graph is static and the batch size must be 64\"", "\n", "logits", "=", "cifar_wrn_trades_interface", ".", "get_model", "(", "input", ")", "\n", "container", "=", "utils", ".", "build_logits", "(", "logits", ",", "label", ",", "conf", ")", "\n", "return", "container", "\n", "\n", "", "def", "_restore_model", "(", "sess", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "", "restore_model", "=", "_restore_model", "\n", "build_model", "=", "_build_model", "\n", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.build_logits.__init__": [[66, 68], ["utils.build_logits._build"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.build_logits._build"], ["    ", "def", "__init__", "(", "self", ",", "logits", ",", "label", ",", "conf", "=", "1", ")", ":", "\n", "        ", "self", ".", "_build", "(", "logits", ",", "label", ",", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.build_logits._build": [[69, 107], ["tensorflow.one_hot", "tensorflow.argmax", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "utils.top_k_acc", "tensorflow.reduce_mean", "tensorflow.nn.top_k", "tensorflow.reduce_sum", "logits.shape.as_list", "tensorflow.equal", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.top_k_acc"], ["", "def", "_build", "(", "self", ",", "logits", ",", "label", ",", "conf", ")", ":", "\n", "        ", "classes", "=", "logits", ".", "shape", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "logits", "=", "logits", "\n", "self", ".", "labels", "=", "label", "\n", "self", ".", "onehot_label", "=", "tf", ".", "one_hot", "(", "label", ",", "depth", "=", "classes", ")", "\n", "self", ".", "prediction", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "acc_y", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "self", ".", "prediction", ",", "label", ")", ",", "tf", ".", "float32", ")", "\n", "self", ".", "acc", "=", "tf", ".", "reduce_mean", "(", "self", ".", "acc_y", ")", "\n", "self", ".", "logits", "=", "logits", "\n", "self", ".", "label_logit", "=", "tf", ".", "reduce_sum", "(", "self", ".", "onehot_label", "*", "logits", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "wrong_logit", "=", "tf", ".", "reduce_max", "(", "\n", "(", "1", "-", "self", ".", "onehot_label", ")", "*", "logits", "-", "self", ".", "onehot_label", "*", "1e9", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "target_loss", "=", "-", "tf", ".", "nn", ".", "relu", "(", "\n", "self", ".", "label_logit", "-", "self", ".", "wrong_logit", "+", "conf", ")", "\n", "self", ".", "xent", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "label", ",", "logits", "=", "logits", ")", "\n", "self", ".", "xent_sum", "=", "tf", ".", "reduce_sum", "(", "self", ".", "xent", ")", "\n", "self", ".", "xent_mean", "=", "tf", ".", "reduce_mean", "(", "self", ".", "xent", ")", "\n", "\n", "self", ".", "acc_y_5", "=", "top_k_acc", "(", "self", ".", "logits", ",", "self", ".", "labels", ",", "k", "=", "5", ")", "\n", "self", ".", "acc_5", "=", "tf", ".", "reduce_mean", "(", "self", ".", "acc_y_5", ")", "\n", "\n", "self", ".", "wrong_logit5", ",", "_idx", "=", "tf", ".", "nn", ".", "top_k", "(", "\n", "logits", "*", "(", "1", "-", "self", ".", "onehot_label", ")", "-", "self", ".", "onehot_label", "*", "1e7", ",", "k", "=", "5", ",", "sorted", "=", "False", ")", "\n", "self", ".", "true_logit5", "=", "tf", ".", "reduce_sum", "(", "\n", "logits", "*", "self", ".", "onehot_label", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "\n", "# The higher, the more successful of adv attack", "\n", "self", ".", "target_loss5", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "self", ".", "true_logit5", "-", "self", ".", "wrong_logit5", "+", "conf", ")", ",", "axis", "=", "1", ")", "\n", "if", "classes", ">", "50", ":", "\n", "            ", "self", ".", "accuracy", "=", "self", ".", "acc_5", "\n", "self", ".", "acc_y_auto", "=", "self", ".", "acc_y_5", "\n", "self", ".", "target_loss_auto", "=", "self", ".", "target_loss5", "\n", "", "else", ":", "\n", "            ", "self", ".", "accuracy", "=", "self", ".", "acc", "\n", "self", ".", "acc_y_auto", "=", "self", ".", "acc_y", "\n", "self", ".", "target_loss_auto", "=", "self", ".", "target_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.save_rgb_img": [[6, 10], ["img.astype.astype", "PIL.Image.fromarray().save", "PIL.Image.fromarray"], "function", ["None"], ["def", "save_rgb_img", "(", "img", ",", "path", ")", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "#img=np.reshape(img,[28,28])", "\n", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'RGB'", ")", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_scope_var": [[12, 21], ["tensorflow.get_collection", "tensorflow.get_collection", "len"], "function", ["None"], ["", "def", "get_scope_var", "(", "scope_name", ",", "only_train", "=", "False", ")", ":", "\n", "    ", "if", "only_train", ":", "\n", "        ", "var_list", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "scope_name", ")", "\n", "", "else", ":", "\n", "        ", "var_list", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope_name", ")", "\n", "", "assert", "(", "len", "(", "var_list", ")", ">=", "1", ")", "\n", "return", "var_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_shape": [[23, 29], ["x.get_shape().as_list", "x.get_shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_shape"], ["", "def", "get_shape", "(", "x", ")", ":", "\n", "    ", "x_shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "x_shape", "[", "0", "]", "is", "None", ":", "\n", "        ", "return", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "]", "+", "x_shape", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "x_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.average_gradients": [[32, 56], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["None"], ["", "", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "            ", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "grads", ",", "0", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.top_k_acc": [[60, 63], ["tensorflow.cast", "tensorflow.nn.in_top_k"], "function", ["None"], ["def", "top_k_acc", "(", "logits", ",", "labels", ",", "k", ")", ":", "\n", "    ", "return", "tf", ".", "cast", "(", "tf", ".", "nn", ".", "in_top_k", "(", "predictions", "=", "logits", ",", "\n", "targets", "=", "labels", ",", "k", "=", "5", ")", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.normalize": [[108, 120], ["tensorflow.nn.moments", "content.shape.as_list", "tensorflow.sqrt", "tensorflow.add"], "function", ["None"], ["", "", "", "def", "normalize", "(", "content", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "meanC", ",", "varC", "=", "tf", ".", "nn", ".", "moments", "(", "content", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "#meanC_s, varC_s = tf.nn.moments(content, [1, 2])", "\n", "bs", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "content_shape", "=", "content", ".", "shape", ".", "as_list", "(", ")", "\n", "new_shape", "=", "[", "bs", ",", "1", ",", "1", ",", "content_shape", "[", "3", "]", "]", "\n", "\n", "sigmaC", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "varC", ",", "epsilon", ")", ")", "\n", "#sigmaS = tf.sqrt(tf.add(varS, epsilon))", "\n", "normalize_content", "=", "(", "content", "-", "meanC", ")", "/", "sigmaC", "\n", "\n", "return", "normalize_content", ",", "meanC", ",", "sigmaC", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.AdaIN": [[6, 14], ["tensorflow.nn.moments", "tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.add", "tensorflow.add"], "function", ["None"], ["def", "AdaIN", "(", "content", ",", "style", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "meanC", ",", "varC", "=", "tf", ".", "nn", ".", "moments", "(", "content", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "meanS", ",", "varS", "=", "tf", ".", "nn", ".", "moments", "(", "style", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "\n", "sigmaC", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "varC", ",", "epsilon", ")", ")", "\n", "sigmaS", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "varS", ",", "epsilon", ")", ")", "\n", "\n", "return", "(", "content", "-", "meanC", ")", "*", "sigmaS", "/", "sigmaC", "+", "meanS", ",", "meanS", ",", "sigmaS", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.AdaIN_adv_tanh": [[15, 56], ["tensorflow.nn.moments", "content.shape.as_list", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.sign", "tensorflow.abs", "adaptive_instance_norm.AdaIN_adv_tanh.get_mid_range"], "function", ["None"], ["", "def", "AdaIN_adv_tanh", "(", "content", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "meanC", ",", "varC", "=", "tf", ".", "nn", ".", "moments", "(", "content", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "bs", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "content_shape", "=", "content", ".", "shape", ".", "as_list", "(", ")", "\n", "new_shape", "=", "[", "bs", ",", "1", ",", "1", ",", "content_shape", "[", "3", "]", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"scale\"", ")", ":", "\n", "        ", "sigmaS", "=", "tf", ".", "get_variable", "(", "\"sigma_S\"", ",", "shape", "=", "new_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "meanS", "=", "tf", ".", "get_variable", "(", "\"mean_S\"", ",", "shape", "=", "new_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "\n", "", "sigmaC", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "varC", ",", "epsilon", ")", ")", "\n", "\n", "\n", "p", "=", "tf", ".", "sqrt", "(", "1.5", ")", "\n", "\n", "def", "get_mid_range", "(", "l", ",", "r", ")", ":", "\n", "        ", "_mid", "=", "(", "l", "+", "r", ")", "/", "2.0", "\n", "_range", "=", "(", "r", "-", "l", ")", "/", "2.0", "\n", "return", "_mid", ",", "_range", "\n", "\n", "", "sign", "=", "tf", ".", "sign", "(", "meanC", ")", "\n", "abs_meanC", "=", "tf", ".", "abs", "(", "meanC", ")", "\n", "\n", "_sigma_mid", ",", "_sigma_range", "=", "get_mid_range", "(", "sigmaC", "/", "p", ",", "sigmaC", "*", "p", ")", "\n", "_mean_mid", ",", "_mean_range", "=", "get_mid_range", "(", "abs_meanC", "/", "p", ",", "abs_meanC", "*", "p", ")", "\n", "\n", "sigmaSp", "=", "_sigma_range", "*", "tf", ".", "nn", ".", "tanh", "(", "sigmaS", ")", "+", "_sigma_mid", "\n", "meanSp", "=", "sign", "*", "(", "_mean_range", "*", "tf", ".", "nn", ".", "tanh", "(", "meanS", ")", "+", "_mean_mid", ")", "\n", "\n", "ops_bound", "=", "[", "]", "\n", "\n", "ops_asgn", "=", "[", "tf", ".", "assign", "(", "sigmaS", ",", "tf", ".", "atanh", "(", "(", "sigmaC", "-", "_sigma_mid", ")", "/", "(", "_sigma_range", "+", "1e-4", ")", ")", ")", ",", "\n", "tf", ".", "assign", "(", "meanS", ",", "tf", ".", "atanh", "(", "(", "abs_meanC", "-", "_mean_mid", ")", "/", "(", "_mean_range", "+", "1e-4", ")", ")", ")", "]", "\n", "\n", "#ops_asgn = [sigmaS.initializer, meanS.initializer]#", "\n", "#ops_asgn = [tf.assign(sigmaS, sigmaC-_sigma_mid),", "\n", "#            tf.assign(meanS, meanC-_mean_mid)]", "\n", "\n", "return", "(", "content", "-", "meanC", ")", "*", "sigmaSp", "/", "sigmaC", "+", "meanSp", ",", "ops_asgn", ",", "ops_bound", ",", "sigmaSp", ",", "meanSp", ",", "meanS", ",", "sigmaS", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.AdaIN_adv": [[58, 88], ["tensorflow.nn.moments", "content.shape.as_list", "tensorflow.sqrt", "tensorflow.sign", "tensorflow.abs", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.add", "tensorflow.assign", "tensorflow.assign", "tensorflow.shape", "tensorflow.shape", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.zeros_initializer", "tensorflow.ones_initializer"], "function", ["None"], ["", "def", "AdaIN_adv", "(", "content", ",", "epsilon", "=", "1e-5", ",", "p", "=", "1.5", ")", ":", "\n", "    ", "meanC", ",", "varC", "=", "tf", ".", "nn", ".", "moments", "(", "content", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "bs", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "content_shape", "=", "content", ".", "shape", ".", "as_list", "(", ")", "\n", "new_shape", "=", "[", "bs", ",", "1", ",", "1", ",", "content_shape", "[", "3", "]", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"scale\"", ")", ":", "\n", "        ", "meanS", "=", "tf", ".", "get_variable", "(", "\"mean_S\"", ",", "shape", "=", "new_shape", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "sigmaS", "=", "tf", ".", "get_variable", "(", "\"sigma_S\"", ",", "shape", "=", "new_shape", ",", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ")", "\n", "\n", "\n", "", "sigmaC", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "varC", ",", "epsilon", ")", ")", "\n", "\n", "#p = 1.5", "\n", "p_sigma", "=", "p", "\n", "p_mean", "=", "p", "\n", "\n", "sign", "=", "tf", ".", "sign", "(", "meanC", ")", "\n", "abs_meanC", "=", "tf", ".", "abs", "(", "meanC", ")", "\n", "ops_bound", "=", "[", "tf", ".", "assign", "(", "sigmaS", ",", "tf", ".", "clip_by_value", "(", "sigmaS", ",", "sigmaC", "/", "p_sigma", ",", "sigmaC", "*", "p_sigma", ")", ")", ",", "\n", "tf", ".", "assign", "(", "meanS", ",", "tf", ".", "clip_by_value", "(", "meanS", ",", "abs_meanC", "/", "p_mean", ",", "abs_meanC", "*", "p_mean", ")", ")", "]", "\n", "\n", "sigmaC_rand", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "sigmaC", ")", ",", "sigmaC", "/", "p", ",", "sigmaC", "*", "p", ")", "\n", "meanC_rand", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "meanC", ")", ",", "abs_meanC", "/", "p", ",", "abs_meanC", "*", "p", ")", "\n", "#sigmaS = tf.sqrt(tf.add(varS, epsilon))", "\n", "ops_asgn", "=", "[", "tf", ".", "assign", "(", "meanS", ",", "abs_meanC", ")", ",", "tf", ".", "assign", "(", "sigmaS", ",", "sigmaC", ")", "]", "\n", "ops_asgn_rand", "=", "[", "tf", ".", "assign", "(", "sigmaS", ",", "sigmaC_rand", ")", ",", "tf", ".", "assign", "(", "meanS", ",", "meanC_rand", ")", "]", "\n", "\n", "return", "(", "content", "-", "meanC", ")", "*", "sigmaS", "/", "sigmaC", "+", "sign", "*", "meanS", ",", "ops_asgn", ",", "ops_bound", ",", "sigmaS", ",", "meanS", ",", "meanC", ",", "sigmaC", ",", "ops_asgn_rand", ",", "(", "content", "-", "meanC", ")", "/", "(", "sigmaC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.adaptive_instance_norm.normalize": [[90, 104], ["tensorflow.nn.moments", "content.shape.as_list", "tensorflow.sqrt", "tensorflow.add"], "function", ["None"], ["", "def", "normalize", "(", "content", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "meanC", ",", "varC", "=", "tf", ".", "nn", ".", "moments", "(", "content", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "#meanC_s, varC_s = tf.nn.moments(content, [1, 2])", "\n", "bs", "=", "settings", ".", "config", "[", "\"BATCH_SIZE\"", "]", "\n", "content_shape", "=", "content", ".", "shape", ".", "as_list", "(", ")", "\n", "new_shape", "=", "[", "bs", ",", "1", ",", "1", ",", "content_shape", "[", "3", "]", "]", "\n", "\n", "sigmaC", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "varC", ",", "epsilon", ")", ")", "\n", "#sigmaS = tf.sqrt(tf.add(varS, epsilon))", "\n", "normalize_content", "=", "(", "content", "-", "meanC", ")", "/", "sigmaC", "\n", "\n", "\n", "\n", "return", "normalize_content", ",", "meanC", ",", "sigmaC", "\n", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_shortcut": [[13, 19], ["l.get_shape().as_list", "tensorpack.models.Conv2D", "l.get_shape"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_shape"], ["def", "resnet_shortcut", "(", "l", ",", "n_out", ",", "stride", ",", "activation", "=", "tf", ".", "identity", ")", ":", "\n", "    ", "n_in", "=", "l", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "if", "n_in", "!=", "n_out", ":", "# change dimension when channel is not the same", "\n", "        ", "return", "Conv2D", "(", "'convshortcut'", ",", "l", ",", "n_out", ",", "1", ",", "strides", "=", "stride", ",", "activation", "=", "activation", ")", "\n", "", "else", ":", "\n", "        ", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.get_bn": [[21, 26], ["tensorpack.models.BatchNorm", "tensorpack.models.BatchNorm", "tensorflow.zeros_initializer"], "function", ["None"], ["", "", "def", "get_bn", "(", "zero_init", "=", "False", ")", ":", "\n", "    ", "if", "zero_init", ":", "\n", "        ", "return", "lambda", "x", ",", "name", "=", "None", ":", "BatchNorm", "(", "'bn'", ",", "x", ",", "gamma_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "lambda", "x", ",", "name", "=", "None", ":", "BatchNorm", "(", "'bn'", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_bottleneck": [[28, 49], ["tensorpack.models.Conv2D", "tensorpack.models.Conv2D", "tensorpack.models.Conv2D", "tensorflow.nn.relu", "resnet_model.resnet_shortcut", "resnet_model.get_bn", "resnet_model.get_bn"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_shortcut", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.get_bn", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.get_bn"], ["", "", "def", "resnet_bottleneck", "(", "l", ",", "ch_out", ",", "stride", ",", "group", "=", "1", ",", "res2_bottleneck", "=", "64", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        group (int): the number of groups for resnext\n        res2_bottleneck (int): the number of channels in res2 bottleneck.\n    The default corresponds to ResNeXt 1x64d, i.e. vanilla ResNet.\n    \"\"\"", "\n", "ch_factor", "=", "res2_bottleneck", "*", "group", "//", "64", "\n", "shortcut", "=", "l", "\n", "l", "=", "Conv2D", "(", "'conv1'", ",", "l", ",", "ch_out", "*", "ch_factor", ",", "1", ",", "strides", "=", "1", ",", "activation", "=", "BNReLU", ")", "\n", "l", "=", "Conv2D", "(", "'conv2'", ",", "l", ",", "ch_out", "*", "ch_factor", ",", "3", ",", "strides", "=", "stride", ",", "activation", "=", "BNReLU", ",", "split", "=", "group", ")", "\n", "\"\"\"\n    ImageNet in 1 Hour, Sec 5.1:\n    the stride-2 convolutions are on 3\u00d73 layers instead of on 1\u00d71 layers\n    \"\"\"", "\n", "l", "=", "Conv2D", "(", "'conv3'", ",", "l", ",", "ch_out", "*", "4", ",", "1", ",", "activation", "=", "get_bn", "(", "zero_init", "=", "True", ")", ")", "\n", "\"\"\"\n    ImageNet in 1 Hour, Sec 5.1: each residual block's last BN where \u03b3 is initialized to be 0\n    \"\"\"", "\n", "ret", "=", "l", "+", "resnet_shortcut", "(", "shortcut", ",", "ch_out", "*", "4", ",", "stride", ",", "activation", "=", "get_bn", "(", "zero_init", "=", "False", ")", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "ret", ",", "name", "=", "'block_output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_group": [[51, 58], ["tensorflow.variable_scope", "range", "tensorflow.variable_scope", "block_func"], "function", ["None"], ["", "def", "resnet_group", "(", "name", ",", "l", ",", "block_func", ",", "features", ",", "count", ",", "stride", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "count", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "current_stride", "=", "stride", "if", "i", "==", "0", "else", "1", "\n", "l", "=", "block_func", "(", "l", ",", "features", ",", "current_stride", ")", "\n", "", "", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_backbone": [[60, 79], ["tensorpack.tfutils.argscope.argscope", "tensorpack.tfutils.argscope.argscope", "tensorpack.models.Conv2D", "tensorpack.models.MaxPooling", "group_func", "group_func", "group_func", "group_func", "tensorpack.models.GlobalAvgPooling", "tensorpack.models.FullyConnected", "tensorflow.variance_scaling_initializer", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "def", "resnet_backbone", "(", "image", ",", "num_blocks", ",", "group_func", ",", "block_func", ")", ":", "\n", "    ", "with", "argscope", "(", "[", "Conv2D", ",", "MaxPooling", ",", "AvgPooling", ",", "GlobalAvgPooling", ",", "BatchNorm", "]", ",", "data_format", "=", "'NCHW'", ")", ",", "argscope", "(", "Conv2D", ",", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "variance_scaling_initializer", "(", "scale", "=", "2.0", ",", "mode", "=", "'fan_out'", ")", ")", ":", "\n", "        ", "l", "=", "Conv2D", "(", "'conv0'", ",", "image", ",", "64", ",", "7", ",", "strides", "=", "2", ",", "activation", "=", "BNReLU", ")", "\n", "l", "=", "MaxPooling", "(", "'pool0'", ",", "l", ",", "pool_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'SAME'", ")", "\n", "l", "=", "group_func", "(", "'group0'", ",", "l", ",", "block_func", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "l", "=", "group_func", "(", "'group1'", ",", "l", ",", "block_func", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "l", "=", "group_func", "(", "'group2'", ",", "l", ",", "block_func", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "l", "=", "group_func", "(", "'group3'", ",", "l", ",", "block_func", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "2", ")", "\n", "l", "=", "GlobalAvgPooling", "(", "'gap'", ",", "l", ")", "\n", "logits", "=", "FullyConnected", "(", "'linear'", ",", "l", ",", "1000", ",", "\n", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "\"\"\"\n        ImageNet in 1 Hour, Sec 5.1:\n        The 1000-way fully-connected layer is initialized by\n        drawing weights from a zero-mean Gaussian with standard deviation of 0.01\n        \"\"\"", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.denoising": [[81, 90], ["tensorflow.variable_scope", "resnet_model.non_local_op", "tensorpack.models.Conv2D", "resnet_model.get_bn"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.non_local_op", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.get_bn"], ["", "def", "denoising", "(", "name", ",", "l", ",", "embed", "=", "True", ",", "softmax", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Feature Denoising, Fig 4 & 5.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "f", "=", "non_local_op", "(", "l", ",", "embed", "=", "embed", ",", "softmax", "=", "softmax", ")", "\n", "f", "=", "Conv2D", "(", "'conv'", ",", "f", ",", "l", ".", "shape", "[", "1", "]", ",", "1", ",", "strides", "=", "1", ",", "activation", "=", "get_bn", "(", "zero_init", "=", "True", ")", ")", "\n", "l", "=", "l", "+", "f", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.non_local_op": [[92, 123], ["tensorflow.reshape", "l.shape.as_list", "tensorpack.models.Conv2D", "tensorpack.models.Conv2D", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.cast", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.sqrt", "tensorflow.cast"], "function", ["None"], ["", "def", "non_local_op", "(", "l", ",", "embed", ",", "softmax", ")", ":", "\n", "    ", "\"\"\"\n    Feature Denoising, Sec 4.2 & Fig 5.\n    Args:\n        embed (bool): whether to use embedding on theta & phi\n        softmax (bool): whether to use gaussian (softmax) version or the dot-product version.\n    \"\"\"", "\n", "n_in", ",", "H", ",", "W", "=", "l", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", "\n", "if", "embed", ":", "\n", "        ", "theta", "=", "Conv2D", "(", "'embedding_theta'", ",", "l", ",", "n_in", "/", "2", ",", "1", ",", "\n", "strides", "=", "1", ",", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "phi", "=", "Conv2D", "(", "'embedding_phi'", ",", "l", ",", "n_in", "/", "2", ",", "1", ",", "\n", "strides", "=", "1", ",", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "\n", "g", "=", "l", "\n", "", "else", ":", "\n", "        ", "theta", ",", "phi", ",", "g", "=", "l", ",", "l", ",", "l", "\n", "", "if", "n_in", ">", "H", "*", "W", "or", "softmax", ":", "\n", "        ", "f", "=", "tf", ".", "einsum", "(", "'niab,nicd->nabcd'", ",", "theta", ",", "phi", ")", "\n", "if", "softmax", ":", "\n", "            ", "orig_shape", "=", "tf", ".", "shape", "(", "f", ")", "\n", "f", "=", "tf", ".", "reshape", "(", "f", ",", "[", "-", "1", ",", "H", "*", "W", ",", "H", "*", "W", "]", ")", "\n", "f", "=", "f", "/", "tf", ".", "sqrt", "(", "tf", ".", "cast", "(", "theta", ".", "shape", "[", "1", "]", ",", "theta", ".", "dtype", ")", ")", "\n", "f", "=", "tf", ".", "nn", ".", "softmax", "(", "f", ")", "\n", "f", "=", "tf", ".", "reshape", "(", "f", ",", "orig_shape", ")", "\n", "", "f", "=", "tf", ".", "einsum", "(", "'nabcd,nicd->niab'", ",", "f", ",", "g", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "tf", ".", "einsum", "(", "'nihw,njhw->nij'", ",", "phi", ",", "g", ")", "\n", "f", "=", "tf", ".", "einsum", "(", "'nij,nihw->njhw'", ",", "f", ",", "theta", ")", "\n", "", "if", "not", "softmax", ":", "\n", "        ", "f", "=", "f", "/", "tf", ".", "cast", "(", "H", "*", "W", ",", "f", ".", "dtype", ")", "\n", "", "return", "tf", ".", "reshape", "(", "f", ",", "tf", ".", "shape", "(", "l", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.nets.ResNetModel.__init__": [[22, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "num_blocks", "=", "NUM_BLOCKS", "[", "args", ".", "depth", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.nets.ResNetModel.get_logits": [[25, 27], ["resnet_model.resnet_backbone"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_backbone"], ["", "def", "get_logits", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "resnet_backbone", "(", "image", ",", "self", ".", "num_blocks", ",", "resnet_group", ",", "resnet_bottleneck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.nets.ResNetDenoiseModel.__init__": [[30, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "num_blocks", "=", "NUM_BLOCKS", "[", "args", ".", "depth", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.nets.ResNetDenoiseModel.get_logits": [[33, 46], ["resnet_model.resnet_backbone", "resnet_model.resnet_group", "resnet_model.denoising"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_backbone", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_group", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.denoising"], ["", "def", "get_logits", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "def", "group_func", "(", "name", ",", "*", "args", ")", ":", "\n", "            ", "\"\"\"\n            Feature Denoising, Sec 6:\n            we add 4 denoising blocks to a ResNet: each is added after the\n            last residual block of res2, res3, res4, and res5, respectively.\n            \"\"\"", "\n", "l", "=", "resnet_group", "(", "name", ",", "*", "args", ")", "\n", "l", "=", "denoising", "(", "name", "+", "'_denoise'", ",", "l", ",", "embed", "=", "True", ",", "softmax", "=", "True", ")", "\n", "return", "l", "\n", "\n", "", "return", "resnet_backbone", "(", "image", ",", "self", ".", "num_blocks", ",", "group_func", ",", "resnet_bottleneck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.nets.ResNeXtDenoiseAllModel.__init__": [[52, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "num_blocks", "=", "NUM_BLOCKS", "[", "args", ".", "depth", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.nets.ResNeXtDenoiseAllModel.get_logits": [[55, 70], ["print", "resnet_model.resnet_backbone", "image.shape.as_list", "resnet_model.resnet_bottleneck", "resnet_model.denoising"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_backbone", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.resnet_bottleneck", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.resnet_model.denoising"], ["", "def", "get_logits", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "print", "(", "image", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "def", "block_func", "(", "l", ",", "ch_out", ",", "stride", ")", ":", "\n", "            ", "\"\"\"\n            Feature Denoising, Sec 6.2:\n            The winning entry, shown in the blue bar, was based on our method by using\n            a ResNeXt101-32\u00d78 backbone\n            with non-local denoising blocks added to all residual blocks.\n            \"\"\"", "\n", "l", "=", "resnet_bottleneck", "(", "l", ",", "ch_out", ",", "stride", ",", "group", "=", "32", ",", "res2_bottleneck", "=", "8", ")", "\n", "l", "=", "denoising", "(", "'non_local'", ",", "l", ",", "embed", "=", "False", ",", "softmax", "=", "False", ")", "\n", "return", "l", "\n", "\n", "", "return", "resnet_backbone", "(", "image", ",", "self", ".", "num_blocks", ",", "resnet_group", ",", "block_func", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.main.create_eval_callback": [[28, 53], ["third_party.imagenet_utils.get_val_dataflow", "InferenceRunner().set_chief_only", "EnableCallbackIf", "third_party.utils.HorovodClassificationError", "third_party.utils.HorovodClassificationError", "third_party.utils.HorovodClassificationError", "horovod.size", "horovod.rank", "InferenceRunner", "condition", "QueueInput"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.get_val_dataflow"], ["def", "create_eval_callback", "(", "name", ",", "tower_func", ",", "condition", ")", ":", "\n", "    ", "\"\"\"\n    Create a distributed evaluation callback.\n\n    Args:\n        name (str): a prefix\n        tower_func (TowerFuncWrapper): the inference tower function\n        condition: a function(epoch number) that returns whether this epoch should evaluate or not\n    \"\"\"", "\n", "dataflow", "=", "get_val_dataflow", "(", "\n", "args", ".", "data", ",", "args", ".", "batch", ",", "\n", "num_splits", "=", "hvd", ".", "size", "(", ")", ",", "split_index", "=", "hvd", ".", "rank", "(", ")", ")", "\n", "# We eval both the classification error rate (for comparison with defenders)", "\n", "# and the attack success rate (for comparison with attackers).", "\n", "infs", "=", "[", "HorovodClassificationError", "(", "'wrong-top1'", ",", "'{}-top1-error'", ".", "format", "(", "name", ")", ")", ",", "\n", "HorovodClassificationError", "(", "'wrong-top5'", ",", "'{}-top5-error'", ".", "format", "(", "name", ")", ")", ",", "\n", "HorovodClassificationError", "(", "'attack_success'", ",", "'{}-attack-success-rate'", ".", "format", "(", "name", ")", ")", "\n", "]", "\n", "cb", "=", "InferenceRunner", "(", "\n", "QueueInput", "(", "dataflow", ")", ",", "infs", ",", "\n", "tower_name", "=", "name", ",", "\n", "tower_func", "=", "tower_func", ")", ".", "set_chief_only", "(", "False", ")", "\n", "cb", "=", "EnableCallbackIf", "(", "\n", "cb", ",", "lambda", "self", ":", "condition", "(", "self", ".", "epoch_num", ")", ")", "\n", "return", "cb", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.main.do_train": [[55, 141], ["logger.info", "HorovodTrainer", "HorovodTrainer.setup_graph", "HorovodTrainer.train_with_defaults", "horovod.size", "FakeData", "StagingInput", "logger.info", "StagingInput", "int", "ModelSaver", "EstimatedTimeLeft", "ScheduledHyperParamSetter", "callbacks.append", "main.do_train.add_eval_callback"], "function", ["None"], ["", "def", "do_train", "(", "model", ")", ":", "\n", "    ", "batch", "=", "args", ".", "batch", "\n", "total_batch", "=", "batch", "*", "hvd", ".", "size", "(", ")", "\n", "\n", "if", "args", ".", "fake", ":", "\n", "        ", "data", "=", "FakeData", "(", "\n", "[", "[", "batch", ",", "224", ",", "224", ",", "3", "]", ",", "[", "batch", "]", "]", ",", "1000", ",", "\n", "random", "=", "False", ",", "dtype", "=", "[", "'uint8'", ",", "'int32'", "]", ")", "\n", "data", "=", "StagingInput", "(", "QueueInput", "(", "data", ")", ")", "\n", "callbacks", "=", "[", "]", "\n", "steps_per_epoch", "=", "50", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"#Tower: {}; Batch size per tower: {}\"", ".", "format", "(", "hvd", ".", "size", "(", ")", ",", "batch", ")", ")", "\n", "zmq_addr", "=", "'ipc://@imagenet-train-b{}'", ".", "format", "(", "batch", ")", "\n", "if", "args", ".", "no_zmq_ops", ":", "\n", "            ", "dataflow", "=", "RemoteDataZMQ", "(", "zmq_addr", ",", "hwm", "=", "150", ",", "bind", "=", "False", ")", "\n", "data", "=", "QueueInput", "(", "dataflow", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "ZMQInput", "(", "zmq_addr", ",", "30", ",", "bind", "=", "False", ")", "\n", "", "data", "=", "StagingInput", "(", "data", ")", "\n", "\n", "steps_per_epoch", "=", "int", "(", "np", ".", "round", "(", "1281167", "/", "total_batch", ")", ")", "\n", "\n", "", "BASE_LR", "=", "0.1", "*", "(", "total_batch", "//", "256", ")", "\n", "\"\"\"\n    ImageNet in 1 Hour, Sec 2.1:\n    Linear Scaling Rule: When the minibatch size is\n    multiplied by k, multiply the learning rate by k.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Base LR: {}\"", ".", "format", "(", "BASE_LR", ")", ")", "\n", "callbacks", "=", "[", "\n", "ModelSaver", "(", "max_to_keep", "=", "10", ")", ",", "\n", "EstimatedTimeLeft", "(", ")", ",", "\n", "ScheduledHyperParamSetter", "(", "\n", "'learning_rate'", ",", "[", "(", "0", ",", "BASE_LR", ")", ",", "(", "35", ",", "BASE_LR", "*", "1e-1", ")", ",", "(", "70", ",", "BASE_LR", "*", "1e-2", ")", ",", "\n", "(", "95", ",", "BASE_LR", "*", "1e-3", ")", "]", ")", "\n", "]", "\n", "\"\"\"\n    Feature Denoising, Sec 5:\n    Our models are trained for a total of\n    110 epochs; we decrease the learning rate by 10\u00d7 at the 35-\n    th, 70-th, and 95-th epoch\n    \"\"\"", "\n", "max_epoch", "=", "110", "\n", "\n", "if", "BASE_LR", ">", "0.1", ":", "\n", "        ", "callbacks", ".", "append", "(", "\n", "ScheduledHyperParamSetter", "(", "\n", "'learning_rate'", ",", "[", "(", "0", ",", "0.1", ")", ",", "(", "5", "*", "steps_per_epoch", ",", "BASE_LR", ")", "]", ",", "\n", "interp", "=", "'linear'", ",", "step_based", "=", "True", ")", ")", "\n", "\"\"\"\n        ImageNet in 1 Hour, Sec 2.2:\n        we start from a learning rate of \u03b7 and increment it by a constant amount at\n        each iteration such that it reaches \u03b7\u02c6 = k\u03b7 after 5 epochs\n        \"\"\"", "\n", "\n", "", "if", "not", "args", ".", "fake", ":", "\n", "# add distributed evaluation, for various attackers that we care.", "\n", "        ", "def", "add_eval_callback", "(", "name", ",", "attacker", ",", "condition", ")", ":", "\n", "            ", "cb", "=", "create_eval_callback", "(", "\n", "name", ",", "\n", "model", ".", "get_inference_func", "(", "attacker", ")", ",", "\n", "# always eval in the last 2 epochs no matter what", "\n", "lambda", "epoch_num", ":", "condition", "(", "epoch_num", ")", "or", "epoch_num", ">", "max_epoch", "-", "2", ")", "\n", "callbacks", ".", "append", "(", "cb", ")", "\n", "\n", "", "add_eval_callback", "(", "'eval-clean'", ",", "NoOpAttacker", "(", ")", ",", "lambda", "e", ":", "True", ")", "\n", "add_eval_callback", "(", "'eval-10step'", ",", "PGDAttacker", "(", "10", ",", "args", ".", "attack_epsilon", ",", "args", ".", "attack_step_size", ")", ",", "\n", "lambda", "e", ":", "True", ")", "\n", "add_eval_callback", "(", "'eval-50step'", ",", "PGDAttacker", "(", "50", ",", "args", ".", "attack_epsilon", ",", "args", ".", "attack_step_size", ")", ",", "\n", "lambda", "e", ":", "e", "%", "20", "==", "0", ")", "\n", "add_eval_callback", "(", "'eval-100step'", ",", "PGDAttacker", "(", "100", ",", "args", ".", "attack_epsilon", ",", "args", ".", "attack_step_size", ")", ",", "\n", "lambda", "e", ":", "e", "%", "10", "==", "0", ")", "\n", "for", "k", "in", "[", "20", ",", "30", ",", "40", ",", "60", ",", "70", ",", "80", ",", "90", "]", ":", "\n", "            ", "add_eval_callback", "(", "'eval-{}step'", ".", "format", "(", "k", ")", ",", "\n", "PGDAttacker", "(", "k", ",", "args", ".", "attack_epsilon", ",", "args", ".", "attack_step_size", ")", ",", "\n", "lambda", "e", ":", "False", ")", "\n", "\n", "", "", "trainer", "=", "HorovodTrainer", "(", "average", "=", "True", ")", "\n", "trainer", ".", "setup_graph", "(", "model", ".", "get_inputs_desc", "(", ")", ",", "data", ",", "model", ".", "build_graph", ",", "model", ".", "get_optimizer", ")", "\n", "trainer", ".", "train_with_defaults", "(", "\n", "callbacks", "=", "callbacks", ",", "\n", "steps_per_epoch", "=", "steps_per_epoch", ",", "\n", "session_init", "=", "get_model_loader", "(", "args", ".", "load", ")", "if", "args", ".", "load", "is", "not", "None", "else", "None", ",", "\n", "max_epoch", "=", "max_epoch", ",", "\n", "starting_epoch", "=", "args", ".", "starting_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.NoOpAttacker.attack": [[28, 30], ["tensorflow.ones_like"], "methods", ["None"], ["def", "attack", "(", "self", ",", "image", ",", "label", ",", "model_func", ")", ":", "\n", "        ", "return", "image", ",", "-", "tf", ".", "ones_like", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.PGDAttacker.__init__": [[51, 70], ["max"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_iter", ",", "epsilon", ",", "step_size", ",", "prob_start_from_clean", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            num_iter (int):\n            epsilon (float):\n            step_size (int):\n            prob_start_from_clean (float): The probability to initialize with\n                the original image, rather than a randomly perturbed one.\n        \"\"\"", "\n", "step_size", "=", "max", "(", "step_size", ",", "epsilon", "/", "num_iter", ")", "\n", "\"\"\"\n        Feature Denoising, Sec 6.1:\n        We set its step size \u03b1 = 1, except for 10-iteration attacks where \u03b1 is set to \u03b1/10= 1.6\n        \"\"\"", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "# rescale the attack epsilon and attack step size", "\n", "self", ".", "epsilon", "=", "epsilon", "*", "IMAGE_SCALE", "\n", "self", ".", "step_size", "=", "step_size", "*", "IMAGE_SCALE", "\n", "self", ".", "prob_start_from_clean", "=", "prob_start_from_clean", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.PGDAttacker._create_random_target": [[71, 80], ["tensorflow.random_uniform", "tensorflow.floormod", "tensorflow.shape", "tensorflow.constant"], "methods", ["None"], ["", "def", "_create_random_target", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        Feature Denoising Sec 6:\n        we consider targeted attacks when\n        evaluating under the white-box settings, where the targeted\n        class is selected uniformly at random\n        \"\"\"", "\n", "label_offset", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "label", ")", ",", "minval", "=", "1", ",", "maxval", "=", "1000", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "tf", ".", "floormod", "(", "label", "+", "label_offset", ",", "tf", ".", "constant", "(", "1000", ",", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.PGDAttacker.attack": [[81, 167], ["adv_model.PGDAttacker._create_random_target", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.random_uniform", "tensorflow.cast", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.clip_by_value", "tensorflow.shape", "tensorflow.greater", "tensorflow.name_scope", "tensorflow.while_loop", "len", "getter", "model_func", "tensorflow.cast", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.random_uniform", "tuple", "name.endswith", "name.endswith", "getter", "tensorflow.cast", "tensorpack.utils.argtools.log_once", "getter", "tensorpack.tfutils.varreplace.custom_getter_scope", "model_func", "tensorflow.cast", "map", "tensorflow.sign", "tensorflow.__version__.split", "xla.compile", "adv_model.PGDAttacker.attack.one_step_attack"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.PGDAttacker._create_random_target"], ["", "def", "attack", "(", "self", ",", "image_clean", ",", "label", ",", "model_func", ")", ":", "\n", "        ", "target_label", "=", "self", ".", "_create_random_target", "(", "label", ")", "\n", "\n", "def", "fp16_getter", "(", "getter", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "name", "=", "args", "[", "0", "]", "if", "len", "(", "args", ")", "else", "kwargs", "[", "'name'", "]", "\n", "if", "not", "name", ".", "endswith", "(", "'/W'", ")", "and", "not", "name", ".", "endswith", "(", "'/b'", ")", ":", "\n", "                ", "\"\"\"\n                Following convention, convolution & fc are quantized.\n                BatchNorm (gamma & beta) are not quantized.\n                \"\"\"", "\n", "return", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "if", "kwargs", "[", "'dtype'", "]", "==", "tf", ".", "float16", ":", "\n", "                    ", "kwargs", "[", "'dtype'", "]", "=", "tf", ".", "float32", "\n", "ret", "=", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "ret", "=", "tf", ".", "cast", "(", "ret", ",", "tf", ".", "float16", ")", "\n", "log_once", "(", "\"Variable {} casted to fp16 ...\"", ".", "format", "(", "name", ")", ")", "\n", "return", "ret", "\n", "", "else", ":", "\n", "                    ", "return", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "", "def", "one_step_attack", "(", "adv", ")", ":", "\n", "            ", "if", "not", "self", ".", "USE_FP16", ":", "\n", "                ", "logits", "=", "model_func", "(", "adv", ")", "\n", "", "else", ":", "\n", "                ", "adv16", "=", "tf", ".", "cast", "(", "adv", ",", "tf", ".", "float16", ")", "\n", "with", "custom_getter_scope", "(", "fp16_getter", ")", ":", "\n", "                    ", "logits", "=", "model_func", "(", "adv16", ")", "\n", "logits", "=", "tf", ".", "cast", "(", "logits", ",", "tf", ".", "float32", ")", "\n", "# Note we don't add any summaries here when creating losses, because", "\n", "# summaries don't work in conditionals.", "\n", "", "", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "target_label", ")", "# we want to minimize it in targeted attack", "\n", "if", "not", "self", ".", "USE_FP16", ":", "\n", "                ", "g", ",", "=", "tf", ".", "gradients", "(", "losses", ",", "adv", ")", "\n", "", "else", ":", "\n", "                ", "\"\"\"\n                We perform loss scaling to prevent underflow:\n                https://docs.nvidia.com/deeplearning/sdk/mixed-precision-training/index.html\n                (We have not yet tried training without scaling)\n                \"\"\"", "\n", "g", ",", "=", "tf", ".", "gradients", "(", "losses", "*", "128.", ",", "adv", ")", "\n", "g", "=", "g", "/", "128.", "\n", "\n", "", "\"\"\"\n            Feature Denoising, Sec 5:\n            We use the Projected Gradient Descent (PGD)\n            (implemented at https://github.com/MadryLab/cifar10_challenge )\n            as the white-box attacker for adversarial training\n            \"\"\"", "\n", "adv", "=", "tf", ".", "clip_by_value", "(", "adv", "-", "tf", ".", "sign", "(", "g", ")", "*", "self", ".", "step_size", ",", "lower_bound", ",", "upper_bound", ")", "\n", "return", "adv", "\n", "\n", "", "\"\"\"\n        Feature Denoising, Sec 6:\n        Adversarial perturbation is considered under L\u221e norm (i.e., maximum difference for each pixel).\n        \"\"\"", "\n", "lower_bound", "=", "tf", ".", "clip_by_value", "(", "image_clean", "-", "self", ".", "epsilon", ",", "-", "1.", ",", "1.", ")", "\n", "upper_bound", "=", "tf", ".", "clip_by_value", "(", "image_clean", "+", "self", ".", "epsilon", ",", "-", "1.", ",", "1.", ")", "\n", "\n", "\"\"\"\n        Feature Denoising Sec. 5:\n        We randomly choose from both initializations in the\n        PGD attacker during adversarial training: 20% of training\n        batches use clean images to initialize PGD, and 80% use\n        random points within the allowed .\n        \"\"\"", "\n", "init_start", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "image_clean", ")", ",", "minval", "=", "-", "self", ".", "epsilon", ",", "maxval", "=", "self", ".", "epsilon", ")", "\n", "\n", "start_from_noise_index", "=", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "tf", ".", "random_uniform", "(", "shape", "=", "[", "]", ")", ",", "self", ".", "prob_start_from_clean", ")", ",", "tf", ".", "float32", ")", "\n", "start_adv", "=", "image_clean", "+", "start_from_noise_index", "*", "init_start", "\n", "\n", "\n", "if", "self", ".", "USE_XLA", ":", "\n", "            ", "assert", "tuple", "(", "map", "(", "int", ",", "tf", ".", "__version__", ".", "split", "(", "'.'", ")", "[", ":", "2", "]", ")", ")", ">=", "(", "1", ",", "12", ")", "\n", "from", "tensorflow", ".", "contrib", ".", "compiler", "import", "xla", "\n", "", "with", "tf", ".", "name_scope", "(", "'attack_loop'", ")", ":", "\n", "            ", "adv_final", "=", "tf", ".", "while_loop", "(", "\n", "lambda", "_", ":", "True", ",", "\n", "one_step_attack", "if", "not", "self", ".", "USE_XLA", "else", "lambda", "adv", ":", "xla", ".", "compile", "(", "lambda", ":", "one_step_attack", "(", "adv", ")", ")", "[", "0", "]", ",", "\n", "[", "start_adv", "]", ",", "\n", "back_prop", "=", "False", ",", "\n", "maximum_iterations", "=", "self", ".", "num_iter", ",", "\n", "parallel_iterations", "=", "1", ")", "\n", "", "return", "adv_final", ",", "target_label", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.set_attacker": [[177, 179], ["None"], "methods", ["None"], ["def", "set_attacker", "(", "self", ",", "attacker", ")", ":", "\n", "        ", "self", ".", "attacker", "=", "attacker", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.build_graph": [[180, 214], ["adv_model.AdvImageNetModel.image_preprocess", "tensorflow.transpose", "tensorpack.tfutils.tower.get_current_tower_context", "third_party.imagenet_utils.ImageNetModel.compute_loss_and_error", "adv_model.AdvImageNetModel.compute_attack_success", "tensorpack.models.regularize_cost", "tensorpack.tfutils.summary.add_moving_summary", "tensorflow.add_n", "tensorflow.variable_scope", "adv_model.AdvImageNetModel.get_logits", "tensorflow.contrib.layers.l2_regularizer", "tensorpack.utils.logger.info", "tensorflow.get_variable_scope", "tensorpack.tfutils.collection.freeze_collection", "tensorpack.tfutils.argscope", "adv_model.AdvImageNetModel.attacker.attack", "tensorflow.stop_gradient"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.image_preprocess", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.compute_loss_and_error", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.compute_attack_success", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.get_logits", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.PGDAttacker.attack"], ["", "def", "build_graph", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        The default tower function.\n        \"\"\"", "\n", "image", "=", "self", ".", "image_preprocess", "(", "image", ")", "\n", "assert", "self", ".", "data_format", "==", "'NCHW'", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "ctx", "=", "get_current_tower_context", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "# BatchNorm always comes with trouble. We use the testing mode of it during attack.", "\n", "            ", "with", "freeze_collection", "(", "[", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", "]", ")", ",", "argscope", "(", "BatchNorm", ",", "training", "=", "False", ")", ":", "\n", "                ", "image", ",", "target_label", "=", "self", ".", "attacker", ".", "attack", "(", "image", ",", "label", ",", "self", ".", "get_logits", ")", "\n", "image", "=", "tf", ".", "stop_gradient", "(", "image", ",", "name", "=", "'adv_training_sample'", ")", "\n", "\n", "", "logits", "=", "self", ".", "get_logits", "(", "image", ")", "\n", "\n", "", "loss", "=", "ImageNetModel", ".", "compute_loss_and_error", "(", "\n", "logits", ",", "label", ",", "label_smoothing", "=", "self", ".", "label_smoothing", ")", "\n", "AdvImageNetModel", ".", "compute_attack_success", "(", "logits", ",", "target_label", ")", "\n", "if", "not", "ctx", ".", "is_training", ":", "\n", "            ", "return", "\n", "\n", "", "wd_loss", "=", "regularize_cost", "(", "self", ".", "weight_decay_pattern", ",", "\n", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "weight_decay", ")", ",", "\n", "name", "=", "'l2_regularize_loss'", ")", "\n", "add_moving_summary", "(", "loss", ",", "wd_loss", ")", "\n", "total_cost", "=", "tf", ".", "add_n", "(", "[", "loss", ",", "wd_loss", "]", ",", "name", "=", "'cost'", ")", "\n", "\n", "if", "self", ".", "loss_scale", "!=", "1.", ":", "\n", "            ", "logger", ".", "info", "(", "\"Scaling the total loss by {} ...\"", ".", "format", "(", "self", ".", "loss_scale", ")", ")", "\n", "return", "total_cost", "*", "self", ".", "loss_scale", "\n", "", "else", ":", "\n", "            ", "return", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.get_inference_func": [[215, 231], ["tensorpack.tfutils.tower.TowerFuncWrapper", "adv_model.AdvImageNetModel.image_preprocess", "tensorflow.transpose", "attacker.attack", "adv_model.AdvImageNetModel.get_logits", "third_party.imagenet_utils.ImageNetModel.compute_loss_and_error", "adv_model.AdvImageNetModel.compute_attack_success", "adv_model.AdvImageNetModel.get_inputs_desc", "tensorpack.tfutils.tower.get_current_tower_context"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.image_preprocess", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.PGDAttacker.attack", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.get_logits", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.compute_loss_and_error", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.compute_attack_success"], ["", "", "def", "get_inference_func", "(", "self", ",", "attacker", ")", ":", "\n", "        ", "\"\"\"\n        Returns a tower function to be used for inference. It generates adv\n        images with the given attacker and runs classification on it.\n        \"\"\"", "\n", "\n", "def", "tower_func", "(", "image", ",", "label", ")", ":", "\n", "            ", "assert", "not", "get_current_tower_context", "(", ")", ".", "is_training", "\n", "image", "=", "self", ".", "image_preprocess", "(", "image", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "image", ",", "target_label", "=", "attacker", ".", "attack", "(", "image", ",", "label", ",", "self", ".", "get_logits", ")", "\n", "logits", "=", "self", ".", "get_logits", "(", "image", ")", "\n", "ImageNetModel", ".", "compute_loss_and_error", "(", "logits", ",", "label", ")", "# compute top-1 and top-5", "\n", "AdvImageNetModel", ".", "compute_attack_success", "(", "logits", ",", "target_label", ")", "\n", "\n", "", "return", "TowerFuncWrapper", "(", "tower_func", ",", "self", ".", "get_inputs_desc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.image_preprocess": [[232, 239], ["tensorflow.name_scope", "tensorflow.cast"], "methods", ["None"], ["", "def", "image_preprocess", "(", "self", ",", "image", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'image_preprocess'", ")", ":", "\n", "            ", "if", "image", ".", "dtype", ".", "base_dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "# For the purpose of adversarial training, normalize images to [-1, 1]", "\n", "", "image", "=", "image", "*", "IMAGE_SCALE", "-", "1.0", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.adv_model.AdvImageNetModel.compute_attack_success": [[240, 249], ["tensorflow.argmax", "tensorflow.equal", "tensorflow.cast", "tensorpack.tfutils.summary.add_moving_summary", "tensorflow.reduce_mean"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "compute_attack_success", "(", "logits", ",", "target_label", ")", ":", "\n", "        ", "\"\"\"\n        Compute the attack success rate.\n        \"\"\"", "\n", "pred", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "equal_target", "=", "tf", ".", "equal", "(", "pred", ",", "target_label", ")", "\n", "success", "=", "tf", ".", "cast", "(", "equal_target", ",", "tf", ".", "float32", ",", "name", "=", "'attack_success'", ")", "\n", "add_moving_summary", "(", "tf", ".", "reduce_mean", "(", "success", ",", "name", "=", "'attack_success_rate'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.container.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.imagenet.__init__": [[68, 72], ["interface.imagenet.init"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.imagenet.init"], ["    ", "def", "__init__", "(", "self", ",", "batchsize", ",", "dataset", "=", "\"val\"", ")", ":", "\n", "        ", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.imagenet.init": [[73, 78], ["third_party.imagenet_utils.get_val_dataflow", "interface.imagenet.data.reset_state", "iter"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.get_val_dataflow"], ["", "def", "init", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "data", "=", "get_val_dataflow", "(", "\n", "\"imagenet\"", ",", "self", ".", "batchsize", ",", "dataname", "=", "self", ".", "dataset", ")", "\n", "self", ".", "data", ".", "reset_state", "(", ")", "\n", "self", ".", "iter", "=", "iter", "(", "self", ".", "data", ")", "\n", "#self.data = tf.transpose(data, [0, 3, 1, 2])", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.imagenet.get_next_batch": [[81, 88], ["next", "interface.imagenet.data.reset_state", "iter", "next"], "methods", ["None"], ["", "def", "get_next_batch", "(", "self", ")", ":", "\n", "        ", "pack", "=", "next", "(", "self", ".", "iter", ",", "None", ")", "\n", "if", "pack", "is", "None", ":", "\n", "            ", "self", ".", "data", ".", "reset_state", "(", ")", "\n", "self", ".", "iter", "=", "iter", "(", "self", ".", "data", ")", "\n", "pack", "=", "next", "(", "self", ".", "iter", ",", "None", ")", "\n", "", "return", "pack", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.restore_parameter": [[7, 11], ["tensorpack.tfutils.SmartInit", "tensorpack.tfutils.SmartInit.init"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.imagenet.init"], ["def", "restore_parameter", "(", "sess", ")", ":", "\n", "    ", "file_path", "=", "\"X101-DenoiseAll.npz\"", "\n", "sessinit", "=", "SmartInit", "(", "file_path", ")", "\n", "sessinit", ".", "init", "(", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.build_imagenet_model": [[17, 25], ["interface.container", "tensorpack.tfutils.tower.TowerContext", "tensorflow.variable_scope", "nets.ResNeXtDenoiseAllModel", "nets.ResNeXtDenoiseAllModel.build_graph"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.build_graph"], ["", "", "def", "build_imagenet_model", "(", "image", ",", "label", ",", "reuse", "=", "False", ",", "conf", "=", "1", ")", ":", "\n", "    ", "args", "=", "container", "(", ")", "\n", "args", ".", "depth", "=", "101", "\n", "with", "TowerContext", "(", "tower_name", "=", "''", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"\"", ",", "auxiliary_name_scope", "=", "False", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "model", "=", "ResNeXtDenoiseAllModel", "(", "args", ")", "\n", "model", ".", "build_graph", "(", "image", ",", "label", ")", "\n", "", "", "return", "model", ".", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.imagenetmod.interface.build_imagenet_model_old": [[26, 65], ["interface.container", "tensorflow.argmax", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.one_hot", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.nn.top_k", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorpack.tfutils.tower.TowerContext", "tensorflow.log", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.variable_scope", "nets.ResNeXtDenoiseAllModel", "nets.ResNeXtDenoiseAllModel.build_graph", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.one_hot", "tensorflow.nn.softmax", "tensorflow.one_hot"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.build_graph"], ["", "def", "build_imagenet_model_old", "(", "image", ",", "label", ",", "reuse", "=", "False", ",", "conf", "=", "1", ")", ":", "\n", "    ", "args", "=", "container", "(", ")", "\n", "args", ".", "depth", "=", "101", "\n", "with", "TowerContext", "(", "tower_name", "=", "''", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"\"", ",", "auxiliary_name_scope", "=", "False", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "model", "=", "ResNeXtDenoiseAllModel", "(", "args", ")", "\n", "model", ".", "build_graph", "(", "image", ",", "label", ")", "\n", "", "", "cont", "=", "container", "\n", "cont", ".", "logits", "=", "model", ".", "logits", "\n", "cont", ".", "label", "=", "tf", ".", "argmax", "(", "cont", ".", "logits", ",", "axis", "=", "-", "1", ")", "\n", "cont", ".", "acc_y", "=", "1", "-", "model", ".", "wrong_1", "\n", "cont", ".", "acc_y_5", "=", "1", "-", "model", ".", "wrong_5", "\n", "cont", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "1", "-", "model", ".", "wrong_1", ")", "# wrong_5", "\n", "cont", ".", "rev_xent", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "\n", "1", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax", "(", "model", ".", "logits", ")", "*", "\n", "tf", ".", "one_hot", "(", "label", ",", "depth", "=", "1000", ")", ",", "axis", "=", "-", "1", ")", "\n", ")", ")", "\n", "cont", ".", "poss_loss", "=", "1", "-", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax", "(", "model", ".", "logits", ")", "*", "\n", "tf", ".", "one_hot", "(", "label", ",", "depth", "=", "1000", ")", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "\n", "label_one_hot", "=", "tf", ".", "one_hot", "(", "label", ",", "depth", "=", "1000", ")", "\n", "wrong_logit", "=", "tf", ".", "reduce_max", "(", "model", ".", "logits", "*", "(", "1", "-", "label_one_hot", ")", "-", "label_one_hot", "*", "1e7", ",", "axis", "=", "-", "1", ")", "\n", "true_logit", "=", "tf", ".", "reduce_sum", "(", "model", ".", "logits", "*", "label_one_hot", ",", "axis", "=", "-", "1", ")", "\n", "#wrong_logit = tf.contrib.nn.nth_element(model.logits * (1-label_one_hot) - label_one_hot * 1e7, n=5, reverse=True)", "\n", "wrong_logit5", ",", "_idx", "=", "tf", ".", "nn", ".", "top_k", "(", "\n", "model", ".", "logits", "*", "(", "1", "-", "label_one_hot", ")", "-", "label_one_hot", "*", "1e7", ",", "k", "=", "5", ",", "sorted", "=", "False", ")", "\n", "true_logit5", "=", "tf", ".", "reduce_sum", "(", "model", ".", "logits", "*", "label_one_hot", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "cont", ".", "target_loss5", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "true_logit5", "-", "wrong_logit5", "+", "conf", ")", ",", "axis", "=", "1", ")", "\n", "cont", ".", "target_loss", "=", "-", "tf", ".", "nn", ".", "relu", "(", "true_logit", "-", "wrong_logit", "+", "conf", ")", "\n", "cont", ".", "xent_filter", "=", "tf", ".", "reduce_mean", "(", "(", "1.0", "-", "model", ".", "wrong_1", ")", "*", "\n", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "label", ",", "logits", "=", "model", ".", "logits", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "cont", ".", "xent", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "label", ",", "logits", "=", "model", ".", "logits", ")", ",", "axis", "=", "-", "1", ")", "\n", "#cont.target_loss =  tf.nn.sparse_softmax_cross_entropy_with_logits(", "\n", "#    labels=label, logits=model.logits) * tf.nn.relu(tf.minimum(1.0, true_logit - wrong_logit + conf))", "\n", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.serve-data.get_data": [[19, 31], ["tensorpack.dataflow.dataset.ILSVRC12", "tensorpack.dataflow.AugmentImageComponent", "tensorpack.dataflow.BatchData", "tensorpack.dataflow.PrefetchDataZMQ", "min", "multiprocessing.cpu_count"], "function", ["None"], ["def", "get_data", "(", "batch", ",", "augmentors", ")", ":", "\n", "    ", "\"\"\"\n    Sec 3, Remark 4:\n    Use a single random shuffling of the training data (per epoch) that is divided amongst all k workers.\n\n    NOTE: Here we do not follow the paper, but it makes little differences.\n    \"\"\"", "\n", "ds", "=", "dataset", ".", "ILSVRC12", "(", "args", ".", "data", ",", "'train'", ",", "shuffle", "=", "True", ")", "\n", "ds", "=", "AugmentImageComponent", "(", "ds", ",", "augmentors", ",", "copy", "=", "False", ")", "\n", "ds", "=", "BatchData", "(", "ds", ",", "batch", ",", "remainder", "=", "False", ")", "\n", "ds", "=", "PrefetchDataZMQ", "(", "ds", ",", "min", "(", "50", ",", "mp", ".", "cpu_count", "(", ")", ")", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.inputs": [[155, 158], ["tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["def", "inputs", "(", "self", ")", ":", "\n", "        ", "return", "[", "tf", ".", "placeholder", "(", "self", ".", "image_dtype", ",", "[", "None", ",", "self", ".", "image_shape", ",", "self", ".", "image_shape", ",", "3", "]", ",", "'input'", ")", ",", "\n", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "'label'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.build_graph": [[159, 184], ["imagenet_utils.ImageNetModel.image_preprocess", "tensorflow.transpose", "imagenet_utils.ImageNetModel.get_logits", "imagenet_utils.ImageNetModel.compute_loss_and_error", "tensorpack.models.regularize_cost", "tensorpack.tfutils.summary.add_moving_summary", "tensorflow.add_n", "tensorflow.identity", "tensorpack.tfutils.summary.add_moving_summary", "tensorpack.utils.logger.info", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.image_preprocess", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.get_logits", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.compute_loss_and_error"], ["", "def", "build_graph", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "image", "=", "self", ".", "image_preprocess", "(", "image", ")", "\n", "assert", "self", ".", "data_format", "==", "'NCHW'", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "logits", "=", "self", ".", "get_logits", "(", "image", ")", "\n", "\n", "self", ".", "logits", "=", "logits", "\n", "loss", ",", "self", ".", "wrong_1", ",", "self", ".", "wrong_5", "=", "ImageNetModel", ".", "compute_loss_and_error", "(", "\n", "logits", ",", "label", ",", "label_smoothing", "=", "self", ".", "label_smoothing", ")", "\n", "\n", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "wd_loss", "=", "regularize_cost", "(", "self", ".", "weight_decay_pattern", ",", "\n", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "weight_decay", ")", ",", "\n", "name", "=", "'l2_regularize_loss'", ")", "\n", "add_moving_summary", "(", "loss", ",", "wd_loss", ")", "\n", "total_cost", "=", "tf", ".", "add_n", "(", "[", "loss", ",", "wd_loss", "]", ",", "name", "=", "'cost'", ")", "\n", "", "else", ":", "\n", "            ", "total_cost", "=", "tf", ".", "identity", "(", "loss", ",", "name", "=", "'cost'", ")", "\n", "add_moving_summary", "(", "total_cost", ")", "\n", "\n", "", "if", "self", ".", "loss_scale", "!=", "1.", ":", "\n", "            ", "logger", ".", "info", "(", "\"Scaling the total loss by {} ...\"", ".", "format", "(", "self", ".", "loss_scale", ")", ")", "\n", "return", "total_cost", "*", "self", ".", "loss_scale", "\n", "", "else", ":", "\n", "            ", "return", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.get_logits": [[185, 194], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "get_logits", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: 4D tensor of ``self.input_shape`` in ``self.data_format``\n\n        Returns:\n            Nx#class logits\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.optimizer": [[195, 199], ["tensorflow.get_variable", "tensorflow.summary.scalar", "tensorflow.train.MomentumOptimizer"], "methods", ["None"], ["", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "lr", "=", "tf", ".", "get_variable", "(", "'learning_rate'", ",", "initializer", "=", "0.1", ",", "trainable", "=", "False", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate-summary'", ",", "lr", ")", "\n", "return", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "0.9", ",", "use_nesterov", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.image_preprocess": [[200, 213], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "image_preprocess", "(", "self", ",", "image", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'image_preprocess'", ")", ":", "\n", "            ", "if", "image", ".", "dtype", ".", "base_dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "# rgb", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "if", "self", ".", "image_bgr", ":", "\n", "                ", "mean", "=", "mean", "[", ":", ":", "-", "1", "]", "\n", "std", "=", "std", "[", ":", ":", "-", "1", "]", "\n", "", "image_mean", "=", "tf", ".", "constant", "(", "mean", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "255.", "\n", "image_std", "=", "tf", ".", "constant", "(", "std", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "255.", "\n", "image", "=", "(", "image", "-", "image_mean", ")", "/", "image_std", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.ImageNetModel.compute_loss_and_error": [[214, 235], ["tensorflow.reduce_mean", "imagenet_utils.ImageNetModel.compute_loss_and_error.prediction_incorrect"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "compute_loss_and_error", "(", "logits", ",", "label", ",", "label_smoothing", "=", "0.", ")", ":", "\n", "        ", "if", "label_smoothing", "==", "0.", ":", "\n", "            ", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "label", ")", "\n", "", "else", ":", "\n", "            ", "nclass", "=", "logits", ".", "shape", "[", "-", "1", "]", "\n", "loss", "=", "tf", ".", "losses", ".", "softmax_cross_entropy", "(", "\n", "tf", ".", "one_hot", "(", "label", ",", "nclass", ")", ",", "\n", "logits", ",", "label_smoothing", "=", "label_smoothing", ",", "\n", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", "\n", "", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ",", "name", "=", "'xentropy-loss'", ")", "\n", "\n", "def", "prediction_incorrect", "(", "logits", ",", "label", ",", "topk", "=", "1", ",", "name", "=", "'incorrect_vector'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'prediction_incorrect'", ")", ":", "\n", "                ", "x", "=", "tf", ".", "logical_not", "(", "tf", ".", "nn", ".", "in_top_k", "(", "logits", ",", "label", ",", "topk", ")", ")", "\n", "", "return", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ",", "name", "=", "name", ")", "\n", "\n", "", "wrong_1", "=", "prediction_incorrect", "(", "logits", ",", "label", ",", "1", ",", "name", "=", "'wrong-top1'", ")", "\n", "\n", "wrong_5", "=", "prediction_incorrect", "(", "logits", ",", "label", ",", "5", ",", "name", "=", "'wrong-top5'", ")", "\n", "return", "loss", ",", "wrong_1", ",", "wrong_5", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.fbresnet_augmentor": [[23, 55], ["tensorpack.imgaug.GoogleNetRandomCropAndResize", "tensorpack.imgaug.RandomOrderAug", "tensorpack.imgaug.Flip", "tensorpack.imgaug.ResizeShortestEdge", "tensorpack.imgaug.CenterCrop", "tensorpack.imgaug.BrightnessScale", "tensorpack.imgaug.Contrast", "tensorpack.imgaug.Saturation", "tensorpack.imgaug.Lighting", "numpy.asarray", "numpy.array"], "function", ["None"], ["def", "fbresnet_augmentor", "(", "isTrain", ")", ":", "\n", "    ", "\"\"\"\n    Augmentor used in fb.resnet.torch, for BGR images in range [0,255].\n    \"\"\"", "\n", "if", "isTrain", ":", "\n", "        ", "augmentors", "=", "[", "\n", "imgaug", ".", "GoogleNetRandomCropAndResize", "(", ")", ",", "\n", "# It's OK to remove the following augs if your CPU is not fast enough.", "\n", "# Removing brightness/contrast/saturation does not have a significant effect on accuracy.", "\n", "# Removing lighting leads to a tiny drop in accuracy.", "\n", "imgaug", ".", "RandomOrderAug", "(", "\n", "[", "imgaug", ".", "BrightnessScale", "(", "(", "0.6", ",", "1.4", ")", ",", "clip", "=", "False", ")", ",", "\n", "imgaug", ".", "Contrast", "(", "(", "0.6", ",", "1.4", ")", ",", "clip", "=", "False", ")", ",", "\n", "imgaug", ".", "Saturation", "(", "0.4", ",", "rgb", "=", "False", ")", ",", "\n", "# rgb-bgr conversion for the constants copied from fb.resnet.torch", "\n", "imgaug", ".", "Lighting", "(", "0.1", ",", "\n", "eigval", "=", "np", ".", "asarray", "(", "\n", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", "[", ":", ":", "-", "1", "]", ")", "*", "255.0", ",", "\n", "eigvec", "=", "np", ".", "array", "(", "\n", "[", "[", "-", "0.5675", ",", "0.7192", ",", "0.4009", "]", ",", "\n", "[", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", "]", ",", "\n", "[", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", ")", "]", ")", ",", "\n", "imgaug", ".", "Flip", "(", "horiz", "=", "True", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "augmentors", "=", "[", "\n", "imgaug", ".", "ResizeShortestEdge", "(", "256", ",", "cv2", ".", "INTER_CUBIC", ")", ",", "\n", "imgaug", ".", "CenterCrop", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "]", "\n", "", "return", "augmentors", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.get_val_dataflow": [[57, 100], ["isinstance", "tensorpack.imgaug.AugmentorList", "tensorpack.dataflow.MultiThreadMapData", "tensorpack.dataflow.BatchData", "tensorpack.dataflow.RepeatedData", "imagenet_utils.fbresnet_augmentor", "min", "tensorpack.dataset.ILSVRC12Files", "tensorpack.dataset.ILSVRC12Files", "list.reset_state", "list", "tensorpack.utils.logger.info", "min", "tensorpack.utils.logger.info", "tensorpack.dataflow.DataFromList", "cv2.imread", "cv2.cvtColor", "imgaug.AugmentorList.augment", "multiprocessing.cpu_count", "list.get_data", "len", "len", "min", "len", "tensorpack.dataflow.DataFromList.size"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.fbresnet_augmentor", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.serve-data.get_data"], ["", "def", "get_val_dataflow", "(", "\n", "datadir", ",", "batch_size", ",", "\n", "augmentors", "=", "None", ",", "parallel", "=", "None", ",", "\n", "num_splits", "=", "None", ",", "split_index", "=", "None", ",", "dataname", "=", "\"val\"", ")", ":", "\n", "    ", "if", "augmentors", "is", "None", ":", "\n", "        ", "augmentors", "=", "fbresnet_augmentor", "(", "False", ")", "\n", "", "assert", "datadir", "is", "not", "None", "\n", "assert", "isinstance", "(", "augmentors", ",", "list", ")", "\n", "if", "parallel", "is", "None", ":", "\n", "        ", "parallel", "=", "min", "(", "40", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", "\n", "\n", "", "if", "num_splits", "is", "None", ":", "\n", "        ", "ds", "=", "dataset", ".", "ILSVRC12Files", "(", "datadir", ",", "dataname", ",", "shuffle", "=", "True", ")", "\n", "", "else", ":", "\n", "# shard validation data", "\n", "        ", "assert", "False", "\n", "assert", "split_index", "<", "num_splits", "\n", "files", "=", "dataset", ".", "ILSVRC12Files", "(", "datadir", ",", "dataname", ",", "shuffle", "=", "True", ")", "\n", "files", ".", "reset_state", "(", ")", "\n", "files", "=", "list", "(", "files", ".", "get_data", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Number of validation data = {}\"", ".", "format", "(", "len", "(", "files", ")", ")", ")", "\n", "split_size", "=", "len", "(", "files", ")", "//", "num_splits", "\n", "start", ",", "end", "=", "split_size", "*", "split_index", ",", "split_size", "*", "(", "split_index", "+", "1", ")", "\n", "end", "=", "min", "(", "end", ",", "len", "(", "files", ")", ")", "\n", "logger", ".", "info", "(", "\"Local validation split = {} - {}\"", ".", "format", "(", "start", ",", "end", ")", ")", "\n", "files", "=", "files", "[", "start", ":", "end", "]", "\n", "ds", "=", "DataFromList", "(", "files", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "aug", "=", "imgaug", ".", "AugmentorList", "(", "augmentors", ")", "\n", "\n", "def", "mapf", "(", "dp", ")", ":", "\n", "        ", "fname", ",", "cls", "=", "dp", "\n", "im", "=", "cv2", ".", "imread", "(", "fname", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "#from BGR to RGB", "\n", "im", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "im", "=", "aug", ".", "augment", "(", "im", ")", "\n", "return", "im", ",", "cls", "\n", "", "ds", "=", "MultiThreadMapData", "(", "ds", ",", "parallel", ",", "mapf", ",", "\n", "buffer_size", "=", "min", "(", "2000", ",", "ds", ".", "size", "(", ")", ")", ",", "strict", "=", "True", ")", "\n", "ds", "=", "BatchData", "(", "ds", ",", "batch_size", ",", "remainder", "=", "False", ")", "\n", "ds", "=", "RepeatedData", "(", "ds", ",", "num", "=", "-", "1", ")", "\n", "# do not fork() under MPI", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.imagenet_utils.eval_on_ILSVRC12": [[102, 117], ["tensorpack.predict.PredictConfig", "tensorpack.predict.SimpleDatasetPredictor", "tensorpack.predict.SimpleDatasetPredictor.get_result", "print", "print", "tensorpack.utils.stats.RatioCounter", "tensorpack.utils.stats.RatioCounter", "acc1.feed", "acc5.feed", "top1.sum", "top5.sum"], "function", ["None"], ["", "def", "eval_on_ILSVRC12", "(", "model", ",", "sessinit", ",", "dataflow", ")", ":", "\n", "    ", "pred_config", "=", "PredictConfig", "(", "\n", "model", "=", "model", ",", "\n", "session_init", "=", "sessinit", ",", "\n", "input_names", "=", "[", "'input'", ",", "'label'", "]", ",", "\n", "output_names", "=", "[", "'wrong-top1'", ",", "'wrong-top5'", "]", "\n", ")", "\n", "pred", "=", "SimpleDatasetPredictor", "(", "pred_config", ",", "dataflow", ")", "\n", "acc1", ",", "acc5", "=", "RatioCounter", "(", ")", ",", "RatioCounter", "(", ")", "\n", "for", "top1", ",", "top5", "in", "pred", ".", "get_result", "(", ")", ":", "\n", "        ", "batch_size", "=", "top1", ".", "shape", "[", "0", "]", "\n", "acc1", ".", "feed", "(", "top1", ".", "sum", "(", ")", ",", "batch_size", ")", "\n", "acc5", ".", "feed", "(", "top5", ".", "sum", "(", ")", ",", "batch_size", ")", "\n", "", "print", "(", "\"Top1 Error: {}\"", ".", "format", "(", "acc1", ".", "ratio", ")", ")", "\n", "print", "(", "\"Top5 Error: {}\"", ".", "format", "(", "acc5", ".", "ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.utils.HorovodClassificationError.__init__": [[14, 22], ["None"], "methods", ["None"], ["        ", "var_list", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "scope_name", ")", "\n", "", "else", ":", "\n", "        ", "var_list", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "scope_name", ")", "\n", "", "assert", "(", "len", "(", "var_list", ")", ">=", "1", ")", "\n", "return", "var_list", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.utils.HorovodClassificationError._setup_graph": [[23, 26], ["tensorflow.placeholder", "horovod.allreduce"], "methods", ["None"], ["", "def", "get_shape", "(", "x", ")", ":", "\n", "    ", "x_shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "x_shape", "[", "0", "]", "is", "None", ":", "\n", "        ", "return", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "]", "+", "x_shape", "[", "1", ":", "]", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.utils.HorovodClassificationError._before_inference": [[27, 29], ["tensorpack.utils.stats.RatioCounter"], "methods", ["None"], ["", "else", ":", "\n", "        ", "return", "x_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.utils.HorovodClassificationError._get_fetches": [[30, 32], ["None"], "methods", ["None"], ["\n", "# Copyright @ https://jhui.github.io/2017/03/07/TensorFlow-GPU/", "\n", "", "", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.utils.HorovodClassificationError._on_fetches": [[33, 38], ["len", "numpy.sum", "utils.HorovodClassificationError.err_stat.feed"], "methods", ["None"], ["    ", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.third_party.utils.HorovodClassificationError._after_inference": [[39, 44], ["utils.HorovodClassificationError._reduced.eval"], "methods", ["None"], ["# Add 0 dimension to the gradients to represent the tower.", "\n", "            ", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.CIFAR10Data.__init__": [[40, 71], ["numpy.zeros", "numpy.zeros", "enumerate", "cifar10_input.CIFAR10Data._load_datafile", "range", "cifar10_input.DataSubset", "cifar10_input.DataSubset", "cifar10_input.CIFAR10Data._load_datafile", "os.path.join", "open", "len", "cifar10_input.CIFAR10Data.label_names[].decode", "range", "os.path.join", "os.path.join", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.CIFAR10Data._load_datafile", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.CIFAR10Data._load_datafile", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.Decoder.decode"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "train_filenames", "=", "[", "'data_batch_{}'", ".", "format", "(", "ii", "+", "1", ")", "for", "ii", "in", "range", "(", "5", ")", "]", "\n", "eval_filename", "=", "'test_batch'", "\n", "metadata_filename", "=", "'batches.meta'", "\n", "\n", "train_images", "=", "np", ".", "zeros", "(", "(", "50000", ",", "32", ",", "32", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "train_labels", "=", "np", ".", "zeros", "(", "50000", ",", "dtype", "=", "'int32'", ")", "\n", "for", "ii", ",", "fname", "in", "enumerate", "(", "train_filenames", ")", ":", "\n", "            ", "cur_images", ",", "cur_labels", "=", "self", ".", "_load_datafile", "(", "os", ".", "path", ".", "join", "(", "path", ",", "fname", ")", ")", "\n", "train_images", "[", "ii", "*", "10000", ":", "(", "ii", "+", "1", ")", "*", "10000", ",", "...", "]", "=", "cur_images", "\n", "train_labels", "[", "ii", "*", "10000", ":", "(", "ii", "+", "1", ")", "*", "10000", ",", "...", "]", "=", "cur_labels", "\n", "", "eval_images", ",", "eval_labels", "=", "self", ".", "_load_datafile", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "eval_filename", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "metadata_filename", ")", ",", "'rb'", ")", "as", "fo", ":", "\n", "              ", "if", "version", ".", "major", "==", "3", ":", "\n", "                  ", "data_dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "else", ":", "\n", "                  ", "data_dict", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "\n", "", "self", ".", "label_names", "=", "data_dict", "[", "b'label_names'", "]", "\n", "", "for", "ii", "in", "range", "(", "len", "(", "self", ".", "label_names", ")", ")", ":", "\n", "            ", "self", ".", "label_names", "[", "ii", "]", "=", "self", ".", "label_names", "[", "ii", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "", "self", ".", "train_images", "=", "train_images", "\n", "self", ".", "train_labels", "=", "train_labels", "\n", "self", ".", "eval_images", "=", "eval_images", "\n", "self", ".", "eval_labels", "=", "eval_labels", "\n", "\n", "self", ".", "train_data", "=", "DataSubset", "(", "train_images", ",", "train_labels", ")", "\n", "self", ".", "eval_data", "=", "DataSubset", "(", "eval_images", ",", "eval_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.CIFAR10Data._load_datafile": [[72, 84], ["open", "image_data.reshape().transpose.reshape().transpose.reshape().transpose", "pickle.load", "pickle.load", "numpy.array", "image_data.reshape().transpose.reshape().transpose.reshape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_datafile", "(", "filename", ")", ":", "\n", "      ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "fo", ":", "\n", "          ", "if", "version", ".", "major", "==", "3", ":", "\n", "              ", "data_dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "else", ":", "\n", "              ", "data_dict", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "\n", "", "assert", "data_dict", "[", "b'data'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "image_data", "=", "data_dict", "[", "b'data'", "]", "\n", "image_data", "=", "image_data", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "image_data", ",", "np", ".", "array", "(", "data_dict", "[", "b'labels'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedCIFAR10Data.__init__": [[97, 110], ["isinstance", "cifar10_input.AugmentedCIFAR10Data.augment_data_set", "cifar10_input.AugmentedDataSubset", "cifar10_input.AugmentedCIFAR10Data.augment_data_set", "cifar10_input.AugmentedDataSubset"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedCIFAR10Data.augment_data_set", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedCIFAR10Data.augment_data_set"], ["def", "__init__", "(", "self", ",", "raw_cifar10data", ",", "sess", ",", "model", ",", "batchsize", ")", ":", "\n", "        ", "assert", "isinstance", "(", "raw_cifar10data", ",", "CIFAR10Data", ")", "\n", "self", ".", "image_size", "=", "32", "\n", "\n", "# create augmentation computational graph", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "train_augment", "=", "self", ".", "augment_data_set", "(", "\n", "sess", ",", "raw_cifar10data", ".", "train_images", ",", "raw_cifar10data", ".", "train_labels", ")", "\n", "self", ".", "train_data", "=", "AugmentedDataSubset", "(", "sess", ",", "train_augment", ")", "\n", "eval_augment", "=", "self", ".", "augment_data_set", "(", "\n", "sess", ",", "raw_cifar10data", ".", "eval_images", ",", "raw_cifar10data", ".", "eval_labels", ")", "\n", "self", ".", "eval_data", "=", "AugmentedDataSubset", "(", "sess", ",", "eval_augment", ")", "\n", "self", ".", "label_names", "=", "raw_cifar10data", ".", "label_names", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedCIFAR10Data.augment_per_img": [[111, 120], ["tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.random_crop", "tensorflow.image.random_flip_left_right"], "methods", ["None"], ["", "def", "augment_per_img", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "# Data argumentation", "\n", "#print(input.shape.as_list())", "\n", "        ", "input_aug", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "\n", "input", ",", "32", "+", "4", ",", "32", "+", "4", ")", "\n", "input_aug", "=", "tf", ".", "random_crop", "(", "input_aug", ",", "[", "32", ",", "32", ",", "3", "]", ")", "\n", "input_aug", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "input_aug", ")", "\n", "\n", "return", "input_aug", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedCIFAR10Data.augment_data_set": [[121, 139], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices", "dataset.prefetch.prefetch.map", "dataset.prefetch.prefetch.shuffle", "dataset.prefetch.prefetch.repeat", "dataset.prefetch.prefetch.batch", "dataset.prefetch.prefetch.prefetch", "dataset.prefetch.prefetch.make_initializable_iterator", "dataset.prefetch.make_initializable_iterator.get_next", "sess.run"], "methods", ["None"], ["", "def", "augment_data_set", "(", "self", ",", "sess", ",", "data", ",", "label", ")", ":", "\n", "        ", "data_placeholder", "=", "tf", ".", "placeholder", "(", "data", ".", "dtype", ",", "data", ".", "shape", ")", "\n", "label_placeholder", "=", "tf", ".", "placeholder", "(", "label", ".", "dtype", ",", "label", ".", "shape", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "\n", "(", "data_placeholder", ",", "label_placeholder", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "map", "(", "self", ".", "augment_per_img", ",", "num_parallel_calls", "=", "3", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "buffer_size", "=", "1000", ")", "\n", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "dataset", "=", "dataset", ".", "batch", "(", "self", ".", "batchsize", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "self", ".", "batchsize", "*", "5", ")", "\n", "\n", "iterator", "=", "dataset", ".", "make_initializable_iterator", "(", ")", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "\n", "sess", ".", "run", "(", "iterator", ".", "initializer", ",", "feed_dict", "=", "{", "data_placeholder", ":", "data", ",", "\n", "label_placeholder", ":", "label", "}", ")", "\n", "return", "next_element", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedDataSubset.__init__": [[142, 146], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "\n", "augmented", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "augmented", "=", "augmented", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.AugmentedDataSubset.get_next_batch": [[147, 149], ["cifar10_input.AugmentedDataSubset.sess.run"], "methods", ["None"], ["", "def", "get_next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "augmented", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.DataSubset.__init__": [[152, 158], ["numpy.random.permutation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "self", ".", "xs", "=", "xs", "\n", "self", ".", "n", "=", "xs", ".", "shape", "[", "0", "]", "\n", "self", ".", "ys", "=", "ys", "\n", "self", ".", "batch_start", "=", "0", "\n", "self", ".", "cur_order", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.cifar10.cifar10_input.DataSubset.get_next_batch": [[159, 181], ["min", "ValueError", "min", "ValueError", "numpy.random.permutation"], "methods", ["None"], ["", "def", "get_next_batch", "(", "self", ",", "batch_size", ",", "multiple_passes", "=", "False", ",", "reshuffle_after_pass", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "n", "<", "batch_size", ":", "\n", "            ", "raise", "ValueError", "(", "'Batch size can be at most the dataset size'", ")", "\n", "", "if", "not", "multiple_passes", ":", "\n", "            ", "actual_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "batch_start", ")", "\n", "if", "actual_batch_size", "<=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'Pass through the dataset is complete.'", ")", "\n", "", "batch_end", "=", "self", ".", "batch_start", "+", "actual_batch_size", "\n", "batch_xs", "=", "self", ".", "xs", "[", "self", ".", "cur_order", "[", "self", ".", "batch_start", ":", "batch_end", "]", ",", "...", "]", "\n", "batch_ys", "=", "self", ".", "ys", "[", "self", ".", "cur_order", "[", "self", ".", "batch_start", ":", "batch_end", "]", ",", "...", "]", "\n", "self", ".", "batch_start", "+=", "actual_batch_size", "\n", "return", "batch_xs", ",", "batch_ys", "\n", "", "actual_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "batch_start", ")", "\n", "if", "actual_batch_size", "<", "batch_size", ":", "\n", "            ", "if", "reshuffle_after_pass", ":", "\n", "                ", "self", ".", "cur_order", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "n", ")", "\n", "", "self", ".", "batch_start", "=", "0", "\n", "", "batch_end", "=", "self", ".", "batch_start", "+", "batch_size", "\n", "batch_xs", "=", "self", ".", "xs", "[", "self", ".", "cur_order", "[", "self", ".", "batch_start", ":", "batch_end", "]", ",", "...", "]", "\n", "batch_ys", "=", "self", ".", "ys", "[", "self", ".", "cur_order", "[", "self", ".", "batch_start", ":", "batch_end", "]", ",", "...", "]", "\n", "self", ".", "batch_start", "+=", "batch_size", "\n", "return", "batch_xs", ",", "batch_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model.__init__": [[27, 36], ["cifar10_class.Model.provide_statistics"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model.provide_statistics"], ["def", "__init__", "(", "self", ",", "mode", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"ResNet constructor.\n\n    Args:\n      mode: One of 'train' and 'eval'.\n    \"\"\"", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "provide_statistics", "(", ")", "\n", "#self._build_model()", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model.add_internal_summaries": [[38, 40], ["None"], "methods", ["None"], ["", "def", "add_internal_summaries", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr": [[41, 44], ["None"], "methods", ["None"], ["", "def", "_stride_arr", "(", "self", ",", "stride", ")", ":", "\n", "    ", "\"\"\"Map a stride scalar to the stride array for tf.nn.conv2d.\"\"\"", "\n", "return", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model.provide_statistics": [[45, 49], ["numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "provide_statistics", "(", "self", ")", ":", "#,data,label):", "\n", "      ", "self", ".", "statistics_enable", "=", "True", "\n", "self", ".", "tr_mean", "=", "np", ".", "array", "(", "[", "125.3", ",", "123.0", ",", "113.9", "]", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "-", "1", "]", ")", "#np.mean(data, axis=(0, 1, 2), keepdims=True)", "\n", "self", ".", "tr_std", "=", "np", ".", "array", "(", "[", "63.0", ",", "62.1", ",", "66.7", "]", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "-", "1", "]", ")", "#np.std(data,axis=(0,1,2), keepdims=True)", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._build_model_easy": [[50, 57], ["tensorflow.placeholder", "tensorflow.placeholder", "cifar10_class.Model._build_model"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._build_model"], ["", "def", "_build_model_easy", "(", "self", ")", ":", "\n", "      ", "self", ".", "x_input", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "32", ",", "32", ",", "3", "]", ")", "\n", "\n", "self", ".", "y_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "shape", "=", "None", ")", "\n", "self", ".", "_build_model", "(", "self", ".", "x_input", ",", "self", ".", "y_input", ",", "reuse", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._build_model": [[59, 136], ["tensorflow.variable_scope", "cifar10_class.Model._conv", "range", "range", "range", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "cifar10_class.Model._stride_arr", "tensorflow.variable_scope", "res_func", "tensorflow.variable_scope", "res_func", "tensorflow.variable_scope", "res_func", "tensorflow.variable_scope", "cifar10_class.Model._batch_norm", "cifar10_class.Model._relu", "cifar10_class.Model._global_avg_pool", "tensorflow.variable_scope", "cifar10_class.Model._fully_connected", "tensorflow.cast", "tensorflow.cast", "tensorflow.variable_scope", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.one_hot", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "cifar10_class.Model._decay", "cifar10_class.Model._stride_arr", "tensorflow.variable_scope", "res_func", "cifar10_class.Model._stride_arr", "tensorflow.variable_scope", "res_func", "cifar10_class.Model._stride_arr", "tensorflow.variable_scope", "res_func", "tensorflow.log", "tensorflow.reduce_sum", "cifar10_class.Model._stride_arr", "cifar10_class.Model._stride_arr", "cifar10_class.Model._stride_arr", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.one_hot"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._conv", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._batch_norm", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._relu", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._global_avg_pool", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._fully_connected", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._decay", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._stride_arr"], ["", "def", "_build_model", "(", "self", ",", "x", ",", "y", ",", "reuse", ",", "conf", "=", "1", ")", ":", "\n", "    ", "assert", "self", ".", "mode", "==", "'train'", "or", "self", ".", "mode", "==", "'eval'", "\n", "\"\"\"Build the core model within the graph.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "      ", "input_standardized", "=", "(", "x", "-", "self", ".", "tr_mean", ")", "/", "self", ".", "tr_std", "\n", "x", "=", "self", ".", "_conv", "(", "'init_conv'", ",", "input_standardized", ",", "\n", "3", ",", "3", ",", "16", ",", "self", ".", "_stride_arr", "(", "1", ")", ")", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", "]", "\n", "activate_before_residual", "=", "[", "True", ",", "False", ",", "False", "]", "\n", "res_func", "=", "self", ".", "_residual", "\n", "\n", "# Uncomment the following codes to use w28-10 wide residual network.", "\n", "# It is more memory efficient than very deep residual network and has", "\n", "# comparably good performance.", "\n", "# https://arxiv.org/pdf/1605.07146v1.pdf", "\n", "filters", "=", "[", "16", ",", "32", ",", "64", ",", "128", "]", "\n", "\n", "\n", "# Update hps.num_residual_units to 9", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'unit_1_0'", ")", ":", "\n", "        ", "x", "=", "res_func", "(", "x", ",", "filters", "[", "0", "]", ",", "filters", "[", "1", "]", ",", "self", ".", "_stride_arr", "(", "strides", "[", "0", "]", ")", ",", "\n", "activate_before_residual", "[", "0", "]", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "2", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'unit_1_%d'", "%", "i", ")", ":", "\n", "          ", "x", "=", "res_func", "(", "x", ",", "filters", "[", "1", "]", ",", "filters", "[", "1", "]", ",", "self", ".", "_stride_arr", "(", "1", ")", ",", "False", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'unit_2_0'", ")", ":", "\n", "        ", "x", "=", "res_func", "(", "x", ",", "filters", "[", "1", "]", ",", "filters", "[", "2", "]", ",", "self", ".", "_stride_arr", "(", "strides", "[", "1", "]", ")", ",", "\n", "activate_before_residual", "[", "1", "]", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "2", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'unit_2_%d'", "%", "i", ")", ":", "\n", "          ", "x", "=", "res_func", "(", "x", ",", "filters", "[", "2", "]", ",", "filters", "[", "2", "]", ",", "self", ".", "_stride_arr", "(", "1", ")", ",", "False", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'unit_3_0'", ")", ":", "\n", "        ", "x", "=", "res_func", "(", "x", ",", "filters", "[", "2", "]", ",", "filters", "[", "3", "]", ",", "self", ".", "_stride_arr", "(", "strides", "[", "2", "]", ")", ",", "\n", "activate_before_residual", "[", "2", "]", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "2", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'unit_3_%d'", "%", "i", ")", ":", "\n", "          ", "x", "=", "res_func", "(", "x", ",", "filters", "[", "3", "]", ",", "filters", "[", "3", "]", ",", "self", ".", "_stride_arr", "(", "1", ")", ",", "False", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'unit_last'", ")", ":", "\n", "        ", "x", "=", "self", ".", "_batch_norm", "(", "'final_bn'", ",", "x", ")", "\n", "x", "=", "self", ".", "_relu", "(", "x", ",", "0.1", ")", "\n", "x", "=", "self", ".", "_global_avg_pool", "(", "x", ")", "\n", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'logit'", ")", ":", "\n", "        ", "self", ".", "pre_softmax", "=", "self", ".", "_fully_connected", "(", "x", ",", "10", ")", "\n", "\n", "", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "pre_softmax", ",", "1", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "y", ")", "\n", "self", ".", "num_correct", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "tf", ".", "int64", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'costs'", ")", ":", "\n", "        ", "self", ".", "logits", "=", "self", ".", "pre_softmax", "\n", "self", ".", "y_xent", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "pre_softmax", ",", "labels", "=", "y", ")", "\n", "self", ".", "relaxed_y_xent", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "1", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "pre_softmax", ")", "*", "tf", ".", "one_hot", "(", "y", ",", "depth", "=", "10", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n", "label_one_hot", "=", "tf", ".", "one_hot", "(", "y", ",", "depth", "=", "10", ")", "\n", "wrong_logit", "=", "tf", ".", "reduce_max", "(", "\n", "self", ".", "pre_softmax", "*", "(", "1", "-", "label_one_hot", ")", "-", "label_one_hot", "*", "1e7", ",", "axis", "=", "-", "1", ")", "\n", "true_logit", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "pre_softmax", "*", "label_one_hot", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "target_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "true_logit", "-", "wrong_logit", "+", "conf", ")", ")", "\n", "\n", "self", ".", "xent", "=", "tf", ".", "reduce_sum", "(", "self", ".", "y_xent", ",", "name", "=", "'y_xent'", ")", "\n", "self", ".", "mean_xent", "=", "tf", ".", "reduce_mean", "(", "self", ".", "y_xent", ")", "\n", "self", ".", "weight_decay_loss", "=", "self", ".", "_decay", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._batch_norm": [[137, 148], ["tensorflow.name_scope", "tensorflow.contrib.layers.batch_norm"], "methods", ["None"], ["", "", "", "def", "_batch_norm", "(", "self", ",", "name", ",", "x", ")", ":", "\n", "    ", "\"\"\"Batch normalization.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "      ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "\n", "inputs", "=", "x", ",", "\n", "decay", "=", ".9", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "activation_fn", "=", "None", ",", "\n", "updates_collections", "=", "None", ",", "\n", "is_training", "=", "(", "self", ".", "mode", "==", "'train'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._instance_norm": [[150, 156], ["tensorflow.name_scope", "tensorflow.contrib.layers.instance_norm"], "methods", ["None"], ["", "", "def", "_instance_norm", "(", "self", ",", "name", ",", "x", ")", ":", "\n", "      ", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "          ", "return", "tf", ".", "contrib", ".", "layers", ".", "instance_norm", "(", "\n", "inputs", "=", "x", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", ")", "#is_training=(self.mode==\"train\"))", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._norm": [[158, 163], ["cifar10_class.Model._instance_norm", "cifar10_class.Model._batch_norm"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._instance_norm", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._batch_norm"], ["", "", "def", "_norm", "(", "self", ",", "name", ",", "x", ",", "norm", "=", "\"batch\"", ")", ":", "\n", "    ", "if", "norm", "==", "\"batch\"", ":", "\n", "      ", "return", "self", ".", "_instance_norm", "(", "name", ",", "x", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_batch_norm", "(", "name", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._residual": [[164, 196], ["tensorflow.logging.debug", "tensorflow.variable_scope", "cifar10_class.Model._conv", "tensorflow.variable_scope", "cifar10_class.Model._norm", "cifar10_class.Model._relu", "cifar10_class.Model._conv", "tensorflow.variable_scope", "cifar10_class.Model.get_shape", "tensorflow.variable_scope", "cifar10_class.Model._norm", "cifar10_class.Model._relu", "tensorflow.variable_scope", "cifar10_class.Model._norm", "cifar10_class.Model._relu", "tensorflow.nn.avg_pool", "tensorflow.pad"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._conv", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._norm", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._relu", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._conv", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_shape", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._norm", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._relu", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._norm", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._relu"], ["", "", "def", "_residual", "(", "self", ",", "x", ",", "in_filter", ",", "out_filter", ",", "stride", ",", "\n", "activate_before_residual", "=", "False", ")", ":", "\n", "    ", "\"\"\"Residual unit with 2 sub layers.\"\"\"", "\n", "if", "activate_before_residual", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'shared_activation'", ")", ":", "\n", "        ", "x", "=", "self", ".", "_norm", "(", "'init_bn'", ",", "x", ")", "\n", "x", "=", "self", ".", "_relu", "(", "x", ",", "0.1", ")", "\n", "orig_x", "=", "x", "\n", "", "", "else", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'residual_only_activation'", ")", ":", "\n", "        ", "orig_x", "=", "x", "\n", "x", "=", "self", ".", "_norm", "(", "'init_bn'", ",", "x", ")", "\n", "x", "=", "self", ".", "_relu", "(", "x", ",", "0.1", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'sub1'", ")", ":", "\n", "      ", "x", "=", "self", ".", "_conv", "(", "'conv1'", ",", "x", ",", "3", ",", "in_filter", ",", "out_filter", ",", "stride", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sub2'", ")", ":", "\n", "      ", "x", "=", "self", ".", "_norm", "(", "'bn2'", ",", "x", ")", "\n", "x", "=", "self", ".", "_relu", "(", "x", ",", "0.1", ")", "\n", "x", "=", "self", ".", "_conv", "(", "'conv2'", ",", "x", ",", "3", ",", "out_filter", ",", "out_filter", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'sub_add'", ")", ":", "\n", "      ", "if", "in_filter", "!=", "out_filter", ":", "\n", "        ", "orig_x", "=", "tf", ".", "nn", ".", "avg_pool", "(", "orig_x", ",", "stride", ",", "stride", ",", "'VALID'", ")", "\n", "orig_x", "=", "tf", ".", "pad", "(", "\n", "orig_x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "(", "out_filter", "-", "in_filter", ")", "//", "2", ",", "(", "out_filter", "-", "in_filter", ")", "//", "2", "]", "]", ")", "\n", "", "x", "+=", "orig_x", "\n", "\n", "", "tf", ".", "logging", ".", "debug", "(", "'image after unit %s'", ",", "x", ".", "get_shape", "(", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._decay": [[197, 204], ["tensorflow.trainable_variables", "tensorflow.add_n", "var.op.name.find", "costs.append", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "_decay", "(", "self", ")", ":", "\n", "    ", "\"\"\"L2 weight decay loss.\"\"\"", "\n", "costs", "=", "[", "]", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "      ", "if", "var", ".", "op", ".", "name", ".", "find", "(", "'DW'", ")", ">", "0", ":", "\n", "        ", "costs", ".", "append", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ")", "\n", "", "", "return", "tf", ".", "add_n", "(", "costs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._conv": [[205, 214], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.random_normal_initializer", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d"], ["", "def", "_conv", "(", "self", ",", "name", ",", "x", ",", "filter_size", ",", "in_filters", ",", "out_filters", ",", "strides", ")", ":", "\n", "    ", "\"\"\"Convolution.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "      ", "n", "=", "filter_size", "*", "filter_size", "*", "out_filters", "\n", "kernel", "=", "tf", ".", "get_variable", "(", "\n", "'DW'", ",", "[", "filter_size", ",", "filter_size", ",", "in_filters", ",", "out_filters", "]", ",", "\n", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "np", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "kernel", ",", "strides", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._relu": [[215, 218], ["tensorflow.where", "tensorflow.less"], "methods", ["None"], ["", "", "def", "_relu", "(", "self", ",", "x", ",", "leakiness", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Relu, with optional leaky support.\"\"\"", "\n", "return", "tf", ".", "where", "(", "tf", ".", "less", "(", "x", ",", "0.0", ")", ",", "leakiness", "*", "x", ",", "x", ",", "name", "=", "'leaky_relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._fully_connected": [[219, 232], ["len", "range", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.xw_plus_b", "int", "tensorflow.uniform_unit_scaling_initializer", "tensorflow.constant_initializer", "tensorflow.shape"], "methods", ["None"], ["", "def", "_fully_connected", "(", "self", ",", "x", ",", "out_dim", ")", ":", "\n", "    ", "\"\"\"FullyConnected layer for final output.\"\"\"", "\n", "num_non_batch_dimensions", "=", "len", "(", "x", ".", "shape", ")", "\n", "prod_non_batch_dimensions", "=", "1", "\n", "for", "ii", "in", "range", "(", "num_non_batch_dimensions", "-", "1", ")", ":", "\n", "      ", "prod_non_batch_dimensions", "*=", "int", "(", "x", ".", "shape", "[", "ii", "+", "1", "]", ")", "\n", "", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "w", "=", "tf", ".", "get_variable", "(", "\n", "'DW'", ",", "[", "prod_non_batch_dimensions", ",", "out_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "uniform_unit_scaling_initializer", "(", "factor", "=", "1.0", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "out_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", ")", ")", "\n", "return", "tf", ".", "nn", ".", "xw_plus_b", "(", "x", ",", "w", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.cifar10_class.Model._global_avg_pool": [[233, 236], ["tensorflow.reduce_mean", "x.get_shape"], "methods", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_shape"], ["", "def", "_global_avg_pool", "(", "self", ",", "x", ")", ":", "\n", "    ", "assert", "x", ".", "get_shape", "(", ")", ".", "ndims", "==", "4", "\n", "return", "tf", ".", "reduce_mean", "(", "x", ",", "[", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.container.__init__": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.load_pb": [[5, 18], ["tensorflow.transpose", "tensorflow.import_graph_def", "tensorflow.gfile.GFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.get_default_graph", "f.read"], "function", ["None"], ["def", "load_pb", "(", "path_to_pb", ",", "input", ")", ":", "\n", "    ", "input", "=", "tf", ".", "transpose", "(", "input", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "input", "=", "input", "/", "255", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "path_to_pb", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "#with tf.get_default_graph() as graph:", "\n", "", "global", "cnt", "\n", "cnt", "+=", "1", "\n", "output", ",", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'model%d'", "%", "cnt", ",", "input_map", "=", "{", "\n", "\"input: 0\"", ":", "input", ",", "}", ",", "return_elements", "=", "[", "'add_16: 0'", "]", ")", "\n", "#print(output.shape.as_list())", "\n", "return", "tf", ".", "get_default_graph", "(", ")", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.get_model": [[19, 25], ["trade_interface.load_pb"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.load_pb"], ["", "def", "get_model", "(", "input", ",", ")", ":", "\n", "    ", "graph", ",", "output", "=", "load_pb", "(", "\"./pretrained/model_cifar_wrn.pb\"", ",", "input", ")", "\n", "#print([n.name for n in tf.get_default_graph().as_graph_def().node])", "\n", "#output_tensor = graph.get_tensor_by_name('model/add_16: 0')", "\n", "#input_tensor = graph.get_tensor_by_name('model/input:0')", "\n", "return", "output", "#input_tensor, output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.build_model": [[31, 59], ["trade_interface.container", "trade_interface.get_model", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.variable_scope", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.one_hot", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.get_model"], ["", "", "def", "build_model", "(", "x", ",", "y", ",", "conf", "=", "1", ")", ":", "\n", "\n", "    ", "cont", "=", "container", "(", ")", "\n", "logits", "=", "get_model", "(", "x", ")", "\n", "cont", ".", "logits", "=", "logits", "\n", "\n", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "1", ")", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "predictions", ",", "y", ")", "\n", "\n", "cont", ".", "correct_prediction", "=", "correct_prediction", "\n", "cont", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'costs'", ")", ":", "\n", "        ", "cont", ".", "y_xent", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "y", ")", "\n", "\n", "label_one_hot", "=", "tf", ".", "one_hot", "(", "y", ",", "depth", "=", "10", ")", "\n", "wrong_logit", "=", "tf", ".", "reduce_max", "(", "\n", "logits", "*", "(", "1", "-", "label_one_hot", ")", "-", "label_one_hot", "*", "1e7", ",", "axis", "=", "-", "1", ")", "\n", "true_logit", "=", "tf", ".", "reduce_sum", "(", "\n", "logits", "*", "label_one_hot", ",", "axis", "=", "-", "1", ")", "\n", "cont", ".", "target_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "true_logit", "-", "wrong_logit", "+", "conf", ")", ")", "\n", "\n", "cont", ".", "xent", "=", "tf", ".", "reduce_sum", "(", "logits", ",", "name", "=", "'y_xent'", ")", "\n", "cont", ".", "mean_xent", "=", "tf", ".", "reduce_mean", "(", "logits", ")", "\n", "", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.models.trade_interface.gen_pb": [[60, 87], ["torch.device", "WideResNet().to", "WideResNet().to.load_state_dict", "WideResNet().to.eval", "torch.from_numpy().float().to", "WideResNet().to.", "torch.onnx.export", "onnx.load", "prepare", "print", "prepare.export_graph", "torch.load", "WideResNet", "torch.from_numpy().float", "torch.from_numpy", "numpy.zeros"], "function", ["None"], ["", "def", "gen_pb", "(", ")", ":", "\n", "    ", "from", "trades", ".", "models", ".", "wideresnet", "import", "WideResNet", "\n", "import", "torch", "\n", "import", "onnx", "\n", "from", "onnx_tf", ".", "backend", "import", "prepare", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "model", "=", "WideResNet", "(", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./model_cifar_wrn.pt'", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "dummy_input", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "zeros", "(", "(", "64", ",", "3", ",", "32", ",", "32", ")", ",", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "dummy_output", "=", "model", "(", "dummy_input", ")", "\n", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ",", "dummy_input", ",", "'./model_cifar_wrn.onnx'", ",", "\n", "input_names", "=", "[", "'input'", "]", ",", "output_names", "=", "[", "'output'", "]", ")", "\n", "\n", "model_onnx", "=", "onnx", ".", "load", "(", "'./model_cifar_wrn.onnx'", ")", "\n", "\n", "tf_rep", "=", "prepare", "(", "model_onnx", ")", "\n", "\n", "# Print out tensors and placeholders in model (helpful during inference in TensorFlow)", "\n", "print", "(", "tf_rep", ".", "tensor_dict", ")", "\n", "\n", "# Export model as .pb file", "\n", "tf_rep", ".", "export_graph", "(", "'./model_cifar_wrn.pb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.NoOpScope.__enter__": [[62, 64], ["None"], "methods", ["None"], ["def", "__enter__", "(", "self", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.NoOpScope.__exit__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.bottleneck": [[69, 127], ["tensorflow.variable_scope", "slim.utils.last_dimension", "slim.conv2d", "resnet_utils.conv2d_same", "slim.conv2d", "slim.utils.collect_named_outputs", "inputs.get_shape", "resnet_utils.subsample", "slim.conv2d", "tensorflow.clip_by_value", "tensorflow.nn.relu6", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.conv2d_same", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.utils.get_shape", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.subsample", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "bottleneck", "(", "inputs", ",", "\n", "depth", ",", "\n", "depth_bottleneck", ",", "\n", "stride", ",", "\n", "rate", "=", "1", ",", "\n", "outputs_collections", "=", "None", ",", "\n", "scope", "=", "None", ",", "\n", "use_bounded_activations", "=", "False", ")", ":", "\n", "  ", "\"\"\"Bottleneck residual unit variant with BN after convolutions.\n  This is the original residual unit proposed in [1]. See Fig. 1(a) of [2] for\n  its definition. Note that we use here the bottleneck variant which has an\n  extra bottleneck layer.\n  When putting together two consecutive ResNet blocks that use this unit, one\n  should use stride = 2 in the last unit of the first block.\n  Args:\n    inputs: A tensor of size [batch, height, width, channels].\n    depth: The depth of the ResNet unit output.\n    depth_bottleneck: The depth of the bottleneck layers.\n    stride: The ResNet unit's stride. Determines the amount of downsampling of\n      the units output compared to its input.\n    rate: An integer, rate for atrous convolution.\n    outputs_collections: Collection to add the ResNet unit output.\n    scope: Optional variable_scope.\n    use_bounded_activations: Whether or not to use bounded activations. Bounded\n      activations better lend themselves to quantized inference.\n  Returns:\n    The ResNet unit's output.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'bottleneck_v1'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "    ", "depth_in", "=", "slim", ".", "utils", ".", "last_dimension", "(", "inputs", ".", "get_shape", "(", ")", ",", "min_rank", "=", "4", ")", "\n", "if", "depth", "==", "depth_in", ":", "\n", "      ", "shortcut", "=", "resnet_utils", ".", "subsample", "(", "inputs", ",", "stride", ",", "'shortcut'", ")", "\n", "", "else", ":", "\n", "      ", "shortcut", "=", "slim", ".", "conv2d", "(", "\n", "inputs", ",", "\n", "depth", ",", "[", "1", ",", "1", "]", ",", "\n", "stride", "=", "stride", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu6", "if", "use_bounded_activations", "else", "None", ",", "\n", "scope", "=", "'shortcut'", ")", "\n", "\n", "", "residual", "=", "slim", ".", "conv2d", "(", "inputs", ",", "depth_bottleneck", ",", "[", "1", ",", "1", "]", ",", "stride", "=", "1", ",", "\n", "scope", "=", "'conv1'", ")", "\n", "residual", "=", "resnet_utils", ".", "conv2d_same", "(", "residual", ",", "depth_bottleneck", ",", "3", ",", "stride", ",", "\n", "rate", "=", "rate", ",", "scope", "=", "'conv2'", ")", "\n", "residual", "=", "slim", ".", "conv2d", "(", "residual", ",", "depth", ",", "[", "1", ",", "1", "]", ",", "stride", "=", "1", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'conv3'", ")", "\n", "\n", "if", "use_bounded_activations", ":", "\n", "# Use clip_by_value to simulate bandpass activation.", "\n", "      ", "residual", "=", "tf", ".", "clip_by_value", "(", "residual", ",", "-", "6.0", ",", "6.0", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu6", "(", "shortcut", "+", "residual", ")", "\n", "", "else", ":", "\n", "      ", "output", "=", "tf", ".", "nn", ".", "relu", "(", "shortcut", "+", "residual", ")", "\n", "\n", "", "return", "slim", ".", "utils", ".", "collect_named_outputs", "(", "outputs_collections", ",", "\n", "sc", ".", "name", ",", "\n", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1": [[129, 244], ["tensorflow.variable_scope", "slim.arg_scope", "resnet_utils.stack_blocks_dense", "slim.utils.convert_collection_to_dict", "slim.arg_scope", "resnet_slim.NoOpScope", "resnet_utils.conv2d_same", "slim.max_pool2d", "tensorflow.reduce_mean", "tensorflow.squeeze", "slim.conv2d", "slim.get_variables", "tensorflow.squeeze", "tensorflow.add", "tensorflow.matmul", "ValueError"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.stack_blocks_dense", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.conv2d_same", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d"], ["", "", "def", "resnet_v1", "(", "inputs", ",", "\n", "blocks", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "include_root_block", "=", "True", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "store_non_strided_activations", "=", "False", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generator for v1 ResNet models.\n  This function generates a family of ResNet v1 models. See the resnet_v1_*()\n  methods for specific model instantiations, obtained by selecting different\n  block instantiations that produce ResNets of various depths.\n  Training for image classification on Imagenet is usually done with [224, 224]\n  inputs, resulting in [7, 7] feature maps at the output of the last ResNet\n  block for the ResNets defined in [1] that have nominal stride equal to 32.\n  However, for dense prediction tasks we advise that one uses inputs with\n  spatial dimensions that are multiples of 32 plus 1, e.g., [321, 321]. In\n  this case the feature maps at the ResNet output will have spatial shape\n  [(height - 1) / output_stride + 1, (width - 1) / output_stride + 1]\n  and corners exactly aligned with the input image corners, which greatly\n  facilitates alignment of the features to the image. Using as input [225, 225]\n  images results in [8, 8] feature maps at the output of the last ResNet block.\n  For dense prediction tasks, the ResNet needs to run in fully-convolutional\n  (FCN) mode and global_pool needs to be set to False. The ResNets in [1, 2] all\n  have nominal stride equal to 32 and a good choice in FCN mode is to use\n  output_stride=16 in order to increase the density of the computed features at\n  small computational and memory overhead, cf. http://arxiv.org/abs/1606.00915.\n  Args:\n    inputs: A tensor of size [batch, height_in, width_in, channels].\n    blocks: A list of length equal to the number of ResNet blocks. Each element\n      is a resnet_utils.Block object describing the units in the block.\n    num_classes: Number of predicted classes for classification tasks.\n      If 0 or None, we return the features before the logit layer.\n    is_training: whether batch_norm layers are in training mode. If this is set\n      to None, the callers can specify slim.batch_norm's is_training parameter\n      from an outer slim.arg_scope.\n    global_pool: If True, we perform global average pooling before computing the\n      logits. Set to True for image classification, False for dense prediction.\n    output_stride: If None, then the output will be computed at the nominal\n      network stride. If output_stride is not None, it specifies the requested\n      ratio of input to output spatial resolution.\n    include_root_block: If True, include the initial convolution followed by\n      max-pooling, if False excludes it.\n    spatial_squeeze: if True, logits is of shape [B, C], if false logits is\n        of shape [B, 1, 1, C], where B is batch_size and C is number of classes.\n        To use this parameter, the input images must be smaller than 300x300\n        pixels, in which case the output logit layer does not contain spatial\n        information and can be removed.\n    store_non_strided_activations: If True, we compute non-strided (undecimated)\n      activations at the last unit of each block and store them in the\n      `outputs_collections` before subsampling them. This gives us access to\n      higher resolution intermediate activations which are useful in some\n      dense prediction problems but increases 4x the computation and memory cost\n      at the last unit of each block.\n    reuse: whether or not the network and its variables should be reused. To be\n      able to reuse 'scope' must be given.\n    scope: Optional variable_scope.\n  Returns:\n    net: A rank-4 tensor of size [batch, height_out, width_out, channels_out].\n      If global_pool is False, then height_out and width_out are reduced by a\n      factor of output_stride compared to the respective height_in and width_in,\n      else both height_out and width_out equal one. If num_classes is 0 or None,\n      then net is the output of the last ResNet block, potentially after global\n      average pooling. If num_classes a non-zero integer, net contains the\n      pre-softmax activations.\n    end_points: A dictionary from components of the network to the corresponding\n      activation.\n  Raises:\n    ValueError: If the target output_stride is not valid.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'resnet_v1'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", "as", "sc", ":", "\n", "    ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "bottleneck", ",", "\n", "resnet_utils", ".", "stack_blocks_dense", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "      ", "with", "(", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "is_training", "=", "is_training", ")", "\n", "if", "is_training", "is", "not", "None", "else", "NoOpScope", "(", ")", ")", ":", "\n", "        ", "net", "=", "inputs", "\n", "if", "include_root_block", ":", "\n", "          ", "if", "output_stride", "is", "not", "None", ":", "\n", "            ", "if", "output_stride", "%", "4", "!=", "0", ":", "\n", "              ", "raise", "ValueError", "(", "\n", "'The output_stride needs to be a multiple of 4.'", ")", "\n", "", "output_stride", "/=", "4", "\n", "", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "net", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'pool1'", ")", "\n", "", "net", "=", "resnet_utils", ".", "stack_blocks_dense", "(", "net", ",", "blocks", ",", "output_stride", ",", "\n", "store_non_strided_activations", ")", "\n", "# Convert end_points_collection into a dictionary of end_points.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "\n", "end_points_collection", ")", "\n", "\n", "if", "global_pool", ":", "\n", "# Global average pooling.", "\n", "          ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'pool5'", ",", "keep_dims", "=", "True", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "", "if", "num_classes", ":", "\n", "\n", "          ", "net_2d", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "scope", "=", "'logits'", ")", "\n", "matrix", ",", "bias", "=", "slim", ".", "get_variables", "(", "scope", "=", "sc", ".", "name", "+", "'/logits'", ")", "\n", "matrix", "=", "tf", ".", "squeeze", "(", "matrix", ",", "[", "0", ",", "1", "]", ")", "\n", "logits", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "net_2d", ",", "matrix", ")", ",", "bias", ")", "\n", "\"\"\"\n          end_points[sc.name + '/logits'] = net\n          if spatial_squeeze:\n            net = tf.squeeze(net, [1, 2], name='SpatialSqueeze')\n            end_points[sc.name + '/spatial_squeeze'] = net\n          end_points['predictions'] = slim.softmax(net, scope='predictions')\n          \"\"\"", "\n", "", "return", "logits", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block": [[249, 268], ["resnet_utils.Block"], "function", ["None"], ["def", "resnet_v1_block", "(", "scope", ",", "base_depth", ",", "num_units", ",", "stride", ")", ":", "\n", "  ", "\"\"\"Helper function for creating a resnet_v1 bottleneck block.\n  Args:\n    scope: The scope of the block.\n    base_depth: The depth of the bottleneck layer for each unit.\n    num_units: The number of units in the block.\n    stride: The stride of the block, implemented as a stride in the last unit.\n      All other units have stride=1.\n  Returns:\n    A resnet_v1 bottleneck block.\n  \"\"\"", "\n", "return", "resnet_utils", ".", "Block", "(", "scope", ",", "bottleneck", ",", "[", "{", "\n", "'depth'", ":", "base_depth", "*", "4", ",", "\n", "'depth_bottleneck'", ":", "base_depth", ",", "\n", "'stride'", ":", "1", "\n", "}", "]", "*", "(", "num_units", "-", "1", ")", "+", "[", "{", "\n", "'depth'", ":", "base_depth", "*", "4", ",", "\n", "'depth_bottleneck'", ":", "base_depth", ",", "\n", "'stride'", ":", "stride", "\n", "}", "]", ")", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_50": [[271, 299], ["resnet_slim.resnet_v1", "max", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "int", "resnet_slim.resnet_v1_50.depth_func"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block"], ["", "def", "resnet_v1_50", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "store_non_strided_activations", "=", "False", ",", "\n", "min_base_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_50'", ")", ":", "\n", "  ", "\"\"\"ResNet-50 model of [1]. See resnet_v1() for arg and return description.\"\"\"", "\n", "def", "depth_func", "(", "d", ")", ":", "return", "max", "(", "int", "(", "d", "*", "depth_multiplier", ")", ",", "min_base_depth", ")", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "depth_func", "(", "64", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "depth_func", "(", "128", ")", ",", "num_units", "=", "4", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "depth_func", "(", "256", ")", ",", "num_units", "=", "6", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "depth_func", "(", "512", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "store_non_strided_activations", "=", "store_non_strided_activations", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_101": [[304, 332], ["resnet_slim.resnet_v1", "max", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "int", "resnet_slim.resnet_v1_50.depth_func"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block"], ["def", "resnet_v1_101", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "store_non_strided_activations", "=", "False", ",", "\n", "min_base_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_101'", ")", ":", "\n", "  ", "\"\"\"ResNet-101 model of [1]. See resnet_v1() for arg and return description.\"\"\"", "\n", "def", "depth_func", "(", "d", ")", ":", "return", "max", "(", "int", "(", "d", "*", "depth_multiplier", ")", ",", "min_base_depth", ")", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "depth_func", "(", "64", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "depth_func", "(", "128", ")", ",", "num_units", "=", "4", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "depth_func", "(", "256", ")", ",", "num_units", "=", "23", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "depth_func", "(", "512", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "store_non_strided_activations", "=", "store_non_strided_activations", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_152": [[337, 365], ["resnet_slim.resnet_v1", "max", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "int", "resnet_slim.resnet_v1_50.depth_func"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block"], ["def", "resnet_v1_152", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "store_non_strided_activations", "=", "False", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "min_base_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_152'", ")", ":", "\n", "  ", "\"\"\"ResNet-152 model of [1]. See resnet_v1() for arg and return description.\"\"\"", "\n", "def", "depth_func", "(", "d", ")", ":", "return", "max", "(", "int", "(", "d", "*", "depth_multiplier", ")", ",", "min_base_depth", ")", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "depth_func", "(", "64", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "depth_func", "(", "128", ")", ",", "num_units", "=", "8", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "depth_func", "(", "256", ")", ",", "num_units", "=", "36", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "depth_func", "(", "512", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "store_non_strided_activations", "=", "store_non_strided_activations", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_200": [[370, 398], ["resnet_slim.resnet_v1", "max", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "resnet_slim.resnet_v1_block", "int", "resnet_slim.resnet_v1_50.depth_func"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_block"], ["def", "resnet_v1_200", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "store_non_strided_activations", "=", "False", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "min_base_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_200'", ")", ":", "\n", "  ", "\"\"\"ResNet-200 model of [2]. See resnet_v1() for arg and return description.\"\"\"", "\n", "def", "depth_func", "(", "d", ")", ":", "return", "max", "(", "int", "(", "d", "*", "depth_multiplier", ")", ",", "min_base_depth", ")", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "depth_func", "(", "64", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "depth_func", "(", "128", ")", ",", "num_units", "=", "24", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "depth_func", "(", "256", ")", ",", "num_units", "=", "36", ",", "\n", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "depth_func", "(", "512", ")", ",", "num_units", "=", "3", ",", "\n", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "store_non_strided_activations", "=", "store_non_strided_activations", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.container.__init__": [[20, 22], ["None"], "methods", ["None"], ["with", "TowerContext", "(", "tower_name", "=", "''", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"\"", ",", "auxiliary_name_scope", "=", "False", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "model", "=", "ResNeXtDenoiseAllModel", "(", "args", ")", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.get_scope_var": [[5, 10], ["tensorflow.get_collection", "len"], "function", ["None"], ["from", "tensorpack", ".", "tfutils", ".", "tower", "import", "TowerContext", "\n", "\n", "def", "restore_parameter", "(", "sess", ")", ":", "\n", "    ", "file_path", "=", "\"X101-DenoiseAll.npz\"", "\n", "sessinit", "=", "SmartInit", "(", "file_path", ")", "\n", "sessinit", ".", "init", "(", "sess", ")", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.restore_parameter": [[11, 16], ["interface.get_scope_var", "tensorflow.train.Saver", "tf.train.Saver.restore"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.get_scope_var"], ["\n", "", "class", "container", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.compute_loss_and_error": [[23, 44], ["tensorflow.reduce_mean", "interface.compute_loss_and_error.prediction_incorrect"], "function", ["None"], ["model", ".", "build_graph", "(", "image", ",", "label", ")", "\n", "", "", "return", "model", ".", "logits", "\n", "\n", "", "def", "build_imagenet_model_old", "(", "image", ",", "label", ",", "reuse", "=", "False", ",", "conf", "=", "1", ")", ":", "\n", "    ", "args", "=", "container", "(", ")", "\n", "args", ".", "depth", "=", "101", "\n", "with", "TowerContext", "(", "tower_name", "=", "''", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"\"", ",", "auxiliary_name_scope", "=", "False", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "model", "=", "ResNeXtDenoiseAllModel", "(", "args", ")", "\n", "model", ".", "build_graph", "(", "image", ",", "label", ")", "\n", "", "", "cont", "=", "container", "\n", "cont", ".", "logits", "=", "model", ".", "logits", "\n", "cont", ".", "label", "=", "tf", ".", "argmax", "(", "cont", ".", "logits", ",", "axis", "=", "-", "1", ")", "\n", "cont", ".", "acc_y", "=", "1", "-", "model", ".", "wrong_1", "\n", "cont", ".", "acc_y_5", "=", "1", "-", "model", ".", "wrong_5", "\n", "cont", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "1", "-", "model", ".", "wrong_1", ")", "# wrong_5", "\n", "cont", ".", "rev_xent", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "\n", "1", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax", "(", "model", ".", "logits", ")", "*", "\n", "tf", ".", "one_hot", "(", "label", ",", "depth", "=", "1000", ")", ",", "axis", "=", "-", "1", ")", "\n", ")", ")", "\n", "cont", ".", "poss_loss", "=", "1", "-", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax", "(", "model", ".", "logits", ")", "*", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.interface.build_imagenet_model": [[45, 50], ["slim.arg_scope", "resnet_slim.resnet_v1_50", "resnet_slim.resnet_arg_scope"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_slim.resnet_v1_50", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.resnet_arg_scope"], ["tf", ".", "one_hot", "(", "label", ",", "depth", "=", "1000", ")", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "\n", "label_one_hot", "=", "tf", ".", "one_hot", "(", "label", ",", "depth", "=", "1000", ")", "\n", "wrong_logit", "=", "tf", ".", "reduce_max", "(", "model", ".", "logits", "*", "(", "1", "-", "label_one_hot", ")", "-", "label_one_hot", "*", "1e7", ",", "axis", "=", "-", "1", ")", "\n", "true_logit", "=", "tf", ".", "reduce_sum", "(", "model", ".", "logits", "*", "label_one_hot", ",", "axis", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.subsample": [[59, 75], ["slim.max_pool2d"], "function", ["None"], ["", "def", "subsample", "(", "inputs", ",", "factor", ",", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Subsamples the input along the spatial dimensions.\n\n  Args:\n    inputs: A `Tensor` of size [batch, height_in, width_in, channels].\n    factor: The subsampling factor.\n    scope: Optional variable_scope.\n\n  Returns:\n    output: A `Tensor` of size [batch, height_out, width_out, channels] with the\n      input, either intact (if factor == 1) or subsampled (if factor > 1).\n  \"\"\"", "\n", "if", "factor", "==", "1", ":", "\n", "    ", "return", "inputs", "\n", "", "else", ":", "\n", "    ", "return", "slim", ".", "max_pool2d", "(", "inputs", ",", "[", "1", ",", "1", "]", ",", "stride", "=", "factor", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.conv2d_same": [[77, 123], ["slim.conv2d", "tensorflow.pad", "slim.conv2d"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d", "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.None.decoder.conv2d"], ["", "", "def", "conv2d_same", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", ",", "rate", "=", "1", ",", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Strided 2-D convolution with 'SAME' padding.\n\n  When stride > 1, then we do explicit zero-padding, followed by conv2d with\n  'VALID' padding.\n\n  Note that\n\n     net = conv2d_same(inputs, num_outputs, 3, stride=stride)\n\n  is equivalent to\n\n     net = slim.conv2d(inputs, num_outputs, 3, stride=1, padding='SAME')\n     net = subsample(net, factor=stride)\n\n  whereas\n\n     net = slim.conv2d(inputs, num_outputs, 3, stride=stride, padding='SAME')\n\n  is different when the input's height or width is even, which is why we add the\n  current function. For more details, see ResnetUtilsTest.testConv2DSameEven().\n\n  Args:\n    inputs: A 4-D tensor of size [batch, height_in, width_in, channels].\n    num_outputs: An integer, the number of output filters.\n    kernel_size: An int with the kernel_size of the filters.\n    stride: An integer, the output stride.\n    rate: An integer, rate for atrous convolution.\n    scope: Scope.\n\n  Returns:\n    output: A 4-D tensor of size [batch, height_out, width_out, channels] with\n      the convolution output.\n  \"\"\"", "\n", "if", "stride", "==", "1", ":", "\n", "    ", "return", "slim", ".", "conv2d", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", "=", "1", ",", "rate", "=", "rate", ",", "\n", "padding", "=", "'SAME'", ",", "scope", "=", "scope", ")", "\n", "", "else", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "slim", ".", "conv2d", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "rate", "=", "rate", ",", "padding", "=", "'VALID'", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.stack_blocks_dense": [[125, 220], ["ValueError", "tensorflow.variable_scope", "enumerate", "slim.utils.collect_named_outputs", "resnet_utils.subsample", "dict.get", "dict", "tensorflow.variable_scope", "ValueError", "block.unit_fn", "dict.get", "block.unit_fn", "dict.get", "len", "ValueError", "dict"], "function", ["home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.subsample"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "stack_blocks_dense", "(", "net", ",", "blocks", ",", "output_stride", "=", "None", ",", "\n", "store_non_strided_activations", "=", "False", ",", "\n", "outputs_collections", "=", "None", ")", ":", "\n", "  ", "\"\"\"Stacks ResNet `Blocks` and controls output feature density.\n\n  First, this function creates scopes for the ResNet in the form of\n  'block_name/unit_1', 'block_name/unit_2', etc.\n\n  Second, this function allows the user to explicitly control the ResNet\n  output_stride, which is the ratio of the input to output spatial resolution.\n  This is useful for dense prediction tasks such as semantic segmentation or\n  object detection.\n\n  Most ResNets consist of 4 ResNet blocks and subsample the activations by a\n  factor of 2 when transitioning between consecutive ResNet blocks. This results\n  to a nominal ResNet output_stride equal to 8. If we set the output_stride to\n  half the nominal network stride (e.g., output_stride=4), then we compute\n  responses twice.\n\n  Control of the output feature density is implemented by atrous convolution.\n\n  Args:\n    net: A `Tensor` of size [batch, height, width, channels].\n    blocks: A list of length equal to the number of ResNet `Blocks`. Each\n      element is a ResNet `Block` object describing the units in the `Block`.\n    output_stride: If `None`, then the output will be computed at the nominal\n      network stride. If output_stride is not `None`, it specifies the requested\n      ratio of input to output spatial resolution, which needs to be equal to\n      the product of unit strides from the start up to some level of the ResNet.\n      For example, if the ResNet employs units with strides 1, 2, 1, 3, 4, 1,\n      then valid values for the output_stride are 1, 2, 6, 24 or None (which\n      is equivalent to output_stride=24).\n    store_non_strided_activations: If True, we compute non-strided (undecimated)\n      activations at the last unit of each block and store them in the\n      `outputs_collections` before subsampling them. This gives us access to\n      higher resolution intermediate activations which are useful in some\n      dense prediction problems but increases 4x the computation and memory cost\n      at the last unit of each block.\n    outputs_collections: Collection to add the ResNet block outputs.\n\n  Returns:\n    net: Output tensor with stride equal to the specified output_stride.\n\n  Raises:\n    ValueError: If the target output_stride is not valid.\n  \"\"\"", "\n", "# The current_stride variable keeps track of the effective stride of the", "\n", "# activations. This allows us to invoke atrous convolution whenever applying", "\n", "# the next residual unit would result in the activations having stride larger", "\n", "# than the target output_stride.", "\n", "current_stride", "=", "1", "\n", "\n", "# The atrous convolution rate parameter.", "\n", "rate", "=", "1", "\n", "\n", "for", "block", "in", "blocks", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "block", ".", "scope", ",", "'block'", ",", "[", "net", "]", ")", "as", "sc", ":", "\n", "      ", "block_stride", "=", "1", "\n", "for", "i", ",", "unit", "in", "enumerate", "(", "block", ".", "args", ")", ":", "\n", "        ", "if", "store_non_strided_activations", "and", "i", "==", "len", "(", "block", ".", "args", ")", "-", "1", ":", "\n", "# Move stride from the block's last unit to the end of the block.", "\n", "          ", "block_stride", "=", "unit", ".", "get", "(", "'stride'", ",", "1", ")", "\n", "unit", "=", "dict", "(", "unit", ",", "stride", "=", "1", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'unit_%d'", "%", "(", "i", "+", "1", ")", ",", "values", "=", "[", "net", "]", ")", ":", "\n", "# If we have reached the target output_stride, then we need to employ", "\n", "# atrous convolution with stride=1 and multiply the atrous rate by the", "\n", "# current unit's stride for use in subsequent layers.", "\n", "          ", "if", "output_stride", "is", "not", "None", "and", "current_stride", "==", "output_stride", ":", "\n", "            ", "net", "=", "block", ".", "unit_fn", "(", "net", ",", "rate", "=", "rate", ",", "**", "dict", "(", "unit", ",", "stride", "=", "1", ")", ")", "\n", "rate", "*=", "unit", ".", "get", "(", "'stride'", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "net", "=", "block", ".", "unit_fn", "(", "net", ",", "rate", "=", "1", ",", "**", "unit", ")", "\n", "current_stride", "*=", "unit", ".", "get", "(", "'stride'", ",", "1", ")", "\n", "if", "output_stride", "is", "not", "None", "and", "current_stride", ">", "output_stride", ":", "\n", "              ", "raise", "ValueError", "(", "'The target output_stride cannot be reached.'", ")", "\n", "\n", "# Collect activations at the block's end before performing subsampling.", "\n", "", "", "", "", "net", "=", "slim", ".", "utils", ".", "collect_named_outputs", "(", "outputs_collections", ",", "sc", ".", "name", ",", "net", ")", "\n", "\n", "# Subsampling of the block's output activations.", "\n", "if", "output_stride", "is", "not", "None", "and", "current_stride", "==", "output_stride", ":", "\n", "        ", "rate", "*=", "block_stride", "\n", "", "else", ":", "\n", "        ", "net", "=", "subsample", "(", "net", ",", "block_stride", ")", "\n", "current_stride", "*=", "block_stride", "\n", "if", "output_stride", "is", "not", "None", "and", "current_stride", ">", "output_stride", ":", "\n", "          ", "raise", "ValueError", "(", "'The target output_stride cannot be reached.'", ")", "\n", "\n", "", "", "", "", "if", "output_stride", "is", "not", "None", "and", "current_stride", "!=", "output_stride", ":", "\n", "    ", "raise", "ValueError", "(", "'The target output_stride cannot be reached.'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.qiulingxu_FeatureSpaceAttack.pretrained.resnet_utils.resnet_arg_scope": [[222, 276], ["slim.arg_scope", "slim.arg_scope", "slim.l2_regularizer", "slim.variance_scaling_initializer", "slim.arg_scope"], "function", ["None"], ["", "def", "resnet_arg_scope", "(", "weight_decay", "=", "0.0001", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_batch_norm", "=", "True", ",", "\n", "batch_norm_updates_collections", "=", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", ":", "\n", "  ", "\"\"\"Defines the default ResNet arg scope.\n\n  TODO(gpapan): The batch-normalization related default values above are\n    appropriate for use in conjunction with the reference ResNet models\n    released at https://github.com/KaimingHe/deep-residual-networks. When\n    training ResNets from scratch, they might need to be tuned.\n\n  Args:\n    weight_decay: The weight decay to use for regularizing the model.\n    batch_norm_decay: The moving average decay when estimating layer activation\n      statistics in batch normalization.\n    batch_norm_epsilon: Small constant to prevent division by zero when\n      normalizing activations by their variance in batch normalization.\n    batch_norm_scale: If True, uses an explicit `gamma` multiplier to scale the\n      activations in the batch normalization layer.\n    activation_fn: The activation function which is used in ResNet.\n    use_batch_norm: Whether or not to use batch normalization.\n    batch_norm_updates_collections: Collection for the update ops for\n      batch norm.\n\n  Returns:\n    An `arg_scope` to use for the resnet models.\n  \"\"\"", "\n", "batch_norm_params", "=", "{", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'updates_collections'", ":", "batch_norm_updates_collections", ",", "\n", "'fused'", ":", "None", ",", "# Use fused batch norm if possible.", "\n", "}", "\n", "\n", "with", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", "if", "use_batch_norm", "else", "None", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", ":", "\n", "# The following implies padding='SAME' for pool1, which makes feature", "\n", "# alignment easier for dense prediction tasks. This is also used in", "\n", "# https://github.com/facebook/fb.resnet.torch. However the accompanying", "\n", "# code of 'Deep Residual Learning for Image Recognition' uses", "\n", "# padding='VALID' for pool1. You can switch to that choice by setting", "\n", "# slim.arg_scope([slim.max_pool2d], padding='VALID').", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "max_pool2d", "]", ",", "padding", "=", "'SAME'", ")", "as", "arg_sc", ":", "\n", "        ", "return", "arg_sc", "\n", "", "", "", "", ""]]}