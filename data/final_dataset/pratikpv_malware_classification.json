{"home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_md5": [[11, 17], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["None"], ["def", "get_md5", "(", "fname", ")", ":", "\n", "    ", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "4096", ")", ",", "b\"\"", ")", ":", "\n", "            ", "hash_md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "hash_md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_entropy": [[19, 33], ["array.array", "len", "float", "len", "math.log", "isinstance", "ord"], "function", ["None"], ["", "def", "get_entropy", "(", "data", ")", ":", "\n", "    ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "", "occurences", "=", "array", ".", "array", "(", "'L'", ",", "[", "0", "]", "*", "256", ")", "\n", "for", "x", "in", "data", ":", "\n", "        ", "occurences", "[", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "ord", "(", "x", ")", "]", "+=", "1", "\n", "\n", "", "entropy", "=", "0", "\n", "for", "x", "in", "occurences", ":", "\n", "        ", "if", "x", ":", "\n", "            ", "p_x", "=", "float", "(", "x", ")", "/", "len", "(", "data", ")", "\n", "entropy", "-=", "p_x", "*", "math", ".", "log", "(", "p_x", ",", "2", ")", "\n", "\n", "", "", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_resources": [[35, 55], ["hasattr", "hasattr", "hasattr", "pe.get_data", "extract_binary_file_features.get_entropy", "resources.append"], "function", ["home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_entropy"], ["", "def", "get_resources", "(", "pe", ")", ":", "\n", "    ", "\"\"\"Extract resources :\n    [entropy, size]\"\"\"", "\n", "resources", "=", "[", "]", "\n", "if", "hasattr", "(", "pe", ",", "'DIRECTORY_ENTRY_RESOURCE'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "resource_type", "in", "pe", ".", "DIRECTORY_ENTRY_RESOURCE", ".", "entries", ":", "\n", "                ", "if", "hasattr", "(", "resource_type", ",", "'directory'", ")", ":", "\n", "                    ", "for", "resource_id", "in", "resource_type", ".", "directory", ".", "entries", ":", "\n", "                        ", "if", "hasattr", "(", "resource_id", ",", "'directory'", ")", ":", "\n", "                            ", "for", "resource_lang", "in", "resource_id", ".", "directory", ".", "entries", ":", "\n", "                                ", "data", "=", "pe", ".", "get_data", "(", "resource_lang", ".", "data", ".", "struct", ".", "OffsetToData", ",", "\n", "resource_lang", ".", "data", ".", "struct", ".", "Size", ")", "\n", "size", "=", "resource_lang", ".", "data", ".", "struct", ".", "Size", "\n", "entropy", "=", "get_entropy", "(", "data", ")", "\n", "\n", "resources", ".", "append", "(", "[", "entropy", ",", "size", "]", ")", "\n", "", "", "", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "resources", "\n", "", "", "return", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_version_info": [[57, 77], ["hasattr", "st.entries.items", "var.entry.items", "var.entry.items"], "function", ["None"], ["", "def", "get_version_info", "(", "pe", ")", ":", "\n", "    ", "\"\"\"Return version infos\"\"\"", "\n", "res", "=", "{", "}", "\n", "for", "fileinfo", "in", "pe", ".", "FileInfo", ":", "\n", "        ", "if", "fileinfo", ".", "Key", "==", "'StringFileInfo'", ":", "\n", "            ", "for", "st", "in", "fileinfo", ".", "StringTable", ":", "\n", "                ", "for", "entry", "in", "st", ".", "entries", ".", "items", "(", ")", ":", "\n", "                    ", "res", "[", "entry", "[", "0", "]", "]", "=", "entry", "[", "1", "]", "\n", "", "", "", "if", "fileinfo", ".", "Key", "==", "'VarFileInfo'", ":", "\n", "            ", "for", "var", "in", "fileinfo", ".", "Var", ":", "\n", "                ", "res", "[", "var", ".", "entry", ".", "items", "(", ")", "[", "0", "]", "[", "0", "]", "]", "=", "var", ".", "entry", ".", "items", "(", ")", "[", "0", "]", "[", "1", "]", "\n", "", "", "", "if", "hasattr", "(", "pe", ",", "'VS_FIXEDFILEINFO'", ")", ":", "\n", "        ", "res", "[", "'flags'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "FileFlags", "\n", "res", "[", "'os'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "FileOS", "\n", "res", "[", "'type'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "FileType", "\n", "res", "[", "'file_version'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "FileVersionLS", "\n", "res", "[", "'product_version'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "ProductVersionLS", "\n", "res", "[", "'signature'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "Signature", "\n", "res", "[", "'struct_version'", "]", "=", "pe", ".", "VS_FIXEDFILEINFO", ".", "StrucVersion", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.extract_infos": [[79, 180], ["res.append", "res.append", "pefile.PE", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "list", "res.append", "res.append", "res.append", "list", "res.append", "res.append", "res.append", "list", "res.append", "res.append", "res.append", "extract_binary_file_features.get_resources", "res.append", "os.path.basename", "os.path.basename", "extract_binary_file_features.get_md5", "res.append", "len", "map", "min", "max", "map", "min", "max", "map", "min", "max", "res.append", "sum", "res.append", "res.append", "res.append", "len", "len", "list", "res.append", "res.append", "res.append", "list", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "res.append", "extract_binary_file_features.get_version_info", "res.append", "res.append", "sum", "float", "sum", "float", "sum", "float", "len", "len", "len", "res.append", "res.append", "res.append", "len", "res.append", "map", "min", "max", "map", "min", "max", "res.append", "len", "res.append", "x.get_entropy", "len", "len", "len", "list", "sum", "float", "sum", "float", "get_version_info.keys", "filter", "len", "len"], "function", ["home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_resources", "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_md5", "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_version_info", "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.get_entropy"], ["", "def", "extract_infos", "(", "fpath", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "res", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "fpath", ")", ")", "\n", "res", ".", "append", "(", "get_md5", "(", "fpath", ")", ")", "\n", "pe", "=", "pefile", ".", "PE", "(", "fpath", ")", "\n", "res", ".", "append", "(", "pe", ".", "FILE_HEADER", ".", "Machine", ")", "\n", "res", ".", "append", "(", "pe", ".", "FILE_HEADER", ".", "SizeOfOptionalHeader", ")", "\n", "res", ".", "append", "(", "pe", ".", "FILE_HEADER", ".", "Characteristics", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MajorLinkerVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MinorLinkerVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfCode", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfInitializedData", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfUninitializedData", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "AddressOfEntryPoint", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "BaseOfCode", ")", "\n", "try", ":", "\n", "        ", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "BaseOfData", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "res", ".", "append", "(", "0", ")", "\n", "", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "ImageBase", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SectionAlignment", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "FileAlignment", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MajorOperatingSystemVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MinorOperatingSystemVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MajorImageVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MinorImageVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MajorSubsystemVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "MinorSubsystemVersion", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfImage", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfHeaders", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "CheckSum", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "Subsystem", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "DllCharacteristics", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfStackReserve", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfStackCommit", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfHeapReserve", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "SizeOfHeapCommit", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "LoaderFlags", ")", "\n", "res", ".", "append", "(", "pe", ".", "OPTIONAL_HEADER", ".", "NumberOfRvaAndSizes", ")", "\n", "res", ".", "append", "(", "len", "(", "pe", ".", "sections", ")", ")", "\n", "entropy", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "get_entropy", "(", ")", ",", "pe", ".", "sections", ")", ")", "\n", "res", ".", "append", "(", "sum", "(", "entropy", ")", "/", "float", "(", "len", "(", "entropy", ")", ")", ")", "\n", "res", ".", "append", "(", "min", "(", "entropy", ")", ")", "\n", "res", ".", "append", "(", "max", "(", "entropy", ")", ")", "\n", "raw_sizes", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "SizeOfRawData", ",", "pe", ".", "sections", ")", ")", "\n", "res", ".", "append", "(", "sum", "(", "raw_sizes", ")", "/", "float", "(", "len", "(", "raw_sizes", ")", ")", ")", "\n", "res", ".", "append", "(", "min", "(", "raw_sizes", ")", ")", "\n", "res", ".", "append", "(", "max", "(", "raw_sizes", ")", ")", "\n", "virtual_sizes", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "Misc_VirtualSize", ",", "pe", ".", "sections", ")", ")", "\n", "res", ".", "append", "(", "sum", "(", "virtual_sizes", ")", "/", "float", "(", "len", "(", "virtual_sizes", ")", ")", ")", "\n", "res", ".", "append", "(", "min", "(", "virtual_sizes", ")", ")", "\n", "res", ".", "append", "(", "max", "(", "virtual_sizes", ")", ")", "\n", "# Imports", "\n", "try", ":", "\n", "        ", "res", ".", "append", "(", "len", "(", "pe", ".", "DIRECTORY_ENTRY_IMPORT", ")", ")", "\n", "imports", "=", "sum", "(", "[", "x", ".", "imports", "for", "x", "in", "pe", ".", "DIRECTORY_ENTRY_IMPORT", "]", ",", "[", "]", ")", "\n", "res", ".", "append", "(", "len", "(", "imports", ")", ")", "\n", "res", ".", "append", "(", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "name", "is", "None", ",", "imports", ")", ")", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "# Exports", "\n", "", "try", ":", "\n", "        ", "res", ".", "append", "(", "len", "(", "pe", ".", "DIRECTORY_ENTRY_EXPORT", ".", "symbols", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "# No export", "\n", "        ", "res", ".", "append", "(", "0", ")", "\n", "# Resources", "\n", "", "resources", "=", "get_resources", "(", "pe", ")", "\n", "res", ".", "append", "(", "len", "(", "resources", ")", ")", "\n", "if", "len", "(", "resources", ")", ">", "0", ":", "\n", "        ", "entropy", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "resources", ")", ")", "\n", "res", ".", "append", "(", "sum", "(", "entropy", ")", "/", "float", "(", "len", "(", "entropy", ")", ")", ")", "\n", "res", ".", "append", "(", "min", "(", "entropy", ")", ")", "\n", "res", ".", "append", "(", "max", "(", "entropy", ")", ")", "\n", "sizes", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "resources", ")", ")", "\n", "res", ".", "append", "(", "sum", "(", "sizes", ")", "/", "float", "(", "len", "(", "sizes", ")", ")", ")", "\n", "res", ".", "append", "(", "min", "(", "sizes", ")", ")", "\n", "res", ".", "append", "(", "max", "(", "sizes", ")", ")", "\n", "", "else", ":", "\n", "        ", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "res", ".", "append", "(", "0", ")", "\n", "\n", "# Load configuration size", "\n", "", "try", ":", "\n", "        ", "res", ".", "append", "(", "pe", ".", "DIRECTORY_ENTRY_LOAD_CONFIG", ".", "struct", ".", "Size", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "res", ".", "append", "(", "0", ")", "\n", "\n", "# Version configuration size", "\n", "", "try", ":", "\n", "        ", "version_infos", "=", "get_version_info", "(", "pe", ")", "\n", "res", ".", "append", "(", "len", "(", "version_infos", ".", "keys", "(", ")", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "res", ".", "append", "(", "0", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.collect_features": [[182, 200], ["os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.stat", "os.stat", "extract_binary_file_features.extract_infos", "extract_infos.append", "extract_infos.append", "ff.write", "csv_delimiter.join", "map", "str"], "function", ["home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.extract_infos"], ["", "def", "collect_features", "(", "path", ",", "class_id", ",", "class_name", ",", "ff", ",", "max_files", ",", "max_size", ",", "csv_delimiter", "=", "\",\"", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "ffile", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "full_name", "=", "os", ".", "path", ".", "join", "(", "path", ",", "ffile", ")", "\n", "# print(full_name)", "\n", "statinfo", "=", "os", ".", "stat", "(", "full_name", ")", "\n", "if", "statinfo", ".", "st_size", "<", "max_size", ":", "\n", "            ", "try", ":", "\n", "                ", "res", "=", "extract_infos", "(", "full_name", ")", "\n", "res", ".", "append", "(", "class_id", ")", "\n", "res", ".", "append", "(", "class_name", ")", "\n", "ff", ".", "write", "(", "csv_delimiter", ".", "join", "(", "map", "(", "lambda", "x", ":", "str", "(", "x", ")", ",", "res", ")", ")", "+", "\"\\n\"", ")", "\n", "count", "+=", "1", "\n", "if", "count", ">=", "max_files", ":", "\n", "                    ", "break", "\n", "", "", "except", "pefile", ".", "PEFormatError", ":", "\n", "#                 print('\\t -> Bad PE format')", "\n", "                  ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.extract_features": [[207, 280], ["open", "open.write", "os.listdir", "os.listdir", "len", "range", "open.close", "extract_binary_file_features.collect_features", "csv_delimiter.join"], "function", ["home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.collect_features"], ["def", "extract_features", "(", "output_csv", ",", "path_to_samples", ",", "max_files", "=", "15000", ",", "max_size", "=", "5242880", ")", ":", "\n", "    ", "columns", "=", "[", "\n", "\"Name\"", ",", "\n", "\"md5\"", ",", "\n", "\"Machine\"", ",", "\n", "\"SizeOfOptionalHeader\"", ",", "\n", "\"Characteristics\"", ",", "\n", "\"MajorLinkerVersion\"", ",", "\n", "\"MinorLinkerVersion\"", ",", "\n", "\"SizeOfCode\"", ",", "\n", "\"SizeOfInitializedData\"", ",", "\n", "\"SizeOfUninitializedData\"", ",", "\n", "\"AddressOfEntryPoint\"", ",", "\n", "\"BaseOfCode\"", ",", "\n", "\"BaseOfData\"", ",", "\n", "\"ImageBase\"", ",", "\n", "\"SectionAlignment\"", ",", "\n", "\"FileAlignment\"", ",", "\n", "\"MajorOperatingSystemVersion\"", ",", "\n", "\"MinorOperatingSystemVersion\"", ",", "\n", "\"MajorImageVersion\"", ",", "\n", "\"MinorImageVersion\"", ",", "\n", "\"MajorSubsystemVersion\"", ",", "\n", "\"MinorSubsystemVersion\"", ",", "\n", "\"SizeOfImage\"", ",", "\n", "\"SizeOfHeaders\"", ",", "\n", "\"CheckSum\"", ",", "\n", "\"Subsystem\"", ",", "\n", "\"DllCharacteristics\"", ",", "\n", "\"SizeOfStackReserve\"", ",", "\n", "\"SizeOfStackCommit\"", ",", "\n", "\"SizeOfHeapReserve\"", ",", "\n", "\"SizeOfHeapCommit\"", ",", "\n", "\"LoaderFlags\"", ",", "\n", "\"NumberOfRvaAndSizes\"", ",", "\n", "\"SectionsNb\"", ",", "\n", "\"SectionsMeanEntropy\"", ",", "\n", "\"SectionsMinEntropy\"", ",", "\n", "\"SectionsMaxEntropy\"", ",", "\n", "\"SectionsMeanRawsize\"", ",", "\n", "\"SectionsMinRawsize\"", ",", "\n", "\"SectionMaxRawsize\"", ",", "\n", "\"SectionsMeanVirtualsize\"", ",", "\n", "\"SectionsMinVirtualsize\"", ",", "\n", "\"SectionMaxVirtualsize\"", ",", "\n", "\"ImportsNbDLL\"", ",", "\n", "\"ImportsNb\"", ",", "\n", "\"ImportsNbOrdinal\"", ",", "\n", "\"ExportNb\"", ",", "\n", "\"ResourcesNb\"", ",", "\n", "\"ResourcesMeanEntropy\"", ",", "\n", "\"ResourcesMinEntropy\"", ",", "\n", "\"ResourcesMaxEntropy\"", ",", "\n", "\"ResourcesMeanSize\"", ",", "\n", "\"ResourcesMinSize\"", ",", "\n", "\"ResourcesMaxSize\"", ",", "\n", "\"LoadConfigurationSize\"", ",", "\n", "\"VersionInformationSize\"", ",", "\n", "\"Malware_ClassID\"", ",", "\n", "\"Malware_ClassName\"", "\n", "]", "\n", "\n", "csv_delimiter", "=", "','", "\n", "ff", "=", "open", "(", "output_csv", ",", "\"w\"", ")", "\n", "ff", ".", "write", "(", "csv_delimiter", ".", "join", "(", "columns", ")", "+", "\"\\n\"", ")", "\n", "\n", "class_names", "=", "os", ".", "listdir", "(", "path_to_samples", ")", "\n", "class_count", "=", "len", "(", "class_names", ")", "\n", "\n", "for", "class_id", "in", "range", "(", "class_count", ")", ":", "\n", "        ", "sub_dir", "=", "path_to_samples", "+", "class_names", "[", "class_id", "]", "+", "'/'", "\n", "collect_features", "(", "sub_dir", ",", "class_id", ",", "class_names", "[", "class_id", "]", ",", "ff", ",", "max_files", ",", "max_size", ")", "\n", "", "ff", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.extract_binary_file_features.count_malware_by_classes": [[282, 296], ["open", "open.write", "os.listdir", "os.listdir", "len", "range", "open.close", "len", "open.write", "csv_delimiter.join", "os.listdir", "os.listdir", "os.path.isfile", "os.path.isfile", "str"], "function", ["None"], ["", "def", "count_malware_by_classes", "(", "output_csv", ",", "path_to_samples", ")", ":", "\n", "    ", "csv_delimiter", "=", "','", "\n", "ff", "=", "open", "(", "output_csv", ",", "\"w\"", ")", "\n", "columns", "=", "[", "'class_name'", ",", "'total_samples'", "]", "\n", "ff", ".", "write", "(", "csv_delimiter", ".", "join", "(", "columns", ")", "+", "\"\\n\"", ")", "\n", "\n", "class_names", "=", "os", ".", "listdir", "(", "path_to_samples", ")", "\n", "class_count", "=", "len", "(", "class_names", ")", "\n", "\n", "for", "class_id", "in", "range", "(", "class_count", ")", ":", "\n", "        ", "sub_dir", "=", "path_to_samples", "+", "'/'", "+", "class_names", "[", "class_id", "]", "\n", "total_samples", "=", "len", "(", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "sub_dir", ")", "if", "os", ".", "path", ".", "isfile", "(", "sub_dir", "+", "'/'", "+", "name", ")", "]", ")", "\n", "ff", ".", "write", "(", "class_names", "[", "class_id", "]", "+", "csv_delimiter", "+", "str", "(", "total_samples", ")", "+", "\"\\n\"", ")", "\n", "", "ff", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.train_valid_split.split_data": [[5, 92], ["os.chdir", "os.chdir", "range", "os.path.isdir", "print", "exit", "len", "print", "len", "print", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "set", "list", "range", "range", "print", "os.scandir", "f.is_dir", "len", "len", "len", "os.chdir", "os.listdir", "random.sample", "range", "len", "len", "os.getcwd", "os.listdir", "os.path.isfile", "list", "int", "enumerate", "set", "set", "len", "len", "len", "shutil.copyfile", "len", "shutil.copyfile", "range", "os.path.isdir", "os.mkdir", "len", "len", "len", "len"], "function", ["None"], ["def", "split_data", "(", "input_dir", ",", "output_train", ",", "output_valid", ",", "training_set_ratio", ",", "simulate", ",", "combine_families", ")", ":", "\n", "\n", "    ", "validation_set_ratio", "=", "1", "-", "training_set_ratio", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "input_dir", ")", ":", "\n", "        ", "print", "(", "input_dir", ",", "'Input directory not found. Exiting.'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "os", ".", "chdir", "(", "input_dir", ")", "# the parent folder with sub-folders", "\n", "\n", "iterations", "=", "None", "\n", "list_classes", "=", "[", "f", ".", "name", "for", "f", "in", "os", ".", "scandir", "(", "os", ".", "getcwd", "(", ")", ")", "if", "f", ".", "is_dir", "(", ")", "]", "\n", "list_files", "=", "None", "\n", "if", "(", "len", "(", "list_classes", ")", "==", "0", ")", ":", "\n", "        ", "list_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "'.'", ")", "if", "os", ".", "path", ".", "isfile", "(", "f", ")", "]", "\n", "iterations", "=", "1", "\n", "print", "(", "'No. of files found: '", ",", "len", "(", "list_files", ")", ")", "\n", "", "else", ":", "\n", "        ", "iterations", "=", "len", "(", "list_classes", ")", "\n", "print", "(", "'No. classes found: '", ",", "len", "(", "list_classes", ")", ")", "\n", "\n", "", "os", ".", "chdir", "(", "'..'", ")", "\n", "#     dirs_create = [output_train, output_valid]", "\n", "#     for d in range(len(dirs_create)):", "\n", "#         if not os.path.isdir(dirs_create[d]):", "\n", "#             os.mkdir(dirs_create[d])", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_train", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_train", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_valid", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_valid", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "org_samples", "=", "None", "\n", "if", "(", "len", "(", "list_classes", ")", "==", "0", ")", ":", "\n", "            ", "org_samples", "=", "list_files", "\n", "", "else", ":", "\n", "            ", "cur_dir", "=", "input_dir", "+", "list_classes", "[", "i", "]", "\n", "os", ".", "chdir", "(", "cur_dir", ")", "\n", "org_samples", "=", "os", ".", "listdir", "(", "cur_dir", ")", "\n", "", "inds", "=", "set", "(", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "org_samples", ")", ")", ")", ",", "int", "(", "validation_set_ratio", "*", "len", "(", "org_samples", ")", ")", ")", ")", "\n", "train_samples", "=", "[", "n", "for", "i", ",", "n", "in", "enumerate", "(", "org_samples", ")", "if", "i", "not", "in", "inds", "]", "\n", "validation_samples", "=", "list", "(", "set", "(", "org_samples", ")", "-", "set", "(", "train_samples", ")", ")", "\n", "#         if(len(list_classes) != 0):", "\n", "#             print('class = %s org = %d, train = %d , valid = %d \\n' %", "\n", "#               (list_classes[i], len(org_samples), len(train_samples), len(validation_samples)))", "\n", "\n", "if", "(", "len", "(", "list_classes", ")", "!=", "0", "and", "not", "combine_families", ")", ":", "\n", "            ", "dirs_create", "=", "[", "output_train", "+", "list_classes", "[", "i", "]", ",", "output_valid", "+", "'/'", "+", "list_classes", "[", "i", "]", "]", "\n", "for", "d", "in", "range", "(", "len", "(", "dirs_create", ")", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirs_create", "[", "d", "]", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "dirs_create", "[", "d", "]", ")", "\n", "\n", "", "", "", "for", "t", "in", "range", "(", "len", "(", "train_samples", ")", ")", ":", "\n", "            ", "src", "=", "None", "\n", "dst", "=", "None", "\n", "if", "(", "len", "(", "list_classes", ")", "==", "0", ")", ":", "\n", "                ", "src", "=", "input_dir", "+", "train_samples", "[", "t", "]", "\n", "dst", "=", "output_train", "+", "train_samples", "[", "t", "]", "\n", "", "elif", "(", "len", "(", "list_classes", ")", "!=", "0", "and", "combine_families", ")", ":", "\n", "                ", "src", "=", "input_dir", "+", "list_classes", "[", "i", "]", "+", "'/'", "+", "train_samples", "[", "t", "]", "\n", "dst", "=", "output_train", "+", "train_samples", "[", "t", "]", "\n", "", "else", ":", "\n", "                ", "src", "=", "input_dir", "+", "list_classes", "[", "i", "]", "+", "'/'", "+", "train_samples", "[", "t", "]", "\n", "dst", "=", "output_train", "+", "list_classes", "[", "i", "]", "+", "'/'", "+", "train_samples", "[", "t", "]", "\n", "# print('copying ', src, 'to', dst)", "\n", "", "if", "not", "simulate", ":", "\n", "                ", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n", "", "", "for", "t", "in", "range", "(", "len", "(", "validation_samples", ")", ")", ":", "\n", "            ", "src", "=", "None", "\n", "dst", "=", "None", "\n", "if", "(", "len", "(", "list_classes", ")", "==", "0", ")", ":", "\n", "                ", "src", "=", "input_dir", "+", "validation_samples", "[", "t", "]", "\n", "dst", "=", "output_valid", "+", "validation_samples", "[", "t", "]", "\n", "", "elif", "(", "len", "(", "list_classes", ")", "!=", "0", "and", "combine_families", ")", ":", "\n", "                ", "src", "=", "input_dir", "+", "list_classes", "[", "i", "]", "+", "'/'", "+", "validation_samples", "[", "t", "]", "\n", "dst", "=", "output_valid", "+", "validation_samples", "[", "t", "]", "\n", "", "else", ":", "\n", "                ", "src", "=", "input_dir", "+", "list_classes", "[", "i", "]", "+", "'/'", "+", "validation_samples", "[", "t", "]", "\n", "dst", "=", "output_valid", "+", "list_classes", "[", "i", "]", "+", "'/'", "+", "validation_samples", "[", "t", "]", "\n", "# print('copying ', src, 'to', dst)", "\n", "", "if", "not", "simulate", ":", "\n", "                ", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n", "", "", "print", "(", "\"Done splitting.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.utils.plot_confusion_matrix": [[9, 42], ["matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format", "cm.sum"], "function", ["None"], ["def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "#print(\"Normalized confusion matrix\")", "\n", "#else:", "\n", "#print('Confusion matrix, without normalization')", "\n", "\n", "#print(cm)", "\n", "\n", "", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "90", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.utils.plot_confusion_matrix_size": [[44, 77], ["matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format", "cm.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix_size", "(", "cm", ",", "classes", ",", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "#print(\"Normalized confusion matrix\")", "\n", "#else:", "\n", "#print('Confusion matrix, without normalization')", "\n", "\n", "#print(cm)", "\n", "\n", "\n", "", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "90", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.bin_to_img.is_exe": [[10, 17], ["print", "os.path.splitext", "os.path.basename"], "function", ["None"], ["def", "is_exe", "(", "input_file", ")", ":", "\n", "    ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "input_file", ")", ")", "[", "1", "]", "\n", "print", "(", "'ext = '", ",", "ext", ")", "\n", "result", "=", "False", "\n", "if", "'.exe'", "==", "ext", ":", "\n", "        ", "result", "=", "True", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.bin_to_img.generate_and_save_image": [[18, 38], ["os.path.join", "print", "bin_to_img.is_exe", "open", "os.path.getsize", "array.array", "array.array.fromfile", "open.close", "numpy.reshape", "numpy.uint8", "scipy.misc.imsave", "print", "os.path.splitext", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.pratikpv_malware_classification.None.bin_to_img.is_exe"], ["", "def", "generate_and_save_image", "(", "input_dir", ",", "output_dir", ",", "filename", ")", ":", "\n", "    ", "out_file", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "+", "'.png'", "\n", "out_file_full", "=", "output_dir", "+", "out_file", "\n", "input_file_path", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "filename", ")", "\n", "print", "(", "\"out_file_full: \"", ",", "out_file_full", ")", "\n", "if", "is_exe", "(", "filename", ")", ":", "\n", "        ", "f", "=", "open", "(", "input_file_path", ",", "'rb'", ")", "\n", "ln", "=", "os", ".", "path", ".", "getsize", "(", "input_file_path", ")", "# length of file in bytes", "\n", "width", "=", "256", "\n", "rem", "=", "ln", "%", "width", "\n", "\n", "a", "=", "array", ".", "array", "(", "\"B\"", ")", "# uint8 array  ", "\n", "a", ".", "fromfile", "(", "f", ",", "ln", "-", "rem", ")", "\n", "f", ".", "close", "(", ")", "\n", "g", "=", "numpy", ".", "reshape", "(", "a", ",", "(", "len", "(", "a", ")", "//", "width", ",", "width", ")", ")", "\n", "g", "=", "numpy", ".", "uint8", "(", "g", ")", "\n", "#print(\"g: \", g)", "\n", "scipy", ".", "misc", ".", "imsave", "(", "out_file_full", ",", "g", ")", "# save the image", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"not exe\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pratikpv_malware_classification.None.bin_to_img.convert_bin_to_img": [[39, 59], ["os.listdir", "print", "os.path.isdir", "print", "exit", "os.path.isdir", "os.mkdir", "print", "bin_to_img.generate_and_save_image", "print", "print", "exit", "print"], "function", ["home.repos.pwc.inspect_result.pratikpv_malware_classification.None.bin_to_img.generate_and_save_image"], ["", "", "def", "convert_bin_to_img", "(", "input_dir", ",", "output_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "input_dir", ")", ":", "\n", "        ", "print", "(", "input_dir", ",", "'Input directory not found. Exiting.'", ")", "\n", "exit", "(", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "count", "=", "0", "\n", "files", "=", "os", ".", "listdir", "(", "input_dir", ")", "\n", "print", "(", "files", ")", "\n", "for", "filename", "in", "files", ":", "\n", "        ", "print", "(", "\"filename: \"", ",", "filename", ")", "\n", "try", ":", "\n", "            ", "generate_and_save_image", "(", "input_dir", ",", "output_dir", ",", "filename", ")", "\n", "print", "(", "filename", ")", "\n", "count", "+=", "1", "\n", "print", "(", "count", ")", "\n", "if", "number_of_samples", "==", "count", ":", "\n", "                ", "exit", "(", "0", ")", "\n", "", "", "except", ":", "\n", "             ", "print", "(", "'Ignoring '", ",", "filename", ")", "\n", "", "", "", ""]]}