{"home.repos.pwc.inspect_result.bloodwass_mixout.None.example.FullyConnected.__init__": [[7, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FullyConnected", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "784", ",", "300", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "300", ",", "100", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "100", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.None.example.FullyConnected.forward": [[17, 21], ["example.FullyConnected.drop1", "example.FullyConnected.drop2", "example.FullyConnected.linear3", "example.FullyConnected.relu1", "example.FullyConnected.relu2", "example.FullyConnected.linear1", "example.FullyConnected.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "self", ".", "drop1", "(", "self", ".", "relu1", "(", "self", ".", "linear1", "(", "input", ")", ")", ")", "\n", "input", "=", "self", ".", "drop2", "(", "self", ".", "relu2", "(", "self", ".", "linear2", "(", "input", ")", ")", ")", "\n", "return", "self", ".", "linear3", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.None.example.main": [[22, 68], ["example.FullyConnected", "print", "print", "nn.DataParallel.load_state_dict", "nn.DataParallel.named_modules", "print", "print", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "nn.DataParallel.to", "nn.DataParallel.train", "torch.optim.Adam", "torch.optim.Adam", "range", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.DataParallel", "nn.DataParallel.parameters", "torch.optim.Adam.zero_grad", "torch.randn().to", "torch.randn().to", "torch.ones().to", "torch.ones().to", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy.backward", "torch.optim.Adam.step", "print", "isinstance", "setattr", "isinstance", "module.state_dict", "mixout.MixLinear", "mixout.MixLinear.load_state_dict", "setattr", "torch.cuda.is_available", "torch.cuda.is_available", "nn.DataParallel.", "torch.nn.functional.cross_entropy.item", "torch.Dropout", "torch.randn", "torch.randn", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixout.Mixout.backward"], ["", "", "def", "main", "(", ")", ":", "\n", "# Prepare the model configuration from pretraining. In this example, ", "\n", "# I just use all one parameters as the pretraiend model configuration.", "\n", "    ", "model_config", "=", "{", "\n", "'linear1.weight'", ":", "torch", ".", "ones", "(", "300", ",", "784", ")", ",", "'linear1.bias'", ":", "torch", ".", "zeros", "(", "300", ")", ",", "\n", "'linear2.weight'", ":", "torch", ".", "ones", "(", "100", ",", "300", ")", ",", "'linear2.bias'", ":", "torch", ".", "zeros", "(", "100", ")", ",", "\n", "'linear3.weight'", ":", "torch", ".", "ones", "(", "10", ",", "100", ")", ",", "'linear3.bias'", ":", "torch", ".", "zeros", "(", "10", ")", "\n", "}", "\n", "# Set up a model for finetuning.", "\n", "model", "=", "FullyConnected", "(", ")", "\n", "print", "(", "\"Before applying mixout:\"", ")", "\n", "print", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "model_config", ")", "\n", "\n", "# From now on, we are going to replace dropout with mixout.", "\n", "# Since dropout drops all parameters outgoing from the dropped neuron,", "\n", "# mixout mixes the parameters of the nn.Linear right after the nn.Dropout.", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "name", "in", "[", "'drop1'", ",", "'drop2'", "]", "and", "isinstance", "(", "module", ",", "nn", ".", "Dropout", ")", ":", "\n", "            ", "setattr", "(", "model", ",", "name", ",", "nn", ".", "Dropout", "(", "0", ")", ")", "\n", "", "if", "name", "in", "[", "'linear2'", ",", "'linear3'", "]", "and", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "target_state_dict", "=", "module", ".", "state_dict", "(", ")", "\n", "bias", "=", "True", "if", "module", ".", "bias", "is", "not", "None", "else", "False", "\n", "new_module", "=", "MixLinear", "(", "module", ".", "in_features", ",", "module", ".", "out_features", ",", "\n", "bias", ",", "target_state_dict", "[", "'weight'", "]", ",", "0.9", ")", "\n", "new_module", ".", "load_state_dict", "(", "target_state_dict", ")", "\n", "setattr", "(", "model", ",", "name", ",", "new_module", ")", "\n", "", "", "print", "(", "\"After applying mixout\"", ")", "\n", "print", "(", "model", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "model", ".", "to", "(", "device", "=", "device", ")", "\n", "if", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "0.001", ")", "\n", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "16", ",", "784", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "ones", "(", "16", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "model", "(", "x", ")", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "print", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixout.Mixout._make_noise": [[22, 25], ["input.new().resize_as_", "input.new"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_make_noise", "(", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "input", ".", "new", "(", ")", ".", "resize_as_", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixout.Mixout.forward": [[26, 72], ["cls._make_noise.to", "cls._make_noise", "ctx.noise.expand_as", "ValueError", "ValueError", "cls._make_noise", "cls._make_noise.fill_", "ctx.mark_dirty", "input.clone", "len", "ctx.noise.bernoulli_", "ctx.noise[].bernoulli_", "ctx.noise[].repeat", "cls._make_noise.clone", "input.size", "cls._make_noise.size", "ctx.noise.size", "input.size", "input.size", "cls._make_noise.size", "len", "input.size"], "methods", ["home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixout.Mixout._make_noise", "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixout.Mixout._make_noise"], ["", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "\n", "ctx", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "target", ":", "Optional", "[", "\"OrderedDict[str, torch.Tensor]\"", "]", "=", "None", ",", "\n", "p", ":", "float", "=", "0.0", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", "inplace", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "p", "<", "0", "or", "p", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f\"A mix probability of mixout has to be between 0 and 1,  but got {p}\"", ")", "\n", "\n", "", "if", "target", "is", "not", "None", "and", "input", ".", "size", "(", ")", "!=", "target", ".", "size", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"A target tensor size must match with a input tensor size {input.size()}, but got {target.size()}\"", ")", "\n", "\n", "", "ctx", ".", "p", "=", "p", "\n", "ctx", ".", "training", "=", "training", "\n", "\n", "if", "target", "is", "None", ":", "\n", "            ", "target", "=", "cls", ".", "_make_noise", "(", "input", ")", "\n", "target", ".", "fill_", "(", "0", ")", "\n", "", "target", "=", "target", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "if", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "if", "ctx", ".", "p", "==", "0", "or", "not", "ctx", ".", "training", ":", "\n", "            ", "return", "output", "\n", "\n", "", "ctx", ".", "noise", "=", "cls", ".", "_make_noise", "(", "input", ")", "\n", "if", "len", "(", "ctx", ".", "noise", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "            ", "ctx", ".", "noise", ".", "bernoulli_", "(", "1", "-", "ctx", ".", "p", ")", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "noise", "[", "0", "]", ".", "bernoulli_", "(", "1", "-", "ctx", ".", "p", ")", "\n", "ctx", ".", "noise", "=", "ctx", ".", "noise", "[", "0", "]", ".", "repeat", "(", "input", ".", "size", "(", ")", "[", "0", "]", ",", "*", "(", "[", "1", "]", "*", "(", "len", "(", "input", ".", "size", "(", ")", ")", "-", "1", ")", ")", ")", "\n", "", "ctx", ".", "noise", ".", "expand_as", "(", "input", ")", "\n", "\n", "if", "ctx", ".", "p", "==", "1", ":", "\n", "            ", "output", "=", "target", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "(", "1", "-", "ctx", ".", "noise", ")", "*", "target", "+", "ctx", ".", "noise", "*", "output", "-", "ctx", ".", "p", "*", "target", ")", "/", "(", "1", "-", "ctx", ".", "p", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixout.Mixout.backward": [[74, 80], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ":", "torch", ".", "Tensor", ")", "->", "Optional", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "ctx", ".", "p", ">", "0", "and", "ctx", ".", "training", ":", "\n", "            ", "return", "grad_output", "*", "ctx", ".", "noise", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "grad_output", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.__init__": [[25, 47], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "mixlinear.MixLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "mixlinear.MixLinear.register_parameter", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.__init__", "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "in_features", ":", "int", ",", "\n", "out_features", ":", "int", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "target", ":", "Optional", "[", "\"OrderedDict[str, torch.Tensor]\"", "]", "=", "None", ",", "\n", "p", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "MixLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "p", "=", "p", "\n", "\n", "if", "self", ".", "p", "<", "0", "or", "self", ".", "p", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f\"A mix probability of mixout has to be between 0 and 1,  but got {self.p}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.reset_parameters": [[48, 54], ["torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.forward": [[55, 58], ["torch.linear", "torch.linear", "torch.linear", "functional.mixout"], "methods", ["home.repos.pwc.inspect_result.bloodwass_mixout.functional.__init__.mixout"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "F", ".", "linear", "(", "input", ",", "mixout", "(", "self", ".", "weight", ",", "self", ".", "target", ",", "\n", "self", ".", "p", ",", "self", ".", "training", ")", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bloodwass_mixout.mixout.mixlinear.MixLinear.extra_repr": [[59, 63], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "type_", "=", "'drop'", "if", "self", ".", "target", "is", "None", "else", "'mix'", "\n", "type_", "+=", "\"out\"", "\n", "return", "f'{type_}={self.p}, in_features={self.in_features}, out_features={self.out_features}, bias={self.bias is not None}'", "", "", "", ""]], "home.repos.pwc.inspect_result.bloodwass_mixout.functional.__init__.mixout": [[7, 14], ["mixout.Mixout.apply"], "function", ["None"], []]}