{"home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.main.main": [[10, 151], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "os.getcwd", "traindatainit", "DataLoader", "MFNet", "model_sal.cuda.cuda", "print", "range", "MySalInferData", "os.chdir", "model_sal.cuda.train", "DataLoader", "torch.optim.Adam", "TrainSal", "TrainSal.train", "MySalTrainData", "model_sal.cuda.parameters", "DataLoader", "torch.cuda.empty_cache", "model_sal.cuda.load_state_dict", "model_sal.cuda.eval", "print", "len", "int", "time.time", "print", "time.time", "print", "torch.cuda.empty_cache", "print", "time.time", "run_slic_with_crf", "print", "time.time", "print", "MFNet", "model_sal.cuda.cuda", "MySalValData", "torch.load", "torch.no_grad", "enumerate", "int", "str", "os.path.join", "model_sal.cuda.forward", "BinaryPamr", "sal_pamr.squeeze().cpu().detach.squeeze().cpu().detach", "sal.squeeze().cpu().detach.squeeze().cpu().detach", "range", "int", "data.cuda", "data.cuda", "sal.squeeze().cpu().detach.detach", "imsave", "imsave", "print", "str", "str", "sal_pamr.squeeze().cpu().detach.squeeze().cpu", "sal.squeeze().cpu().detach.squeeze().cpu", "os.path.join", "os.path.join", "int", "int", "[].item", "[].item", "str", "sal_pamr.squeeze().cpu().detach.squeeze", "sal.squeeze().cpu().detach.squeeze", "str", "str", "round", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.traindatainit", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.train", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.train", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.slic.run_slic_with_crf", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.forward", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.BinaryPamr", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.imsave.imsave", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.imsave.imsave"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "os", "\n", "import", "time", "\n", "import", "torch", "\n", "import", "argparse", "\n", "\n", "from", "trainsal", "import", "TrainSal", "\n", "# from utils.crf import crf", "\n", "from", "utils", ".", "imsave", "import", "imsave", "\n", "from", "utils", ".", "pamr", "import", "BinaryPamr", "\n", "\n", "from", "utils", ".", "datainit", "import", "traindatainit", "\n", "from", "model", ".", "MFNet_densenet", "import", "MFNet", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "dataset_loader", "import", "MySalTrainData", ",", "MySalInferData", ",", "MySalValData", "\n", "\n", "# -------------------------------------------------- options --------------------------------------------------- #", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--param'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "choices", "=", "[", "'train'", ",", "'infer'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'the CPU workers number'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'resized size of images'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "help", "=", "'wight_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_root'", ",", "type", "=", "str", ",", "default", "=", "'snapshot'", ",", "help", "=", "'path to save ckpt'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sal_stage'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'the iterations of the self-training scheme'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "3e-6", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'the max epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--k'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'the extra epoch of train stage n'", ")", "\n", "parser", ".", "add_argument", "(", "'--val'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether validation or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'data'", ",", "help", "=", "'path to infer and train data'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "ori_root", "=", "os", ".", "getcwd", "(", ")", "\n", "traindatainit", "(", "args", ".", "ckpt_root", ",", "args", ".", "data_root", ",", "args", ".", "sal_stage", ")", "\n", "\n", "# ------------------------------------------------ dataloaders ------------------------------------------------- #", "\n", "infersal_loader", "=", "DataLoader", "(", "MySalInferData", "(", "args", ".", "data_root", ",", "transform", "=", "True", ")", ",", "batch_size", "=", "args", ".", "batch", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "# -------------------------------------------------- networks -------------------------------------------------- #", "\n", "model_sal", "=", "MFNet", "(", ")", "\n", "model_sal", "=", "model_sal", ".", "cuda", "(", ")", "\n", "\n", "# -------------------------------------------------- training -------------------------------------------------- #", "\n", "\n", "print", "(", "'\\n[ Training a saliency network using pseudo labels. ]\\n'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "(", "args", ".", "sal_stage", "*", "2", ")", ")", ":", "\n", "\n", "        ", "os", ".", "chdir", "(", "ori_root", ")", "\n", "# train", "\n", "if", "args", ".", "param", "==", "'train'", ":", "\n", "            ", "model_sal", ".", "train", "(", ")", "\n", "args", ".", "param", "=", "'infer'", "\n", "\n", "trainsal_loader", "=", "DataLoader", "(", "MySalTrainData", "(", "args", ".", "data_root", ",", "resize", "=", "args", ".", "resize", ",", "transform", "=", "True", ",", "\n", "stage", "=", "int", "(", "(", "i", "-", "1", ")", "/", "2", ")", ")", ",", "batch_size", "=", "args", ".", "batch", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "optimizer_model", "=", "torch", ".", "optim", ".", "Adam", "(", "model_sal", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "not", "args", ".", "val", ":", "\n", "                ", "valsal_loader", "=", "None", "\n", "", "else", ":", "\n", "                ", "valsal_loader", "=", "DataLoader", "(", "MySalValData", "(", "args", ".", "data_root", ",", "resize", "=", "args", ".", "resize", ",", "transform", "=", "True", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "", "training", "=", "TrainSal", "(", "\n", "model", "=", "model_sal", ",", "\n", "optimizer_model", "=", "optimizer_model", ",", "\n", "train_loader", "=", "trainsal_loader", ",", "\n", "val_loader", "=", "valsal_loader", ",", "\n", "outpath", "=", "args", ".", "ckpt_root", ",", "\n", "max_epoch", "=", "args", ".", "max_epoch", "+", "args", ".", "k", "*", "(", "(", "i", "+", "1", ")", "/", "2", "-", "1", ")", ",", "\n", "stage", "=", "(", "i", "+", "1", ")", "/", "2", ")", "\n", "\n", "training", ".", "epoch", "=", "0", "\n", "training", ".", "iteration", "=", "0", "\n", "training", ".", "train", "(", ")", "\n", "\n", "# --------------------------------------------------- infer ---------------------------------------------------- #", "\n", "", "elif", "args", ".", "param", "==", "'infer'", ":", "\n", "            ", "args", ".", "param", "=", "'train'", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "ckpt_name", "=", "'sal_stage_'", "+", "str", "(", "int", "(", "i", "/", "2", ")", ")", "+", "'.pth'", "\n", "model_sal", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_root", ",", "ckpt_name", ")", ")", ")", "\n", "model_sal", ".", "eval", "(", ")", "\n", "\n", "print", "(", "'\\nInferring the saliency maps and pixel-wise pseudo labels .....    '", ",", "end", "=", "''", ")", "\n", "\n", "total_num", "=", "len", "(", "infersal_loader", ")", "\n", "count_num", "=", "int", "(", "total_num", "/", "10", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "idx", ",", "(", "data", ",", "name", ",", "size", ")", "in", "enumerate", "(", "infersal_loader", ")", ":", "\n", "                    ", "_", ",", "_", ",", "sal", "=", "model_sal", ".", "forward", "(", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "# Performing pixel-wise refinements on the generated saliency maps.", "\n", "sal_pamr", "=", "BinaryPamr", "(", "data", ".", "cuda", "(", ")", ",", "sal", ".", "detach", "(", ")", ",", "binary", "=", "0.4", ")", "\n", "sal_pamr", "=", "sal_pamr", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "sal", "=", "sal", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "for", "index", "in", "range", "(", "sal", ".", "shape", "[", "0", "]", ")", ":", "# Saving the maps", "\n", "                        ", "img_size", "=", "[", "[", "size", "[", "0", "]", "[", "index", "]", ".", "item", "(", ")", "]", ",", "[", "size", "[", "1", "]", "[", "index", "]", ".", "item", "(", ")", "]", "]", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "'data/pseudo_labels/label0_'", "+", "str", "(", "int", "(", "i", "/", "2", ")", ")", ",", "name", "[", "index", "]", "+", "'.png'", ")", ",", "\n", "sal_pamr", "[", "index", "]", ",", "img_size", ",", "True", ")", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "'data/pseudo_labels/label1_'", "+", "str", "(", "int", "(", "i", "/", "2", ")", ")", ",", "name", "[", "index", "]", "+", "'.png'", ")", ",", "\n", "sal", "[", "index", "]", ",", "img_size", ",", "False", ")", "\n", "\n", "", "if", "idx", "%", "count_num", "==", "count_num", "-", "1", ":", "\n", "                        ", "print", "(", "(", "str", "(", "round", "(", "int", "(", "idx", "+", "1", ")", "/", "total_num", "*", "100", ")", ")", ")", "+", "'.0 %   '", ",", "end", "=", "''", ")", "\n", "\n", "", "", "", "print", "(", "',  finished,  '", ",", "end", "=", "''", ")", "\n", "final_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'cost %d seconds.  '", "%", "(", "final_time", "-", "start_time", ")", ",", "end", "=", "'\\n\\n'", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# Performing superpixel-wise refinements as well as CRF on the generated saliency maps.", "\n", "from", "utils", ".", "slic", "import", "run_slic_with_crf", "\n", "print", "(", "'\\nInferring superpixel-wise pseudo labels .....   \\n[  '", ",", "end", "=", "''", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "run_slic_with_crf", "(", "img_root", "=", "'data/DUTS-train/image'", ",", "\n", "prob_root", "=", "'data/pseudo_labels/label1_'", "+", "str", "(", "int", "(", "i", "/", "2", ")", ")", ",", "\n", "output_root", "=", "'data/pseudo_labels/label1_'", "+", "str", "(", "int", "(", "i", "/", "2", ")", ")", ")", "\n", "print", "(", "' ],  finished,  '", ",", "end", "=", "''", ")", "\n", "final_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'cost %d seconds.  '", "%", "(", "final_time", "-", "start_time", ")", ",", "end", "=", "'\\n\\n'", ")", "\n", "\n", "# # ------------- CRF ------------- #", "\n", "# print('\\nCRFing .....   \\n[  ', end='')", "\n", "# start_time = time.time()", "\n", "#", "\n", "# crf(input_path=r'data/DUTS-train/image', sal_path='data/pseudo_labels/label0_' + str(int(i/2)),", "\n", "#     output_path='data/pseudo_labels/label0_' + str(int(i/2)), binary=None)", "\n", "# os.chdir(ori_root)", "\n", "# print(' ],  finished,  ', end='')", "\n", "# final_time = time.time()", "\n", "# print('cost %d seconds.  ' % (final_time - start_time), end='\\n\\n')", "\n", "\n", "# Reload the model for self-training", "\n", "del", "model_sal", "\n", "model_sal", "=", "MFNet", "(", ")", "\n", "model_sal", "=", "model_sal", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.test_code.main": [[10, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "testdatainit", "torch.utils.data.DataLoader", "MFNet", "model.cuda.load_state_dict", "model.cuda.cuda", "MySalTestData", "torch.load", "torch.no_grad", "print", "model.cuda.eval", "len", "int", "enumerate", "print", "print", "print", "os.path.join", "time.time", "model.cuda.", "time.time", "range", "print", "time.time", "crf", "time.time", "print", "print", "print", "data.cuda", "BinaryPamr", "imsave", "print", "data.cuda", "os.path.join", "sal[].squeeze().cpu().detach", "[].item", "[].item", "str", "sal[].squeeze().cpu", "round", "sal[].squeeze", "int"], "function", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.testdatainit", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.crf", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.BinaryPamr", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.imsave.imsave"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "os", "\n", "import", "time", "\n", "import", "torch", "\n", "import", "argparse", "\n", "\n", "from", "utils", ".", "crf", "import", "crf", "\n", "from", "utils", ".", "imsave", "import", "imsave", "\n", "from", "utils", ".", "pamr", "import", "BinaryPamr", "\n", "from", "utils", ".", "datainit", "import", "testdatainit", "\n", "from", "model", ".", "MFNet_densenet", "import", "MFNet", "\n", "from", "dataset_loader", "import", "MySalTestData", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "\n", "# -------------------------------------------------- options --------------------------------------------------- #", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--test_root'", ",", "type", "=", "str", ",", "default", "=", "r''", ",", "help", "=", "'your test set dir'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "'sal_stage_2.pth'", ",", "help", "=", "'path to checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--pamr'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'performing PAMR or not, default as False'", ")", "\n", "parser", ".", "add_argument", "(", "'--crf'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'performing CRF or not, default as False'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ckpt_root'", ",", "type", "=", "str", ",", "default", "=", "'snapshot'", ",", "help", "=", "'path to checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--salmap_root'", ",", "type", "=", "str", ",", "default", "=", "'sal_map'", ",", "help", "=", "'path to output saliency map'", ")", "\n", "parser", ".", "add_argument", "(", "'--salmap_crf_root'", ",", "type", "=", "str", ",", "default", "=", "'sal_map_crf'", ",", "help", "=", "'path to saliency map through crf'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "'the CPU workers number'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'the batch size during inference'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "testdatainit", "(", "args", ".", "salmap_root", ",", "crf", "=", "args", ".", "crf", ")", "\n", "\n", "# ------------------------------------------------- dataloader -------------------------------------------------- #", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "MySalTestData", "(", "args", ".", "test_root", ",", "transform", "=", "True", ")", ",", "batch_size", "=", "args", ".", "batch", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# -------------------------------------------------- networks --------------------------------------------------- #", "\n", "model", "=", "MFNet", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_root", ",", "args", ".", "ckpt", ")", ")", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# --------------------------------------------------- infer ----------------------------------------------------- #", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "print", "(", "'\\nTesting .....   \\n[   '", ",", "end", "=", "''", ")", "\n", "model", ".", "eval", "(", ")", "\n", "total_num", "=", "len", "(", "test_loader", ")", "\n", "count_num", "=", "int", "(", "total_num", "/", "10", ")", "\n", "total_time", "=", "0", "\n", "\n", "for", "idx", ",", "(", "data", ",", "img_name", ",", "img_size", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "sal1", ",", "sal2", ",", "sal", "=", "model", "(", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "final_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "final_time", "-", "start_time", "\n", "\n", "if", "args", ".", "pamr", ":", "\n", "                ", "sal", "=", "BinaryPamr", "(", "data", ".", "cuda", "(", ")", ",", "sal", ",", "binary", "=", "None", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "sal", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "size", "=", "[", "[", "img_size", "[", "0", "]", "[", "i", "]", ".", "item", "(", ")", "]", ",", "[", "img_size", "[", "1", "]", "[", "i", "]", ".", "item", "(", ")", "]", "]", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "args", ".", "salmap_root", ",", "img_name", "[", "i", "]", "+", "'.png'", ")", ",", "\n", "sal", "[", "i", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "size", ",", "False", ")", "\n", "\n", "", "if", "idx", "%", "count_num", "==", "count_num", "-", "1", ":", "\n", "                ", "print", "(", "(", "str", "(", "round", "(", "int", "(", "idx", "+", "1", ")", "/", "total_num", "*", "100", ")", ")", ")", "+", "'.0 %   '", ",", "end", "=", "''", ")", "\n", "\n", "", "", "print", "(", "'],   finished,  '", ",", "end", "=", "''", ")", "\n", "print", "(", "'cost %d seconds.   '", "%", "total_time", ",", "end", "=", "''", ")", "\n", "print", "(", "'FPS: %.1f'", "%", "(", "total_num", "/", "total_time", ")", ")", "\n", "\n", "# ------------- CRF ------------- #", "\n", "if", "args", ".", "crf", ":", "\n", "            ", "print", "(", "'\\nPerforming CRF .....   \\n[   '", ",", "end", "=", "''", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "crf", "(", "input_path", "=", "args", ".", "test_root", ",", "sal_path", "=", "args", ".", "salmap_root", ",", "output_path", "=", "args", ".", "salmap_crf_root", ",", "\n", "binary", "=", "None", ")", "\n", "final_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'],   finished,  '", ",", "end", "=", "''", ")", "\n", "print", "(", "'cost %d seconds.   '", "%", "(", "final_time", "-", "start_time", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "'FPS: %.1f'", "%", "(", "total_num", "/", "(", "final_time", "-", "start_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.TorchvisionNormalize.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.447", ",", "0.407", ",", "0.386", ")", ",", "std", "=", "(", "0.244", ",", "0.250", ",", "0.253", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.TorchvisionNormalize.__call__": [[14, 23], ["numpy.asarray", "numpy.empty_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgarr", "=", "np", ".", "asarray", "(", "img", ")", "\n", "proc_img", "=", "np", ".", "empty_like", "(", "imgarr", ",", "np", ".", "float32", ")", "\n", "\n", "proc_img", "[", "...", ",", "0", "]", "=", "(", "imgarr", "[", "...", ",", "0", "]", "/", "255.", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "proc_img", "[", "...", ",", "1", "]", "=", "(", "imgarr", "[", "...", ",", "1", "]", "/", "255.", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "proc_img", "[", "...", ",", "2", "]", "=", "(", "imgarr", "[", "...", ",", "2", "]", "/", "255.", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "\n", "return", "proc_img", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTrainData.__init__": [[32, 54], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "enumerate", "dataset_loader.MySalTrainData.lbl1_names.append", "dataset_loader.MySalTrainData.lbl2_names.append", "dataset_loader.MySalTrainData.img_names.append", "str", "str", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "resize", "=", "256", ",", "infer", "=", "False", ",", "transform", "=", "False", ",", "stage", "=", "1", ")", ":", "\n", "        ", "super", "(", "MySalTrainData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "infer", "=", "infer", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "stage", "=", "stage", "\n", "\n", "img_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'duts-train/image'", ")", "\n", "lbl1_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'pseudo_labels/label0_'", "+", "str", "(", "self", ".", "stage", ")", ")", "\n", "lbl2_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'pseudo_labels/label1_'", "+", "str", "(", "self", ".", "stage", ")", ")", "\n", "file_names", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "self", ".", "lbl1_names", "=", "[", "]", "\n", "self", ".", "lbl2_names", "=", "[", "]", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "file_names", ")", ":", "\n", "\n", "            ", "self", ".", "lbl1_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "lbl1_root", ",", "name", "[", ":", "-", "4", "]", "+", "'.png'", ")", ")", "\n", "self", ".", "lbl2_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "lbl2_root", ",", "name", "[", ":", "-", "4", "]", "+", "'.png'", ")", ")", "\n", "self", ".", "img_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTrainData.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTrainData.__getitem__": [[58, 82], ["PIL.Image.open", "numpy.array.convert", "numpy.array.resize", "numpy.array", "PIL.Image.open", "numpy.array.convert", "numpy.array.resize", "numpy.array", "PIL.Image.open", "numpy.array.convert", "numpy.array.resize", "numpy.array", "dataset_loader.MySalTrainData.transform"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "        ", "img_file", "=", "self", ".", "img_names", "[", "index", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl1_file", "=", "self", ".", "lbl1_names", "[", "index", "]", "\n", "lbl1", "=", "PIL", ".", "Image", ".", "open", "(", "lbl1_file", ")", "\n", "lbl1", "=", "lbl1", ".", "convert", "(", "'L'", ")", "\n", "lbl1", "=", "lbl1", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "lbl1", "=", "np", ".", "array", "(", "lbl1", ")", "\n", "\n", "lbl2_file", "=", "self", ".", "lbl2_names", "[", "index", "]", "\n", "lbl2", "=", "PIL", ".", "Image", ".", "open", "(", "lbl2_file", ")", "\n", "lbl2", "=", "lbl2", ".", "convert", "(", "'L'", ")", "\n", "lbl2", "=", "lbl2", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "lbl2", "=", "np", ".", "array", "(", "lbl2", ")", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ",", "lbl1", ",", "lbl2", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "lbl1", ",", "lbl2", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTrainData.transform": [[84, 99], ["torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy().float.astype", "torch.from_numpy().float.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ",", "lbl1", ",", "lbl2", ")", ":", "\n", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "lbl1", "=", "lbl1", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "lbl1", "=", "torch", ".", "from_numpy", "(", "lbl1", ")", ".", "float", "(", ")", "\n", "\n", "lbl2", "=", "lbl2", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "lbl2", "=", "torch", ".", "from_numpy", "(", "lbl2", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", ",", "lbl1", ",", "lbl2", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTestData.__init__": [[108, 124], ["torch.utils.data.Dataset.__init__", "os.listdir", "enumerate", "dataset_loader.MySalTestData.img_names.append", "dataset_loader.MySalTestData.names.append", "name.endswith", "name.endswith", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "resize", "=", "256", ",", "transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "MySalTestData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "self", ".", "names", "=", "[", "]", "\n", "\n", "file_names", "=", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "file_names", ")", ":", "\n", "            ", "ifpic", "=", "name", ".", "endswith", "(", "'.jpg'", ")", "or", "name", ".", "endswith", "(", "'.png'", ")", "\n", "if", "not", "ifpic", ":", "\n", "                ", "continue", "\n", "", "self", ".", "img_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "name", ")", ")", "\n", "self", ".", "names", ".", "append", "(", "name", "[", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTestData.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTestData.__getitem__": [[128, 141], ["PIL.Image.open", "numpy.array.convert", "numpy.array.resize", "numpy.array", "dataset_loader.MySalTestData.transform"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "        ", "img_file", "=", "self", ".", "img_names", "[", "index", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img_size", "=", "img", ".", "size", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ")", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalTestData.transform": [[143, 151], ["torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalInferData.__init__": [[160, 180], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.listdir", "enumerate", "dataset_loader.MySalInferData.img_names.append", "dataset_loader.MySalInferData.names.append", "name.endswith", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "resize", "=", "256", ",", "transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "MySalInferData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "resize", "=", "resize", "\n", "img_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'duts-train/image'", ")", "\n", "\n", "file_names", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "self", ".", "names", "=", "[", "]", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "file_names", ")", ":", "\n", "            ", "if", "not", "name", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "continue", "\n", "", "self", ".", "img_names", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "img_root", ",", "name", ")", "\n", ")", "\n", "self", ".", "names", ".", "append", "(", "name", "[", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalInferData.__len__": [[181, 183], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalInferData.__getitem__": [[184, 197], ["PIL.Image.open", "numpy.array.convert", "numpy.array.resize", "numpy.array", "dataset_loader.MySalInferData.transform"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "        ", "img_file", "=", "self", ".", "img_names", "[", "index", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img_size", "=", "img", ".", "size", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ")", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalInferData.transform": [[199, 207], ["torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalValData.__init__": [[214, 231], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.listdir", "enumerate", "dataset_loader.MySalValData.img_names.append", "dataset_loader.MySalValData.names.append", "name.endswith", "name.endswith", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "resize", "=", "256", ",", "transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "MySalValData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "self", ".", "names", "=", "[", "]", "\n", "\n", "img_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'ECSSD/image'", ")", "\n", "file_names", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "file_names", ")", ":", "\n", "            ", "ifpic", "=", "name", ".", "endswith", "(", "'.jpg'", ")", "or", "name", ".", "endswith", "(", "'.png'", ")", "\n", "if", "not", "ifpic", ":", "\n", "                ", "continue", "\n", "", "self", ".", "img_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "name", ")", ")", "\n", "self", ".", "names", ".", "append", "(", "name", "[", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalValData.__len__": [[232, 234], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalValData.__getitem__": [[235, 248], ["PIL.Image.open", "numpy.array.convert", "numpy.array.resize", "numpy.array", "dataset_loader.MySalValData.transform"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "        ", "img_file", "=", "self", ".", "img_names", "[", "index", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img_size", "=", "img", ".", "size", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ")", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MySalValData.transform": [[250, 258], ["torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamTrainData.__init__": [[266, 283], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.listdir", "dict", "zip", "os.listdir", "list", "os.path.join", "dataset_loader.MyCamTrainData.img_list.append", "dataset_loader.MyCamTrainData.cls_list.append", "range", "len"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "False", ",", "resize", "=", "256", ")", ":", "\n", "        ", "super", "(", "MyCamTrainData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "img_list", "=", "[", "]", "\n", "self", ".", "cls_list", "=", "[", "]", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'dutscls-44'", ")", "\n", "\n", "self", ".", "cls", "=", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "self", ".", "cls2idx", "=", "dict", "(", "zip", "(", "self", ".", "cls", ",", "list", "(", "range", "(", "1", ",", "len", "(", "self", ".", "cls", ")", "+", "1", ")", ")", ")", ")", "\n", "\n", "for", "cls_idx", "in", "self", ".", "cls", ":", "\n", "            ", "img_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "cls_idx", ")", ")", "\n", "for", "img_name", "in", "img_names", ":", "\n", "                ", "self", ".", "img_list", ".", "append", "(", "img_name", ")", "\n", "self", ".", "cls_list", ".", "append", "(", "[", "cls_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamTrainData.__len__": [[284, 286], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamTrainData.__getitem__": [[287, 306], ["PIL.Image.open().convert", "numpy.array.resize", "numpy.array", "numpy.zeros", "len", "numpy.array", "dataset_loader.MyCamTrainData.transform", "PIL.Image.open", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "lbl_cls", "=", "self", ".", "cls_list", "[", "index", "]", "[", "0", "]", "\n", "# lbl_idx = str(self.cls_list[index])", "\n", "# lbl_idx = lbl_idx.pop(1, -1)", "\n", "# print(lbl_idx)", "\n", "img_file", ",", "lbl", "=", "self", ".", "img_list", "[", "index", "]", ",", "self", ".", "cls2idx", "[", "lbl_cls", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "str", "(", "lbl_cls", ")", ",", "img_file", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "onehot", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "cls", ")", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "-", "1", "\n", "onehot", "[", "lbl", "]", "=", "1", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ",", "onehot", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamTrainData.transform": [[307, 316], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "lbl", "=", "lbl", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# to verify #256*256*3 to 3*256*256", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "float", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.__init__": [[323, 341], ["dataset_loader.TorchvisionNormalize", "torch.utils.data.Dataset.__init__", "os.path.join", "os.listdir", "enumerate", "dataset_loader.MyCamInferData.img_names.append", "dataset_loader.MyCamInferData.names.append", "name.endswith", "name.endswith", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "scales", ",", "transform", "=", "True", ",", "img_normal", "=", "TorchvisionNormalize", "(", ")", ")", ":", "\n", "        ", "super", "(", "MyCamInferData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "if_transform", "=", "transform", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "img_normal", "=", "img_normal", "\n", "\n", "img_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'duts-train/image'", ")", "\n", "# img_root = os.path.join('test')", "\n", "file_names", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "self", ".", "names", "=", "[", "]", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "file_names", ")", ":", "\n", "            ", "ifpic", "=", "name", ".", "endswith", "(", "'.jpg'", ")", "or", "name", ".", "endswith", "(", "'.png'", ")", "\n", "if", "not", "ifpic", ":", "\n", "                ", "continue", "\n", "", "self", ".", "img_names", ".", "append", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "name", ")", ")", "\n", "self", ".", "names", ".", "append", "(", "name", "[", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.__len__": [[342, 344], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.__getitem__": [[345, 372], ["PIL.Image.open", "numpy.array.convert", "numpy.array", "dataset_loader.MyCamInferData.img_normal", "dataset_loader.MyCamInferData.trans", "mul_img_list.append", "dataset_loader.MyCamInferData.pil_rescale", "numpy.stack", "mul_img_norm_list.append", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.trans", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.pil_rescale"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "        ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "self", ".", "img_names", "[", "index", "]", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "img_size", "=", "img", ".", "size", "\n", "# img = img.resize((self.resize, self.resize))", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "mul_img_list", "=", "[", "]", "\n", "mul_img_norm_list", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "if", "s", "==", "1", ":", "\n", "                ", "s_img", "=", "img", "\n", "", "else", ":", "\n", "                ", "s_img", "=", "self", ".", "pil_rescale", "(", "img", ",", "s", ",", "order", "=", "3", ")", "\n", "", "s_img", "=", "self", ".", "img_normal", "(", "s_img", ")", "\n", "s_img", "=", "self", ".", "trans", "(", "s_img", ")", "\n", "mul_img_list", ".", "append", "(", "np", ".", "stack", "(", "[", "s_img", ",", "np", ".", "flip", "(", "s_img", ",", "-", "1", ")", "]", ",", "axis", "=", "0", ")", ")", "# why here -> flip to CAM", "\n", "\n", "", "if", "self", ".", "if_transform", ":", "\n", "            ", "for", "_", "in", "self", ".", "scales", ":", "\n", "                ", "mul_img_norm_list", ".", "append", "(", "mul_img_list", "[", "0", "]", ")", "\n", "i", "+=", "1", "\n", "", "return", "mul_img_norm_list", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "", "else", ":", "\n", "            ", "return", "mul_img_list", ",", "self", ".", "names", "[", "index", "]", ",", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.trans": [[373, 376], ["numpy.transpose"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "trans", "(", "img", ")", ":", "\n", "        ", "return", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.pil_rescale": [[377, 381], ["dataset_loader.MyCamInferData.pil_resize", "int", "int", "numpy.round", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.pil_resize"], ["", "def", "pil_rescale", "(", "self", ",", "img", ",", "scale", ",", "order", ")", ":", "\n", "        ", "height", ",", "width", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "target_size", "=", "(", "int", "(", "np", ".", "round", "(", "height", "*", "scale", ")", ")", ",", "int", "(", "np", ".", "round", "(", "width", "*", "scale", ")", ")", ")", "\n", "return", "self", ".", "pil_resize", "(", "img", ",", "target_size", ",", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MyCamInferData.pil_resize": [[382, 393], ["numpy.asarray", "PIL.Image.fromarray().resize", "PIL.Image.fromarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pil_resize", "(", "img", ",", "size", ",", "order", ")", ":", "\n", "        ", "resample", "=", "PIL", ".", "Image", ".", "BICUBIC", "\n", "if", "size", "[", "0", "]", "==", "img", ".", "shape", "[", "0", "]", "and", "size", "[", "1", "]", "==", "img", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "img", "\n", "", "if", "order", "==", "3", ":", "\n", "            ", "resample", "=", "PIL", ".", "Image", ".", "BICUBIC", "\n", "", "elif", "order", "==", "0", ":", "\n", "            ", "resample", "=", "PIL", ".", "Image", ".", "NEAREST", "\n", "\n", "", "return", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "fromarray", "(", "img", ")", ".", "resize", "(", "size", "[", ":", ":", "-", "1", "]", ",", "resample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.ImageNetClsData.__init__": [[399, 417], ["torch.utils.data.Dataset.__init__", "os.listdir", "filter", "file2lbl.items", "list", "os.path.join", "open().readlines", "x.startswith", "x.startswith", "open", "f.strip", "os.path.join", "int", "int", "[].split", "[].split", "txt.split", "txt.split"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "False", ",", "resize", "=", "256", ")", ":", "\n", "        ", "super", "(", "ImageNetClsData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "resize", "=", "resize", "\n", "txts", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data/det_lists'", ")", ")", "\n", "txts", "=", "filter", "(", "lambda", "x", ":", "x", ".", "startswith", "(", "'train_pos'", ")", "or", "x", ".", "startswith", "(", "'train_part'", ")", ",", "txts", ")", "\n", "file2lbl", "=", "{", "}", "\n", "for", "txt", "in", "txts", ":", "\n", "            ", "files", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data/det_lists'", ",", "txt", ")", ")", ".", "readlines", "(", ")", "\n", "for", "f", "in", "files", ":", "\n", "                ", "f", "=", "f", ".", "strip", "(", "'\\n'", ")", "+", "'.JPEG'", "\n", "if", "f", "in", "file2lbl", ":", "\n", "                    ", "file2lbl", "[", "f", "]", "+=", "[", "int", "(", "txt", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "                    ", "file2lbl", "[", "f", "]", "=", "[", "int", "(", "txt", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "]", "\n", "", "", "", "self", ".", "file2lbl", "=", "file2lbl", ".", "items", "(", ")", "\n", "self", ".", "file2lbl", "=", "list", "(", "self", ".", "file2lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.ImageNetClsData.__len__": [[418, 420], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file2lbl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.ImageNetClsData.__getitem__": [[421, 437], ["PIL.Image.open().convert", "numpy.array.resize", "numpy.array", "numpy.zeros", "numpy.array", "dataset_loader.ImageNetClsData.transform", "PIL.Image.open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "\n", "# print(len(self.file2lbl))", "\n", "        ", "img_file", ",", "lbl", "=", "self", ".", "file2lbl", "[", "index", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'ILSVRC2014_DET_train'", ",", "img_file", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "onehot", "=", "np", ".", "zeros", "(", "200", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ")", "-", "1", "\n", "onehot", "[", "lbl", "]", "=", "1", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ",", "onehot", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.ImageNetClsData.transform": [[438, 447], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "lbl", "=", "lbl", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# to verify #256*256*3 to 3*256*256", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "float", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.cls_from_xml": [[453, 474], ["xml.parse().getroot", "xml.parse().getroot.getchildren", "list", "numpy.zeros", "set", "index.append", "xml.parse", "child.getchildren", "len", "numpy.array", "list.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cls_from_xml", "(", "xml_root", ")", ":", "\n", "        ", "name2index", "=", "{", "'starfish'", ":", "0", ",", "'holothurian'", ":", "1", ",", "'echinus'", ":", "2", ",", "'scallop'", ":", "3", ",", "'waterweeds'", ":", "4", "}", "\n", "cls", ",", "index", "=", "[", "]", ",", "[", "]", "\n", "\n", "root", "=", "ET", ".", "parse", "(", "xml_root", ")", ".", "getroot", "(", ")", "\n", "children_node", "=", "root", ".", "getchildren", "(", ")", "\n", "for", "child", "in", "children_node", ":", "\n", "            ", "if", "child", ".", "tag", "==", "'object'", ":", "\n", "                ", "child_node", "=", "child", ".", "getchildren", "(", ")", "\n", "for", "childd", "in", "child_node", ":", "\n", "                    ", "if", "childd", ".", "tag", "==", "'name'", ":", "\n", "                        ", "cls", ".", "append", "(", "childd", ".", "text", ")", "\n", "", "", "", "", "cls", "=", "list", "(", "set", "(", "cls", ")", ")", "\n", "for", "item", "in", "cls", ":", "\n", "            ", "index", ".", "append", "(", "name2index", "[", "item", "]", ")", "\n", "\n", "", "onehot", "=", "np", ".", "zeros", "(", "5", ")", "\n", "if", "not", "len", "(", "index", ")", "==", "0", ":", "\n", "            ", "onehot", "[", "np", ".", "array", "(", "index", ")", "]", "=", "1", "\n", "", "return", "onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.__init__": [[475, 493], ["torch.utils.data.Dataset.__init__", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "dataset_loader.MarineClsData.cls_from_xml", "dataset_loader.MarineClsData.img_list.append", "dataset_loader.MarineClsData.cls_list.append"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.cls_from_xml"], ["", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "False", ",", "resize", "=", "256", ")", ":", "\n", "        ", "super", "(", "MarineClsData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "resize", "=", "resize", "\n", "\n", "self", ".", "anno_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Annotations'", ")", "\n", "self", ".", "img_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'JPEGImages'", ")", "\n", "self", ".", "img_list", ",", "self", ".", "cls_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "self", ".", "img_root", ")", "\n", "\n", "for", "file", "in", "files", ":", "\n", "            ", "xml_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_root", ",", "file", "[", ":", "-", "4", "]", "+", "'.xml'", ")", "\n", "cls", "=", "self", ".", "cls_from_xml", "(", "xml_root", ")", "\n", "\n", "self", ".", "img_list", ".", "append", "(", "file", ")", "\n", "self", ".", "cls_list", ".", "append", "(", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.__len__": [[494, 496], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.__getitem__": [[497, 510], ["PIL.Image.open().convert", "numpy.array.resize", "numpy.array", "dataset_loader.MarineClsData.transform", "PIL.Image.open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# load image", "\n", "\n", "# print(len(self.file2lbl))", "\n", "        ", "img_file", ",", "lbl", "=", "self", ".", "img_list", "[", "index", "]", ",", "self", ".", "cls_list", "[", "index", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'JPEGImages'", ",", "img_file", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.dataset_loader.MarineClsData.transform": [[511, 520], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.astype", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "lbl", "=", "lbl", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "-", "self", ".", "mean_rgb", "\n", "img", "=", "img", "/", "self", ".", "std_rgb", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# to verify #256*256*3 to 3*256*256", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "float", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.__init__": [[23, 36], ["int", "int", "torch.BCELoss", "torch.BCELoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer_model", ",", "train_loader", ",", "val_loader", ",", "outpath", ",", "max_epoch", "=", "20", ",", "stage", "=", "2", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optim_model", "=", "optimizer_model", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "max_epoch", "=", "int", "(", "max_epoch", ")", "\n", "self", ".", "stage", "=", "int", "(", "stage", ")", "\n", "self", ".", "outpath", "=", "outpath", "\n", "\n", "self", ".", "BCEloss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "sshow", "=", "20", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.rgb2grey": [[37, 48], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rgb2grey", "(", "images", ")", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "[", "0.447", ",", "0.407", ",", "0.386", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.244", ",", "0.250", ",", "0.253", "]", ")", "\n", "\n", "images1", ",", "images2", ",", "images3", "=", "images", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "images", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "images", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "images1", "=", "images1", "*", "std", "[", "0", "]", "+", "mean", "[", "0", "]", "\n", "images2", "=", "images2", "*", "std", "[", "1", "]", "+", "mean", "[", "1", "]", "\n", "images3", "=", "images3", "*", "std", "[", "2", "]", "+", "mean", "[", "2", "]", "\n", "img_grey", "=", "images1", "*", "0.299", "+", "images2", "*", "0.587", "+", "images3", "*", "0.114", "\n", "return", "img_grey", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.l2loss": [[49, 53], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l2loss", "(", "sal1", ",", "sal2", ")", ":", "\n", "        ", "mse", "=", "(", "sal1", "-", "sal2", ")", ".", "norm", "(", "2", ")", ".", "pow", "(", "2", ")", "\n", "return", "mse", "/", "(", "sal1", ".", "shape", "[", "2", "]", "*", "sal2", ".", "shape", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.mutualloss": [[54, 59], ["sal1.clone().detach", "sal2.clone().detach", "trainsal.TrainSal.BCEloss", "trainsal.TrainSal.BCEloss", "sal1.clone", "sal2.clone"], "methods", ["None"], ["", "def", "mutualloss", "(", "self", ",", "sal1", ",", "sal2", ")", ":", "\n", "# mseloss can also be adopted, which encourages similar performance", "\n", "        ", "sal1_self", ",", "sal2_self", "=", "sal1", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "sal2", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "loss", "=", "self", ".", "BCEloss", "(", "sal1", ",", "sal2_self", ")", "+", "self", ".", "BCEloss", "(", "sal2", ",", "sal1_self", ")", "\n", "return", "loss", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.run_ctr": [[60, 65], ["torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.nn.MaxPool2d.", "torch.nn.MaxPool2d.", "torch.nn.MaxPool2d.", "torch.nn.MaxPool2d."], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "run_ctr", "(", "sal", ")", ":", "\n", "        ", "pool", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "boundary", "=", "torch", ".", "abs", "(", "pool", "(", "sal", ")", "-", "(", "1", "-", "pool", "(", "1", "-", "sal", ")", ")", ")", "\n", "return", "boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.run_pamr": [[66, 70], ["utils.pamr.BinaryPamr", "sal.clone().detach", "sal.clone"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.BinaryPamr"], ["", "@", "staticmethod", "\n", "def", "run_pamr", "(", "img", ",", "sal", ")", ":", "\n", "        ", "lbl_self", "=", "BinaryPamr", "(", "img", ",", "sal", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "binary", "=", "0.4", ")", "\n", "return", "lbl_self", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.train_epoch": [[71, 130], ["enumerate", "trainsal.TrainSal.model.forward", "trainsal.TrainSal.BCEloss", "trainsal.TrainSal.BCEloss", "trainsal.TrainSal.mutualloss", "trainsal.TrainSal.run_pamr", "trainsal.TrainSal.BCEloss", "trainsal.TrainSal.optim_model.zero_grad", "loss.backward", "trainsal.TrainSal.optim_model.step", "trainsal.TrainSal.item", "trainsal.TrainSal.item", "trainsal.TrainSal.item", "trainsal.TrainSal.item", "img.cuda", "lbl1.cuda().unsqueeze", "lbl2.cuda().unsqueeze", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "trainsal.TrainSal.rgb2grey", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze().transpose", "torch.unsqueeze().transpose", "torch.unsqueeze().transpose", "torch.unsqueeze().transpose", "writer.add_images", "len", "len", "[].unsqueeze", "lbl1.cuda", "lbl2.cuda", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "len", "str", "img.clone", "datetime.datetime.datetime.now().replace", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.forward", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.mutualloss", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.run_pamr", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.rgb2grey"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "img", ",", "lbl1", ",", "lbl2", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "            ", "iteration", "=", "batch_idx", "+", "self", ".", "epoch", "*", "len", "(", "self", ".", "train_loader", ")", "\n", "if", "self", ".", "iteration", "!=", "0", "and", "(", "iteration", "-", "1", ")", "!=", "self", ".", "iteration", ":", "\n", "                ", "continue", "# for resuming", "\n", "", "self", ".", "iteration", "=", "iteration", "\n", "if", "self", ".", "epoch", ">=", "self", ".", "max_epoch", "*", "len", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "break", "\n", "", "img", ",", "lbl1", ",", "lbl2", "=", "img", ".", "cuda", "(", ")", ",", "lbl1", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "lbl2", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "sal1", ",", "sal2", ",", "sal3", "=", "self", ".", "model", ".", "forward", "(", "img", ")", "\n", "\n", "# BCEloss for the 1st DF", "\n", "loss1", "=", "self", ".", "BCEloss", "(", "sal1", ",", "lbl1", ")", "\n", "\n", "# BCEloss for the 2nd DF", "\n", "loss2", "=", "self", ".", "BCEloss", "(", "sal2", ",", "lbl2", ")", "\n", "\n", "# The self-supervision term between 1st DF and 2nd DF", "\n", "loss12", "=", "self", ".", "mutualloss", "(", "sal1", ",", "sal2", ")", "\n", "\n", "# Guidance loss for the final saliency decoder", "\n", "lbl_tea", "=", "self", ".", "run_pamr", "(", "img", ",", "(", "sal1", "+", "sal2", ")", "/", "2", ")", "\n", "loss3", "=", "self", ".", "BCEloss", "(", "sal3", ",", "lbl_tea", ")", "\n", "\n", "loss", "=", "loss1", "+", "loss2", "+", "loss3", "+", "2", "*", "loss12", "\n", "\n", "self", ".", "optim_model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim_model", ".", "step", "(", ")", "\n", "\n", "global", "loss_1", ",", "loss_2", ",", "loss_self", ",", "loss_3", "\n", "loss_1", "+=", "loss1", ".", "item", "(", ")", "\n", "loss_2", "+=", "loss2", ".", "item", "(", ")", "\n", "loss_self", "+=", "loss12", ".", "item", "(", ")", "\n", "loss_3", "+=", "loss3", ".", "item", "(", ")", "\n", "\n", "# ------------------------------ information exhibition and visualization --------------------------- #", "\n", "if", "iteration", "%", "self", ".", "sshow", "==", "(", "self", ".", "sshow", "-", "1", ")", ":", "\n", "                ", "print", "(", "'|| Time: %s,\\t\\tStage: %1d,\\t\\t\\tEpoch: %2d/%2d,\\t\\tIter: %2d/%2d,\\t\\t||\\n'", "\n", "'|| Loss1: %.4f,\\t\\tLoss2: %.4f,\\t\\tLoss3: %.4f,\\t\\tLoss_self: %.4f\\t||\\n'", "%", "\n", "(", "str", "(", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ")", "[", "11", ":", "]", ",", "\n", "self", ".", "stage", ",", "self", ".", "epoch", "+", "1", ",", "self", ".", "max_epoch", ",", "batch_idx", "+", "1", ",", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "loss_1", "/", "self", ".", "sshow", ",", "loss_2", "/", "self", ".", "sshow", ",", "loss_3", "/", "self", ".", "sshow", ",", "loss_self", "/", "self", ".", "sshow", ")", ")", "\n", "\n", "# tensorboard-scale", "\n", "writer", ".", "add_scalar", "(", "'loss of decoder1'", ",", "loss_1", "/", "self", ".", "sshow", ",", "iteration", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "'loss of decoder2'", ",", "loss_2", "/", "self", ".", "sshow", ",", "iteration", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "'loss of decoder3'", ",", "loss_3", "/", "self", ".", "sshow", ",", "iteration", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "'loss of self-supervision'", ",", "loss_self", "/", "self", ".", "sshow", ",", "iteration", "+", "1", ")", "\n", "# tensorboard-image", "\n", "img_grey", "=", "self", ".", "rgb2grey", "(", "img", ".", "clone", "(", ")", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "image", "=", "torch", ".", "cat", "(", "(", "img_grey", "[", "0", "]", ",", "lbl1", "[", "0", "]", ",", "lbl2", "[", "0", "]", ",", "sal1", "[", "0", "]", ",", "\n", "sal2", "[", "0", "]", ",", "lbl_tea", "[", "0", "]", ",", "sal3", "[", "0", "]", ")", ",", "0", ")", "\n", "image", "=", "torch", ".", "unsqueeze", "(", "image", ",", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "writer", ".", "add_images", "(", "'sal maps'", ",", "image", ",", "iteration", "+", "1", ",", "dataformats", "=", "'NCHW'", ")", "\n", "\n", "loss_1", ",", "loss_2", ",", "loss_self", ",", "loss_3", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.train": [[131, 185], ["range", "trainsal.TrainSal.model.train", "trainsal.TrainSal.train_epoch", "print", "print", "utils.datainit.valdatainit", "trainsal.TrainSal.model.eval", "len", "int", "time.time", "enumerate", "print", "time.time", "print", "print", "utils.evaluateFM.get_FM", "print", "print", "print", "print", "writer.add_scalar", "writer.add_scalar", "torch.save", "torch.save", "torch.save", "torch.save", "trainsal.TrainSal.model", "sal.squeeze().cpu().detach.squeeze().cpu().detach.squeeze().cpu().detach", "utils.imsave.imsave", "torch.save", "torch.save", "torch.save", "torch.save", "trainsal.TrainSal.model.state_dict", "len", "data.cuda", "os.path.join", "print", "trainsal.TrainSal.model.state_dict", "sal.squeeze().cpu().detach.squeeze().cpu().detach.squeeze().cpu", "str", "sal.squeeze().cpu().detach.squeeze().cpu().detach.squeeze", "round", "int"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.train", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.None.trainsal.TrainSal.train_epoch", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.valdatainit", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.evaluateFM.get_FM", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.imsave.imsave"], ["", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_mae", ",", "best_f", "=", "0.0", ",", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "max_epoch", ")", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "train_epoch", "(", ")", "\n", "print", "(", "''", ")", "\n", "\n", "if", "self", ".", "val_loader", "is", "not", "None", ":", "\n", "# ---------------- validation ---------------- #", "\n", "                ", "print", "(", "'\\nValidating .....   \\n[  '", ",", "end", "=", "''", ")", "\n", "valdatainit", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "total_num", "=", "len", "(", "self", ".", "val_loader", ")", "\n", "count_num", "=", "int", "(", "total_num", "/", "10", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "data", ",", "name", ",", "size", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "                    ", "_", ",", "_", ",", "sal", "=", "self", ".", "model", "(", "data", ".", "cuda", "(", ")", ")", "\n", "\n", "sal", "=", "sal", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "'data/val_map'", ",", "name", "[", "0", "]", "+", "'.png'", ")", ",", "sal", ",", "size", ",", "factor", "=", "False", ")", "\n", "\n", "if", "idx", "%", "count_num", "==", "count_num", "-", "1", ":", "\n", "                        ", "print", "(", "(", "str", "(", "round", "(", "int", "(", "idx", "+", "1", ")", "/", "total_num", "*", "100", ")", ")", ")", "+", "'.0 %  '", ",", "end", "=", "''", ")", "\n", "\n", "", "", "print", "(", "'],  finished,  '", ",", "end", "=", "''", ")", "\n", "final_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'cost %d seconds. '", "%", "(", "final_time", "-", "start_time", ")", ")", "\n", "\n", "# ---------------- evaluation ---------------- #", "\n", "print", "(", "\"\\nEvaluating .....\"", ")", "\n", "f", ",", "mae", "=", "get_FM", "(", "salpath", "=", "'data/val_map/'", ",", "gtpath", "=", "'data/ECSSD/mask/'", ")", "\n", "if", "f", ">", "best_f", ":", "\n", "                    ", "best_mae", ",", "best_f", "=", "mae", ",", "f", "\n", "savename", "=", "(", "'%s/sal_stage_%d.pth'", "%", "(", "self", ".", "outpath", ",", "self", ".", "stage", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "savename", ")", "\n", "\n", "", "print", "(", "'this F_measure:% .4f'", "%", "f", ",", "end", "=", "'\\t\\t'", ")", "\n", "print", "(", "'this MAE:% .4f'", "%", "mae", ")", "\n", "print", "(", "'best F_measure:% .4f'", "%", "best_f", ",", "end", "=", "'\\t\\t'", ")", "\n", "print", "(", "'best MAE:% .4f'", "%", "best_mae", ",", "end", "=", "'\\n\\n'", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'F-measure'", ",", "f", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "'MAE'", ",", "mae", ",", "epoch", "+", "1", ")", "\n", "\n", "", "else", ":", "\n", "                ", "savename", "=", "(", "'%s/sal_stage_%d.pth'", "%", "(", "self", ".", "outpath", ",", "self", ".", "stage", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "savename", ")", "\n", "\n", "", "if", "self", ".", "epoch", ">=", "self", ".", "max_epoch", "*", "len", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "break", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalAffinity.__init__": [[14, 19], ["torch.Module.__init__", "pamr.LocalAffinity._init_aff", "pamr.LocalAffinity.register_buffer"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalStDev._init_aff"], ["    ", "def", "__init__", "(", "self", ",", "dilations", "=", "[", "1", "]", ")", ":", "\n", "        ", "super", "(", "LocalAffinity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dilations", "=", "dilations", "\n", "weight", "=", "self", ".", "_init_aff", "(", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalAffinity._init_aff": [[20, 41], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.clone", "torch.zeros.clone", "torch.zeros.clone", "torch.zeros.size", "torch.zeros.size", "torch.zeros.size"], "methods", ["None"], ["", "def", "_init_aff", "(", "self", ")", ":", "\n", "# initialising the shift kernel", "\n", "        ", "weight", "=", "torch", ".", "zeros", "(", "8", ",", "1", ",", "3", ",", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "weight", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "weight", "[", "i", ",", "0", ",", "1", ",", "1", "]", "=", "1", "\n", "\n", "", "weight", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "-", "1", "\n", "weight", "[", "1", ",", "0", ",", "0", ",", "1", "]", "=", "-", "1", "\n", "weight", "[", "2", ",", "0", ",", "0", ",", "2", "]", "=", "-", "1", "\n", "\n", "weight", "[", "3", ",", "0", ",", "1", ",", "0", "]", "=", "-", "1", "\n", "weight", "[", "4", ",", "0", ",", "1", ",", "2", "]", "=", "-", "1", "\n", "\n", "weight", "[", "5", ",", "0", ",", "2", ",", "0", "]", "=", "-", "1", "\n", "weight", "[", "6", ",", "0", ",", "2", ",", "1", "]", "=", "-", "1", "\n", "weight", "[", "7", ",", "0", ",", "2", ",", "2", "]", "=", "-", "1", "\n", "\n", "self", ".", "weight_check", "=", "weight", ".", "clone", "(", ")", "\n", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalAffinity.forward": [[42, 58], ["pamr.LocalAffinity.weight_check.type_as", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "x.view.view.size", "x.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.conv2d.view", "pamr.LocalAffinity.weight_check.eq", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x_affs.append", "pamr.LocalAffinity.kernel.cuda", "pamr.LocalAffinity.kernel.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "self", ".", "weight_check", "=", "self", ".", "weight_check", ".", "type_as", "(", "x", ")", "\n", "assert", "torch", ".", "all", "(", "self", ".", "weight_check", ".", "eq", "(", "self", ".", "kernel", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "B", ",", "K", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", "*", "K", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "x_affs", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dilations", ":", "\n", "            ", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "d", "]", "*", "4", ",", "mode", "=", "'replicate'", ")", "\n", "x_aff", "=", "F", ".", "conv2d", "(", "x_pad", ",", "self", ".", "kernel", ".", "cuda", "(", ")", ",", "dilation", "=", "d", ")", "\n", "x_affs", ".", "append", "(", "x_aff", ")", "\n", "\n", "", "x_aff", "=", "torch", ".", "cat", "(", "x_affs", ",", "1", ")", "\n", "return", "x_aff", ".", "view", "(", "B", ",", "K", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalAffinityCopy._init_aff": [[62, 79], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.clone", "torch.zeros.clone", "torch.zeros.clone"], "methods", ["None"], ["    ", "def", "_init_aff", "(", "self", ")", ":", "\n", "# initialising the shift kernel", "\n", "        ", "weight", "=", "torch", ".", "zeros", "(", "8", ",", "1", ",", "3", ",", "3", ")", "\n", "\n", "weight", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "1", "\n", "weight", "[", "1", ",", "0", ",", "0", ",", "1", "]", "=", "1", "\n", "weight", "[", "2", ",", "0", ",", "0", ",", "2", "]", "=", "1", "\n", "\n", "weight", "[", "3", ",", "0", ",", "1", ",", "0", "]", "=", "1", "\n", "weight", "[", "4", ",", "0", ",", "1", ",", "2", "]", "=", "1", "\n", "\n", "weight", "[", "5", ",", "0", ",", "2", ",", "0", "]", "=", "1", "\n", "weight", "[", "6", ",", "0", ",", "2", ",", "1", "]", "=", "1", "\n", "weight", "[", "7", ",", "0", ",", "2", ",", "2", "]", "=", "1", "\n", "\n", "self", ".", "weight_check", "=", "weight", ".", "clone", "(", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalStDev._init_aff": [[83, 101], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.zero_", "torch.zeros.zero_", "torch.zeros.zero_", "torch.zeros.clone", "torch.zeros.clone", "torch.zeros.clone"], "methods", ["None"], ["    ", "def", "_init_aff", "(", "self", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "zeros", "(", "9", ",", "1", ",", "3", ",", "3", ")", "\n", "weight", ".", "zero_", "(", ")", "\n", "\n", "weight", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "1", "\n", "weight", "[", "1", ",", "0", ",", "0", ",", "1", "]", "=", "1", "\n", "weight", "[", "2", ",", "0", ",", "0", ",", "2", "]", "=", "1", "\n", "\n", "weight", "[", "3", ",", "0", ",", "1", ",", "0", "]", "=", "1", "\n", "weight", "[", "4", ",", "0", ",", "1", ",", "1", "]", "=", "1", "\n", "weight", "[", "5", ",", "0", ",", "1", ",", "2", "]", "=", "1", "\n", "\n", "weight", "[", "6", ",", "0", ",", "2", ",", "0", "]", "=", "1", "\n", "weight", "[", "7", ",", "0", ",", "2", ",", "1", "]", "=", "1", "\n", "weight", "[", "8", ",", "0", ",", "2", ",", "2", "]", "=", "1", "\n", "\n", "self", ".", "weight_check", "=", "weight", ".", "clone", "(", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalStDev.forward": [[102, 108], ["pamr.LocalAffinity.forward", "super().forward.std"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# returns (B,K,P,H,W), where P is the number", "\n", "# of locations", "\n", "        ", "x", "=", "super", "(", "LocalStDev", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "return", "x", ".", "std", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.LocalAffinityAbs.forward": [[112, 115], ["pamr.LocalAffinity.forward", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "super", "(", "LocalAffinityAbs", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "return", "torch", ".", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.PAMR.__init__": [[123, 130], ["torch.Module.__init__", "pamr.LocalAffinityAbs", "pamr.LocalAffinityCopy", "pamr.LocalStDev"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_iter", "=", "1", ",", "dilations", "=", "[", "1", "]", ")", ":", "\n", "        ", "super", "(", "PAMR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "aff_x", "=", "LocalAffinityAbs", "(", "dilations", ")", "\n", "self", ".", "aff_m", "=", "LocalAffinityCopy", "(", "dilations", ")", "\n", "self", ".", "aff_std", "=", "LocalStDev", "(", "dilations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.PAMR.forward": [[131, 151], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax.size", "torch.interpolate.size", "pamr.PAMR.aff_std", "torch.softmax.mean", "torch.softmax", "torch.softmax", "torch.softmax", "range", "pamr.PAMR.aff_m", "pamr.PAMR.aff_x", "torch.softmax.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "F", ".", "interpolate", "(", "mask", ",", "size", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "# x: [BxKxHxW]", "\n", "# mask: [BxCxHxW]", "\n", "B", ",", "K", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "_", ",", "_", "=", "mask", ".", "size", "(", ")", "\n", "\n", "x_std", "=", "self", ".", "aff_std", "(", "x", ")", "\n", "\n", "x", "=", "-", "self", ".", "aff_x", "(", "x", ")", "/", "(", "1e-8", "+", "0.1", "*", "x_std", ")", "\n", "x", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "2", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_iter", ")", ":", "\n", "            ", "m", "=", "self", ".", "aff_m", "(", "mask", ")", "# [BxCxPxHxW]", "\n", "mask", "=", "(", "m", "*", "x", ")", ".", "sum", "(", "2", ")", "\n", "\n", "# xvals: [BxCxHxW]", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.run_pamr": [[153, 157], ["pamr.PAMR", "PAMR."], "function", ["None"], ["", "", "def", "run_pamr", "(", "im", ",", "mask", ")", ":", "\n", "    ", "aff", "=", "PAMR", "(", "10", ",", "[", "1", ",", "2", ",", "4", ",", "8", ",", "12", ",", "24", "]", ")", "\n", "masks_dec", "=", "aff", "(", "im", ",", "mask", ")", "\n", "return", "masks_dec", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.pamr.BinaryPamr": [[159, 167], ["pamr.PAMR", "PAMR.", "torch.adaptive_max_pool2d"], "function", ["None"], ["", "def", "BinaryPamr", "(", "img", ",", "sal", ",", "binary", "=", "0.4", ")", ":", "\n", "    ", "pamr", "=", "PAMR", "(", "10", ",", "[", "1", ",", "2", ",", "4", ",", "8", ",", "12", ",", "24", "]", ")", "\n", "sal_pamr", "=", "pamr", "(", "img", ",", "sal", ")", "\n", "sal_pamr", "/=", "F", ".", "adaptive_max_pool2d", "(", "sal_pamr", ",", "(", "1", ",", "1", ")", ")", "+", "1e-5", "\n", "if", "binary", "is", "not", "None", ":", "\n", "        ", "sal_pamr", "[", "sal_pamr", "<", "binary", "]", "=", "0", "\n", "sal_pamr", "[", "sal_pamr", ">", "binary", "]", "=", "1", "\n", "", "return", "sal_pamr", "\n", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.evaluateFM.get_FM": [[8, 70], ["os.listdir", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.finfo", "PIL.open", "numpy.array", "PIL.open().convert", "np.array.resize", "numpy.array", "numpy.abs().mean", "numpy.zeros", "numpy.linspace", "numpy.array", "numpy.array", "numpy.array", "os.path.exists", "print", "len", "np.array.mean", "numpy.zeros", "np.array.append", "np.array.append", "np.array.append", "PIL.open", "np.array.min", "numpy.abs", "np.zeros.sum", "np.array.sum", "numpy.shape", "numpy.shape", "np.array.max", "np.array.min", "np.zeros.sum", "np.array.sum"], "function", ["None"], ["def", "get_FM", "(", "salpath", ",", "gtpath", ")", ":", "\n", "\n", "    ", "gtdir", "=", "gtpath", "\n", "saldir", "=", "salpath", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "gtdir", ")", "\n", "eps", "=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "\n", "m_pres", "=", "np", ".", "zeros", "(", "21", ")", "\n", "m_recs", "=", "np", ".", "zeros", "(", "21", ")", "\n", "m_fms", "=", "np", ".", "zeros", "(", "21", ")", "\n", "m_thfm", "=", "0", "\n", "m_mea", "=", "0", "\n", "it", "=", "1", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "gtdir", "+", "name", ")", ":", "\n", "            ", "print", "(", "gtdir", "+", "name", ",", "'does not exist'", ")", "\n", "", "gt", "=", "Image", ".", "open", "(", "gtdir", "+", "name", ")", "\n", "gt", "=", "np", ".", "array", "(", "gt", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "mask", "=", "Image", ".", "open", "(", "saldir", "+", "name", ")", ".", "convert", "(", "'L'", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "np", ".", "shape", "(", "gt", ")", "[", "1", "]", ",", "np", ".", "shape", "(", "gt", ")", "[", "0", "]", ")", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "float", ")", "\n", "# salmap = cv2.resize(salmap,(W,H))", "\n", "\n", "if", "len", "(", "mask", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "", "mask", "=", "(", "mask", "-", "mask", ".", "min", "(", ")", ")", "/", "(", "mask", ".", "max", "(", ")", "-", "mask", ".", "min", "(", ")", "+", "eps", ")", "\n", "gt", "[", "gt", "!=", "0", "]", "=", "1", "\n", "pres", "=", "[", "]", "\n", "recs", "=", "[", "]", "\n", "fms", "=", "[", "]", "\n", "mea", "=", "np", ".", "abs", "(", "gt", "-", "mask", ")", ".", "mean", "(", ")", "\n", "# threshold fm", "\n", "binary", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "th", "=", "2", "*", "mask", ".", "mean", "(", ")", "\n", "if", "th", ">", "1", ":", "\n", "            ", "th", "=", "1", "\n", "", "binary", "[", "mask", ">=", "th", "]", "=", "1", "\n", "sb", "=", "(", "binary", "*", "gt", ")", ".", "sum", "(", ")", "\n", "pre", "=", "sb", "/", "(", "binary", ".", "sum", "(", ")", "+", "eps", ")", "\n", "rec", "=", "sb", "/", "(", "gt", ".", "sum", "(", ")", "+", "eps", ")", "\n", "thfm", "=", "1.3", "*", "pre", "*", "rec", "/", "(", "0.3", "*", "pre", "+", "rec", "+", "eps", ")", "\n", "for", "th", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "21", ")", ":", "\n", "            ", "binary", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "binary", "[", "mask", ">=", "th", "]", "=", "1", "\n", "pre", "=", "(", "binary", "*", "gt", ")", ".", "sum", "(", ")", "/", "(", "binary", ".", "sum", "(", ")", "+", "eps", ")", "\n", "rec", "=", "(", "binary", "*", "gt", ")", ".", "sum", "(", ")", "/", "(", "gt", ".", "sum", "(", ")", "+", "eps", ")", "\n", "fm", "=", "1.3", "*", "pre", "*", "rec", "/", "(", "0.3", "*", "pre", "+", "rec", "+", "eps", ")", "\n", "pres", ".", "append", "(", "pre", ")", "\n", "recs", ".", "append", "(", "rec", ")", "\n", "fms", ".", "append", "(", "fm", ")", "\n", "", "fms", "=", "np", ".", "array", "(", "fms", ")", "\n", "pres", "=", "np", ".", "array", "(", "pres", ")", "\n", "recs", "=", "np", ".", "array", "(", "recs", ")", "\n", "m_mea", "=", "m_mea", "*", "(", "it", "-", "1", ")", "/", "it", "+", "mea", "/", "it", "\n", "m_fms", "=", "m_fms", "*", "(", "it", "-", "1", ")", "/", "it", "+", "fms", "/", "it", "\n", "m_recs", "=", "m_recs", "*", "(", "it", "-", "1", ")", "/", "it", "+", "recs", "/", "it", "\n", "m_pres", "=", "m_pres", "*", "(", "it", "-", "1", ")", "/", "it", "+", "pres", "/", "it", "\n", "m_thfm", "=", "m_thfm", "*", "(", "it", "-", "1", ")", "/", "it", "+", "thfm", "/", "it", "\n", "it", "+=", "1", "\n", "", "return", "m_thfm", ",", "m_mea", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.imsave.imsave": [[8, 17], ["np.array.numpy", "matplotlib.imsave", "numpy.array", "numpy.array", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.imsave.imsave"], ["def", "imsave", "(", "file_name", ",", "img", ",", "img_size", ",", "factor", ")", ":", "\n", "    ", "img", "=", "img", ".", "numpy", "(", ")", "\n", "\n", "if", "factor", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img", ")", ")", ".", "resize", "(", "(", "img_size", "[", "0", "]", "[", "0", "]", ",", "img_size", "[", "1", "]", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "img", ")", ".", "resize", "(", "(", "img_size", "[", "0", "]", "[", "0", "]", ",", "img_size", "[", "1", "]", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "plt", ".", "imsave", "(", "file_name", ",", "img", ",", "cmap", "=", "'gray'", ")", "\n", "# assert(type(img) == torch.FloatTensor,", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid": [[18, 20], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.crf": [[22, 79], ["os.getcwd", "os.listdir", "os.getcwd", "len", "int", "os.path.exists", "os.makedirs", "cv2.imread", "cv2.imread", "pydensecrf.DenseCRF2D", "numpy.zeros", "n_energy.flatten", "p_energy.flatten", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "numpy.array().astype", "res.reshape.reshape", "cv2.imwrite", "res.reshape.astype", "print", "numpy.log", "crf.sigmoid", "numpy.log", "crf.sigmoid", "numpy.array", "dcrf.DenseCRF2D.inference", "str", "round", "int"], "function", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid"], ["", "def", "crf", "(", "input_path", ",", "sal_path", ",", "output_path", ",", "binary", "=", "0.3", ")", ":", "\n", "\n", "    ", "root", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root", "+", "'/'", "+", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", "+", "'/'", "+", "output_path", ")", "\n", "", "output_path", "=", "root", "+", "'/'", "+", "output_path", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "input_path", ")", "\n", "# os.chdir(input_path)", "\n", "roo", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "total_num", "=", "len", "(", "files", ")", "\n", "count_num", "=", "int", "(", "total_num", "/", "10", ")", "\n", "count", "=", "0", "\n", "\n", "for", "file", "in", "files", ":", "\n", "        ", "count", "+=", "1", "\n", "img", "=", "cv2", ".", "imread", "(", "root", "+", "'/'", "+", "input_path", "+", "'/'", "+", "file", ",", "1", ")", "\n", "annos", "=", "cv2", ".", "imread", "(", "root", "+", "'/'", "+", "sal_path", "+", "'/'", "+", "file", "[", ":", "-", "4", "]", "+", "'.png'", ",", "0", ")", "\n", "if", "binary", "is", "not", "None", ":", "\n", "            ", "annos", "[", "annos", "<", "255", "*", "binary", "]", "=", "0", "# 255*0.2=51", "\n", "annos", "[", "annos", ">=", "255", "*", "binary", "]", "=", "255", "# 255*0.4=102   255*0.3=76.5", "\n", "# labels = relabel_sequential(cv2.imread(root + '/' + sal_path + '/' + file[:-4] + '.png', 0))[0].flatten()", "\n", "", "output", "=", "output_path", "+", "'/'", "+", "file", "[", ":", "-", "4", "]", "+", "'.png'", "\n", "\n", "EPSILON", "=", "1e-8", "\n", "\n", "M", "=", "2", "# salient or not", "\n", "tau", "=", "1.05", "\n", "# Setup the CRF model", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "M", ")", "\n", "\n", "anno_norm", "=", "annos", "/", "255.0", "\n", "n_energy", "=", "-", "np", ".", "log", "(", "(", "1.0", "-", "anno_norm", "+", "EPSILON", ")", ")", "/", "(", "tau", "*", "sigmoid", "(", "1", "-", "anno_norm", ")", ")", "\n", "p_energy", "=", "-", "np", ".", "log", "(", "anno_norm", "+", "EPSILON", ")", "/", "(", "tau", "*", "sigmoid", "(", "anno_norm", ")", ")", "\n", "\n", "U", "=", "np", ".", "zeros", "(", "(", "M", ",", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "U", "[", "0", ",", ":", "]", "=", "n_energy", ".", "flatten", "(", ")", "\n", "U", "[", "1", ",", ":", "]", "=", "p_energy", ".", "flatten", "(", ")", "\n", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "3", ",", "compat", "=", "3", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "60", ",", "srgb", "=", "5", ",", "rgbim", "=", "img", ",", "compat", "=", "5", ")", "\n", "\n", "# Do the inference", "\n", "infer", "=", "np", ".", "array", "(", "d", ".", "inference", "(", "1", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "res", "=", "infer", "[", "1", ",", ":", "]", "\n", "\n", "# res *= 255 / res.max()", "\n", "res", "=", "res", "*", "255", "\n", "res", "=", "res", ".", "reshape", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "cv2", ".", "imwrite", "(", "output", ",", "res", ".", "astype", "(", "'uint8'", ")", ")", "\n", "\n", "if", "count", "%", "count_num", "==", "count_num", "-", "1", ":", "\n", "            ", "print", "(", "(", "str", "(", "round", "(", "int", "(", "count", "+", "1", ")", "/", "total_num", "*", "100", ")", ")", ")", "+", "'.0 %   '", ",", "end", "=", "''", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.traindatainit": [[6, 29], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "range", "range", "int", "os.path.join", "int", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "str", "str"], "function", ["None"], ["def", "traindatainit", "(", "ckpt_path", ",", "data_path", ",", "sal_stage", ",", "num", "=", "2", ")", ":", "\n", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'pseudo_labels'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_path", ")", "\n", "\n", "", "if", "num", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "int", "(", "sal_stage", ")", ")", ":", "\n", "            ", "label_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'label'", "+", "str", "(", "i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "label_path", ")", "\n", "\n", "", "", "", "if", "num", "==", "2", ":", "\n", "        ", "for", "i", "in", "range", "(", "int", "(", "sal_stage", ")", ")", ":", "\n", "            ", "label1_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'label0_'", "+", "str", "(", "i", ")", ")", "\n", "label2_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'label1_'", "+", "str", "(", "i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label1_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "label1_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "label2_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "label2_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.traindata_record": [[31, 44], ["os.mkdir", "shutil.copy", "shutil.copy", "str().replace().replace", "str().replace", "str", "datetime.datetime.now().replace", "datetime.datetime.now"], "function", ["None"], ["", "", "", "", "def", "traindata_record", "(", ")", ":", "\n", "    ", "root_path", "=", "'records/'", "+", "str", "(", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", ")", ".", "replace", "(", "':'", ",", "'-'", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "+", "'/'", "\n", "os", ".", "mkdir", "(", "root_path", ")", "\n", "\n", "py_train", "=", "'trainsal.py'", "\n", "new_py_train", "=", "root_path", "+", "py_train", "[", ":", "-", "2", "]", "+", "'json'", "\n", "shutil", ".", "copy", "(", "py_train", ",", "new_py_train", ")", "\n", "\n", "py_main", "=", "'main.py'", "\n", "new_py_main", "=", "root_path", "+", "py_main", "[", ":", "-", "2", "]", "+", "'json'", "\n", "shutil", ".", "copy", "(", "py_main", ",", "new_py_main", ")", "\n", "\n", "return", "root_path", "+", "'train_record.json'", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.valdatainit": [[46, 50], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "valdatainit", "(", "val_path", "=", "'data/val_map'", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "val_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "val_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.datainit.testdatainit": [[58, 78], ["os.path.exists", "os.listdir", "os.path.exists", "os.makedirs", "os.path.exists", "os.path.isfile", "os.listdir", "os.path.exists", "os.makedirs", "os.remove", "os.path.isfile", "os.remove"], "function", ["None"], ["", "", "def", "testdatainit", "(", "sal_path", ",", "crf", "=", "False", ")", ":", "\n", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "sal_path", ")", ":", "\n", "        ", "for", "file", "in", "os", ".", "listdir", "(", "sal_path", ")", ":", "\n", "            ", "file_path", "=", "sal_path", "+", "'/'", "+", "file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "file_path", ")", "\n", "# shutil.rmtree(sal_path)", "\n", "\n", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "sal_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "sal_path", ")", "\n", "\n", "", "if", "crf", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "sal_path", "+", "'_crf'", ")", ":", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "sal_path", "+", "'_crf'", ")", ":", "\n", "                ", "file_path", "=", "sal_path", "+", "'_crf'", "+", "'/'", "+", "file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "file_path", ")", "\n", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "sal_path", "+", "'_crf'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "sal_path", "+", "'_crf'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.slic.myfunc": [[25, 94], ["PIL.open().convert", "numpy.array", "PIL.open().convert", "np.concatenate.resize", "numpy.array", "np.concatenate.mean", "skimage.segmentation.slic", "numpy.where", "enumerate", "range", "numpy.array", "numpy.zeros", "range", "numpy.concatenate", "pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_softmax", "dcrf.DenseCRF2D.setUnaryEnergy", "pydensecrf.utils.create_pairwise_bilateral", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseEnergy", "dcrf.DenseCRF2D.inference", "numpy.argmax().reshape", "PIL.fromarray", "Image.fromarray.save", "[].reshape", "PIL.fromarray", "Image.fromarray.save", "Image.fromarray.save", "np.concatenate.astype", "cv2.cvtColor().astype", "numpy.arange", "skimage.segmentation.slic.max", "np.array.append", "os.path.join", "os.path.join", "os.path.join", "PIL.open", "PIL.open", "probs[].mean", "numpy.argmax", "os.path.join", "os.path.join", "cv2.cvtColor", "skimage.segmentation.slic.max", "numpy.array", "sp_onehot.sum().sum", "sp_onehot.sum"], "function", ["None"], ["def", "myfunc", "(", "img_name", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "img_name", "[", ":", "-", "4", "]", "+", "'.jpg'", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "W", ",", "H", "=", "img", ".", "size", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "probs", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "prob_root", ",", "img_name", "[", ":", "-", "4", "]", "+", "'.png'", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "probs", "=", "probs", ".", "resize", "(", "(", "W", ",", "H", ")", ")", "\n", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "\n", "# a = probs.mean()", "\n", "# probs[probs < (0.6 * a)] = 0", "\n", "# probs[probs>40]=255", "\n", "# probs[probs<20]=0", "\n", "\n", "# probs[probs > 20] = 255", "\n", "a", "=", "probs", ".", "mean", "(", ")", "\n", "probs", "[", "probs", ">", "(", "1.5", "*", "a", ")", "]", "=", "255", "\n", "probs", "[", "probs", "<", "(", "0.8", "*", "a", ")", "]", "=", "0", "\n", "\n", "probs", "=", "probs", ".", "astype", "(", "np", ".", "float", ")", "/", "255.0", "\n", "\n", "# superpixel", "\n", "img_lab", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2LAB", ")", ".", "astype", "(", "np", ".", "float", ")", "/", "255.0", "\n", "sp_label", "=", "slic", "(", "img_lab", ",", "n_segments", "=", "200", ",", "compactness", "=", "20", ")", "\n", "# in case of empty superpixels", "\n", "sp_onehot", "=", "np", ".", "arange", "(", "sp_label", ".", "max", "(", ")", "+", "1", ")", "==", "sp_label", "[", "...", ",", "None", "]", "\n", "sp_onehot", "=", "sp_onehot", "[", ":", ",", ":", ",", "sp_onehot", ".", "sum", "(", "0", ")", ".", "sum", "(", "0", ")", ">", "0", "]", "\n", "rs", ",", "cs", ",", "num", "=", "np", ".", "where", "(", "sp_onehot", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "num", ")", ":", "\n", "        ", "sp_label", "[", "rs", "[", "i", "]", ",", "cs", "[", "i", "]", "]", "=", "n", "\n", "", "sp_num", "=", "sp_label", ".", "max", "(", ")", "+", "1", "\n", "sp_prob", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sp_num", ")", ":", "\n", "        ", "sp_prob", ".", "append", "(", "probs", "[", "sp_label", "==", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "sp_prob", "=", "np", ".", "array", "(", "sp_prob", ")", "\n", "msk", "=", "np", ".", "zeros", "(", "probs", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "sp_num", ")", ":", "\n", "        ", "msk", "[", "sp_label", "==", "i", "]", "=", "sp_prob", "[", "i", "]", "\n", "", "probs", "=", "msk", "\n", "\n", "probs", "=", "np", ".", "concatenate", "(", "(", "1", "-", "probs", "[", "None", ",", "...", "]", ",", "probs", "[", "None", ",", "...", "]", ")", ",", "0", ")", "\n", "# Example using the DenseCRF class and the util functions", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "2", ")", "\n", "\n", "# get unary potentials (neg log probability)", "\n", "U", "=", "unary_from_softmax", "(", "probs", ")", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "\n", "# This creates the color-dependent features and then add them to the CRF", "\n", "feats", "=", "create_pairwise_bilateral", "(", "sdims", "=", "(", "80", ",", "80", ")", ",", "schan", "=", "(", "13", ",", "13", ",", "13", ")", ",", "\n", "img", "=", "img", ",", "chdim", "=", "2", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "(", "3", ",", "3", ")", ",", "compat", "=", "3", ",", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "d", ".", "addPairwiseEnergy", "(", "feats", ",", "compat", "=", "10", ",", "\n", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "\n", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "\n", "# Run five inference steps.", "\n", "Q", "=", "d", ".", "inference", "(", "5", ")", "\n", "\n", "# Find out the most probable class for each pixel.", "\n", "BMAP", "=", "np", ".", "argmax", "(", "Q", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "H", ",", "W", ")", ")", "\n", "BMAP", "=", "(", "BMAP", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "BMAP", "=", "Image", ".", "fromarray", "(", "BMAP", ")", "\n", "BMAP", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_root", ",", "img_name", ")", ",", "'png'", ")", "\n", "\n", "MAP", "=", "np", ".", "array", "(", "Q", ")", "[", "1", "]", ".", "reshape", "(", "(", "H", ",", "W", ")", ")", "\n", "MAP", "=", "(", "MAP", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "msk", "=", "Image", ".", "fromarray", "(", "MAP", ")", "\n", "msk", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_root", ",", "img_name", ")", ",", "'png'", ")", "\n", "BMAP", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_root", "+", "'_bin'", ",", "img_name", ")", ",", "'png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.slic.run_slic": [[112, 179], ["os.listdir", "PIL.open().convert", "numpy.array", "PIL.open().convert", "np.concatenate.resize", "numpy.array", "np.concatenate.mean", "skimage.segmentation.slic", "numpy.where", "enumerate", "range", "numpy.array", "numpy.zeros", "range", "numpy.concatenate", "pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_softmax", "dcrf.DenseCRF2D.setUnaryEnergy", "pydensecrf.utils.create_pairwise_bilateral", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseEnergy", "dcrf.DenseCRF2D.inference", "[].reshape", "PIL.fromarray", "Image.fromarray.save", "np.concatenate.astype", "cv2.cvtColor().astype", "numpy.arange", "skimage.segmentation.slic.max", "np.array.append", "os.path.join", "PIL.open", "PIL.open", "probs[].mean", "os.path.join", "os.path.join", "cv2.cvtColor", "skimage.segmentation.slic.max", "numpy.array", "sp_onehot.sum().sum", "sp_onehot.sum"], "function", ["None"], ["", "def", "run_slic", "(", "img_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\data\\ECSSD\\image'", ",", "\n", "prob_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\data\\val_map'", ",", "\n", "output_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\data\\val_map'", ")", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "prob_root", ")", "\n", "\n", "for", "img_name", "in", "files", ":", "\n", "\n", "        ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "img_name", "[", ":", "-", "4", "]", "+", "'.jpg'", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "W", ",", "H", "=", "img", ".", "size", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "probs", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "prob_root", ",", "img_name", "[", ":", "-", "4", "]", "+", "'.png'", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "probs", "=", "probs", ".", "resize", "(", "(", "W", ",", "H", ")", ")", "\n", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "\n", "# a = probs.mean()", "\n", "# probs[probs < (0.6 * a)] = 0", "\n", "# probs[probs>40]=255", "\n", "# probs[probs<20]=0", "\n", "\n", "# probs[probs > 20] = 255", "\n", "a", "=", "probs", ".", "mean", "(", ")", "\n", "probs", "[", "probs", ">", "(", "1.5", "*", "a", ")", "]", "=", "255", "\n", "probs", "[", "probs", "<", "(", "0.8", "*", "a", ")", "]", "=", "0", "\n", "\n", "probs", "=", "probs", ".", "astype", "(", "np", ".", "float", ")", "/", "255.0", "\n", "\n", "# superpixel", "\n", "img_lab", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2LAB", ")", ".", "astype", "(", "np", ".", "float", ")", "/", "255.0", "\n", "sp_label", "=", "slic", "(", "img_lab", ",", "n_segments", "=", "200", ",", "compactness", "=", "20", ")", "\n", "# in case of empty superpixels", "\n", "sp_onehot", "=", "np", ".", "arange", "(", "sp_label", ".", "max", "(", ")", "+", "1", ")", "==", "sp_label", "[", "...", ",", "None", "]", "\n", "sp_onehot", "=", "sp_onehot", "[", ":", ",", ":", ",", "sp_onehot", ".", "sum", "(", "0", ")", ".", "sum", "(", "0", ")", ">", "0", "]", "\n", "rs", ",", "cs", ",", "num", "=", "np", ".", "where", "(", "sp_onehot", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "num", ")", ":", "\n", "            ", "sp_label", "[", "rs", "[", "i", "]", ",", "cs", "[", "i", "]", "]", "=", "n", "\n", "", "sp_num", "=", "sp_label", ".", "max", "(", ")", "+", "1", "\n", "sp_prob", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sp_num", ")", ":", "\n", "            ", "sp_prob", ".", "append", "(", "probs", "[", "sp_label", "==", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "sp_prob", "=", "np", ".", "array", "(", "sp_prob", ")", "\n", "msk", "=", "np", ".", "zeros", "(", "probs", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "sp_num", ")", ":", "\n", "            ", "msk", "[", "sp_label", "==", "i", "]", "=", "sp_prob", "[", "i", "]", "\n", "", "probs", "=", "msk", "\n", "\n", "probs", "=", "np", ".", "concatenate", "(", "(", "1", "-", "probs", "[", "None", ",", "...", "]", ",", "probs", "[", "None", ",", "...", "]", ")", ",", "0", ")", "\n", "# Example using the DenseCRF class and the util functions", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "2", ")", "\n", "\n", "# get unary potentials (neg log probability)", "\n", "U", "=", "unary_from_softmax", "(", "probs", ")", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "\n", "# This creates the color-dependent features and then add them to the CRF", "\n", "feats", "=", "create_pairwise_bilateral", "(", "sdims", "=", "(", "80", ",", "80", ")", ",", "schan", "=", "(", "13", ",", "13", ",", "13", ")", ",", "img", "=", "img", ",", "chdim", "=", "2", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "(", "3", ",", "3", ")", ",", "compat", "=", "3", ",", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "d", ".", "addPairwiseEnergy", "(", "feats", ",", "compat", "=", "10", ",", "\n", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "\n", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "\n", "# Run five inference steps.", "\n", "Q", "=", "d", ".", "inference", "(", "5", ")", "\n", "\n", "MAP", "=", "np", ".", "array", "(", "Q", ")", "[", "1", "]", ".", "reshape", "(", "(", "H", ",", "W", ")", ")", "\n", "MAP", "=", "(", "MAP", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "msk", "=", "Image", ".", "fromarray", "(", "MAP", ")", "\n", "msk", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_root", ",", "img_name", ")", ",", "'png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.slic.run_slic_with_crf": [[181, 191], ["os.listdir", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join"], "function", ["None"], ["", "", "def", "run_slic_with_crf", "(", "img_root", "=", "r'data\\DUTS-train/image'", ",", "\n", "prob_root", "=", "r'data/pseudo_labels/label1_1'", ",", "\n", "output_root", "=", "r'data/pseudo_labels/label1_1'", ")", ":", "\n", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "prob_root", ")", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "pool", ".", "map", "(", "myslic", ",", "files", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.slic.myslic": [[193, 256], ["PIL.open().convert", "numpy.array", "PIL.open().convert", "np.concatenate.resize", "numpy.array", "np.concatenate.mean", "skimage.segmentation.slic", "numpy.where", "enumerate", "range", "numpy.array", "numpy.zeros", "range", "numpy.concatenate", "pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_softmax", "dcrf.DenseCRF2D.setUnaryEnergy", "pydensecrf.utils.create_pairwise_bilateral", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseEnergy", "dcrf.DenseCRF2D.inference", "[].reshape", "PIL.fromarray", "Image.fromarray.save", "np.concatenate.astype", "cv2.cvtColor().astype", "numpy.arange", "skimage.segmentation.slic.max", "np.array.append", "os.path.join", "PIL.open", "PIL.open", "probs[].mean", "os.path.join", "os.path.join", "cv2.cvtColor", "skimage.segmentation.slic.max", "numpy.array", "sp_onehot.sum().sum", "sp_onehot.sum"], "function", ["None"], ["", "def", "myslic", "(", "img_name", ")", ":", "\n", "# for img_name in files:", "\n", "\n", "    ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "img_name", "[", ":", "-", "4", "]", "+", "'.jpg'", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "W", ",", "H", "=", "img", ".", "size", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "probs", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "prob_root", ",", "img_name", "[", ":", "-", "4", "]", "+", "'.png'", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "probs", "=", "probs", ".", "resize", "(", "(", "W", ",", "H", ")", ")", "\n", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "\n", "# a = probs.mean()", "\n", "# probs[probs < (0.6 * a)] = 0", "\n", "# probs[probs>40]=255", "\n", "# probs[probs<20]=0", "\n", "\n", "# probs[probs > 20] = 255", "\n", "a", "=", "probs", ".", "mean", "(", ")", "\n", "probs", "[", "probs", ">", "(", "1.5", "*", "a", ")", "]", "=", "255", "\n", "probs", "[", "probs", "<", "(", "0.8", "*", "a", ")", "]", "=", "0", "\n", "\n", "probs", "=", "probs", ".", "astype", "(", "np", ".", "float", ")", "/", "255.0", "\n", "\n", "# superpixel", "\n", "img_lab", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2LAB", ")", ".", "astype", "(", "np", ".", "float", ")", "/", "255.0", "\n", "sp_label", "=", "slic", "(", "img_lab", ",", "n_segments", "=", "200", ",", "compactness", "=", "20", ")", "\n", "# in case of empty superpixels", "\n", "sp_onehot", "=", "np", ".", "arange", "(", "sp_label", ".", "max", "(", ")", "+", "1", ")", "==", "sp_label", "[", "...", ",", "None", "]", "\n", "sp_onehot", "=", "sp_onehot", "[", ":", ",", ":", ",", "sp_onehot", ".", "sum", "(", "0", ")", ".", "sum", "(", "0", ")", ">", "0", "]", "\n", "rs", ",", "cs", ",", "num", "=", "np", ".", "where", "(", "sp_onehot", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "num", ")", ":", "\n", "        ", "sp_label", "[", "rs", "[", "i", "]", ",", "cs", "[", "i", "]", "]", "=", "n", "\n", "", "sp_num", "=", "sp_label", ".", "max", "(", ")", "+", "1", "\n", "sp_prob", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sp_num", ")", ":", "\n", "        ", "sp_prob", ".", "append", "(", "probs", "[", "sp_label", "==", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "sp_prob", "=", "np", ".", "array", "(", "sp_prob", ")", "\n", "msk", "=", "np", ".", "zeros", "(", "probs", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "sp_num", ")", ":", "\n", "        ", "msk", "[", "sp_label", "==", "i", "]", "=", "sp_prob", "[", "i", "]", "\n", "", "probs", "=", "msk", "\n", "\n", "probs", "=", "np", ".", "concatenate", "(", "(", "1", "-", "probs", "[", "None", ",", "...", "]", ",", "probs", "[", "None", ",", "...", "]", ")", ",", "0", ")", "\n", "# Example using the DenseCRF class and the util functions", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ",", "2", ")", "\n", "\n", "# get unary potentials (neg log probability)", "\n", "U", "=", "unary_from_softmax", "(", "probs", ")", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "\n", "# This creates the color-dependent features and then add them to the CRF", "\n", "feats", "=", "create_pairwise_bilateral", "(", "sdims", "=", "(", "80", ",", "80", ")", ",", "schan", "=", "(", "13", ",", "13", ",", "13", ")", ",", "img", "=", "img", ",", "chdim", "=", "2", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "(", "3", ",", "3", ")", ",", "compat", "=", "3", ",", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "d", ".", "addPairwiseEnergy", "(", "feats", ",", "compat", "=", "10", ",", "\n", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "\n", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "\n", "# Run five inference steps.", "\n", "Q", "=", "d", ".", "inference", "(", "5", ")", "\n", "\n", "MAP", "=", "np", ".", "array", "(", "Q", ")", "[", "1", "]", ".", "reshape", "(", "(", "H", ",", "W", ")", ")", "\n", "MAP", "=", "(", "MAP", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "msk", "=", "Image", ".", "fromarray", "(", "MAP", ")", "\n", "msk", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_root", ",", "img_name", ")", ",", "'png'", ")", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.functions.pgt_visual": [[5, 22], ["cv2.imread", "os.listdir", "print", "cv2.imread", "cv2.imwrite"], "function", ["None"], ["def", "pgt_visual", "(", ")", ":", "\n", "# fusion of PAMR and Pgt", "\n", "    ", "img_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\sc\\pamr'", "\n", "new_pgt_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\sc\\new_pgt'", "\n", "pgt_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\sc\\pgt\\sun_aidmyhpxgsherdax.png'", "\n", "pgt", "=", "cv2", ".", "imread", "(", "pgt_root", ")", "\n", "epoch", "=", "8", "\n", "max_epoch", "=", "8", "\n", "delta", "=", "(", "epoch", "/", "(", "max_epoch", "+", "1e-5", ")", ")", "**", "0.5", "\n", "\n", "file_list", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "sal", "=", "cv2", ".", "imread", "(", "img_root", "+", "'/'", "+", "file", ")", "\n", "new_pgt", "=", "delta", "*", "sal", "+", "(", "1", "-", "delta", ")", "*", "pgt", "\n", "cv2", ".", "imwrite", "(", "new_pgt_root", "+", "'/'", "+", "file", "[", ":", "-", "4", "]", "+", "'.jpg'", ",", "new_pgt", ")", "\n", "", "print", "(", "'over'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.functions.heatmap": [[24, 40], ["os.listdir", "print", "cv2.imread", "cv2.imread", "cv2.applyColorMap", "cv2.addWeighted", "cv2.imwrite"], "function", ["None"], ["", "def", "heatmap", "(", ")", ":", "\n", "# convert CAMs to heatmaps", "\n", "    ", "cam_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\dataset\\cam_d'", "\n", "img_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\dataset\\img'", "\n", "save_root", "=", "r'C:\\Users\\oip\\Desktop\\wsod\\dataset'", "\n", "cam_list", "=", "os", ".", "listdir", "(", "cam_root", ")", "\n", "for", "cam", "in", "cam_list", ":", "\n", "\n", "        ", "gray_img", "=", "cv2", ".", "imread", "(", "cam_root", "+", "'/'", "+", "cam", ")", "\n", "ori_img", "=", "cv2", ".", "imread", "(", "img_root", "+", "'/'", "+", "cam", "[", ":", "-", "4", "]", "+", "'.jpg'", ")", "\n", "heat_img", "=", "cv2", ".", "applyColorMap", "(", "gray_img", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "img_add", "=", "cv2", ".", "addWeighted", "(", "ori_img", ",", "0.6", ",", "heat_img", ",", "0.4", ",", "0", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "save_root", "+", "'/'", "+", "cam", "[", ":", "-", "4", "]", "+", "'_heatmap.png'", ",", "img_add", ")", "\n", "\n", "", "print", "(", "'over'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.functions.convert_name": [[42, 54], ["os.listdir", "print", "cv2.imread", "cv2.imwrite", "os.remove"], "function", ["None"], ["", "def", "convert_name", "(", ")", ":", "\n", "# Modify file name", "\n", "    ", "img_root", "=", "r'G:\\Saliency maps of full\\DGRL\\ECSSD\\NLDF'", "\n", "\n", "file_list", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "img_root", "+", "'/'", "+", "file", ")", "\n", "new_file", "=", "file", "[", ":", "-", "9", "]", "+", "'.png'", "\n", "cv2", ".", "imwrite", "(", "img_root", "+", "'/'", "+", "new_file", ",", "img", ")", "\n", "os", ".", "remove", "(", "img_root", "+", "'/'", "+", "file", ")", "\n", "", "print", "(", "'over'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_resnet.MFNet.__init__": [[9, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "MFNet_resnet.MFNet._initialize_weights", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "resnet101"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16._initialize_weights", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.resnet101"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MFNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# ------------------------  1st directive filter  ---------------------------- #", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "1024", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_3", "=", "nn", ".", "Conv2d", "(", "320", ",", "80", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_5", "=", "nn", ".", "Conv2d", "(", "80", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_7", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_9", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ------------------------  2nd directive filter  ---------------------------- #", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "1024", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3", "=", "nn", ".", "Conv2d", "(", "320", ",", "80", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_5", "=", "nn", ".", "Conv2d", "(", "80", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_7", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_9", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ---------------------------  saliency decoder  ------------------------------ #", "\n", "self", ".", "side3_1_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side3_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side4_1_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side4_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side5_1_2", "=", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side5_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side3cat2", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side3out2", "=", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ------------------------------  others  ----------------------------------- #", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "up2", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# ---------------------------  shared encoder  ------------------------------ #", "\n", "self", ".", "resnet", "=", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_resnet.MFNet._initialize_weights": [[49, 55], ["MFNet_resnet.MFNet.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_resnet.MFNet.forward": [[56, 88], ["MFNet_resnet.MFNet.resnet", "MFNet_resnet.MFNet.conv1_9", "MFNet_resnet.MFNet.conv2_9", "MFNet_resnet.MFNet.side3_2_2", "MFNet_resnet.MFNet.side4_2_2", "MFNet_resnet.MFNet.side5_2_2", "MFNet_resnet.MFNet.upsample", "MFNet_resnet.MFNet.upsample", "MFNet_resnet.MFNet.upsample", "MFNet_resnet.MFNet.side3out2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.side3_1_2", "MFNet_resnet.MFNet.side4_1_2", "MFNet_resnet.MFNet.side5_1_2", "MFNet_resnet.MFNet.side3cat2", "MFNet_resnet.MFNet.sigmoid", "MFNet_resnet.MFNet.sigmoid", "torch.interpolate.sigmoid", "MFNet_resnet.MFNet.conv1_7", "MFNet_resnet.MFNet.conv2_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.conv1_5", "MFNet_resnet.MFNet.conv2_5", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.conv1_3", "MFNet_resnet.MFNet.conv2_3", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.up2", "MFNet_resnet.MFNet.conv1_1", "MFNet_resnet.MFNet.conv2_1"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ---------------------------  shared encoder  ------------------------------ #", "\n", "        ", "x3", ",", "x4", ",", "x5", "=", "self", ".", "resnet", "(", "x", ")", "\n", "\n", "# ------------------------  1st directive filter  ---------------------------- #", "\n", "sal1", "=", "(", "self", ".", "conv1_9", "(", "self", ".", "up2", "(", "self", ".", "conv1_7", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv1_5", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv1_3", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv1_1", "(", "x5", ")", ")", ")", ")", ")", ")", ")", ")", ")", ")", "\n", "\n", "# ------------------------  2nd directive filter  ---------------------------- #", "\n", "sal2", "=", "(", "self", ".", "conv2_9", "(", "self", ".", "up2", "(", "self", ".", "conv2_7", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv2_5", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv2_3", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv2_1", "(", "x5", ")", ")", ")", ")", ")", ")", ")", ")", ")", ")", "\n", "\n", "# ---------------------------  saliency decoder  ------------------------------ #", "\n", "h_side3_2", "=", "self", ".", "side3_2_2", "(", "self", ".", "side3_1_2", "(", "x3", ")", ")", "\n", "h_side4_2", "=", "self", ".", "side4_2_2", "(", "self", ".", "side4_1_2", "(", "x4", ")", ")", "\n", "h_side5_2", "=", "self", ".", "side5_2_2", "(", "self", ".", "side5_1_2", "(", "x5", ")", ")", "\n", "# upsample to same size (1/4 original size)", "\n", "h_side5_2_up2", "=", "self", ".", "upsample", "(", "h_side5_2", ")", "\n", "h_side5_2_up4", "=", "self", ".", "upsample", "(", "h_side5_2_up2", ")", "\n", "h_side4_2_up2", "=", "self", ".", "upsample", "(", "h_side4_2", ")", "\n", "\n", "# fusion", "\n", "side3_2", "=", "self", ".", "side3out2", "(", "self", ".", "side3cat2", "(", "torch", ".", "cat", "(", "(", "h_side5_2_up4", ",", "h_side4_2_up2", ",", "h_side3_2", ")", ",", "1", ")", ")", ")", "\n", "# upsample to original size", "\n", "side3_2", "=", "f", ".", "interpolate", "(", "side3_2", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# return side3_2", "\n", "return", "sal1", ".", "sigmoid", "(", ")", ",", "sal2", ".", "sigmoid", "(", ")", ",", "side3_2", ".", "sigmoid", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_vgg.MFNet.__init__": [[11, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "MFNet_vgg.MFNet._initialize_weights", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "model.backbone.vgg_16.VGG16"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16._initialize_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MFNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# ------------------------  1st directive filter  ---------------------------- #", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_5", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_7", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_9", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ------------------------  2nd directive filter  ---------------------------- #", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_5", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_7", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_9", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ---------------------------  saliency decoder  ------------------------------ #", "\n", "self", ".", "side3_1_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side3_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side4_1_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side4_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side5_1_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side5_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side3cat2", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side3out2", "=", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# -----------------------------  others  -------------------------------- #", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "up2", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# ---------------------------  shared encoder  ----------------------------- #", "\n", "self", ".", "vgg", "=", "VGG16", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_vgg.MFNet._initialize_weights": [[50, 56], ["MFNet_vgg.MFNet.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_vgg.MFNet.forward": [[57, 88], ["MFNet_vgg.MFNet.vgg", "MFNet_vgg.MFNet.conv1_9", "MFNet_vgg.MFNet.conv2_9", "MFNet_vgg.MFNet.side3_2_2", "MFNet_vgg.MFNet.side4_2_2", "MFNet_vgg.MFNet.side5_2_2", "MFNet_vgg.MFNet.upsample", "MFNet_vgg.MFNet.upsample", "MFNet_vgg.MFNet.upsample", "MFNet_vgg.MFNet.side3out2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.side3_1_2", "MFNet_vgg.MFNet.side4_1_2", "MFNet_vgg.MFNet.side5_1_2", "MFNet_vgg.MFNet.side3cat2", "MFNet_vgg.MFNet.sigmoid", "MFNet_vgg.MFNet.sigmoid", "torch.interpolate.sigmoid", "MFNet_vgg.MFNet.conv1_7", "MFNet_vgg.MFNet.conv2_7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.conv1_5", "MFNet_vgg.MFNet.conv2_5", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.conv1_3", "MFNet_vgg.MFNet.conv2_3", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.up2", "MFNet_vgg.MFNet.conv1_1", "MFNet_vgg.MFNet.conv2_1"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ---------------------------  shared encoder  ------------------------------ #", "\n", "        ", "x3", ",", "x4", ",", "x5", "=", "self", ".", "vgg", "(", "x", ")", "\n", "\n", "# ------------------------  1st directive filter  ---------------------------- #", "\n", "sal1", "=", "(", "self", ".", "conv1_9", "(", "self", ".", "up2", "(", "self", ".", "conv1_7", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv1_5", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv1_3", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv1_1", "(", "x5", ")", ")", ")", ")", ")", ")", ")", ")", ")", ")", "\n", "\n", "# ------------------------  2nd directive filter  ---------------------------- #", "\n", "sal2", "=", "(", "self", ".", "conv2_9", "(", "self", ".", "up2", "(", "self", ".", "conv2_7", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv2_5", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv2_3", "(", "\n", "self", ".", "up2", "(", "self", ".", "conv2_1", "(", "x5", ")", ")", ")", ")", ")", ")", ")", ")", ")", ")", "\n", "\n", "# ---------------------------  saliency decoder  ------------------------------ #", "\n", "h_side3_2", "=", "self", ".", "side3_2_2", "(", "self", ".", "side3_1_2", "(", "x3", ")", ")", "\n", "h_side4_2", "=", "self", ".", "side4_2_2", "(", "self", ".", "side4_1_2", "(", "x4", ")", ")", "\n", "h_side5_2", "=", "self", ".", "side5_2_2", "(", "self", ".", "side5_1_2", "(", "x5", ")", ")", "\n", "# upsample to same size (1/4 original size)", "\n", "h_side5_2_up2", "=", "self", ".", "upsample", "(", "h_side5_2", ")", "\n", "h_side5_2_up4", "=", "self", ".", "upsample", "(", "h_side5_2_up2", ")", "\n", "h_side4_2_up2", "=", "self", ".", "upsample", "(", "h_side4_2", ")", "\n", "\n", "# fusion", "\n", "side3_2", "=", "self", ".", "side3out2", "(", "self", ".", "side3cat2", "(", "torch", ".", "cat", "(", "(", "h_side5_2_up4", ",", "h_side4_2_up2", ",", "h_side3_2", ")", ",", "1", ")", ")", ")", "\n", "# upsample to original size", "\n", "side3_2", "=", "f", ".", "interpolate", "(", "side3_2", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "return", "sal1", ".", "sigmoid", "(", ")", ",", "sal2", ".", "sigmoid", "(", ")", ",", "side3_2", ".", "sigmoid", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_densenet.MFNet.__init__": [[11, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "MFNet_densenet.MFNet._initialize_weights", "densenet169"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16._initialize_weights", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169.densenet169"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MFNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# ------------------------  1st directive filter  ---------------------------- #", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "1280", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_3", "=", "nn", ".", "Conv2d", "(", "320", ",", "80", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_5", "=", "nn", ".", "Conv2d", "(", "80", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_7", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_9", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ------------------------  2nd directive filter  ---------------------------- #", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "1280", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3", "=", "nn", ".", "Conv2d", "(", "320", ",", "80", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_5", "=", "nn", ".", "Conv2d", "(", "80", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_7", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_9", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# ---------------------------  saliency decoder  ------------------------------ #", "\n", "self", ".", "side3_1_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side3_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "sidebn3_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "side4_1_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side4_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "sidebn4_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "side5_1_2", "=", "nn", ".", "Conv2d", "(", "1280", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side5_2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "sidebn5_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "side5_3_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "side3cat2", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side4cat2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side3out2", "=", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "side4out2", "=", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# -----------------------------  others  -------------------------------- #", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "# ---------------------------  shared encoder  ----------------------------- #", "\n", "self", ".", "densenet", "=", "densenet169", "(", "pretrained", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_densenet.MFNet._initialize_weights": [[53, 59], ["MFNet_densenet.MFNet.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.model.MFNet_densenet.MFNet.forward": [[60, 85], ["MFNet_densenet.MFNet.densenet", "MFNet_densenet.MFNet.conv1_9", "MFNet_densenet.MFNet.conv2_9", "MFNet_densenet.MFNet.side3_2_2", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.side3out2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.side3_1_2", "MFNet_densenet.MFNet.side4_2_2", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.side3cat2", "MFNet_densenet.MFNet.sigmoid", "MFNet_densenet.MFNet.sigmoid", "torch.interpolate.sigmoid", "MFNet_densenet.MFNet.conv1_7", "MFNet_densenet.MFNet.conv2_7", "MFNet_densenet.MFNet.side4_1_2", "MFNet_densenet.MFNet.side5_2_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.side5_1_2", "MFNet_densenet.MFNet.conv1_5", "MFNet_densenet.MFNet.conv2_5", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.conv1_3", "MFNet_densenet.MFNet.conv2_3", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.upsample", "MFNet_densenet.MFNet.conv1_1", "MFNet_densenet.MFNet.conv2_1"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.utils.crf.sigmoid"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ---------------------------  shared encoder  -------------- ---------------- #", "\n", "        ", "x3", ",", "x4", ",", "x5", "=", "self", ".", "densenet", "(", "x", ")", "\n", "\n", "# ------------------------  1st directive filter  ---------------------------- #", "\n", "sal1", "=", "(", "self", ".", "conv1_9", "(", "self", ".", "upsample", "(", "self", ".", "conv1_7", "(", "\n", "self", ".", "upsample", "(", "self", ".", "conv1_5", "(", "\n", "self", ".", "upsample", "(", "self", ".", "conv1_3", "(", "\n", "self", ".", "upsample", "(", "self", ".", "conv1_1", "(", "x5", ")", ")", ")", ")", ")", ")", ")", ")", ")", ")", "\n", "\n", "# ------------------------  2nd directive filter  ---------------------------- #", "\n", "sal2", "=", "(", "self", ".", "conv2_9", "(", "self", ".", "upsample", "(", "self", ".", "conv2_7", "(", "\n", "self", ".", "upsample", "(", "self", ".", "conv2_5", "(", "\n", "self", ".", "upsample", "(", "self", ".", "conv2_3", "(", "\n", "self", ".", "upsample", "(", "self", ".", "conv2_1", "(", "x5", ")", ")", ")", ")", ")", ")", ")", ")", ")", ")", "\n", "\n", "# ---------------------------  saliency decoder  ------------------------------ #", "\n", "h_side3_2", "=", "self", ".", "side3_2_2", "(", "self", ".", "side3_1_2", "(", "x3", ")", ")", "\n", "h_side4_2", "=", "self", ".", "upsample", "(", "self", ".", "side4_2_2", "(", "self", ".", "side4_1_2", "(", "x4", ")", ")", ")", "\n", "h_side5_2", "=", "self", ".", "upsample", "(", "self", ".", "upsample", "(", "self", ".", "side5_2_2", "(", "self", ".", "side5_1_2", "(", "x5", ")", ")", ")", ")", "\n", "\n", "sal3", "=", "self", ".", "side3out2", "(", "self", ".", "side3cat2", "(", "torch", ".", "cat", "(", "(", "h_side5_2", ",", "h_side4_2", ",", "h_side3_2", ")", ",", "1", ")", ")", ")", "\n", "sal3", "=", "f", ".", "interpolate", "(", "sal3", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "return", "sal1", ".", "sigmoid", "(", ")", ",", "sal2", ".", "sigmoid", "(", ")", ",", "sal3", ".", "sigmoid", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169._DenseLayer.__init__": [[59, 70], ["torch.Sequential.__init__", "densenet_169._DenseLayer.add_module", "densenet_169._DenseLayer.add_module", "densenet_169._DenseLayer.add_module", "densenet_169._DenseLayer.add_module", "densenet_169._DenseLayer.add_module", "densenet_169._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169._DenseLayer.forward": [[71, 76], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169._DenseBlock.__init__": [[79, 84], ["torch.Sequential.__init__", "range", "densenet_169._DenseLayer", "densenet_169._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "dilation", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169._Transition.__init__": [[87, 94], ["torch.Sequential.__init__", "densenet_169._Transition.add_module", "densenet_169._Transition.add_module", "densenet_169._Transition.add_module", "densenet_169._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169.DenseNet.__init__": [[109, 151], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet_169.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "densenet_169.DenseNet.modules", "collections.OrderedDict", "densenet_169._DenseBlock", "densenet_169.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet_169._Transition", "densenet_169.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ",", "\n", "is_downsamples", "=", "[", "True", ",", "True", ",", "True", ",", "True", "]", ",", "dilations", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_downsamples", "=", "is_downsamples", "\n", "self", ".", "dilations", "=", "dilations", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "drop_rate", "=", "drop_rate", ",", "dilation", "=", "dilations", "[", "i", "]", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169.DenseNet.forward": [[152, 169], ["densenet_169.DenseNet.features.block0", "densenet_169.DenseNet.features.denseblock1", "densenet_169.DenseNet.features.transition1", "densenet_169.DenseNet.features.denseblock2", "densenet_169.DenseNet.features.transition2", "densenet_169.DenseNet.features.denseblock3"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", ".", "block0", "(", "x", ")", "# B*64*64*64", "\n", "\n", "x", "=", "self", ".", "features", ".", "denseblock1", "(", "x", ")", "# B*256*64*64", "\n", "x3", "=", "x", "\n", "x", "=", "self", ".", "features", ".", "transition1", "(", "x", ")", "# B*128*32*32", "\n", "\n", "x", "=", "self", ".", "features", ".", "denseblock2", "(", "x", ")", "# B*512*32*32", "\n", "x4", "=", "x", "\n", "x", "=", "self", ".", "features", ".", "transition2", "(", "x", ")", "# B*256*16*16", "\n", "\n", "x", "=", "self", ".", "features", ".", "denseblock3", "(", "x", ")", "# B*1280*16*16", "\n", "x5", "=", "x", "\n", "# x = self.features.transition3(x)  # B*640*8*8", "\n", "#", "\n", "# x = self.features.denseblock4(x)  # B*1664*8*8", "\n", "return", "x3", ",", "x4", ",", "x5", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.densenet_169.densenet169": [[15, 56], ["densenet_169.DenseNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "re.compile", "torch.load_url", "list", "DenseNet.load_state_dict", "model_zoo.load_url.keys", "re.compile.match", "list", "list", "list", "list", "list", "list", "list", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["def", "densenet169", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# '.'s are no longer allowed in module names, but pervious _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'densenet169'", "]", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "model", ".", "classifier", "=", "None", "\n", "features", "=", "model", ".", "features", "\n", "features", ".", "block0", "=", "nn", ".", "Sequential", "(", "features", ".", "conv0", ",", "features", ".", "norm0", ",", "features", ".", "relu0", ",", "features", ".", "pool0", ")", "\n", "\n", "features", ".", "denseblock1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "features", ".", "denseblock1", ")", ")", "\n", "features", ".", "transition1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "features", ".", "transition1", ")", ")", "\n", "\n", "features", ".", "denseblock2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "features", ".", "denseblock2", ")", ")", "\n", "features", ".", "transition2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "features", ".", "transition2", ")", ")", "\n", "\n", "features", ".", "denseblock3", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "features", ".", "denseblock3", ")", ")", "\n", "features", ".", "transition3", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "features", ".", "transition3", ")", ")", "\n", "\n", "features", ".", "denseblock4", "=", "nn", ".", "Sequential", "(", "*", "(", "list", "(", "features", ".", "denseblock4", ")", "+", "[", "features", ".", "norm5", "]", ")", ")", "\n", "model", ".", "features", "=", "features", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16.__init__": [[6, 80], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torchvision.models.vgg16_bn", "vgg_16.VGG16.copy_params_from_vgg16_bn", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.AvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.AvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.AvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.AvgPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16.copy_params_from_vgg16_bn"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn1_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn2_2", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn3_2", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn3_3", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn4_2", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn4_3", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn5_1", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn5_2", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "bn5_3", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "conv1", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv1", ".", "add_module", "(", "'conv1_1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv1", ".", "add_module", "(", "'bn1_1'", ",", "self", ".", "bn1_1", ")", "\n", "conv1", ".", "add_module", "(", "'relu1_1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "conv1", ".", "add_module", "(", "'conv1_2'", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv1", ".", "add_module", "(", "'bn1_2'", ",", "self", ".", "bn1_2", ")", "\n", "conv1", ".", "add_module", "(", "'relu1_2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv1", "=", "conv1", "\n", "conv2", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv2", ".", "add_module", "(", "'pool1'", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ")", "\n", "conv2", ".", "add_module", "(", "'conv2_1'", ",", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv2", ".", "add_module", "(", "'bn2_1'", ",", "self", ".", "bn2_1", ")", "\n", "conv2", ".", "add_module", "(", "'relu2_1'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv2", ".", "add_module", "(", "'conv2_2'", ",", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv2", ".", "add_module", "(", "'bn2_2'", ",", "self", ".", "bn2_2", ")", "\n", "conv2", ".", "add_module", "(", "'relu2_2'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv2", "=", "conv2", "\n", "\n", "conv3", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv3", ".", "add_module", "(", "'pool2'", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ")", "\n", "conv3", ".", "add_module", "(", "'conv3_1'", ",", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv3", ".", "add_module", "(", "'bn3_1'", ",", "self", ".", "bn3_1", ")", "\n", "conv3", ".", "add_module", "(", "'relu3_1'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv3", ".", "add_module", "(", "'conv3_2'", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv3", ".", "add_module", "(", "'bn3_2'", ",", "self", ".", "bn3_2", ")", "\n", "conv3", ".", "add_module", "(", "'relu3_2'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv3", ".", "add_module", "(", "'conv3_3'", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv3", ".", "add_module", "(", "'bn3_3'", ",", "self", ".", "bn3_3", ")", "\n", "conv3", ".", "add_module", "(", "'relu3_3'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv3", "=", "conv3", "\n", "\n", "conv4", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv4", ".", "add_module", "(", "'pool3_1'", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ")", "\n", "conv4", ".", "add_module", "(", "'conv4_1'", ",", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv4", ".", "add_module", "(", "'bn4_1'", ",", "self", ".", "bn4_1", ")", "\n", "conv4", ".", "add_module", "(", "'relu4_1'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv4", ".", "add_module", "(", "'conv4_2'", ",", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv4", ".", "add_module", "(", "'bn4_2'", ",", "self", ".", "bn4_2", ")", "\n", "conv4", ".", "add_module", "(", "'relu4_2'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv4", ".", "add_module", "(", "'conv4_3'", ",", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv4", ".", "add_module", "(", "'bn4_3'", ",", "self", ".", "bn4_3", ")", "\n", "conv4", ".", "add_module", "(", "'relu4_3'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv4", "=", "conv4", "\n", "\n", "conv5", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv5", ".", "add_module", "(", "'pool4_1'", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ")", "\n", "conv5", ".", "add_module", "(", "'conv5_1'", ",", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv5", ".", "add_module", "(", "'bn5_1'", ",", "self", ".", "bn5_1", ")", "\n", "conv5", ".", "add_module", "(", "'relu5_1'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv5", ".", "add_module", "(", "'conv5_2'", ",", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv5", ".", "add_module", "(", "'bn5_2'", ",", "self", ".", "bn5_2", ")", "\n", "conv5", ".", "add_module", "(", "'relu5_2'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "conv5", ".", "add_module", "(", "'conv5_3'", ",", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "\n", "conv5", ".", "add_module", "(", "'bn5_3'", ",", "self", ".", "bn5_3", ")", "\n", "conv5", ".", "add_module", "(", "'relu5_3'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv5", "=", "conv5", "\n", "\n", "vgg16_bn", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "copy_params_from_vgg16_bn", "(", "vgg16_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16._initialize_weights": [[81, 88], ["vgg_16.VGG16.modules", "isinstance", "torch.init.normal", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# m.weight.data.zero_()", "\n", "                ", "nn", ".", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "std", "=", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16.forward": [[89, 96], ["vgg_16.VGG16.conv1", "vgg_16.VGG16.conv2", "vgg_16.VGG16.conv3", "vgg_16.VGG16.conv4", "vgg_16.VGG16.conv5"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "x4", ")", "\n", "return", "x3", ",", "x4", ",", "x5", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.vgg_16.VGG16.copy_params_from_vgg16_bn": [[97, 130], ["zip", "isinstance", "isinstance", "isinstance", "isinstance", "l1.weight.size", "l2.weight.size", "l1.bias.size", "l2.bias.size", "l1.weight.size", "l2.weight.size", "l1.bias.size", "l2.bias.size"], "methods", ["None"], ["", "def", "copy_params_from_vgg16_bn", "(", "self", ",", "vgg16_bn", ")", ":", "\n", "        ", "features", "=", "[", "\n", "self", ".", "conv1", ".", "conv1_1", ",", "self", ".", "conv1", ".", "bn1_1", ",", "self", ".", "conv1", ".", "relu1_1", ",", "\n", "self", ".", "conv1", ".", "conv1_2", ",", "self", ".", "conv1", ".", "bn1_2", ",", "self", ".", "conv1", ".", "relu1_2", ",", "\n", "self", ".", "conv2", ".", "pool1", ",", "\n", "self", ".", "conv2", ".", "conv2_1", ",", "self", ".", "conv2", ".", "bn2_1", ",", "self", ".", "conv2", ".", "relu2_1", ",", "\n", "self", ".", "conv2", ".", "conv2_2", ",", "self", ".", "conv2", ".", "bn2_2", ",", "self", ".", "conv2", ".", "relu2_2", ",", "\n", "self", ".", "conv3", ".", "pool2", ",", "\n", "self", ".", "conv3", ".", "conv3_1", ",", "self", ".", "conv3", ".", "bn3_1", ",", "self", ".", "conv3", ".", "relu3_1", ",", "\n", "self", ".", "conv3", ".", "conv3_2", ",", "self", ".", "conv3", ".", "bn3_2", ",", "self", ".", "conv3", ".", "relu3_2", ",", "\n", "self", ".", "conv3", ".", "conv3_3", ",", "self", ".", "conv3", ".", "bn3_3", ",", "self", ".", "conv3", ".", "relu3_3", ",", "\n", "# self.conv3_4, self.bn3_4, self.relu3_4,", "\n", "self", ".", "conv4", ".", "pool3_1", ",", "\n", "self", ".", "conv4", ".", "conv4_1", ",", "self", ".", "conv4", ".", "bn4_1", ",", "self", ".", "conv4", ".", "relu4_1", ",", "\n", "self", ".", "conv4", ".", "conv4_2", ",", "self", ".", "conv4", ".", "bn4_2", ",", "self", ".", "conv4", ".", "relu4_2", ",", "\n", "self", ".", "conv4", ".", "conv4_3", ",", "self", ".", "conv4", ".", "bn4_3", ",", "self", ".", "conv4", ".", "relu4_3", ",", "\n", "# self.conv4_4, self.bn4_4, self.relu4_4,", "\n", "self", ".", "conv5", ".", "pool4_1", ",", "\n", "self", ".", "conv5", ".", "conv5_1", ",", "self", ".", "conv5", ".", "bn5_1", ",", "self", ".", "conv5", ".", "relu5_1", ",", "\n", "self", ".", "conv5", ".", "conv5_2", ",", "self", ".", "conv5", ".", "bn5_2", ",", "self", ".", "conv5", ".", "relu5_2", ",", "\n", "self", ".", "conv5", ".", "conv5_3", ",", "self", ".", "conv5", ".", "bn5_3", ",", "self", ".", "conv5", ".", "relu5_3", ",", "\n", "]", "\n", "for", "l1", ",", "l2", "in", "zip", "(", "vgg16_bn", ".", "features", ",", "features", ")", ":", "\n", "            ", "if", "isinstance", "(", "l1", ",", "nn", ".", "Conv2d", ")", "and", "isinstance", "(", "l2", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "assert", "l1", ".", "weight", ".", "size", "(", ")", "==", "l2", ".", "weight", ".", "size", "(", ")", "\n", "assert", "l1", ".", "bias", ".", "size", "(", ")", "==", "l2", ".", "bias", ".", "size", "(", ")", "\n", "l2", ".", "weight", ".", "data", "=", "l1", ".", "weight", ".", "data", "\n", "l2", ".", "bias", ".", "data", "=", "l1", ".", "bias", ".", "data", "\n", "", "if", "isinstance", "(", "l1", ",", "nn", ".", "BatchNorm2d", ")", "and", "isinstance", "(", "l2", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "assert", "l1", ".", "weight", ".", "size", "(", ")", "==", "l2", ".", "weight", ".", "size", "(", ")", "\n", "assert", "l1", ".", "bias", ".", "size", "(", ")", "==", "l2", ".", "bias", ".", "size", "(", ")", "\n", "l2", ".", "weight", ".", "data", "=", "l1", ".", "weight", ".", "data", "\n", "l2", ".", "bias", ".", "data", "=", "l1", ".", "bias", ".", "data", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.BasicBlock.__init__": [[19, 28], ["torch.Module.__init__", "resnet_101.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_101.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.conv3x3", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.BasicBlock.forward": [[29, 46], ["resnet_101.BasicBlock.conv1", "resnet_101.BasicBlock.bn1", "resnet_101.BasicBlock.relu", "resnet_101.BasicBlock.conv2", "resnet_101.BasicBlock.bn2", "resnet_101.BasicBlock.relu", "resnet_101.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.Bottleneck.__init__": [[51, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.Bottleneck.forward": [[64, 85], ["resnet_101.Bottleneck.conv1", "resnet_101.Bottleneck.bn1", "resnet_101.Bottleneck.relu", "resnet_101.Bottleneck.conv2", "resnet_101.Bottleneck.bn2", "resnet_101.Bottleneck.relu", "resnet_101.Bottleneck.conv3", "resnet_101.Bottleneck.bn3", "resnet_101.Bottleneck.relu", "resnet_101.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__": [[89, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_101.ResNet._make_layer", "resnet_101.ResNet._make_layer", "resnet_101.ResNet._make_layer", "resnet_101.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_101.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.__init__", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet._make_layer", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet._make_layer", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet._make_layer", "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet._make_layer": [[111, 127], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.ResNet.forward": [[128, 143], ["resnet_101.ResNet.conv1", "resnet_101.ResNet.bn1", "resnet_101.ResNet.relu", "resnet_101.ResNet.maxpool", "resnet_101.ResNet.layer1", "resnet_101.ResNet.layer2", "resnet_101.ResNet.layer3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "out2", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out3", "=", "self", ".", "layer2", "(", "out2", ")", "\n", "out4", "=", "self", ".", "layer3", "(", "out3", ")", "\n", "\"\"\"\n        x = self.avgpool(x)\n        x = x.view(x.size(0), -1)\n        x = self.fc(x)\n        \"\"\"", "\n", "return", "out2", ",", "out3", ",", "out4", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.conv3x3": [[11, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oiplab-dut_mfnet.backbone.resnet_101.resnet101": [[145, 154], ["resnet_101.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]]}