{"home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.imagenet.ImageNet.get_classifier": [[23, 26], ["resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet50"], ["@", "staticmethod", "\n", "def", "get_classifier", "(", ")", ":", "\n", "        ", "return", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.imagenet.ImageNet.get_framing": [[27, 31], ["framing.Framing"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_framing", "(", "width", ",", "keep_size", "=", "False", ")", ":", "\n", "        ", "return", "Framing", "(", "width", "=", "width", ",", "image_side_length", "=", "ImageNet", ".", "SIDE_LENGTH", ",", "normalize", "=", "ImageNet", ".", "normalize_not_in_place", ",", "\n", "scale", "=", "1.", ",", "keep_size", "=", "keep_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.imagenet.ImageNet.get_data_loaders": [[32, 51], ["os.path.join", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "train_transforms.append", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "val_transforms.append", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_data_loaders", "(", "batch_size", ",", "num_workers", ",", "normalize", "=", "True", ",", "shuffle_val", "=", "False", ")", ":", "\n", "        ", "train_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'IMAGENET_DATA_DIR'", "]", ",", "'train'", ")", "\n", "val_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'IMAGENET_DATA_DIR'", "]", ",", "'val'", ")", "\n", "\n", "train_transforms", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "normalize", ":", "\n", "            ", "train_transforms", ".", "append", "(", "ImageNet", ".", "normalize", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "train_dir", ",", "transforms", ".", "Compose", "(", "train_transforms", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "\n", "val_transforms", "=", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "normalize", ":", "\n", "            ", "val_transforms", ".", "append", "(", "ImageNet", ".", "normalize", ")", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "val_dir", ",", "transforms", ".", "Compose", "(", "val_transforms", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle_val", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.imagenet.ImageNet.normalize_not_in_place": [[52, 60], ["list", "range", "input.new_tensor().view", "input.new_tensor().view", "input.size", "len", "input.new_tensor", "input.new_tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "normalize_not_in_place", "(", "input", ")", ":", "\n", "        ", "params_shape", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "params_shape", ")", ")", ":", "\n", "            ", "params_shape", "[", "i", "]", "=", "1", "\n", "", "mean", "=", "input", ".", "new_tensor", "(", "ImageNet", ".", "MEAN", ")", ".", "view", "(", "params_shape", ")", "\n", "std", "=", "input", ".", "new_tensor", "(", "ImageNet", ".", "STD_DEV", ")", ".", "view", "(", "params_shape", ")", "\n", "return", "(", "input", "-", "mean", ")", "/", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.imagenet.load_pretrained_imagenet_framing": [[62, 69], ["torch.load", "imagenet.ImageNet.get_framing", "ImageNet.get_framing.load_state_dict", "ImageNet.get_framing.eval", "getattr"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_framing"], ["", "", "def", "load_pretrained_imagenet_framing", "(", "checkpoint_path", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "framing", "=", "ImageNet", ".", "get_framing", "(", "args", ".", "width", ",", "keep_size", "=", "getattr", "(", "args", ",", "'keep_size'", ",", "False", ")", ")", "\n", "framing", ".", "load_state_dict", "(", "checkpoint", "[", "'framing'", "]", ")", "\n", "framing", ".", "eval", "(", ")", "\n", "return", "framing", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.__init__": [[15, 44], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "logger.Logger", "trainer.Trainer.logger.log_str", "dataset.get_classifier().to", "trainer.Trainer.classifier.eval", "trainer.Trainer.classifier.parameters", "dataset.get_framing().to", "dataset.get_data_loaders", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.join", "str", "random.randint", "trainer.Trainer.framing.parameters", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.get_current_datetime", "os.path.join", "dataset.get_classifier", "dataset.get_framing", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.log_str", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_data_loaders", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.get_current_datetime", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_classifier", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_framing"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "if", "not", "args", ".", "run_id", ":", "\n", "            ", "args", ".", "run_id", "=", "'{}-{}'", ".", "format", "(", "args", ".", "dataset", ",", "get_current_datetime", "(", ")", ")", "\n", "", "self", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "args", ".", "run_id", ")", "+", "'.chk'", "\n", "self", ".", "logger", "=", "Logger", "(", "tb_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "tb_dir", ",", "args", ".", "run_id", ")", ",", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "run_id", ")", "+", "'.log'", ")", "\n", "self", ".", "logger", ".", "log_str", "(", "str", "(", "args", ")", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "target", "=", "args", ".", "target", "\n", "\n", "dataset", "=", "{", "'imagenet'", ":", "ImageNet", ",", "'ucf101'", ":", "UCF101", "}", "[", "args", ".", "dataset", "]", "\n", "\n", "self", ".", "classifier", "=", "dataset", ".", "get_classifier", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "classifier", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "framing", "=", "dataset", ".", "get_framing", "(", "args", ".", "width", ",", "keep_size", "=", "args", ".", "keep_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", "=", "dataset", ".", "get_data_loaders", "(", "args", ".", "batch_size", ",", "args", ".", "workers", ")", "\n", "if", "self", ".", "target", "==", "-", "1", ":", "\n", "            ", "self", ".", "target", "=", "random", ".", "randint", "(", "0", ",", "dataset", ".", "NUM_CLASSES", "-", "1", ")", "\n", "", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "framing", ".", "parameters", "(", ")", ",", "args", ".", "lr", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.adjust_learning_rate": [[45, 49], ["None"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "%", "self", ".", "args", ".", "lr_decay_wait", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "*=", "self", ".", "args", ".", "lr_decay_coefficient", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.process_epoch": [[50, 106], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "enumerate", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "input.to", "target.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.classifier", "trainer.Trainer.criterion", "trainer.Trainer.item", "input.size", "utils.accuracy().item", "input.size", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "trainer.Trainer.framing", "trainer.Trainer.classifier", "trainer.Trainer.criterion", "trainer.Trainer.item", "input.size", "utils.accuracy().item", "input.size", "trainer.Trainer.optimizer.zero_grad", "framing_loss.backward", "trainer.Trainer.optimizer.step", "input.size", "target.new_ones", "trainer.Trainer.logger.log_kv", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "len", "trainer.Trainer.logger.log_kv", "target.size", "utils.accuracy", "utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.log_kv", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.log_kv", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.accuracy", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.accuracy"], ["", "", "", "def", "process_epoch", "(", "self", ",", "train", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "data_loader", "=", "self", ".", "train_loader", "\n", "", "else", ":", "\n", "            ", "data_loader", "=", "self", ".", "val_loader", "\n", "\n", "", "loss_unatt_agg", "=", "AverageMeter", "(", ")", "\n", "acc_unatt_agg", "=", "AverageMeter", "(", ")", "\n", "loss_att_agg", "=", "AverageMeter", "(", ")", "\n", "acc_att_agg", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "self", ".", "target", ":", "\n", "                ", "target", "=", "self", ".", "target", "*", "target", ".", "new_ones", "(", "target", ".", "size", "(", ")", ")", "\n", "", "input", ",", "target", "=", "input", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "classifier", "(", "input", ")", "\n", "los_unatt", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "", "loss_unatt_agg", ".", "update", "(", "los_unatt", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "acc_unatt_agg", ".", "update", "(", "accuracy", "(", "output", ",", "target", ")", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "train", ")", ":", "\n", "                ", "input_att", ",", "_", "=", "self", ".", "framing", "(", "input", "=", "input", ")", "\n", "output_att", "=", "self", ".", "classifier", "(", "input_att", ")", "\n", "loss_att", "=", "self", ".", "criterion", "(", "output_att", ",", "target", ")", "\n", "", "loss_att_agg", ".", "update", "(", "loss_att", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "acc_att_agg", ".", "update", "(", "accuracy", "(", "output_att", ",", "target", ")", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "train", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "framing_loss", "=", "loss_att", "if", "self", ".", "target", "is", "not", "None", "else", "-", "loss_att", "\n", "framing_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "step", "+=", "input", ".", "size", "(", "0", ")", "\n", "\n", "", "if", "train", ":", "\n", "                ", "if", "(", "i", "+", "1", ")", "%", "self", ".", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "log_kv", "(", "[", "\n", "(", "'unatt_loss'", ",", "loss_unatt_agg", ".", "avg", ")", ",", "\n", "(", "'att_loss'", ",", "loss_att_agg", ".", "avg", ")", ",", "\n", "(", "'unatt_acc'", ",", "acc_unatt_agg", ".", "avg", ")", ",", "\n", "(", "'att_acc'", ",", "acc_att_agg", ".", "avg", ")", ",", "\n", "]", ",", "prefix", "=", "'train'", ",", "step", "=", "self", ".", "step", ",", "write_to_tb", "=", "True", ")", "\n", "loss_unatt_agg", ".", "reset", "(", ")", "\n", "loss_att_agg", ".", "reset", "(", ")", "\n", "acc_unatt_agg", ".", "reset", "(", ")", "\n", "acc_att_agg", ".", "reset", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "i", "+", "1", "==", "len", "(", "data_loader", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "log_kv", "(", "[", "\n", "(", "'unatt_loss'", ",", "loss_unatt_agg", ".", "avg", ")", ",", "\n", "(", "'att_loss'", ",", "loss_att_agg", ".", "avg", ")", ",", "\n", "(", "'unatt_acc'", ",", "acc_unatt_agg", ".", "avg", ")", ",", "\n", "(", "'att_acc'", ",", "acc_att_agg", ".", "avg", ")", ",", "\n", "]", ",", "prefix", "=", "'eval'", ",", "step", "=", "self", ".", "step", ",", "write_to_tb", "=", "True", ",", "write_to_file", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.train": [[107, 118], ["range", "trainer.Trainer.process_epoch", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.Trainer.process_epoch", "trainer.Trainer.adjust_learning_rate", "trainer.Trainer.framing.state_dict", "trainer.Trainer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.process_epoch", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.process_epoch", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.trainer.Trainer.adjust_learning_rate"], ["", "", "", "", "def", "train", "(", "self", ",", "epochs", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "process_epoch", "(", "train", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'framing'", ":", "self", ".", "framing", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "}", ",", "self", ".", "checkpoint_path", ")", "\n", "self", ".", "process_epoch", "(", "train", "=", "False", ")", "\n", "self", ".", "adjust_learning_rate", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.__init__": [[5, 8], ["tensorflow.summary.FileWriter", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tb_dir", ",", "log_path", ")", ":", "\n", "        ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "tb_dir", ")", "\n", "self", ".", "file", "=", "open", "(", "log_path", ",", "'w+'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.__del__": [[9, 11], ["logger.Logger.file.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.log_kv": [[12, 22], ["print", "logger.Logger.file.write", "logger.Logger.file.flush", "logger.Logger.scalar_summary"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.scalar_summary"], ["", "def", "log_kv", "(", "self", ",", "key_value_list", ",", "prefix", ",", "step", ",", "write_to_tb", "=", "False", ",", "write_to_file", "=", "False", ")", ":", "\n", "        ", "message", "=", "'{prefix}, step {step}: '", ".", "format", "(", "prefix", "=", "prefix", ",", "step", "=", "step", ")", "\n", "for", "key", ",", "value", "in", "key_value_list", ":", "\n", "            ", "if", "write_to_tb", ":", "\n", "                ", "self", ".", "scalar_summary", "(", "'{}_{}'", ".", "format", "(", "prefix", ",", "key", ")", ",", "value", ",", "step", ")", "\n", "", "message", "+=", "'{} {:.3}\\t'", ".", "format", "(", "key", ",", "value", ")", "\n", "", "print", "(", "message", ")", "\n", "if", "write_to_file", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "message", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.log_str": [[23, 27], ["print", "logger.Logger.file.write", "logger.Logger.file.flush"], "methods", ["None"], ["", "", "def", "log_str", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "self", ".", "file", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.logger.Logger.scalar_summary": [[28, 31], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_classifier": [[84, 106], ["resnets_3d.model.generate_model", "torch.load", "classifier.load_state_dict", "bunch.Bunch", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.model.generate_model"], ["@", "staticmethod", "\n", "def", "get_classifier", "(", ")", ":", "\n", "        ", "classifier", ",", "_", "=", "generate_model", "(", "Bunch", "(", "\n", "model", "=", "'resnext'", ",", "\n", "model_depth", "=", "101", ",", "\n", "resnet_shortcut", "=", "'B'", ",", "\n", "resnext_cardinality", "=", "32", ",", "\n", "n_classes", "=", "101", ",", "\n", "sample_size", "=", "UCF101", ".", "SIDE_LENGTH", ",", "\n", "sample_duration", "=", "16", ",", "\n", "no_cuda", "=", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", "arch", "=", "'resnext-101'", ",", "\n", "n_finetune_classes", "=", "101", ",", "\n", "ft_begin_index", "=", "0", ",", "\n", "pretrain_path", "=", "None", "\n", ")", ")", "\n", "\n", "resume_path", "=", "os", ".", "environ", "[", "'UCF101_MODEL'", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_data_loaders": [[107, 116], ["ucf101.get_ucf101_train_data_loader", "ucf101.get_ucf101_val_data_loader"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.get_ucf101_train_data_loader", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.get_ucf101_val_data_loader"], ["", "@", "staticmethod", "\n", "def", "get_data_loaders", "(", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "environ", "[", "'UCF101_DATA_DIR'", "]", "\n", "annotation_path", "=", "os", ".", "environ", "[", "'UCF101_ANNOTATION_PATH'", "]", "\n", "train_loader", ",", "_", "=", "get_ucf101_train_data_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "\n", "data_dir", "=", "data_dir", ",", "annotation_path", "=", "annotation_path", ")", "\n", "val_loader", ",", "_", "=", "get_ucf101_val_data_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "\n", "data_dir", "=", "data_dir", ",", "annotation_path", "=", "annotation_path", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.get_framing": [[117, 121], ["framing.Framing"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_framing", "(", "width", ",", "keep_size", "=", "False", ")", ":", "\n", "        ", "return", "Framing", "(", "width", "=", "width", ",", "image_side_length", "=", "UCF101", ".", "SIDE_LENGTH", ",", "normalize", "=", "UCF101", ".", "normalize_not_in_place", ",", "\n", "scale", "=", "255.", ",", "keep_size", "=", "keep_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.UCF101.normalize_not_in_place": [[122, 129], ["list", "range", "input.new_tensor().view", "input.size", "len", "input.new_tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "normalize_not_in_place", "(", "input", ")", ":", "\n", "        ", "params_shape", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "params_shape", ")", ")", ":", "\n", "            ", "params_shape", "[", "i", "]", "=", "1", "\n", "", "mean", "=", "input", ".", "new_tensor", "(", "UCF101", ".", "MEAN", ")", ".", "view", "(", "params_shape", ")", "\n", "return", "input", "-", "mean", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.get_ucf101_train_data_loader": [[13, 41], ["resnets_3d.mean.get_mean", "resnets_3d.spatial_transforms.Normalize", "range", "resnets_3d.spatial_transforms.Compose", "resnets_3d.temporal_transforms.TemporalRandomCrop", "resnets_3d.target_transforms.ClassLabel", "bunch.Bunch", "resnets_3d.dataset.get_training_set", "torch.utils.data.DataLoader", "scales.append", "resnets_3d.spatial_transforms.MultiScaleCornerCrop", "resnets_3d.spatial_transforms.RandomHorizontalFlip", "resnets_3d.spatial_transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.mean.get_mean", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.dataset.get_training_set"], ["def", "get_ucf101_train_data_loader", "(", "batch_size", ",", "num_workers", ",", "data_dir", ",", "annotation_path", ")", ":", "\n", "    ", "norm_value", "=", "1", "\n", "mean", "=", "get_mean", "(", "norm_value", ",", "dataset", "=", "'kinetics'", ")", "\n", "normalize", "=", "spatial_transforms", ".", "Normalize", "(", "mean", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "scales", "=", "[", "1.0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "scales", ".", "append", "(", "scales", "[", "-", "1", "]", "*", "0.84089641525", ")", "\n", "", "spatial_transform", "=", "spatial_transforms", ".", "Compose", "(", "[", "\n", "spatial_transforms", ".", "MultiScaleCornerCrop", "(", "scales", ",", "UCF101", ".", "SIDE_LENGTH", ")", ",", "\n", "spatial_transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "spatial_transforms", ".", "ToTensor", "(", "norm_value", ")", ",", "normalize", "\n", "]", ")", "\n", "temporal_transform", "=", "temporal_transforms", ".", "TemporalRandomCrop", "(", "16", ")", "\n", "target_transform", "=", "target_transforms", ".", "ClassLabel", "(", ")", "\n", "opt", "=", "Bunch", "(", "\n", "dataset", "=", "'ucf101'", ",", "\n", "video_path", "=", "data_dir", ",", "\n", "annotation_path", "=", "annotation_path", ",", "\n", ")", "\n", "training_data", "=", "resnets_3d", ".", "dataset", ".", "get_training_set", "(", "opt", ",", "spatial_transform", ",", "\n", "temporal_transform", ",", "target_transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "training_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "training_data", ".", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.ucf101.get_ucf101_val_data_loader": [[43, 77], ["resnets_3d.mean.get_mean", "resnets_3d.spatial_transforms.Normalize", "resnets_3d.spatial_transforms.Compose", "resnets_3d.target_transforms.ClassLabel", "bunch.Bunch", "resnets_3d.dataset.get_validation_set", "torch.utils.data.DataLoader", "resnets_3d.spatial_transforms.Scale", "resnets_3d.spatial_transforms.CenterCrop", "resnets_3d.spatial_transforms.ToTensor", "transforms.append", "resnets_3d.temporal_transforms.LoopPadding"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.mean.get_mean", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.dataset.get_validation_set"], ["", "def", "get_ucf101_val_data_loader", "(", "batch_size", ",", "num_workers", ",", "data_dir", ",", "annotation_path", ",", "shuffle", "=", "False", ",", "normalize", "=", "True", ",", "\n", "whole_videos", "=", "False", ")", ":", "\n", "    ", "norm_value", "=", "1", "\n", "mean", "=", "get_mean", "(", "norm_value", ",", "dataset", "=", "'kinetics'", ")", "\n", "normalization_transform", "=", "spatial_transforms", ".", "Normalize", "(", "mean", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "transforms", "=", "[", "\n", "spatial_transforms", ".", "Scale", "(", "UCF101", ".", "SIDE_LENGTH", ")", ",", "\n", "spatial_transforms", ".", "CenterCrop", "(", "UCF101", ".", "SIDE_LENGTH", ")", ",", "\n", "spatial_transforms", ".", "ToTensor", "(", "norm_value", "=", "norm_value", ")", "\n", "]", "\n", "if", "normalize", ":", "\n", "        ", "transforms", ".", "append", "(", "normalization_transform", ")", "\n", "", "spatial_transform", "=", "spatial_transforms", ".", "Compose", "(", "transforms", ")", "\n", "if", "whole_videos", ":", "\n", "        ", "temporal_transform", "=", "None", "\n", "", "else", ":", "\n", "        ", "temporal_transform", "=", "temporal_transforms", ".", "LoopPadding", "(", "16", ")", "\n", "", "target_transform", "=", "target_transforms", ".", "ClassLabel", "(", ")", "\n", "opt", "=", "Bunch", "(", "\n", "dataset", "=", "'ucf101'", ",", "\n", "video_path", "=", "data_dir", ",", "\n", "annotation_path", "=", "annotation_path", ",", "\n", "n_val_samples", "=", "1", "if", "whole_videos", "else", "3", ",", "\n", "sample_duration", "=", "16", "\n", ")", "\n", "validation_data", "=", "resnets_3d", ".", "dataset", ".", "get_validation_set", "(", "\n", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "val_loader", ",", "validation_data", ".", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.resnet.Bottleneck.__init__": [[20, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.resnet.Bottleneck.forward": [[33, 54], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.resnet.ResNet.__init__": [[57, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.resnet.ResNet._make_layer": [[80, 96], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.resnet.ResNet.forward": [[97, 114], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "self", ".", "avgpool", ".", "kernel_size", "=", "x", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.resnet.resnet50": [[116, 126], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.framing.Framing.__init__": [[7, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "image_side_length", ",", "normalize", ",", "scale", ",", "keep_size", "=", "False", ")", ":", "\n", "        ", "super", "(", "Framing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "# If keep_size is True, unattacked and attacked images will have the same size.", "\n", "self", ".", "keep_size", "=", "keep_size", "\n", "if", "keep_size", ":", "\n", "            ", "self", ".", "length", "=", "image_side_length", "-", "width", "\n", "", "else", ":", "\n", "            ", "self", ".", "length", "=", "image_side_length", "+", "width", "\n", "", "self", ".", "attack_shape", "=", "[", "3", ",", "self", ".", "width", ",", "self", ".", "length", ",", "4", "]", "\n", "\n", "self", ".", "attack", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "attack_shape", ")", ".", "normal_", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.framing.Framing.forward": [[24, 62], ["input.permute().contiguous().view.permute().contiguous().view.size", "list", "list", "input.permute().contiguous().view.permute().contiguous().view.new_zeros", "attack[].transpose", "attack[].transpose", "framing.Framing.sigmoid", "framing.Framing.normalize", "len", "input.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input.permute().contiguous().view.permute().contiguous().view.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "len", "framed_input.permute.permute.view", "framed_input.permute.permute.permute", "input.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "attack", "=", "self", ".", "scale", "*", "self", ".", "sigmoid", "(", "self", ".", "attack", ")", "\n", "if", "normalize", ":", "\n", "            ", "attack", "=", "self", ".", "normalize", "(", "attack", ")", "\n", "\n", "", "input_size", "=", "input", ".", "size", "(", ")", "\n", "attacked_size", "=", "list", "(", "input_size", ")", "\n", "if", "not", "self", ".", "keep_size", ":", "\n", "            ", "attacked_size", "[", "-", "2", "]", "=", "self", ".", "length", "+", "self", ".", "width", "\n", "attacked_size", "[", "-", "1", "]", "=", "self", ".", "length", "+", "self", ".", "width", "\n", "\n", "", "if", "len", "(", "input_size", ")", "==", "5", ":", "\n", "# swap color and time dimensions, merge batch and time dimensions", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input_size", "[", "1", "]", ",", "input_size", "[", "3", "]", ",", "input_size", "[", "4", "]", ")", "\n", "\n", "", "attacked_size_merged", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "if", "not", "self", ".", "keep_size", ":", "\n", "            ", "attacked_size_merged", "[", "-", "2", "]", "=", "self", ".", "length", "+", "self", ".", "width", "\n", "attacked_size_merged", "[", "-", "1", "]", "=", "self", ".", "length", "+", "self", ".", "width", "\n", "\n", "", "if", "self", ".", "keep_size", ":", "\n", "            ", "inner", "=", "F", ".", "interpolate", "(", "input", ",", "size", "=", "(", "self", ".", "length", "-", "self", ".", "width", ",", "self", ".", "length", "-", "self", ".", "width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "            ", "inner", "=", "input", "\n", "\n", "", "framed_input", "=", "input", ".", "new_zeros", "(", "attacked_size_merged", ")", "\n", "framed_input", "[", "...", ",", "self", ".", "width", ":", "-", "self", ".", "width", ",", "self", ".", "width", ":", "-", "self", ".", "width", "]", "=", "inner", "\n", "framed_input", "[", "...", ",", ":", "self", ".", "width", ",", ":", "-", "self", ".", "width", "]", "=", "attack", "[", "...", ",", "0", "]", "\n", "framed_input", "[", "...", ",", ":", "-", "self", ".", "width", ",", "-", "self", ".", "width", ":", "]", "=", "attack", "[", "...", ",", "1", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "framed_input", "[", "...", ",", "-", "self", ".", "width", ":", ",", "self", ".", "width", ":", "]", "=", "attack", "[", "...", ",", "2", "]", "\n", "framed_input", "[", "...", ",", "self", ".", "width", ":", ",", ":", "self", ".", "width", "]", "=", "attack", "[", "...", ",", "3", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "len", "(", "input_size", ")", "==", "5", ":", "\n", "            ", "framed_input", "=", "framed_input", ".", "view", "(", "attacked_size", "[", "0", "]", ",", "attacked_size", "[", "2", "]", ",", "attacked_size", "[", "1", "]", ",", "attacked_size", "[", "3", "]", ",", "\n", "attacked_size", "[", "4", "]", ")", "\n", "framed_input", "=", "framed_input", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "\n", "", "return", "framed_input", ",", "attack", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.AverageMeter.__init__": [[8, 10], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.AverageMeter.reset": [[11, 16], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.AverageMeter.update": [[17, 22], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.accuracy": [[24, 28], ["torch.no_grad", "torch.max"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", ",", "predicted", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "return", "100.", "*", "(", "predicted", "==", "target", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "output", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.None.utils.get_current_datetime": [[30, 32], ["time.strftime", "time.gmtime"], "function", ["None"], ["", "", "def", "get_current_datetime", "(", ")", ":", "\n", "    ", "return", "strftime", "(", "\"%y-%m-%d-%H-%M-%S\"", ",", "gmtime", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.opts.parse_opts": [[4, 234], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_opts", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--root_path'", ",", "\n", "default", "=", "'/root/data/ActivityNet'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Root directory path of data'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--video_path'", ",", "\n", "default", "=", "'video_kinetics_jpg'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Directory path of Videos'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--annotation_path'", ",", "\n", "default", "=", "'kinetics.json'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--result_path'", ",", "\n", "default", "=", "'results'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Result directory path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "default", "=", "'kinetics'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Used dataset (activitynet | kinetics | ucf101 | hmdb51)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_classes'", ",", "\n", "default", "=", "400", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\n", "'Number of classes (activitynet: 200, kinetics: 400, ucf101: 101, hmdb51: 51)'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_finetune_classes'", ",", "\n", "default", "=", "400", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\n", "'Number of classes for fine-tuning. n_classes is set to the number when pretraining.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sample_size'", ",", "\n", "default", "=", "112", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Height and width of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sample_duration'", ",", "\n", "default", "=", "16", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Temporal duration of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--initial_scale'", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Initial scale for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_scales'", ",", "\n", "default", "=", "5", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of scales for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--scale_step'", ",", "\n", "default", "=", "0.84089641525", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Scale step for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--train_crop'", ",", "\n", "default", "=", "'corner'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\n", "'Spatial cropping method in training. random is uniform. corner is selection from 4 corners and 1 center.  (random | corner | center)'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--learning_rate'", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\n", "'Initial learning rate (divided by 10 while training by lr scheduler)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'Momentum'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dampening'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'dampening of SGD'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--weight_decay'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "help", "=", "'Weight Decay'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mean_dataset'", ",", "\n", "default", "=", "'activitynet'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\n", "'dataset for mean values of mean subtraction (activitynet | kinetics)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_mean_norm'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, inputs are not normalized by mean.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_mean_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--std_norm'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, inputs are normalized by standard deviation.'", ")", "\n", "parser", ".", "set_defaults", "(", "std_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Nesterov momentum'", ")", "\n", "parser", ".", "set_defaults", "(", "nesterov", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--optimizer'", ",", "\n", "default", "=", "'sgd'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Currently only support SGD'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr_patience'", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Patience of LR scheduler. See documentation of ReduceLROnPlateau.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch_size'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Batch Size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_epochs'", ",", "\n", "default", "=", "200", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--begin_epoch'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\n", "'Training begins at this epoch. Previous trained model indicated by resume_path is loaded.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_val_samples'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of validation samples for each activity'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_path'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Save data (.pth) of previous training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pretrain_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Pretrained model (.pth)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ft_begin_index'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Begin block index of fine-tuning'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_train'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, training is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_train", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_val'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, validation is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_val", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, test is performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test_subset'", ",", "\n", "default", "=", "'val'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Used subset in test (val | test)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--scale_in_test'", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Spatial scale in test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--crop_position_in_test'", ",", "\n", "default", "=", "'c'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Cropping method (c | tl | tr | bl | br) in test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_softmax_in_test'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, output for each clip is not normalized using softmax.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_softmax_in_test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, cuda is not used.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_cuda", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_threads'", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of threads for multi-thread loading'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint'", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Trained model is saved at every this epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no_hflip'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true holizontal flipping is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_hflip", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--norm_value'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\n", "'If 1, range of inputs is [0-255]. If 255, range of inputs is [0-1].'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model'", ",", "\n", "default", "=", "'resnet'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'(resnet | preresnet | wideresnet | resnext | densenet | '", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model_depth'", ",", "\n", "default", "=", "18", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Depth of resnet (10 | 18 | 34 | 50 | 101)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resnet_shortcut'", ",", "\n", "default", "=", "'B'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Shortcut type of resnet (A | B)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wide_resnet_k'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'Wide resnet k'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resnext_cardinality'", ",", "\n", "default", "=", "32", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'ResNeXt cardinality'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--manual_seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Manually set random seed'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Compose.__init__": [[25, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Compose.__call__": [[28, 32], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Compose.randomize_parameters": [[33, 36], ["t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "randomize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.ToTensor.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "norm_value", "=", "norm_value", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.ToTensor.__call__": [[47, 88], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL.Image or numpy.ndarray): Image to be converted to tensor.\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.ToTensor.randomize_parameters": [[89, 91], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Normalize.__init__": [[104, 107], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Normalize.__call__": [[108, 119], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Normalize.randomize_parameters": [[120, 122], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Scale.__init__": [[136, 142], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "\n", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "\n", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Scale.__call__": [[143, 164], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.Scale.randomize_parameters": [[165, 167], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.CenterCrop.__init__": [[177, 182], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.CenterCrop.__call__": [[183, 195], ["int", "int", "img.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.CenterCrop.randomize_parameters": [[196, 198], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.CornerCrop.__init__": [[202, 210], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_position", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "crop_position", "is", "None", ":", "\n", "            ", "self", ".", "randomize", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "randomize", "=", "False", "\n", "", "self", ".", "crop_position", "=", "crop_position", "\n", "self", ".", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.CornerCrop.__call__": [[211, 245], ["img.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "th", ",", "tw", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "x1", "=", "int", "(", "round", "(", "(", "image_width", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "image_height", "-", "th", ")", "/", "2.", ")", ")", "\n", "x2", "=", "x1", "+", "tw", "\n", "y2", "=", "y1", "+", "th", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.CornerCrop.randomize_parameters": [[246, 251], ["random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "randomize", ":", "\n", "            ", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.RandomHorizontalFlip.__call__": [[256, 266], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.RandomHorizontalFlip.randomize_parameters": [[267, 269], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleCornerCrop.__init__": [[282, 292], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scales", ",", "\n", "size", ",", "\n", "interpolation", "=", "Image", ".", "BILINEAR", ",", "\n", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "self", ".", "crop_positions", "=", "crop_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleCornerCrop.__call__": [[293, 332], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "center_x", "=", "image_width", "//", "2", "\n", "center_y", "=", "image_height", "//", "2", "\n", "box_half", "=", "crop_size", "//", "2", "\n", "x1", "=", "center_x", "-", "box_half", "\n", "y1", "=", "center_y", "-", "box_half", "\n", "x2", "=", "center_x", "+", "box_half", "\n", "y2", "=", "center_y", "+", "box_half", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleCornerCrop.randomize_parameters": [[333, 338], ["random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.__init__": [[342, 346], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.__call__": [[347, 362], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", "\n", "y1", "=", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.randomize_parameters": [[363, 367], ["random.random", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.dataset.get_training_set": [[7, 46], ["datasets.kinetics.Kinetics", "datasets.activitynet.ActivityNet", "datasets.ucf101.UCF101", "datasets.hmdb51.HMDB51"], "function", ["None"], ["def", "get_training_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "\n", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'activitynet'", ",", "'ucf101'", ",", "'hmdb51'", "]", "\n", "\n", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "training_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'activitynet'", ":", "\n", "        ", "training_data", "=", "ActivityNet", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "False", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "training_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "training_data", "=", "HMDB51", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "", "return", "training_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.dataset.get_validation_set": [[48, 94], ["datasets.kinetics.Kinetics", "datasets.activitynet.ActivityNet", "datasets.ucf101.UCF101", "datasets.hmdb51.HMDB51"], "function", ["None"], ["", "def", "get_validation_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "\n", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'activitynet'", ",", "'ucf101'", ",", "'hmdb51'", "]", "\n", "\n", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "validation_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'activitynet'", ":", "\n", "        ", "validation_data", "=", "ActivityNet", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "False", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "validation_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "validation_data", "=", "HMDB51", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "validation_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.dataset.get_test_set": [[96, 147], ["datasets.kinetics.Kinetics", "datasets.activitynet.ActivityNet", "datasets.ucf101.UCF101", "datasets.hmdb51.HMDB51"], "function", ["None"], ["", "def", "get_test_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'activitynet'", ",", "'ucf101'", ",", "'hmdb51'", "]", "\n", "assert", "opt", ".", "test_subset", "in", "[", "'val'", ",", "'test'", "]", "\n", "\n", "if", "opt", ".", "test_subset", "==", "'val'", ":", "\n", "        ", "subset", "=", "'validation'", "\n", "", "elif", "opt", ".", "test_subset", "==", "'test'", ":", "\n", "        ", "subset", "=", "'testing'", "\n", "", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "test_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'activitynet'", ":", "\n", "        ", "test_data", "=", "ActivityNet", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "True", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "test_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "test_data", "=", "HMDB51", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "\n", "", "return", "test_data", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.test.calculate_video_results": [[12, 25], ["torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.topk", "torch.topk", "range", "sorted_scores.size", "video_results.append"], "function", ["None"], ["def", "calculate_video_results", "(", "output_buffer", ",", "video_id", ",", "test_results", ",", "class_names", ")", ":", "\n", "    ", "video_outputs", "=", "torch", ".", "stack", "(", "output_buffer", ")", "\n", "average_scores", "=", "torch", ".", "mean", "(", "video_outputs", ",", "dim", "=", "0", ")", "\n", "sorted_scores", ",", "locs", "=", "torch", ".", "topk", "(", "average_scores", ",", "k", "=", "10", ")", "\n", "\n", "video_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sorted_scores", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "video_results", ".", "append", "(", "{", "\n", "'label'", ":", "class_names", "[", "locs", "[", "i", "]", "]", ",", "\n", "'score'", ":", "sorted_scores", "[", "i", "]", "\n", "}", ")", "\n", "\n", "", "test_results", "[", "'results'", "]", "[", "video_id", "]", "=", "video_results", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.test.test": [[27, 75], ["print", "model.eval", "utils_file.AverageMeter", "utils_file.AverageMeter", "time.time", "enumerate", "utils_file.AverageMeter.update", "torch.autograd.Variable", "model", "range", "utils_file.AverageMeter.update", "time.time", "print", "open", "json.dump", "torch.softmax", "F.softmax.size", "output_buffer.append", "os.path.join", "time.time", "test.calculate_video_results", "outputs[].data.cpu", "open", "json.dump", "time.time", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.test.calculate_video_results"], ["", "def", "test", "(", "data_loader", ",", "model", ",", "opt", ",", "class_names", ")", ":", "\n", "    ", "print", "(", "'test'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "output_buffer", "=", "[", "]", "\n", "previous_video_id", "=", "''", "\n", "test_results", "=", "{", "'results'", ":", "{", "}", "}", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end_time", ")", "\n", "\n", "inputs", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "not", "opt", ".", "no_softmax_in_test", ":", "\n", "            ", "outputs", "=", "F", ".", "softmax", "(", "outputs", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "not", "(", "i", "==", "0", "and", "j", "==", "0", ")", "and", "targets", "[", "j", "]", "!=", "previous_video_id", ":", "\n", "                ", "calculate_video_results", "(", "output_buffer", ",", "previous_video_id", ",", "\n", "test_results", ",", "class_names", ")", "\n", "output_buffer", "=", "[", "]", "\n", "", "output_buffer", ".", "append", "(", "outputs", "[", "j", "]", ".", "data", ".", "cpu", "(", ")", ")", "\n", "previous_video_id", "=", "targets", "[", "j", "]", "\n", "\n", "", "if", "(", "i", "%", "100", ")", "==", "0", ":", "\n", "            ", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'{}.json'", ".", "format", "(", "\n", "opt", ".", "test_subset", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "test_results", ",", "f", ")", "\n", "\n", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end_time", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'[{}/{}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", ".", "format", "(", "\n", "i", "+", "1", ",", "\n", "len", "(", "data_loader", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ")", ")", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'{}.json'", ".", "format", "(", "opt", ".", "test_subset", ")", ")", ",", "\n", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "test_results", ",", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.LoopPadding.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.LoopPadding.__call__": [[10, 19], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.TemporalBeginCrop.__init__": [[31, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.TemporalBeginCrop.__call__": [[34, 43], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "[", ":", "self", ".", "size", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.TemporalCenterCrop.__init__": [[55, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.TemporalCenterCrop.__call__": [[58, 78], ["max", "min", "len", "len", "out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "center_index", "=", "len", "(", "frame_indices", ")", "//", "2", "\n", "begin_index", "=", "max", "(", "0", ",", "center_index", "-", "(", "self", ".", "size", "//", "2", ")", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.TemporalRandomCrop.__init__": [[90, 92], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.temporal_transforms.TemporalRandomCrop.__call__": [[93, 113], ["max", "random.randint", "min", "len", "out.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "rand_end", "=", "max", "(", "0", ",", "len", "(", "frame_indices", ")", "-", "self", ".", "size", "-", "1", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.model.generate_model": [[7, 205], ["pre_act_resnet.resnet200.cuda", "torch.nn.DataParallel", "pre_act_resnet.resnet200.parameters", "models.resnet.resnet10", "print", "torch.load", "pre_act_resnet.resnet200.load_state_dict", "get_fine_tuning_parameters", "print", "torch.load", "pre_act_resnet.resnet200.load_state_dict", "get_fine_tuning_parameters", "models.resnet.resnet18", "models.wide_resnet.resnet50", "torch.nn.Linear", "pre_act_resnet.resnet200.module.classifier.cuda", "torch.nn.Linear", "pre_act_resnet.resnet200.module.fc.cuda", "torch.nn.Linear", "torch.nn.Linear", "models.resnet.resnet34", "models.resnext.resnet50", "models.resnet.resnet50", "models.resnext.resnet101", "models.pre_act_resnet.resnet18", "models.resnet.resnet101", "models.resnext.resnet152", "models.pre_act_resnet.resnet34", "models.densenet.densenet121", "models.resnet.resnet152", "models.pre_act_resnet.resnet50", "models.densenet.densenet169", "models.resnet.resnet200", "models.pre_act_resnet.resnet101", "models.densenet.densenet201", "models.pre_act_resnet.resnet152", "models.densenet.densenet264", "models.pre_act_resnet.resnet200"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet10", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.get_fine_tuning_parameters", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.get_fine_tuning_parameters", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet18", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet50", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet34", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet50", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet50", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet101", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet18", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet101", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet152", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet34", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet121", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet152", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet50", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet169", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet200", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet101", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet201", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet152", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet264", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet200"], ["def", "generate_model", "(", "opt", ")", ":", "\n", "    ", "assert", "opt", ".", "model", "in", "[", "\n", "'resnet'", ",", "'preresnet'", ",", "'wideresnet'", ",", "'resnext'", ",", "'densenet'", "\n", "]", "\n", "\n", "if", "opt", ".", "model", "==", "'resnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "10", ",", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "\n", "from", ".", "models", ".", "resnet", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "opt", ".", "model_depth", "==", "10", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet10", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet18", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet34", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "200", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet200", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'wideresnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "50", "]", "\n", "\n", "from", ".", "models", ".", "wide_resnet", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "wide_resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "k", "=", "opt", ".", "wide_resnet_k", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'resnext'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "50", ",", "101", ",", "152", "]", "\n", "\n", "from", ".", "models", ".", "resnext", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnext", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnext", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnext", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'preresnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "\n", "from", ".", "models", ".", "pre_act_resnet", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "opt", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet18", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet34", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "200", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet200", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'densenet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "121", ",", "169", ",", "201", ",", "264", "]", "\n", "\n", "from", ".", "models", ".", "densenet", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "opt", ".", "model_depth", "==", "121", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet121", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "169", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet169", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "201", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet201", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "264", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet264", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "\n", "", "", "if", "not", "opt", ".", "no_cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "None", ")", "\n", "\n", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ")", "\n", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "\n", "if", "opt", ".", "model", "==", "'densenet'", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Linear", "(", "\n", "model", ".", "module", ".", "classifier", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", "model", ".", "module", ".", "classifier", "=", "model", ".", "module", ".", "classifier", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "module", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "module", ".", "fc", ".", "in_features", ",", "\n", "opt", ".", "n_finetune_classes", ")", "\n", "model", ".", "module", ".", "fc", "=", "model", ".", "module", ".", "fc", ".", "cuda", "(", ")", "\n", "\n", "", "parameters", "=", "get_fine_tuning_parameters", "(", "model", ",", "opt", ".", "ft_begin_index", ")", "\n", "return", "model", ",", "parameters", "\n", "", "", "else", ":", "\n", "        ", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ")", "\n", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "\n", "if", "opt", ".", "model", "==", "'densenet'", ":", "\n", "                ", "model", ".", "classifier", "=", "nn", ".", "Linear", "(", "\n", "model", ".", "classifier", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "\n", "opt", ".", "n_finetune_classes", ")", "\n", "\n", "", "parameters", "=", "get_fine_tuning_parameters", "(", "model", ",", "opt", ".", "ft_begin_index", ")", "\n", "return", "model", ",", "parameters", "\n", "\n", "", "", "return", "model", ",", "model", ".", "parameters", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.mean.get_mean": [[1, 13], ["None"], "function", ["None"], ["def", "get_mean", "(", "norm_value", "=", "255", ",", "dataset", "=", "'activitynet'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'activitynet'", ",", "'kinetics'", "]", "\n", "\n", "if", "dataset", "==", "'activitynet'", ":", "\n", "        ", "return", "[", "\n", "114.7748", "/", "norm_value", ",", "107.7354", "/", "norm_value", ",", "99.4750", "/", "norm_value", "\n", "]", "\n", "", "elif", "dataset", "==", "'kinetics'", ":", "\n", "# Kinetics (10 videos for each class)", "\n", "        ", "return", "[", "\n", "110.63666788", "/", "norm_value", ",", "103.16065604", "/", "norm_value", ",", "\n", "96.29023126", "/", "norm_value", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.mean.get_std": [[16, 21], ["None"], "function", ["None"], ["", "", "def", "get_std", "(", "norm_value", "=", "255", ")", ":", "\n", "# Kinetics (10 videos for each class)", "\n", "    ", "return", "[", "\n", "38.7568578", "/", "norm_value", ",", "37.88248729", "/", "norm_value", ",", "\n", "40.02898126", "/", "norm_value", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.target_transforms.Compose.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.target_transforms.Compose.__call__": [[10, 15], ["dst.append", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "dst", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "dst", ".", "append", "(", "t", "(", "target", ")", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.target_transforms.ClassLabel.__call__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.target_transforms.VideoID.__call__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'video_id'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.__init__": [[7, 9], ["utils_file.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.reset": [[10, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update": [[16, 21], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.Logger.__init__": [[25, 31], ["open", "csv.writer", "utils_file.Logger.logger.writerow"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "self", ".", "header", "=", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.Logger.__del": [[32, 34], ["utils_file.Logger.log_file.close"], "methods", ["None"], ["", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.Logger.log": [[35, 43], ["utils_file.Logger.logger.writerow", "utils_file.Logger.log_file.flush", "write_values.append"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "values", ")", ":", "\n", "        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.load_value_file": [[45, 50], ["open", "float", "input_file.read().rstrip", "input_file.read"], "function", ["None"], ["", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.calculate_accuracy": [[52, 61], ["targets.size", "outputs.topk", "pred.t.t", "pred.t.eq", "targets.view", "pred.eq.float().sum", "pred.eq.float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "outputs", ".", "topk", "(", "1", ",", "1", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "targets", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "n_correct_elems", "=", "correct", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "\n", "\n", "return", "n_correct_elems", "/", "batch_size", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.UCFclassification.__init__": [[8, 30], ["eval_ucf101.UCFclassification._import_ground_truth", "eval_ucf101.UCFclassification._import_prediction", "IOError", "IOError", "print", "len", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.UCFclassification._import_ground_truth", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.UCFclassification._import_prediction"], ["    ", "def", "__init__", "(", "self", ",", "ground_truth_filename", "=", "None", ",", "prediction_filename", "=", "None", ",", "\n", "subset", "=", "'validation'", ",", "verbose", "=", "False", ",", "top_k", "=", "1", ")", ":", "\n", "        ", "if", "not", "ground_truth_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "", "if", "not", "prediction_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "ap", "=", "None", "\n", "self", ".", "hit_at_k", "=", "None", "\n", "# Import ground truth and predictions.", "\n", "self", ".", "ground_truth", ",", "self", ".", "activity_index", "=", "self", ".", "_import_ground_truth", "(", "\n", "ground_truth_filename", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_import_prediction", "(", "prediction_filename", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[INIT] Loaded annotations from {} subset.'", ".", "format", "(", "subset", ")", ")", "\n", "nr_gt", "=", "len", "(", "self", ".", "ground_truth", ")", "\n", "print", "(", "'\\tNumber of ground truth instances: {}'", ".", "format", "(", "nr_gt", ")", ")", "\n", "nr_pred", "=", "len", "(", "self", ".", "prediction", ")", "\n", "print", "(", "'\\tNumber of predictions: {}'", ".", "format", "(", "nr_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.UCFclassification._import_ground_truth": [[31, 69], ["data[].iteritems", "pandas.DataFrame", "ground_truth.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates().reset_index", "open", "json.load", "video_lst.append", "label_lst.append", "ground_truth.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates"], "methods", ["None"], ["", "", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_filename", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n\n        Parameters\n        ----------\n        ground_truth_filename : str\n            Full path to the ground truth json file.\n\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        activity_index : dict\n            Dictionary containing class index.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format", "\n", "# if not all([field in data.keys() for field in self.gt_fields]):", "\n", "# raise IOError('Please input a valid ground truth file.')", "\n", "\n", "# Initialize data frame", "\n", "", "activity_index", ",", "cidx", "=", "{", "}", ",", "0", "\n", "video_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "self", ".", "subset", "!=", "v", "[", "'subset'", "]", ":", "\n", "                ", "continue", "\n", "", "this_label", "=", "v", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "if", "this_label", "not", "in", "activity_index", ":", "\n", "                ", "activity_index", "[", "this_label", "]", "=", "cidx", "\n", "cidx", "+=", "1", "\n", "", "video_lst", ".", "append", "(", "videoid", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "this_label", "]", ")", "\n", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "ground_truth", "=", "ground_truth", ".", "drop_duplicates", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", "ground_truth", ",", "activity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.UCFclassification._import_prediction": [[70, 102], ["data[].iteritems", "pandas.DataFrame", "open", "json.load", "video_lst.append", "label_lst.append", "score_lst.append"], "methods", ["None"], ["", "def", "_import_prediction", "(", "self", ",", "prediction_filename", ")", ":", "\n", "        ", "\"\"\"Reads prediction file, checks if it is well formatted, and returns\n           the prediction instances.\n\n        Parameters\n        ----------\n        prediction_filename : str\n            Full path to the prediction json file.\n\n        Outputs\n        -------\n        prediction : df\n            Data frame containing the prediction instances.\n        \"\"\"", "\n", "with", "open", "(", "prediction_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format...", "\n", "# if not all([field in data.keys() for field in self.pred_fields]):", "\n", "# raise IOError('Please input a valid prediction file.')", "\n", "\n", "# Initialize data frame", "\n", "", "video_lst", ",", "label_lst", ",", "score_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "iteritems", "(", ")", ":", "\n", "            ", "for", "result", "in", "v", ":", "\n", "                ", "label", "=", "self", ".", "activity_index", "[", "result", "[", "'label'", "]", "]", "\n", "video_lst", ".", "append", "(", "videoid", ")", "\n", "label_lst", ".", "append", "(", "label", ")", "\n", "score_lst", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "", "prediction", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'label'", ":", "label_lst", ",", "\n", "'score'", ":", "score_lst", "}", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.UCFclassification.evaluate": [[103, 116], ["eval_ucf101.compute_video_hit_at_k", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.compute_video_hit_at_k"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluates a prediction file. For the detection task we measure the\n        interpolated mean average precision to measure the performance of a\n        method.\n        \"\"\"", "\n", "hit_at_k", "=", "compute_video_hit_at_k", "(", "self", ".", "ground_truth", ",", "\n", "self", ".", "prediction", ",", "top_k", "=", "self", ".", "top_k", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[RESULTS] Performance on ActivityNet untrimmed video '", "\n", "'classification task.'", ")", "\n", "print", "(", "'\\tError@{}: {}'", ".", "format", "(", "self", ".", "top_k", ",", "1.0", "-", "hit_at_k", ")", ")", "\n", "#print '\\tAvg Hit@{}: {}'.format(self.top_k, avg_hit_at_k)", "\n", "", "self", ".", "hit_at_k", "=", "hit_at_k", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.eval_ucf101.compute_video_hit_at_k": [[120, 156], ["numpy.unique", "numpy.zeros", "enumerate", "float", "prediction.loc[].reset_index", "this_pred.loc[].reset_index.loc[].reset_index", "this_pred[].tolist", "[].tolist", "numpy.mean", "np.zeros.mean", "pred_idx.any", "this_pred[].values.argsort"], "function", ["None"], ["", "", "def", "compute_video_hit_at_k", "(", "ground_truth", ",", "prediction", ",", "top_k", "=", "3", ")", ":", "\n", "    ", "\"\"\"Compute accuracy at k prediction between ground truth and\n    predictions data frames. This code is greatly inspired by evaluation\n    performed in Karpathy et al. CVPR14.\n\n    Parameters\n    ----------\n    ground_truth : df\n        Data frame containing the ground truth instances.\n        Required fields: ['video-id', 'label']\n    prediction : df\n        Data frame containing the prediction instances.\n        Required fields: ['video-id, 'label', 'score']\n\n    Outputs\n    -------\n    acc : float\n        Top k accuracy score.\n    \"\"\"", "\n", "video_ids", "=", "np", ".", "unique", "(", "ground_truth", "[", "'video-id'", "]", ".", "values", ")", "\n", "avg_hits_per_vid", "=", "np", ".", "zeros", "(", "video_ids", ".", "size", ")", "\n", "for", "i", ",", "vid", "in", "enumerate", "(", "video_ids", ")", ":", "\n", "        ", "pred_idx", "=", "prediction", "[", "'video-id'", "]", "==", "vid", "\n", "if", "not", "pred_idx", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "", "this_pred", "=", "prediction", ".", "loc", "[", "pred_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# Get top K predictions sorted by decreasing score.", "\n", "sort_idx", "=", "this_pred", "[", "'score'", "]", ".", "values", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "top_k", "]", "\n", "this_pred", "=", "this_pred", ".", "loc", "[", "sort_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# Get labels and compare against ground truth.", "\n", "pred_label", "=", "this_pred", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "gt_idx", "=", "ground_truth", "[", "'video-id'", "]", "==", "vid", "\n", "gt_label", "=", "ground_truth", ".", "loc", "[", "gt_idx", "]", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "avg_hits_per_vid", "[", "i", "]", "=", "np", ".", "mean", "(", "[", "1", "if", "this_label", "in", "pred_label", "else", "0", "\n", "for", "this_label", "in", "gt_label", "]", ")", "\n", "", "return", "float", "(", "avg_hits_per_vid", ".", "mean", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.ucf101_json.convert_csv_to_dict": [[7, 29], ["pandas.read_csv", "range", "range", "pd.read_csv.ix[].split", "keys.append", "key_labels.append", "len", "slash_rows[].split"], "function", ["None"], ["def", "convert_csv_to_dict", "(", "csv_path", ",", "subset", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "keys", "=", "[", "]", "\n", "key_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "data", ".", "ix", "[", "i", ",", ":", "]", "\n", "slash_rows", "=", "data", ".", "ix", "[", "i", ",", "0", "]", ".", "split", "(", "'/'", ")", "\n", "class_name", "=", "slash_rows", "[", "0", "]", "\n", "basename", "=", "slash_rows", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "keys", ".", "append", "(", "basename", ")", "\n", "key_labels", ".", "append", "(", "class_name", ")", "\n", "\n", "", "database", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "database", "[", "key", "]", "=", "{", "}", "\n", "database", "[", "key", "]", "[", "'subset'", "]", "=", "subset", "\n", "label", "=", "key_labels", "[", "i", "]", "\n", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "'label'", ":", "label", "}", "\n", "\n", "", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.ucf101_json.load_labels": [[30, 36], ["pandas.read_csv", "range", "labels.append"], "function", ["None"], ["", "def", "load_labels", "(", "label_csv_path", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "label_csv_path", ",", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "labels", ".", "append", "(", "data", ".", "ix", "[", "i", ",", "1", "]", ")", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.ucf101_json.convert_ucf101_csv_to_activitynet_json": [[37, 51], ["ucf101_json.load_labels", "ucf101_json.convert_csv_to_dict", "ucf101_json.convert_csv_to_dict", "dst_data[].update", "dst_data[].update", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.kinetics_json.load_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update"], ["", "def", "convert_ucf101_csv_to_activitynet_json", "(", "label_csv_path", ",", "train_csv_path", ",", "\n", "val_csv_path", ",", "dst_json_path", ")", ":", "\n", "    ", "labels", "=", "load_labels", "(", "label_csv_path", ")", "\n", "train_database", "=", "convert_csv_to_dict", "(", "train_csv_path", ",", "'training'", ")", "\n", "val_database", "=", "convert_csv_to_dict", "(", "val_csv_path", ",", "'validation'", ")", "\n", "\n", "dst_data", "=", "{", "}", "\n", "dst_data", "[", "'labels'", "]", "=", "labels", "\n", "dst_data", "[", "'database'", "]", "=", "{", "}", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "train_database", ")", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "val_database", ")", "\n", "\n", "with", "open", "(", "dst_json_path", ",", "'w'", ")", "as", "dst_file", ":", "\n", "        ", "json", ".", "dump", "(", "dst_data", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.n_frames_kinetics.class_process": [[6, 28], ["os.path.join", "os.listdir", "os.path.isdir", "os.path.join", "os.listdir", "image_indices.append", "len", "print", "image_indices.sort", "print", "open", "dst_file.write", "int", "os.path.join", "str"], "function", ["None"], ["def", "class_process", "(", "dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "video_dir_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "image_indices", "=", "[", "]", "\n", "for", "image_file_name", "in", "os", ".", "listdir", "(", "video_dir_path", ")", ":", "\n", "      ", "if", "'image'", "not", "in", "image_file_name", ":", "\n", "        ", "continue", "\n", "", "image_indices", ".", "append", "(", "int", "(", "image_file_name", "[", "6", ":", "11", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "image_indices", ")", "==", "0", ":", "\n", "      ", "print", "(", "'no image files'", ",", "video_dir_path", ")", "\n", "n_frames", "=", "0", "\n", "", "else", ":", "\n", "      ", "image_indices", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "n_frames", "=", "image_indices", "[", "0", "]", "\n", "print", "(", "video_dir_path", ",", "n_frames", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'n_frames'", ")", ",", "'w'", ")", "as", "dst_file", ":", "\n", "      ", "dst_file", ".", "write", "(", "str", "(", "n_frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.n_frames_ucf101_hmdb51.class_process": [[6, 28], ["os.path.join", "os.listdir", "os.path.isdir", "os.path.join", "os.listdir", "image_indices.append", "len", "print", "image_indices.sort", "print", "open", "dst_file.write", "int", "os.path.join", "str"], "function", ["None"], ["def", "class_process", "(", "dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "video_dir_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "image_indices", "=", "[", "]", "\n", "for", "image_file_name", "in", "os", ".", "listdir", "(", "video_dir_path", ")", ":", "\n", "      ", "if", "'image'", "not", "in", "image_file_name", ":", "\n", "        ", "continue", "\n", "", "image_indices", ".", "append", "(", "int", "(", "image_file_name", "[", "6", ":", "11", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "image_indices", ")", "==", "0", ":", "\n", "      ", "print", "(", "'no image files'", ",", "video_dir_path", ")", "\n", "n_frames", "=", "0", "\n", "", "else", ":", "\n", "      ", "image_indices", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "n_frames", "=", "image_indices", "[", "0", "]", "\n", "print", "(", "video_dir_path", ",", "n_frames", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'n_frames'", ")", ",", "'w'", ")", "as", "dst_file", ":", "\n", "      ", "dst_file", ".", "write", "(", "str", "(", "n_frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.video_jpg_kinetics.class_process": [[6, 39], ["os.path.join", "os.path.join", "os.listdir", "os.path.isdir", "os.path.exists", "os.mkdir", "os.path.splitext", "os.path.join", "os.path.join", "print", "subprocess.call", "print", "os.path.exists", "os.mkdir", "print", "os.path.exists", "subprocess.call", "print", "os.mkdir", "os.path.join"], "function", ["None"], ["def", "class_process", "(", "dir_path", ",", "dst_dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "dst_class_path", "=", "os", ".", "path", ".", "join", "(", "dst_dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_class_path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dst_class_path", ")", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "if", "'.mp4'", "not", "in", "file_name", ":", "\n", "      ", "continue", "\n", "", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "dst_directory_path", "=", "os", ".", "path", ".", "join", "(", "dst_class_path", ",", "name", ")", "\n", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "try", ":", "\n", "      ", "if", "os", ".", "path", ".", "exists", "(", "dst_directory_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dst_directory_path", ",", "'image_00001.jpg'", ")", ")", ":", "\n", "          ", "subprocess", ".", "call", "(", "'rm -r \\\"{}\\\"'", ".", "format", "(", "dst_directory_path", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'remove {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "else", ":", "\n", "          ", "continue", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "", "except", ":", "\n", "      ", "print", "(", "dst_directory_path", ")", "\n", "continue", "\n", "", "cmd", "=", "'ffmpeg -i \\\"{}\\\" -vf scale=-1:240 \\\"{}/image_%05d.jpg\\\"'", ".", "format", "(", "video_file_path", ",", "dst_directory_path", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.kinetics_json.convert_csv_to_dict": [[7, 32], ["pandas.read_csv", "range", "range", "keys.append", "len", "key_labels.append"], "function", ["None"], ["def", "convert_csv_to_dict", "(", "csv_path", ",", "subset", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "keys", "=", "[", "]", "\n", "key_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "data", ".", "ix", "[", "i", ",", ":", "]", "\n", "basename", "=", "'%s_%s_%s'", "%", "(", "row", "[", "'youtube_id'", "]", ",", "\n", "'%06d'", "%", "row", "[", "'time_start'", "]", ",", "\n", "'%06d'", "%", "row", "[", "'time_end'", "]", ")", "\n", "keys", ".", "append", "(", "basename", ")", "\n", "if", "subset", "!=", "'testing'", ":", "\n", "            ", "key_labels", ".", "append", "(", "row", "[", "'label'", "]", ")", "\n", "\n", "", "", "database", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "database", "[", "key", "]", "=", "{", "}", "\n", "database", "[", "key", "]", "[", "'subset'", "]", "=", "subset", "\n", "if", "subset", "!=", "'testing'", ":", "\n", "            ", "label", "=", "key_labels", "[", "i", "]", "\n", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "'label'", ":", "label", "}", "\n", "", "else", ":", "\n", "            ", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "}", "\n", "\n", "", "", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.kinetics_json.load_labels": [[33, 36], ["pandas.read_csv", "data[].unique().tolist", "data[].unique"], "function", ["None"], ["", "def", "load_labels", "(", "train_csv_path", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "train_csv_path", ")", "\n", "return", "data", "[", "'label'", "]", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.kinetics_json.convert_kinetics_csv_to_activitynet_json": [[37, 52], ["kinetics_json.load_labels", "kinetics_json.convert_csv_to_dict", "kinetics_json.convert_csv_to_dict", "kinetics_json.convert_csv_to_dict", "dst_data[].update", "dst_data[].update", "dst_data[].update", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.kinetics_json.load_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update"], ["", "def", "convert_kinetics_csv_to_activitynet_json", "(", "train_csv_path", ",", "val_csv_path", ",", "test_csv_path", ",", "dst_json_path", ")", ":", "\n", "    ", "labels", "=", "load_labels", "(", "train_csv_path", ")", "\n", "train_database", "=", "convert_csv_to_dict", "(", "train_csv_path", ",", "'training'", ")", "\n", "val_database", "=", "convert_csv_to_dict", "(", "val_csv_path", ",", "'validation'", ")", "\n", "test_database", "=", "convert_csv_to_dict", "(", "test_csv_path", ",", "'testing'", ")", "\n", "\n", "dst_data", "=", "{", "}", "\n", "dst_data", "[", "'labels'", "]", "=", "labels", "\n", "dst_data", "[", "'database'", "]", "=", "{", "}", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "train_database", ")", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "val_database", ")", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "test_database", ")", "\n", "\n", "with", "open", "(", "dst_json_path", ",", "'w'", ")", "as", "dst_file", ":", "\n", "        ", "json", ".", "dump", "(", "dst_data", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.video_jpg_ucf101_hmdb51.class_process": [[6, 39], ["os.path.join", "os.path.join", "os.listdir", "os.path.isdir", "os.path.exists", "os.mkdir", "os.path.splitext", "os.path.join", "os.path.join", "print", "subprocess.call", "print", "os.path.exists", "os.mkdir", "print", "os.path.exists", "subprocess.call", "print", "os.mkdir", "os.path.join"], "function", ["None"], ["def", "class_process", "(", "dir_path", ",", "dst_dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "dst_class_path", "=", "os", ".", "path", ".", "join", "(", "dst_dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_class_path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dst_class_path", ")", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "if", "'.avi'", "not", "in", "file_name", ":", "\n", "      ", "continue", "\n", "", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "dst_directory_path", "=", "os", ".", "path", ".", "join", "(", "dst_class_path", ",", "name", ")", "\n", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "try", ":", "\n", "      ", "if", "os", ".", "path", ".", "exists", "(", "dst_directory_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dst_directory_path", ",", "'image_00001.jpg'", ")", ")", ":", "\n", "          ", "subprocess", ".", "call", "(", "'rm -r \\\"{}\\\"'", ".", "format", "(", "dst_directory_path", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'remove {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "else", ":", "\n", "          ", "continue", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "", "except", ":", "\n", "      ", "print", "(", "dst_directory_path", ")", "\n", "continue", "\n", "", "cmd", "=", "'ffmpeg -i \\\"{}\\\" -vf scale=-1:240 \\\"{}/image_%05d.jpg\\\"'", ".", "format", "(", "video_file_path", ",", "dst_directory_path", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict": [[7, 37], ["os.listdir", "pandas.read_csv", "range", "range", "os.path.join", "keys.append", "subsets.append", "len", "row[].split", "filename.split"], "function", ["None"], ["def", "convert_csv_to_dict", "(", "csv_dir_path", ",", "split_index", ")", ":", "\n", "    ", "database", "=", "{", "}", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "csv_dir_path", ")", ":", "\n", "        ", "if", "'split{}'", ".", "format", "(", "split_index", ")", "not", "in", "filename", ":", "\n", "            ", "continue", "\n", "\n", "", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "csv_dir_path", ",", "filename", ")", ",", "\n", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "keys", "=", "[", "]", "\n", "subsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "row", "=", "data", ".", "ix", "[", "i", ",", ":", "]", "\n", "if", "row", "[", "1", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elif", "row", "[", "1", "]", "==", "1", ":", "\n", "                ", "subset", "=", "'training'", "\n", "", "elif", "row", "[", "1", "]", "==", "2", ":", "\n", "                ", "subset", "=", "'validation'", "\n", "\n", "", "keys", ".", "append", "(", "row", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "subsets", ".", "append", "(", "subset", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "            ", "key", "=", "keys", "[", "i", "]", "\n", "database", "[", "key", "]", "=", "{", "}", "\n", "database", "[", "key", "]", "[", "'subset'", "]", "=", "subsets", "[", "i", "]", "\n", "label", "=", "'_'", ".", "join", "(", "filename", ".", "split", "(", "'_'", ")", "[", ":", "-", "2", "]", ")", "\n", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "'label'", ":", "label", "}", "\n", "\n", "", "", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.get_labels": [[38, 43], ["os.listdir", "sorted", "labels.append", "list", "set", "name.split"], "function", ["None"], ["", "def", "get_labels", "(", "csv_dir_path", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "for", "name", "in", "os", ".", "listdir", "(", "csv_dir_path", ")", ":", "\n", "        ", "labels", ".", "append", "(", "'_'", ".", "join", "(", "name", ".", "split", "(", "'_'", ")", "[", ":", "-", "2", "]", ")", ")", "\n", "", "return", "sorted", "(", "list", "(", "set", "(", "labels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_hmdb51_csv_to_activitynet_json": [[44, 55], ["hmdb51_json.get_labels", "hmdb51_json.convert_csv_to_dict", "dst_data[].update", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.get_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.utils.hmdb51_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.AverageMeter.update"], ["", "def", "convert_hmdb51_csv_to_activitynet_json", "(", "csv_dir_path", ",", "split_index", ",", "dst_json_path", ")", ":", "\n", "    ", "labels", "=", "get_labels", "(", "csv_dir_path", ")", "\n", "database", "=", "convert_csv_to_dict", "(", "csv_dir_path", ",", "split_index", ")", "\n", "\n", "dst_data", "=", "{", "}", "\n", "dst_data", "[", "'labels'", "]", "=", "labels", "\n", "dst_data", "[", "'database'", "]", "=", "{", "}", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "database", ")", "\n", "\n", "with", "open", "(", "dst_json_path", ",", "'w'", ")", "as", "dst_file", ":", "\n", "        ", "json", ".", "dump", "(", "dst_data", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.HMDB51.__init__": [[154, 172], ["hmdb51.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.HMDB51.__getitem__": [[173, 196], ["hmdb51.HMDB51.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "hmdb51.HMDB51.temporal_transform", "hmdb51.HMDB51.spatial_transform.randomize_parameters", "hmdb51.HMDB51.target_transform", "hmdb51.HMDB51.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.HMDB51.__len__": [[197, 199], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.pil_loader": [[13, 18], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.accimage_loader": [[20, 27], ["accimage.Image", "hmdb51.pil_loader"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.get_default_image_loader": [[29, 35], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.video_loader": [[37, 47], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.get_default_video_loader": [[49, 52], ["hmdb51.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.load_annotation_data": [[54, 57], ["open", "json.load"], "function", ["None"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.get_class_labels": [[59, 66], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.get_video_names_and_annotations": [[68, 80], ["data[].items", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.hmdb51.make_dataset": [[82, 135], ["hmdb51.load_annotation_data", "hmdb51.get_video_names_and_annotations", "hmdb51.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "utils_file.load_value_file", "len", "list", "dataset.append", "range", "video_names[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.UCF101.__init__": [[154, 172], ["ucf101.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.make_dataset"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.UCF101.__getitem__": [[173, 196], ["ucf101.UCF101.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "ucf101.UCF101.temporal_transform", "ucf101.UCF101.spatial_transform.randomize_parameters", "ucf101.UCF101.target_transform", "ucf101.UCF101.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.UCF101.__len__": [[197, 199], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.pil_loader": [[13, 18], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "get_ucf101_train_data_loader", "(", "batch_size", ",", "num_workers", ",", "data_dir", ",", "annotation_path", ")", ":", "\n", "    ", "norm_value", "=", "1", "\n", "mean", "=", "get_mean", "(", "norm_value", ",", "dataset", "=", "'kinetics'", ")", "\n", "normalize", "=", "spatial_transforms", ".", "Normalize", "(", "mean", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "scales", "=", "[", "1.0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.accimage_loader": [[20, 27], ["accimage.Image", "ucf101.pil_loader"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.pil_loader"], ["", "spatial_transform", "=", "spatial_transforms", ".", "Compose", "(", "[", "\n", "spatial_transforms", ".", "MultiScaleCornerCrop", "(", "scales", ",", "UCF101", ".", "SIDE_LENGTH", ")", ",", "\n", "spatial_transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "spatial_transforms", ".", "ToTensor", "(", "norm_value", ")", ",", "normalize", "\n", "]", ")", "\n", "temporal_transform", "=", "temporal_transforms", ".", "TemporalRandomCrop", "(", "16", ")", "\n", "target_transform", "=", "target_transforms", ".", "ClassLabel", "(", ")", "\n", "opt", "=", "Bunch", "(", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.get_default_image_loader": [[29, 35], ["get_image_backend"], "function", ["None"], ["video_path", "=", "data_dir", ",", "\n", "annotation_path", "=", "annotation_path", ",", "\n", ")", "\n", "training_data", "=", "resnets_3d", ".", "dataset", ".", "get_training_set", "(", "opt", ",", "spatial_transform", ",", "\n", "temporal_transform", ",", "target_transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "training_data", ",", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.video_loader": [[37, 47], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "train_loader", ",", "training_data", ".", "class_names", "\n", "\n", "\n", "", "def", "get_ucf101_val_data_loader", "(", "batch_size", ",", "num_workers", ",", "data_dir", ",", "annotation_path", ",", "shuffle", "=", "False", ",", "normalize", "=", "True", ",", "\n", "whole_videos", "=", "False", ")", ":", "\n", "    ", "norm_value", "=", "1", "\n", "mean", "=", "get_mean", "(", "norm_value", ",", "dataset", "=", "'kinetics'", ")", "\n", "normalization_transform", "=", "spatial_transforms", ".", "Normalize", "(", "mean", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.get_default_video_loader": [[49, 52], ["ucf101.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_default_image_loader"], ["spatial_transforms", ".", "Scale", "(", "UCF101", ".", "SIDE_LENGTH", ")", ",", "\n", "spatial_transforms", ".", "CenterCrop", "(", "UCF101", ".", "SIDE_LENGTH", ")", ",", "\n", "spatial_transforms", ".", "ToTensor", "(", "norm_value", "=", "norm_value", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.load_annotation_data": [[54, 57], ["open", "json.load"], "function", ["None"], ["        ", "transforms", ".", "append", "(", "normalization_transform", ")", "\n", "", "spatial_transform", "=", "spatial_transforms", ".", "Compose", "(", "transforms", ")", "\n", "if", "whole_videos", ":", "\n", "        ", "temporal_transform", "=", "None", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.get_class_labels": [[59, 66], ["torch.data"], "function", ["None"], ["        ", "temporal_transform", "=", "temporal_transforms", ".", "LoopPadding", "(", "16", ")", "\n", "", "target_transform", "=", "target_transforms", ".", "ClassLabel", "(", ")", "\n", "opt", "=", "Bunch", "(", "\n", "dataset", "=", "'ucf101'", ",", "\n", "video_path", "=", "data_dir", ",", "\n", "annotation_path", "=", "annotation_path", ",", "\n", "n_val_samples", "=", "1", "if", "whole_videos", "else", "3", ",", "\n", "sample_duration", "=", "16", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.get_video_names_and_annotations": [[68, 80], ["data[].items", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["validation_data", "=", "resnets_3d", ".", "dataset", ".", "get_validation_set", "(", "\n", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "return", "val_loader", ",", "validation_data", ".", "class_names", "\n", "\n", "\n", "", "class", "UCF101", ":", "\n", "    ", "MEAN", "=", "(", "110.63666788", ",", "103.16065604", ",", "96.29023126", ")", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.ucf101.make_dataset": [[82, 135], ["ucf101.load_annotation_data", "ucf101.get_video_names_and_annotations", "ucf101.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "utils_file.load_value_file", "len", "list", "dataset.append", "range", "video_names[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.load_value_file"], ["SIDE_LENGTH", "=", "112", "\n", "\n", "@", "staticmethod", "\n", "def", "get_classifier", "(", ")", ":", "\n", "        ", "classifier", ",", "_", "=", "generate_model", "(", "Bunch", "(", "\n", "model", "=", "'resnext'", ",", "\n", "model_depth", "=", "101", ",", "\n", "resnet_shortcut", "=", "'B'", ",", "\n", "resnext_cardinality", "=", "32", ",", "\n", "n_classes", "=", "101", ",", "\n", "sample_size", "=", "UCF101", ".", "SIDE_LENGTH", ",", "\n", "sample_duration", "=", "16", ",", "\n", "no_cuda", "=", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", "arch", "=", "'resnext-101'", ",", "\n", "n_finetune_classes", "=", "101", ",", "\n", "ft_begin_index", "=", "0", ",", "\n", "pretrain_path", "=", "None", "\n", ")", ")", "\n", "\n", "resume_path", "=", "os", ".", "environ", "[", "'UCF101_MODEL'", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "return", "classifier", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_data_loaders", "(", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "environ", "[", "'UCF101_DATA_DIR'", "]", "\n", "annotation_path", "=", "os", ".", "environ", "[", "'UCF101_ANNOTATION_PATH'", "]", "\n", "train_loader", ",", "_", "=", "get_ucf101_train_data_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "\n", "data_dir", "=", "data_dir", ",", "annotation_path", "=", "annotation_path", ")", "\n", "val_loader", ",", "_", "=", "get_ucf101_val_data_loader", "(", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "\n", "data_dir", "=", "data_dir", ",", "annotation_path", "=", "annotation_path", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_framing", "(", "width", ",", "keep_size", "=", "False", ")", ":", "\n", "        ", "return", "Framing", "(", "width", "=", "width", ",", "image_side_length", "=", "UCF101", ".", "SIDE_LENGTH", ",", "normalize", "=", "UCF101", ".", "normalize_not_in_place", ",", "\n", "scale", "=", "255.", ",", "keep_size", "=", "keep_size", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "normalize_not_in_place", "(", "input", ")", ":", "\n", "        ", "params_shape", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "params_shape", ")", ")", ":", "\n", "            ", "params_shape", "[", "i", "]", "=", "1", "\n", "", "mean", "=", "input", ".", "new_tensor", "(", "UCF101", ".", "MEAN", ")", ".", "view", "(", "params_shape", ")", "\n", "return", "input", "-", "mean", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.ActivityNet.__init__": [[247, 271], ["get_loader", "activitynet.make_untrimmed_dataset", "activitynet.make_dataset"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.make_untrimmed_dataset", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "is_untrimmed_setting", "=", "False", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "if", "is_untrimmed_setting", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_untrimmed_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.ActivityNet.__getitem__": [[272, 295], ["activitynet.ActivityNet.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "activitynet.ActivityNet.temporal_transform", "activitynet.ActivityNet.spatial_transform.randomize_parameters", "activitynet.ActivityNet.target_transform", "activitynet.ActivityNet.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.ActivityNet.__len__": [[296, 298], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.pil_loader": [[13, 18], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.accimage_loader": [[20, 27], ["accimage.Image", "activitynet.pil_loader"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.get_default_image_loader": [[29, 35], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.video_loader": [[37, 47], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.get_default_video_loader": [[49, 52], ["activitynet.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.load_annotation_data": [[54, 57], ["open", "json.load"], "function", ["None"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.get_class_labels": [[59, 77], ["enumerate", "class_names.append", "torch.data", "torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_names", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "node1", "in", "data", "[", "'taxonomy'", "]", ":", "\n", "        ", "is_leaf", "=", "True", "\n", "for", "node2", "in", "data", "[", "'taxonomy'", "]", ":", "\n", "            ", "if", "node2", "[", "'parentId'", "]", "==", "node1", "[", "'nodeId'", "]", ":", "\n", "                ", "is_leaf", "=", "False", "\n", "break", "\n", "", "", "if", "is_leaf", ":", "\n", "            ", "class_names", ".", "append", "(", "node1", "[", "'nodeName'", "]", ")", "\n", "\n", "", "", "class_labels_map", "=", "{", "}", "\n", "\n", "for", "i", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "        ", "class_labels_map", "[", "class_name", "]", "=", "i", "\n", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.get_video_names_and_annotations": [[79, 93], ["data[].items", "video_names.append", "video_names.append", "annotations.append", "torch.data", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "if", "subset", "==", "'testing'", ":", "\n", "                ", "video_names", ".", "append", "(", "'v_{}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "video_names", ".", "append", "(", "'v_{}'", ".", "format", "(", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.modify_frame_indices": [[95, 103], ["os.path.join", "modified_indices.append", "os.path.exists"], "function", ["None"], ["", "def", "modify_frame_indices", "(", "video_dir_path", ",", "frame_indices", ")", ":", "\n", "    ", "modified_indices", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "return", "modified_indices", "\n", "", "modified_indices", ".", "append", "(", "i", ")", "\n", "", "return", "modified_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.make_dataset": [[105, 170], ["activitynet.load_annotation_data", "activitynet.get_video_names_and_annotations", "activitynet.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "utils_file.load_value_file", "print", "os.path.exists", "math.ceil", "math.ceil", "len", "list", "activitynet.modify_frame_indices", "dataset.append", "range", "len", "range", "len", "max", "copy.deepcopy", "list", "activitynet.modify_frame_indices", "dataset.append", "math.ceil", "range", "len"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.load_value_file", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.modify_frame_indices", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.modify_frame_indices"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "fps_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'fps'", ")", "\n", "fps", "=", "load_value_file", "(", "fps_file_path", ")", "\n", "\n", "for", "annotation", "in", "annotations", "[", "i", "]", ":", "\n", "            ", "begin_t", "=", "math", ".", "ceil", "(", "annotation", "[", "'segment'", "]", "[", "0", "]", "*", "fps", ")", "\n", "end_t", "=", "math", ".", "ceil", "(", "annotation", "[", "'segment'", "]", "[", "1", "]", "*", "fps", ")", "\n", "if", "begin_t", "==", "0", ":", "\n", "                ", "begin_t", "=", "1", "\n", "", "n_frames", "=", "end_t", "-", "begin_t", "\n", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'fps'", ":", "fps", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", "[", "2", ":", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "                ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotation", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "                ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "                ", "frame_indices", "=", "list", "(", "range", "(", "begin_t", ",", "end_t", ")", ")", "\n", "frame_indices", "=", "modify_frame_indices", "(", "sample", "[", "'video'", "]", ",", "\n", "frame_indices", ")", "\n", "if", "len", "(", "frame_indices", ")", "<", "16", ":", "\n", "                    ", "continue", "\n", "", "sample", "[", "'frame_indices'", "]", "=", "frame_indices", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "                ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                    ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "begin_t", ",", "end_t", ",", "step", ")", ":", "\n", "                    ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "frame_indices", "=", "list", "(", "range", "(", "j", ",", "j", "+", "sample_duration", ")", ")", "\n", "frame_indices", "=", "modify_frame_indices", "(", "\n", "sample_j", "[", "'video'", "]", ",", "frame_indices", ")", "\n", "if", "len", "(", "frame_indices", ")", "<", "16", ":", "\n", "                        ", "continue", "\n", "", "sample_j", "[", "'frame_indices'", "]", "=", "frame_indices", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.get_end_t": [[172, 177], ["os.listdir", "image_file_names.sort", "int"], "function", ["None"], ["", "def", "get_end_t", "(", "video_path", ")", ":", "\n", "    ", "file_names", "=", "os", ".", "listdir", "(", "video_path", ")", "\n", "image_file_names", "=", "[", "x", "for", "x", "in", "file_names", "if", "'image'", "in", "x", "]", "\n", "image_file_names", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "return", "int", "(", "image_file_names", "[", "0", "]", "[", "6", ":", "11", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.make_untrimmed_dataset": [[179, 228], ["activitynet.load_annotation_data", "activitynet.get_video_names_and_annotations", "activitynet.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "utils_file.load_value_file", "activitynet.get_end_t", "range", "print", "os.path.exists", "max", "copy.deepcopy", "list", "activitynet.modify_frame_indices", "dataset.append", "math.ceil", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.load_value_file", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.get_end_t", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.activitynet.modify_frame_indices"], ["", "def", "make_untrimmed_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "\n", "n_samples_for_each_video", ",", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "_", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "fps_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'fps'", ")", "\n", "fps", "=", "load_value_file", "(", "fps_file_path", ")", "\n", "\n", "begin_t", "=", "1", "\n", "end_t", "=", "get_end_t", "(", "video_path", ")", "\n", "n_frames", "=", "end_t", "-", "begin_t", "\n", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'fps'", ":", "fps", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", "[", "2", ":", "]", "\n", "}", "\n", "\n", "if", "n_samples_for_each_video", ">=", "1", ":", "\n", "            ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "begin_t", ",", "end_t", ",", "step", ")", ":", "\n", "            ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "frame_indices", "=", "list", "(", "range", "(", "j", ",", "j", "+", "sample_duration", ")", ")", "\n", "frame_indices", "=", "modify_frame_indices", "(", "sample_j", "[", "'video'", "]", ",", "\n", "frame_indices", ")", "\n", "if", "len", "(", "frame_indices", ")", "<", "16", ":", "\n", "                ", "continue", "\n", "", "sample_j", "[", "'frame_indices'", "]", "=", "frame_indices", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.Kinetics.__init__": [[157, 175], ["kinetics.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.Kinetics.__getitem__": [[176, 199], ["kinetics.Kinetics.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "kinetics.Kinetics.temporal_transform", "kinetics.Kinetics.spatial_transform.randomize_parameters", "kinetics.Kinetics.target_transform", "kinetics.Kinetics.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.Kinetics.__len__": [[200, 202], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.pil_loader": [[13, 18], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.accimage_loader": [[20, 27], ["accimage.Image", "kinetics.pil_loader"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_default_image_loader": [[29, 35], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.video_loader": [[37, 47], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_default_video_loader": [[49, 52], ["kinetics.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.load_annotation_data": [[54, 57], ["open", "json.load"], "function", ["None"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_class_labels": [[59, 66], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_video_names_and_annotations": [[68, 83], ["data[].items", "video_names.append", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "if", "subset", "==", "'testing'", ":", "\n", "                ", "video_names", ".", "append", "(", "'test/{}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.make_dataset": [[85, 138], ["kinetics.load_annotation_data", "kinetics.get_video_names_and_annotations", "kinetics.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "utils_file.load_value_file", "len", "list", "dataset.append", "range", "[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.resnets_3d.utils_file.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", "[", ":", "-", "14", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationBasicBlock.__init__": [[41, 50], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "pre_act_resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "pre_act_resnet.conv3x3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.conv3x3x3", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActivationBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationBasicBlock.forward": [[51, 68], ["pre_act_resnet.PreActivationBasicBlock.bn1", "pre_act_resnet.PreActivationBasicBlock.relu", "pre_act_resnet.PreActivationBasicBlock.conv1", "pre_act_resnet.PreActivationBasicBlock.bn2", "pre_act_resnet.PreActivationBasicBlock.relu", "pre_act_resnet.PreActivationBasicBlock.conv2", "pre_act_resnet.PreActivationBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationBottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActivationBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationBottleneck.forward": [[86, 107], ["pre_act_resnet.PreActivationBottleneck.bn1", "pre_act_resnet.PreActivationBottleneck.relu", "pre_act_resnet.PreActivationBottleneck.conv1", "pre_act_resnet.PreActivationBottleneck.bn2", "pre_act_resnet.PreActivationBottleneck.relu", "pre_act_resnet.PreActivationBottleneck.conv2", "pre_act_resnet.PreActivationBottleneck.bn3", "pre_act_resnet.PreActivationBottleneck.relu", "pre_act_resnet.PreActivationBottleneck.conv3", "pre_act_resnet.PreActivationBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationResNet.__init__": [[111, 149], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "pre_act_resnet.PreActivationResNet._make_layer", "pre_act_resnet.PreActivationResNet._make_layer", "pre_act_resnet.PreActivationResNet._make_layer", "pre_act_resnet.PreActivationResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "pre_act_resnet.PreActivationResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "PreActivationResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationResNet._make_layer": [[150, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.PreActivationResNet.forward": [[175, 192], ["pre_act_resnet.PreActivationResNet.conv1", "pre_act_resnet.PreActivationResNet.bn1", "pre_act_resnet.PreActivationResNet.relu", "pre_act_resnet.PreActivationResNet.maxpool", "pre_act_resnet.PreActivationResNet.layer1", "pre_act_resnet.PreActivationResNet.layer2", "pre_act_resnet.PreActivationResNet.layer3", "pre_act_resnet.PreActivationResNet.layer4", "pre_act_resnet.PreActivationResNet.avgpool", "pre_act_resnet.PreActivationResNet.view", "pre_act_resnet.PreActivationResNet.fc", "pre_act_resnet.PreActivationResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.conv3x3x3": [[14, 23], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.downsample_basic_block": [[25, 36], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.get_fine_tuning_parameters": [[194, 213], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.resnet18": [[215, 220], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.resnet34": [[222, 227], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.resnet50": [[229, 234], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.resnet101": [[236, 242], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.resnet152": [[244, 250], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.pre_act_resnet.resnet200": [[252, 258], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.WideBottleneck.__init__": [[38, 51], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "WideBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.WideBottleneck.forward": [[52, 73], ["wide_resnet.WideBottleneck.conv1", "wide_resnet.WideBottleneck.bn1", "wide_resnet.WideBottleneck.relu", "wide_resnet.WideBottleneck.conv2", "wide_resnet.WideBottleneck.bn2", "wide_resnet.WideBottleneck.relu", "wide_resnet.WideBottleneck.conv3", "wide_resnet.WideBottleneck.bn3", "wide_resnet.WideBottleneck.relu", "wide_resnet.WideBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.WideResNet.__init__": [[77, 116], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.WideResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "k", "=", "1", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "k", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", "*", "k", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", "*", "k", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", "*", "k", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "k", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.WideResNet._make_layer": [[117, 141], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.WideResNet.forward": [[142, 159], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.bn1", "wide_resnet.WideResNet.relu", "wide_resnet.WideResNet.maxpool", "wide_resnet.WideResNet.layer1", "wide_resnet.WideResNet.layer2", "wide_resnet.WideResNet.layer3", "wide_resnet.WideResNet.layer4", "wide_resnet.WideResNet.avgpool", "wide_resnet.WideResNet.view", "wide_resnet.WideResNet.fc", "wide_resnet.WideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.conv3x3x3": [[11, 20], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.downsample_basic_block": [[22, 33], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.get_fine_tuning_parameters": [[161, 180], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.wide_resnet.resnet50": [[182, 187], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "WideBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.BasicBlock.__init__": [[41, 50], ["torch.Module.__init__", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.conv3x3x3", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.conv3x3x3"], ["out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.BasicBlock.forward": [[51, 68], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.Bottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.Bottleneck.forward": [[86, 107], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.ResNet.__init__": [[111, 149], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer"], ["x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.ResNet._make_layer": [[150, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.ResNet.forward": [[175, 192], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.conv3x3x3": [[14, 23], ["torch.Conv3d"], "function", ["None"], ["}", "\n", "\n", "\n", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.downsample_basic_block": [[25, 36], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.get_fine_tuning_parameters": [[194, 213], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet10": [[215, 220], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet18": [[222, 227], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet34": [[229, 234], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet50": [[236, 241], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet101": [[243, 248], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet152": [[250, 255], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnet.resnet200": [[257, 262], ["resnet.ResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet._DenseLayer.__init__": [[73, 95], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm.1'", ",", "nn", ".", "BatchNorm3d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu.1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv.1'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "num_input_features", ",", "\n", "bn_size", "*", "growth_rate", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'norm.2'", ",", "nn", ".", "BatchNorm3d", "(", "bn_size", "*", "growth_rate", ")", ")", "\n", "self", ".", "add_module", "(", "'relu.2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv.2'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "bn_size", "*", "growth_rate", ",", "\n", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet._DenseLayer.forward": [[96, 102], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "\n", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet._DenseBlock.__init__": [[106, 113], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "\n", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet._Transition.__init__": [[117, 129], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm3d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "num_input_features", ",", "\n", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.DenseNet.__init__": [[143, 204], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "densenet.DenseNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet._Transition", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "len", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "\n", "bn_size", "=", "4", ",", "\n", "drop_rate", "=", "0", ",", "\n", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "sample_duration", "=", "sample_duration", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "num_init_features", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm3d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# Linear layer", "\n", "", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.DenseNet.forward": [[205, 215], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "int", "int", "torch.avg_pool3d().view", "torch.avg_pool3d().view", "torch.avg_pool3d().view", "densenet.DenseNet.classifier", "math.ceil", "math.floor", "densenet.DenseNet.size", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "floor", "(", "self", ".", "sample_size", "/", "32", ")", ")", "\n", "out", "=", "F", ".", "avg_pool3d", "(", "\n", "out", ",", "kernel_size", "=", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ")", ".", "view", "(", "\n", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet121": [[12, 19], ["densenet.DenseNet"], "function", ["None"], ["def", "densenet121", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet169": [[21, 28], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet169", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet201": [[30, 37], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet201", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.densenet264": [[39, 46], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet264", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "64", ",", "48", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.densenet.get_fine_tuning_parameters": [[48, 69], ["range", "ft_module_names.append", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'denseblock{}'", ".", "format", "(", "i", ")", ")", "\n", "ft_module_names", ".", "append", "(", "'transition{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'norm5'", ")", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXtBottleneck.__init__": [[38, 59], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_planes", "=", "cardinality", "*", "int", "(", "planes", "/", "32", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "\n", "mid_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXtBottleneck.forward": [[60, 81], ["resnext.ResNeXtBottleneck.conv1", "resnext.ResNeXtBottleneck.bn1", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv2", "resnext.ResNeXtBottleneck.bn2", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv3", "resnext.ResNeXtBottleneck.bn3", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__": [[85, 125], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnext.ResNeXt.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "cardinality", "=", "32", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "0", "]", ",", "shortcut_type", ",", "\n", "cardinality", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "1024", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cardinality", "*", "32", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt._make_layer": [[126, 157], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "shortcut_type", ",", "\n", "cardinality", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.ResNeXt.forward": [[158, 175], ["resnext.ResNeXt.conv1", "resnext.ResNeXt.bn1", "resnext.ResNeXt.relu", "resnext.ResNeXt.maxpool", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "resnext.ResNeXt.layer4", "resnext.ResNeXt.avgpool", "resnext.ResNeXt.view", "resnext.ResNeXt.fc", "resnext.ResNeXt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.conv3x3x3": [[11, 20], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.downsample_basic_block": [[22, 33], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.get_fine_tuning_parameters": [[177, 196], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet50": [[198, 203], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet101": [[205, 210], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zajaczajac_adv_framing.models.resnext.resnet152": [[212, 217], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]]}