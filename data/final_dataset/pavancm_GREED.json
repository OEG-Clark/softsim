{"home.repos.pwc.inspect_result.pavancm_GREED.None.demo_score.main": [[7, 46], ["os.system", "GREED_feat.greed_feat", "scipy.io.loadmat", "libsvm.svmutil.svm_predict", "print", "libsvm.svmutil.svm_load_model", "libsvm.svmutil.svm_load_model", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.None.GREED_feat.greed_feat"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "ref_path", "=", "args", ".", "ref_path", "\n", "\n", "height", "=", "args", ".", "height", "\n", "width", "=", "args", ".", "width", "\n", "\n", "ref_fps", "=", "args", ".", "ref_fps", "\n", "bit_depth", "=", "args", ".", "bit_depth", "\n", "if", "bit_depth", "==", "8", ":", "\n", "        ", "pix_format", "=", "'yuv420p'", "\n", "", "else", ":", "\n", "        ", "pix_format", "=", "'yuv420p10le'", "\n", "\n", "", "fps", "=", "args", ".", "dist_fps", "#frame rate of distorted sequence", "\n", "\n", "#Obtain pseudo reference video by frame dropping using ffmpeg", "\n", "cmd", "=", "'ffmpeg -r '", "+", "str", "(", "ref_fps", ")", "+", "' -pix_fmt '", "+", "pix_format", "+", "' -s '", "+", "str", "(", "width", ")", "+", "'x'", "+", "str", "(", "height", ")", "+", "' -i '", "+", "ref_path", "+", "' -filter:v fps=fps='", "+", "str", "(", "fps", ")", "+", "' pseudo_reference.yuv'", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n", "GREED_feat", "=", "greed_feat", "(", "args", ")", "\n", "\n", "#load svm model", "\n", "if", "args", ".", "height", "<", "1080", ":", "\n", "#low resolution model", "\n", "        ", "model", "=", "svm_load_model", "(", "'model_params/'", "+", "args", ".", "temp_filt", "+", "'_lowres.model'", ")", "\n", "", "else", ":", "\n", "#high resolution model", "\n", "        ", "model", "=", "svm_load_model", "(", "'model_params/'", "+", "args", ".", "temp_filt", "+", "'.model'", ")", "\n", "\n", "#load parameter of trained features", "\n", "", "feat_param", "=", "scipy", ".", "io", ".", "loadmat", "(", "'model_params/'", "+", "args", ".", "temp_filt", "+", "'_params.mat'", ")", "\n", "low", "=", "feat_param", "[", "'low'", "]", "[", "0", ",", ":", "]", ";", "high", "=", "feat_param", "[", "'high'", "]", "[", "0", ",", ":", "]", "\n", "GREED_feat", "=", "(", "GREED_feat", "-", "low", ")", "/", "(", "high", "-", "low", ")", "\n", "\n", "#Predict score", "\n", "score", ",", "_", ",", "_", "=", "svm_predict", "(", "[", "0.0", "]", ",", "GREED_feat", "[", "None", ",", ":", "]", ",", "model", ",", "'-q'", ")", "\n", "print", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.None.demo_score.parse_args": [[47, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.None.demo_feat.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ref_path'", ",", "type", "=", "str", ",", "default", "=", "'data/books_crf_0_120fps.yuv'", ",", "help", "=", "'Path to reference video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_path'", ",", "type", "=", "str", ",", "default", "=", "'data/books_crf_28_30fps.yuv'", ",", "help", "=", "'Path to distorted video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--ref_fps'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "help", "=", "'frame rate of reference video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_fps'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'frame rate of distorted video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--height'", ",", "type", "=", "int", ",", "default", "=", "1080", ",", "help", "=", "'spatial height of the frame'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "1920", ",", "help", "=", "'spatial width of the frame'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--bit_depth'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'8 bit or 10 bit video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--temp_filt'", ",", "type", "=", "str", ",", "default", "=", "'bior22'", ",", "help", "=", "'temporal filter'", ",", "metavar", "=", "''", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.None.GREED_feat.greed_feat": [[6, 89], ["open", "open.seek", "open.tell", "int", "open", "open.seek", "open.tell", "int", "entropy.entropy_cal.video_process", "entropy.entropy_cal.video_process", "entropy.entropy_cal.video_process", "os.remove", "numpy.zeros", "enumerate", "numpy.abs", "numpy.mean", "numpy.mean", "range", "int", "entropy.entropy_temporal_pool.entropy_temporal_pool", "entropy.entropy_temporal_pool.entropy_temporal_pool", "len", "numpy.mean", "numpy.abs", "numpy.mean", "numpy.mean", "int", "int", "numpy.mean", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_cal.video_process", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_cal.video_process", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_cal.video_process", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_temporal_pool.entropy_temporal_pool", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_temporal_pool.entropy_temporal_pool"], ["def", "greed_feat", "(", "args", ")", ":", "\n", "    ", "dist_path", "=", "args", ".", "dist_path", "\n", "ref_path", "=", "args", ".", "ref_path", "\n", "\n", "filt", "=", "args", ".", "temp_filt", "\n", "num_levels", "=", "3", "\n", "\n", "height", "=", "args", ".", "height", "\n", "width", "=", "args", ".", "width", "\n", "gray", "=", "True", "\n", "ref_fps", "=", "args", ".", "ref_fps", "\n", "bit_depth", "=", "args", ".", "bit_depth", "\n", "\n", "if", "bit_depth", "==", "8", ":", "\n", "        ", "multiplier", "=", "1.5", "#8 bit yuv420 video", "\n", "", "else", ":", "\n", "        ", "multiplier", "=", "3", "#10 bit yuv420 video", "\n", "\n", "", "if", "height", "<", "1080", ":", "\n", "        ", "scales", "=", "[", "3", ",", "4", "]", "#for lower than 1080p resolution", "\n", "", "elif", "height", "<", "2160", ":", "\n", "        ", "scales", "=", "[", "4", ",", "5", "]", "#1080p resolution", "\n", "", "else", ":", "\n", "        ", "scales", "=", "[", "5", ",", "6", "]", "#for 4K resolution", "\n", "\n", "#calculate number of frames in reference and distorted    ", "\n", "", "ref_stream", "=", "open", "(", "ref_path", ",", "'r'", ")", "\n", "ref_stream", ".", "seek", "(", "0", ",", "os", ".", "SEEK_END", ")", "\n", "ref_filesize", "=", "ref_stream", ".", "tell", "(", ")", "\n", "ref_T", "=", "int", "(", "ref_filesize", "/", "(", "height", "*", "width", "*", "multiplier", ")", ")", "\n", "\n", "dist_stream", "=", "open", "(", "dist_path", ",", "'r'", ")", "\n", "dist_stream", ".", "seek", "(", "0", ",", "os", ".", "SEEK_END", ")", "\n", "dist_filesize", "=", "dist_stream", ".", "tell", "(", ")", "\n", "dist_T", "=", "int", "(", "dist_filesize", "/", "(", "height", "*", "width", "*", "multiplier", ")", ")", "\n", "\n", "fps", "=", "args", ".", "dist_fps", "#frame rate of distorted sequence", "\n", "\n", "#calculate spatial entropy", "\n", "ref_entropy", "=", "video_process", "(", "ref_path", ",", "width", ",", "height", ",", "bit_depth", ",", "gray", ",", "ref_T", ",", "filt", ",", "num_levels", ",", "scales", ")", "\n", "dist_entropy", "=", "video_process", "(", "dist_path", ",", "width", ",", "height", ",", "bit_depth", ",", "gray", ",", "dist_T", ",", "filt", ",", "num_levels", ",", "scales", ")", "\n", "pr_entropy", "=", "video_process", "(", "'pseudo_reference.yuv'", ",", "width", ",", "height", ",", "bit_depth", ",", "gray", ",", "dist_T", ",", "filt", ",", "num_levels", ",", "scales", ")", "\n", "\n", "#delete pseudo reference video", "\n", "os", ".", "remove", "(", "'pseudo_reference.yuv'", ")", "\n", "\n", "#number of valid frames", "\n", "end_lim", "=", "dist_entropy", "[", "'spatial_scale'", "+", "str", "(", "scales", "[", "0", "]", ")", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "greed_feat", "=", "np", ".", "zeros", "(", "16", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "idx", ",", "scale_factor", "in", "enumerate", "(", "scales", ")", ":", "\n", "        ", "if", "int", "(", "fps", ")", "!=", "ref_fps", ":", "\n", "#Temporal Pooling of reference entropies to match the number of frames", "\n", "            ", "ref_entropy", "[", "'spatial_scale'", "+", "str", "(", "scale_factor", ")", "]", "=", "entropy_temporal_pool", "(", "ref_entropy", "[", "'spatial_scale'", "+", "str", "(", "scale_factor", ")", "]", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "int", "(", "fps", ")", ",", "ref_fps", ",", "end_lim", ")", "\n", "ref_entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", "=", "entropy_temporal_pool", "(", "ref_entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", ",", "int", "(", "fps", ")", ",", "ref_fps", ",", "end_lim", ")", "\n", "\n", "#    spatial entropy difference", "\n", "", "ent_diff_sp", "=", "np", ".", "abs", "(", "ref_entropy", "[", "'spatial_scale'", "+", "str", "(", "scale_factor", ")", "]", "-", "dist_entropy", "[", "'spatial_scale'", "+", "str", "(", "scale_factor", ")", "]", ")", "\n", "if", "len", "(", "ent_diff_sp", ".", "shape", ")", "<", "4", ":", "\n", "            ", "ent_diff_sp", "=", "ent_diff_sp", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "", "spatial_ent", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "ent_diff_sp", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "greed_feat", "[", "idx", "]", "=", "np", ".", "mean", "(", "spatial_ent", ")", "\n", "\n", "#     temporal entropy difference", "\n", "for", "freq", "in", "range", "(", "dist_entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "a", "=", "dist_entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", "[", "freq", ",", ":", ",", ":", ",", ":", "]", "\n", "b", "=", "pr_entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", "[", "freq", ",", ":", ",", ":", ",", ":", "]", "\n", "c", "=", "ref_entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", "[", "freq", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "ent_diff_temporal", "=", "np", ".", "abs", "(", "(", "(", "1", "+", "np", ".", "abs", "(", "a", "-", "b", ")", ")", "*", "(", "1", "+", "c", ")", "/", "(", "1", "+", "b", ")", ")", "-", "1", ")", "\n", "temp_ent_frame", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "ent_diff_temporal", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "\n", "greed_feat", "[", "2", "*", "(", "freq", "+", "1", ")", "+", "idx", "]", "=", "np", ".", "mean", "(", "temp_ent_frame", ")", "\n", "\n", "", "", "return", "greed_feat", "", "", ""]], "home.repos.pwc.inspect_result.pavancm_GREED.None.demo_feat.main": [[5, 28], ["os.system", "GREED_feat.greed_feat", "print", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.None.GREED_feat.greed_feat"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "ref_path", "=", "args", ".", "ref_path", "\n", "\n", "height", "=", "args", ".", "height", "\n", "width", "=", "args", ".", "width", "\n", "\n", "ref_fps", "=", "args", ".", "ref_fps", "\n", "bit_depth", "=", "args", ".", "bit_depth", "\n", "if", "bit_depth", "==", "8", ":", "\n", "        ", "pix_format", "=", "'yuv420p'", "\n", "", "else", ":", "\n", "        ", "pix_format", "=", "'yuv420p10le'", "\n", "\n", "", "fps", "=", "args", ".", "dist_fps", "#frame rate of distorted sequence", "\n", "\n", "#Obtain pseudo reference video by frame dropping using ffmpeg", "\n", "cmd", "=", "'ffmpeg -r '", "+", "str", "(", "ref_fps", ")", "+", "' -pix_fmt '", "+", "pix_format", "+", "' -s '", "+", "str", "(", "width", ")", "+", "'x'", "+", "str", "(", "height", ")", "+", "' -i '", "+", "ref_path", "+", "' -filter:v fps=fps='", "+", "str", "(", "fps", ")", "+", "' pseudo_reference.yuv'", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n", "GREED_feat", "=", "greed_feat", "(", "args", ")", "\n", "print", "(", "GREED_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.None.demo_feat.parse_args": [[29, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.None.demo_feat.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ref_path'", ",", "type", "=", "str", ",", "default", "=", "'data/books_crf_0_120fps.yuv'", ",", "help", "=", "'Path to reference video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_path'", ",", "type", "=", "str", ",", "default", "=", "'data/books_crf_28_30fps.yuv'", ",", "help", "=", "'Path to distorted video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--ref_fps'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "help", "=", "'frame rate of reference video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_fps'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'frame rate of distorted video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--height'", ",", "type", "=", "int", ",", "default", "=", "1080", ",", "help", "=", "'spatial height of the frame'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "1920", ",", "help", "=", "'spatial width of the frame'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--bit_depth'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'8 bit or 10 bit video'", ",", "metavar", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--temp_filt'", ",", "type", "=", "str", ",", "default", "=", "'bior22'", ",", "help", "=", "'temporal filter'", ",", "metavar", "=", "''", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_params.est_params_ggd": [[7, 38], ["sizeim.astype.astype", "numpy.array().reshape", "numpy.sqrt", "numpy.var", "scipy.stats.kurtosis", "entropy.estimateggdparam.cal_shape_kurtosis", "entropy.estimateggdparam.entropy_ggd", "numpy.floor", "skimage.util.view_as_blocks().reshape", "y.ravel", "y.ravel", "numpy.array", "numpy.sum().reshape", "numpy.array", "skimage.util.view_as_blocks", "skvideo.utils.mscn.gen_gauss_window", "numpy.ascontiguousarray", "numpy.sum", "int", "int"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.entropy.estimateggdparam.cal_shape_kurtosis", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.estimateggdparam.entropy_ggd"], ["def", "est_params_ggd", "(", "y", ",", "blk", ",", "sigma_nsq", ")", ":", "\n", "    ", "\"\"\" 'ss' and 'ent' refer to the local variance parameter and the\n        entropy at different locations of the subband\n        y is a subband of the decomposition, 'blk' is the block size, 'sigma_nsq' is\n        the neural noise variance \"\"\"", "\n", "\n", "sizeim", "=", "np", ".", "floor", "(", "np", ".", "array", "(", "y", ".", "shape", ")", "/", "blk", ")", "*", "blk", "\n", "sizeim", "=", "sizeim", ".", "astype", "(", "np", ".", "int", ")", "\n", "y", "=", "y", "[", ":", "sizeim", "[", "0", "]", ",", ":", "sizeim", "[", "1", "]", "]", ".", "T", "\n", "\n", "temp", "=", "skimage", ".", "util", ".", "view_as_blocks", "(", "np", ".", "ascontiguousarray", "(", "y", ")", ",", "(", "blk", ",", "blk", ")", ")", ".", "reshape", "(", "-", "1", ",", "blk", "*", "blk", ")", ".", "T", "\n", "\n", "#window", "\n", "window", "=", "np", ".", "array", "(", "gen_gauss_window", "(", "(", "blk", "-", "1", ")", "/", "2", ",", "blk", "/", "6", ")", ")", ".", "reshape", "(", "blk", ",", "1", ")", "\n", "window", "=", "(", "window", "@", "window", ".", "T", ")", ".", "ravel", "(", ")", "\n", "#window = np.ones(blk*blk)/(blk*blk)", "\n", "ss", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "temp", "**", "2", ")", "*", "window", "[", ":", ",", "None", "]", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "int", "(", "sizeim", "[", "1", "]", "/", "blk", ")", ",", "int", "(", "sizeim", "[", "0", "]", "/", "blk", ")", ")", ")", ".", "T", ")", "\n", "ss", "=", "ss", "+", "sigma_nsq", "\n", "\n", "sigma_sq", "=", "np", ".", "var", "(", "y", ".", "ravel", "(", ")", ")", "\n", "multiplier", "=", "(", "sigma_sq", "/", "(", "sigma_sq", "+", "sigma_nsq", ")", ")", "**", "2", "\n", "\n", "kurt_obs", "=", "kurtosis", "(", "y", ".", "ravel", "(", ")", ")", "\n", "kurt_noisy", "=", "kurt_obs", "*", "multiplier", "+", "3", "\n", "\n", "gam", "=", "cal_shape_kurtosis", "(", "kurt_noisy", ")", "\n", "#Compute entropy", "\n", "ent", "=", "entropy_ggd", "(", "gam", ",", "ss", ")", "\n", "return", "ss", ",", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_params.est_params_ggd_temporal": [[39, 61], ["range", "int", "int", "numpy.zeros", "numpy.zeros", "range", "temporal_ss.append", "temporal_ent.append", "numpy.floor", "numpy.floor", "entropy_params.est_params_ggd"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_params.est_params_ggd"], ["", "def", "est_params_ggd_temporal", "(", "y", ",", "blk", ",", "sigma_nsq", ")", ":", "\n", "    ", "\"\"\" 'temporal_ss' and 'temporal_ent' refer to the temporal local variance \n        parameter and the entropy at different locations of the subband\n        y is a subband of the decomposition, 'blk' is the block size, 'sigma' is\n        the neural noise variance \"\"\"", "\n", "height", ",", "width", "=", "int", "(", "np", ".", "floor", "(", "y", ".", "shape", "[", "0", "]", "/", "blk", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "y", ".", "shape", "[", "1", "]", "/", "blk", ")", ")", "\n", "num_frames", "=", "y", ".", "shape", "[", "3", "]", "\n", "\n", "temporal_ss", "=", "[", "]", "\n", "temporal_ent", "=", "[", "]", "\n", "for", "freq", "in", "range", "(", "y", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "vol", "=", "y", "[", ":", ",", ":", ",", "freq", ",", ":", "]", "\n", "\n", "ss", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "num_frames", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "ent", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "num_frames", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "for", "time_idx", "in", "range", "(", "(", "vol", ".", "shape", "[", "2", "]", ")", ")", ":", "\n", "            ", "ss", "[", ":", ",", ":", ",", "time_idx", "]", ",", "ent", "[", ":", ",", ":", ",", "time_idx", "]", "=", "est_params_ggd", "(", "vol", "[", ":", ",", ":", ",", "time_idx", "]", ",", "blk", ",", "sigma_nsq", ")", "\n", "\n", "", "temporal_ss", ".", "append", "(", "ss", ")", "\n", "temporal_ent", ".", "append", "(", "ent", ")", "\n", "", "return", "temporal_ss", ",", "temporal_ent", "\n", "", ""]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.yuvRead.yuvRead_frame": [[4, 61], ["stream.seek", "numpy.fromfile().reshape", "cv2.resize.astype", "cv2.resize", "stream.seek", "numpy.fromfile().reshape", "cv2.resize.astype", "cv2.resize", "numpy.fromfile().reshape().repeat().repeat", "numpy.fromfile().reshape().repeat().repeat", "cv2.resize.astype", "cv2.resize", "cv2.resize.astype", "cv2.resize", "numpy.fromfile().reshape().repeat().repeat", "numpy.fromfile().reshape().repeat().repeat", "cv2.resize.astype", "cv2.resize", "cv2.resize.astype", "cv2.resize", "numpy.fromfile", "int", "int", "numpy.fromfile", "int", "int", "numpy.fromfile().reshape().repeat", "numpy.fromfile().reshape().repeat", "int", "int", "int", "int", "numpy.fromfile().reshape().repeat", "numpy.fromfile().reshape().repeat", "int", "int", "int", "int", "numpy.fromfile().reshape", "numpy.fromfile().reshape", "numpy.fromfile().reshape", "numpy.fromfile().reshape", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile"], "function", ["None"], ["def", "yuvRead_frame", "(", "stream", ",", "width", ",", "height", ",", "iFrame", ",", "bit_depth", ",", "gray", ",", "sz", ")", ":", "\n", "    ", "if", "bit_depth", "==", "8", ":", "\n", "        ", "stream", ".", "seek", "(", "iFrame", "*", "1.5", "*", "width", "*", "height", ")", "\n", "y_plane", "=", "np", ".", "fromfile", "(", "stream", ",", "dtype", "=", "np", ".", "uint8", ",", "count", "=", "width", "*", "height", ")", ".", "reshape", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "y_plane", "=", "y_plane", ".", "astype", "(", "np", ".", "float", ")", "\n", "y_plane", "=", "cv2", ".", "resize", "(", "y_plane", ",", "(", "int", "(", "width", "*", "sz", ")", ",", "int", "(", "height", "*", "sz", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "if", "not", "gray", ":", "\n", "            ", "u_plane", "=", "np", ".", "fromfile", "(", "stream", ",", "dtype", "=", "np", ".", "uint8", ",", "count", "=", "(", "width", "//", "2", ")", "*", "(", "height", "//", "2", ")", ")", ".", "reshape", "(", "(", "height", "//", "2", ",", "width", "//", "2", ")", ")", ".", "repeat", "(", "2", ",", "axis", "=", "0", ")", ".", "repeat", "(", "2", ",", "axis", "=", "1", ")", "\n", "v_plane", "=", "np", ".", "fromfile", "(", "stream", ",", "dtype", "=", "np", ".", "uint8", ",", "count", "=", "(", "width", "//", "2", ")", "*", "(", "height", "//", "2", ")", ")", ".", "reshape", "(", "(", "height", "//", "2", ",", "width", "//", "2", ")", ")", ".", "repeat", "(", "2", ",", "axis", "=", "0", ")", ".", "repeat", "(", "2", ",", "axis", "=", "1", ")", "\n", "u_plane", "=", "u_plane", ".", "astype", "(", "np", ".", "float", ")", "\n", "u_plane", "=", "cv2", ".", "resize", "(", "u_plane", ",", "(", "int", "(", "width", "*", "sz", "/", "2", ")", ",", "int", "(", "height", "*", "sz", "/", "2", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "v_plane", "=", "v_plane", ".", "astype", "(", "np", ".", "float", ")", "\n", "v_plane", "=", "cv2", ".", "resize", "(", "v_plane", ",", "(", "int", "(", "width", "*", "sz", "/", "2", ")", ",", "int", "(", "height", "*", "sz", "/", "2", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "", "else", ":", "\n", "            ", "u_plane", "=", "[", "]", "\n", "v_plane", "=", "[", "]", "\n", "", "", "else", ":", "\n", "        ", "stream", ".", "seek", "(", "iFrame", "*", "3", "*", "width", "*", "height", ")", "\n", "y_plane", "=", "np", ".", "fromfile", "(", "stream", ",", "dtype", "=", "np", ".", "uint16", ",", "count", "=", "width", "*", "height", ")", ".", "reshape", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "y_plane", "=", "y_plane", ".", "astype", "(", "np", ".", "float", ")", "\n", "y_plane", "=", "cv2", ".", "resize", "(", "y_plane", ",", "(", "int", "(", "width", "*", "sz", ")", ",", "int", "(", "height", "*", "sz", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "if", "not", "gray", ":", "\n", "            ", "u_plane", "=", "np", ".", "fromfile", "(", "stream", ",", "dtype", "=", "np", ".", "uint16", ",", "count", "=", "(", "width", "//", "2", ")", "*", "(", "height", "//", "2", ")", ")", ".", "reshape", "(", "(", "height", "//", "2", ",", "width", "//", "2", ")", ")", ".", "repeat", "(", "2", ",", "axis", "=", "0", ")", ".", "repeat", "(", "2", ",", "axis", "=", "1", ")", "\n", "v_plane", "=", "np", ".", "fromfile", "(", "stream", ",", "dtype", "=", "np", ".", "uint16", ",", "count", "=", "(", "width", "//", "2", ")", "*", "(", "height", "//", "2", ")", ")", ".", "reshape", "(", "(", "height", "//", "2", ",", "width", "//", "2", ")", ")", ".", "repeat", "(", "2", ",", "axis", "=", "0", ")", ".", "repeat", "(", "2", ",", "axis", "=", "1", ")", "\n", "u_plane", "=", "u_plane", ".", "astype", "(", "np", ".", "float", ")", "\n", "u_plane", "=", "cv2", ".", "resize", "(", "u_plane", ",", "(", "int", "(", "width", "*", "sz", "/", "2", ")", ",", "int", "(", "height", "*", "sz", "/", "2", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "v_plane", "=", "v_plane", ".", "astype", "(", "np", ".", "float", ")", "\n", "v_plane", "=", "cv2", ".", "resize", "(", "v_plane", ",", "(", "int", "(", "width", "*", "sz", "/", "2", ")", ",", "int", "(", "height", "*", "sz", "/", "2", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "", "else", ":", "\n", "            ", "u_plane", "=", "[", "]", "\n", "v_plane", "=", "[", "]", "\n", "\n", "", "", "return", "y_plane", ",", "u_plane", ",", "v_plane", "", "", ""]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_cal.compute_MS_transform": [[10, 16], ["numpy.zeros", "scipy.ndimage.correlate1d", "scipy.ndimage.correlate1d", "scipy.ndimage.correlate1d", "scipy.ndimage.correlate1d"], "function", ["None"], ["def", "compute_MS_transform", "(", "image", ",", "window", ",", "extend_mode", "=", "'reflect'", ")", ":", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "\n", "mu_image", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scipy", ".", "ndimage", ".", "correlate1d", "(", "image", ",", "window", ",", "0", ",", "mu_image", ",", "mode", "=", "extend_mode", ")", "\n", "scipy", ".", "ndimage", ".", "correlate1d", "(", "mu_image", ",", "window", ",", "1", ",", "mu_image", ",", "mode", "=", "extend_mode", ")", "\n", "return", "image", "-", "mu_image", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_cal.video_process": [[17, 88], ["scipy.io.loadmat", "scipy.io.loadmat", "open", "numpy.zeros", "range", "numpy.zeros", "range", "entropy.entropy_params.est_params_ggd_temporal", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "spatial_ent_scaled.transpose.transpose", "str", "entropy.yuvRead.yuvRead_frame", "skvideo.utils.mscn.gen_gauss_window", "entropy_cal.compute_MS_transform", "entropy.entropy_params.est_params_ggd", "np.array.append", "np.array.append", "numpy.log", "numpy.log", "int", "int", "scipy.ndimage.filters.convolve1d", "scipy.ndimage.filters.convolve1d", "numpy.isinf", "numpy.isinf", "numpy.isinf", "numpy.isinf", "str", "str"], "function", ["home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_params.est_params_ggd_temporal", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.yuvRead.yuvRead_frame", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_cal.compute_MS_transform", "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_params.est_params_ggd"], ["", "def", "video_process", "(", "vid_path", ",", "width", ",", "height", ",", "bit_depth", ",", "gray", ",", "T", ",", "filt", ",", "num_levels", ",", "scales", ")", ":", "\n", "\n", "#Load WPT filters", "\n", "\n", "    ", "filt_path", "=", "'WPT_Filters/'", "+", "filt", "+", "'_wpt_'", "+", "str", "(", "num_levels", ")", "+", "'.mat'", "\n", "wfun", "=", "scipy", ".", "io", ".", "loadmat", "(", "filt_path", ")", "\n", "wfun", "=", "wfun", "[", "'wfun'", "]", "\n", "\n", "blk", "=", "5", "\n", "sigma_nsq", "=", "0.1", "\n", "win_len", "=", "7", "\n", "\n", "entropy", "=", "{", "}", "\n", "vid_stream", "=", "open", "(", "vid_path", ",", "'r'", ")", "\n", "\n", "for", "scale_factor", "in", "scales", ":", "\n", "        ", "sz", "=", "2", "**", "(", "-", "scale_factor", ")", "\n", "frame_data", "=", "np", ".", "zeros", "(", "(", "int", "(", "height", "*", "sz", ")", ",", "int", "(", "width", "*", "sz", ")", ",", "T", ")", ")", "\n", "\n", "spatial_sig", "=", "[", "]", "\n", "spatial_ent", "=", "[", "]", "\n", "for", "frame_ind", "in", "range", "(", "0", ",", "T", ")", ":", "\n", "            ", "frame_data", "[", ":", ",", ":", ",", "frame_ind", "]", ",", "_", ",", "_", "=", "yuvRead_frame", "(", "vid_stream", ",", "width", ",", "height", ",", "frame_ind", ",", "bit_depth", ",", "gray", ",", "sz", ")", "\n", "\n", "window", "=", "gen_gauss_window", "(", "(", "win_len", "-", "1", ")", "/", "2", ",", "win_len", "/", "6", ")", "\n", "MS_frame", "=", "compute_MS_transform", "(", "frame_data", "[", ":", ",", ":", ",", "frame_ind", "]", ",", "window", ")", "\n", "\n", "spatial_sig_frame", ",", "spatial_ent_frame", "=", "est_params_ggd", "(", "MS_frame", ",", "blk", ",", "sigma_nsq", ")", "\n", "spatial_sig", ".", "append", "(", "spatial_sig_frame", ")", "\n", "spatial_ent", ".", "append", "(", "spatial_ent_frame", ")", "\n", "\n", "#Wavelet Packet Filtering", "\n", "#valid indices for start and end points", "\n", "", "valid_lim", "=", "frame_data", ".", "shape", "[", "2", "]", "-", "wfun", ".", "shape", "[", "1", "]", "+", "1", "\n", "start_ind", "=", "wfun", ".", "shape", "[", "1", "]", "//", "2", "-", "1", "\n", "dpt_filt", "=", "np", ".", "zeros", "(", "(", "frame_data", ".", "shape", "[", "0", "]", ",", "frame_data", ".", "shape", "[", "1", "]", ",", "2", "**", "num_levels", "-", "1", ",", "valid_lim", ")", ")", "\n", "\n", "for", "freq", "in", "range", "(", "wfun", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "dpt_filt", "[", ":", ",", ":", ",", "freq", ",", ":", "]", "=", "scipy", ".", "ndimage", ".", "filters", ".", "convolve1d", "(", "frame_data", ",", "wfun", "[", "freq", ",", ":", "]", ",", "axis", "=", "2", ",", "mode", "=", "'constant'", ")", "[", ":", ",", ":", ",", "start_ind", ":", "start_ind", "+", "valid_lim", "]", "\n", "\n", "", "temporal_sig", ",", "temporal_ent", "=", "est_params_ggd_temporal", "(", "dpt_filt", ",", "blk", ",", "sigma_nsq", ")", "\n", "\n", "#convert lists to numpy arrays", "\n", "spatial_sig", "=", "np", ".", "array", "(", "spatial_sig", ")", "\n", "spatial_sig", "[", "np", ".", "isinf", "(", "spatial_sig", ")", "]", "=", "0", "\n", "\n", "spatial_ent", "=", "np", ".", "array", "(", "spatial_ent", ")", "\n", "spatial_ent", "[", "np", ".", "isinf", "(", "spatial_ent", ")", "]", "=", "0", "\n", "\n", "temporal_sig", "=", "np", ".", "array", "(", "temporal_sig", ")", "\n", "temporal_sig", "[", "np", ".", "isinf", "(", "temporal_sig", ")", "]", "=", "0", "\n", "\n", "temporal_ent", "=", "np", ".", "array", "(", "temporal_ent", ")", "\n", "temporal_ent", "[", "np", ".", "isinf", "(", "temporal_ent", ")", "]", "=", "0", "\n", "\n", "#calculate rescaled entropy", "\n", "spatial_ent_scaled", "=", "np", ".", "log", "(", "1", "+", "spatial_sig", "**", "2", ")", "*", "spatial_ent", "\n", "temporal_ent_scaled", "=", "np", ".", "log", "(", "1", "+", "temporal_sig", "**", "2", ")", "*", "temporal_ent", "\n", "\n", "# reshape spatial entropy to heightxwidthxnum_frames", "\n", "spatial_ent_scaled", "=", "spatial_ent_scaled", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "entropy", "[", "'spatial_scale'", "+", "str", "(", "scale_factor", ")", "]", "=", "spatial_ent_scaled", "[", ":", ",", ":", ",", ":", "valid_lim", "]", "\n", "entropy", "[", "'temporal_scale'", "+", "str", "(", "scale_factor", ")", "]", "=", "temporal_ent_scaled", "\n", "\n", "", "return", "entropy", "", "", ""]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.estimateggdparam.ggd_features": [[6, 17], ["numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.argmin", "numpy.abs", "numpy.abs", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma"], "function", ["None"], ["def", "ggd_features", "(", "vec", ")", ":", "\n", "    ", "r_gam", "=", "(", "scipy", ".", "special", ".", "gamma", "(", "1", "/", "gam", ")", "*", "scipy", ".", "special", ".", "gamma", "(", "3", "/", "gam", ")", ")", "/", "(", "(", "scipy", ".", "special", ".", "gamma", "(", "2", "/", "gam", ")", ")", "**", "2", ")", "\n", "\n", "sigma_sq", "=", "np", ".", "mean", "(", "vec", "**", "2", ")", "\n", "sigma", "=", "np", ".", "sqrt", "(", "sigma_sq", ")", "\n", "E", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "vec", ")", ")", "\n", "rho", "=", "sigma_sq", "/", "E", "**", "2", "\n", "pos", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "rho", "-", "r_gam", ")", ")", "\n", "gamparam", "=", "gam", "[", "pos", "]", "\n", "return", "gamparam", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.estimateggdparam.cal_shape_kurtosis": [[18, 25], ["numpy.arange", "numpy.argmin", "numpy.abs", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma"], "function", ["None"], ["", "def", "cal_shape_kurtosis", "(", "kurt", ")", ":", "\n", "    ", "gam", "=", "np", ".", "arange", "(", "0.2", ",", "10", ",", "0.001", ")", "\n", "r_gam", "=", "(", "scipy", ".", "special", ".", "gamma", "(", "5", "/", "gam", ")", "*", "scipy", ".", "special", ".", "gamma", "(", "1", "/", "gam", ")", ")", "/", "(", "(", "scipy", ".", "special", ".", "gamma", "(", "3", "/", "gam", ")", ")", "**", "2", ")", "\n", "pos", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "kurt", "-", "r_gam", ")", ")", "\n", "gamparam", "=", "gam", "[", "pos", "]", "\n", "return", "gamparam", "\n", "\n"]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.estimateggdparam.entropy_ggd": [[26, 30], ["numpy.sqrt", "numpy.log", "scipy.special.gamma", "scipy.special.gamma", "scipy.special.gamma"], "function", ["None"], ["", "def", "entropy_ggd", "(", "gam", ",", "sig", ")", ":", "\n", "    ", "beta", "=", "sig", "*", "np", ".", "sqrt", "(", "scipy", ".", "special", ".", "gamma", "(", "1", "/", "gam", ")", "/", "scipy", ".", "special", ".", "gamma", "(", "3", "/", "gam", ")", ")", "\n", "ent", "=", "(", "1", "/", "gam", ")", "-", "np", ".", "log", "(", "gam", "/", "(", "2", "*", "beta", "*", "scipy", ".", "special", ".", "gamma", "(", "1", "/", "gam", ")", ")", ")", "\n", "return", "ent", "\n", "", ""]], "home.repos.pwc.inspect_result.pavancm_GREED.entropy.entropy_temporal_pool.entropy_temporal_pool": [[3, 75], ["numpy.zeros", "numpy.zeros", "range", "numpy.arange", "range", "numpy.arange", "numpy.mean", "numpy.arange", "numpy.arange", "numpy.array", "numpy.ones", "numpy.array", "numpy.array", "np.array.extend", "np.array.append", "np.array.append", "numpy.arange", "numpy.ones", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "range", "range", "range", "np.array.append", "np.array.append", "np.array.append", "range", "range", "range", "len", "len", "len", "np.array.astype", "len"], "function", ["None"], ["def", "entropy_temporal_pool", "(", "ent", ",", "fps", ",", "ref_fps", ",", "end_lim", ")", ":", "\n", "    ", "\"\"\"finding subsampling indices to get temporal entropy \n    averaging based on ffmpeg convention\"\"\"", "\n", "\n", "mean_ent", "=", "np", ".", "zeros", "(", "(", "ent", ".", "shape", "[", "0", "]", ",", "ent", ".", "shape", "[", "1", "]", ",", "ent", ".", "shape", "[", "2", "]", ",", "end_lim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "ik", "=", "np", ".", "zeros", "(", "(", "end_lim", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "if", "fps", "==", "24", ":", "\n", "        ", "ind", "=", "np", ".", "arange", "(", "3", ",", "ent", ".", "shape", "[", "3", "]", ",", "5", ")", "\n", "", "elif", "fps", "==", "30", ":", "\n", "        ", "ind", "=", "np", ".", "arange", "(", "2", ",", "ent", ".", "shape", "[", "3", "]", ",", "4", ")", "\n", "", "elif", "fps", "==", "60", ":", "\n", "        ", "ind", "=", "np", ".", "arange", "(", "1", ",", "ent", ".", "shape", "[", "3", "]", ",", "2", ")", "\n", "", "elif", "fps", "==", "82", ":", "\n", "        ", "\"\"\" Following ffmpeg convention, find pattern for obtaining 82 fps from 120 fps,\n        first find odd pattern, then even pattern an merge at the end. This code snippet\n        was obtained by testing the index of the frames dropped by ffmpeg\"\"\"", "\n", "odd_id", "=", "np", ".", "arange", "(", "20", ",", "end_lim", ",", "fps", "//", "2", ")", "\n", "odd_pl", "=", "[", "odd_id", "[", "0", "]", "-", "13", ",", "odd_id", "[", "0", "]", "]", "\n", "[", "odd_pl", ".", "extend", "(", "[", "odd_id", "[", "x", "]", "+", "15", ",", "odd_id", "[", "x", "]", "+", "28", ",", "odd_id", "[", "x", "]", "+", "41", "]", ")", "for", "x", "in", "range", "(", "len", "(", "odd_id", ")", "-", "1", ")", "]", "\n", "odd_pl", "=", "np", ".", "array", "(", "odd_pl", ")", "\n", "\n", "#Use the above indices along with even pattern", "\n", "diff", "=", "np", ".", "ones", "(", "end_lim", ",", "dtype", "=", "int", ")", "\n", "diff", "[", "odd_pl", "]", "=", "0", "\n", "diff_fin", "=", "[", "0", "]", "\n", "[", "diff_fin", ".", "append", "(", "2", "-", "diff_fin", "[", "a", "]", "-", "diff", "[", "a", "+", "1", "]", ")", "for", "a", "in", "range", "(", "len", "(", "diff", ")", "-", "1", ")", "]", "\n", "diff_fin", "=", "np", ".", "array", "(", "diff_fin", ")", "\n", "diff_fin", "[", "diff_fin", "==", "-", "1", "]", "=", "1", ";", "diff_fin", "[", "diff_fin", "==", "2", "]", "=", "0", "\n", "\n", "#Calculate final indices", "\n", "ind", "=", "[", "1", "]", "\n", "[", "ind", ".", "append", "(", "ind", "[", "i", "-", "1", "]", "+", "1", "+", "diff_fin", "[", "i", "]", ")", "for", "i", "in", "range", "(", "1", ",", "end_lim", ")", "]", "\n", "ind", "=", "np", ".", "array", "(", "ind", ")", "\n", "", "elif", "fps", "==", "98", ":", "\n", "        ", "\"\"\"Following ffmpeg convention, find pattern for obtaining 98 fps from 120 fps.\n        This code snippet was obtained by testing the index of the frames dropped by \n        ffmpeg\"\"\"", "\n", "num_drop_frames", "=", "ent", ".", "shape", "[", "3", "]", "-", "end_lim", "\n", "odd_id", "=", "np", ".", "arange", "(", "6", ",", "num_drop_frames", ",", "11", ")", "\n", "dk", "=", "np", ".", "ones", "(", "num_drop_frames", ")", "\n", "dk", "[", "odd_id", "]", "=", "0", "\n", "\n", "#find patterns in differences", "\n", "diff_fin", "=", "[", "0", "]", "\n", "[", "diff_fin", ".", "append", "(", "2", "-", "diff_fin", "[", "a", "]", "-", "dk", "[", "a", "+", "1", "]", ")", "for", "a", "in", "range", "(", "len", "(", "dk", ")", "-", "1", ")", "]", "\n", "diff_fin", "=", "np", ".", "array", "(", "diff_fin", ")", "\n", "diff_fin", "[", "diff_fin", "==", "0", "]", "=", "5", "\n", "diff_fin", "[", "diff_fin", "==", "1", "]", "=", "4", "\n", "drop_ind", "=", "[", "3", "]", "\n", "[", "drop_ind", ".", "append", "(", "drop_ind", "[", "i", "]", "+", "diff_fin", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "diff_fin", ")", ")", "]", "\n", "drop_ind", "=", "np", ".", "array", "(", "drop_ind", ")", "\n", "drop_ind", "=", "drop_ind", "[", "drop_ind", "<", "end_lim", "]", "\n", "coord_diff", "=", "np", ".", "zeros", "(", "end_lim", ")", "\n", "coord_diff", "[", "drop_ind", ".", "astype", "(", "int", ")", "-", "1", "]", "=", "1", "\n", "\n", "#Calculate final indices", "\n", "ind", "=", "[", "1", "]", "\n", "[", "ind", ".", "append", "(", "ind", "[", "i", "-", "1", "]", "+", "1", "+", "coord_diff", "[", "i", "]", ")", "for", "i", "in", "range", "(", "1", ",", "end_lim", ")", "]", "\n", "ind", "=", "np", ".", "array", "(", "ind", ")", "\n", "\n", "", "ik", "[", ":", ",", "1", "]", "=", "ind", "[", ":", "end_lim", "]", "\n", "ik", "[", "1", ":", ",", "0", "]", "=", "ik", "[", ":", "-", "1", ",", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "end_lim", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "ent", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "vol", "=", "ent", "[", "j", ",", ":", ",", ":", ",", "ik", "[", "i", ",", "0", "]", ":", "ik", "[", "i", ",", "1", "]", "]", "\n", "mean_ent", "[", "j", ",", ":", ",", ":", ",", "i", "]", "=", "np", ".", "mean", "(", "vol", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "return", "mean_ent", "", "", ""]]}