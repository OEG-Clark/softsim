{"home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.__init__": [[17, 33], ["datetime.datetime.fromtimestamp().strftime", "os.path.join", "logger.Logger.setup_checks", "logger.Logger.create_folder_structure", "logger.Logger.setup_loggers", "logger.Logger.dump_init_info", "datetime.datetime.fromtimestamp", "time.time"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.setup_checks", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.create_folder_structure", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.setup_loggers", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.dump_init_info"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "\n", "        ", "self", ".", "configs", "=", "configs", "\n", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "time", ".", "time", "(", ")", ")", ".", "strftime", "(", "\"%Y%m%d%H%M\"", ")", "\n", "prefix_str", "=", "time_str", "+", "\"_\"", "+", "configs", "[", "\"notes\"", "]", "\n", "if", "configs", "[", "\"dev\"", "]", ":", "\n", "            ", "prefix_str", "=", "\"dev_\"", "+", "prefix_str", "\n", "\n", "", "self", ".", "log_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "configs", "[", "\"logging_folder\"", "]", ",", "prefix_str", ")", "\n", "self", ".", "tb_prefix", "=", "prefix_str", "\n", "\n", "self", ".", "setup_checks", "(", ")", "\n", "self", ".", "create_folder_structure", "(", ")", "\n", "self", ".", "setup_loggers", "(", ")", "\n", "self", ".", "dump_init_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.create_folder_structure": [[34, 50], ["os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "create_folder_structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creates the folder structure for logging. Subfolders can be added here\n        \"\"\"", "\n", "base_dir", "=", "self", ".", "log_folder", "\n", "sub_folders", "=", "[", "\"runs\"", ",", "\"models\"", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "configs", "[", "\"logging_folder\"", "]", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "configs", "[", "\"logging_folder\"", "]", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "base_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "base_dir", ")", "\n", "\n", "", "for", "sf", "in", "sub_folders", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "sf", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "sf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.setup_loggers": [[51, 71], ["os.path.join", "logging.getLogger", "logger.Logger.print_logger.setLevel", "logging.Formatter", "tensorboardX.SummaryWriter", "getattr", "logging.StreamHandler", "logging.FileHandler", "h.setFormatter", "logger.Logger.print_logger.addHandler", "os.path.join", "logger.Logger.configs[].upper"], "methods", ["None"], ["", "", "", "def", "setup_loggers", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Sets up a logger that logs to both file and stdout\n        \"\"\"", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "\"log.log\"", ")", "\n", "\n", "self", ".", "print_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "self", ".", "print_logger", ".", "setLevel", "(", "\n", "getattr", "(", "logging", ",", "self", ".", "configs", "[", "\"log_level\"", "]", ".", "upper", "(", ")", ",", "None", ")", "\n", ")", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ",", "logging", ".", "FileHandler", "(", "log_path", ")", "]", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"%(levelname)s - %(filename)s - %(asctime)s - %(message)s\"", "\n", ")", "\n", "for", "h", "in", "handlers", ":", "\n", "            ", "h", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "print_logger", ".", "addHandler", "(", "h", ")", "\n", "\n", "# Setup Tensorboard", "\n", "", "self", ".", "tb", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "\"runs\"", ",", "self", ".", "tb_prefix", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.setup_checks": [[72, 90], ["git.Repo", "open", "os.path.join", "line.find", "line.find", "len"], "methods", ["None"], ["", "def", "setup_checks", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Verifies that all changes have been committed\n        Verifies that hashes match (if continuation)\n        \"\"\"", "\n", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "sha", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n", "\n", "\n", "# Test for continuation", "\n", "if", "self", ".", "configs", "[", "\"continuation\"", "]", ":", "\n", "            ", "self", ".", "log_folder", "=", "self", ".", "configs", "[", "\"logging_folder\"", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "\"log.log\"", ")", ",", "\"r\"", ")", "as", "old_log", ":", "\n", "                ", "for", "line", "in", "old_log", ":", "\n", "                    ", "find_str", "=", "\"Git hash\"", "\n", "if", "line", ".", "find", "(", "find_str", ")", "is", "not", "-", "1", ":", "\n", "                        ", "old_sha", "=", "line", "[", "line", ".", "find", "(", "find_str", ")", "+", "len", "(", "find_str", ")", "+", "2", ":", "-", "4", "]", "\n", "assert", "sha", "==", "old_sha", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.dump_init_info": [[91, 117], ["git.Repo", "logger.Logger.print", "logger.Logger.print", "logger.Logger.print", "logger.Logger.configs[].append", "logger.Logger.print", "logger.Logger.print", "logger.Logger.print", "yaml.dump", "open", "yaml.dump", "logger.Logger.tb.add_text", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print"], ["", "", "", "", "", "def", "dump_init_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Saves important info for replicability\n        \"\"\"", "\n", "if", "not", "self", ".", "configs", "[", "\"continuation\"", "]", ":", "\n", "            ", "self", ".", "configs", "[", "\"logging_folder\"", "]", "=", "self", ".", "log_folder", "\n", "", "else", ":", "\n", "            ", "self", ".", "print", "(", "\"=\"", "*", "80", ")", "\n", "self", ".", "print", "(", "\"Continuing log\"", ")", "\n", "self", ".", "print", "(", "\"=\"", "*", "80", ")", "\n", "\n", "", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "sha", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n", "\n", "self", ".", "print", "(", "\"Git hash: {}\"", ".", "format", "(", "sha", ")", ")", "\n", "self", ".", "print", "(", "\"Dumping YAML file\"", ")", "\n", "self", ".", "print", "(", "\"Configs: \"", ",", "yaml", ".", "dump", "(", "self", ".", "configs", ")", ")", "\n", "\n", "# Save the start of every run", "\n", "if", "\"start_weights\"", "not", "in", "self", ".", "configs", ":", "\n", "            ", "self", ".", "configs", "[", "\"start_weights\"", "]", "=", "[", "]", "\n", "", "self", ".", "configs", "[", "\"start_weights\"", "]", ".", "append", "(", "self", ".", "configs", "[", "\"load\"", "]", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "\"configs.yml\"", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "yaml", ".", "dump", "(", "self", ".", "configs", ",", "outfile", ")", "\n", "self", ".", "tb", ".", "add_text", "(", "\"hyperparams\"", ",", "str", "(", "self", ".", "configs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.end_itr": [[118, 126], ["open", "yaml.dump", "os.path.join"], "methods", ["None"], ["", "", "def", "end_itr", "(", "self", ",", "weights_path", ")", ":", "\n", "        ", "\"\"\"\n        Perform all operations needed at end of iteration\n        1). Save configs with latest weights\n        \"\"\"", "\n", "self", ".", "configs", "[", "\"latest_weights\"", "]", "=", "weights_path", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "\"configs.yml\"", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "yaml", ".", "dump", "(", "self", ".", "configs", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print": [[127, 132], ["logger.Logger.print_logger.info"], "methods", ["None"], ["", "", "def", "print", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Wrapper for print statement\n        \"\"\"", "\n", "self", ".", "print_logger", ".", "info", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.detach_var": [[10, 20], ["var.cpu().detach().numpy", "var.cpu().detach", "var.cpu"], "function", ["None"], ["def", "detach_var", "(", "var", ")", ":", "\n", "    ", "\"\"\"Detaches a var from torch\n\n    Args:\n        var (torch var): Torch variable that requires grad\n\n    Returns:\n        TYPE: numpy array\n    \"\"\"", "\n", "return", "var", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.set_seeds": [[22, 36], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "def", "set_seeds", "(", "seed", ",", "use_cuda", ")", ":", "\n", "    ", "\"\"\"Set Seeds\n\n    Args:\n        seed (int): Sets the seed for numpy, torch and random\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.quaternion_to_euler": [[38, 56], ["numpy.arctan2"], "function", ["None"], ["", "", "def", "quaternion_to_euler", "(", "x", ",", "y", ",", "z", ",", "w", ")", ":", "\n", "\n", "# t0 = +2.0 * (w * x + y * z)", "\n", "# t1 = +1.0 - 2.0 * (x * x + y * y)", "\n", "# X = np.arctan2(t0, t1)", "\n", "\n", "# t2 = +2.0 * (w * y - z * x)", "\n", "# t2 = +1.0 if t2 > +1.0 else t2", "\n", "# t2 = -1.0 if t2 < -1.0 else t2", "\n", "# Y = np.arcsin(t2)", "\n", "\n", "    ", "t3", "=", "+", "2.0", "*", "(", "w", "*", "z", "+", "x", "*", "y", ")", "\n", "t4", "=", "+", "1.0", "-", "2.0", "*", "(", "y", "*", "y", "+", "z", "*", "z", ")", "\n", "Z", "=", "np", ".", "arctan2", "(", "t3", ",", "t4", ")", "\n", "\n", "Z", "=", "-", "Z", "-", "np", ".", "pi", "/", "2", "\n", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.compute_accuracy": [[58, 69], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.where().sum().float", "torch.where().sum().float", "target.size", "torch.where().sum", "torch.where().sum", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "compute_accuracy", "(", "pred", ",", "target", ")", ":", "\n", "    ", "pred_1", "=", "torch", ".", "where", "(", "pred", ">", "0.5", ",", "torch", ".", "ones_like", "(", "pred", ")", ",", "torch", ".", "zeros_like", "(", "pred", ")", ")", "\n", "target_1", "=", "torch", ".", "where", "(", "target", ">", "0.5", ",", "torch", ".", "ones_like", "(", "pred", ")", ",", "torch", ".", "zeros_like", "(", "pred", ")", ")", "\n", "batch_size", "=", "target", ".", "size", "(", ")", "[", "0", "]", "*", "1.0", "\n", "\n", "num_correct", "=", "1.0", "*", "torch", ".", "where", "(", "\n", "pred_1", "==", "target_1", ",", "torch", ".", "ones_like", "(", "pred", ")", ",", "torch", ".", "zeros_like", "(", "pred", ")", "\n", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "accuracy", "=", "num_correct", "/", "batch_size", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.rescaleImage": [[71, 81], ["image_transform.transpose().transpose", "image_transform.transpose"], "function", ["None"], ["", "def", "rescaleImage", "(", "image", ",", "output_size", "=", "128", ",", "scale", "=", "1", "/", "255.0", ")", ":", "\n", "    ", "\"\"\"Rescale the image in a sample to a given size.\n    Args:\n        output_size (tuple or int): Desired output size. If tuple, output is\n            matched to output_size. If int, smaller of image edges is matched\n            to output_size keeping aspect ratio the same.\n    \"\"\"", "\n", "image_transform", "=", "image", "*", "scale", "\n", "# torch.from_numpy(img.transpose((0, 3, 1, 2))).float()", "\n", "return", "image_transform", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.log_normal": [[83, 88], ["torch.log", "torch.log"], "function", ["None"], ["", "def", "log_normal", "(", "x", ",", "m", ",", "v", ")", ":", "\n", "\n", "    ", "log_prob", "=", "-", "(", "(", "x", "-", "m", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "-", "0.5", "*", "torch", ".", "log", "(", "2", "*", "math", ".", "pi", "*", "v", ")", "\n", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.kl_normal": [[90, 96], ["element_wise.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "kl_normal", "(", "qm", ",", "qv", ",", "pm", ",", "pv", ")", ":", "\n", "    ", "element_wise", "=", "0.5", "*", "(", "\n", "torch", ".", "log", "(", "pv", ")", "-", "torch", ".", "log", "(", "qv", ")", "+", "qv", "/", "pv", "+", "(", "qm", "-", "pm", ")", ".", "pow", "(", "2", ")", "/", "pv", "-", "1", "\n", ")", "\n", "kl", "=", "element_wise", ".", "sum", "(", "-", "1", ")", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.augment_val": [[98, 147], ["copy.deepcopy", "tqdm.tqdm", "int", "int", "copy.deepcopy.remove", "val_filename_list1.append", "str", "str", "str", "str"], "function", ["None"], ["", "def", "augment_val", "(", "val_filename_list", ",", "filename_list", ")", ":", "\n", "\n", "    ", "filename_list1", "=", "copy", ".", "deepcopy", "(", "filename_list", ")", "\n", "val_filename_list1", "=", "[", "]", "\n", "\n", "for", "name", "in", "tqdm", "(", "val_filename_list", ")", ":", "\n", "        ", "filename", "=", "name", "[", ":", "-", "8", "]", "\n", "found", "=", "True", "\n", "\n", "if", "filename", "[", "-", "2", "]", "==", "\"_\"", ":", "\n", "            ", "file_number", "=", "int", "(", "filename", "[", "-", "1", "]", ")", "\n", "filename", "=", "filename", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "file_number", "=", "int", "(", "filename", "[", "-", "2", ":", "]", ")", "\n", "filename", "=", "filename", "[", ":", "-", "2", "]", "\n", "\n", "", "if", "file_number", "<", "10", ":", "\n", "            ", "comp_number", "=", "19", "\n", "filename1", "=", "filename", "+", "str", "(", "comp_number", ")", "+", "\"_1000.h5\"", "\n", "while", "(", "filename1", "not", "in", "filename_list1", ")", "and", "(", "\n", "filename1", "not", "in", "val_filename_list1", "\n", ")", ":", "\n", "                ", "comp_number", "+=", "-", "1", "\n", "filename1", "=", "filename", "+", "str", "(", "comp_number", ")", "+", "\"_1000.h5\"", "\n", "if", "comp_number", "<", "0", ":", "\n", "                    ", "found", "=", "False", "\n", "break", "\n", "", "", "", "else", ":", "\n", "            ", "comp_number", "=", "0", "\n", "filename1", "=", "filename", "+", "str", "(", "comp_number", ")", "+", "\"_1000.h5\"", "\n", "while", "(", "filename1", "not", "in", "filename_list1", ")", "and", "(", "\n", "filename1", "not", "in", "val_filename_list1", "\n", ")", ":", "\n", "                ", "comp_number", "+=", "1", "\n", "filename1", "=", "filename", "+", "str", "(", "comp_number", ")", "+", "\"_1000.h5\"", "\n", "if", "comp_number", ">", "19", ":", "\n", "                    ", "found", "=", "False", "\n", "break", "\n", "\n", "", "", "", "if", "found", ":", "\n", "            ", "if", "filename1", "in", "filename_list1", ":", "\n", "                ", "filename_list1", ".", "remove", "(", "filename1", ")", "\n", "\n", "", "if", "filename1", "not", "in", "val_filename_list", ":", "\n", "                ", "val_filename_list1", ".", "append", "(", "filename1", ")", "\n", "\n", "", "", "", "val_filename_list1", "+=", "val_filename_list", "\n", "\n", "return", "val_filename_list1", ",", "filename_list1", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.flow2rgb": [[149, 162], ["numpy.ones().astype", "np.ones().astype.clip", "numpy.ones", "numpy.abs().max", "numpy.abs"], "function", ["None"], ["", "def", "flow2rgb", "(", "flow_map", ",", "max_value", "=", "None", ")", ":", "\n", "    ", "global", "args", "\n", "_", ",", "h", ",", "w", "=", "flow_map", ".", "shape", "\n", "# flow_map[:,(flow_map[0] == 0) & (flow_map[1] == 0)] = float('nan')", "\n", "rgb_map", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "max_value", "is", "not", "None", ":", "\n", "        ", "normalized_flow_map", "=", "flow_map", "/", "max_value", "\n", "", "else", ":", "\n", "        ", "normalized_flow_map", "=", "flow_map", "/", "(", "np", ".", "abs", "(", "flow_map", ")", ".", "max", "(", ")", ")", "\n", "", "rgb_map", "[", ":", ",", ":", ",", "0", "]", "+=", "normalized_flow_map", "[", "0", "]", "\n", "rgb_map", "[", ":", ",", ":", ",", "1", "]", "-=", "0.5", "*", "(", "normalized_flow_map", "[", "0", "]", "+", "normalized_flow_map", "[", "1", "]", ")", "\n", "rgb_map", "[", ":", ",", ":", ",", "2", "]", "+=", "normalized_flow_map", "[", "1", "]", "\n", "return", "rgb_map", ".", "clip", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.scene_flow2rgb": [[164, 210], ["numpy.where", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "numpy.zeros_like", "numpy.zeros_like", "numpy.array", "[].max", "[].min", "numpy.array", "[].max", "[].min", "numpy.array", "[].max", "[].min", "[].min", "[].min", "[].min"], "function", ["None"], ["", "def", "scene_flow2rgb", "(", "flow_map", ")", ":", "\n", "    ", "global", "args", "\n", "\n", "flow_map", "=", "np", ".", "where", "(", "flow_map", ">", "1e-6", ",", "flow_map", ",", "np", ".", "zeros_like", "(", "flow_map", ")", ")", "\n", "\n", "indices1", "=", "np", ".", "nonzero", "(", "flow_map", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "indices2", "=", "np", ".", "nonzero", "(", "flow_map", "[", "1", ",", ":", ",", ":", "]", ")", "\n", "indices3", "=", "np", ".", "nonzero", "(", "flow_map", "[", "2", ",", ":", ",", ":", "]", ")", "\n", "\n", "normalized_flow_map", "=", "np", ".", "zeros_like", "(", "flow_map", ")", "\n", "\n", "divisor_1", "=", "0", "\n", "divisor_2", "=", "0", "\n", "divisor_3", "=", "0", "\n", "\n", "if", "np", ".", "array", "(", "indices1", ")", ".", "size", ">", "0", ":", "\n", "        ", "divisor_1", "=", "(", "\n", "flow_map", "[", "0", ",", ":", ",", ":", "]", "[", "indices1", "]", ".", "max", "(", ")", "-", "flow_map", "[", "0", ",", ":", ",", ":", "]", "[", "indices1", "]", ".", "min", "(", ")", "\n", ")", "\n", "\n", "", "if", "np", ".", "array", "(", "indices2", ")", ".", "size", ">", "0", ":", "\n", "        ", "divisor_2", "=", "(", "\n", "flow_map", "[", "1", ",", ":", ",", ":", "]", "[", "indices2", "]", ".", "max", "(", ")", "-", "flow_map", "[", "1", ",", ":", ",", ":", "]", "[", "indices2", "]", ".", "min", "(", ")", "\n", ")", "\n", "\n", "", "if", "np", ".", "array", "(", "indices3", ")", ".", "size", ">", "0", ":", "\n", "        ", "divisor_3", "=", "(", "\n", "flow_map", "[", "2", ",", ":", ",", ":", "]", "[", "indices3", "]", ".", "max", "(", ")", "-", "flow_map", "[", "2", ",", ":", ",", ":", "]", "[", "indices3", "]", ".", "min", "(", ")", "\n", ")", "\n", "\n", "", "if", "divisor_1", ">", "0", ":", "\n", "        ", "normalized_flow_map", "[", "0", ",", ":", ",", ":", "]", "[", "indices1", "]", "=", "(", "\n", "flow_map", "[", "0", ",", ":", ",", ":", "]", "[", "indices1", "]", "-", "flow_map", "[", "0", ",", ":", ",", ":", "]", "[", "indices1", "]", ".", "min", "(", ")", "\n", ")", "/", "divisor_1", "\n", "\n", "", "if", "divisor_2", ">", "0", ":", "\n", "        ", "normalized_flow_map", "[", "1", ",", ":", ",", ":", "]", "[", "indices2", "]", "=", "(", "\n", "flow_map", "[", "1", ",", ":", ",", ":", "]", "[", "indices2", "]", "-", "flow_map", "[", "1", ",", ":", ",", ":", "]", "[", "indices2", "]", ".", "min", "(", ")", "\n", ")", "/", "divisor_2", "\n", "\n", "", "if", "divisor_3", ">", "0", ":", "\n", "        ", "normalized_flow_map", "[", "2", ",", ":", ",", ":", "]", "[", "indices3", "]", "=", "(", "\n", "flow_map", "[", "2", ",", ":", ",", ":", "]", "[", "indices3", "]", "-", "flow_map", "[", "2", ",", ":", ",", ":", "]", "[", "indices3", "]", ".", "min", "(", ")", "\n", ")", "/", "divisor_3", "\n", "\n", "", "return", "normalized_flow_map", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.point_cloud2rgb": [[212, 221], ["numpy.where", "numpy.tile", "numpy.zeros_like", "numpy.expand_dims", "numpy.sqrt", "numpy.sum", "numpy.square"], "function", ["None"], ["", "def", "point_cloud2rgb", "(", "flow_map", ")", ":", "\n", "    ", "global", "args", "\n", "\n", "flow_map", "=", "np", ".", "where", "(", "flow_map", ">", "5e-4", ",", "flow_map", ",", "np", ".", "zeros_like", "(", "flow_map", ")", ")", "\n", "\n", "flow_map", "=", "np", ".", "tile", "(", "\n", "np", ".", "expand_dims", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "flow_map", ")", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", ",", "(", "3", ",", "1", ",", "1", ")", "\n", ")", "\n", "return", "flow_map", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.EPE": [[223, 237], ["torch.norm", "torch.norm", "torch.norm.size", "torch.norm.mean().to", "target_flow.cpu", "input_flow.cpu", "torch.norm.mean", "torch.norm.sum"], "function", ["None"], ["", "def", "EPE", "(", "input_flow", ",", "target_flow", ",", "device", ",", "sparse", "=", "False", ",", "mean", "=", "True", ")", ":", "\n", "# torch.cuda.init()", "\n", "\n", "    ", "EPE_map", "=", "torch", ".", "norm", "(", "target_flow", ".", "cpu", "(", ")", "-", "input_flow", ".", "cpu", "(", ")", ",", "2", ",", "1", ")", "\n", "batch_size", "=", "EPE_map", ".", "size", "(", "0", ")", "\n", "if", "sparse", ":", "\n", "# invalid flow is defined with both flow coordinates to be exactly 0", "\n", "        ", "mask", "=", "(", "target_flow", "[", ":", ",", "0", "]", "==", "0", ")", "&", "(", "target_flow", "[", ":", ",", "1", "]", "==", "0", ")", "\n", "\n", "EPE_map", "=", "EPE_map", "[", "~", "mask", ".", "data", "]", "\n", "", "if", "mean", ":", "\n", "        ", "return", "EPE_map", ".", "mean", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "EPE_map", ".", "sum", "(", ")", "/", "batch_size", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.realEPE": [[239, 244], ["target.size", "torch.functional.upsample", "utils.EPE"], "function", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.EPE"], ["", "", "def", "realEPE", "(", "output", ",", "target", ",", "device", ",", "sparse", "=", "False", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "\n", "upsampled_output", "=", "nn", ".", "functional", ".", "upsample", "(", "output", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "return", "EPE", "(", "upsampled_output", ",", "target", ",", "device", ",", "sparse", ",", "mean", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.realAAE": [[246, 250], ["target.size", "torch.functional.upsample", "utils.AAE"], "function", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.AAE"], ["", "def", "realAAE", "(", "output", ",", "target", ",", "device", ",", "sparse", "=", "False", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "upsampled_output", "=", "nn", ".", "functional", ".", "upsample", "(", "output", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "return", "AAE", "(", "upsampled_output", ",", "target", ",", "device", ",", "sparse", ",", "mean", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.AAE": [[252, 267], ["target_flow.size", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target.div.permute().contiguous().view", "inp.div.permute().contiguous().view", "target.div.div", "inp.div.div", "torch.bmm", "torch.bmm", "torch.acos", "torch.acos", "torch.acos.mean().to", "torch.norm().expand_as", "torch.norm().expand_as", "torch.norm().expand_as", "torch.norm().expand_as", "target.div.view", "inp.div.view", "torch.clamp", "torch.clamp", "target_flow.cpu", "input_flow.cpu", "target.div.permute().contiguous", "inp.div.permute().contiguous", "torch.acos.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "target.div.permute", "inp.div.permute"], "function", ["None"], ["", "def", "AAE", "(", "input_flow", ",", "target_flow", ",", "device", ",", "sparse", "=", "False", ",", "mean", "=", "True", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "target_flow", ".", "size", "(", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "[", "b", ",", "1", ",", "h", ",", "w", "]", ")", "\n", "target", "=", "torch", ".", "cat", "(", "(", "target_flow", ".", "cpu", "(", ")", ",", "ones", ")", ",", "1", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "(", "input_flow", ".", "cpu", "(", ")", ",", "ones", ")", ",", "1", ")", "\n", "target", "=", "target", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", "*", "w", ",", "-", "1", ")", "\n", "inp", "=", "inp", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", "*", "w", ",", "-", "1", ")", "\n", "\n", "target", "=", "target", ".", "div", "(", "torch", ".", "norm", "(", "target", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "target", ")", ")", "\n", "inp", "=", "inp", ".", "div", "(", "torch", ".", "norm", "(", "inp", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "inp", ")", ")", "\n", "\n", "dot_prod", "=", "torch", ".", "bmm", "(", "(", "target", ".", "view", "(", "b", "*", "h", "*", "w", ",", "1", ",", "-", "1", ")", ")", ",", "inp", ".", "view", "(", "b", "*", "h", "*", "w", ",", "-", "1", ",", "1", ")", ")", "\n", "AAE_map", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "dot_prod", ",", "-", "1", ",", "1", ")", ")", "\n", "\n", "return", "AAE_map", ".", "mean", "(", ")", ".", "to", "(", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.__init__": [[30, 106], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "utils.set_seeds", "models.sensor_fusion.SensorFusionSelfSupervised().to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "selfsupervised.selfsupervised.selfsupervised._init_dataloaders", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logger.print", "selfsupervised.selfsupervised.selfsupervised.model.parameters", "selfsupervised.selfsupervised.selfsupervised.load_model", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "models.sensor_fusion.SensorFusionSelfSupervised"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.set_seeds", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised._init_dataloaders", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.load_model"], ["    ", "def", "__init__", "(", "self", ",", "configs", ",", "logger", ")", ":", "\n", "\n", "# ------------------------", "\n", "# Sets seed and cuda", "\n", "# ------------------------", "\n", "        ", "use_cuda", "=", "configs", "[", "\"cuda\"", "]", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "logger", ".", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "\n", "", "set_seeds", "(", "configs", "[", "\"seed\"", "]", ",", "use_cuda", ")", "\n", "\n", "# model", "\n", "self", ".", "model", "=", "SensorFusionSelfSupervised", "(", "\n", "device", "=", "self", ".", "device", ",", "\n", "encoder", "=", "configs", "[", "\"encoder\"", "]", ",", "\n", "deterministic", "=", "configs", "[", "\"deterministic\"", "]", ",", "\n", "z_dim", "=", "configs", "[", "\"zdim\"", "]", ",", "\n", "action_dim", "=", "configs", "[", "\"action_dim\"", "]", ",", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "configs", "[", "\"lr\"", "]", ",", "\n", "betas", "=", "(", "self", ".", "configs", "[", "\"beta1\"", "]", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", ")", "\n", "\n", "self", ".", "deterministic", "=", "configs", "[", "\"deterministic\"", "]", "\n", "self", ".", "encoder", "=", "configs", "[", "\"encoder\"", "]", "\n", "\n", "# losses", "\n", "self", ".", "loss_ee_pos", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "loss_contact_next", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "loss_optical_flow_mask", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "loss_reward_prediction", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "loss_is_paired", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "loss_dynamics", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# validation set variables", "\n", "self", ".", "val_contact_accuracy", "=", "0.0", "\n", "self", ".", "val_paired_accuracy", "=", "0.0", "\n", "\n", "# test set variables", "\n", "self", ".", "test_flow_loss", "=", "0.0", "\n", "self", ".", "test_paired_accuracy", "=", "0.0", "\n", "self", ".", "test_contact_accuracy", "=", "0.0", "\n", "\n", "# Weights for loss", "\n", "self", ".", "alpha_optical_flow", "=", "10.0", "*", "configs", "[", "\"opticalflow\"", "]", "\n", "self", ".", "alpha_optical_flow_mask", "=", "1.0", "\n", "self", ".", "alpha_kl", "=", "0.05", "\n", "self", ".", "alpha_contact", "=", "1.0", "*", "configs", "[", "\"contact\"", "]", "\n", "self", ".", "alpha_pair", "=", "0.5", "*", "configs", "[", "\"pairing\"", "]", "\n", "self", ".", "alpha_ee_fut", "=", "1.0", "*", "configs", "[", "\"eedelta\"", "]", "\n", "\n", "# Weights for input", "\n", "self", ".", "alpha_vision", "=", "configs", "[", "\"vision\"", "]", "\n", "self", ".", "alpha_depth", "=", "configs", "[", "\"depth\"", "]", "\n", "self", ".", "alpha_proprio", "=", "configs", "[", "\"proprio\"", "]", "\n", "self", ".", "alpha_force", "=", "configs", "[", "\"force\"", "]", "\n", "\n", "# Global Counts For Logging", "\n", "self", ".", "global_cnt", "=", "{", "\"train\"", ":", "0", ",", "\"val\"", ":", "0", "}", "\n", "\n", "# ------------------------", "\n", "# Handles Initialization", "\n", "# ------------------------", "\n", "if", "configs", "[", "\"load\"", "]", ":", "\n", "            ", "self", ".", "load_model", "(", "configs", "[", "\"load\"", "]", ")", "\n", "\n", "", "self", ".", "_init_dataloaders", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.train": [[107, 150], ["tqdm.tqdm.tqdm", "range", "selfsupervised.selfsupervised.selfsupervised.logger.print", "selfsupervised.selfsupervised.selfsupervised.model.train", "tqdm.tqdm.tqdm", "os.path.join", "selfsupervised.selfsupervised.selfsupervised.logger.print", "selfsupervised.selfsupervised.selfsupervised.logger.print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "selfsupervised.selfsupervised.selfsupervised.logger.end_itr", "enumerate", "time.time", "selfsupervised.selfsupervised.selfsupervised.optimizer.zero_grad", "selfsupervised.selfsupervised.selfsupervised.loss_calc", "loss.backward", "selfsupervised.selfsupervised.selfsupervised.optimizer.step", "selfsupervised.selfsupervised.selfsupervised.record_results", "selfsupervised.selfsupervised.selfsupervised.validate", "selfsupervised.selfsupervised.selfsupervised.model.state_dict", "selfsupervised.selfsupervised.selfsupervised.logger.print", "selfsupervised.selfsupervised.selfsupervised._record_image"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.train", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.end_itr", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.loss_calc", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.record_results", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.validate", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised._record_image"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i_epoch", "in", "tqdm", "(", "range", "(", "self", ".", "configs", "[", "\"max_epoch\"", "]", ")", ")", ":", "\n", "# ---------------------------", "\n", "# Train Step", "\n", "# ---------------------------", "\n", "            ", "self", ".", "logger", ".", "print", "(", "\"Training epoch #{}...\"", ".", "format", "(", "i_epoch", ")", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "i_iter", ",", "sample_batched", "in", "tqdm", "(", "enumerate", "(", "self", ".", "dataloaders", "[", "\"val\"", "]", ")", ")", ":", "\n", "\n", "                ", "t_st", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ",", "mm_feat", ",", "results", ",", "image_packet", "=", "self", ".", "loss_calc", "(", "sample_batched", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "record_results", "(", "loss", ",", "results", ",", "self", ".", "global_cnt", "[", "\"train\"", "]", ",", "t_st", ")", "\n", "\n", "if", "self", ".", "global_cnt", "[", "\"train\"", "]", "%", "self", ".", "configs", "[", "\"img_record_n\"", "]", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "print", "(", "\n", "\"processed {} mini-batches...\"", ".", "format", "(", "self", ".", "global_cnt", "[", "\"train\"", "]", ")", "\n", ")", "\n", "self", ".", "_record_image", "(", "image_packet", ",", "self", ".", "global_cnt", "[", "\"train\"", "]", ")", "\n", "\n", "", "self", ".", "global_cnt", "[", "\"train\"", "]", "+=", "1", "\n", "\n", "", "if", "self", ".", "configs", "[", "\"val_ratio\"", "]", "!=", "0", ":", "\n", "                ", "self", ".", "validate", "(", "i_epoch", ")", "\n", "\n", "# ---------------------------", "\n", "# Save weights", "\n", "# ---------------------------", "\n", "", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "logger", ".", "log_folder", ",", "\"models\"", ",", "\"weights_itr_{}.ckpt\"", ".", "format", "(", "i_epoch", ")", "\n", ")", "\n", "self", ".", "logger", ".", "print", "(", "\"checkpoint path: \"", ",", "ckpt_path", ")", "\n", "self", ".", "logger", ".", "print", "(", "\"Saving checkpoint after epoch #{}\"", ".", "format", "(", "i_epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "ckpt_path", ")", "\n", "self", ".", "logger", ".", "end_itr", "(", "ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.validate": [[151, 194], ["selfsupervised.selfsupervised.selfsupervised.logger.print", "enumerate", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.model.eval", "selfsupervised.selfsupervised.selfsupervised.loss_calc", "contact_accuracy.item", "is_paired_accuracy.item", "selfsupervised.selfsupervised.selfsupervised._record_image", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "flow_loss.item", "contact_loss.item", "is_paired_loss.item", "kl.item", "loss_val.item"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.loss_calc", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised._record_image"], ["", "", "def", "validate", "(", "self", ",", "i_epoch", ")", ":", "\n", "        ", "self", ".", "logger", ".", "print", "(", "\n", "\"calculating validation results after #{} epochs\"", ".", "format", "(", "i_epoch", ")", "\n", ")", "\n", "\n", "self", ".", "val_contact_accuracy", "=", "0.0", "\n", "self", ".", "val_paired_accuracy", "=", "0.0", "\n", "\n", "for", "i_iter", ",", "sample_batched", "in", "enumerate", "(", "self", ".", "dataloaders", "[", "\"val\"", "]", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "loss_val", ",", "mm_feat_val", ",", "results_val", ",", "image_packet_val", "=", "self", ".", "loss_calc", "(", "\n", "sample_batched", "\n", ")", "\n", "\n", "flow_loss", ",", "contact_loss", ",", "is_paired_loss", ",", "contact_accuracy", ",", "is_paired_accuracy", ",", "ee_delta_loss", ",", "kl", "=", "(", "\n", "results_val", "\n", ")", "\n", "\n", "self", ".", "val_contact_accuracy", "+=", "contact_accuracy", ".", "item", "(", ")", "/", "self", ".", "val_len_data", "\n", "self", ".", "val_paired_accuracy", "+=", "is_paired_accuracy", ".", "item", "(", ")", "/", "self", ".", "val_len_data", "\n", "\n", "if", "i_iter", "==", "0", ":", "\n", "                ", "self", ".", "_record_image", "(", "\n", "image_packet_val", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ",", "string", "=", "\"val/\"", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"val/loss/optical_flow\"", ",", "flow_loss", ".", "item", "(", ")", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"val/loss/contact\"", ",", "contact_loss", ".", "item", "(", ")", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"val/loss/is_paired\"", ",", "is_paired_loss", ".", "item", "(", ")", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"val/loss/kl\"", ",", "kl", ".", "item", "(", ")", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"val/loss/total_loss\"", ",", "loss_val", ".", "item", "(", ")", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"val/loss/ee_delta\"", ",", "ee_delta_loss", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", ")", "\n", "self", ".", "global_cnt", "[", "\"val\"", "]", "+=", "1", "\n", "\n", "# ---------------------------", "\n", "# Record Epoch Level Variables", "\n", "# ---------------------------", "\n", "", "", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\n", "\"val/accuracy/contact\"", ",", "self", ".", "val_contact_accuracy", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", "\n", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\n", "\"val/accuracy/is_paired\"", ",", "self", ".", "val_paired_accuracy", ",", "self", ".", "global_cnt", "[", "\"val\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.load_model": [[196, 201], ["selfsupervised.selfsupervised.selfsupervised.logger.print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "selfsupervised.selfsupervised.selfsupervised.model.load_state_dict", "selfsupervised.selfsupervised.selfsupervised.model.eval"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "logger", ".", "print", "(", "\"Loading model from {}...\"", ".", "format", "(", "path", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.loss_calc": [[202, 325], ["sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to.size", "torch.functional.upsample", "torch.functional.upsample", "torch.functional.upsample", "selfsupervised.selfsupervised.selfsupervised.model", "utils.compute_accuracy", "utils.compute_accuracy", "utils.compute_accuracy", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to().transpose().transpose", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to", "sampled_batched[].to().transpose().transpose", "selfsupervised.selfsupervised.selfsupervised.model", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "torch.tensor().to().type", "selfsupervised.selfsupervised.selfsupervised.model", "utils.realEPE", "selfsupervised.selfsupervised.selfsupervised.loss_optical_flow_mask", "selfsupervised.selfsupervised.selfsupervised.loss_contact_next", "selfsupervised.selfsupervised.selfsupervised.loss_ee_pos", "selfsupervised.selfsupervised.selfsupervised.loss_is_paired", "selfsupervised.selfsupervised.selfsupervised.loss_is_paired", "sampled_batched[].to.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "sampled_batched[].to().transpose", "sampled_batched[].to().transpose", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "utils.kl_normal", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "paired_pred.size", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "unpaired_pred.size", "mu_prior.squeeze", "var_prior.squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sampled_batched[].to", "sampled_batched[].to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "paired_out.size", "unpaired_out.size"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.compute_accuracy", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.compute_accuracy", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.compute_accuracy", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.realEPE", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.kl_normal"], ["", "def", "loss_calc", "(", "self", ",", "sampled_batched", ")", ":", "\n", "\n", "# input data", "\n", "        ", "image", "=", "self", ".", "alpha_vision", "*", "sampled_batched", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "force", "=", "self", ".", "alpha_force", "*", "sampled_batched", "[", "\"force\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "proprio", "=", "self", ".", "alpha_proprio", "*", "sampled_batched", "[", "\"proprio\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "depth", "=", "self", ".", "alpha_depth", "*", "sampled_batched", "[", "\"depth\"", "]", ".", "to", "(", "self", ".", "device", ")", ".", "transpose", "(", "\n", "1", ",", "3", "\n", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "action", "=", "sampled_batched", "[", "\"action\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "contact_label", "=", "sampled_batched", "[", "\"contact_next\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "optical_flow_label", "=", "sampled_batched", "[", "\"flow\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "optical_flow_mask_label", "=", "sampled_batched", "[", "\"flow_mask\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# unpaired data for sampled point", "\n", "unpaired_image", "=", "self", ".", "alpha_vision", "*", "sampled_batched", "[", "\"unpaired_image\"", "]", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "unpaired_force", "=", "self", ".", "alpha_force", "*", "sampled_batched", "[", "\"unpaired_force\"", "]", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "unpaired_proprio", "=", "self", ".", "alpha_proprio", "*", "sampled_batched", "[", "\"unpaired_proprio\"", "]", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "unpaired_depth", "=", "self", ".", "alpha_depth", "*", "sampled_batched", "[", "\"unpaired_depth\"", "]", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "# labels to predict", "\n", "gt_ee_pos_delta", "=", "sampled_batched", "[", "\"ee_yaw_next\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "deterministic", ":", "\n", "            ", "paired_out", ",", "contact_out", ",", "flow2", ",", "optical_flow2_mask", ",", "ee_delta_out", ",", "mm_feat", "=", "self", ".", "model", "(", "\n", "image", ",", "force", ",", "proprio", ",", "depth", ",", "action", "\n", ")", "\n", "kl", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "", "else", ":", "\n", "            ", "paired_out", ",", "contact_out", ",", "flow2", ",", "optical_flow2_mask", ",", "ee_delta_out", ",", "mm_feat", ",", "mu_z", ",", "var_z", ",", "mu_prior", ",", "var_prior", "=", "self", ".", "model", "(", "\n", "image", ",", "force", ",", "proprio", ",", "depth", ",", "action", "\n", ")", "\n", "kl", "=", "self", ".", "alpha_kl", "*", "torch", ".", "mean", "(", "\n", "kl_normal", "(", "mu_z", ",", "var_z", ",", "mu_prior", ".", "squeeze", "(", "0", ")", ",", "var_prior", ".", "squeeze", "(", "0", ")", ")", "\n", ")", "\n", "\n", "", "flow_loss", "=", "self", ".", "alpha_optical_flow", "*", "realEPE", "(", "\n", "flow2", ",", "optical_flow_label", ",", "self", ".", "device", "\n", ")", "\n", "\n", "# Scene flow losses", "\n", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "optical_flow_label", ".", "size", "(", ")", "\n", "\n", "optical_flow_mask", "=", "nn", ".", "functional", ".", "upsample", "(", "\n", "optical_flow2_mask", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", "\n", ")", "\n", "\n", "flow_mask_loss", "=", "self", ".", "alpha_optical_flow_mask", "*", "self", ".", "loss_optical_flow_mask", "(", "\n", "optical_flow_mask", ",", "optical_flow_mask_label", "\n", ")", "\n", "\n", "contact_loss", "=", "self", ".", "alpha_contact", "*", "self", ".", "loss_contact_next", "(", "\n", "contact_out", ",", "contact_label", "\n", ")", "\n", "\n", "ee_delta_loss", "=", "self", ".", "alpha_ee_fut", "*", "self", ".", "loss_ee_pos", "(", "\n", "ee_delta_out", ",", "gt_ee_pos_delta", "\n", ")", "\n", "\n", "paired_loss", "=", "self", ".", "alpha_pair", "*", "self", ".", "loss_is_paired", "(", "\n", "paired_out", ",", "torch", ".", "ones", "(", "paired_out", ".", "size", "(", "0", ")", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "\n", "unpaired_total_losses", "=", "self", ".", "model", "(", "\n", "unpaired_image", ",", "unpaired_force", ",", "unpaired_proprio", ",", "unpaired_depth", ",", "action", "\n", ")", "\n", "unpaired_out", "=", "unpaired_total_losses", "[", "0", "]", "\n", "unpaired_loss", "=", "self", ".", "alpha_pair", "*", "self", ".", "loss_is_paired", "(", "\n", "unpaired_out", ",", "torch", ".", "zeros", "(", "unpaired_out", ".", "size", "(", "0", ")", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "\n", "loss", "=", "(", "\n", "contact_loss", "\n", "+", "paired_loss", "\n", "+", "unpaired_loss", "\n", "+", "ee_delta_loss", "\n", "+", "kl", "\n", "+", "flow_loss", "\n", "+", "flow_mask_loss", "\n", ")", "\n", "\n", "contact_pred", "=", "nn", ".", "Sigmoid", "(", ")", "(", "contact_out", ")", ".", "detach", "(", ")", "\n", "contact_accuracy", "=", "compute_accuracy", "(", "contact_pred", ",", "contact_label", ".", "detach", "(", ")", ")", "\n", "\n", "paired_pred", "=", "nn", ".", "Sigmoid", "(", ")", "(", "paired_out", ")", ".", "detach", "(", ")", "\n", "paired_accuracy", "=", "compute_accuracy", "(", "\n", "paired_pred", ",", "torch", ".", "ones", "(", "paired_pred", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "device", "=", "self", ".", "device", ")", "\n", ")", "\n", "\n", "unpaired_pred", "=", "nn", ".", "Sigmoid", "(", ")", "(", "unpaired_out", ")", ".", "detach", "(", ")", "\n", "unpaired_accuracy", "=", "compute_accuracy", "(", "\n", "unpaired_pred", ",", "torch", ".", "zeros", "(", "unpaired_pred", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "device", "=", "self", ".", "device", ")", "\n", ")", "\n", "\n", "is_paired_accuracy", "=", "(", "paired_accuracy", "+", "unpaired_accuracy", ")", "/", "2.0", "\n", "\n", "# logging", "\n", "is_paired_loss", "=", "paired_loss", "+", "unpaired_loss", "\n", "\n", "return", "(", "\n", "loss", ",", "\n", "mm_feat", ",", "\n", "(", "\n", "flow_loss", ",", "\n", "contact_loss", ",", "\n", "is_paired_loss", ",", "\n", "contact_accuracy", ",", "\n", "is_paired_accuracy", ",", "\n", "ee_delta_loss", ",", "\n", "kl", ",", "\n", ")", ",", "\n", "(", "flow2", ",", "optical_flow_label", ",", "image", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised.record_results": [[327, 348], ["selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_scalar", "flow_loss.item", "contact_loss.item", "is_paired_loss.item", "kl.item", "total_loss.item", "contact_accuracy.item", "is_paired_accuracy.item", "time.time"], "methods", ["None"], ["", "def", "record_results", "(", "self", ",", "total_loss", ",", "results", ",", "global_cnt", ",", "t_st", ")", ":", "\n", "\n", "        ", "flow_loss", ",", "contact_loss", ",", "is_paired_loss", ",", "contact_accuracy", ",", "is_paired_accuracy", ",", "ee_delta_loss", ",", "kl", "=", "(", "\n", "results", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"loss/optical_flow\"", ",", "flow_loss", ".", "item", "(", ")", ",", "global_cnt", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"loss/contact\"", ",", "contact_loss", ".", "item", "(", ")", ",", "global_cnt", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"loss/is_paired\"", ",", "is_paired_loss", ".", "item", "(", ")", ",", "global_cnt", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"loss/kl\"", ",", "kl", ".", "item", "(", ")", ",", "global_cnt", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"loss/total_loss\"", ",", "total_loss", ".", "item", "(", ")", ",", "global_cnt", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"loss/ee_delta\"", ",", "ee_delta_loss", ",", "global_cnt", ")", "\n", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\n", "\"accuracy/contact\"", ",", "contact_accuracy", ".", "item", "(", ")", ",", "global_cnt", "\n", ")", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\n", "\"accuracy/is_paired\"", ",", "is_paired_accuracy", ".", "item", "(", ")", ",", "global_cnt", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "tb", ".", "add_scalar", "(", "\"stats/iter_time\"", ",", "time", ".", "time", "(", ")", "-", "t_st", ",", "global_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised._init_dataloaders": [[349, 448], ["os.listdir", "selfsupervised.selfsupervised.selfsupervised.logger.print", "numpy.random.randint", "selfsupervised.selfsupervised.selfsupervised.logger.print", "utils.augment_val", "selfsupervised.selfsupervised.selfsupervised.logger.print", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "selfsupervised.selfsupervised.selfsupervised.logger.print", "dataloaders.MultimodalManipulationDataset", "dataloaders.MultimodalManipulationDataset", "selfsupervised.selfsupervised.selfsupervised.logger.print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "selfsupervised.selfsupervised.selfsupervised.logger.print", "file.endswith", "len", "int", "val_filename_list.append", "filename_list.pop", "numpy.where", "range", "range", "filename_list.append", "len", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "len", "len", "dataloaders.ProcessForce", "dataloaders.ProcessForce", "dataloaders.ToTensor", "dataloaders.ProcessForce", "dataloaders.ProcessForce", "dataloaders.ToTensor"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.augment_val", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.logger.Logger.print"], ["", "def", "_init_dataloaders", "(", "self", ")", ":", "\n", "\n", "        ", "filename_list", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "self", ".", "configs", "[", "\"dataset\"", "]", ")", ":", "\n", "            ", "if", "file", ".", "endswith", "(", "\".h5\"", ")", ":", "\n", "                ", "filename_list", ".", "append", "(", "self", ".", "configs", "[", "\"dataset\"", "]", "+", "file", ")", "\n", "\n", "", "", "self", ".", "logger", ".", "print", "(", "\n", "\"Number of files in multifile dataset = {}\"", ".", "format", "(", "len", "(", "filename_list", ")", ")", "\n", ")", "\n", "\n", "val_filename_list", "=", "[", "]", "\n", "\n", "val_index", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "len", "(", "filename_list", ")", ",", "int", "(", "len", "(", "filename_list", ")", "*", "self", ".", "configs", "[", "\"val_ratio\"", "]", ")", "\n", ")", "\n", "\n", "for", "index", "in", "val_index", ":", "\n", "            ", "val_filename_list", ".", "append", "(", "filename_list", "[", "index", "]", ")", "\n", "\n", "", "while", "val_index", ".", "size", ">", "0", ":", "\n", "            ", "filename_list", ".", "pop", "(", "val_index", "[", "0", "]", ")", "\n", "val_index", "=", "np", ".", "where", "(", "val_index", ">", "val_index", "[", "0", "]", ",", "val_index", "-", "1", ",", "val_index", ")", "\n", "val_index", "=", "val_index", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "logger", ".", "print", "(", "\"Initial finished\"", ")", "\n", "\n", "val_filename_list1", ",", "filename_list1", "=", "augment_val", "(", "\n", "val_filename_list", ",", "filename_list", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "print", "(", "\"Listing finished\"", ")", "\n", "\n", "self", ".", "dataloaders", "=", "{", "}", "\n", "self", ".", "samplers", "=", "{", "}", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "\n", "self", ".", "samplers", "[", "\"val\"", "]", "=", "SubsetRandomSampler", "(", "\n", "range", "(", "len", "(", "val_filename_list1", ")", "*", "(", "self", ".", "configs", "[", "\"ep_length\"", "]", "-", "1", ")", ")", "\n", ")", "\n", "self", ".", "samplers", "[", "\"train\"", "]", "=", "SubsetRandomSampler", "(", "\n", "range", "(", "len", "(", "filename_list1", ")", "*", "(", "self", ".", "configs", "[", "\"ep_length\"", "]", "-", "1", ")", ")", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "print", "(", "\"Sampler finished\"", ")", "\n", "\n", "self", ".", "datasets", "[", "\"train\"", "]", "=", "MultimodalManipulationDataset", "(", "\n", "filename_list1", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "ProcessForce", "(", "32", ",", "\"force\"", ",", "tanh", "=", "True", ")", ",", "\n", "ProcessForce", "(", "32", ",", "\"unpaired_force\"", ",", "tanh", "=", "True", ")", ",", "\n", "ToTensor", "(", "device", "=", "self", ".", "device", ")", ",", "\n", "]", "\n", ")", ",", "\n", "episode_length", "=", "self", ".", "configs", "[", "\"ep_length\"", "]", ",", "\n", "training_type", "=", "self", ".", "configs", "[", "\"training_type\"", "]", ",", "\n", "action_dim", "=", "self", ".", "configs", "[", "\"action_dim\"", "]", ",", "\n", "\n", ")", "\n", "\n", "self", ".", "datasets", "[", "\"val\"", "]", "=", "MultimodalManipulationDataset", "(", "\n", "val_filename_list1", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "ProcessForce", "(", "32", ",", "\"force\"", ",", "tanh", "=", "True", ")", ",", "\n", "ProcessForce", "(", "32", ",", "\"unpaired_force\"", ",", "tanh", "=", "True", ")", ",", "\n", "ToTensor", "(", "device", "=", "self", ".", "device", ")", ",", "\n", "]", "\n", ")", ",", "\n", "episode_length", "=", "self", ".", "configs", "[", "\"ep_length\"", "]", ",", "\n", "training_type", "=", "self", ".", "configs", "[", "\"training_type\"", "]", ",", "\n", "action_dim", "=", "self", ".", "configs", "[", "\"action_dim\"", "]", ",", "\n", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "print", "(", "\"Dataset finished\"", ")", "\n", "\n", "self", ".", "dataloaders", "[", "\"val\"", "]", "=", "DataLoader", "(", "\n", "self", ".", "datasets", "[", "\"val\"", "]", ",", "\n", "batch_size", "=", "self", ".", "configs", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "self", ".", "configs", "[", "\"num_workers\"", "]", ",", "\n", "sampler", "=", "self", ".", "samplers", "[", "\"val\"", "]", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "self", ".", "dataloaders", "[", "\"train\"", "]", "=", "DataLoader", "(", "\n", "self", ".", "datasets", "[", "\"train\"", "]", ",", "\n", "batch_size", "=", "self", ".", "configs", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "self", ".", "configs", "[", "\"num_workers\"", "]", ",", "\n", "sampler", "=", "self", ".", "samplers", "[", "\"train\"", "]", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "len_data", "=", "len", "(", "self", ".", "dataloaders", "[", "\"train\"", "]", ")", "\n", "self", ".", "val_len_data", "=", "len", "(", "self", ".", "dataloaders", "[", "\"val\"", "]", ")", "\n", "\n", "self", ".", "logger", ".", "print", "(", "\"Finished setting up date\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.trainers.selfsupervised.selfsupervised._record_image": [[449, 475], ["flow_label.size", "torch.functional.upsample", "torch.functional.upsample", "torch.functional.upsample", "upsampled_flow.cpu().detach().numpy.cpu().detach().numpy.cpu().detach().numpy", "image[].cpu().numpy", "utils.flow2rgb", "utils.flow2rgb", "numpy.concatenate", "concat_image.transpose.transpose.astype", "concat_image.transpose.transpose.transpose", "selfsupervised.selfsupervised.selfsupervised.logger.tb.add_image", "flow_label[].cpu().detach().numpy", "upsampled_flow.cpu().detach().numpy.cpu().detach().numpy.cpu().detach", "image[].cpu", "flow_label[].cpu().detach", "upsampled_flow.cpu().detach().numpy.cpu().detach().numpy.cpu", "flow_label[].cpu"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.flow2rgb", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.multimodal.utils.flow2rgb"], ["", "def", "_record_image", "(", "self", ",", "image_packet", ",", "global_cnt", ",", "string", "=", "None", ")", ":", "\n", "\n", "        ", "if", "string", "is", "None", ":", "\n", "            ", "string", "=", "\"\"", "\n", "\n", "", "flow2", ",", "flow_label", ",", "image", "=", "image_packet", "\n", "image_index", "=", "0", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "flow_label", ".", "size", "(", ")", "\n", "\n", "upsampled_flow", "=", "nn", ".", "functional", ".", "upsample", "(", "flow2", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "upsampled_flow", "=", "upsampled_flow", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "orig_image", "=", "image", "[", "image_index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "orig_flow", "=", "flow2rgb", "(", "\n", "flow_label", "[", "image_index", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "max_value", "=", "None", "\n", ")", "\n", "pred_flow", "=", "flow2rgb", "(", "upsampled_flow", "[", "image_index", "]", ",", "max_value", "=", "None", ")", "\n", "\n", "concat_image", "=", "np", ".", "concatenate", "(", "[", "orig_image", ",", "orig_flow", ",", "pred_flow", "]", ",", "1", ")", "\n", "\n", "concat_image", "=", "concat_image", "*", "255", "\n", "concat_image", "=", "concat_image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "concat_image", "=", "concat_image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "self", ".", "logger", ".", "tb", ".", "add_image", "(", "string", "+", "\"predicted_flow\"", ",", "concat_image", ",", "global_cnt", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights": [[7, 19], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["def", "init_weights", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Weight initialization from original SensorFusion Code\n    \"\"\"", "\n", "for", "m", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.sample_gaussian": [[21, 27], ["torch.distributions.Normal().sample", "m.size", "torch.distributions.Normal", "torch.sqrt", "torch.sqrt", "Normal().sample.to"], "function", ["None"], ["", "", "", "def", "sample_gaussian", "(", "m", ",", "v", ",", "device", ")", ":", "\n", "\n", "    ", "epsilon", "=", "Normal", "(", "0", ",", "1", ")", ".", "sample", "(", "m", ".", "size", "(", ")", ")", "\n", "z", "=", "m", "+", "torch", ".", "sqrt", "(", "v", ")", "*", "epsilon", ".", "to", "(", "device", ")", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.gaussian_parameters": [[29, 34], ["torch.split", "torch.split", "torch.nn.functional.softplus", "h.size"], "function", ["None"], ["", "def", "gaussian_parameters", "(", "h", ",", "dim", "=", "-", "1", ")", ":", "\n", "\n", "    ", "m", ",", "h", "=", "torch", ".", "split", "(", "h", ",", "h", ".", "size", "(", "dim", ")", "//", "2", ",", "dim", "=", "dim", ")", "\n", "v", "=", "F", ".", "softplus", "(", "h", ")", "+", "1e-8", "\n", "return", "m", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.product_of_experts": [[36, 44], ["T_vect.sum", "T_vect.sum"], "function", ["None"], ["", "def", "product_of_experts", "(", "m_vect", ",", "v_vect", ")", ":", "\n", "\n", "    ", "T_vect", "=", "1.0", "/", "v_vect", "\n", "\n", "mu", "=", "(", "m_vect", "*", "T_vect", ")", ".", "sum", "(", "2", ")", "*", "(", "1", "/", "T_vect", ".", "sum", "(", "2", ")", ")", "\n", "var", "=", "1", "/", "T_vect", ".", "sum", "(", "2", ")", "\n", "\n", "return", "mu", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.duplicate": [[46, 49], ["x.expand().reshape", "x.expand"], "function", ["None"], ["", "def", "duplicate", "(", "x", ",", "rep", ")", ":", "\n", "\n", "    ", "return", "x", ".", "expand", "(", "rep", ",", "*", "x", ".", "shape", ")", ".", "reshape", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.depth_deconv": [[51, 63], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "depth_deconv", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "3", "-", "1", ")", "//", "2", ",", "bias", "=", "True", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "3", "-", "1", ")", "//", "2", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "16", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.rescaleImage": [[66, 75], ["image_transform.transpose().transpose", "image_transform.transpose"], "function", ["None"], ["", "def", "rescaleImage", "(", "image", ",", "output_size", "=", "128", ",", "scale", "=", "1", "/", "255.0", ")", ":", "\n", "    ", "\"\"\"Rescale the image in a sample to a given size.\n    Args:\n        output_size (tuple or int): Desired output size. If tuple, output is\n            matched to output_size. If int, smaller of image edges is matched\n            to output_size keeping aspect ratio the same.\n    \"\"\"", "\n", "image_transform", "=", "image", "*", "scale", "\n", "return", "image_transform", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.filter_depth": [[77, 82], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "filter_depth", "(", "depth_image", ")", ":", "\n", "    ", "depth_image", "=", "torch", ".", "where", "(", "\n", "depth_image", ">", "1e-7", ",", "depth_image", ",", "torch", ".", "zeros_like", "(", "depth_image", ")", "\n", ")", "\n", "return", "torch", ".", "where", "(", "depth_image", "<", "2", ",", "depth_image", ",", "torch", ".", "zeros_like", "(", "depth_image", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.__init__": [[35, 105], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "models.base_models.encoders.ImageEncoder", "models.base_models.encoders.DepthEncoder", "models.base_models.encoders.ForceEncoder", "models.base_models.encoders.ProprioEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sensor_fusion.SensorFusion.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "device", ",", "z_dim", "=", "128", ",", "action_dim", "=", "4", ",", "encoder", "=", "False", ",", "deterministic", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "encoder_bool", "=", "encoder", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "\n", "# zero centered, 1 std normal distribution", "\n", "self", ".", "z_prior_m", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "self", ".", "z_dim", ")", ",", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "z_prior_v", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "ones", "(", "1", ",", "self", ".", "z_dim", ")", ",", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "z_prior", "=", "(", "self", ".", "z_prior_m", ",", "self", ".", "z_prior_v", ")", "\n", "\n", "# -----------------------", "\n", "# Modality Encoders", "\n", "# -----------------------", "\n", "self", ".", "img_encoder", "=", "ImageEncoder", "(", "self", ".", "z_dim", ")", "\n", "self", ".", "depth_encoder", "=", "DepthEncoder", "(", "self", ".", "z_dim", ")", "\n", "self", ".", "frc_encoder", "=", "ForceEncoder", "(", "self", ".", "z_dim", ")", "\n", "self", ".", "proprio_encoder", "=", "ProprioEncoder", "(", "self", ".", "z_dim", ")", "\n", "\n", "# -----------------------", "\n", "# Action Encoders", "\n", "# -----------------------", "\n", "self", ".", "action_encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "action_dim", ",", "32", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "32", ",", "32", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "# -----------------------", "\n", "# action fusion network", "\n", "# -----------------------", "\n", "self", ".", "st_fusion_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "+", "self", ".", "z_dim", ",", "128", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "st_fusion_fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "128", ",", "self", ".", "z_dim", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "if", "deterministic", ":", "\n", "# -----------------------", "\n", "# modality fusion network", "\n", "# -----------------------", "\n", "# 4 Total modalities each (2 * z_dim)", "\n", "            ", "self", ".", "fusion_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4", "*", "2", "*", "self", ".", "z_dim", ",", "128", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "fusion_fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "self", ".", "z_dim", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "# -----------------------", "\n", "# weight initialization", "\n", "# -----------------------", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.forward_encoder": [[106, 173], ["models.models_utils.rescaleImage", "models.models_utils.filter_depth", "sensor_fusion.SensorFusion.img_encoder", "sensor_fusion.SensorFusion.depth_encoder", "sensor_fusion.SensorFusion.frc_encoder", "sensor_fusion.SensorFusion.proprio_encoder", "vis_in.size", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "sensor_fusion.SensorFusion.fusion_fc1", "sensor_fusion.SensorFusion.fusion_fc2", "models.models_utils.duplicate().unsqueeze", "models.models_utils.duplicate().unsqueeze", "models.models_utils.gaussian_parameters", "models.models_utils.gaussian_parameters", "models.models_utils.gaussian_parameters", "models.models_utils.gaussian_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.models_utils.product_of_experts", "models.models_utils.sample_gaussian", "sensor_fusion.SensorFusion.action_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sensor_fusion.SensorFusion.st_fusion_fc1", "sensor_fusion.SensorFusion.st_fusion_fc2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.models_utils.duplicate", "models.models_utils.duplicate"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.rescaleImage", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.filter_depth", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.gaussian_parameters", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.gaussian_parameters", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.gaussian_parameters", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.gaussian_parameters", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.product_of_experts", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.sample_gaussian", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.duplicate", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.duplicate"], ["", "", "", "def", "forward_encoder", "(", "self", ",", "vis_in", ",", "frc_in", ",", "proprio_in", ",", "depth_in", ",", "action_in", ")", ":", "\n", "\n", "# batch size", "\n", "        ", "batch_dim", "=", "vis_in", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "image", "=", "rescaleImage", "(", "vis_in", ")", "\n", "depth", "=", "filter_depth", "(", "depth_in", ")", "\n", "\n", "# Get encoded outputs", "\n", "img_out", ",", "img_out_convs", "=", "self", ".", "img_encoder", "(", "image", ")", "\n", "depth_out", ",", "depth_out_convs", "=", "self", ".", "depth_encoder", "(", "depth", ")", "\n", "frc_out", "=", "self", ".", "frc_encoder", "(", "frc_in", ")", "\n", "proprio_out", "=", "self", ".", "proprio_encoder", "(", "proprio_in", ")", "\n", "\n", "if", "self", ".", "deterministic", ":", "\n", "# multimodal embedding", "\n", "            ", "mm_f1", "=", "torch", ".", "cat", "(", "[", "img_out", ",", "frc_out", ",", "proprio_out", ",", "depth_out", "]", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "mm_f2", "=", "self", ".", "fusion_fc1", "(", "mm_f1", ")", "\n", "z", "=", "self", ".", "fusion_fc2", "(", "mm_f2", ")", "\n", "\n", "", "else", ":", "\n", "# Encoder priors", "\n", "            ", "mu_prior", ",", "var_prior", "=", "self", ".", "z_prior", "\n", "\n", "# Duplicate prior parameters for each data point in the batch", "\n", "mu_prior_resized", "=", "duplicate", "(", "mu_prior", ",", "batch_dim", ")", ".", "unsqueeze", "(", "2", ")", "\n", "var_prior_resized", "=", "duplicate", "(", "var_prior", ",", "batch_dim", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Modality Mean and Variances", "\n", "mu_z_img", ",", "var_z_img", "=", "gaussian_parameters", "(", "img_out", ",", "dim", "=", "1", ")", "\n", "mu_z_frc", ",", "var_z_frc", "=", "gaussian_parameters", "(", "frc_out", ",", "dim", "=", "1", ")", "\n", "mu_z_proprio", ",", "var_z_proprio", "=", "gaussian_parameters", "(", "proprio_out", ",", "dim", "=", "1", ")", "\n", "mu_z_depth", ",", "var_z_depth", "=", "gaussian_parameters", "(", "depth_out", ",", "dim", "=", "1", ")", "\n", "\n", "# Tile distribution parameters using concatonation", "\n", "m_vect", "=", "torch", ".", "cat", "(", "\n", "[", "mu_z_img", ",", "mu_z_frc", ",", "mu_z_proprio", ",", "mu_z_depth", ",", "mu_prior_resized", "]", ",", "dim", "=", "2", "\n", ")", "\n", "var_vect", "=", "torch", ".", "cat", "(", "\n", "[", "var_z_img", ",", "var_z_frc", ",", "var_z_proprio", ",", "var_z_depth", ",", "var_prior_resized", "]", ",", "\n", "dim", "=", "2", ",", "\n", ")", "\n", "\n", "# Fuse modalities mean / variances using product of experts", "\n", "mu_z", ",", "var_z", "=", "product_of_experts", "(", "m_vect", ",", "var_vect", ")", "\n", "\n", "# Sample Gaussian to get latent", "\n", "z", "=", "sample_gaussian", "(", "mu_z", ",", "var_z", ",", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "encoder_bool", "or", "action_in", "is", "None", ":", "\n", "            ", "if", "self", ".", "deterministic", ":", "\n", "                ", "return", "img_out", ",", "frc_out", ",", "proprio_out", ",", "depth_out", ",", "z", "\n", "", "else", ":", "\n", "                ", "return", "img_out_convs", ",", "img_out", ",", "frc_out", ",", "proprio_out", ",", "depth_out", ",", "z", "\n", "", "", "else", ":", "\n", "# action embedding", "\n", "            ", "act_feat", "=", "self", ".", "action_encoder", "(", "action_in", ")", "\n", "\n", "# state-action feature", "\n", "mm_act_f1", "=", "torch", ".", "cat", "(", "[", "z", ",", "act_feat", "]", ",", "1", ")", "\n", "mm_act_f2", "=", "self", ".", "st_fusion_fc1", "(", "mm_act_f1", ")", "\n", "mm_act_feat", "=", "self", ".", "st_fusion_fc2", "(", "mm_act_f2", ")", "\n", "\n", "if", "self", ".", "deterministic", ":", "\n", "                ", "return", "img_out_convs", ",", "mm_act_feat", ",", "z", "\n", "", "else", ":", "\n", "                ", "return", "img_out_convs", ",", "mm_act_feat", ",", "z", ",", "mu_z", ",", "var_z", ",", "mu_prior", ",", "var_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.weight_parameters": [[174, 176], ["sensor_fusion.SensorFusion.named_parameters"], "methods", ["None"], ["", "", "", "def", "weight_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "param", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", "if", "\"weight\"", "in", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.bias_parameters": [[177, 179], ["sensor_fusion.SensorFusion.named_parameters"], "methods", ["None"], ["", "def", "bias_parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "param", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", "if", "\"bias\"", "in", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusionSelfSupervised.__init__": [[191, 230], ["sensor_fusion.SensorFusion.__init__", "models.base_models.decoders.OpticalFlowDecoder", "models.base_models.decoders.EeDeltaDecoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sensor_fusion.SensorFusionSelfSupervised.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "device", ",", "z_dim", "=", "128", ",", "action_dim", "=", "4", ",", "encoder", "=", "False", ",", "deterministic", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "device", ",", "z_dim", ",", "action_dim", ",", "encoder", ",", "deterministic", ")", "\n", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "\n", "# -----------------------", "\n", "# optical flow predictor", "\n", "# -----------------------", "\n", "self", ".", "optical_flow_decoder", "=", "OpticalFlowDecoder", "(", "z_dim", ")", "\n", "\n", "# -----------------------", "\n", "# ee delta decoder", "\n", "# -----------------------", "\n", "self", ".", "ee_delta_decoder", "=", "EeDeltaDecoder", "(", "z_dim", ",", "action_dim", ")", "\n", "\n", "# -----------------------", "\n", "# pairing decoder", "\n", "# -----------------------", "\n", "self", ".", "pair_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "1", ")", ")", "\n", "\n", "# -----------------------", "\n", "# contact decoder", "\n", "# -----------------------", "\n", "self", ".", "contact_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "1", ")", ")", "\n", "\n", "# -----------------------", "\n", "# weight initialization", "\n", "# -----------------------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusionSelfSupervised.forward": [[231, 305], ["mm_act_feat.size", "mm_act_feat.view().expand", "sensor_fusion.SensorFusionSelfSupervised.pair_fc", "sensor_fusion.SensorFusionSelfSupervised.contact_fc", "sensor_fusion.SensorFusionSelfSupervised.ee_delta_decoder", "sensor_fusion.SensorFusionSelfSupervised.optical_flow_decoder", "sensor_fusion.SensorFusionSelfSupervised.forward_encoder", "sensor_fusion.SensorFusionSelfSupervised.forward_encoder", "sensor_fusion.SensorFusionSelfSupervised.pair_fc", "mm_act_feat.view", "sensor_fusion.SensorFusionSelfSupervised.forward_encoder", "sensor_fusion.SensorFusionSelfSupervised.forward_encoder"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.forward_encoder", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.forward_encoder", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.forward_encoder", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.sensor_fusion.SensorFusion.forward_encoder"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "\n", "vis_in", ",", "\n", "frc_in", ",", "\n", "proprio_in", ",", "\n", "depth_in", ",", "\n", "action_in", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "encoder_bool", ":", "\n", "# returning latent space representation if model is set in encoder mode", "\n", "            ", "z", "=", "self", ".", "forward_encoder", "(", "vis_in", ",", "frc_in", ",", "proprio_in", ",", "depth_in", ",", "action_in", ")", "\n", "return", "z", "\n", "\n", "", "elif", "action_in", "is", "None", ":", "\n", "            ", "z", "=", "self", ".", "forward_encoder", "(", "vis_in", ",", "frc_in", ",", "proprio_in", ",", "depth_in", ",", "None", ")", "\n", "pair_out", "=", "self", ".", "pair_fc", "(", "z", ")", "\n", "return", "pair_out", "\n", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "deterministic", ":", "\n", "                ", "img_out_convs", ",", "mm_act_feat", ",", "z", "=", "self", ".", "forward_encoder", "(", "\n", "vis_in", ",", "frc_in", ",", "proprio_in", ",", "depth_in", ",", "action_in", "\n", ")", "\n", "", "else", ":", "\n", "                ", "img_out_convs", ",", "mm_act_feat", ",", "z", ",", "mu_z", ",", "var_z", ",", "mu_prior", ",", "var_prior", "=", "self", ".", "forward_encoder", "(", "\n", "vis_in", ",", "\n", "frc_in", ",", "\n", "proprio_in", ",", "\n", "depth_in", ",", "\n", "action_in", ",", "\n", ")", "\n", "\n", "# ---------------- Training Objectives ----------------", "\n", "\n", "# tile state-action features and append to conv map", "\n", "", "", "batch_dim", "=", "mm_act_feat", ".", "size", "(", "0", ")", "# batch size", "\n", "tiled_feat", "=", "mm_act_feat", ".", "view", "(", "batch_dim", ",", "self", ".", "z_dim", ",", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "2", ",", "2", ")", "\n", "\n", "# -------------------------------------#", "\n", "# Pairing / Contact / EE Delta Decoder #", "\n", "# -------------------------------------#", "\n", "pair_out", "=", "self", ".", "pair_fc", "(", "z", ")", "\n", "contact_out", "=", "self", ".", "contact_fc", "(", "mm_act_feat", ")", "\n", "ee_delta_out", "=", "self", ".", "ee_delta_decoder", "(", "mm_act_feat", ")", "\n", "\n", "# -------------------------#", "\n", "# Optical Flow Prediction #", "\n", "# -------------------------#", "\n", "optical_flow2", ",", "optical_flow2_mask", "=", "self", ".", "optical_flow_decoder", "(", "\n", "tiled_feat", ",", "img_out_convs", "\n", ")", "\n", "\n", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "(", "\n", "pair_out", ",", "\n", "contact_out", ",", "\n", "optical_flow2", ",", "\n", "optical_flow2_mask", ",", "\n", "ee_delta_out", ",", "\n", "z", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "pair_out", ",", "\n", "contact_out", ",", "\n", "optical_flow2", ",", "\n", "optical_flow2_mask", ",", "\n", "ee_delta_out", ",", "\n", "z", ",", "\n", "mu_z", ",", "\n", "var_z", ",", "\n", "mu_prior", ",", "\n", "var_prior", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.ProprioEncoder.__init__": [[7, 27], ["torch.Module.__init__", "torch.Sequential", "torch.Linear", "torch.LeakyReLU", "torch.Linear", "torch.LeakyReLU", "torch.Linear", "torch.LeakyReLU", "torch.Linear", "torch.LeakyReLU", "models.models_utils.init_weights", "encoders.ProprioEncoder.modules"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "initailize_weights", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Image encoder taken from selfsupervised code\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "proprio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "8", ",", "32", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "32", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "2", "*", "self", ".", "z_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "if", "initailize_weights", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.ProprioEncoder.forward": [[28, 30], ["encoders.ProprioEncoder.proprio_encoder().unsqueeze", "encoders.ProprioEncoder.proprio_encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "proprio", ")", ":", "\n", "        ", "return", "self", ".", "proprio_encoder", "(", "proprio", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.ForceEncoder.__init__": [[33, 55], ["torch.Module.__init__", "torch.Sequential", "models.base_models.layers.CausalConv1D", "torch.LeakyReLU", "models.base_models.layers.CausalConv1D", "torch.LeakyReLU", "models.base_models.layers.CausalConv1D", "torch.LeakyReLU", "models.base_models.layers.CausalConv1D", "torch.LeakyReLU", "models.base_models.layers.CausalConv1D", "torch.LeakyReLU", "models.models_utils.init_weights", "encoders.ForceEncoder.modules"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "initailize_weights", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Force encoder taken from selfsupervised code\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "frc_encoder", "=", "nn", ".", "Sequential", "(", "\n", "CausalConv1D", "(", "6", ",", "16", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "CausalConv1D", "(", "16", ",", "32", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "CausalConv1D", "(", "32", ",", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "CausalConv1D", "(", "64", ",", "128", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "CausalConv1D", "(", "128", ",", "2", "*", "self", ".", "z_dim", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "if", "initailize_weights", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.ForceEncoder.forward": [[56, 58], ["encoders.ForceEncoder.frc_encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "force", ")", ":", "\n", "        ", "return", "self", ".", "frc_encoder", "(", "force", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.ImageEncoder.__init__": [[61, 79], ["torch.Module.__init__", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "torch.Linear", "models.base_models.layers.Flatten", "models.models_utils.init_weights", "encoders.ImageEncoder.modules"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "initailize_weights", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Image encoder taken from Making Sense of Vision and Touch\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "img_conv1", "=", "conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ")", "\n", "self", ".", "img_conv2", "=", "conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", "\n", "self", ".", "img_conv3", "=", "conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", "\n", "self", ".", "img_conv4", "=", "conv2d", "(", "64", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "img_conv5", "=", "conv2d", "(", "64", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "img_conv6", "=", "conv2d", "(", "128", ",", "self", ".", "z_dim", ",", "stride", "=", "2", ")", "\n", "self", ".", "img_encoder", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "z_dim", ",", "2", "*", "self", ".", "z_dim", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "\n", "if", "initailize_weights", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.ImageEncoder.forward": [[80, 103], ["encoders.ImageEncoder.img_conv1", "encoders.ImageEncoder.img_conv2", "encoders.ImageEncoder.img_conv3", "encoders.ImageEncoder.img_conv4", "encoders.ImageEncoder.img_conv5", "encoders.ImageEncoder.img_conv6", "encoders.ImageEncoder.flatten", "encoders.ImageEncoder.img_encoder().unsqueeze", "encoders.ImageEncoder.img_encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "# image encoding layers", "\n", "        ", "out_img_conv1", "=", "self", ".", "img_conv1", "(", "image", ")", "\n", "out_img_conv2", "=", "self", ".", "img_conv2", "(", "out_img_conv1", ")", "\n", "out_img_conv3", "=", "self", ".", "img_conv3", "(", "out_img_conv2", ")", "\n", "out_img_conv4", "=", "self", ".", "img_conv4", "(", "out_img_conv3", ")", "\n", "out_img_conv5", "=", "self", ".", "img_conv5", "(", "out_img_conv4", ")", "\n", "out_img_conv6", "=", "self", ".", "img_conv6", "(", "out_img_conv5", ")", "\n", "\n", "img_out_convs", "=", "(", "\n", "out_img_conv1", ",", "\n", "out_img_conv2", ",", "\n", "out_img_conv3", ",", "\n", "out_img_conv4", ",", "\n", "out_img_conv5", ",", "\n", "out_img_conv6", ",", "\n", ")", "\n", "\n", "# image embedding parameters", "\n", "flattened", "=", "self", ".", "flatten", "(", "out_img_conv6", ")", "\n", "img_out", "=", "self", ".", "img_encoder", "(", "flattened", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "return", "img_out", ",", "img_out_convs", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.DepthEncoder.__init__": [[106, 125], ["torch.Module.__init__", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "models.base_models.layers.conv2d", "torch.Linear", "models.base_models.layers.Flatten", "models.models_utils.init_weights", "encoders.DepthEncoder.modules"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "initailize_weights", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Simplified Depth Encoder taken from Making Sense of Vision and Touch\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n", "self", ".", "depth_conv1", "=", "conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "depth_conv2", "=", "conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "depth_conv3", "=", "conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", "\n", "self", ".", "depth_conv4", "=", "conv2d", "(", "64", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "depth_conv5", "=", "conv2d", "(", "64", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "depth_conv6", "=", "conv2d", "(", "128", ",", "self", ".", "z_dim", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "depth_encoder", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "z_dim", ",", "2", "*", "self", ".", "z_dim", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "\n", "if", "initailize_weights", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.encoders.DepthEncoder.forward": [[126, 149], ["encoders.DepthEncoder.depth_conv1", "encoders.DepthEncoder.depth_conv2", "encoders.DepthEncoder.depth_conv3", "encoders.DepthEncoder.depth_conv4", "encoders.DepthEncoder.depth_conv5", "encoders.DepthEncoder.depth_conv6", "encoders.DepthEncoder.flatten", "encoders.DepthEncoder.depth_encoder().unsqueeze", "encoders.DepthEncoder.depth_encoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "depth", ")", ":", "\n", "# depth encoding layers", "\n", "        ", "out_depth_conv1", "=", "self", ".", "depth_conv1", "(", "depth", ")", "\n", "out_depth_conv2", "=", "self", ".", "depth_conv2", "(", "out_depth_conv1", ")", "\n", "out_depth_conv3", "=", "self", ".", "depth_conv3", "(", "out_depth_conv2", ")", "\n", "out_depth_conv4", "=", "self", ".", "depth_conv4", "(", "out_depth_conv3", ")", "\n", "out_depth_conv5", "=", "self", ".", "depth_conv5", "(", "out_depth_conv4", ")", "\n", "out_depth_conv6", "=", "self", ".", "depth_conv6", "(", "out_depth_conv5", ")", "\n", "\n", "depth_out_convs", "=", "(", "\n", "out_depth_conv1", ",", "\n", "out_depth_conv2", ",", "\n", "out_depth_conv3", ",", "\n", "out_depth_conv4", ",", "\n", "out_depth_conv5", ",", "\n", "out_depth_conv6", ",", "\n", ")", "\n", "\n", "# depth embedding parameters", "\n", "flattened", "=", "self", ".", "flatten", "(", "out_depth_conv6", ")", "\n", "depth_out", "=", "self", ".", "depth_encoder", "(", "flattened", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "return", "depth_out", ",", "depth_out_convs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.View.__init__": [[56, 59], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.View.forward": [[60, 62], ["tensor.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "view", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.Flatten.__init__": [[68, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.Flatten.forward": [[71, 73], ["x.reshape", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.CausalConv1D.__init__": [[79, 92], ["torch.Conv1d.__init__"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "__padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "self", ".", "__padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.CausalConv1D.forward": [[94, 99], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.decoders.EeDeltaDecoder.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "__padding", "!=", "0", ":", "\n", "            ", "return", "res", "[", ":", ",", ":", ",", ":", "-", "self", ".", "__padding", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.ResidualBlock.__init__": [[105, 113], ["torch.Module.__init__", "layers.conv2d", "layers.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d"], ["def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv2d", "(", "channels", ",", "channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv2d", "(", "channels", ",", "channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "# nn.ReLU(inplace=True)", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.ResidualBlock.forward": [[114, 119], ["layers.ResidualBlock.act", "layers.ResidualBlock.act", "layers.ResidualBlock.bn2", "layers.ResidualBlock.bn1", "layers.ResidualBlock.conv2", "layers.ResidualBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "act", "(", "x", ")", "\n", "out", "=", "self", ".", "act", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "return", "out", "+", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like": [[7, 12], ["input.size", "target.size", "target.size", "target.size"], "function", ["None"], ["def", "crop_like", "(", "input", ",", "target", ")", ":", "\n", "    ", "if", "input", ".", "size", "(", ")", "[", "2", ":", "]", "==", "target", ".", "size", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "return", "input", "\n", "", "else", ":", "\n", "        ", "return", "input", "[", ":", ",", ":", ",", ":", "target", ".", "size", "(", "2", ")", ",", ":", "target", ".", "size", "(", "3", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.deconv": [[14, 20], ["torch.Sequential", "torch.ConvTranspose2d", "torch.LeakyReLU"], "function", ["None"], ["", "", "def", "deconv", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.predict_flow": [[23, 25], ["torch.Conv2d"], "function", ["None"], ["", "def", "predict_flow", "(", "in_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d": [[27, 52], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"`same` convolution with LeakyReLU, i.e. output shape equals input shape.\n  Args:\n    in_planes (int): The number of input feature maps.\n    out_planes (int): The number of output feature maps.\n    kernel_size (int): The filter size.\n    dilation (int): The filter dilation factor.\n    stride (int): The filter stride.\n  \"\"\"", "\n", "# compute new filter size after dilation", "\n", "# and necessary padding for `same` output size", "\n", "dilated_kernel_size", "=", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "+", "kernel_size", "\n", "same_padding", "=", "(", "dilated_kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "same_padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.decoders.OpticalFlowDecoder.__init__": [[13, 52], ["torch.Module.__init__", "models.base_models.layers.conv2d", "models.base_models.layers.deconv", "models.base_models.layers.deconv", "models.base_models.layers.deconv", "models.base_models.layers.deconv", "models.base_models.layers.deconv", "models.base_models.layers.predict_flow", "models.base_models.layers.predict_flow", "models.base_models.layers.predict_flow", "models.base_models.layers.predict_flow", "models.base_models.layers.predict_flow", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "models.models_utils.init_weights", "decoders.OpticalFlowDecoder.modules"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.deconv", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.deconv", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.deconv", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.deconv", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.deconv", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.predict_flow", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.predict_flow", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.predict_flow", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.predict_flow", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.predict_flow", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "initailize_weights", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Decodes the optical flow and optical flow mask.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "optical_flow_conv", "=", "conv2d", "(", "2", "*", "z_dim", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "img_deconv6", "=", "deconv", "(", "64", ",", "64", ")", "\n", "self", ".", "img_deconv5", "=", "deconv", "(", "64", ",", "32", ")", "\n", "self", ".", "img_deconv4", "=", "deconv", "(", "162", ",", "32", ")", "\n", "self", ".", "img_deconv3", "=", "deconv", "(", "98", ",", "32", ")", "\n", "self", ".", "img_deconv2", "=", "deconv", "(", "98", ",", "32", ")", "\n", "\n", "self", ".", "predict_optical_flow6", "=", "predict_flow", "(", "64", ")", "\n", "self", ".", "predict_optical_flow5", "=", "predict_flow", "(", "162", ")", "\n", "self", ".", "predict_optical_flow4", "=", "predict_flow", "(", "98", ")", "\n", "self", ".", "predict_optical_flow3", "=", "predict_flow", "(", "98", ")", "\n", "self", ".", "predict_optical_flow2", "=", "predict_flow", "(", "66", ")", "\n", "\n", "self", ".", "upsampled_optical_flow6_to_5", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "2", ",", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "upsampled_optical_flow5_to_4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "2", ",", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "upsampled_optical_flow4_to_3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "2", ",", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "upsampled_optical_flow3_to_2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "2", ",", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "predict_optical_flow2_mask", "=", "nn", ".", "Conv2d", "(", "\n", "66", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "if", "initailize_weights", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.decoders.OpticalFlowDecoder.forward": [[53, 108], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoders.OpticalFlowDecoder.optical_flow_conv", "decoders.OpticalFlowDecoder.img_deconv6", "decoders.OpticalFlowDecoder.predict_optical_flow6", "models.base_models.layers.crop_like", "models.base_models.layers.crop_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoders.OpticalFlowDecoder.predict_optical_flow5", "models.base_models.layers.crop_like", "models.base_models.layers.crop_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoders.OpticalFlowDecoder.predict_optical_flow4", "models.base_models.layers.crop_like", "models.base_models.layers.crop_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoders.OpticalFlowDecoder.predict_optical_flow3", "models.base_models.layers.crop_like", "models.base_models.layers.crop_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoders.OpticalFlowDecoder.predict_optical_flow2", "decoders.OpticalFlowDecoder.predict_optical_flow2_mask", "decoders.OpticalFlowDecoder.upsampled_optical_flow6_to_5", "decoders.OpticalFlowDecoder.img_deconv5", "decoders.OpticalFlowDecoder.upsampled_optical_flow5_to_4", "decoders.OpticalFlowDecoder.img_deconv4", "decoders.OpticalFlowDecoder.upsampled_optical_flow4_to_3", "decoders.OpticalFlowDecoder.img_deconv3", "decoders.OpticalFlowDecoder.upsampled_optical_flow3_to_2", "decoders.OpticalFlowDecoder.img_deconv2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.crop_like"], ["", "", "def", "forward", "(", "self", ",", "tiled_feat", ",", "img_out_convs", ")", ":", "\n", "        ", "\"\"\"\n        Predicts the optical flow and optical flow mask.\n\n        Args:\n            tiled_feat: action conditioned z (output of fusion + action network)\n            img_out_convs: outputs of the image encoders (skip connections)\n        \"\"\"", "\n", "out_img_conv1", ",", "out_img_conv2", ",", "out_img_conv3", ",", "out_img_conv4", ",", "out_img_conv5", ",", "out_img_conv6", "=", "(", "\n", "img_out_convs", "\n", ")", "\n", "\n", "optical_flow_in_f", "=", "torch", ".", "cat", "(", "[", "out_img_conv6", ",", "tiled_feat", "]", ",", "1", ")", "\n", "optical_flow_in_f2", "=", "self", ".", "optical_flow_conv", "(", "optical_flow_in_f", ")", "\n", "optical_flow_in_feat", "=", "self", ".", "img_deconv6", "(", "optical_flow_in_f2", ")", "\n", "\n", "# predict optical flow pyramids", "\n", "optical_flow6", "=", "self", ".", "predict_optical_flow6", "(", "optical_flow_in_feat", ")", "\n", "optical_flow6_up", "=", "crop_like", "(", "\n", "self", ".", "upsampled_optical_flow6_to_5", "(", "optical_flow6", ")", ",", "out_img_conv5", "\n", ")", "\n", "out_img_deconv5", "=", "crop_like", "(", "\n", "self", ".", "img_deconv5", "(", "optical_flow_in_feat", ")", ",", "out_img_conv5", "\n", ")", "\n", "\n", "concat5", "=", "torch", ".", "cat", "(", "(", "out_img_conv5", ",", "out_img_deconv5", ",", "optical_flow6_up", ")", ",", "1", ")", "\n", "optical_flow5", "=", "self", ".", "predict_optical_flow5", "(", "concat5", ")", "\n", "optical_flow5_up", "=", "crop_like", "(", "\n", "self", ".", "upsampled_optical_flow5_to_4", "(", "optical_flow5", ")", ",", "out_img_conv4", "\n", ")", "\n", "out_img_deconv4", "=", "crop_like", "(", "self", ".", "img_deconv4", "(", "concat5", ")", ",", "out_img_conv4", ")", "\n", "\n", "concat4", "=", "torch", ".", "cat", "(", "(", "out_img_conv4", ",", "out_img_deconv4", ",", "optical_flow5_up", ")", ",", "1", ")", "\n", "optical_flow4", "=", "self", ".", "predict_optical_flow4", "(", "concat4", ")", "\n", "optical_flow4_up", "=", "crop_like", "(", "\n", "self", ".", "upsampled_optical_flow4_to_3", "(", "optical_flow4", ")", ",", "out_img_conv3", "\n", ")", "\n", "out_img_deconv3", "=", "crop_like", "(", "self", ".", "img_deconv3", "(", "concat4", ")", ",", "out_img_conv3", ")", "\n", "\n", "concat3", "=", "torch", ".", "cat", "(", "(", "out_img_conv3", ",", "out_img_deconv3", ",", "optical_flow4_up", ")", ",", "1", ")", "\n", "optical_flow3", "=", "self", ".", "predict_optical_flow3", "(", "concat3", ")", "\n", "optical_flow3_up", "=", "crop_like", "(", "\n", "self", ".", "upsampled_optical_flow3_to_2", "(", "optical_flow3", ")", ",", "out_img_conv2", "\n", ")", "\n", "out_img_deconv2", "=", "crop_like", "(", "self", ".", "img_deconv2", "(", "concat3", ")", ",", "out_img_conv2", ")", "\n", "\n", "concat2", "=", "torch", ".", "cat", "(", "(", "out_img_conv2", ",", "out_img_deconv2", ",", "optical_flow3_up", ")", ",", "1", ")", "\n", "\n", "optical_flow2_unmasked", "=", "self", ".", "predict_optical_flow2", "(", "concat2", ")", "\n", "\n", "optical_flow2_mask", "=", "self", ".", "predict_optical_flow2_mask", "(", "concat2", ")", "\n", "\n", "optical_flow2", "=", "optical_flow2_unmasked", "*", "torch", ".", "sigmoid", "(", "optical_flow2_mask", ")", "\n", "\n", "return", "optical_flow2", ",", "optical_flow2_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.decoders.EeDeltaDecoder.__init__": [[111, 129], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "models.models_utils.init_weights", "decoders.EeDeltaDecoder.modules"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.models.models_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "action_dim", ",", "initailize_weights", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Decodes the EE Delta\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ee_delta_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "z_dim", ",", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "32", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "32", ",", "action_dim", ")", ",", "\n", ")", "\n", "\n", "if", "initailize_weights", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.decoders.EeDeltaDecoder.forward": [[130, 132], ["decoders.EeDeltaDecoder.ee_delta_decoder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "mm_act_feat", ")", ":", "\n", "        ", "return", "self", ".", "ee_delta_decoder", "(", "mm_act_feat", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.tests.test_layers.TestConv2d.test_same_shape_no_dilation": [[12, 18], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "models.base_models.layers.conv2d", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.base_models.layers.conv2d."], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d"], ["    ", "def", "test_same_shape_no_dilation", "(", "self", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "1", ",", "1", ",", "5", ",", "5", ")", "\n", "conv", "=", "conv2d", "(", "1", ",", "1", ",", "3", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "conv", "(", "x", ")", "\n", "", "assert", "out", ".", "shape", "[", "2", ":", "]", "==", "x", ".", "shape", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.tests.test_layers.TestConv2d.test_same_shape_with_dilation": [[19, 25], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "models.base_models.layers.conv2d", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.base_models.layers.conv2d."], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.base_models.layers.conv2d"], ["", "def", "test_same_shape_with_dilation", "(", "self", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "1", ",", "1", ",", "5", ",", "5", ")", "\n", "conv", "=", "conv2d", "(", "1", ",", "1", ",", "3", ",", "dilation", "=", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "conv", "(", "x", ")", "\n", "", "assert", "out", ".", "shape", "[", "2", ":", "]", "==", "x", ".", "shape", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.tests.test_layers.TestCausalConv1d.test_same_shape_no_dilation": [[28, 34], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "models.base_models.layers.CausalConv1D", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.base_models.layers.CausalConv1D."], "methods", ["None"], ["    ", "def", "test_same_shape_no_dilation", "(", "self", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "1", ",", "1", ",", "6", ")", "\n", "conv1d", "=", "CausalConv1D", "(", "1", ",", "1", ",", "3", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "conv1d", "(", "x", ")", "\n", "", "assert", "out", ".", "shape", "[", "2", ":", "]", "==", "x", ".", "shape", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.tests.test_layers.TestCausalConv1d.test_same_shape_with_dilation": [[35, 41], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "models.base_models.layers.CausalConv1D", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.base_models.layers.CausalConv1D."], "methods", ["None"], ["", "def", "test_same_shape_with_dilation", "(", "self", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "1", ",", "1", ",", "6", ")", "\n", "conv1d", "=", "CausalConv1D", "(", "1", ",", "1", ",", "3", ",", "dilation", "=", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "conv1d", "(", "x", ")", "\n", "", "assert", "out", ".", "shape", "[", "2", ":", "]", "==", "x", ".", "shape", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.tests.test_layers.TestCausalConv1d.test_causality_no_dilation": [[42, 60], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "models.base_models.layers.CausalConv1D", "models.base_models.layers.CausalConv1D.numpy().squeeze", "models.base_models.layers.CausalConv1D.weight.detach().clone().squeeze().numpy", "torch.pad().detach().squeeze().numpy", "torch.pad().detach().squeeze().numpy", "torch.pad().detach().squeeze().numpy", "range", "numpy.asarray", "numpy.allclose", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.base_models.layers.CausalConv1D.", "int", "numpy.asarray.append", "models.base_models.layers.CausalConv1D.numpy", "models.base_models.layers.CausalConv1D.weight.detach().clone().squeeze", "torch.pad().detach().squeeze", "torch.pad().detach().squeeze", "torch.pad().detach().squeeze", "models.base_models.layers.CausalConv1D.weight.detach().clone", "torch.pad().detach", "torch.pad().detach", "torch.pad().detach", "models.base_models.layers.CausalConv1D.weight.detach", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "test_causality_no_dilation", "(", "self", ")", ":", "\n", "        ", "stride", "=", "1", "\n", "length", "=", "6", "\n", "dilation", "=", "1", "\n", "kernel_size", "=", "3", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "1", ",", "length", ")", "\n", "conv1d", "=", "CausalConv1D", "(", "1", ",", "1", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "bias", "=", "False", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "actual", "=", "conv1d", "(", "x", ")", "\n", "", "actual", "=", "actual", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "weight", "=", "conv1d", ".", "weight", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "padding", "=", "(", "int", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", ",", "0", ")", "\n", "padded_x", "=", "F", ".", "pad", "(", "x", ",", "padding", ")", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "expected", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "expected", ".", "append", "(", "weight", "@", "padded_x", "[", "i", ":", "i", "+", "3", "]", ")", "\n", "", "expected", "=", "np", ".", "asarray", "(", "expected", ")", "\n", "assert", "np", ".", "allclose", "(", "actual", ",", "expected", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.ToTensor.ToTensor.__init__": [[8, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.ToTensor.ToTensor.__call__": [[11, 31], ["sample.keys", "dict", "sample.items", "k.startswith", "sample[].transpose", "torch.FloatTensor", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "\n", "# transpose flow into 2 x H x W", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'flow'", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "sample", "[", "k", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "# convert numpy arrays to pytorch tensors", "\n", "", "", "new_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "device", "is", "None", ":", "\n", "# torch.tensor(v, device = self.device, dtype = torch.float32)", "\n", "                ", "new_dict", "[", "k", "]", "=", "torch", ".", "FloatTensor", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "new_dict", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", ".", "float", "(", ")", "\n", "\n", "", "", "return", "new_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.ProcessFlow.ProcessFlow.__init__": [[12, 15], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pyramid_scales", "=", "[", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "assert", "isinstance", "(", "pyramid_scales", ",", "list", ")", "\n", "self", ".", "pyramid_scales", "=", "pyramid_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.ProcessFlow.ProcessFlow.__call__": [[16, 22], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "# subsampling to create small flow images", "\n", "        ", "for", "scale", "in", "self", ".", "pyramid_scales", ":", "\n", "            ", "scaled_flow", "=", "sample", "[", "'flow'", "]", "[", ":", ":", "scale", ",", ":", ":", "scale", "]", "\n", "sample", "[", "'flow{}'", ".", "format", "(", "scale", ")", "]", "=", "scaled_flow", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.ProcessForce.ProcessForce.__init__": [[12, 17], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ",", "key", "=", "'force'", ",", "tanh", "=", "False", ")", ":", "\n", "        ", "assert", "isinstance", "(", "window_size", ",", "int", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "key", "=", "key", "\n", "self", ".", "tanh", "=", "tanh", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.ProcessForce.ProcessForce.__call__": [[18, 25], ["numpy.tanh.transpose", "numpy.tanh"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "force", "=", "sample", "[", "self", ".", "key", "]", "\n", "force", "=", "force", "[", "-", "self", ".", "window_size", ":", "]", "\n", "if", "self", ".", "tanh", ":", "\n", "            ", "force", "=", "np", ".", "tanh", "(", "force", ")", "# remove very large force readings", "\n", "", "sample", "[", "self", ".", "key", "]", "=", "force", ".", "transpose", "(", ")", "\n", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__init__": [[12, 39], ["MultimodalManipulationDataset.MultimodalManipulationDataset._config_checks", "MultimodalManipulationDataset.MultimodalManipulationDataset._init_paired_filenames"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._config_checks", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._init_paired_filenames"], ["def", "__init__", "(", "\n", "self", ",", "\n", "filename_list", ",", "\n", "transform", "=", "None", ",", "\n", "episode_length", "=", "50", ",", "\n", "training_type", "=", "\"selfsupervised\"", ",", "\n", "n_time_steps", "=", "1", ",", "\n", "action_dim", "=", "4", ",", "\n", "pairing_tolerance", "=", "0.06", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            hdf5_file (handle): h5py handle of the hdf5 file with annotations.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "self", ".", "dataset_path", "=", "filename_list", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "episode_length", "=", "episode_length", "\n", "self", ".", "training_type", "=", "training_type", "\n", "self", ".", "n_time_steps", "=", "n_time_steps", "\n", "self", ".", "dataset", "=", "{", "}", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "pairing_tolerance", "=", "pairing_tolerance", "\n", "\n", "self", ".", "_config_checks", "(", ")", "\n", "self", ".", "_init_paired_filenames", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset_path", ")", "*", "(", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__getitem__": [[43, 66], ["MultimodalManipulationDataset.MultimodalManipulationDataset._parse_filename", "MultimodalManipulationDataset.MultimodalManipulationDataset._get_single", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._parse_filename", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._get_single"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "list_index", "=", "idx", "//", "(", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", ")", "\n", "dataset_index", "=", "idx", "%", "(", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", ")", "\n", "filename", "=", "self", ".", "dataset_path", "[", "list_index", "]", "[", ":", "-", "8", "]", "\n", "\n", "file_number", ",", "filename", "=", "self", ".", "_parse_filename", "(", "filename", ")", "\n", "\n", "unpaired_filename", ",", "unpaired_idx", "=", "self", ".", "paired_filenames", "[", "(", "list_index", ",", "dataset_index", ")", "]", "\n", "\n", "if", "dataset_index", ">=", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", "-", "1", ":", "\n", "            ", "dataset_index", "=", "np", ".", "random", ".", "randint", "(", "\n", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", "-", "1", "\n", ")", "\n", "\n", "", "sample", "=", "self", ".", "_get_single", "(", "\n", "self", ".", "dataset_path", "[", "list_index", "]", ",", "\n", "list_index", ",", "\n", "unpaired_filename", ",", "\n", "dataset_index", ",", "\n", "unpaired_idx", ",", "\n", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._get_single": [[67, 127], ["h5py.File", "h5py.File", "h5py.File.close", "h5py.File.close", "numpy.array", "numpy.expand_dims", "MultimodalManipulationDataset.MultimodalManipulationDataset.transform", "numpy.transpose", "depth.reshape.reshape.reshape", "numpy.where", "numpy.array().astype", "numpy.zeros_like", "numpy.ones_like", "numpy.array.sum", "numpy.array.sum", "numpy.array.sum", "numpy.array", "[].sum"], "methods", ["None"], ["", "def", "_get_single", "(", "\n", "self", ",", "dataset_name", ",", "list_index", ",", "unpaired_filename", ",", "dataset_index", ",", "unpaired_idx", "\n", ")", ":", "\n", "\n", "        ", "dataset", "=", "h5py", ".", "File", "(", "dataset_name", ",", "\"r\"", ",", "swmr", "=", "True", ",", "libver", "=", "\"latest\"", ")", "\n", "unpaired_dataset", "=", "h5py", ".", "File", "(", "unpaired_filename", ",", "\"r\"", ",", "swmr", "=", "True", ",", "libver", "=", "\"latest\"", ")", "\n", "\n", "if", "self", ".", "training_type", "==", "\"selfsupervised\"", ":", "\n", "\n", "            ", "image", "=", "dataset", "[", "\"image\"", "]", "[", "dataset_index", "]", "\n", "depth", "=", "dataset", "[", "\"depth_data\"", "]", "[", "dataset_index", "]", "\n", "proprio", "=", "dataset", "[", "\"proprio\"", "]", "[", "dataset_index", "]", "[", ":", "8", "]", "\n", "force", "=", "dataset", "[", "\"ee_forces_continuous\"", "]", "[", "dataset_index", "]", "\n", "\n", "if", "image", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "                ", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "", "if", "depth", ".", "ndim", "==", "2", ":", "\n", "                ", "depth", "=", "depth", ".", "reshape", "(", "(", "128", ",", "128", ",", "1", ")", ")", "\n", "\n", "", "flow", "=", "np", ".", "array", "(", "dataset", "[", "\"optical_flow\"", "]", "[", "dataset_index", "]", ")", "\n", "flow_mask", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "where", "(", "\n", "flow", ".", "sum", "(", "axis", "=", "2", ")", "==", "0", ",", "\n", "np", ".", "zeros_like", "(", "flow", ".", "sum", "(", "axis", "=", "2", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "flow", ".", "sum", "(", "axis", "=", "2", ")", ")", ",", "\n", ")", ",", "\n", "2", ",", "\n", ")", "\n", "\n", "unpaired_image", "=", "image", "\n", "unpaired_depth", "=", "depth", "\n", "unpaired_proprio", "=", "unpaired_dataset", "[", "\"proprio\"", "]", "[", "unpaired_idx", "]", "[", ":", "8", "]", "\n", "unpaired_force", "=", "unpaired_dataset", "[", "\"ee_forces_continuous\"", "]", "[", "unpaired_idx", "]", "\n", "\n", "sample", "=", "{", "\n", "\"image\"", ":", "image", ",", "\n", "\"depth\"", ":", "depth", ",", "\n", "\"flow\"", ":", "flow", ",", "\n", "\"flow_mask\"", ":", "flow_mask", ",", "\n", "\"action\"", ":", "dataset", "[", "\"action\"", "]", "[", "dataset_index", "+", "1", "]", ",", "\n", "\"force\"", ":", "force", ",", "\n", "\"proprio\"", ":", "proprio", ",", "\n", "\"ee_yaw_next\"", ":", "dataset", "[", "\"proprio\"", "]", "[", "dataset_index", "+", "1", "]", "[", ":", "self", ".", "action_dim", "]", ",", "\n", "\"contact_next\"", ":", "np", ".", "array", "(", "\n", "[", "dataset", "[", "\"contact\"", "]", "[", "dataset_index", "+", "1", "]", ".", "sum", "(", ")", ">", "0", "]", "\n", ")", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "\"unpaired_image\"", ":", "unpaired_image", ",", "\n", "\"unpaired_force\"", ":", "unpaired_force", ",", "\n", "\"unpaired_proprio\"", ":", "unpaired_proprio", ",", "\n", "\"unpaired_depth\"", ":", "unpaired_depth", ",", "\n", "}", "\n", "\n", "", "dataset", ".", "close", "(", ")", "\n", "unpaired_dataset", ".", "close", "(", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._init_paired_filenames": [[128, 163], ["set", "tqdm.tqdm.tqdm", "range", "MultimodalManipulationDataset.MultimodalManipulationDataset._parse_filename", "h5py.File", "range", "h5py.File.close", "len", "set.add", "numpy.random.randint", "MultimodalManipulationDataset.MultimodalManipulationDataset._idx_to_filename_idx", "MultimodalManipulationDataset.MultimodalManipulationDataset.__len__", "numpy.random.randint", "MultimodalManipulationDataset.MultimodalManipulationDataset._idx_to_filename_idx", "h5py.File", "numpy.linalg.norm", "MultimodalManipulationDataset.MultimodalManipulationDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._parse_filename", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._idx_to_filename_idx", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__len__", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._idx_to_filename_idx", "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset.__len__"], ["", "def", "_init_paired_filenames", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Precalculates the paired filenames.\n        Imposes a distance tolerance between paired images\n        \"\"\"", "\n", "tolerance", "=", "self", ".", "pairing_tolerance", "\n", "\n", "all_combos", "=", "set", "(", ")", "\n", "\n", "self", ".", "paired_filenames", "=", "{", "}", "\n", "for", "list_index", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "dataset_path", ")", ")", ",", "desc", "=", "\"pairing_files\"", ")", ":", "\n", "            ", "filename", "=", "self", ".", "dataset_path", "[", "list_index", "]", "\n", "file_number", ",", "_", "=", "self", ".", "_parse_filename", "(", "filename", "[", ":", "-", "8", "]", ")", "\n", "\n", "dataset", "=", "h5py", ".", "File", "(", "filename", ",", "\"r\"", ",", "swmr", "=", "True", ",", "libver", "=", "\"latest\"", ")", "\n", "\n", "for", "idx", "in", "range", "(", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", ")", ":", "\n", "\n", "                ", "proprio_dist", "=", "None", "\n", "while", "proprio_dist", "is", "None", "or", "proprio_dist", "<", "tolerance", ":", "\n", "# Get a random idx, file that is not the same as current", "\n", "                    ", "unpaired_dataset_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "unpaired_filename", ",", "unpaired_idx", ",", "_", "=", "self", ".", "_idx_to_filename_idx", "(", "unpaired_dataset_idx", ")", "\n", "\n", "while", "unpaired_filename", "==", "filename", ":", "\n", "                        ", "unpaired_dataset_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "unpaired_filename", ",", "unpaired_idx", ",", "_", "=", "self", ".", "_idx_to_filename_idx", "(", "unpaired_dataset_idx", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "unpaired_filename", ",", "\"r\"", ",", "swmr", "=", "True", ",", "libver", "=", "\"latest\"", ")", "as", "unpaired_dataset", ":", "\n", "                        ", "proprio_dist", "=", "np", ".", "linalg", ".", "norm", "(", "dataset", "[", "'proprio'", "]", "[", "idx", "]", "[", ":", "3", "]", "-", "unpaired_dataset", "[", "'proprio'", "]", "[", "unpaired_idx", "]", "[", ":", "3", "]", ")", "\n", "\n", "", "", "self", ".", "paired_filenames", "[", "(", "list_index", ",", "idx", ")", "]", "=", "(", "unpaired_filename", ",", "unpaired_idx", ")", "\n", "all_combos", ".", "add", "(", "(", "unpaired_filename", ",", "unpaired_idx", ")", ")", "\n", "\n", "", "dataset", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._idx_to_filename_idx": [[164, 180], ["None"], "methods", ["None"], ["", "", "def", "_idx_to_filename_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Utility function for finding info about a dataset index\n\n        Args:\n            idx (int): Dataset index\n\n        Returns:\n            filename (string): Filename associated with dataset index\n            dataset_index (int): Index of data within that file\n            list_index (int): Index of data in filename list\n        \"\"\"", "\n", "list_index", "=", "idx", "//", "(", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", ")", "\n", "dataset_index", "=", "idx", "%", "(", "self", ".", "episode_length", "-", "self", ".", "n_time_steps", ")", "\n", "filename", "=", "self", ".", "dataset_path", "[", "list_index", "]", "\n", "return", "filename", ",", "dataset_index", ",", "list_index", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._parse_filename": [[181, 191], ["int", "int"], "methods", ["None"], ["", "def", "_parse_filename", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\" Parses the filename to get the file number and filename\"\"\"", "\n", "if", "filename", "[", "-", "2", "]", "==", "\"_\"", ":", "\n", "            ", "file_number", "=", "int", "(", "filename", "[", "-", "1", "]", ")", "\n", "filename", "=", "filename", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "file_number", "=", "int", "(", "filename", "[", "-", "2", ":", "]", ")", "\n", "filename", "=", "filename", "[", ":", "-", "2", "]", "\n", "\n", "", "return", "file_number", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-iprl-lab_multimodal_representation.dataloaders.MultimodalManipulationDataset.MultimodalManipulationDataset._config_checks": [[192, 196], ["ValueError"], "methods", ["None"], ["", "def", "_config_checks", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training_type", "!=", "\"selfsupervised\"", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Training type not supported: {}\"", ".", "format", "(", "self", ".", "training_type", ")", "\n", ")", "\n"]]}