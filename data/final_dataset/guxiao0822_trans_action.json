{"home.repos.pwc.inspect_result.guxiao0822_trans_action.None.main.save_model": [[49, 66], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "print", "model.state_dict", "os.path.join", "os.path.join", "os.path.join", "model.state_dict", "model.state_dict", "model.state_dict"], "function", ["None"], ["def", "save_model", "(", "model", ",", "epoch", ",", "is_best_v", "=", "False", ",", "is_best_n", "=", "False", ",", "is_best_a", "=", "False", ")", ":", "\n", "    ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "path_to_models", "+", "'.pth.tar'", ")", "\n", "if", "is_best_v", ":", "\n", "        ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "epoch", "}", ",", "join", "(", "\n", "path_to_models", "+", "'_best_verb.pth.tar'", ")", ")", "\n", "print", "(", "'save best verb model'", ")", "\n", "\n", "", "if", "is_best_n", ":", "\n", "        ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "epoch", "}", ",", "join", "(", "\n", "path_to_models", "+", "'_best_noun.pth.tar'", ")", ")", "\n", "print", "(", "'save best noun model'", ")", "\n", "\n", "", "if", "is_best_a", ":", "\n", "        ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "epoch", "}", ",", "join", "(", "\n", "path_to_models", "+", "'_best_action.pth.tar'", ")", ")", "\n", "print", "(", "'save best action model'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.main.log": [[68, 81], ["print", "print", "print", "print", "loss_meter.value", "accuracy_meter.value"], "function", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.value", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.value"], ["", "", "def", "log", "(", "mode", ",", "epoch", ",", "loss_meter", ",", "accuracy_meter", ",", "best_perf", "=", "None", ",", "green", "=", "False", ")", ":", "\n", "    ", "if", "green", ":", "\n", "        ", "print", "(", "'\\033[92m'", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "print", "(", "\n", "f\"[{mode}] Epoch: {epoch:0.2f}. \"", "\n", "f\"Loss: {loss_meter.value():.2f}. \"", "\n", "f\"Accuracy: {accuracy_meter.value():.2f}% \"", ",", "end", "=", "\"\"", ")", "\n", "\n", "if", "best_perf", ":", "\n", "        ", "print", "(", "f\"[best: {best_perf:0.2f}]%\"", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "print", "(", "'\\033[0m'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__init__": [[232, 295], ["dataset.SequenceDataset.__populate_lists", "isinstance", "pandas.read_csv", "pandas.read_csv", "lmdb.open", "lmdb.open"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__populate_lists"], ["    ", "def", "__init__", "(", "self", ",", "path_to_lmdb", ",", "path_to_csv", ",", "label_type", "=", "'action'", ",", "\n", "time_step", "=", "0.25", ",", "sequence_length", "=", "14", ",", "fps", "=", "30", ",", "\n", "img_tmpl", "=", "\"frame_{:010d}.jpg\"", ",", "\n", "transform", "=", "None", ",", "\n", "challenge", "=", "False", ",", "\n", "past_features", "=", "True", ",", "\n", "action_samples", "=", "None", ",", "\n", "debug", "=", "False", ",", "\n", "random_shift", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            Inputs:\n                path_to_lmdb: path to the folder containing the LMDB dataset\n                path_to_csv: path to training/validation csv\n                label_type: which label to return (verb, noun, or action)\n                time_step: in seconds\n                sequence_length: in time steps\n                fps: framerate\n                img_tmpl: image template to load the features\n                tranform: transformation to apply to each sample\n                challenge: allows to load csvs containing only time-stamp for the challenge\n                past_features: if past features should be returned\n                action_samples: number of frames to be evenly sampled from each action\n        \"\"\"", "\n", "\n", "# read the csv file", "\n", "if", "challenge", ":", "# this is for the test image", "\n", "            ", "self", ".", "annotations", "=", "pd", ".", "read_csv", "(", "path_to_csv", ",", "header", "=", "None", ",", "names", "=", "[", "'video'", ",", "'start'", ",", "'end'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "annotations", "=", "pd", ".", "read_csv", "(", "path_to_csv", ",", "header", "=", "None", ",", "\n", "names", "=", "[", "'video'", ",", "'start'", ",", "'end'", ",", "'verb'", ",", "'noun'", ",", "'action'", "]", ")", "\n", "", "if", "debug", "is", "True", ":", "\n", "            ", "self", ".", "annotations", "=", "self", ".", "annotations", "[", ":", "1000", "]", "\n", "", "self", ".", "challenge", "=", "challenge", "\n", "self", ".", "path_to_lmdb", "=", "path_to_lmdb", "\n", "self", ".", "time_step", "=", "time_step", "\n", "self", ".", "past_features", "=", "past_features", "\n", "self", ".", "action_samples", "=", "action_samples", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "label_type", "=", "label_type", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "img_tmpl", "=", "img_tmpl", "\n", "self", ".", "action_samples", "=", "action_samples", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "\n", "# initialize some lists", "\n", "self", ".", "ids", "=", "[", "]", "# action ids (the index of the list)", "\n", "self", ".", "discarded_ids", "=", "[", "]", "# list of ids discarded (e.g., if there were no enough frames before the beginning of the action", "\n", "self", ".", "discarded_labels", "=", "[", "]", "# list of labels discarded (e.g., if there were no enough frames before the beginning of the action", "\n", "self", ".", "past_frames", "=", "[", "]", "# names of frames sampled before each action we sampled 14 epochs", "\n", "self", ".", "action_frames", "=", "[", "]", "# names of frames sampled from each action", "\n", "self", ".", "labels", "=", "[", "]", "# labels of each action", "\n", "self", ".", "videos", "=", "[", "]", "\n", "\n", "# populate them", "\n", "self", ".", "__populate_lists", "(", ")", "\n", "\n", "# if a list to datasets has been provided, load all of them", "\n", "if", "isinstance", "(", "self", ".", "path_to_lmdb", ",", "list", ")", ":", "\n", "            ", "self", ".", "env", "=", "[", "lmdb", ".", "open", "(", "l", ",", "readonly", "=", "True", ",", "lock", "=", "False", ")", "for", "l", "in", "self", ".", "path_to_lmdb", "]", "\n", "", "else", ":", "\n", "# otherwise, just load the single LMDB dataset", "\n", "            ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "self", ".", "path_to_lmdb", ",", "readonly", "=", "True", ",", "lock", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__get_frames": [[296, 300], ["numpy.array", "list", "map", "dataset.SequenceDataset.img_tmpl.format"], "methods", ["None"], ["", "", "def", "__get_frames", "(", "self", ",", "frames", ",", "video", ")", ":", "\n", "        ", "\"\"\" format file names using the image template \"\"\"", "\n", "frames", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "x", ":", "video", "+", "\"_\"", "+", "self", ".", "img_tmpl", ".", "format", "(", "x", ")", ",", "frames", ")", ")", ")", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__populate_lists": [[301, 345], ["tqdm.tqdm.tqdm", "dataset.SequenceDataset.annotations.iterrows", "dataset.SequenceDataset.__sample_frames_past", "len", "dataset.SequenceDataset.min", "dataset.SequenceDataset.past_frames.append", "dataset.SequenceDataset.ids.append", "isinstance", "dataset.SequenceDataset.discarded_ids.append", "isinstance", "numpy.linspace", "dataset.SequenceDataset.__get_frames", "dataset.SequenceDataset.action_frames.append", "dataset.SequenceDataset.labels.append", "dataset.SequenceDataset.labels.append", "dataset.SequenceDataset.labels.append", "dataset.SequenceDataset.labels.append", "dataset.SequenceDataset.__get_frames", "dataset.SequenceDataset.discarded_labels.append", "dataset.SequenceDataset.discarded_labels.append", "dataset.SequenceDataset.discarded_labels.append", "dataset.SequenceDataset.discarded_labels.append", "a[].values.astype", "a[].values.astype"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__sample_frames_past", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__get_frames", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__get_frames"], ["", "def", "__populate_lists", "(", "self", ")", ":", "\n", "        ", "\"\"\" Samples a sequence for each action and populates the lists. \"\"\"", "\n", "for", "_", ",", "a", "in", "tqdm", "(", "self", ".", "annotations", ".", "iterrows", "(", ")", ",", "'Populating Dataset'", ",", "total", "=", "len", "(", "self", ".", "annotations", ")", ")", ":", "\n", "\n", "# sample frames before the beginning of the action", "\n", "            ", "frames", "=", "self", ".", "__sample_frames_past", "(", "a", ".", "start", ")", "\n", "\n", "if", "self", ".", "action_samples", ":", "\n", "# sample frames from the action", "\n", "# to sample n frames, we first sample n+1 frames with linspace, then discard the first one", "\n", "                ", "action_frames", "=", "np", ".", "linspace", "(", "a", ".", "start", ",", "a", ".", "end", ",", "self", ".", "action_samples", "+", "1", ",", "dtype", "=", "int", ")", "[", "1", ":", "]", "\n", "\n", "# check if there were enough frames before the beginning of the action", "\n", "", "if", "frames", ".", "min", "(", ")", ">=", "1", ":", "# if the smaller frame is at least 1, the sequence is valid", "\n", "                ", "self", ".", "past_frames", ".", "append", "(", "self", ".", "__get_frames", "(", "frames", ",", "a", ".", "video", ")", ")", "\n", "self", ".", "ids", ".", "append", "(", "a", ".", "name", ")", "\n", "# handle whether a list of labels is required (e.g., [verb, noun]), rather than a single action", "\n", "if", "isinstance", "(", "self", ".", "label_type", ",", "list", ")", ":", "\n", "                    ", "if", "self", ".", "challenge", ":", "# if sampling for the challenge, there are no labels, just add -1", "\n", "                        ", "self", ".", "labels", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "# otherwise get the required labels", "\n", "                        ", "self", ".", "labels", ".", "append", "(", "a", "[", "self", ".", "label_type", "]", ".", "values", ".", "astype", "(", "int", ")", ")", "\n", "", "", "else", ":", "# single label version", "\n", "                    ", "if", "self", ".", "challenge", ":", "\n", "                        ", "self", ".", "labels", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "labels", ".", "append", "(", "a", "[", "self", ".", "label_type", "]", ")", "\n", "", "", "if", "self", ".", "action_samples", ":", "\n", "                    ", "self", ".", "action_frames", ".", "append", "(", "self", ".", "__get_frames", "(", "action_frames", ",", "a", ".", "video", ")", ")", "\n", "", "", "else", ":", "\n", "# if the sequence is invalid, do nothing, but add the id to the discarded_ids list", "\n", "                ", "self", ".", "discarded_ids", ".", "append", "(", "a", ".", "name", ")", "\n", "if", "isinstance", "(", "self", ".", "label_type", ",", "list", ")", ":", "\n", "                    ", "if", "self", ".", "challenge", ":", "# if sampling for the challenge, there are no labels, just add -1", "\n", "                        ", "self", ".", "discarded_labels", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "# otherwise get the required labels", "\n", "                        ", "self", ".", "discarded_labels", ".", "append", "(", "a", "[", "self", ".", "label_type", "]", ".", "values", ".", "astype", "(", "int", ")", ")", "\n", "", "", "else", ":", "# single label version", "\n", "                    ", "if", "self", ".", "challenge", ":", "\n", "                        ", "self", ".", "discarded_labels", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "discarded_labels", ".", "append", "(", "a", "[", "self", ".", "label_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__sample_frames_past": [[346, 378], ["numpy.floor().astype", "numpy.arange", "numpy.random.choice", "numpy.floor().astype.max", "frames[].min", "numpy.floor", "numpy.arange", "numpy.floor"], "methods", ["None"], ["", "", "", "", "", "def", "__sample_frames_past", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Samples frames before the beginning of the action \"point\" \"\"\"", "\n", "# generate the relative timestamps, depending on the requested sequence_length", "\n", "# e.g., 2.  , 1.75, 1.5 , 1.25, 1.  , 0.75, 0.5 , 0.25 (actually from 3.5s to 1.s)", "\n", "# in this case \"2\" means, sample 2s before the beginning of the action", "\n", "time_stamps", "=", "np", ".", "arange", "(", "self", ".", "time_step", ",", "self", ".", "time_step", "*", "(", "self", ".", "sequence_length", "+", "1", ")", ",", "self", ".", "time_step", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "# compute the time stamp corresponding to the beginning of the action", "\n", "end_time_stamp", "=", "point", "/", "self", ".", "fps", "\n", "\n", "# subtract time stamps to the timestamp of the last frame", "\n", "time_stamps", "=", "end_time_stamp", "-", "time_stamps", "\n", "\n", "# convert timestamps to frames", "\n", "# use floor to be sure to consider the last frame before the timestamp (important for anticipation!)", "\n", "# and never sample any frame after that time stamp", "\n", "frames", "=", "np", ".", "floor", "(", "time_stamps", "*", "self", ".", "fps", ")", ".", "astype", "(", "int", ")", "\n", "\n", "if", "self", ".", "random_shift", ":", "\n", "## add random noise", "\n", "            ", "shift_unit", "=", "(", "np", ".", "floor", "(", "self", ".", "time_step", "*", "self", ".", "fps", "/", "2", ")", "-", "1", ")", ".", "astype", "(", "int", ")", "\n", "random_shift", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "-", "shift_unit", ",", "shift_unit", ")", ",", "frames", ".", "shape", ")", "\n", "frames", "+=", "random_shift", "\n", "\n", "# sometimes there are not enough frames before the beginning of the action", "\n", "# in this case, we just pad the sequence with the first frame", "\n", "# this is done by replacing all frames smaller than 1", "\n", "# with the first frame of the sequence", "\n", "", "if", "frames", ".", "max", "(", ")", ">=", "1", ":", "\n", "            ", "frames", "[", "frames", "<", "1", "]", "=", "frames", "[", "frames", ">=", "1", "]", ".", "min", "(", ")", "\n", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__len__": [[379, 381], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.SequenceDataset.__getitem__": [[382, 410], ["dataset.read_data", "dataset.read_data"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.read_data", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.read_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" sample a given sequence \"\"\"", "\n", "# get past frames", "\n", "past_frames", "=", "self", ".", "past_frames", "[", "index", "]", "\n", "\n", "if", "self", ".", "action_samples", ":", "\n", "# get action frames", "\n", "            ", "action_frames", "=", "self", ".", "action_frames", "[", "index", "]", "\n", "\n", "# return a dictionary containing the id of the current sequence", "\n", "# this is useful to produce the jsons for the challenge", "\n", "", "out", "=", "{", "'id'", ":", "self", ".", "ids", "[", "index", "]", "}", "\n", "\n", "if", "self", ".", "past_features", ":", "\n", "# read representations for past frames", "\n", "            ", "out", "[", "'past_features'", "]", "=", "read_data", "(", "past_frames", ",", "self", ".", "env", ",", "self", ".", "transform", ")", "\n", "\n", "# get the label of the current sequence", "\n", "", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "out", "[", "'label'", "]", "=", "label", "\n", "\n", "if", "self", ".", "action_samples", ":", "\n", "# read representations for the action samples", "\n", "            ", "out", "[", "'action_features'", "]", "=", "read_data", "(", "action_frames", ",", "self", ".", "env", ",", "self", ".", "transform", ")", "\n", "\n", "", "out", "[", "'index'", "]", "=", "index", "+", "0.0", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.read_representations": [[11, 36], ["numpy.array", "numpy.frombuffer", "tran.append", "tran", "env.begin", "e.get", "print", "numpy.frombuffer", "f.strip().encode", "f.strip"], "function", ["None"], ["def", "read_representations", "(", "frames", ",", "env", ",", "tran", "=", "None", ",", ")", ":", "\n", "    ", "\"\"\" Reads a set of representations, given their frame names and an LMDB environment.\n    Applies a transformation to the features if provided\"\"\"", "\n", "features", "=", "[", "]", "\n", "# for each frame", "\n", "for", "f", "in", "frames", ":", "\n", "# read the current frame", "\n", "        ", "with", "env", ".", "begin", "(", ")", "as", "e", ":", "\n", "            ", "dd", "=", "e", ".", "get", "(", "f", ".", "strip", "(", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "", "if", "dd", "is", "None", ":", "\n", "            ", "print", "(", "f", ")", "\n", "# convert to numpy array", "\n", "\n", "", "data", "=", "np", ".", "frombuffer", "(", "dd", ",", "'float32'", ")", "\n", "if", "data", ".", "shape", "[", "0", "]", "==", "32", ":", "\n", "            ", "data", "=", "np", ".", "frombuffer", "(", "dd", ",", "'float64'", ")", "\n", "\n", "# append to list", "\n", "", "features", ".", "append", "(", "data", ")", "\n", "# convert list to numpy array", "\n", "", "features", "=", "np", ".", "array", "(", "features", ")", "\n", "# apply transform if provided", "\n", "if", "tran", ":", "\n", "        ", "features", "=", "tran", "(", "features", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.read_data": [[37, 48], ["isinstance", "dataset.read_representations", "dataset.read_representations"], "function", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.read_representations", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.dataset.read_representations"], ["", "def", "read_data", "(", "frames", ",", "env", ",", "tran", "=", "None", ")", ":", "\n", "    ", "\"\"\"A wrapper form read_representations to handle loading from more environments.\n    This is used for multimodal data loading (e.g., RGB + Flow)\"\"\"", "\n", "# if env is a list", "\n", "if", "isinstance", "(", "env", ",", "list", ")", ":", "\n", "# read the representations from all environments", "\n", "        ", "l", "=", "[", "read_representations", "(", "frames", ",", "e", ",", "tran", ")", "for", "e", "in", "env", "]", "\n", "return", "l", "\n", "", "else", ":", "\n", "# otherwise, just read the representations", "\n", "        ", "return", "read_representations", "(", "frames", ",", "env", ",", "tran", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.SoftmaxEQL.__init__": [[37, 41], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "loss.get_eql_class_weights"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.get_eql_class_weights"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "lambda_", "=", "5e-3", ",", "ignore_prob", "=", "0.9", ",", ")", ":", "## based on the default setting of the paper", "\n", "        ", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "ignore_prob", "=", "ignore_prob", "\n", "self", ".", "class_weight", "=", "torch", ".", "Tensor", "(", "get_eql_class_weights", "(", "self", ".", "lambda_", ",", "labels", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.SoftmaxEQL.__call__": [[42, 53], ["F.cross_entropy.SoftmaxEQL.class_weight.view().repeat", "target.new_zeros().float", "loss.replace_masked_values", "torch.cross_entropy", "torch.cross_entropy", "F.cross_entropy.SoftmaxEQL.class_weight.view", "target.new_zeros", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.replace_masked_values"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "N", ",", "C", "=", "input", ".", "shape", "\n", "not_ignored", "=", "self", ".", "class_weight", ".", "view", "(", "1", ",", "C", ")", ".", "repeat", "(", "N", ",", "1", ")", "\n", "over_prob", "=", "(", "torch", ".", "rand", "(", "input", ".", "shape", ")", ".", "cuda", "(", ")", ">", "self", ".", "ignore_prob", ")", ".", "float", "(", ")", "\n", "is_gt", "=", "target", ".", "new_zeros", "(", "(", "N", ",", "C", ")", ")", ".", "float", "(", ")", "\n", "is_gt", "[", "torch", ".", "arange", "(", "N", ")", ",", "target", "]", "=", "1", "\n", "\n", "weights", "=", "(", "(", "not_ignored", "+", "over_prob", "+", "is_gt", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "input", "=", "replace_masked_values", "(", "input", ",", "weights", ",", "-", "1e7", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.SoftmaxEQL_Action.__init__": [[55, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "w_v", ",", "w_n", ",", "index_v", ",", "index_n", ",", "lambda_", "=", "5e-3", ",", "ignore_prob", "=", "0.9", ",", ")", ":", "## based on the default setting of the paper", "\n", "        ", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "ignore_prob", "=", "ignore_prob", "\n", "self", ".", "class_weight", "=", "w_v", "[", "index_v", "]", "*", "w_n", "[", "index_n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.SoftmaxEQL_Action.__call__": [[60, 71], ["F.cross_entropy.SoftmaxEQL_Action.class_weight.view().repeat", "target.new_zeros().float", "loss.replace_masked_values", "torch.cross_entropy", "torch.cross_entropy", "F.cross_entropy.SoftmaxEQL_Action.class_weight.view", "target.new_zeros", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.replace_masked_values"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "N", ",", "C", "=", "input", ".", "shape", "\n", "not_ignored", "=", "self", ".", "class_weight", ".", "view", "(", "1", ",", "C", ")", ".", "repeat", "(", "N", ",", "1", ")", "\n", "over_prob", "=", "(", "torch", ".", "rand", "(", "input", ".", "shape", ")", ".", "cuda", "(", ")", ">", "self", ".", "ignore_prob", ")", ".", "float", "(", ")", "\n", "is_gt", "=", "target", ".", "new_zeros", "(", "(", "N", ",", "C", ")", ")", ".", "float", "(", ")", "\n", "is_gt", "[", "torch", ".", "arange", "(", "N", ")", ",", "target", "]", "=", "1", "\n", "\n", "weights", "=", "(", "(", "not_ignored", "+", "over_prob", "+", "is_gt", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "input", "=", "replace_masked_values", "(", "input", ",", "weights", ",", "-", "1e7", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.get_ratio": [[8, 14], ["numpy.zeros", "collections.Counter", "enumerate", "sorted", "max", "collections.Counter.items", "len"], "function", ["None"], ["def", "get_ratio", "(", "labels", ")", ":", "\n", "    ", "class_weights", "=", "np", ".", "zeros", "(", "max", "(", "labels", ")", "+", "1", ")", "\n", "label_count", "=", "Counter", "(", "labels", ")", "\n", "for", "idx", ",", "(", "label", ",", "count", ")", "in", "enumerate", "(", "sorted", "(", "label_count", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", ")", ":", "\n", "        ", "class_weights", "[", "label", "]", "=", "count", "/", "len", "(", "labels", ")", "\n", "", "return", "class_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.get_eql_class_weights": [[15, 27], ["numpy.zeros", "collections.Counter", "enumerate", "sorted", "max", "collections.Counter.items", "len"], "function", ["None"], ["", "def", "get_eql_class_weights", "(", "lambda_", ",", "labels", ")", ":", "\n", "    ", "class_weights", "=", "np", ".", "zeros", "(", "max", "(", "labels", ")", "+", "1", ")", "\n", "# labels = []", "\n", "# with open('datasets/imagenet/annotations/ImageNet_LT_train.txt', 'r') as f:", "\n", "#     for lidx, line in enumerate(f):", "\n", "#         _, label = line.split()", "\n", "#         labels.append(int(label))", "\n", "label_count", "=", "Counter", "(", "labels", ")", "\n", "for", "idx", ",", "(", "label", ",", "count", ")", "in", "enumerate", "(", "sorted", "(", "label_count", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", ")", ":", "\n", "        ", "class_weights", "[", "label", "]", "=", "1", "if", "count", ">", "lambda_", "*", "len", "(", "labels", ")", "else", "0", "\n", "#print('idx: {}, cls: {} img: {}, weight: {}'.format(idx, label, count, class_weights[label]))", "\n", "", "return", "class_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.loss.replace_masked_values": [[29, 34], ["tensor.dim", "mask.dim"], "function", ["None"], ["", "def", "replace_masked_values", "(", "tensor", ",", "mask", ",", "replace_with", ")", ":", "\n", "    ", "assert", "tensor", ".", "dim", "(", ")", "==", "mask", ".", "dim", "(", ")", ",", "'{} vs {}'", ".", "format", "(", "tensor", ".", "shape", ",", "mask", ".", "shape", ")", "\n", "one_minus_mask", "=", "1", "-", "mask", "\n", "values_to_add", "=", "replace_with", "*", "one_minus_mask", "\n", "return", "tensor", "*", "mask", "+", "values_to_add", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.model.PositionalEncoding.__init__": [[9, 19], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "model.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.__init__", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.log"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.model.PositionalEncoding.forward": [[20, 23], ["model.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.model.transformer_fusion.__init__": [[25, 106], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "model.PositionalEncoding", "model.PositionalEncoding", "model.PositionalEncoding", "model.PositionalEncoding", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seq_len", ",", "num_class_verb", ",", "num_class_noun", ",", "num_class_action", ",", "feat_in", ",", "hidden", ",", "dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "transformer_fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm_11", "=", "nn", ".", "LayerNorm", "(", "feat_in", ")", "\n", "self", ".", "layer_norm_12", "=", "nn", ".", "LayerNorm", "(", "feat_in", ")", "\n", "self", ".", "layer_norm_13", "=", "nn", ".", "LayerNorm", "(", "352", ")", "\n", "\n", "self", ".", "pos_encoder", "=", "PositionalEncoding", "(", "d_model", "=", "feat_in", ",", "max_len", "=", "seq_len", ")", "\n", "self", ".", "pos_encoder_2", "=", "PositionalEncoding", "(", "d_model", "=", "feat_in", "*", "2", "+", "352", ",", "max_len", "=", "seq_len", ")", "\n", "self", ".", "pos_encoder_3", "=", "PositionalEncoding", "(", "d_model", "=", "(", "feat_in", "*", "2", "+", "352", ")", "*", "2", ",", "max_len", "=", "seq_len", ")", "\n", "\n", "self", ".", "pos_encoder_obj", "=", "PositionalEncoding", "(", "d_model", "=", "352", ",", "max_len", "=", "seq_len", ")", "\n", "\n", "encoder_layers", "=", "TransformerEncoderLayer", "(", "d_model", "=", "feat_in", ",", "nhead", "=", "8", ",", "dim_feedforward", "=", "hidden", ",", "\n", "dropout", "=", "dropout", ",", ")", "\n", "encoder_layers_obj", "=", "TransformerEncoderLayer", "(", "d_model", "=", "352", ",", "nhead", "=", "8", ",", "dim_feedforward", "=", "hidden", ",", "\n", "dropout", "=", "dropout", ",", ")", "\n", "encoder_layers_2", "=", "TransformerEncoderLayer", "(", "d_model", "=", "feat_in", "*", "2", "+", "352", ",", "nhead", "=", "8", ",", "dim_feedforward", "=", "feat_in", "*", "2", "+", "352", ",", "\n", "dropout", "=", "dropout", ",", ")", "\n", "encoder_layers_3", "=", "TransformerEncoderLayer", "(", "d_model", "=", "(", "feat_in", "*", "2", "+", "352", ")", "*", "2", ",", "nhead", "=", "8", ",", "\n", "dropout", "=", "dropout", ",", ")", "\n", "\n", "# transformer for rgb", "\n", "self", ".", "transformer_1a_v", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# transformer for flow", "\n", "self", ".", "transformer_1b_v", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# # transformer for hidden", "\n", "self", ".", "transformer_1c_v", "=", "TransformerEncoder", "(", "encoder_layers_obj", ",", "1", ")", "\n", "# transformer for fusion", "\n", "self", ".", "transformer_1f_v", "=", "TransformerEncoder", "(", "encoder_layers_2", ",", "1", ")", "\n", "\n", "# transformer for rgb", "\n", "self", ".", "transformer_1a_n", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# transformer for flow", "\n", "self", ".", "transformer_1b_n", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# # transformer for hidden", "\n", "self", ".", "transformer_1c_n", "=", "TransformerEncoder", "(", "encoder_layers_obj", ",", "1", ")", "\n", "# transformer for fusion", "\n", "self", ".", "transformer_1f_n", "=", "TransformerEncoder", "(", "encoder_layers_2", ",", "1", ")", "\n", "\n", "# transformer for rgb", "\n", "self", ".", "transformer_2a_v", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# transformer for flow", "\n", "self", ".", "transformer_2b_v", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# # transformer for hidden", "\n", "self", ".", "transformer_2c_v", "=", "TransformerEncoder", "(", "encoder_layers_obj", ",", "1", ")", "\n", "# transformer for fusion", "\n", "self", ".", "transformer_2f_v", "=", "TransformerEncoder", "(", "encoder_layers_2", ",", "1", ")", "\n", "\n", "# transformer for rgb", "\n", "self", ".", "transformer_2a_n", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# transformer for flow", "\n", "self", ".", "transformer_2b_n", "=", "TransformerEncoder", "(", "encoder_layers", ",", "1", ")", "\n", "# # transformer for hidden", "\n", "self", ".", "transformer_2c_n", "=", "TransformerEncoder", "(", "encoder_layers_obj", ",", "1", ")", "\n", "# transformer for fusion", "\n", "self", ".", "transformer_2f_n", "=", "TransformerEncoder", "(", "encoder_layers_2", ",", "1", ")", "\n", "\n", "# transformer for first block", "\n", "self", ".", "transformer_1_cross", "=", "TransformerEncoder", "(", "encoder_layers_2", ",", "1", ")", "\n", "self", ".", "transformer_2_cross", "=", "TransformerEncoder", "(", "encoder_layers_2", ",", "1", ")", "\n", "self", ".", "transformer_3_cross", "=", "TransformerEncoder", "(", "encoder_layers_3", ",", "1", ")", "\n", "self", ".", "transformer_4_cross", "=", "TransformerEncoder", "(", "encoder_layers_3", ",", "1", ")", "\n", "\n", "\n", "self", ".", "classifier_verb", "=", "nn", ".", "Linear", "(", "hidden", "*", "2", "+", "352", ",", "num_class_verb", ")", "\n", "self", ".", "classifier_noun", "=", "nn", ".", "Linear", "(", "hidden", "*", "2", "+", "352", ",", "num_class_noun", ")", "\n", "#self.classifier_action_fusion = nn.Linear(hidden, num_class_action)", "\n", "self", ".", "classifier_action", "=", "nn", ".", "Linear", "(", "(", "hidden", "*", "2", "+", "352", ")", "*", "2", ",", "num_class_action", ")", "\n", "\n", "self", ".", "dropout_verb", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_noun", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_action", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "classifier_verb_s1", "=", "nn", ".", "Linear", "(", "hidden", "*", "2", "+", "352", ",", "num_class_verb", ")", "\n", "self", ".", "classifier_noun_s1", "=", "nn", ".", "Linear", "(", "hidden", "*", "2", "+", "352", ",", "num_class_noun", ")", "\n", "#self.classifier_action_fusion = nn.Linear(hidden, num_class_action)", "\n", "self", ".", "classifier_action_s1", "=", "nn", ".", "Linear", "(", "(", "hidden", "*", "2", "+", "352", ")", "*", "2", ",", "num_class_action", ")", "\n", "\n", "self", ".", "dropout_verb_s1", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_noun_s1", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_action_s1", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.model.transformer_fusion.forward": [[107, 220], ["model.transformer_fusion.permute", "model.transformer_fusion.permute", "model.transformer_fusion.permute", "model.transformer_fusion.layer_norm_11", "model.transformer_fusion.layer_norm_12", "model.transformer_fusion.layer_norm_13", "model.transformer_fusion.pos_encoder", "model.transformer_fusion.pos_encoder", "model.transformer_fusion.pos_encoder_obj", "model.transformer_fusion.transformer_1a_v", "model.transformer_fusion.transformer_1b_v", "model.transformer_fusion.transformer_1c_v", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.transformer_1f_v", "model.transformer_fusion.transformer_1a_n", "model.transformer_fusion.transformer_1b_n", "model.transformer_fusion.transformer_1c_n", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.transformer_1f_n", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.transformer_fusion.transformer_1_cross", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.transformer_fusion.transformer_3_cross", "model.transformer_fusion.pos_encoder", "model.transformer_fusion.pos_encoder", "model.transformer_fusion.pos_encoder_obj", "model.transformer_fusion.transformer_2a_v", "model.transformer_fusion.transformer_2b_v", "model.transformer_fusion.transformer_2c_v", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.transformer_2f_v", "model.transformer_fusion.pos_encoder", "model.transformer_fusion.pos_encoder", "model.transformer_fusion.pos_encoder_obj", "model.transformer_fusion.transformer_2a_n", "model.transformer_fusion.transformer_2b_n", "model.transformer_fusion.transformer_2c_n", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.transformer_2f_n", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.transformer_fusion.transformer_2_cross", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.transformer_fusion.transformer_4_cross", "model.transformer_fusion.classifier_verb().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.transformer_fusion.classifier_noun().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.transformer_fusion.classifier_action().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.transformer_fusion.classifier_verb().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.transformer_fusion.classifier_noun().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.transformer_fusion.classifier_action().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.transformer_fusion.pos_encoder_3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.transformer_fusion.pos_encoder_3", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.pos_encoder_2", "model.transformer_fusion.classifier_verb", "model.transformer_fusion.classifier_noun", "model.transformer_fusion.classifier_action", "model.transformer_fusion.classifier_verb", "model.transformer_fusion.classifier_noun", "model.transformer_fusion.classifier_action", "model.transformer_fusion.dropout_verb_s1().view", "model.transformer_fusion.dropout_noun_s1().view", "model.transformer_fusion.dropout_action_s1().view", "model.transformer_fusion.dropout_verb().view", "model.transformer_fusion.dropout_noun().view", "model.transformer_fusion.dropout_action().view", "model.transformer_fusion.dropout_verb_s1", "model.transformer_fusion.dropout_noun_s1", "model.transformer_fusion.dropout_action_s1", "model.transformer_fusion.dropout_verb", "model.transformer_fusion.dropout_noun", "model.transformer_fusion.dropout_action"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "x3", ")", ":", "\n", "        ", "B", ",", "L", ",", "_", "=", "x1", ".", "shape", "\n", "\n", "x1", "=", "x1", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "x2", "=", "x2", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "x3", "=", "x3", ".", "permute", "(", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "x1", "=", "self", ".", "layer_norm_11", "(", "x1", ")", "\n", "x2", "=", "self", ".", "layer_norm_12", "(", "x2", ")", "\n", "x3", "=", "self", ".", "layer_norm_13", "(", "x3", ")", "\n", "\n", "######### Block 1 ##########", "\n", "x1", "=", "self", ".", "pos_encoder", "(", "x1", ")", "\n", "x2", "=", "self", ".", "pos_encoder", "(", "x2", ")", "\n", "x3", "=", "self", ".", "pos_encoder_obj", "(", "x3", ")", "\n", "\n", "# v branch", "\n", "x1_v", "=", "self", ".", "transformer_1a_v", "(", "x1", ")", "\n", "x2_v", "=", "self", ".", "transformer_1b_v", "(", "x2", ")", "\n", "x3_v", "=", "self", ".", "transformer_1c_v", "(", "x3", ")", "\n", "\n", "xf_v", "=", "self", ".", "pos_encoder_2", "(", "torch", ".", "cat", "(", "(", "x1_v", ",", "x2_v", ",", "x3_v", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "#xf_v = self.pos_embedding_3 + torch.cat((x1_v, x2_v, x3_v), dim=0)  #  3*L * B * C", "\n", "xf_v", "=", "self", ".", "transformer_1f_v", "(", "xf_v", ")", "\n", "xf_v_s1", "=", "xf_v", "\n", "\n", "# n branch", "\n", "x1_n", "=", "self", ".", "transformer_1a_n", "(", "x1", ")", "\n", "x2_n", "=", "self", ".", "transformer_1b_n", "(", "x2", ")", "\n", "x3_n", "=", "self", ".", "transformer_1c_n", "(", "x3", ")", "\n", "#xf_n = self.pos_embedding_3 + torch.cat((x1_n, x2_n, x3_n), dim=0)", "\n", "xf_n", "=", "self", ".", "pos_encoder_2", "(", "torch", ".", "cat", "(", "(", "x1_n", ",", "x2_n", ",", "x3_n", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "xf_n", "=", "self", ".", "transformer_1f_n", "(", "xf_n", ")", "\n", "xf_n_s1", "=", "xf_n", "\n", "\n", "# cross branch", "\n", "xf_vn", "=", "(", "torch", ".", "cat", "(", "(", "self", ".", "pos_encoder_2", "(", "xf_v", ")", ",", "self", ".", "pos_encoder_2", "(", "xf_n", ")", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "# print(xf_n.shape)", "\n", "# print(xf_vn.shape)", "\n", "xf_vn", "=", "self", ".", "transformer_1_cross", "(", "xf_vn", ")", "# 2*L * B * 2*C", "\n", "\n", "x1_v", "=", "xf_vn", "[", ":", "L", ",", ":", ",", ":", "1024", "]", "\n", "x2_v", "=", "xf_vn", "[", ":", "L", ",", ":", ",", "1024", ":", "1024", "*", "2", "]", "\n", "x3_v", "=", "xf_vn", "[", ":", "L", ",", ":", ",", "1024", "*", "2", ":", "]", "\n", "\n", "x1_n", "=", "xf_vn", "[", "L", ":", ",", ":", ",", ":", "1024", "]", "\n", "x2_n", "=", "xf_vn", "[", "L", ":", ",", ":", ",", "1024", ":", "1024", "*", "2", "]", "\n", "x3_n", "=", "xf_vn", "[", "L", ":", ",", ":", ",", "1024", "*", "2", ":", "]", "\n", "\n", "xf_vn_s1", "=", "torch", ".", "cat", "(", "(", "xf_vn", "[", ":", "L", ",", ":", ",", ":", "]", ",", "xf_vn", "[", "L", ":", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "xf_vn_s1", "=", "self", ".", "transformer_3_cross", "(", "self", ".", "pos_encoder_3", "(", "xf_vn_s1", ")", ")", "\n", "\n", "########## Block 2 ##########", "\n", "# v branch", "\n", "#x1_v = self.layer_norm_21_v(x1_v)", "\n", "#x2_v = self.layer_norm_22_v(x2_v)", "\n", "#x3_v = self.layer_norm_23_v(x3_v)", "\n", "\n", "x1_v", "=", "self", ".", "pos_encoder", "(", "x1_v", ")", "\n", "x2_v", "=", "self", ".", "pos_encoder", "(", "x2_v", ")", "\n", "x3_v", "=", "self", ".", "pos_encoder_obj", "(", "x3_v", ")", "\n", "\n", "x1_v", "=", "self", ".", "transformer_2a_v", "(", "x1_v", ")", "\n", "x2_v", "=", "self", ".", "transformer_2b_v", "(", "x2_v", ")", "\n", "x3_v", "=", "self", ".", "transformer_2c_v", "(", "x3_v", ")", "\n", "\n", "xf_v", "=", "self", ".", "pos_encoder_2", "(", "torch", ".", "cat", "(", "(", "x1_v", ",", "x2_v", ",", "x3_v", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "xf_v", "=", "self", ".", "transformer_2f_v", "(", "xf_v", ")", "\n", "\n", "# n branch", "\n", "#x1_n = self.layer_norm_21_n(x1_n)", "\n", "#x2_n = self.layer_norm_22_n(x2_n)", "\n", "#x3_n = self.layer_norm_23_n(x3_n)", "\n", "\n", "x1_n", "=", "self", ".", "pos_encoder", "(", "x1_n", ")", "\n", "x2_n", "=", "self", ".", "pos_encoder", "(", "x2_n", ")", "\n", "x3_n", "=", "self", ".", "pos_encoder_obj", "(", "x3_n", ")", "\n", "\n", "x1_n", "=", "self", ".", "transformer_2a_n", "(", "x1_n", ")", "\n", "x2_n", "=", "self", ".", "transformer_2b_n", "(", "x2_n", ")", "\n", "x3_n", "=", "self", ".", "transformer_2c_n", "(", "x3_n", ")", "\n", "\n", "xf_n", "=", "self", ".", "pos_encoder_2", "(", "torch", ".", "cat", "(", "(", "x1_n", ",", "x2_n", ",", "x3_n", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "xf_n", "=", "self", ".", "transformer_2f_n", "(", "xf_n", ")", "\n", "\n", "# cross branch", "\n", "xf_vn", "=", "torch", ".", "cat", "(", "(", "self", ".", "pos_encoder_2", "(", "xf_v", ")", ",", "self", ".", "pos_encoder_2", "(", "xf_n", ")", ")", ",", "dim", "=", "0", ")", "\n", "xf_vn", "=", "self", ".", "transformer_2_cross", "(", "xf_vn", ")", "# 2*L * B * 3*C", "\n", "\n", "xf_vn", "=", "torch", ".", "cat", "(", "(", "xf_vn", "[", ":", "L", ",", ":", ",", ":", "]", ",", "xf_vn", "[", "L", ":", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "xf_vn", "=", "self", ".", "transformer_4_cross", "(", "self", ".", "pos_encoder_3", "(", "xf_vn", ")", ")", "\n", "\n", "########### Prediction ###############", "\n", "prob_v_s1", "=", "self", ".", "classifier_verb", "(", "self", ".", "dropout_verb_s1", "(", "xf_v_s1", ")", ".", "view", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "reshape", "(", "L", ",", "B", ",", "-", "1", ")", "\n", "prob_v_s1", "=", "torch", ".", "mean", "(", "prob_v_s1", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "# problem may come here!!!", "\n", "#", "\n", "prob_n_s1", "=", "self", ".", "classifier_noun", "(", "self", ".", "dropout_noun_s1", "(", "xf_n_s1", ")", ".", "view", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "reshape", "(", "L", ",", "B", ",", "-", "1", ")", "\n", "prob_n_s1", "=", "torch", ".", "mean", "(", "prob_n_s1", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "\n", "prob_a_s1", "=", "self", ".", "classifier_action", "(", "self", ".", "dropout_action_s1", "(", "xf_vn_s1", ")", ".", "view", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "reshape", "(", "L", ",", "B", ",", "-", "1", ")", "\n", "prob_a_s1", "=", "torch", ".", "mean", "(", "prob_a_s1", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "\n", "prob_v", "=", "self", ".", "classifier_verb", "(", "self", ".", "dropout_verb", "(", "xf_v", ")", ".", "view", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "reshape", "(", "L", ",", "B", ",", "-", "1", ")", "\n", "prob_v", "=", "torch", ".", "mean", "(", "prob_v", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "# problem may come here!!!", "\n", "#", "\n", "prob_n", "=", "self", ".", "classifier_noun", "(", "self", ".", "dropout_noun", "(", "xf_n", ")", ".", "view", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "reshape", "(", "L", ",", "B", ",", "-", "1", ")", "\n", "prob_n", "=", "torch", ".", "mean", "(", "prob_n", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "#", "\n", "prob_a", "=", "self", ".", "classifier_action", "(", "self", ".", "dropout_action", "(", "xf_vn", ")", ".", "view", "(", "B", "*", "L", ",", "-", "1", ")", ")", ".", "reshape", "(", "L", ",", "B", ",", "-", "1", ")", "\n", "prob_a", "=", "torch", ".", "mean", "(", "prob_a", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "\n", "return", "prob_v", ",", "prob_n", ",", "prob_a", ",", "prob_v_s1", ",", "prob_n_s1", ",", "prob_a_s1", "", "", "", ""]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.MeanTopKRecallMeter.__init__": [[6, 10], ["utils.MeanTopKRecallMeter.reset"], "methods", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.MeanTopKRecallMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "k", "=", "5", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.MeanTopKRecallMeter.reset": [[11, 14], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tps", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "self", ".", "nums", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.MeanTopKRecallMeter.add": [[15, 20], ["numpy.unique", "tp[].sum", "labels.reshape", "numpy.argsort"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "scores", ",", "labels", ")", ":", "\n", "        ", "tp", "=", "(", "np", ".", "argsort", "(", "scores", ",", "axis", "=", "1", ")", "[", ":", ",", "-", "self", ".", "k", ":", "]", "==", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "max", "(", "1", ")", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "            ", "self", ".", "tps", "[", "l", "]", "+=", "tp", "[", "labels", "==", "l", "]", ".", "sum", "(", ")", "\n", "self", ".", "nums", "[", "l", "]", "+=", "(", "labels", "==", "l", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.MeanTopKRecallMeter.value": [[21, 27], ["len", "recalls.mean"], "methods", ["None"], ["", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "recalls", "=", "(", "self", ".", "tps", "/", "self", ".", "nums", ")", "[", "self", ".", "nums", ">", "0", "]", "\n", "if", "len", "(", "recalls", ")", ">", "0", ":", "\n", "            ", "return", "recalls", ".", "mean", "(", ")", "*", "100", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ValueMeter.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ValueMeter.add": [[33, 36], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "value", ",", "n", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "value", "*", "n", "\n", "self", ".", "total", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ValueMeter.value": [[37, 39], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.__init__": [[42, 45], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "self", ".", "total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.add": [[46, 49], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "arr", ",", "n", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "arr", "*", "n", "\n", "self", ".", "total", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.value": [[50, 56], ["len"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "val", "=", "self", ".", "sum", "/", "self", ".", "total", "\n", "if", "len", "(", "val", ")", "==", "1", ":", "\n", "            ", "return", "val", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_accuracy": [[58, 81], ["numpy.max", "scores.argsort", "labels.reshape", "tp[].max().mean", "tp[].max"], "function", ["None"], ["", "", "", "def", "topk_accuracy", "(", "scores", ",", "labels", ",", "ks", ",", "selected_class", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes TOP-K accuracies for different values of k\n    Args:\n        rankings: numpy ndarray, shape = (instance_count, label_count)\n        labels: numpy ndarray, shape = (instance_count,)\n        ks: tuple of integers\n\n    Returns:\n        list of float: TOP-K accuracy for each k in ks\n    \"\"\"", "\n", "if", "selected_class", "is", "not", "None", ":", "\n", "        ", "idx", "=", "labels", "==", "selected_class", "\n", "scores", "=", "scores", "[", "idx", "]", "\n", "labels", "=", "labels", "[", "idx", "]", "\n", "", "rankings", "=", "scores", ".", "argsort", "(", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# trim to max k to avoid extra computation", "\n", "maxk", "=", "np", ".", "max", "(", "ks", ")", "\n", "\n", "# compute true positives in the top-maxk predictions", "\n", "tp", "=", "rankings", "[", ":", ",", ":", "maxk", "]", "==", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# trim to selected ks and compute accuracies", "\n", "return", "[", "tp", "[", ":", ",", ":", "k", "]", ".", "max", "(", "1", ")", ".", "mean", "(", ")", "for", "k", "in", "ks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.log": [[83, 96], ["print", "print", "print", "print", "loss_meter.value", "accuracy_meter.value"], "function", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.value", "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.ArrayValueMeter.value"], ["", "def", "log", "(", "mode", ",", "epoch", ",", "loss_meter", ",", "accuracy_meter", ",", "best_perf", "=", "None", ",", "green", "=", "False", ")", ":", "\n", "    ", "if", "green", ":", "\n", "        ", "print", "(", "'\\033[92m'", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "print", "(", "\n", "f\"[{mode}] Epoch: {epoch:0.2f}. \"", "\n", "f\"Loss: {loss_meter.value():.2f}. \"", "\n", "f\"Accuracy: {accuracy_meter.value():.2f}% \"", ",", "end", "=", "\"\"", ")", "\n", "\n", "if", "best_perf", ":", "\n", "        ", "print", "(", "f\"[best: {best_perf:0.2f}]%\"", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "print", "(", "'\\033[0m'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_accuracy_multiple_timesteps": [[98, 102], ["numpy.array", "list", "zip", "utils.topk_accuracy", "range"], "function", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_accuracy"], ["", "def", "topk_accuracy_multiple_timesteps", "(", "preds", ",", "labels", ",", "ks", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "    ", "accs", "=", "np", ".", "array", "(", "list", "(", "\n", "zip", "(", "*", "[", "topk_accuracy", "(", "preds", "[", ":", ",", "t", ",", ":", "]", ",", "labels", ",", "ks", ")", "for", "t", "in", "range", "(", "preds", ".", "shape", "[", "1", "]", ")", "]", ")", ")", ")", "\n", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.get_marginal_indexes": [[104, 120], ["range", "actions[].max", "len", "vi.append", "vi.append", "numpy.array"], "function", ["None"], ["", "def", "get_marginal_indexes", "(", "actions", ",", "mode", ")", ":", "\n", "    ", "\"\"\"For each verb/noun retrieve the list of actions containing that verb/name\n        Input:\n            mode: \"verb\" or \"noun\"\n        Output:\n            a list of numpy array of indexes. If verb/noun 3 is contained in actions 2,8,19,\n            then output[3] will be np.array([2,8,19])\n    \"\"\"", "\n", "vi", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "actions", "[", "mode", "]", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "        ", "vals", "=", "actions", "[", "actions", "[", "mode", "]", "==", "v", "]", ".", "index", ".", "values", "\n", "if", "len", "(", "vals", ")", ">", "0", ":", "\n", "            ", "vi", ".", "append", "(", "vals", ")", "\n", "", "else", ":", "\n", "            ", "vi", ".", "append", "(", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "", "", "return", "vi", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.marginalize": [[122, 127], ["mprobs.append", "numpy.array", "probs[].sum"], "function", ["None"], ["", "def", "marginalize", "(", "probs", ",", "indexes", ")", ":", "\n", "    ", "mprobs", "=", "[", "]", "\n", "for", "ilist", "in", "indexes", ":", "\n", "        ", "mprobs", ".", "append", "(", "probs", "[", ":", ",", "ilist", "]", ".", "sum", "(", "1", ")", ")", "\n", "", "return", "np", ".", "array", "(", "mprobs", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.softmax": [[129, 136], ["x.reshape.reshape", "numpy.exp", "res.reshape", "np.exp.sum().reshape", "numpy.max().reshape", "np.exp.sum", "numpy.max"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "xx", "=", "x", "\n", "x", "=", "x", ".", "reshape", "(", "(", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "res", "=", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "res", ".", "reshape", "(", "xx", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_recall": [[138, 149], ["numpy.unique", "numpy.intersect1d", "len", "utils.topk_accuracy"], "function", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_accuracy"], ["", "def", "topk_recall", "(", "scores", ",", "labels", ",", "k", "=", "5", ",", "classes", "=", "None", ")", ":", "\n", "    ", "unique", "=", "np", ".", "unique", "(", "labels", ")", "\n", "if", "classes", "is", "None", ":", "\n", "        ", "classes", "=", "unique", "\n", "", "else", ":", "\n", "        ", "classes", "=", "np", ".", "intersect1d", "(", "classes", ",", "unique", ")", "\n", "", "recalls", "=", "0", "\n", "#np.zeros((scores.shape[0], scores.shape[1]))", "\n", "for", "c", "in", "classes", ":", "\n", "        ", "recalls", "+=", "topk_accuracy", "(", "scores", ",", "labels", ",", "ks", "=", "(", "k", ",", ")", ",", "selected_class", "=", "c", ")", "[", "0", "]", "\n", "", "return", "recalls", "/", "len", "(", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_recall_multiple_timesteps": [[151, 155], ["numpy.array", "np.array.reshape", "utils.topk_recall", "range"], "function", ["home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.topk_recall"], ["", "def", "topk_recall_multiple_timesteps", "(", "preds", ",", "labels", ",", "k", "=", "5", ",", "classes", "=", "None", ")", ":", "\n", "    ", "accs", "=", "np", ".", "array", "(", "[", "topk_recall", "(", "preds", "[", ":", ",", "t", ",", ":", "]", ",", "labels", ",", "k", ",", "classes", ")", "\n", "for", "t", "in", "range", "(", "preds", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "return", "accs", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.tta": [[157, 166], ["numpy.cumsum", "numpy.concatenate", "numpy.array", "scores.argsort", "labels.reshape", "numpy.nanmean", "numpy.ones", "numpy.argmax"], "function", ["None"], ["", "def", "tta", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Implementation of time to action curve\"\"\"", "\n", "rankings", "=", "scores", ".", "argsort", "(", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "comparisons", "=", "rankings", "==", "labels", ".", "reshape", "(", "rankings", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "cum_comparisons", "=", "np", ".", "cumsum", "(", "comparisons", ",", "2", ")", "\n", "cum_comparisons", "=", "np", ".", "concatenate", "(", "[", "cum_comparisons", ",", "np", ".", "ones", "(", "\n", "(", "cum_comparisons", ".", "shape", "[", "0", "]", ",", "1", ",", "cum_comparisons", ".", "shape", "[", "2", "]", ")", ")", "]", ",", "1", ")", "\n", "time_stamps", "=", "np", ".", "array", "(", "[", "2.0", ",", "1.75", ",", "1.5", ",", "1.25", ",", "1.0", ",", "0.75", ",", "0.5", ",", "0.25", ",", "0", "]", ")", "\n", "return", "np", ".", "nanmean", "(", "time_stamps", "[", "np", ".", "argmax", "(", "cum_comparisons", ",", "1", ")", "]", ",", "0", ")", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.predictions_to_json": [[168, 200], ["zip", "numpy.argsort", "str", "float", "str", "float", "float", "numpy.arange().reshape", "str", "enumerate", "enumerate", "zip", "str", "str", "str", "numpy.arange", "len"], "function", ["None"], ["", "def", "predictions_to_json", "(", "verb_scores", ",", "noun_scores", ",", "action_scores", ",", "action_ids", ",", "a_to_vn", ",", "top_actions", "=", "100", ",", "version", "=", "'0.2'", ",", "sls", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save verb, noun and action predictions to json for submitting them to the EPIC-Kitchens leaderboard\"\"\"", "\n", "predictions", "=", "{", "'version'", ":", "version", ",", "\n", "'challenge'", ":", "'action_anticipation'", ",", "'results'", ":", "{", "}", "}", "\n", "\n", "if", "sls", "is", "None", ":", "\n", "        ", "predictions", "[", "'sls_pt'", "]", "=", "1", "\n", "predictions", "[", "'sls_tl'", "]", "=", "4", "\n", "predictions", "[", "'sls_td'", "]", "=", "3", "\n", "", "else", ":", "\n", "        ", "predictions", "[", "'sls_pt'", "]", "=", "sls", "[", "0", "]", "\n", "predictions", "[", "'sls_tl'", "]", "=", "sls", "[", "1", "]", "\n", "predictions", "[", "'sls_td'", "]", "=", "sls", "[", "2", "]", "\n", "\n", "# sort our verb score and noun score separately", "\n", "# noun scores", "\n", "# verb scores", "\n", "", "row_idxs", "=", "np", ".", "argsort", "(", "action_scores", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "top_100_idxs", "=", "row_idxs", "[", ":", ",", ":", "top_actions", "]", "\n", "\n", "action_scores", "=", "action_scores", "[", "np", ".", "arange", "(", "\n", "len", "(", "action_scores", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "top_100_idxs", "]", "\n", "\n", "for", "i", ",", "v", ",", "n", ",", "a", ",", "ai", "in", "zip", "(", "action_ids", ",", "verb_scores", ",", "noun_scores", ",", "action_scores", ",", "top_100_idxs", ")", ":", "\n", "        ", "predictions", "[", "'results'", "]", "[", "str", "(", "i", ")", "]", "=", "{", "}", "\n", "predictions", "[", "'results'", "]", "[", "str", "(", "i", ")", "]", "[", "'verb'", "]", "=", "{", "str", "(", "\n", "ii", ")", ":", "float", "(", "vv", ")", "for", "ii", ",", "vv", "in", "enumerate", "(", "v", ")", "}", "\n", "predictions", "[", "'results'", "]", "[", "str", "(", "i", ")", "]", "[", "'noun'", "]", "=", "{", "str", "(", "\n", "ii", ")", ":", "float", "(", "nn", ")", "for", "ii", ",", "nn", "in", "enumerate", "(", "n", ")", "}", "\n", "predictions", "[", "'results'", "]", "[", "str", "(", "i", ")", "]", "[", "'action'", "]", "=", "{", "\n", "\"%d,%d\"", "%", "a_to_vn", "[", "ii", "]", ":", "float", "(", "aa", ")", "for", "ii", ",", "aa", "in", "zip", "(", "ai", ",", "a", ")", "}", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.guxiao0822_trans_action.None.utils.save_predictions": [[201, 204], ["open", "f.write", "os.path.join", "json.dumps"], "function", ["None"], ["", "def", "save_predictions", "(", "predictions", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "join", "(", "filename", "+", "f\"_test.json\"", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "predictions", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", ")", "\n", "\n"]]}