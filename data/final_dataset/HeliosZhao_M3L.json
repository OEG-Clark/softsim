{"home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_data": [[34, 38], ["os.join", "reid.datasets.create"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.__init__.create"], ["def", "get_data", "(", "name", ",", "data_dir", ")", ":", "\n", "    ", "root", "=", "osp", ".", "join", "(", "data_dir", ",", "name", ")", "\n", "dataset", "=", "datasets", ".", "create", "(", "name", ",", "root", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_train_loader": [[41, 66], ["reid.utils.data.transforms.Normalize", "reid.utils.data.transforms.Compose", "reid.utils.data.IterLoader", "sorted", "sorted", "reid.utils.data.sampler.RandomMultipleGallerySampler", "torch.utils.data.DataLoader", "reid.utils.data.transforms.Resize", "reid.utils.data.transforms.RandomHorizontalFlip", "reid.utils.data.transforms.Pad", "reid.utils.data.transforms.RandomCrop", "reid.utils.data.transforms.ToTensor", "reid.utils.data.preprocessor.Preprocessor"], "function", ["None"], ["", "def", "get_train_loader", "(", "args", ",", "dataset", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "\n", "num_instances", ",", "iters", ",", "trainset", "=", "None", ")", ":", "\n", "\n", "    ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "train_transformer", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "height", ",", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "T", ".", "Pad", "(", "10", ")", ",", "\n", "T", ".", "RandomCrop", "(", "(", "height", ",", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalizer", "]", ")", "\n", "\n", "train_set", "=", "sorted", "(", "dataset", ".", "train", ")", "if", "trainset", "is", "None", "else", "sorted", "(", "trainset", ")", "\n", "rmgs_flag", "=", "num_instances", ">", "0", "\n", "if", "rmgs_flag", ":", "\n", "        ", "sampler", "=", "RandomMultipleGallerySampler", "(", "train_set", ",", "num_instances", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "None", "\n", "", "train_loader", "=", "IterLoader", "(", "\n", "DataLoader", "(", "Preprocessor", "(", "train_set", ",", "root", "=", "dataset", ".", "images_dir", ",", "transform", "=", "train_transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "not", "rmgs_flag", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", ",", "length", "=", "None", ")", "\n", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_test_loader": [[68, 86], ["reid.utils.data.transforms.Normalize", "reid.utils.data.transforms.Compose", "torch.utils.data.DataLoader", "list", "reid.utils.data.preprocessor.Preprocessor", "reid.utils.data.transforms.Resize", "reid.utils.data.transforms.ToTensor", "set", "set"], "function", ["None"], ["", "def", "get_test_loader", "(", "dataset", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "testset", "=", "None", ")", ":", "\n", "    ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "test_transformer", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "height", ",", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalizer", "\n", "]", ")", "\n", "\n", "if", "testset", "is", "None", ":", "\n", "        ", "testset", "=", "list", "(", "set", "(", "dataset", ".", "query", ")", "|", "set", "(", "dataset", ".", "gallery", ")", ")", "\n", "\n", "", "test_loader", "=", "DataLoader", "(", "\n", "Preprocessor", "(", "testset", ",", "root", "=", "dataset", ".", "images_dir", ",", "transform", "=", "test_transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.create_model": [[88, 97], ["reid.models.create", "nn.DataParallel.cuda", "torch.nn.DataParallel", "reid.utils.serialization.load_checkpoint", "nn.DataParallel.copyWeight_eval"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.__init__.create", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.load_checkpoint", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyWeight_eval"], ["", "def", "create_model", "(", "args", ",", "num_classes", ")", ":", "\n", "    ", "model", "=", "models", ".", "create", "(", "args", ".", "arch", ",", "num_features", "=", "args", ".", "features", ",", "dropout", "=", "args", ".", "dropout", ",", "norm", "=", "True", ",", "num_classes", "=", "num_classes", ",", "BNNeck", "=", "args", ".", "BNNeck", ")", "\n", "# use CUDA", "\n", "model", ".", "cuda", "(", ")", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "args", ".", "resume", ")", "\n", "model", ".", "copyWeight_eval", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.main": [[99, 109], ["parser.parse_args", "main.main_worker", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.main_worker": [[111, 225], ["time.monotonic", "reid.utils.logging.Logger", "print", "print", "main.get_data", "main.get_data", "main.get_data", "main.get_data", "main.get_train_loader", "main.get_train_loader", "main.get_train_loader", "main.get_test_loader", "print", "main.create_model", "reid.evaluators.Evaluator", "print", "range", "torch.optim.Adam", "torch.optim.Adam", "reid.solver.WarmupMultiStepLR", "reid.loss.triplet.TripletLoss().cuda", "reid.trainers.Trainer", "range", "print", "reid.utils.serialization.load_checkpoint", "create_model.load_state_dict", "reid.evaluators.Evaluator.evaluate", "time.monotonic", "print", "os.join", "reid.evaluators.Evaluator.evaluate", "len", "main.get_test_loader", "reid.evaluators.extract_features", "collections.defaultdict", "sorted", "torch.stack", "torch.stack", "torch.normalize().cuda", "source_centers_all.append", "reid.models.memory.MemoryClassifier().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.nn.DataParallel", "memories.append", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "reid.trainers.Trainer.train", "reid.solver.WarmupMultiStepLR.step", "os.join", "datetime.timedelta", "sour_fea_dict[].append", "torch.cat().mean", "torch.cat().mean", "create_model.module.params", "reid.loss.triplet.TripletLoss", "reid.evaluators.Evaluator.evaluate", "max", "reid.utils.serialization.save_checkpoint", "print", "sorted", "source_features[].unsqueeze", "sorted", "torch.normalize", "reid.models.memory.MemoryClassifier", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "collections.defaultdict.keys", "create_model.state_dict", "os.join"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_train_loader", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_train_loader", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_train_loader", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_test_loader", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.create_model", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.load_checkpoint", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.Evaluator.evaluate", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.Evaluator.evaluate", "home.repos.pwc.inspect_result.HeliosZhao_M3L.None.main.get_test_loader", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.extract_features", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer.train", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.Evaluator.evaluate", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.save_checkpoint"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "global", "start_epoch", ",", "best_mAP", "\n", "start_time", "=", "time", ".", "monotonic", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log.txt'", ")", ")", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "# Create datasets", "\n", "iters", "=", "args", ".", "iters", "if", "(", "args", ".", "iters", ">", "0", ")", "else", "None", "\n", "print", "(", "\"==> Load datasets\"", ")", "\n", "dataset_src1", "=", "get_data", "(", "args", ".", "dataset_src1", ",", "args", ".", "data_dir", ")", "\n", "dataset_src2", "=", "get_data", "(", "args", ".", "dataset_src2", ",", "args", ".", "data_dir", ")", "\n", "dataset_src3", "=", "get_data", "(", "args", ".", "dataset_src3", ",", "args", ".", "data_dir", ")", "\n", "dataset", "=", "get_data", "(", "args", ".", "dataset", ",", "args", ".", "data_dir", ")", "\n", "\n", "datasets_src", "=", "[", "dataset_src1", ",", "dataset_src2", ",", "dataset_src3", "]", "\n", "# camMar, camDuke = get_data('marCam', args.data_dir), get_data('dukeCam', args.data_dir)", "\n", "train_loader_src1", "=", "get_train_loader", "(", "args", ",", "dataset_src1", ",", "args", ".", "height", ",", "args", ".", "width", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "args", ".", "num_instances", ",", "iters", ")", "\n", "train_loader_src2", "=", "get_train_loader", "(", "args", ",", "dataset_src2", ",", "args", ".", "height", ",", "args", ".", "width", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "args", ".", "num_instances", ",", "iters", ")", "\n", "train_loader_src3", "=", "get_train_loader", "(", "args", ",", "dataset_src3", ",", "args", ".", "height", ",", "args", ".", "width", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "args", ".", "num_instances", ",", "iters", ")", "\n", "\n", "test_loader", "=", "get_test_loader", "(", "dataset", ",", "args", ".", "height", ",", "args", ".", "width", ",", "args", ".", "test_batch_size", ",", "args", ".", "workers", ")", "\n", "\n", "train_loader", "=", "[", "train_loader_src1", ",", "train_loader_src2", ",", "train_loader_src3", "]", "\n", "\n", "num_classes1", "=", "dataset_src1", ".", "num_train_pids", "\n", "num_classes2", "=", "dataset_src2", ".", "num_train_pids", "\n", "num_classes3", "=", "dataset_src3", ".", "num_train_pids", "\n", "num_classes", "=", "[", "num_classes1", ",", "num_classes2", ",", "num_classes3", "]", "\n", "print", "(", "' number classes = '", ",", "num_classes", ")", "\n", "# Create model", "\n", "model", "=", "create_model", "(", "args", ",", "num_classes", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "# Evaluator", "\n", "evaluator", "=", "Evaluator", "(", "model", ")", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "cmc_flag", "=", "True", ")", "\n", "return", "\n", "\n", "", "print", "(", "\"==> Initialize source-domain class centroids and memorys \"", ")", "\n", "\n", "source_centers_all", "=", "[", "]", "\n", "memories", "=", "[", "]", "\n", "\n", "for", "dataset_i", "in", "range", "(", "len", "(", "datasets_src", ")", ")", ":", "\n", "\n", "        ", "dataset_source", "=", "datasets_src", "[", "dataset_i", "]", "\n", "sour_cluster_loader", "=", "get_test_loader", "(", "dataset_source", ",", "args", ".", "height", ",", "args", ".", "width", ",", "\n", "args", ".", "test_batch_size", ",", "args", ".", "workers", ",", "testset", "=", "sorted", "(", "dataset_source", ".", "train", ")", ")", "\n", "source_features", ",", "_", "=", "extract_features", "(", "model", ",", "sour_cluster_loader", ",", "print_freq", "=", "50", ")", "\n", "sour_fea_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "for", "f", ",", "pid", ",", "_", ",", "_", "in", "sorted", "(", "dataset_source", ".", "train", ")", ":", "\n", "            ", "sour_fea_dict", "[", "pid", "]", ".", "append", "(", "source_features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "source_centers", "=", "[", "torch", ".", "cat", "(", "sour_fea_dict", "[", "pid", "]", ",", "0", ")", ".", "mean", "(", "0", ")", "for", "pid", "in", "sorted", "(", "sour_fea_dict", ".", "keys", "(", ")", ")", "]", "\n", "source_centers", "=", "torch", ".", "stack", "(", "source_centers", ",", "0", ")", "## pid,2048", "\n", "source_centers", "=", "F", ".", "normalize", "(", "source_centers", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "source_centers_all", ".", "append", "(", "source_centers", ")", "\n", "\n", "curMemo", "=", "MemoryClassifier", "(", "model", ".", "module", ".", "num_features", ",", "source_centers", ".", "shape", "[", "0", "]", ",", "\n", "temp", "=", "args", ".", "temp", ",", "momentum", "=", "args", ".", "momentum", ")", ".", "cuda", "(", ")", "\n", "curMemo", ".", "features", "=", "source_centers", "\n", "curMemo", ".", "labels", "=", "torch", ".", "arange", "(", "num_classes", "[", "dataset_i", "]", ")", ".", "cuda", "(", ")", "\n", "curMemo", "=", "nn", ".", "DataParallel", "(", "curMemo", ")", "\n", "memories", ".", "append", "(", "curMemo", ")", "\n", "\n", "del", "source_centers", ",", "sour_cluster_loader", ",", "sour_fea_dict", "\n", "\n", "# Optimizer", "\n", "", "params", "=", "[", "{", "\"params\"", ":", "[", "value", "]", "}", "for", "value", "in", "model", ".", "module", ".", "params", "(", ")", "if", "value", ".", "requires_grad", "]", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "lr_scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "30", ",", "50", "]", ",", "gamma", "=", "0.1", ",", "warmup_factor", "=", "0.01", ",", "\n", "warmup_iters", "=", "10", ",", "warmup_method", "=", "\"linear\"", ")", "\n", "\n", "criterion", "=", "TripletLoss", "(", "args", ".", "margin", ",", "args", ".", "num_instances", ",", "False", ")", ".", "cuda", "(", ")", "\n", "trainer", "=", "Trainer", "(", "args", ",", "model", ",", "memories", ",", "criterion", ")", "\n", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "# Calculate distance", "\n", "        ", "print", "(", "'==> start training epoch {} \\t ==> learning rate = {}'", ".", "format", "(", "epoch", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ",", "optimizer", ",", "\n", "print_freq", "=", "args", ".", "print_freq", ",", "train_iters", "=", "args", ".", "iters", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "==", "args", ".", "epochs", "-", "1", ")", ":", "\n", "            ", "mAP", "=", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "cmc_flag", "=", "False", ")", "\n", "is_best", "=", "(", "mAP", ">", "best_mAP", ")", "\n", "best_mAP", "=", "max", "(", "mAP", ",", "best_mAP", ")", "\n", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_mAP'", ":", "best_mAP", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "\n", "print", "(", "'\\n * Finished epoch {:3d}  model mAP: {:5.1%}  best: {:5.1%}{}\\n'", ".", "\n", "format", "(", "epoch", ",", "mAP", ",", "best_mAP", ",", "' *'", "if", "is_best", "else", "''", ")", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'==> Test with the best model:'", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "cmc_flag", "=", "True", ")", "\n", "end_time", "=", "time", ".", "monotonic", "(", ")", "\n", "print", "(", "'Total running time: '", ",", "timedelta", "(", "seconds", "=", "end_time", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer.__init__": [[16, 23], ["object.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ",", "memory", ",", "criterion", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "memory", "=", "memory", "\n", "self", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer.train": [[24, 134], ["trainers.Trainer.model.train", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "len", "time.time", "range", "numpy.random.choice", "utils.meters.AverageMeter.update", "time.time", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "utils.meters.AverageMeter.update", "trainers.Trainer._parse_data", "trainers.Trainer.model.zero_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "create", "trainers.Trainer.newMeta.copyModel", "trainers.Trainer.newMeta.update_params", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "trainers.Trainer.newMeta", "isinstance", "trainers.Trainer.criterion", "utils.meters.AverageMeter.update", "utils.meters.AverageMeter.update", "optimizer.zero_grad", "loss_final.backward", "optimizer.step", "utils.meters.AverageMeter.update", "print", "list", "isinstance", "data_loaders[].next", "utils.meters.AverageMeter.update", "trainers.Trainer._parse_data", "trainers.Trainer.model", "trainers.Trainer.criterion", "trainers.Trainer.model.module.params", "len", "loss_meta_train.item", "loss_meta_test.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "loss_final.item", "time.time", "trainers.Trainer.model.modules", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "range", "range", "time.time", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainers.Trainer._parse_data", "trainers.Trainer.model", "trainers.Trainer.memory[].module.MomentumUpdate", "time.time", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bn.meta_mean1.size", "bn.meta_var1.size", "bn.meta_mean2.size", "bn.meta_var2.size"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer.train", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer._parse_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.__init__.create", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyModel", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.update_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MC.backward", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.__init__.IterLoader.next", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer._parse_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer._parse_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MemoryClassifier.MomentumUpdate"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loaders", ",", "optimizer", ",", "print_freq", "=", "10", ",", "train_iters", "=", "400", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "losses_meta_train", "=", "AverageMeter", "(", ")", "\n", "losses_meta_test", "=", "AverageMeter", "(", ")", "\n", "metaLR", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "source_count", "=", "len", "(", "data_loaders", ")", "\n", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "metaTestID", "=", "np", ".", "random", ".", "choice", "(", "source_count", ")", "\n", "network_bns", "=", "[", "x", "for", "x", "in", "list", "(", "self", ".", "model", ".", "modules", "(", ")", ")", "if", "isinstance", "(", "x", ",", "MixUp1D", ")", "]", "\n", "\n", "for", "bn", "in", "network_bns", ":", "\n", "                ", "bn", ".", "meta_mean1", "=", "torch", ".", "zeros", "(", "bn", ".", "meta_mean1", ".", "size", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "bn", ".", "meta_var1", "=", "torch", ".", "zeros", "(", "bn", ".", "meta_var1", ".", "size", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "bn", ".", "meta_mean2", "=", "torch", ".", "zeros", "(", "bn", ".", "meta_mean2", ".", "size", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "bn", ".", "meta_var2", "=", "torch", ".", "zeros", "(", "bn", ".", "meta_var2", ".", "size", "(", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# with torch.autograd.set_detect_anomaly(True):", "\n", "", "if", "True", ":", "\n", "                ", "data_loader_index", "=", "[", "i", "for", "i", "in", "range", "(", "source_count", ")", "]", "## 0 2", "\n", "del", "data_loader_index", "[", "metaTestID", "]", "\n", "batch_data", "=", "[", "data_loaders", "[", "i", "]", ".", "next", "(", ")", "for", "i", "in", "range", "(", "source_count", ")", "]", "\n", "metaTestinputs", "=", "batch_data", "[", "metaTestID", "]", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# process inputs", "\n", "testInputs", ",", "testPids", ",", "_", ",", "_", ",", "_", "=", "self", ".", "_parse_data", "(", "metaTestinputs", ")", "\n", "loss_meta_train", "=", "0.", "\n", "save_index", "=", "0", "\n", "for", "t", "in", "data_loader_index", ":", "# 0 1", "\n", "                    ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "traininputs", "=", "batch_data", "[", "t", "]", "\n", "save_index", "+=", "1", "\n", "inputs", ",", "targets", ",", "_", ",", "_", ",", "_", "=", "self", ".", "_parse_data", "(", "traininputs", ")", "\n", "\n", "f_out", ",", "tri_features", "=", "self", ".", "model", "(", "inputs", ",", "MTE", "=", "''", ",", "save_index", "=", "save_index", ")", "\n", "loss_mtr_tri", "=", "self", ".", "criterion", "(", "tri_features", ",", "targets", ")", "\n", "loss_s", "=", "self", ".", "memory", "[", "t", "]", "(", "f_out", ",", "targets", ")", ".", "mean", "(", ")", "\n", "\n", "loss_meta_train", "=", "loss_meta_train", "+", "loss_s", "+", "loss_mtr_tri", "\n", "\n", "", "loss_meta_train", "=", "loss_meta_train", "/", "(", "source_count", "-", "1", ")", "\n", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "grad_info", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_meta_train", ",", "self", ".", "model", ".", "module", ".", "params", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "self", ".", "newMeta", "=", "create", "(", "self", ".", "args", ".", "arch", ",", "norm", "=", "True", ",", "BNNeck", "=", "self", ".", "args", ".", "BNNeck", ")", "\n", "# creatmodel = time.time()", "\n", "self", ".", "newMeta", ".", "copyModel", "(", "self", ".", "model", ".", "module", ")", "\n", "# copymodel = time.time()", "\n", "self", ".", "newMeta", ".", "update_params", "(", "\n", "lr_inner", "=", "metaLR", ",", "source_params", "=", "grad_info", ",", "solver", "=", "'adam'", "\n", ")", "\n", "\n", "del", "grad_info", "\n", "\n", "self", ".", "newMeta", "=", "nn", ".", "DataParallel", "(", "self", ".", "newMeta", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "f_test", ",", "mte_tri", "=", "self", ".", "newMeta", "(", "testInputs", ",", "MTE", "=", "self", ".", "args", ".", "BNtype", ")", "\n", "\n", "loss_meta_test", "=", "0.", "\n", "if", "isinstance", "(", "f_test", ",", "list", ")", ":", "\n", "                    ", "for", "feature", "in", "f_test", ":", "\n", "                        ", "loss_meta_test", "+=", "self", ".", "memory", "[", "metaTestID", "]", "(", "feature", ",", "testPids", ")", ".", "mean", "(", ")", "\n", "", "loss_meta_test", "/=", "len", "(", "f_test", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "loss_meta_test", "=", "self", ".", "memory", "[", "metaTestID", "]", "(", "f_test", ",", "testPids", ")", ".", "mean", "(", ")", "\n", "\n", "", "loss_mte_tri", "=", "self", ".", "criterion", "(", "mte_tri", ",", "testPids", ")", "\n", "loss_meta_test", "=", "loss_meta_test", "+", "loss_mte_tri", "\n", "\n", "loss_final", "=", "loss_meta_train", "+", "loss_meta_test", "\n", "losses_meta_train", ".", "update", "(", "loss_meta_train", ".", "item", "(", ")", ")", "\n", "losses_meta_test", ".", "update", "(", "loss_meta_test", ".", "item", "(", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_final", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "m_ind", "in", "range", "(", "source_count", ")", ":", "\n", "                        ", "imgs", ",", "pids", ",", "_", ",", "_", ",", "_", "=", "self", ".", "_parse_data", "(", "batch_data", "[", "m_ind", "]", ")", "\n", "f_new", ",", "_", "=", "self", ".", "model", "(", "imgs", ")", "\n", "self", ".", "memory", "[", "m_ind", "]", ".", "module", ".", "MomentumUpdate", "(", "f_new", ",", "pids", ")", "\n", "\n", "\n", "", "", "losses", ".", "update", "(", "loss_final", ".", "item", "(", ")", ")", "\n", "\n", "# print log", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{}][{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Total loss {:.3f} ({:.3f})\\t'", "\n", "'Loss {:.3f}({:.3f})\\t'", "\n", "'LossMeta {:.3f}({:.3f})'", "\n", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "train_iters", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "losses", ".", "val", ",", "losses", ".", "avg", ",", "\n", "losses_meta_train", ".", "val", ",", "losses_meta_train", ".", "avg", ",", "\n", "losses_meta_test", ".", "val", ",", "losses_meta_test", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer._parse_data": [[135, 138], ["imgs.cuda", "pids.cuda", "indexes.cuda", "cams.cuda", "dataset_id.cuda"], "methods", ["None"], ["", "", "", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "imgs", ",", "names", ",", "pids", ",", "cams", ",", "dataset_id", ",", "indexes", "=", "inputs", "\n", "return", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", ",", "indexes", ".", "cuda", "(", ")", ",", "cams", ".", "cuda", "(", ")", ",", "dataset_id", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.Evaluator.__init__": [[111, 114], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "Evaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.Evaluator.evaluate": [[115, 129], ["evaluators.extract_features", "evaluators.pairwise_distance", "evaluators.evaluate_all", "print", "evaluators.pairwise_distance", "evaluators.pairwise_distance", "utils.rerank.re_ranking", "evaluators.evaluate_all", "utils.rerank.re_ranking.numpy", "pairwise_distance.numpy", "pairwise_distance.numpy"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.extract_features", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.pairwise_distance", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.evaluate_all", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.pairwise_distance", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.pairwise_distance", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.rerank.re_ranking", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.evaluate_all"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ",", "query", ",", "gallery", ",", "cmc_flag", "=", "False", ",", "rerank", "=", "False", ")", ":", "\n", "        ", "features", ",", "_", "=", "extract_features", "(", "self", ".", "model", ",", "data_loader", ")", "\n", "distmat", ",", "query_features", ",", "gallery_features", "=", "pairwise_distance", "(", "features", ",", "query", ",", "gallery", ")", "\n", "results", "=", "evaluate_all", "(", "query_features", ",", "gallery_features", ",", "distmat", ",", "query", "=", "query", ",", "gallery", "=", "gallery", ",", "\n", "cmc_flag", "=", "cmc_flag", ")", "\n", "\n", "if", "not", "rerank", ":", "\n", "            ", "return", "results", "\n", "\n", "", "print", "(", "'Applying person re-ranking ...'", ")", "\n", "distmat_qq", "=", "pairwise_distance", "(", "features", ",", "query", ",", "query", ")", "\n", "distmat_gg", "=", "pairwise_distance", "(", "features", ",", "gallery", ",", "gallery", ")", "\n", "distmat", "=", "re_ranking", "(", "distmat", ".", "numpy", "(", ")", ",", "distmat_qq", ".", "numpy", "(", ")", ",", "distmat_gg", ".", "numpy", "(", ")", ")", "\n", "return", "evaluate_all", "(", "query_features", ",", "gallery_features", ",", "distmat", ",", "query", "=", "query", ",", "gallery", "=", "gallery", ",", "cmc_flag", "=", "cmc_flag", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.extract_cnn_feature": [[16, 22], ["utils.to_torch().cuda", "model", "outputs.data.cpu.data.cpu", "utils.to_torch"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_torch"], ["def", "extract_cnn_feature", "(", "model", ",", "inputs", ")", ":", "\n", "    ", "inputs", "=", "to_torch", "(", "inputs", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "# print(outputs.shape)", "\n", "outputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.extract_features": [[24, 54], ["model.eval", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "collections.OrderedDict", "collections.OrderedDict", "time.time", "torch.no_grad", "enumerate", "utils.meters.AverageMeter.update", "evaluators.extract_cnn_feature", "zip", "utils.meters.AverageMeter.update", "time.time", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update", "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.extract_cnn_feature", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update"], ["", "def", "extract_features", "(", "model", ",", "data_loader", ",", "print_freq", "=", "50", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "features", "=", "OrderedDict", "(", ")", "\n", "labels", "=", "OrderedDict", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "imgs", ",", "fnames", ",", "pids", ",", "_", ",", "_", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "outputs", "=", "extract_cnn_feature", "(", "model", ",", "imgs", ")", "\n", "for", "fname", ",", "output", ",", "pid", "in", "zip", "(", "fnames", ",", "outputs", ",", "pids", ")", ":", "\n", "                ", "features", "[", "fname", "]", "=", "output", "\n", "labels", "[", "fname", "]", "=", "pid", "\n", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Extract Features: [{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ")", ")", "\n", "\n", "", "", "", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.pairwise_distance": [[56, 74], ["torch.cat", "torch.cat", "x.view.view", "y.view.view", "dist_m.addmm_", "len", "torch.cat", "x.view.view", "x.view.size", "y.view.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "y.view.t", "x.view.numpy", "y.view.numpy", "list", "torch.pow().sum", "dist_m.expand", "features[].unsqueeze", "features[].unsqueeze", "features.values", "torch.mm", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "x.view.t", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "pairwise_distance", "(", "features", ",", "query", "=", "None", ",", "gallery", "=", "None", ")", ":", "\n", "    ", "if", "query", "is", "None", "and", "gallery", "is", "None", ":", "\n", "        ", "n", "=", "len", "(", "features", ")", "\n", "x", "=", "torch", ".", "cat", "(", "list", "(", "features", ".", "values", "(", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist_m", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "2", "\n", "dist_m", "=", "dist_m", ".", "expand", "(", "n", ",", "n", ")", "-", "2", "*", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", "\n", "return", "dist_m", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", ",", "_", "in", "query", "]", ",", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", ",", "_", "in", "gallery", "]", ",", "0", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "m", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist_m", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_m", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "return", "dist_m", ",", "x", ".", "numpy", "(", ")", ",", "y", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.evaluators.evaluate_all": [[76, 108], ["evaluation_metrics.mean_ap", "print", "print", "dict", "evaluation_metrics.cmc", "print", "cmc_configs.items"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.ranking.mean_ap", "home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.ranking.cmc"], ["", "def", "evaluate_all", "(", "query_features", ",", "gallery_features", ",", "distmat", ",", "query", "=", "None", ",", "gallery", "=", "None", ",", "\n", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ",", "\n", "cmc_topk", "=", "(", "1", ",", "5", ",", "10", ")", ",", "cmc_flag", "=", "False", ")", ":", "\n", "    ", "if", "query", "is", "not", "None", "and", "gallery", "is", "not", "None", ":", "\n", "        ", "query_ids", "=", "[", "pid", "for", "_", ",", "pid", ",", "_", ",", "_", "in", "query", "]", "\n", "gallery_ids", "=", "[", "pid", "for", "_", ",", "pid", ",", "_", ",", "_", "in", "gallery", "]", "\n", "query_cams", "=", "[", "cam", "for", "_", ",", "_", ",", "cam", ",", "_", "in", "query", "]", "\n", "gallery_cams", "=", "[", "cam", "for", "_", ",", "_", ",", "cam", ",", "_", "in", "gallery", "]", "\n", "", "else", ":", "\n", "        ", "assert", "(", "query_ids", "is", "not", "None", "and", "gallery_ids", "is", "not", "None", "\n", "and", "query_cams", "is", "not", "None", "and", "gallery_cams", "is", "not", "None", ")", "\n", "\n", "# Compute mean AP", "\n", "", "mAP", "=", "mean_ap", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "query_cams", ",", "gallery_cams", ")", "\n", "print", "(", "'Mean AP: {:4.1%}'", ".", "format", "(", "mAP", ")", ")", "\n", "\n", "if", "not", "cmc_flag", ":", "\n", "        ", "return", "mAP", "\n", "\n", "", "cmc_configs", "=", "{", "\n", "'market1501'", ":", "dict", "(", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "True", ")", ",", "}", "\n", "cmc_scores", "=", "{", "name", ":", "cmc", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "\n", "query_cams", ",", "gallery_cams", ",", "**", "params", ")", "\n", "for", "name", ",", "params", "in", "cmc_configs", ".", "items", "(", ")", "}", "\n", "\n", "print", "(", "'CMC Scores:'", ")", "\n", "for", "k", "in", "cmc_topk", ":", "\n", "        ", "print", "(", "'  top-{:<4}{:12.1%}'", ".", "format", "(", "k", ",", "cmc_scores", "[", "'market1501'", "]", "[", "k", "-", "1", "]", ")", ")", "\n", "", "return", "cmc_scores", "[", "'market1501'", "]", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_rerank.k_reciprocal_neigh": [[20, 25], ["numpy.where"], "function", ["None"], ["def", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "k1", ")", ":", "\n", "    ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "return", "forward_k_neigh_index", "[", "fi", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_rerank.compute_jaccard_distance": [[27, 120], ["time.time", "faiss.get_num_gpus", "target_features.size", "range", "numpy.zeros", "range", "range", "numpy.zeros", "range", "print", "faiss.StandardGpuResources", "faiss.StandardGpuResources.setDefaultNullStreamAllDevices", "faiss_utils.search_raw_array_pytorch", "initial_rank.cpu().numpy.cpu().numpy", "nn_k1.append", "nn_k1_half.append", "numpy.unique", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "print", "faiss.StandardGpuResources", "faiss.GpuIndexFlatL2", "faiss_utils.index_init_cpu.add", "faiss_utils.search_index_pytorch", "faiss.StandardGpuResources.syncDefaultStreamCurrentDevice", "initial_rank.cpu().numpy.cpu().numpy", "faiss_rerank.k_reciprocal_neigh", "faiss_rerank.k_reciprocal_neigh", "torch.softmax().view().cpu().numpy().astype", "torch.softmax().view().cpu().numpy", "numpy.mean", "numpy.where", "len", "initial_rank.cpu().numpy.cpu", "target_features.size", "target_features.cpu().numpy", "faiss_utils.index_init_gpu", "faiss_utils.index_init_cpu.add", "faiss_utils.index_init_cpu.search", "faiss_utils.index_init_cpu", "faiss_utils.index_init_cpu.add", "faiss_utils.index_init_cpu.search", "int", "len", "numpy.append", "torch.mm", "torch.mm", "numpy.where", "numpy.minimum", "initial_rank.cpu().numpy.cpu", "target_features.size", "target_features.cpu().numpy", "target_features.cpu().numpy", "target_features.size", "target_features.cpu().numpy", "target_features.cpu().numpy", "numpy.around", "numpy.intersect1d", "len", "target_features[].unsqueeze().contiguous", "target_features[].t", "torch.softmax().view().cpu().numpy", "torch.softmax().view().cpu", "time.time", "target_features.cpu", "target_features.cpu", "target_features.cpu", "target_features.cpu", "target_features.cpu", "target_features[].unsqueeze", "torch.softmax().view().cpu", "torch.softmax().view", "torch.softmax().view", "torch.softmax", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.search_raw_array_pytorch", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.search_index_pytorch", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_rerank.k_reciprocal_neigh", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_rerank.k_reciprocal_neigh", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.index_init_gpu", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.index_init_cpu"], ["", "def", "compute_jaccard_distance", "(", "target_features", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "print_flag", "=", "True", ",", "search_option", "=", "0", ",", "use_float16", "=", "False", ")", ":", "\n", "    ", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "print_flag", ":", "\n", "        ", "print", "(", "'Computing jaccard distance...'", ")", "\n", "\n", "", "ngpus", "=", "faiss", ".", "get_num_gpus", "(", ")", "\n", "N", "=", "target_features", ".", "size", "(", "0", ")", "\n", "mat_type", "=", "np", ".", "float16", "if", "use_float16", "else", "np", ".", "float32", "\n", "\n", "if", "search_option", "==", "0", ":", "\n", "# GPU + PyTorch CUDA Tensors (1)", "\n", "        ", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "res", ".", "setDefaultNullStreamAllDevices", "(", ")", "\n", "_", ",", "initial_rank", "=", "search_raw_array_pytorch", "(", "res", ",", "target_features", ",", "target_features", ",", "k1", ")", "\n", "initial_rank", "=", "initial_rank", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "search_option", "==", "1", ":", "\n", "# GPU + PyTorch CUDA Tensors (2)", "\n", "        ", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "index", "=", "faiss", ".", "GpuIndexFlatL2", "(", "res", ",", "target_features", ".", "size", "(", "-", "1", ")", ")", "\n", "index", ".", "add", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "initial_rank", "=", "search_index_pytorch", "(", "index", ",", "target_features", ",", "k1", ")", "\n", "res", ".", "syncDefaultStreamCurrentDevice", "(", ")", "\n", "initial_rank", "=", "initial_rank", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "search_option", "==", "2", ":", "\n", "# GPU", "\n", "        ", "index", "=", "index_init_gpu", "(", "ngpus", ",", "target_features", ".", "size", "(", "-", "1", ")", ")", "\n", "index", ".", "add", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "initial_rank", "=", "index", ".", "search", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k1", ")", "\n", "", "else", ":", "\n", "# CPU", "\n", "        ", "index", "=", "index_init_cpu", "(", "target_features", ".", "size", "(", "-", "1", ")", ")", "\n", "index", ".", "add", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "initial_rank", "=", "index", ".", "search", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k1", ")", "\n", "\n", "", "nn_k1", "=", "[", "]", "\n", "nn_k1_half", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "nn_k1", ".", "append", "(", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "k1", ")", ")", "\n", "nn_k1_half", ".", "append", "(", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", ")", ")", "\n", "\n", "", "V", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "mat_type", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "k_reciprocal_index", "=", "nn_k1", "[", "i", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "candidate", "in", "k_reciprocal_index", ":", "\n", "            ", "candidate_k_reciprocal_index", "=", "nn_k1_half", "[", "candidate", "]", "\n", "if", "(", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2", "/", "3", "*", "len", "(", "\n", "candidate_k_reciprocal_index", ")", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "# element-wise unique", "\n", "dist", "=", "2", "-", "2", "*", "torch", ".", "mm", "(", "target_features", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", ",", "\n", "target_features", "[", "k_reciprocal_expansion_index", "]", ".", "t", "(", ")", ")", "\n", "if", "use_float16", ":", "\n", "            ", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "F", ".", "softmax", "(", "-", "dist", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "mat_type", ")", "\n", "", "else", ":", "\n", "            ", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "F", ".", "softmax", "(", "-", "dist", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "del", "nn_k1", ",", "nn_k1_half", "\n", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "mat_type", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "\n", "", "del", "initial_rank", "\n", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "# len(invIndex)=all_num", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "mat_type", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "(", "1", ",", "N", ")", ",", "dtype", "=", "mat_type", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "\n", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2", "-", "temp_min", ")", "\n", "# jaccard_dist[i] = 1-temp_min/(temp_max+1e-6)", "\n", "\n", "", "del", "invIndex", ",", "V", "\n", "\n", "pos_bool", "=", "(", "jaccard_dist", "<", "0", ")", "\n", "jaccard_dist", "[", "pos_bool", "]", "=", "0.0", "\n", "if", "print_flag", ":", "\n", "        ", "print", "(", "\"Jaccard distance computing time cost: {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "\n", "", "return", "jaccard_dist", "\n", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.rerank.re_ranking": [[31, 98], ["numpy.concatenate", "numpy.power().astype", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "range", "range", "numpy.zeros_like", "range", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "numpy.power", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "numpy.intersect1d", "len", "int", "int", "numpy.around", "numpy.around"], "function", ["None"], ["def", "re_ranking", "(", "q_g_dist", ",", "q_q_dist", ",", "g_g_dist", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", ":", "\n", "\n", "# The following naming, e.g. gallery_num, is different from outer scope.", "\n", "# Don't care about it.", "\n", "\n", "    ", "original_dist", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "concatenate", "(", "[", "q_q_dist", ",", "q_g_dist", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "q_g_dist", ".", "T", ",", "g_g_dist", "]", ",", "axis", "=", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "original_dist", "=", "np", ".", "power", "(", "original_dist", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "original_dist", "=", "np", ".", "transpose", "(", "1.", "*", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "query_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "\n", "gallery_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "+", "q_g_dist", ".", "shape", "[", "1", "]", "\n", "all_num", "=", "gallery_num", "\n", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2.", "/", "3", "*", "len", "(", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "1.", "*", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2.", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.__init__": [[9, 15], ["osutils.mkdir_if_missing", "open", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.osutils.mkdir_if_missing"], ["    ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.__del__": [[16, 18], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.__enter__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.__exit__": [[22, 24], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.write": [[25, 29], ["logging.Logger.console.write", "logging.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.write", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.flush": [[30, 35], ["logging.Logger.console.flush", "logging.Logger.file.flush", "os.fsync", "logging.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.close": [[36, 40], ["logging.Logger.console.close", "logging.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.close", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_FloatTensor": [[7, 12], ["x.is_contiguous", "faiss.cast_integer_to_float_ptr", "x.storage().data_ptr", "x.storage_offset", "x.storage"], "function", ["None"], ["def", "swig_ptr_from_FloatTensor", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "is_contiguous", "(", ")", "\n", "assert", "x", ".", "dtype", "==", "torch", ".", "float32", "\n", "return", "faiss", ".", "cast_integer_to_float_ptr", "(", "\n", "x", ".", "storage", "(", ")", ".", "data_ptr", "(", ")", "+", "x", ".", "storage_offset", "(", ")", "*", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_LongTensor": [[14, 19], ["x.is_contiguous", "faiss.cast_integer_to_long_ptr", "x.storage().data_ptr", "x.storage_offset", "x.storage"], "function", ["None"], ["", "def", "swig_ptr_from_LongTensor", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "is_contiguous", "(", ")", "\n", "assert", "x", ".", "dtype", "==", "torch", ".", "int64", ",", "'dtype=%s'", "%", "x", ".", "dtype", "\n", "return", "faiss", ".", "cast_integer_to_long_ptr", "(", "\n", "x", ".", "storage", "(", ")", ".", "data_ptr", "(", ")", "+", "x", ".", "storage_offset", "(", ")", "*", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.search_index_pytorch": [[21, 45], ["x.is_contiguous", "x.size", "torch.cuda.synchronize", "faiss_utils.swig_ptr_from_FloatTensor", "faiss_utils.swig_ptr_from_LongTensor", "faiss_utils.swig_ptr_from_FloatTensor", "index.search_c", "torch.cuda.synchronize", "torch.empty", "torch.empty", "torch.empty.size", "torch.empty.size"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_LongTensor", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_FloatTensor"], ["", "def", "search_index_pytorch", "(", "index", ",", "x", ",", "k", ",", "D", "=", "None", ",", "I", "=", "None", ")", ":", "\n", "    ", "\"\"\"call the search function of an index with pytorch tensor I/O (CPU\n    and GPU supported)\"\"\"", "\n", "assert", "x", ".", "is_contiguous", "(", ")", "\n", "n", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "assert", "d", "==", "index", ".", "d", "\n", "\n", "if", "D", "is", "None", ":", "\n", "        ", "D", "=", "torch", ".", "empty", "(", "(", "n", ",", "k", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "assert", "D", ".", "size", "(", ")", "==", "(", "n", ",", "k", ")", "\n", "\n", "", "if", "I", "is", "None", ":", "\n", "        ", "I", "=", "torch", ".", "empty", "(", "(", "n", ",", "k", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "assert", "I", ".", "size", "(", ")", "==", "(", "n", ",", "k", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "xptr", "=", "swig_ptr_from_FloatTensor", "(", "x", ")", "\n", "Iptr", "=", "swig_ptr_from_LongTensor", "(", "I", ")", "\n", "Dptr", "=", "swig_ptr_from_FloatTensor", "(", "D", ")", "\n", "index", ".", "search_c", "(", "n", ",", "xptr", ",", "\n", "k", ",", "Dptr", ",", "Iptr", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "return", "D", ",", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.search_raw_array_pytorch": [[47, 94], ["xq.t.size", "xq.t.is_contiguous", "faiss_utils.swig_ptr_from_FloatTensor", "xb.t.size", "xb.t.is_contiguous", "faiss_utils.swig_ptr_from_FloatTensor", "faiss_utils.swig_ptr_from_FloatTensor", "faiss_utils.swig_ptr_from_LongTensor", "faiss.bruteForceKnn", "xq.t.t().is_contiguous", "xb.t.t().is_contiguous", "torch.empty", "torch.empty", "xq.t.t", "TypeError", "xb.t.t", "TypeError", "xq.t.t", "xb.t.t"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.swig_ptr_from_LongTensor"], ["", "def", "search_raw_array_pytorch", "(", "res", ",", "xb", ",", "xq", ",", "k", ",", "D", "=", "None", ",", "I", "=", "None", ",", "\n", "metric", "=", "faiss", ".", "METRIC_L2", ")", ":", "\n", "    ", "assert", "xb", ".", "device", "==", "xq", ".", "device", "\n", "\n", "nq", ",", "d", "=", "xq", ".", "size", "(", ")", "\n", "if", "xq", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xq_row_major", "=", "True", "\n", "", "elif", "xq", ".", "t", "(", ")", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xq", "=", "xq", ".", "t", "(", ")", "# I initially wrote xq:t(), Lua is still haunting me :-)", "\n", "xq_row_major", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'matrix should be row or column-major'", ")", "\n", "\n", "", "xq_ptr", "=", "swig_ptr_from_FloatTensor", "(", "xq", ")", "\n", "\n", "nb", ",", "d2", "=", "xb", ".", "size", "(", ")", "\n", "assert", "d2", "==", "d", "\n", "if", "xb", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xb_row_major", "=", "True", "\n", "", "elif", "xb", ".", "t", "(", ")", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xb", "=", "xb", ".", "t", "(", ")", "\n", "xb_row_major", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'matrix should be row or column-major'", ")", "\n", "", "xb_ptr", "=", "swig_ptr_from_FloatTensor", "(", "xb", ")", "\n", "\n", "if", "D", "is", "None", ":", "\n", "        ", "D", "=", "torch", ".", "empty", "(", "nq", ",", "k", ",", "device", "=", "xb", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "assert", "D", ".", "shape", "==", "(", "nq", ",", "k", ")", "\n", "assert", "D", ".", "device", "==", "xb", ".", "device", "\n", "\n", "", "if", "I", "is", "None", ":", "\n", "        ", "I", "=", "torch", ".", "empty", "(", "nq", ",", "k", ",", "device", "=", "xb", ".", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "assert", "I", ".", "shape", "==", "(", "nq", ",", "k", ")", "\n", "assert", "I", ".", "device", "==", "xb", ".", "device", "\n", "\n", "", "D_ptr", "=", "swig_ptr_from_FloatTensor", "(", "D", ")", "\n", "I_ptr", "=", "swig_ptr_from_LongTensor", "(", "I", ")", "\n", "\n", "faiss", ".", "bruteForceKnn", "(", "res", ",", "metric", ",", "\n", "xb_ptr", ",", "xb_row_major", ",", "nb", ",", "\n", "xq_ptr", ",", "xq_row_major", ",", "nq", ",", "\n", "d", ",", "k", ",", "D_ptr", ",", "I_ptr", ")", "\n", "\n", "return", "D", ",", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.kMeans": [[96, 105], ["faiss.Kmeans", "faiss.Kmeans.train", "faiss.Kmeans.index.search", "data.cpu.cpu", "data.cpu.numpy", "data.cpu.numpy", "labels.squeeze"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.reid.trainers.Trainer.train"], ["", "def", "kMeans", "(", "data", ",", "numCluster", ",", "useGpu", "=", "True", ")", ":", "\n", "    ", "kFunc", "=", "faiss", ".", "Kmeans", "(", "data", ".", "shape", "[", "1", "]", ",", "numCluster", ",", "gpu", "=", "useGpu", ")", "\n", "kFunc", ".", "cp", ".", "max_points_per_centroid", "=", "(", "(", "data", ".", "shape", "[", "0", "]", "+", "numCluster", "-", "1", ")", "//", "numCluster", ")", "\n", "if", "data", ".", "is_cuda", ":", "\n", "        ", "data", "=", "data", ".", "cpu", "(", ")", "\n", "", "kFunc", ".", "train", "(", "data", ".", "numpy", "(", ")", ")", "\n", "# assign labels", "\n", "_", ",", "labels", "=", "kFunc", ".", "index", ".", "search", "(", "data", ".", "numpy", "(", ")", ",", "1", ")", "\n", "return", "kFunc", ".", "centroids", ",", "labels", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.index_init_gpu": [[107, 122], ["range", "faiss.IndexShards", "faiss.IndexShards.reset", "faiss.GpuIndexFlatConfig", "flat_config.append", "faiss.StandardGpuResources", "faiss.GpuIndexFlatL2", "faiss.IndexShards.add_shard", "range", "range"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.reset"], ["", "def", "index_init_gpu", "(", "ngpus", ",", "feat_dim", ")", ":", "\n", "    ", "flat_config", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ngpus", ")", ":", "\n", "        ", "cfg", "=", "faiss", ".", "GpuIndexFlatConfig", "(", ")", "\n", "cfg", ".", "useFloat16", "=", "False", "\n", "cfg", ".", "device", "=", "i", "\n", "flat_config", ".", "append", "(", "cfg", ")", "\n", "\n", "", "res", "=", "[", "faiss", ".", "StandardGpuResources", "(", ")", "for", "i", "in", "range", "(", "ngpus", ")", "]", "\n", "indexes", "=", "[", "faiss", ".", "GpuIndexFlatL2", "(", "res", "[", "i", "]", ",", "feat_dim", ",", "flat_config", "[", "i", "]", ")", "for", "i", "in", "range", "(", "ngpus", ")", "]", "\n", "index", "=", "faiss", ".", "IndexShards", "(", "feat_dim", ")", "\n", "for", "sub_index", "in", "indexes", ":", "\n", "        ", "index", ".", "add_shard", "(", "sub_index", ")", "\n", "", "index", ".", "reset", "(", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.faiss_utils.index_init_cpu": [[124, 126], ["faiss.IndexFlatL2"], "function", ["None"], ["", "def", "index_init_cpu", "(", "feat_dim", ")", ":", "\n", "    ", "return", "faiss", ".", "IndexFlatL2", "(", "feat_dim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.osutils.mkdir_if_missing": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.read_json": [[12, 16], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load"], ["def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.write_json": [[18, 22], ["osutils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.osutils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.save_checkpoint": [[24, 29], ["osutils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.osutils.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.load_checkpoint": [[31, 39], ["os.isfile", "torch.load", "print", "ValueError", "torch.device"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load"], ["", "", "def", "load_checkpoint", "(", "fpath", ")", ":", "\n", "    ", "if", "osp", ".", "isfile", "(", "fpath", ")", ":", "\n", "# checkpoint = torch.load(fpath)", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "fpath", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.serialization.copy_state_dict": [[41, 62], ["model.state_dict", "set", "state_dict.items", "isinstance", "tgt_state[].copy_", "set.add", "set", "len", "print", "name.startswith", "param.size", "tgt_state[].size", "print", "model.state_dict.keys", "param.size", "tgt_state[].size", "len"], "function", ["None"], ["", "", "def", "copy_state_dict", "(", "state_dict", ",", "model", ",", "strip", "=", "None", ")", ":", "\n", "    ", "tgt_state", "=", "model", ".", "state_dict", "(", ")", "\n", "copied_names", "=", "set", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "strip", "is", "not", "None", "and", "name", ".", "startswith", "(", "strip", ")", ":", "\n", "            ", "name", "=", "name", "[", "len", "(", "strip", ")", ":", "]", "\n", "", "if", "name", "not", "in", "tgt_state", ":", "\n", "            ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "Parameter", ")", ":", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "if", "param", ".", "size", "(", ")", "!=", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "print", "(", "'mismatch:'", ",", "name", ",", "param", ".", "size", "(", ")", ",", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ")", "\n", "continue", "\n", "", "tgt_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "copied_names", ".", "add", "(", "name", ")", "\n", "\n", "", "missing", "=", "set", "(", "tgt_state", ".", "keys", "(", ")", ")", "-", "copied_names", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"missing keys in state_dict:\"", ",", "missing", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_numpy": [[6, 13], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["from", ".", "import", "utils", "\n", "from", ".", "import", "evaluators", "\n", "from", ".", "import", "trainers", "\n", "\n", "__version__", "=", "'0.1.0'", "\n", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_torch": [[15, 22], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.transforms.RectScale.__init__": [[10, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.transforms.RectScale.__call__": [[15, 20], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", "==", "self", ".", "height", "and", "w", "==", "self", ".", "width", ":", "\n", "            ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.transforms.RandomSizedRectCrop.__init__": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.transforms.RandomSizedRectCrop.__call__": [[28, 50], ["range", "transforms.RectScale", "RectScale.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.crop.crop.crop", "img.crop.crop.resize", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.64", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "2", ",", "3", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "RectScale", "(", "self", ".", "height", ",", "self", ".", "width", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "return", "scale", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.transforms.RandomErasing.__init__": [[64, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.transforms.RandomErasing.__call__": [[71, 97], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.preprocessor.Preprocessor.__init__": [[12, 17], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "root", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Preprocessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.preprocessor.Preprocessor.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.preprocessor.Preprocessor.__getitem__": [[21, 23], ["preprocessor.Preprocessor._get_single_item"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.data.preprocessor.Preprocessor._get_single_item"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "_get_single_item", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.preprocessor.Preprocessor._get_single_item": [[24, 36], ["PIL.Image.open().convert", "os.join", "os.join", "preprocessor.Preprocessor.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "_get_single_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "fname", ",", "pid", ",", "camid", ",", "dataset_id", "=", "self", ".", "dataset", "[", "index", "]", "\n", "fpath", "=", "fname", "\n", "if", "self", ".", "root", "is", "not", "None", ":", "\n", "            ", "fpath", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "fname", ")", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "fpath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "fname", ",", "pid", ",", "camid", ",", "dataset_id", ",", "index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.RandomIdentitySampler.__init__": [[20, 28], ["collections.defaultdict", "enumerate", "list", "len", "sampler.RandomIdentitySampler.index_dic[].append", "sampler.RandomIdentitySampler.index_dic.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.RandomIdentitySampler.__len__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.RandomIdentitySampler.__iter__": [[32, 44], ["torch.randperm().tolist", "iter", "ret.extend", "torch.randperm", "len", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ")", ".", "tolist", "(", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.RandomMultipleGallerySampler.__init__": [[47, 62], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "enumerate", "list", "len", "sampler.RandomMultipleGallerySampler.pid_cam[].append", "sampler.RandomMultipleGallerySampler.pid_index[].append", "sampler.RandomMultipleGallerySampler.pid_index.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "index_pid", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "pid_cam", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pid_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "cam", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "if", "(", "pid", "<", "0", ")", ":", "continue", "\n", "self", ".", "index_pid", "[", "index", "]", "=", "pid", "\n", "self", ".", "pid_cam", "[", "pid", "]", ".", "append", "(", "cam", ")", "\n", "self", ".", "pid_index", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "pid_index", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.RandomMultipleGallerySampler.__len__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.RandomMultipleGallerySampler.__iter__": [[66, 105], ["torch.randperm().tolist", "iter", "random.choice", "ret.append", "sampler.No_index", "torch.randperm", "sampler.No_index", "len", "len", "numpy.random.choice", "numpy.random.choice", "ret.append", "len", "numpy.random.choice", "numpy.random.choice", "ret.append"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.No_index", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.No_index"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "pids", ")", ")", ".", "tolist", "(", ")", "\n", "ret", "=", "[", "]", "\n", "\n", "for", "kid", "in", "indices", ":", "\n", "            ", "i", "=", "random", ".", "choice", "(", "self", ".", "pid_index", "[", "self", ".", "pids", "[", "kid", "]", "]", ")", "\n", "\n", "_", ",", "i_pid", ",", "i_cam", ",", "_", "=", "self", ".", "data_source", "[", "i", "]", "\n", "\n", "ret", ".", "append", "(", "i", ")", "\n", "\n", "pid_i", "=", "self", ".", "index_pid", "[", "i", "]", "\n", "cams", "=", "self", ".", "pid_cam", "[", "pid_i", "]", "\n", "index", "=", "self", ".", "pid_index", "[", "pid_i", "]", "\n", "select_cams", "=", "No_index", "(", "cams", ",", "i_cam", ")", "\n", "\n", "if", "select_cams", ":", "\n", "\n", "                ", "if", "len", "(", "select_cams", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "cam_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "cam_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "\n", "", "for", "kk", "in", "cam_indexes", ":", "\n", "                    ", "ret", ".", "append", "(", "index", "[", "kk", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "select_indexes", "=", "No_index", "(", "index", ",", "i", ")", "\n", "if", "(", "not", "select_indexes", ")", ":", "continue", "\n", "if", "len", "(", "select_indexes", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "ind_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_indexes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "ind_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_indexes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "\n", "", "for", "kk", "in", "ind_indexes", ":", "\n", "                    ", "ret", ".", "append", "(", "index", "[", "kk", "]", ")", "\n", "\n", "\n", "", "", "", "return", "iter", "(", "ret", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.sampler.No_index": [[14, 17], ["isinstance", "enumerate"], "function", ["None"], ["def", "No_index", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "isinstance", "(", "a", ",", "list", ")", "\n", "return", "[", "i", "for", "i", ",", "j", "in", "enumerate", "(", "a", ")", "if", "j", "!=", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info": [[10, 21], ["set", "set", "len", "len", "len"], "methods", ["None"], ["def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "        ", "pids", ",", "cams", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "pid", ",", "camid", ",", "_", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "return", "num_pids", ",", "num_imgs", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.print_dataset_statistics": [[22, 24], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.images_dir": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "images_dir", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseImageDataset.print_dataset_statistics": [[35, 48], ["base_dataset.BaseImageDataset.get_imagedata_info", "base_dataset.BaseImageDataset.get_imagedata_info", "base_dataset.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.__init__.IterLoader.__init__": [[8, 12], ["None"], "methods", ["None"], ["from", ".", "import", "trainers", "\n", "\n", "__version__", "=", "'0.1.0'", "\n", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.__init__.IterLoader.__len__": [[13, 17], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.__init__.IterLoader.new_epoch": [[18, 20], ["iter"], "methods", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.__init__.IterLoader.next": [[21, 27], ["__init__.IterLoader.next"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.data.__init__.IterLoader.next"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v2.MSMT17_V2.__init__": [[7, 23], ["os.join", "msmt17v2.MSMT17_V2.load"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "combine_all", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "images_dir", "=", "osp", ".", "join", "(", "root", ",", "'MSMT17_V2'", ")", "\n", "self", ".", "combine_all", "=", "combine_all", "\n", "self", ".", "train_path", "=", "'mask_train_v2'", "\n", "self", ".", "test_path", "=", "'mask_test_v2'", "\n", "self", ".", "train_list_file", "=", "'list_train.txt'", "\n", "self", ".", "val_list_file", "=", "'list_val.txt'", "\n", "self", ".", "gallery_list_file", "=", "'list_gallery.txt'", "\n", "self", ".", "query_list_file", "=", "'list_query.txt'", "\n", "self", ".", "gallery_path", "=", "self", ".", "test_path", "\n", "self", ".", "query_path", "=", "self", ".", "test_path", "\n", "self", ".", "train", ",", "self", ".", "val", ",", "self", ".", "query", ",", "self", ".", "gallery", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_val_ids", ",", "self", ".", "num_query_ids", ",", "self", ".", "num_gallery_ids", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "self", ".", "has_time_info", "=", "False", "\n", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v2.MSMT17_V2.preprocess": [[24, 39], ["enumerate", "open", "txt.readlines", "img_info.split", "int", "data.append", "int", "os.join", "int", "len", "os.join", "img_path.split"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "list_file", ",", "subpath", ")", ":", "\n", "        ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "images_dir", ",", "list_file", ")", ",", "'r'", ")", "as", "txt", ":", "\n", "            ", "lines", "=", "txt", ".", "readlines", "(", ")", "\n", "\n", "", "data", "=", "[", "]", "\n", "all_pids", "=", "{", "}", "\n", "\n", "for", "img_idx", ",", "img_info", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "img_path", ",", "pid", "=", "img_info", ".", "split", "(", "' '", ")", "\n", "pid", "=", "int", "(", "pid", ")", "# no need to relabel", "\n", "if", "pid", "not", "in", "all_pids", ":", "\n", "                ", "all_pids", "[", "pid", "]", "=", "pid", "\n", "", "camid", "=", "int", "(", "img_path", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "-", "1", "# index starts from 0", "\n", "data", ".", "append", "(", "(", "osp", ".", "join", "(", "subpath", ",", "img_path", ")", ",", "pid", ",", "camid", ",", "3", ")", ")", "\n", "", "return", "data", ",", "int", "(", "len", "(", "all_pids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v2.MSMT17_V2.load": [[40, 70], ["msmt17v2.MSMT17_V2.preprocess", "msmt17v2.MSMT17_V2.preprocess", "msmt17v2.MSMT17_V2.preprocess", "msmt17v2.MSMT17_V2.preprocess", "print", "print", "print", "print", "print", "print", "os.join", "os.join", "os.join", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", ",", "self", ".", "num_train_pids", "=", "self", ".", "preprocess", "(", "self", ".", "train_list_file", ",", "self", ".", "train_path", ")", "\n", "self", ".", "val", ",", "self", ".", "num_val_ids", "=", "self", ".", "preprocess", "(", "self", ".", "val_list_file", ",", "self", ".", "train_path", ")", "\n", "self", ".", "gallery", ",", "self", ".", "num_gallery_ids", "=", "self", ".", "preprocess", "(", "self", ".", "gallery_list_file", ",", "self", ".", "test_path", ")", "\n", "self", ".", "query", ",", "self", ".", "num_query_ids", "=", "self", ".", "preprocess", "(", "self", ".", "query_list_file", ",", "self", ".", "test_path", ")", "\n", "\n", "self", ".", "train", "+=", "self", ".", "val", "\n", "if", "self", ".", "combine_all", ":", "\n", "            ", "for", "item", "in", "self", ".", "train", ":", "\n", "                ", "item", "[", "0", "]", "=", "osp", ".", "join", "(", "self", ".", "train_path", ",", "item", "[", "0", "]", ")", "\n", "", "for", "item", "in", "self", ".", "gallery", ":", "\n", "                ", "item", "[", "0", "]", "=", "osp", ".", "join", "(", "self", ".", "gallery_path", ",", "item", "[", "0", "]", ")", "\n", "item", "[", "1", "]", "+=", "self", ".", "num_train_pids", "\n", "", "for", "item", "in", "self", ".", "query", ":", "\n", "                ", "item", "[", "0", "]", "=", "osp", ".", "join", "(", "self", ".", "query_path", ",", "item", "[", "0", "]", ")", "\n", "item", "[", "1", "]", "+=", "self", ".", "num_train_pids", "\n", "", "self", ".", "train", "+=", "self", ".", "gallery", "\n", "self", ".", "train", "+=", "self", ".", "query", "\n", "self", ".", "num_train_pids", "+=", "self", ".", "num_gallery_ids", "\n", "self", ".", "train_path", "=", "''", "\n", "\n", "", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"dataset loaded\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ---------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_train_pids", ",", "len", "(", "self", ".", "train", ")", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_query_ids", ",", "len", "(", "self", ".", "query", ")", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_gallery_ids", ",", "len", "(", "self", ".", "gallery", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.CUHK03.__init__": [[69, 81], ["object.__init__", "os.join", "cuhk03.CUHK03._check_integrity", "cuhk03.CUHK03.load"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.CUHK03._check_integrity", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_id", "=", "0", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "super", "(", "CUHK03", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "osp", ".", "join", "(", "root", ",", "'cuhk03_release'", ")", "\n", "self", ".", "split_id", "=", "split_id", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "meta", "=", "None", "\n", "self", ".", "split", "=", "None", "\n", "self", ".", "train", ",", "self", ".", "val", ",", "self", ".", "trainval", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "query", ",", "self", ".", "gallery", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "num_train_ids", ",", "self", ".", "num_val_ids", ",", "self", ".", "num_trainval_ids", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "_check_integrity", "(", ")", "\n", "self", ".", "load", "(", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.CUHK03.images_dir": [[81, 84], ["os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "images_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.CUHK03.load": [[85, 119], ["cuhk03.read_json", "numpy.asarray", "numpy.random.shuffle", "len", "sorted", "cuhk03.read_json", "cuhk03._pluck", "cuhk03._pluck_query", "cuhk03._pluck_gallery", "len", "os.join", "len", "ValueError", "os.join", "print", "print", "print", "print", "print", "print", "print", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.read_json", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.read_json", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03._pluck", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03._pluck_query", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03._pluck_gallery"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "splits", "=", "read_json", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", ")", "\n", "if", "self", ".", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"split_id exceeds total splits {}\"", "\n", ".", "format", "(", "len", "(", "splits", ")", ")", ")", "\n", "", "self", ".", "split", "=", "splits", "[", "self", ".", "split_id", "]", "\n", "\n", "# Randomly split train / val", "\n", "trainval_pids", "=", "np", ".", "asarray", "(", "self", ".", "split", "[", "'trainval'", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "trainval_pids", ")", "\n", "num", "=", "len", "(", "trainval_pids", ")", "\n", "\n", "train_pids", "=", "sorted", "(", "trainval_pids", ")", "\n", "\n", "self", ".", "meta", "=", "read_json", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'meta.json'", ")", ")", "\n", "identities", "=", "self", ".", "meta", "[", "'identities'", "]", "\n", "self", ".", "train", "=", "_pluck", "(", "identities", ",", "train_pids", ",", "relabel", "=", "True", ")", "\n", "self", ".", "query", "=", "_pluck_query", "(", "identities", ",", "self", ".", "split", "[", "'query'", "]", ")", "\n", "#self.gallery = _pluck(identities, self.split['gallery'])", "\n", "self", ".", "gallery", "=", "_pluck_gallery", "(", "identities", ",", "self", ".", "split", "[", "'gallery'", "]", ")", "\n", "self", ".", "num_train_pids", "=", "len", "(", "train_pids", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"dataset loaded\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ---------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_train_pids", ",", "len", "(", "self", ".", "train", ")", ")", ")", "\n", "print", "(", "\"  trainval | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_trainval_ids", ",", "len", "(", "self", ".", "trainval", ")", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "len", "(", "self", ".", "split", "[", "'query'", "]", ")", ",", "len", "(", "self", ".", "query", ")", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", "\n", ".", "format", "(", "len", "(", "self", ".", "split", "[", "'gallery'", "]", ")", ",", "len", "(", "self", ".", "gallery", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.CUHK03._check_integrity": [[120, 124], ["os.isdir", "os.isfile", "os.isfile", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", ")", "and", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'meta.json'", ")", ")", "and", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'splits.json'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03.read_json": [[6, 10], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load"], ["def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03._pluck": [[12, 26], ["enumerate", "enumerate", "map", "os.splitext", "name.split", "ret.append", "ret.append"], "function", ["None"], ["", "def", "_pluck", "(", "identities", ",", "indices", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "index", ",", "pid", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "pid_images", "=", "identities", "[", "pid", "]", "\n", "for", "camid", ",", "cam_images", "in", "enumerate", "(", "pid_images", ")", ":", "\n", "            ", "for", "fname", "in", "cam_images", ":", "\n", "                ", "name", "=", "osp", ".", "splitext", "(", "fname", ")", "[", "0", "]", "\n", "x", ",", "y", ",", "_", "=", "map", "(", "int", ",", "name", ".", "split", "(", "'_'", ")", ")", "\n", "assert", "pid", "==", "x", "and", "camid", "==", "y", "\n", "if", "relabel", ":", "\n", "                    ", "ret", ".", "append", "(", "(", "fname", ",", "index", ",", "camid", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ret", ".", "append", "(", "(", "fname", ",", "pid", ",", "camid", ",", "0", ")", ")", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03._pluck_gallery": [[27, 51], ["enumerate", "enumerate", "len", "map", "map", "os.splitext", "name.split", "ret.append", "ret.append", "os.splitext", "name.split", "ret.append", "ret.append"], "function", ["None"], ["", "def", "_pluck_gallery", "(", "identities", ",", "indices", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "index", ",", "pid", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "pid_images", "=", "identities", "[", "pid", "]", "\n", "for", "camid", ",", "cam_images", "in", "enumerate", "(", "pid_images", ")", ":", "\n", "            ", "if", "len", "(", "cam_images", "[", ":", "-", "1", "]", ")", "==", "0", ":", "\n", "                ", "for", "fname", "in", "cam_images", ":", "\n", "                    ", "name", "=", "osp", ".", "splitext", "(", "fname", ")", "[", "0", "]", "\n", "x", ",", "y", ",", "_", "=", "map", "(", "int", ",", "name", ".", "split", "(", "'_'", ")", ")", "\n", "assert", "pid", "==", "x", "and", "camid", "==", "y", "\n", "if", "relabel", ":", "\n", "                        ", "ret", ".", "append", "(", "(", "fname", ",", "index", ",", "camid", ")", ")", "\n", "", "else", ":", "\n", "                        ", "ret", ".", "append", "(", "(", "fname", ",", "pid", ",", "camid", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "fname", "in", "cam_images", "[", ":", "-", "1", "]", ":", "\n", "                    ", "name", "=", "osp", ".", "splitext", "(", "fname", ")", "[", "0", "]", "\n", "x", ",", "y", ",", "_", "=", "map", "(", "int", ",", "name", ".", "split", "(", "'_'", ")", ")", "\n", "assert", "pid", "==", "x", "and", "camid", "==", "y", "\n", "if", "relabel", ":", "\n", "                        ", "ret", ".", "append", "(", "(", "fname", ",", "index", ",", "camid", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                        ", "ret", ".", "append", "(", "(", "fname", ",", "pid", ",", "camid", ",", "0", ")", ")", "\n", "", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhk03._pluck_query": [[52, 66], ["enumerate", "enumerate", "map", "os.splitext", "name.split", "ret.append", "ret.append"], "function", ["None"], ["", "def", "_pluck_query", "(", "identities", ",", "indices", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "index", ",", "pid", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "pid_images", "=", "identities", "[", "pid", "]", "\n", "for", "camid", ",", "cam_images", "in", "enumerate", "(", "pid_images", ")", ":", "\n", "            ", "for", "fname", "in", "cam_images", "[", "-", "1", ":", "]", ":", "\n", "                ", "name", "=", "osp", ".", "splitext", "(", "fname", ")", "[", "0", "]", "\n", "x", ",", "y", ",", "_", "=", "map", "(", "int", ",", "name", ".", "split", "(", "'_'", ")", ")", "\n", "assert", "pid", "==", "x", "and", "camid", "==", "y", "\n", "if", "relabel", ":", "\n", "                    ", "ret", ".", "append", "(", "(", "fname", ",", "index", ",", "camid", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ret", ".", "append", "(", "(", "fname", ",", "pid", ",", "camid", ",", "0", ")", ")", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.__init__": [[9, 18], ["os.join", "cuhknp.CUHK_NP.load"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "join", "(", "root", ",", "'detected'", ")", "\n", "self", ".", "train_path", "=", "'bounding_box_train'", "\n", "self", ".", "gallery_path", "=", "'bounding_box_test'", "\n", "self", ".", "query_path", "=", "'query'", "\n", "self", ".", "train", ",", "self", ".", "query", ",", "self", ".", "gallery", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_query_pids", ",", "self", ".", "num_gallery_pids", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "has_time_info", "=", "False", "\n", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.images_dir": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "images_dir", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess": [[23, 42], ["re.compile", "sorted", "glob.glob.glob", "os.basename", "map", "ret.append", "int", "os.join", "re.compile.search().groups", "len", "len", "re.compile.search"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "path", ",", "relabel", "=", "True", ")", ":", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "all_pids", "=", "{", "}", "\n", "ret", "=", "[", "]", "\n", "fpaths", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "path", ",", "'*.png'", ")", ")", ")", "\n", "for", "fpath", "in", "fpaths", ":", "\n", "            ", "fname", "=", "osp", ".", "basename", "(", "fpath", ")", "\n", "pid", ",", "cam", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "fname", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "\n", "if", "relabel", ":", "\n", "                ", "if", "pid", "not", "in", "all_pids", ":", "\n", "                    ", "all_pids", "[", "pid", "]", "=", "len", "(", "all_pids", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "pid", "not", "in", "all_pids", ":", "\n", "                    ", "all_pids", "[", "pid", "]", "=", "pid", "\n", "", "", "pid", "=", "all_pids", "[", "pid", "]", "\n", "cam", "-=", "1", "\n", "ret", ".", "append", "(", "(", "fpath", ",", "pid", ",", "cam", ",", "0", ")", ")", "\n", "", "return", "ret", ",", "int", "(", "len", "(", "all_pids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.load": [[43, 57], ["cuhknp.CUHK_NP.preprocess", "cuhknp.CUHK_NP.preprocess", "cuhknp.CUHK_NP.preprocess", "print", "print", "print", "print", "print", "print", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.cuhknp.CUHK_NP.preprocess"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", ",", "self", ".", "num_train_pids", "=", "self", ".", "preprocess", "(", "self", ".", "train_path", ")", "\n", "self", ".", "gallery", ",", "self", ".", "num_gallery_pids", "=", "self", ".", "preprocess", "(", "self", ".", "gallery_path", ",", "False", ")", "\n", "self", ".", "query", ",", "self", ".", "num_query_pids", "=", "self", ".", "preprocess", "(", "self", ".", "query_path", ",", "False", ")", "\n", "\n", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"dataset loaded\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ---------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_train_pids", ",", "len", "(", "self", ".", "train", ")", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_query_pids", ",", "len", "(", "self", ".", "query", ")", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_gallery_pids", ",", "len", "(", "self", ".", "gallery", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.__init__": [[30, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "train", ",", "self", ".", "val", ",", "self", ".", "trainval", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "query", ",", "self", ".", "gallery", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "num_train_ids", ",", "self", ".", "num_val_ids", ",", "self", ".", "num_trainval_ids", "=", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.images_dir": [[36, 39], ["os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "images_dir", "(", "self", ")", ":", "\n", "        ", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "'MSMT17_V1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load": [[40, 59], ["os.join", "msmt17v1._pluck_msmt", "msmt17v1._pluck_msmt", "msmt17v1._pluck_msmt", "msmt17v1._pluck_msmt", "len", "os.join", "os.join", "os.join", "os.join", "list", "print", "print", "print", "print", "print", "print", "set().union", "set", "len", "len", "len", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1._pluck_msmt", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1._pluck_msmt", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1._pluck_msmt", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1._pluck_msmt"], ["", "def", "load", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "exdir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'MSMT17_V1'", ")", "\n", "self", ".", "train", ",", "train_pids", "=", "_pluck_msmt", "(", "osp", ".", "join", "(", "exdir", ",", "'list_train.txt'", ")", ",", "'bounding_box_train'", ")", "\n", "self", ".", "val", ",", "val_pids", "=", "_pluck_msmt", "(", "osp", ".", "join", "(", "exdir", ",", "'list_val.txt'", ")", ",", "'bounding_box_train'", ")", "\n", "self", ".", "train", "=", "self", ".", "train", "+", "self", ".", "val", "\n", "self", ".", "query", ",", "query_pids", "=", "_pluck_msmt", "(", "osp", ".", "join", "(", "exdir", ",", "'list_query.txt'", ")", ",", "'query'", ")", "\n", "self", ".", "gallery", ",", "gallery_pids", "=", "_pluck_msmt", "(", "osp", ".", "join", "(", "exdir", ",", "'list_gallery.txt'", ")", ",", "'bounding_box_test'", ")", "\n", "self", ".", "num_train_pids", "=", "len", "(", "list", "(", "set", "(", "train_pids", ")", ".", "union", "(", "set", "(", "val_pids", ")", ")", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"dataset loaded\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ---------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "self", ".", "num_train_pids", ",", "len", "(", "self", ".", "train", ")", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", "\n", ".", "format", "(", "len", "(", "query_pids", ")", ",", "len", "(", "self", ".", "query", ")", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", "\n", ".", "format", "(", "len", "(", "gallery_pids", ")", ",", "len", "(", "self", ".", "gallery", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.MSMT17_V1.__init__": [[63, 70], ["msmt17v1.Dataset_MSMT.__init__", "msmt17v1.MSMT17_V1.load", "msmt17v1.MSMT17_V1.download"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.Dataset_MSMT.load", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.MSMT17_V1.download"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_id", "=", "0", ",", "download", "=", "True", ")", ":", "\n", "        ", "super", "(", "MSMT17_V1", ",", "self", ")", ".", "__init__", "(", "root", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1.MSMT17_V1.download": [[71, 81], ["os.join", "utils.osutils.mkdir_if_missing", "os.join", "os.isdir", "print", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.osutils.mkdir_if_missing"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "raw_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ")", "\n", "mkdir_if_missing", "(", "raw_dir", ")", "\n", "\n", "# Download the raw zip file", "\n", "fpath", "=", "osp", ".", "join", "(", "raw_dir", ",", "'MSMT17_V1'", ")", "\n", "if", "osp", ".", "isdir", "(", "fpath", ")", ":", "\n", "            ", "print", "(", "\"Using downloaded file: \"", "+", "fpath", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Please download the dataset manually to {}\"", ".", "format", "(", "fpath", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.msmt17v1._pluck_msmt": [[14, 27], ["re.compile", "open", "f.readlines", "line.strip.strip", "map", "ret.append", "line.strip.split", "pattern.search().groups", "pids.append", "os.join", "pattern.search", "os.basename"], "function", ["None"], ["def", "_pluck_msmt", "(", "list_file", ",", "subdir", ",", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c([-\\d]+)_([-\\d]+)'", ")", ")", ":", "\n", "    ", "with", "open", "(", "list_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "ret", "=", "[", "]", "\n", "pids", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "fname", "=", "line", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "pid", ",", "cam", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "osp", ".", "basename", "(", "fname", ")", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "not", "in", "pids", ":", "\n", "            ", "pids", ".", "append", "(", "pid", ")", "\n", "", "ret", ".", "append", "(", "(", "osp", ".", "join", "(", "subdir", ",", "fname", ")", ",", "pid", ",", "cam", ",", "3", ")", ")", "\n", "", "return", "ret", ",", "pids", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.market1501.Market1501.__init__": [[26, 53], ["utils.data.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "market1501.Market1501._check_before_run", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "market1501.Market1501._recollect_test_data", "market1501.Market1501._recollect_test_data", "print", "market1501.Market1501.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._check_before_run", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.market1501.Market1501._recollect_test_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.market1501.Market1501._recollect_test_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseImageDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Market1501", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> Market1501 loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n", "self", ".", "query_recollect", "=", "self", ".", "_recollect_test_data", "(", "self", ".", "query", ",", "640", ")", "\n", "self", ".", "gallery_recollect", "=", "self", ".", "_recollect_test_data", "(", "self", ".", "gallery", ",", "640", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.market1501.Market1501._recollect_test_data": [[54, 59], ["random.shuffle"], "methods", ["None"], ["", "def", "_recollect_test_data", "(", "self", ",", "partition", ",", "sample_num", ")", ":", "\n", "        ", "recollect_part", "=", "partition", "\n", "random", ".", "shuffle", "(", "recollect_part", ")", "\n", "recollect_part_sampled", "=", "recollect_part", "[", ":", "sample_num", "]", "\n", "return", "recollect_part_sampled", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.market1501.Market1501._check_before_run": [[60, 70], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.market1501.Market1501._process_dir": [[71, 93], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "1", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC.__init__": [[28, 54], ["utils.data.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "dukemtmc.DukeMTMC._download_data", "dukemtmc.DukeMTMC._check_before_run", "dukemtmc.DukeMTMC._process_dir", "dukemtmc.DukeMTMC._process_dir", "dukemtmc.DukeMTMC._process_dir", "dukemtmc.DukeMTMC.get_imagedata_info", "dukemtmc.DukeMTMC.get_imagedata_info", "dukemtmc.DukeMTMC.get_imagedata_info", "print", "dukemtmc.DukeMTMC.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._download_data", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._check_before_run", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir", "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.HeliosZhao_M3L.data.base_dataset.BaseImageDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DukeMTMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "dataset_url", "=", "'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip'", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_test'", ")", "\n", "\n", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> DukeMTMC-reID loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._download_data": [[55, 71], ["os.exists", "print", "utils.osutils.mkdir_if_missing", "os.join", "print", "urllib.request.urlretrieve", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "print", "os.basename"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.logging.Logger.close"], ["", "def", "_download_data", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "print", "(", "\"This dataset has been downloaded.\"", ")", "\n", "return", "\n", "\n", "", "print", "(", "\"Creating directory {}\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "mkdir_if_missing", "(", "self", ".", "dataset_dir", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "osp", ".", "basename", "(", "self", ".", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\"Downloading DukeMTMC-reID dataset\"", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "self", ".", "dataset_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._check_before_run": [[72, 82], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.dukemtmc.DukeMTMC._process_dir": [[83, 102], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "# index and their corres pid", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "2", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.__init__.names": [[21, 23], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.__init__.create": [[25, 46], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.datasets.__init__.get_dataset": [[48, 51], ["warnings.warn", "__init__.create"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.__init__.create"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.IBN.__init__": [[15, 22], ["torch.nn.Module.__init__", "int", "MetaModules.MetaInstanceNorm2d", "MetaModules.MetaBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "MetaInstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "MetaBatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.IBN.forward": [[23, 29], ["torch.split", "IBNMeta.IBN.IN", "IBNMeta.IBN.BN", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.Bottleneck_IBN.__init__": [[34, 49], ["torch.nn.Module.__init__", "MetaModules.MetaConv2d", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "torch.nn.ReLU", "IBNMeta.IBN", "MetaModules.MetaBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ibn", "=", "False", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck_IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "", "self", ".", "conv2", "=", "MetaConv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "MetaConv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "MetaBatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.Bottleneck_IBN.forward": [[50, 71], ["IBNMeta.Bottleneck_IBN.conv1", "IBNMeta.Bottleneck_IBN.bn1", "IBNMeta.Bottleneck_IBN.relu", "IBNMeta.Bottleneck_IBN.conv2", "IBNMeta.Bottleneck_IBN.bn2", "IBNMeta.Bottleneck_IBN.relu", "IBNMeta.Bottleneck_IBN.conv3", "IBNMeta.Bottleneck_IBN.bn3", "IBNMeta.Bottleneck_IBN.relu", "IBNMeta.Bottleneck_IBN.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaResNet_IBN_a_base.__init__": [[75, 101], ["MetaModules.MetaModule.__init__", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "torch.nn.MaxPool2d", "IBNMeta.MetaResNet_IBN_a_base._make_layer", "IBNMeta.MetaResNet_IBN_a_base._make_layer", "IBNMeta.MetaResNet_IBN_a_base._make_layer", "IBNMeta.MetaResNet_IBN_a_base._make_layer", "IBNMeta.MetaResNet_IBN_a_base.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "block", "=", "Bottleneck_IBN", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "MetaResNet_IBN_a_base", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "scale", ")", "\n", "# self.relu = nn.ReLU(inplace=True)", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "# self.fc = nn.Linear(scale * 8 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "MetaConv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "MetaBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "MetaInstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaResNet_IBN_a_base._make_layer": [[102, 121], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "MetaBatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaResNet_IBN_a_base.forward": [[122, 138], ["IBNMeta.MetaResNet_IBN_a_base.conv1", "IBNMeta.MetaResNet_IBN_a_base.bn1", "IBNMeta.MetaResNet_IBN_a_base.maxpool", "IBNMeta.MetaResNet_IBN_a_base.layer1", "IBNMeta.MetaResNet_IBN_a_base.layer2", "IBNMeta.MetaResNet_IBN_a_base.layer3", "IBNMeta.MetaResNet_IBN_a_base.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "# x = self.relu(x)", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaIBN.__init_with_imagenet": [[141, 145], ["torchvision.models.resnet50", "baseModel.copyWeight", "torchvision.models.resnet50.state_dict"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyWeight"], ["    ", "def", "__init_with_imagenet", "(", "self", ",", "baseModel", ")", ":", "\n", "        ", "model", "=", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "del", "model", ".", "fc", "\n", "baseModel", ".", "copyWeight", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaIBN.getBase": [[146, 150], ["IBNMeta.MetaResNet_IBN_a_base", "IBNMeta.MetaIBN.__init_with_imagenet"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.__init_with_imagenet"], ["", "def", "getBase", "(", "self", ")", ":", "\n", "        ", "baseModel", "=", "MetaResNet_IBN_a_base", "(", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "self", ".", "__init_with_imagenet", "(", "baseModel", ")", "\n", "return", "baseModel", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaIBN.__init__": [[151, 183], ["MetaModules.MetaModule.__init__", "IBNMeta.MetaIBN.getBase", "torch.nn.AdaptiveAvgPool2d", "MetaModules.MixUpBatchNorm1d", "torch.nn.init.constant_", "torch.nn.init.constant_", "IBNMeta.MetaIBN.reset_IN", "torch.nn.Dropout", "MetaModules.MetaLinear", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.getBase", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaIBN.reset_IN"], ["", "def", "__init__", "(", "self", ",", "num_features", "=", "0", ",", "dropout", "=", "0", ",", "cut_at_pooling", "=", "False", ",", "norm", "=", "True", ",", "num_classes", "=", "[", "0", ",", "0", ",", "0", "]", ",", "BNNeck", "=", "False", ")", ":", "\n", "        ", "super", "(", "MetaIBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "cut_at_pooling", "=", "cut_at_pooling", "\n", "self", ".", "num_classes1", "=", "num_classes", "[", "0", "]", "\n", "self", ".", "num_classes2", "=", "num_classes", "[", "1", "]", "\n", "self", ".", "num_classes3", "=", "num_classes", "[", "2", "]", "\n", "self", ".", "has_embedding", "=", "num_features", ">", "0", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "BNNeck", "=", "BNNeck", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "# Construct base (pretrained) resnet", "\n", "", "self", ".", "base", "=", "self", ".", "getBase", "(", ")", "\n", "self", ".", "base", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "base", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "out_planes", "=", "2048", "\n", "if", "self", ".", "has_embedding", ":", "\n", "            ", "self", ".", "feat", "=", "MetaLinear", "(", "out_planes", ",", "self", ".", "num_features", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "# Change the num_features to CNN output channels", "\n", "            ", "self", ".", "num_features", "=", "out_planes", "\n", "\n", "", "self", ".", "feat_bn", "=", "MixUpBatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "reset_IN", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaIBN.reset_IN": [[184, 190], ["IBNMeta.MetaIBN.modules", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "reset_IN", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "MetaInstanceNorm2d", ")", ":", "\n", "                ", "if", "m", ".", "affine", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.IBNMeta.MetaIBN.forward": [[191, 232], ["IBNMeta.MetaIBN.base", "IBNMeta.MetaIBN.gap", "x.view.view.view", "isinstance", "x.view.view.size", "IBNMeta.MetaIBN.feat_bn", "IBNMeta.MetaIBN.feat_bn", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "IBNMeta.MetaIBN.drop", "IBNMeta.MetaIBN.feat", "output.append", "torch.nn.functional.relu", "torch.nn.functional.normalize"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "MTE", "=", "''", ",", "save_index", "=", "0", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "cut_at_pooling", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "x", ",", "MTE", ",", "save_index", ")", "\n", "", "tri_features", "=", "x", "\n", "\n", "if", "self", ".", "training", "is", "False", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "return", "bn_x", "\n", "\n", "", "if", "isinstance", "(", "bn_x", ",", "list", ")", ":", "\n", "            ", "output", "=", "[", "]", "\n", "for", "bnfeature", "in", "bn_x", ":", "\n", "                ", "if", "self", ".", "norm", ":", "\n", "                    ", "bnfeature", "=", "F", ".", "normalize", "(", "bnfeature", ")", "\n", "", "output", ".", "append", "(", "bnfeature", ")", "\n", "", "if", "self", ".", "BNNeck", ":", "\n", "                ", "return", "output", ",", "tri_features", "\n", "", "else", ":", "\n", "                ", "return", "output", "\n", "\n", "", "", "if", "self", ".", "norm", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "", "elif", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "F", ".", "relu", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "bn_x", "=", "self", ".", "drop", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "BNNeck", ":", "\n", "            ", "return", "bn_x", ",", "tri_features", "\n", "", "else", ":", "\n", "            ", "return", "bn_x", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.params": [[21, 24], ["MetaModules.MetaModule.named_params"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params"], ["    ", "def", "params", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "            ", "yield", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_leaves": [[25, 27], ["None"], "methods", ["None"], ["", "", "def", "named_leaves", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_submodules": [[28, 30], ["None"], "methods", ["None"], ["", "def", "named_submodules", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params": [[31, 50], ["hasattr", "curr_module.named_children", "set", "curr_module.named_leaves", "curr_module._parameters.items", "MetaModules.MetaModule.named_params", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaInstanceNorm2d.named_leaves", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params"], ["", "def", "named_params", "(", "self", ",", "curr_module", "=", "None", ",", "memo", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "if", "memo", "is", "None", ":", "\n", "            ", "memo", "=", "set", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "curr_module", ",", "'named_leaves'", ")", ":", "\n", "            ", "for", "name", ",", "p", "in", "curr_module", ".", "named_leaves", "(", ")", ":", "\n", "                ", "if", "p", "is", "not", "None", "and", "p", "not", "in", "memo", ":", "\n", "                    ", "memo", ".", "add", "(", "p", ")", "\n", "yield", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", ",", "p", "\n", "", "", "", "else", ":", "\n", "            ", "for", "name", ",", "p", "in", "curr_module", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "                ", "if", "p", "is", "not", "None", "and", "p", "not", "in", "memo", ":", "\n", "                    ", "memo", ".", "add", "(", "p", ")", "\n", "yield", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", ",", "p", "\n", "\n", "", "", "", "for", "mname", ",", "module", "in", "curr_module", ".", "named_children", "(", ")", ":", "\n", "            ", "submodule_prefix", "=", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "mname", "\n", "for", "name", ",", "p", "in", "self", ".", "named_params", "(", "module", ",", "memo", ",", "submodule_prefix", ")", ":", "\n", "                ", "yield", "name", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.update_params": [[51, 74], ["zip", "MetaModules.MetaModule.named_params", "MetaModules.MetaModule.set_param", "zip", "MetaModules.MetaModule.named_params", "gradVal.add_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.add_", "param_t.addcdiv", "MetaModules.MetaModule.set_param", "torch.zeros_like", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param"], ["", "", "", "def", "update_params", "(", "self", ",", "lr_inner", ",", "source_params", "=", "None", ",", "\n", "solver", "=", "'sgd'", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "weight_decay", "=", "5e-4", ")", ":", "\n", "        ", "if", "solver", "==", "'sgd'", ":", "\n", "            ", "for", "tgt", ",", "src", "in", "zip", "(", "self", ".", "named_params", "(", "self", ")", ",", "source_params", ")", ":", "\n", "                ", "name_t", ",", "param_t", "=", "tgt", "\n", "grad", "=", "src", "if", "src", "is", "not", "None", "else", "0", "\n", "tmp", "=", "param_t", "-", "lr_inner", "*", "grad", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "tmp", ")", "\n", "", "", "elif", "solver", "==", "'adam'", ":", "\n", "            ", "for", "tgt", ",", "gradVal", "in", "zip", "(", "self", ".", "named_params", "(", "self", ")", ",", "source_params", ")", ":", "\n", "                ", "name_t", ",", "param_t", "=", "tgt", "\n", "exp_avg", ",", "exp_avg_sq", "=", "torch", ".", "zeros_like", "(", "param_t", ".", "data", ")", ",", "torch", ".", "zeros_like", "(", "param_t", ".", "data", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "\n", "bias_correction2", "=", "1", "-", "beta2", "\n", "gradVal", ".", "add_", "(", "weight_decay", ",", "param_t", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "gradVal", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "gradVal", ",", "gradVal", ")", "\n", "exp_avg_sq", ".", "add_", "(", "1e-8", ")", "# to avoid possible nan in backward", "\n", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "1e-8", ")", "\n", "step_size", "=", "lr_inner", "/", "bias_correction1", "\n", "newParam", "=", "param_t", ".", "addcdiv", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "newParam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.setParams": [[75, 79], ["zip", "MetaModules.MetaModule.named_params", "MetaModules.MetaModule.set_param"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param"], ["", "", "", "def", "setParams", "(", "self", ",", "params", ")", ":", "\n", "        ", "for", "tgt", ",", "param", "in", "zip", "(", "self", ".", "named_params", "(", "self", ")", ",", "params", ")", ":", "\n", "            ", "name_t", ",", "_", "=", "tgt", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param": [[80, 91], ["name.split", "curr_mod.named_children", "setattr", "MetaModules.MetaModule.set_param"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param"], ["", "", "def", "set_param", "(", "self", ",", "curr_mod", ",", "name", ",", "param", ")", ":", "\n", "        ", "if", "'.'", "in", "name", ":", "\n", "            ", "n", "=", "name", ".", "split", "(", "'.'", ")", "\n", "module_name", "=", "n", "[", "0", "]", "\n", "rest", "=", "'.'", ".", "join", "(", "n", "[", "1", ":", "]", ")", "\n", "for", "name", ",", "mod", "in", "curr_mod", ".", "named_children", "(", ")", ":", "\n", "                ", "if", "module_name", "==", "name", ":", "\n", "                    ", "self", ".", "set_param", "(", "mod", ",", "rest", ",", "param", ")", "\n", "break", "\n", "", "", "", "else", ":", "\n", "            ", "setattr", "(", "curr_mod", ",", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.setBN": [[92, 98], ["name.split", "MetaModules.MetaModule.setBN", "setattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.setBN"], ["", "", "def", "setBN", "(", "self", ",", "inPart", ",", "name", ",", "param", ")", ":", "\n", "        ", "if", "'.'", "in", "name", ":", "\n", "            ", "part", "=", "name", ".", "split", "(", "'.'", ")", "\n", "self", ".", "setBN", "(", "getattr", "(", "inPart", ",", "part", "[", "0", "]", ")", ",", "'.'", ".", "join", "(", "part", "[", "1", ":", "]", ")", ",", "param", ")", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "inPart", ",", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.detach_params": [[99, 102], ["MetaModules.MetaModule.named_params", "MetaModules.MetaModule.set_param", "param.detach"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param"], ["", "", "def", "detach_params", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "            ", "self", ".", "set_param", "(", "self", ",", "name", ",", "param", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyModel": [[103, 125], ["list", "list", "zip", "newModel.state_dict", "map", "list", "list", "list", "list", "MetaModules.MetaModule.set_param", "MetaModules.to_var", "MetaModules.MetaModule.setBN", "newModel.state_dict().keys", "map", "map", "map", "map", "set", "set", "MetaModules.to_var", "newModel.named_params", "newModel.named_params", "MetaModules.MetaModule.named_params", "MetaModules.MetaModule.named_params", "to_var.data.clone", "newModel.state_dict"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.setBN", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params"], ["", "", "def", "copyModel", "(", "self", ",", "newModel", ",", "same_var", "=", "False", ")", ":", "\n", "# copy meta model to meta model", "\n", "        ", "tarName", "=", "list", "(", "map", "(", "lambda", "v", ":", "v", ",", "newModel", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# requires_grad", "\n", "partName", ",", "partW", "=", "list", "(", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "newModel", ".", "named_params", "(", "newModel", ")", ")", ")", ",", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "1", "]", ",", "newModel", ".", "named_params", "(", "newModel", ")", ")", ")", "# new model's weight", "\n", "\n", "metaName", ",", "metaW", "=", "list", "(", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "self", ".", "named_params", "(", "self", ")", ")", ")", ",", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "1", "]", ",", "self", ".", "named_params", "(", "self", ")", ")", ")", "\n", "bnNames", "=", "list", "(", "set", "(", "tarName", ")", "-", "set", "(", "partName", ")", ")", "\n", "\n", "# copy vars", "\n", "for", "name", ",", "param", "in", "zip", "(", "metaName", ",", "partW", ")", ":", "\n", "            ", "if", "not", "same_var", ":", "\n", "                ", "param", "=", "to_var", "(", "param", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "set_param", "(", "self", ",", "name", ",", "param", ")", "\n", "# copy training mean var", "\n", "", "tarName", "=", "newModel", ".", "state_dict", "(", ")", "\n", "for", "name", "in", "bnNames", ":", "\n", "            ", "param", "=", "to_var", "(", "tarName", "[", "name", "]", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "setBN", "(", "self", ",", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyWeight": [[126, 149], ["list", "set", "modelW.keys", "list", "MetaModules.MetaModule.named_params", "map", "name.startswith", "MetaModules.MetaModule.named_params", "set.add", "set.add", "set", "MetaModules.to_var", "MetaModules.MetaModule.set_param", "MetaModules.to_var", "MetaModules.MetaModule.set_param", "name.split"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param"], ["", "", "def", "copyWeight", "(", "self", ",", "modelW", ")", ":", "\n", "# copy state_dict to buffers", "\n", "        ", "curName", "=", "list", "(", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "self", ".", "named_params", "(", "self", ")", ")", ")", "\n", "tarNames", "=", "set", "(", ")", "\n", "for", "name", "in", "modelW", ".", "keys", "(", ")", ":", "\n", "# print(name)", "\n", "            ", "if", "name", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "tarNames", ".", "add", "(", "\".\"", ".", "join", "(", "name", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "tarNames", ".", "add", "(", "name", ")", "\n", "", "", "bnNames", "=", "list", "(", "tarNames", "-", "set", "(", "curName", ")", ")", "\n", "for", "tgt", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "            ", "name_t", ",", "param_t", "=", "tgt", "\n", "# print(name_t)", "\n", "module_name_t", "=", "'module.'", "+", "name_t", "\n", "if", "name_t", "in", "modelW", ":", "\n", "                ", "param", "=", "to_var", "(", "modelW", "[", "name_t", "]", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "param", ")", "\n", "", "elif", "module_name_t", "in", "modelW", ":", "\n", "                ", "param", "=", "to_var", "(", "modelW", "[", "'module.'", "+", "name_t", "]", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "param", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyWeight_eval": [[151, 181], ["list", "set", "modelW.keys", "list", "MetaModules.MetaModule.named_params", "map", "name.startswith", "MetaModules.MetaModule.setBN", "MetaModules.MetaModule.named_params", "set.add", "set.add", "set", "MetaModules.to_var", "MetaModules.MetaModule.set_param", "MetaModules.to_var", "MetaModules.to_var", "MetaModules.MetaModule.set_param", "MetaModules.to_var", "name.split"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.setBN", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.named_params", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.set_param", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var"], ["", "", "", "def", "copyWeight_eval", "(", "self", ",", "modelW", ")", ":", "\n", "# copy state_dict to buffers", "\n", "        ", "curName", "=", "list", "(", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ",", "self", ".", "named_params", "(", "self", ")", ")", ")", "\n", "tarNames", "=", "set", "(", ")", "\n", "for", "name", "in", "modelW", ".", "keys", "(", ")", ":", "\n", "# print(name)", "\n", "            ", "if", "name", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "tarNames", ".", "add", "(", "\".\"", ".", "join", "(", "name", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "tarNames", ".", "add", "(", "name", ")", "\n", "", "", "bnNames", "=", "list", "(", "tarNames", "-", "set", "(", "curName", ")", ")", "## in BN resMeta bnNames only contains running var/mean", "\n", "for", "tgt", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "            ", "name_t", ",", "param_t", "=", "tgt", "\n", "# print(name_t)", "\n", "module_name_t", "=", "'module.'", "+", "name_t", "\n", "if", "name_t", "in", "modelW", ":", "\n", "                ", "param", "=", "to_var", "(", "modelW", "[", "name_t", "]", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "param", ")", "\n", "", "elif", "module_name_t", "in", "modelW", ":", "\n", "                ", "param", "=", "to_var", "(", "modelW", "[", "'module.'", "+", "name_t", "]", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "param", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "for", "name", "in", "bnNames", ":", "\n", "            ", "try", ":", "\n", "                ", "param", "=", "to_var", "(", "modelW", "[", "name", "]", ",", "requires_grad", "=", "False", ")", "\n", "", "except", ":", "\n", "                ", "param", "=", "to_var", "(", "modelW", "[", "'module.'", "+", "name", "]", ",", "requires_grad", "=", "False", ")", "\n", "", "self", ".", "setBN", "(", "self", ",", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaLinear.__init__": [[184, 192], ["torch.nn.Module.__init__", "torch.nn.Linear", "MetaModules.MetaLinear.register_buffer", "MetaModules.MetaLinear.register_buffer", "MetaModules.to_var", "MetaModules.to_var"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "in_features", "=", "args", "[", "0", "]", "\n", "self", ".", "out_features", "=", "args", "[", "1", "]", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "requires_grad", "=", "True", ")", "if", "ignore", ".", "bias", "is", "not", "None", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaLinear.forward": [[193, 195], ["torch.nn.functional.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaLinear.named_leaves": [[196, 198], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaConv2d.__init__": [[201, 218], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "MetaModules.MetaConv2d.register_buffer", "MetaModules.to_var", "MetaModules.MetaConv2d.register_buffer", "MetaModules.MetaConv2d.register_buffer", "MetaModules.to_var"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "in_channels", "=", "ignore", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "ignore", ".", "out_channels", "\n", "self", ".", "stride", "=", "ignore", ".", "stride", "\n", "self", ".", "padding", "=", "ignore", ".", "padding", "\n", "self", ".", "dilation", "=", "ignore", ".", "dilation", "\n", "self", ".", "groups", "=", "ignore", ".", "groups", "\n", "self", ".", "kernel_size", "=", "ignore", ".", "kernel_size", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "if", "ignore", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaConv2d.forward": [[219, 221], ["torch.nn.functional.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaConv2d.named_leaves": [[222, 224], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaBatchNorm2d.__init__": [[227, 249], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.MetaBatchNorm2d.register_buffer", "MetaModules.to_var", "MetaModules.to_var", "torch.zeros", "torch.ones", "torch.LongTensor().squeeze", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "BatchNorm2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_features", "=", "ignore", ".", "num_features", "\n", "self", ".", "eps", "=", "ignore", ".", "eps", "\n", "self", ".", "momentum", "=", "ignore", ".", "momentum", "\n", "self", ".", "affine", "=", "ignore", ".", "affine", "\n", "self", ".", "track_running_stats", "=", "ignore", ".", "track_running_stats", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'weight'", ",", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaBatchNorm2d.forward": [[250, 255], ["MetaModules.MetaBatchNorm2d.weight.sum", "torch.nn.functional.batch_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "val2", "=", "self", ".", "weight", ".", "sum", "(", ")", "\n", "res", "=", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaBatchNorm2d.named_leaves": [[256, 258], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaBatchNorm1d.__init__": [[261, 283], ["torch.nn.Module.__init__", "torch.nn.BatchNorm1d", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.MetaBatchNorm1d.register_buffer", "MetaModules.to_var", "MetaModules.to_var", "torch.zeros", "torch.ones", "torch.LongTensor().squeeze", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "BatchNorm1d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_features", "=", "ignore", ".", "num_features", "\n", "self", ".", "eps", "=", "ignore", ".", "eps", "\n", "self", ".", "momentum", "=", "ignore", ".", "momentum", "\n", "self", ".", "affine", "=", "ignore", ".", "affine", "\n", "self", ".", "track_running_stats", "=", "ignore", ".", "track_running_stats", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'weight'", ",", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaBatchNorm1d.forward": [[284, 287], ["torch.nn.functional.batch_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "## meta test set this one to False self.training or not self.track_running_stats", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaBatchNorm1d.named_leaves": [[288, 290], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaInstanceNorm2d.__init__": [[293, 320], ["torch.nn.Module.__init__", "torch.nn.InstanceNorm2d", "MetaModules.MetaInstanceNorm2d.reset_parameters", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.MetaInstanceNorm2d.register_buffer", "MetaModules.to_var", "MetaModules.to_var", "torch.zeros", "torch.ones", "torch.LongTensor().squeeze", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaInstanceNorm2d.reset_parameters", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "InstanceNorm2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_features", "=", "ignore", ".", "num_features", "\n", "self", ".", "eps", "=", "ignore", ".", "eps", "\n", "self", ".", "momentum", "=", "ignore", ".", "momentum", "\n", "self", ".", "affine", "=", "ignore", ".", "affine", "\n", "self", ".", "track_running_stats", "=", "ignore", ".", "track_running_stats", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'weight'", ",", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "None", ")", "\n", "self", ".", "register_buffer", "(", "'num_batches_tracked'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaInstanceNorm2d.reset_parameters": [[321, 325], ["torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "affine", ":", "\n", "            ", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaInstanceNorm2d.forward": [[326, 331], ["torch.nn.functional.instance_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "res", "=", "F", ".", "instance_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaInstanceNorm2d.named_leaves": [[332, 334], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MixUpBatchNorm1d.__init__": [[336, 346], ["MetaModules.MetaBatchNorm1d.__init__", "MetaModules.MixUpBatchNorm1d.register_buffer", "MetaModules.MixUpBatchNorm1d.register_buffer", "MetaModules.MixUpBatchNorm1d.register_buffer", "MetaModules.MixUpBatchNorm1d.register_buffer", "torch.cuda.device_count", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "MixUpBatchNorm1d", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'meta_mean1'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'meta_var1'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'meta_mean2'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'meta_var2'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "device_count", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MixUpBatchNorm1d.forward": [[347, 412], ["torch.sqrt", "Normal", "Normal", "Normal.sample", "Normal.sample", "numpy.random.beta", "inputmix1.mean", "inputmix1.var", "inputmix2.mean", "inputmix2.var", "input.mean", "input.var", "torch.sqrt", "torch.sqrt", "input.numel", "input.size", "torch.no_grad", "MetaModules.MixUpBatchNorm1d.running_mean.copy_", "MetaModules.MixUpBatchNorm1d.running_var.copy_", "float", "input.size", "input.size", "MetaModules.MixUpBatchNorm1d.meta_mean1.copy_", "MetaModules.MixUpBatchNorm1d.meta_var1.copy_", "MetaModules.MixUpBatchNorm1d.meta_mean2.copy_", "MetaModules.MixUpBatchNorm1d.meta_var2.copy_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "MTE", "=", "''", ",", "save_index", "=", "0", ")", ":", "\n", "        ", "exponential_average_factor", "=", "0.0", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "            ", "if", "self", ".", "num_batches_tracked", "is", "not", "None", ":", "\n", "                ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "                    ", "exponential_average_factor", "=", "1.0", "/", "float", "(", "self", ".", "num_batches_tracked", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "                    ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "# calculate running estimates", "\n", "", "", "", "if", "self", ".", "training", ":", "\n", "            ", "if", "MTE", "==", "'sample'", ":", "\n", "                ", "from", "torch", ".", "distributions", ".", "normal", "import", "Normal", "\n", "Distri1", "=", "Normal", "(", "self", ".", "meta_mean1", ",", "self", ".", "meta_var1", ")", "\n", "Distri2", "=", "Normal", "(", "self", ".", "meta_mean2", ",", "self", ".", "meta_var2", ")", "\n", "sample1", "=", "Distri1", ".", "sample", "(", "[", "input", ".", "size", "(", "0", ")", ",", "]", ")", "\n", "sample2", "=", "Distri2", ".", "sample", "(", "[", "input", ".", "size", "(", "0", ")", ",", "]", ")", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "1.", ",", "1.", ")", "\n", "inputmix1", "=", "lam", "*", "sample1", "+", "(", "1", "-", "lam", ")", "*", "input", "\n", "inputmix2", "=", "lam", "*", "sample2", "+", "(", "1", "-", "lam", ")", "*", "input", "\n", "\n", "mean1", "=", "inputmix1", ".", "mean", "(", "dim", "=", "0", ")", "\n", "var1", "=", "inputmix1", ".", "var", "(", "dim", "=", "0", ",", "unbiased", "=", "False", ")", "\n", "mean2", "=", "inputmix2", ".", "mean", "(", "dim", "=", "0", ")", "\n", "var2", "=", "inputmix2", ".", "var", "(", "dim", "=", "0", ",", "unbiased", "=", "False", ")", "\n", "\n", "output1", "=", "(", "inputmix1", "-", "mean1", "[", "None", ",", ":", "]", ")", "/", "(", "torch", ".", "sqrt", "(", "var1", "[", "None", ",", ":", "]", "+", "self", ".", "eps", ")", ")", "\n", "output2", "=", "(", "inputmix2", "-", "mean2", "[", "None", ",", ":", "]", ")", "/", "(", "torch", ".", "sqrt", "(", "var2", "[", "None", ",", ":", "]", "+", "self", ".", "eps", ")", ")", "\n", "if", "self", ".", "affine", ":", "\n", "                    ", "output1", "=", "output1", "*", "self", ".", "weight", "[", "None", ",", ":", "]", "+", "self", ".", "bias", "[", "None", ",", ":", "]", "\n", "output2", "=", "output2", "*", "self", ".", "weight", "[", "None", ",", ":", "]", "+", "self", ".", "bias", "[", "None", ",", ":", "]", "\n", "", "return", "[", "output1", ",", "output2", "]", "\n", "\n", "", "else", ":", "\n", "                ", "mean", "=", "input", ".", "mean", "(", "dim", "=", "0", ")", "\n", "# use biased var in train", "\n", "var", "=", "input", ".", "var", "(", "dim", "=", "0", ",", "unbiased", "=", "False", ")", "\n", "n", "=", "input", ".", "numel", "(", ")", "/", "input", ".", "size", "(", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "running_mean", "=", "exponential_average_factor", "*", "mean", "+", "(", "1", "-", "exponential_average_factor", ")", "*", "self", ".", "running_mean", "\n", "# update running_var with unbiased var", "\n", "running_var", "=", "exponential_average_factor", "*", "var", "*", "n", "/", "(", "n", "-", "1", ")", "+", "(", "1", "-", "exponential_average_factor", ")", "*", "self", ".", "running_var", "\n", "self", ".", "running_mean", ".", "copy_", "(", "running_mean", ")", "\n", "self", ".", "running_var", ".", "copy_", "(", "running_var", ")", "\n", "if", "save_index", "==", "1", ":", "\n", "                        ", "self", ".", "meta_mean1", ".", "copy_", "(", "mean", ")", "\n", "self", ".", "meta_var1", ".", "copy_", "(", "var", ")", "\n", "", "elif", "save_index", "==", "2", ":", "\n", "                        ", "self", ".", "meta_mean2", ".", "copy_", "(", "mean", ")", "\n", "self", ".", "meta_var2", ".", "copy_", "(", "var", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "", "input", "=", "(", "input", "-", "mean", "[", "None", ",", ":", "]", ")", "/", "(", "torch", ".", "sqrt", "(", "var", "[", "None", ",", ":", "]", "+", "self", ".", "eps", ")", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "input", "=", "input", "*", "self", ".", "weight", "[", "None", ",", ":", "]", "+", "self", ".", "bias", "[", "None", ",", ":", "]", "\n", "\n", "", "return", "input", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.to_var": [[14, 17], ["torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_var", "(", "x", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "x", "=", "x", ".", "cuda", "(", ")", "\n", "return", "Variable", "(", "x", ",", "requires_grad", "=", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.Bottleneck.__init__": [[18, 29], ["torch.nn.Module.__init__", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "MetaConv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "MetaConv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "MetaBatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.Bottleneck.forward": [[30, 51], ["resMeta.Bottleneck.conv1", "resMeta.Bottleneck.bn1", "resMeta.Bottleneck.relu", "resMeta.Bottleneck.conv2", "resMeta.Bottleneck.bn2", "resMeta.Bottleneck.relu", "resMeta.Bottleneck.conv3", "resMeta.Bottleneck.bn3", "resMeta.Bottleneck.relu", "resMeta.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.BasicBlock.__init__": [[55, 66], ["torch.nn.Module.__init__", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "torch.nn.ReLU", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "MetaConv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.BasicBlock.forward": [[67, 83], ["resMeta.BasicBlock.conv1", "resMeta.BasicBlock.bn1", "resMeta.BasicBlock.relu", "resMeta.BasicBlock.conv2", "resMeta.BasicBlock.bn2", "resMeta.BasicBlock.relu", "resMeta.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase.__init__": [[85, 95], ["MetaModules.MetaModule.__init__", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "torch.nn.MaxPool2d", "resMeta.MetaResNetBase._make_layer", "resMeta.MetaResNetBase._make_layer", "resMeta.MetaResNetBase._make_layer", "resMeta.MetaResNetBase._make_layer"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "block", "=", "Bottleneck", ")", ":", "\n", "        ", "super", "(", "MetaResNetBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase._make_layer": [[96, 113], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "MetaModules.MetaConv2d", "MetaModules.MetaBatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "MetaBatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", "\n", "]", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNetBase.forward": [[114, 125], ["resMeta.MetaResNetBase.conv1", "resMeta.MetaResNetBase.bn1", "resMeta.MetaResNetBase.maxpool", "resMeta.MetaResNetBase.layer1", "resMeta.MetaResNetBase.layer2", "resMeta.MetaResNetBase.layer3", "resMeta.MetaResNetBase.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "MTE", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.__init_with_imagenet": [[128, 132], ["torchvision.models.resnet50", "baseModel.copyWeight", "torchvision.models.resnet50.state_dict"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.MetaModules.MetaModule.copyWeight"], ["    ", "def", "__init_with_imagenet", "(", "self", ",", "baseModel", ")", ":", "\n", "        ", "model", "=", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "del", "model", ".", "fc", "\n", "baseModel", ".", "copyWeight", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.getBase": [[133, 137], ["resMeta.MetaResNetBase", "resMeta.MetaResNet.__init_with_imagenet"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.__init_with_imagenet"], ["", "def", "getBase", "(", "self", ")", ":", "\n", "        ", "baseModel", "=", "MetaResNetBase", "(", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "self", ".", "__init_with_imagenet", "(", "baseModel", ")", "\n", "return", "baseModel", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.__init__": [[138, 168], ["MetaModules.MetaModule.__init__", "resMeta.MetaResNet.getBase", "torch.nn.AdaptiveAvgPool2d", "MetaModules.MixUpBatchNorm1d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Dropout", "MetaModules.MetaLinear", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__", "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.getBase"], ["", "def", "__init__", "(", "self", ",", "num_features", "=", "0", ",", "dropout", "=", "0", ",", "cut_at_pooling", "=", "False", ",", "norm", "=", "True", ",", "num_classes", "=", "[", "0", ",", "0", ",", "0", "]", ",", "BNNeck", "=", "False", ")", ":", "\n", "        ", "super", "(", "MetaResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "cut_at_pooling", "=", "cut_at_pooling", "\n", "self", ".", "num_classes1", "=", "num_classes", "[", "0", "]", "\n", "self", ".", "num_classes2", "=", "num_classes", "[", "1", "]", "\n", "self", ".", "num_classes3", "=", "num_classes", "[", "2", "]", "\n", "self", ".", "has_embedding", "=", "num_features", ">", "0", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "BNNeck", "=", "BNNeck", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "# Construct base (pretrained) resnet", "\n", "", "self", ".", "base", "=", "self", ".", "getBase", "(", ")", "\n", "self", ".", "base", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "base", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "out_planes", "=", "2048", "\n", "if", "self", ".", "has_embedding", ":", "\n", "            ", "self", ".", "feat", "=", "MetaLinear", "(", "out_planes", ",", "self", ".", "num_features", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "# Change the num_features to CNN output channels", "\n", "            ", "self", ".", "num_features", "=", "out_planes", "\n", "\n", "", "self", ".", "feat_bn", "=", "MixUpBatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.resMeta.MetaResNet.forward": [[169, 210], ["resMeta.MetaResNet.base", "resMeta.MetaResNet.gap", "x.view.view.view", "isinstance", "x.view.view.size", "resMeta.MetaResNet.feat_bn", "resMeta.MetaResNet.feat_bn", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "resMeta.MetaResNet.drop", "resMeta.MetaResNet.feat", "output.append", "torch.nn.functional.relu", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "MTE", "=", "''", ",", "save_index", "=", "0", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "cut_at_pooling", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "x", ",", "MTE", ",", "save_index", ")", "\n", "", "tri_features", "=", "x", "\n", "\n", "if", "self", ".", "training", "is", "False", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "return", "bn_x", "\n", "\n", "", "if", "isinstance", "(", "bn_x", ",", "list", ")", ":", "\n", "            ", "output", "=", "[", "]", "\n", "for", "bnfeature", "in", "bn_x", ":", "\n", "                ", "if", "self", ".", "norm", ":", "\n", "                    ", "bnfeature", "=", "F", ".", "normalize", "(", "bnfeature", ")", "\n", "", "output", ".", "append", "(", "bnfeature", ")", "\n", "", "if", "self", ".", "BNNeck", ":", "\n", "                ", "return", "output", ",", "tri_features", "\n", "", "else", ":", "\n", "                ", "return", "output", "\n", "\n", "", "", "if", "self", ".", "norm", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "", "elif", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "F", ".", "relu", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "bn_x", "=", "self", ".", "drop", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "BNNeck", ":", "\n", "            ", "return", "bn_x", ",", "tri_features", "\n", "", "else", ":", "\n", "            ", "return", "bn_x", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.__init__.names": [[13, 15], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.__init__.create": [[17, 51], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MC.forward": [[9, 17], ["ctx.save_for_backward", "inputs.mm", "ctx.features.t"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inputs", ",", "indexes", ",", "features", ",", "momentum", ")", ":", "\n", "        ", "ctx", ".", "features", "=", "features", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "save_for_backward", "(", "inputs", ",", "indexes", ")", "\n", "outputs", "=", "inputs", ".", "mm", "(", "ctx", ".", "features", ".", "t", "(", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MC.backward": [[18, 26], ["grad_outputs.mm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "inputs", ",", "indexes", "=", "ctx", ".", "saved_tensors", "\n", "grad_inputs", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_inputs", "=", "grad_outputs", ".", "mm", "(", "ctx", ".", "features", ")", "\n", "\n", "", "return", "grad_inputs", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MemoryClassifier.__init__": [[33, 42], ["torch.nn.Module.__init__", "memory.MemoryClassifier.register_buffer", "memory.MemoryClassifier.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_samples", ",", "temp", "=", "0.05", ",", "momentum", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MemoryClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "temp", "=", "temp", "\n", "\n", "self", ".", "register_buffer", "(", "'features'", ",", "torch", ".", "zeros", "(", "num_samples", ",", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'labels'", ",", "torch", ".", "zeros", "(", "num_samples", ")", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MemoryClassifier.MomentumUpdate": [[43, 48], ["zip", "memory.MemoryClassifier.features[].norm"], "methods", ["None"], ["", "def", "MomentumUpdate", "(", "self", ",", "inputs", ",", "indexes", ")", ":", "\n", "# momentum update", "\n", "        ", "for", "x", ",", "y", "in", "zip", "(", "inputs", ",", "indexes", ")", ":", "\n", "            ", "self", ".", "features", "[", "y", "]", "=", "self", ".", "momentum", "*", "self", ".", "features", "[", "y", "]", "+", "(", "1.", "-", "self", ".", "momentum", ")", "*", "x", "\n", "self", ".", "features", "[", "y", "]", "=", "self", ".", "features", "[", "y", "]", "/", "self", ".", "features", "[", "y", "]", ".", "norm", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.MemoryClassifier.forward": [[50, 58], ["memory.mc", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.mc"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "indexes", ")", ":", "\n", "\n", "        ", "sim", "=", "mc", "(", "inputs", ",", "indexes", ",", "self", ".", "features", ",", "self", ".", "momentum", ")", "## B * C", "\n", "\n", "sim", "=", "sim", "/", "self", ".", "temp", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "sim", ",", "indexes", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.models.memory.mc": [[28, 30], ["MC.apply", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "mc", "(", "inputs", ",", "indexes", ",", "features", ",", "momentum", "=", "0.5", ")", ":", "\n", "    ", "return", "MC", ".", "apply", "(", "inputs", ",", "indexes", ",", "features", ",", "torch", ".", "Tensor", "(", "[", "momentum", "]", ")", ".", "to", "(", "inputs", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.ranking._unique_sample": [[10, 16], ["numpy.zeros", "ids_dict.items", "numpy.random.choice"], "function", ["None"], ["def", "_unique_sample", "(", "ids_dict", ",", "num", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "num", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "_", ",", "indices", "in", "ids_dict", ".", "items", "(", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "indices", ")", "\n", "mask", "[", "i", "]", "=", "True", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.ranking.cmc": [[18, 80], ["utils.to_numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "numpy.zeros", "range", "numpy.arange", "numpy.arange", "numpy.zeros().astype", "numpy.ones().astype", "range", "RuntimeError", "np.zeros.cumsum", "numpy.any", "collections.defaultdict", "zip", "enumerate", "numpy.zeros", "numpy.ones", "numpy.where", "ids_dict[].append", "ranking._unique_sample", "numpy.nonzero", "numpy.nonzero", "len", "len"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.ranking._unique_sample"], ["", "def", "cmc", "(", "distmat", ",", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ",", "topk", "=", "100", ",", "\n", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "False", ")", ":", "\n", "    ", "distmat", "=", "to_numpy", "(", "distmat", ")", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "# Fill up default values", "\n", "if", "query_ids", "is", "None", ":", "\n", "        ", "query_ids", "=", "np", ".", "arange", "(", "m", ")", "\n", "", "if", "gallery_ids", "is", "None", ":", "\n", "        ", "gallery_ids", "=", "np", ".", "arange", "(", "n", ")", "\n", "", "if", "query_cams", "is", "None", ":", "\n", "        ", "query_cams", "=", "np", ".", "zeros", "(", "m", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "gallery_cams", "is", "None", ":", "\n", "        ", "gallery_cams", "=", "np", ".", "ones", "(", "n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure numpy array", "\n", "", "query_ids", "=", "np", ".", "asarray", "(", "query_ids", ")", "\n", "gallery_ids", "=", "np", ".", "asarray", "(", "gallery_ids", ")", "\n", "query_cams", "=", "np", ".", "asarray", "(", "query_cams", ")", "\n", "gallery_cams", "=", "np", ".", "asarray", "(", "gallery_cams", ")", "\n", "# Sort and find correct matches", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "#, dtype='int32')", "\n", "matches", "=", "(", "gallery_ids", "[", "indices", "]", "==", "query_ids", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "# Compute CMC for each query", "\n", "ret", "=", "np", ".", "zeros", "(", "topk", ")", "\n", "num_valid_queries", "=", "0", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Filter out the same id and same camera", "\n", "        ", "valid", "=", "(", "(", "gallery_ids", "[", "indices", "[", "i", "]", "]", "!=", "query_ids", "[", "i", "]", ")", "|", "\n", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", ")", "\n", "if", "separate_camera_set", ":", "\n", "# Filter out samples from same camera", "\n", "            ", "valid", "&=", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", "\n", "", "if", "not", "np", ".", "any", "(", "matches", "[", "i", ",", "valid", "]", ")", ":", "continue", "\n", "if", "single_gallery_shot", ":", "\n", "            ", "repeat", "=", "10", "\n", "gids", "=", "gallery_ids", "[", "indices", "[", "i", "]", "[", "valid", "]", "]", "\n", "inds", "=", "np", ".", "where", "(", "valid", ")", "[", "0", "]", "\n", "ids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "j", ",", "x", "in", "zip", "(", "inds", ",", "gids", ")", ":", "\n", "                ", "ids_dict", "[", "x", "]", ".", "append", "(", "j", ")", "\n", "", "", "else", ":", "\n", "            ", "repeat", "=", "1", "\n", "", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "            ", "if", "single_gallery_shot", ":", "\n", "# Randomly choose one instance for each id", "\n", "                ", "sampled", "=", "(", "valid", "&", "_unique_sample", "(", "ids_dict", ",", "len", "(", "valid", ")", ")", ")", "\n", "index", "=", "np", ".", "nonzero", "(", "matches", "[", "i", ",", "sampled", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "np", ".", "nonzero", "(", "matches", "[", "i", ",", "valid", "]", ")", "[", "0", "]", "\n", "", "delta", "=", "1.", "/", "(", "len", "(", "index", ")", "*", "repeat", ")", "\n", "for", "j", ",", "k", "in", "enumerate", "(", "index", ")", ":", "\n", "                ", "if", "k", "-", "j", ">=", "topk", ":", "break", "\n", "if", "first_match_break", ":", "\n", "                    ", "ret", "[", "k", "-", "j", "]", "+=", "1", "\n", "break", "\n", "", "ret", "[", "k", "-", "j", "]", "+=", "delta", "\n", "", "", "num_valid_queries", "+=", "1", "\n", "", "if", "num_valid_queries", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid query\"", ")", "\n", "", "return", "ret", ".", "cumsum", "(", ")", "/", "num_valid_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.ranking.mean_ap": [[82, 116], ["utils.to_numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "range", "numpy.mean", "numpy.arange", "numpy.arange", "numpy.zeros().astype", "numpy.ones().astype", "aps.append", "len", "RuntimeError", "numpy.any", "sklearn.metrics.average_precision_score", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_numpy"], ["", "def", "mean_ap", "(", "distmat", ",", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ")", ":", "\n", "    ", "distmat", "=", "to_numpy", "(", "distmat", ")", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "# Fill up default values", "\n", "if", "query_ids", "is", "None", ":", "\n", "        ", "query_ids", "=", "np", ".", "arange", "(", "m", ")", "\n", "", "if", "gallery_ids", "is", "None", ":", "\n", "        ", "gallery_ids", "=", "np", ".", "arange", "(", "n", ")", "\n", "", "if", "query_cams", "is", "None", ":", "\n", "        ", "query_cams", "=", "np", ".", "zeros", "(", "m", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "gallery_cams", "is", "None", ":", "\n", "        ", "gallery_cams", "=", "np", ".", "ones", "(", "n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure numpy array", "\n", "", "query_ids", "=", "np", ".", "asarray", "(", "query_ids", ")", "\n", "gallery_ids", "=", "np", ".", "asarray", "(", "gallery_ids", ")", "\n", "query_cams", "=", "np", ".", "asarray", "(", "query_cams", ")", "\n", "gallery_cams", "=", "np", ".", "asarray", "(", "gallery_cams", ")", "\n", "# Sort and find correct matches", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "#, dtype='int32')", "\n", "matches", "=", "(", "gallery_ids", "[", "indices", "]", "==", "query_ids", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "# Compute AP for each query", "\n", "aps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Filter out the same id and same camera", "\n", "        ", "valid", "=", "(", "(", "gallery_ids", "[", "indices", "[", "i", "]", "]", "!=", "query_ids", "[", "i", "]", ")", "|", "\n", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", ")", "\n", "y_true", "=", "matches", "[", "i", ",", "valid", "]", "\n", "y_score", "=", "-", "distmat", "[", "i", "]", "[", "indices", "[", "i", "]", "]", "[", "valid", "]", "\n", "if", "not", "np", ".", "any", "(", "y_true", ")", ":", "continue", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_score", ")", ")", "\n", "", "if", "len", "(", "aps", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid query\"", ")", "\n", "", "return", "np", ".", "mean", "(", "aps", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.evaluation_metrics.classification.accuracy": [[7, 22], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "utils.to_torch", "utils.to_torch", "target.view().expand_as", "correct[].view().float().sum", "ret.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_torch", "home.repos.pwc.inspect_result.HeliosZhao_M3L.utils.__init__.to_torch"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "target", "=", "to_torch", "(", "output", ")", ",", "to_torch", "(", "target", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "ret", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.", "/", "batch_size", ")", ")", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.solver.build.make_optimizer": [[6, 17], ["model.named_parameters", "getattr"], "function", ["None"], ["def", "make_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "args", ".", "lr", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "\n", "", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "'Adam'", ")", "(", "params", ")", "\n", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[7, 34], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[35, 48], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__": [[12, 18], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0", ",", "num_instances", "=", "0", ",", "use_semi", "=", "True", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "self", ".", "margin", ")", "\n", "self", ".", "K", "=", "num_instances", "\n", "self", ".", "use_semi", "=", "use_semi", "\n", "\n"]], "home.repos.pwc.inspect_result.HeliosZhao_M3L.loss.triplet.TripletLoss.forward": [[19, 58], ["inputs.size", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "torch.cat", "torch.cat", "torch.cat.data.new", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.fill_", "torch.autograd.Variable", "triplet.TripletLoss.ranking_loss", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "range", "range", "dist_ap[].unsqueeze", "dist_an[].unsqueeze", "torch.autograd.Variable.size", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "range", "torch.cat.append", "torch.cat.append", "range", "range", "targets.expand", "range", "torch.max", "torch.min", "len", "len", "torch.pow", "torch.cat.append", "torch.cat.append", "neg_examples.min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "P", "=", "n", "/", "self", ".", "K", "\n", "t0", "=", "20.0", "\n", "t1", "=", "40.0", "\n", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "if", "self", ".", "use_semi", ":", "\n", "            ", "for", "i", "in", "range", "(", "P", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "                    ", "neg_examples", "=", "dist", "[", "i", "*", "self", ".", "K", "+", "j", "]", "[", "mask", "[", "i", "*", "self", ".", "K", "+", "j", "]", "==", "0", "]", "\n", "for", "pair", "in", "range", "(", "j", "+", "1", ",", "self", ".", "K", ")", ":", "\n", "                        ", "ap", "=", "dist", "[", "i", "*", "self", ".", "K", "+", "j", "]", "[", "i", "*", "self", ".", "K", "+", "pair", "]", "\n", "dist_ap", ".", "append", "(", "ap", ")", "\n", "dist_an", ".", "append", "(", "neg_examples", ".", "min", "(", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "dist_ap", ".", "append", "(", "torch", ".", "max", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ")", ")", "\n", "dist_an", ".", "append", "(", "torch", ".", "min", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ")", ")", "\n", "", "", "dist_ap", "=", "[", "dist_ap", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "len", "(", "dist_ap", ")", ")", "]", "\n", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "[", "dist_an", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "len", "(", "dist_ap", ")", ")", "]", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "dist_an", ".", "data", ".", "new", "(", ")", "\n", "y", ".", "resize_as_", "(", "dist_an", ".", "data", ")", "\n", "y", ".", "fill_", "(", "1", ")", "\n", "y", "=", "Variable", "(", "y", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "prec", "=", "(", "dist_an", ".", "data", ">", "dist_ap", ".", "data", ")", ".", "sum", "(", ")", "*", "1.", "/", "y", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "", "", ""]]}