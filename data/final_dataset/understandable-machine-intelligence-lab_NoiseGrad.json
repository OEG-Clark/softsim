{"home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.explainers.saliency_explainer": [[6, 26], ["len", "Saliency().attribute().sum().reshape().cpu", "utils.normalize_heatmap", "np.shape", "Saliency().attribute().sum().reshape", "kwargs.get", "kwargs.get", "Saliency().attribute().sum", "Saliency().attribute", "Saliency"], "function", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.utils.normalize_heatmap"], ["def", "saliency_explainer", "(", "model", ",", "inputs", ",", "targets", ",", "normalize", "=", "False", ",", "**", "kwargs", ")", "->", "np", ".", "array", ":", "\n", "    ", "\"\"\"Implementation of InteGrated Gradients by Sundararajan et al., 2017 using Captum.\"\"\"", "\n", "\n", "assert", "(", "\n", "len", "(", "np", ".", "shape", "(", "inputs", ")", ")", "==", "4", "\n", ")", ",", "\"Inputs should be shaped (nr_samples, nr_channels, img_size, img_size) e.g., (1, 3, 224, 224).\"", "\n", "\n", "explanation", "=", "(", "\n", "Saliency", "(", "model", ")", "\n", ".", "attribute", "(", "inputs", ",", "targets", ",", "abs", "=", "True", ")", "\n", ".", "sum", "(", "axis", "=", "1", ")", "\n", ".", "reshape", "(", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ",", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "data", "\n", ")", "\n", "\n", "if", "normalize", ":", "\n", "        ", "return", "normalize_heatmap", "(", "explanation", ")", "\n", "\n", "", "return", "explanation", "\n", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.explainers.intgrad_explainer": [[28, 48], ["IntegratedGradients().attribute", "len", "utils.normalize_heatmap.abs", "utils.normalize_heatmap", "utils.normalize_heatmap.sum().reshape().cpu", "np.shape", "IntegratedGradients", "torch.zeros_like", "utils.normalize_heatmap.sum().reshape", "kwargs.get", "kwargs.get", "utils.normalize_heatmap.sum"], "function", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.utils.normalize_heatmap"], ["", "def", "intgrad_explainer", "(", "\n", "model", ",", "inputs", ",", "targets", ",", "abs", "=", "True", ",", "normalize", "=", "False", ",", "**", "kwargs", "\n", ")", "->", "np", ".", "array", ":", "\n", "    ", "\"\"\"Implementation of InteGrated Gradients by Sundararajan et al., 2017 using Captum.\"\"\"", "\n", "\n", "assert", "(", "\n", "len", "(", "np", ".", "shape", "(", "inputs", ")", ")", "==", "4", "\n", ")", ",", "\"Inputs should be shaped (nr_samples, nr_channels, img_size, img_size) e.g., (1, 3, 224, 224).\"", "\n", "\n", "explanation", "=", "IntegratedGradients", "(", "model", ")", ".", "attribute", "(", "\n", "inputs", "=", "inputs", ",", "target", "=", "targets", ",", "baselines", "=", "torch", ".", "zeros_like", "(", "inputs", ")", "\n", ")", "\n", "if", "abs", ":", "\n", "        ", "explanation", "=", "explanation", ".", "abs", "(", ")", "\n", "", "if", "normalize", ":", "\n", "        ", "explanation", "=", "normalize_heatmap", "(", "explanation", ")", "\n", "\n", "", "return", "(", "\n", "explanation", ".", "sum", "(", "axis", "=", "1", ")", "\n", ".", "reshape", "(", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ",", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ")", "\n", ".", "cpu", "(", ")", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGrad.__init__": [[7, 45], ["torch.distributions.normal.Normal", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "weights", ",", "\n", "mean", ":", "float", "=", "1.0", ",", "\n", "std", ":", "float", "=", "0.2", ",", "\n", "n", ":", "int", "=", "25", ",", "\n", "noise_type", ":", "str", "=", "\"multiplicative\"", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the explanation-enhancing method: NoiseGrad.\n        Paper:\n\n        Args:\n            model (torch model): a trained model\n            weights (dict):\n            mean (float): mean of the distribution (often referred to as mu)\n            std (float): standard deviation of the distribution (often referred to as sigma)\n            n (int): number of Monte Carlo rounds to sample models\n            noise_type (str): the type of noise to add to the model parameters, either additive or multiplicative\n            verbose (bool): print the progress of explanation enchancement (default True)\n        \"\"\"", "\n", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "# Creates a normal (also called Gaussian) distribution.", "\n", "self", ".", "distribution", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "\n", "loc", "=", "self", ".", "mean", ",", "scale", "=", "self", ".", "std", "\n", ")", "\n", "\n", "print", "(", "\"NoiseGrad initialized.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGrad.sample": [[46, 63], ["noisegrad.NoiseGrad.model.load_state_dict", "torch.no_grad", "noisegrad.NoiseGrad.model.parameters", "layer.add_", "noisegrad.NoiseGrad.distribution.sample().to", "layer.mul_", "print", "noisegrad.NoiseGrad.distribution.sample().to", "noisegrad.NoiseGrad.distribution.sample", "layer.size", "noisegrad.NoiseGrad.distribution.sample", "layer.size"], "methods", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample", "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "self", ".", "weights", ")", "\n", "# If std is not zero, loop over each layer and add Gaussian noise.", "\n", "if", "not", "self", ".", "std", "==", "0.0", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "layer", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "self", ".", "noise_type", "==", "\"additive\"", ":", "\n", "                        ", "layer", ".", "add_", "(", "\n", "self", ".", "distribution", ".", "sample", "(", "layer", ".", "size", "(", ")", ")", ".", "to", "(", "layer", ".", "device", ")", "\n", ")", "\n", "", "elif", "self", ".", "noise_type", "==", "\"multiplicative\"", ":", "\n", "                        ", "layer", ".", "mul_", "(", "\n", "self", ".", "distribution", ".", "sample", "(", "layer", ".", "size", "(", ")", ")", ".", "to", "(", "layer", ".", "device", ")", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\n", "\"Set NoiseGrad attribute 'noise_type' to either 'additive' or 'multiplicative' (str).\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGrad.enhance_explanation": [[65, 78], ["torch.zeros", "torch.zeros.mean", "tqdm.tqdm.tqdm", "range", "noisegrad.NoiseGrad.sample", "explanation_fn", "kwargs.get", "kwargs.get", "range", "noisegrad.NoiseGrad.model.to", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample"], ["", "", "", "", "", "def", "enhance_explanation", "(", "self", ",", "inputs", ",", "targets", ",", "explanation_fn", ":", "Callable", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample explanation.\"\"\"", "\n", "explanation", "=", "torch", ".", "zeros", "(", "\n", "(", "self", ".", "n", ",", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ",", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ")", "\n", ")", "\n", "\n", "for", "i", "in", "(", "tqdm", "(", "range", "(", "self", ".", "n", ")", ")", "if", "self", ".", "verbose", "else", "range", "(", "self", ".", "n", ")", ")", ":", "\n", "            ", "self", ".", "sample", "(", ")", "\n", "explanation", "[", "i", "]", "=", "explanation_fn", "(", "\n", "self", ".", "model", ".", "to", "(", "kwargs", ".", "get", "(", "\"device\"", ",", "None", ")", ")", ",", "inputs", ",", "targets", "\n", ")", "\n", "\n", "", "return", "explanation", ".", "mean", "(", "axis", "=", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.__init__": [[81, 137], ["torch.distributions.normal.Normal", "noisegrad.NoiseGrad.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "weights", ",", "\n", "mean", ":", "float", "=", "1.0", ",", "\n", "std", ":", "float", "=", "0.2", ",", "\n", "sg_mean", ":", "float", "=", "0.0", ",", "\n", "sg_std", ":", "float", "=", "0.4", ",", "\n", "n", ":", "int", "=", "10", ",", "\n", "m", ":", "int", "=", "10", ",", "\n", "noise_type", ":", "str", "=", "\"multiplicative\"", ",", "\n", "verbose", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the explanation-enhancing method: NoiseGrad++.\n        Paper:\n\n        Args:\n            model (torch model): a trained model\n            weights (dict):\n            mean (float): mean of the distribution (often referred to as mu)\n            std (float): standard deviation of the distribution (often referred to as sigma)\n            n (int): number of Monte Carlo rounds to sample models\n            noise_type (str): the type of noise to add to the model parameters, either additive or multiplicative\n            verbose (bool): print the progress of explanation enchancement (default True)\n\n        Args:\n            model:\n            weights:\n            mean:\n            std:\n            sg_mean:\n            sg_std:\n            n:\n            m:\n            noise_type:\n        \"\"\"", "\n", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "sg_std", "=", "sg_std", "\n", "self", ".", "sg_mean", "=", "sg_mean", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "# Creates a normal (also called Gaussian) distribution.", "\n", "self", ".", "distribution", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "\n", "loc", "=", "self", ".", "mean", ",", "scale", "=", "self", ".", "std", "\n", ")", "\n", "\n", "super", "(", "NoiseGrad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"NoiseGrad++ initialized.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample": [[138, 155], ["noisegrad.NoiseGradPlusPlus.model.load_state_dict", "torch.no_grad", "noisegrad.NoiseGradPlusPlus.model.parameters", "layer.add_", "noisegrad.NoiseGradPlusPlus.distribution.sample().to", "layer.mul_", "print", "noisegrad.NoiseGradPlusPlus.distribution.sample().to", "noisegrad.NoiseGradPlusPlus.distribution.sample", "layer.size", "noisegrad.NoiseGradPlusPlus.distribution.sample", "layer.size"], "methods", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample", "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "self", ".", "weights", ")", "\n", "# If std is not zero, loop over each layer and add Gaussian noise.", "\n", "if", "not", "self", ".", "std", "==", "0.0", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "layer", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "self", ".", "noise_type", "==", "\"additive\"", ":", "\n", "                        ", "layer", ".", "add_", "(", "\n", "self", ".", "distribution", ".", "sample", "(", "layer", ".", "size", "(", ")", ")", ".", "to", "(", "layer", ".", "device", ")", "\n", ")", "\n", "", "elif", "self", ".", "noise_type", "==", "\"multiplicative\"", ":", "\n", "                        ", "layer", ".", "mul_", "(", "\n", "self", ".", "distribution", ".", "sample", "(", "layer", ".", "size", "(", ")", ")", ".", "to", "(", "layer", ".", "device", ")", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\n", "\"Set NoiseGrad attribute 'noise_type' to either 'additive' or 'multiplicative' (str).\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.enhance_explanation": [[157, 174], ["torch.zeros", "torch.zeros.mean", "tqdm.tqdm.tqdm", "range", "noisegrad.NoiseGradPlusPlus.sample", "range", "kwargs.get", "kwargs.get", "range", "explanation_fn", "noisegrad.NoiseGradPlusPlus.model.to", "kwargs.get", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.noisegrad.NoiseGradPlusPlus.sample"], ["", "", "", "", "", "def", "enhance_explanation", "(", "self", ",", "inputs", ",", "targets", ",", "explanation_fn", ":", "Callable", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample explanation.\"\"\"", "\n", "explanation", "=", "torch", ".", "zeros", "(", "\n", "(", "self", ".", "n", ",", "self", ".", "m", ",", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ",", "kwargs", ".", "get", "(", "\"img_size\"", ",", "224", ")", ")", "\n", ")", "\n", "\n", "for", "i", "in", "(", "tqdm", "(", "range", "(", "self", ".", "n", ")", ")", "if", "self", ".", "verbose", "else", "range", "(", "self", ".", "n", ")", ")", ":", "\n", "            ", "self", ".", "sample", "(", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "                ", "inputs_noisy", "=", "(", "\n", "inputs", "+", "torch", ".", "randn_like", "(", "inputs", ")", "*", "self", ".", "sg_std", "+", "self", ".", "sg_mean", "\n", ")", "\n", "explanation", "[", "i", "]", "[", "j", "]", "=", "explanation_fn", "(", "\n", "self", ".", "model", ".", "to", "(", "kwargs", ".", "get", "(", "\"device\"", ",", "None", ")", ")", ",", "inputs_noisy", ",", "targets", "\n", ")", "\n", "\n", "", "", "return", "explanation", ".", "mean", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.utils.normalize_heatmap": [[7, 16], ["heatmap.min", "heatmap.max", "heatmap.max", "heatmap.min", "heatmap.max", "heatmap.min"], "function", ["None"], ["def", "normalize_heatmap", "(", "heatmap", ":", "np", ".", "array", ")", ":", "\n", "    ", "\"\"\"Normalise relevance given a relevance matrix (r) [-1, 1].\"\"\"", "\n", "if", "heatmap", ".", "min", "(", ")", ">=", "0.0", ":", "\n", "        ", "return", "heatmap", "/", "heatmap", ".", "max", "(", ")", "\n", "", "if", "heatmap", ".", "max", "(", ")", "<=", "0.0", ":", "\n", "        ", "return", "-", "heatmap", "/", "heatmap", ".", "min", "(", ")", "\n", "", "return", "(", "heatmap", ">", "0.0", ")", "*", "heatmap", "/", "heatmap", ".", "max", "(", ")", "-", "(", "\n", "heatmap", "<", "0.0", "\n", ")", "*", "heatmap", "/", "heatmap", ".", "min", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.utils.denormalize_image": [[18, 42], ["torch.Tensor().reshape", "torch.Tensor().reshape", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "print", "image.view", "mean.numpy", "std.numpy", "params.get", "params.get", "params.get"], "function", ["None"], ["", "def", "denormalize_image", "(", "\n", "image", ",", "\n", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "**", "params", ",", "\n", ")", ":", "\n", "    ", "\"\"\"De-normalize a torch image.\"\"\"", "\n", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "(", "\n", "image", ".", "view", "(", "\n", "[", "\n", "params", ".", "get", "(", "\"nr_channels\"", ",", "3", ")", ",", "\n", "params", ".", "get", "(", "\"img_size\"", ",", "224", ")", ",", "\n", "params", ".", "get", "(", "\"img_size\"", ",", "224", ")", ",", "\n", "]", "\n", ")", "\n", "*", "std", "\n", ")", "+", "mean", "\n", "", "elif", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "std", "\n", "return", "(", "image", "*", "std", ".", "numpy", "(", ")", ")", "+", "mean", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Make image either a np.array or torch.Tensor before denormalizing.\"", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.utils.visualize_explanations": [[44, 73], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "denormalize_image().transpose().transpose", "denormalize_image().transpose", "utils.denormalize_image", "image.cpu"], "function", ["home.repos.pwc.inspect_result.understandable-machine-intelligence-lab_NoiseGrad.src.utils.denormalize_image"], ["", "", "def", "visualize_explanations", "(", "\n", "image", ":", "torch", ".", "Tensor", ",", "\n", "expl_base", ":", "torch", ".", "Tensor", ",", "\n", "expl_ng", ":", "torch", ".", "Tensor", ",", "\n", "expl_ngp", ":", "torch", ".", "Tensor", ",", "\n", "cmap", ":", "matplotlib", ".", "colors", ".", "ListedColormap", "=", "\"gist_gray\"", ",", "\n", ")", ":", "\n", "# Plot!", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "7", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "4", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "denormalize_image", "(", "image", ".", "cpu", "(", ")", ".", "data", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "plt", ".", "title", "(", "f\"Original input\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "4", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "expl_base", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "f\"Base explanation\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "4", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "expl_ng", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "f\"NoiseGrad explanation\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "4", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "expl_ngp", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "f\"NoiseGrad++ explanation\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "", ""]]}