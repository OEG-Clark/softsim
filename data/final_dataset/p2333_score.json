{"home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Small_NN.__init__": [[117, 125], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", "=", "100", ")", ":", "\n", "        ", "super", "(", "Small_NN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1", ",", "num_features", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_features", ",", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Small_NN.forward": [[126, 128], ["toy_demo_1d.Small_NN.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func": [[39, 53], ["torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm", "torch.norm", "torch.norm", "criterion_kl", "torch.norm", "torch.norm", "torch.norm", "output.log", "criterion_kl", "criterion_kl", "float", "M.log", "M.log"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log"], ["def", "distance_func", "(", "output", ",", "target", ",", "divergence", ")", ":", "# both output and target are summed to 1", "\n", "    ", "M", "=", "(", "output", "+", "target", ")", "/", "2", "\n", "if", "divergence", "==", "'JSsqrt'", ":", "\n", "        ", "return", "(", "0.5", "*", "(", "criterion_kl", "(", "M", ".", "log", "(", ")", ",", "output", ")", "+", "criterion_kl", "(", "M", ".", "log", "(", ")", ",", "target", ")", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "divergence", "==", "'LSE'", ":", "\n", "        ", "return", "(", "(", "output", "-", "target", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "divergence", "==", "'L2'", ":", "\n", "        ", "return", "(", "torch", ".", "norm", "(", "output", "-", "target", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "divergence", "==", "'L1'", ":", "\n", "        ", "return", "(", "torch", ".", "norm", "(", "output", "-", "target", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "divergence", "==", "'Linf'", ":", "\n", "        ", "return", "(", "torch", ".", "norm", "(", "output", "-", "target", ",", "p", "=", "float", "(", "'inf'", ")", ",", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "divergence", "==", "'KL'", ":", "\n", "        ", "return", "criterion_kl", "(", "output", ".", "log", "(", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax": [[54, 59], ["torch.cat", "torch.cat", "torch.cat", "torch.softmax", "math.log", "math.log", "math.log", "math.log"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log"], ["", "", "def", "Softmax", "(", "X", ")", ":", "\n", "    ", "logit_0", "=", "-", "(", "X", "-", "G_Mean_0", ")", "**", "2", "/", "(", "2", "*", "G_std_0", "**", "2", ")", "-", "math", ".", "log", "(", "G_std_0", ")", "+", "math", ".", "log", "(", "half_bs_0", ")", "\n", "logit_1", "=", "-", "(", "X", "-", "G_Mean_1", ")", "**", "2", "/", "(", "2", "*", "G_std_1", "**", "2", ")", "-", "math", ".", "log", "(", "G_std_1", ")", "+", "math", ".", "log", "(", "half_bs_1", ")", "\n", "logit_all", "=", "torch", ".", "cat", "(", "(", "logit_0", ",", "logit_1", ")", ",", "dim", "=", "1", ")", "# 2bs x 2", "\n", "return", "F", ".", "softmax", "(", "logit_all", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.compute_C": [[61, 72], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.uniform_", "range", "torch.zeros_like.detach", "toy_demo_1d.distance_func", "distance_func.backward", "torch.zeros_like.grad.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like.grad.zero_", "toy_demo_1d.Softmax", "toy_demo_1d.Softmax", "torch.sign", "torch.sign", "torch.sign"], "function", ["home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax"], ["", "def", "compute_C", "(", "X", ",", "divergence", ",", "epsilon", "=", "epsilon", ",", "alpha", "=", "alpha", ",", "attack_iters", "=", "attack_iters", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "# 2bs x 1", "\n", "delta", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "        ", "loss", "=", "distance_func", "(", "Softmax", "(", "X", "+", "delta", ")", ",", "Softmax", "(", "X", ")", ",", "divergence", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "min", "=", "-", "epsilon", ",", "max", "=", "epsilon", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_pgd": [[74, 86], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.uniform_", "range", "torch.zeros_like.detach", "torch.softmax", "toy_demo_1d.distance_func", "distance_func.backward", "torch.zeros_like.grad.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like.grad.zero_", "model", "torch.sign", "torch.sign", "torch.sign"], "function", ["home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["", "def", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "divergence", ",", "epsilon", "=", "epsilon", ",", "alpha", "=", "alpha", ",", "attack_iters", "=", "attack_iters", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "# 2bs x 1", "\n", "delta", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "        ", "output", "=", "F", ".", "softmax", "(", "model", "(", "X", "+", "delta", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "distance_func", "(", "output", ",", "y", ",", "divergence", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "min", "=", "-", "epsilon", ",", "max", "=", "epsilon", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_pgd_consistent": [[88, 100], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.uniform_", "range", "torch.zeros_like.detach", "torch.softmax", "toy_demo_1d.distance_func", "distance_func.backward", "torch.zeros_like.grad.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like.grad.zero_", "model", "toy_demo_1d.Softmax", "torch.sign", "torch.sign", "torch.sign"], "function", ["home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax"], ["", "def", "attack_pgd_consistent", "(", "model", ",", "X", ",", "divergence", ",", "epsilon", "=", "epsilon", ",", "alpha", "=", "alpha", ",", "attack_iters", "=", "attack_iters", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "# 2bs x 1", "\n", "delta", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "        ", "output", "=", "F", ".", "softmax", "(", "model", "(", "X", "+", "delta", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "distance_func", "(", "output", ",", "Softmax", "(", "X", "+", "delta", ")", ",", "divergence", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "min", "=", "-", "epsilon", ",", "max", "=", "epsilon", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_trades": [[101, 115], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.uniform_", "model", "torch.softmax", "range", "torch.zeros_like.detach", "F.softmax.detach", "torch.softmax", "toy_demo_1d.distance_func", "distance_func.backward", "torch.zeros_like.grad.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like.grad.zero_", "model", "torch.sign", "torch.sign", "torch.sign"], "function", ["home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["", "def", "attack_trades", "(", "model", ",", "X", ",", "y", ",", "divergence", ",", "epsilon", "=", "epsilon", ",", "alpha", "=", "alpha", ",", "attack_iters", "=", "attack_iters", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "# 2bs x 1", "\n", "delta", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "clean_output", "=", "model", "(", "X", ")", "\n", "clean_output", "=", "F", ".", "softmax", "(", "clean_output", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "        ", "output", "=", "F", ".", "softmax", "(", "model", "(", "X", "+", "delta", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "distance_func", "(", "output", ",", "clean_output", ",", "divergence", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "min", "=", "-", "epsilon", ",", "max", "=", "epsilon", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.get_args": [[129, 135], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--demo'", ",", "default", "=", "'PGDconsistent'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--divergence'", ",", "default", "=", "'KL'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--divergence_C'", ",", "default", "=", "'KL'", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.main": [[136, 244], ["toy_demo_1d.get_args", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "Small_NN().cuda", "Small_NN().cuda.train", "Small_NN().cuda.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "range", "Small_NN().cuda.eval", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform.sample().cuda", "toy_demo_1d.Softmax", "torch.softmax", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "print", "torch.distributions.normal.Normal.sample", "torch.distributions.normal.Normal.sample", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "toy_demo_1d.compute_C", "toy_demo_1d.distance_func", "torch.distributions.normal.Normal.sample", "torch.distributions.normal.Normal.sample", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "distance_func.backward", "torch.optim.Adam.step", "Small_NN().cuda.detach", "U.sample().cuda.cpu().numpy", "Softmax.cpu().numpy", "F.softmax.cpu().numpy", "numpy.array", "numpy.array", "numpy.array", "C_L.item", "toy_demo_1d.Small_NN", "toy_demo_1d.Softmax", "toy_demo_1d.Softmax", "toy_demo_1d.Softmax", "toy_demo_1d.attack_pgd", "torch.softmax", "toy_demo_1d.distance_func", "print", "print", "torch.optim.Adam.zero_grad", "toy_demo_1d.attack_pgd_consistent", "toy_demo_1d.distance_func", "print", "toy_demo_1d.distance_func", "print", "print", "print", "torch.distributions.uniform.Uniform.sample", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.cat", "torch.cat", "torch.cat", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.cat", "torch.cat", "torch.cat", "Small_NN().cuda.", "toy_demo_1d.attack_pgd_consistent", "torch.softmax", "toy_demo_1d.Softmax", "toy_demo_1d.distance_func", "distance_func.item", "distance_func.cpu().item", "torch.softmax", "toy_demo_1d.Softmax", "distance_func.item", "distance_func.cpu().item", "torch.softmax", "toy_demo_1d.Softmax", "distance_func.item", "distance_func.cpu().item", "Small_NN().cuda.", "U.sample().cuda.cpu", "Softmax.cpu", "F.softmax.cpu", "Small_NN().cuda.", "toy_demo_1d.Softmax", "toy_demo_1d.attack_trades", "torch.softmax", "torch.softmax", "toy_demo_1d.distance_func", "Small_NN().cuda.", "Small_NN().cuda.", "distance_func.item", "distance_func.item", "torch.Size", "torch.Size", "torch.Size", "Small_NN().cuda.", "Small_NN().cuda.", "toy_demo_1d.distance_func", "toy_demo_1d.Softmax", "torch.softmax", "toy_demo_1d.distance_func", "distance_func.cpu", "distance_func.cpu", "distance_func.cpu", "Small_NN().cuda."], "function", ["home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.get_args", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.compute_C", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_pgd", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_pgd_consistent", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_pgd_consistent", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.attack_trades", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.Softmax", "home.repos.pwc.inspect_result.p2333_score.None.toy_demo_1d.distance_func"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "P_0", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "G_Mean_0", ",", "G_std_0", ")", "\n", "P_1", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "G_Mean_1", ",", "G_std_1", ")", "\n", "\n", "model", "=", "Small_NN", "(", "num_features", "=", "num_features", ")", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "params", "=", "model", ".", "parameters", "(", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "0", ")", "\n", "\n", "# compute C^{L1}", "\n", "C_L", "=", "0", "\n", "iter_C", "=", "10", "\n", "for", "_", "in", "range", "(", "iter_C", ")", ":", "\n", "        ", "Sample_0", "=", "P_0", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "half_bs_0", ",", "1", "]", ")", ")", "# bs x 1", "\n", "Sample_1", "=", "P_1", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "half_bs_1", ",", "1", "]", ")", ")", "# bs x 1", "\n", "Sample_all", "=", "torch", ".", "cat", "(", "(", "Sample_0", ",", "Sample_1", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "# 2bs x 1", "\n", "delta", "=", "compute_C", "(", "Sample_all", ",", "args", ".", "divergence", ")", "\n", "C_L", "+=", "distance_func", "(", "Softmax", "(", "Sample_all", "+", "delta", ")", ",", "Softmax", "(", "Sample_all", ")", ",", "args", ".", "divergence", ")", "\n", "", "C_L", "/=", "iter_C", "\n", "\n", "record_train_loss", "=", "[", "]", "\n", "record_SCORE_loss", "=", "[", "]", "\n", "record_Standard_loss", "=", "[", "]", "\n", "# train model", "\n", "for", "ite", "in", "range", "(", "iteration", ")", ":", "\n", "        ", "Sample_0", "=", "P_0", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "half_bs_0", ",", "1", "]", ")", ")", "# bs x 1", "\n", "Sample_1", "=", "P_1", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "half_bs_1", ",", "1", "]", ")", ")", "# bs x 1", "\n", "Sample_all", "=", "torch", ".", "cat", "(", "(", "Sample_0", ",", "Sample_1", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "# 2bs x 1", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "demo", "==", "'PGDAT'", ":", "\n", "            ", "y_all", "=", "Softmax", "(", "Sample_all", ")", "\n", "delta", "=", "attack_pgd", "(", "model", ",", "Sample_all", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "output", "=", "F", ".", "softmax", "(", "model", "(", "Sample_all", "+", "delta", ")", ",", "dim", "=", "1", ")", "# 2bs x 1", "\n", "robust_loss", "=", "distance_func", "(", "output", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "\n", "", "elif", "args", ".", "demo", "==", "'PGDATconsistent'", ":", "\n", "            ", "delta", "=", "attack_pgd_consistent", "(", "model", ",", "Sample_all", ",", "args", ".", "divergence", ")", "\n", "output", "=", "F", ".", "softmax", "(", "model", "(", "Sample_all", "+", "delta", ")", ",", "dim", "=", "1", ")", "# 2bs x 1", "\n", "y_all", "=", "Softmax", "(", "Sample_all", "+", "delta", ")", "\n", "robust_loss", "=", "distance_func", "(", "output", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "\n", "", "elif", "args", ".", "demo", "==", "'TRADES'", ":", "\n", "            ", "y_all", "=", "Softmax", "(", "Sample_all", ")", "\n", "delta", "=", "attack_trades", "(", "model", ",", "Sample_all", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "clean_output", "=", "F", ".", "softmax", "(", "model", "(", "Sample_all", ")", ",", "dim", "=", "1", ")", "# 2bs x 1", "\n", "output", "=", "F", ".", "softmax", "(", "model", "(", "Sample_all", "+", "delta", ")", ",", "dim", "=", "1", ")", "# 2bs x 1", "\n", "robust_loss", "=", "distance_func", "(", "clean_output", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "robust_loss", "+=", "TRADES_lambda", "*", "distance_func", "(", "output", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "\n", "", "elif", "args", ".", "demo", "==", "'Standard'", ":", "\n", "            ", "y_all", "=", "Softmax", "(", "Sample_all", ")", "\n", "output", "=", "F", ".", "softmax", "(", "model", "(", "Sample_all", ")", ",", "dim", "=", "1", ")", "# 2bs x 1", "\n", "robust_loss", "=", "distance_func", "(", "output", ",", "y_all", ",", "args", ".", "divergence", ")", "\n", "\n", "", "opt", ".", "zero_grad", "(", ")", "\n", "robust_loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "if", "ite", "%", "1", "==", "0", ":", "\n", "            ", "print", "(", "'ite: '", ",", "ite", ")", "\n", "print", "(", "'Train loss: '", ",", "robust_loss", ".", "item", "(", ")", ")", "\n", "record_train_loss", "+=", "[", "robust_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "]", "\n", "\n", "# compute R_{SCORE}", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "delta", "=", "attack_pgd_consistent", "(", "model", ",", "Sample_all", ",", "args", ".", "divergence_C", ")", "\n", "R_SCORE", "=", "distance_func", "(", "F", ".", "softmax", "(", "model", "(", "Sample_all", "+", "delta", ")", ",", "dim", "=", "1", ")", ",", "\n", "Softmax", "(", "Sample_all", "+", "delta", ")", ",", "args", ".", "divergence_C", ")", "\n", "print", "(", "'R_SCORE loss: '", ",", "R_SCORE", ".", "item", "(", ")", ")", "\n", "record_SCORE_loss", "+=", "[", "R_SCORE", ".", "cpu", "(", ")", ".", "item", "(", ")", "]", "\n", "\n", "# compute R_{Standard}", "\n", "standard_loss", "=", "distance_func", "(", "F", ".", "softmax", "(", "model", "(", "Sample_all", ")", ",", "dim", "=", "1", ")", ",", "\n", "Softmax", "(", "Sample_all", ")", ",", "args", ".", "divergence_C", ")", "\n", "print", "(", "'R_Standard loss: '", ",", "standard_loss", ".", "item", "(", ")", ")", "\n", "record_Standard_loss", "+=", "[", "standard_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "]", "\n", "\n", "print", "(", "'diff: '", ",", "R_SCORE", ".", "item", "(", ")", "-", "standard_loss", ".", "item", "(", ")", ")", "\n", "print", "(", "'***'", ")", "\n", "\n", "# # save intermediate states (for toy demo Figure 1)", "\n", "# if ite % 10 == 0 and ite < 301:", "\n", "#     model.eval()", "\n", "#     U = torch.distributions.uniform.Uniform(-10, 10)", "\n", "#     x_test = U.sample(sample_shape=torch.Size([10000, 1])).cuda()", "\n", "#     y_test = Softmax(x_test)", "\n", "#     pre_test = F.softmax(model(x_test).detach(), dim=1)", "\n", "#     np.savetxt('toy_results/' + args.demo + '_' + args.divergence + '/x_test_' + str(ite) + '.txt', x_test.cpu().numpy())", "\n", "#     np.savetxt('toy_results/' + args.demo + '_' + args.divergence + '/y_test_' + str(ite) + '.txt', y_test.cpu().numpy())", "\n", "#     np.savetxt('toy_results/' + args.demo + '_' + args.divergence + '/pre_test_' + str(ite) + '.txt', pre_test.cpu().numpy())", "\n", "#     model.train()", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "U", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "-", "10", ",", "10", ")", "\n", "x_test", "=", "U", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "10000", ",", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "y_test", "=", "Softmax", "(", "x_test", ")", "\n", "pre_test", "=", "F", ".", "softmax", "(", "model", "(", "x_test", ")", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "np", ".", "savetxt", "(", "'toy_results/'", "+", "args", ".", "demo", "+", "'_'", "+", "args", ".", "divergence", "+", "'/x_test.txt'", ",", "x_test", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "savetxt", "(", "'toy_results/'", "+", "args", ".", "demo", "+", "'_'", "+", "args", ".", "divergence", "+", "'/y_test.txt'", ",", "y_test", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "savetxt", "(", "'toy_results/'", "+", "args", ".", "demo", "+", "'_'", "+", "args", ".", "divergence", "+", "'/pre_test.txt'", ",", "pre_test", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "savetxt", "(", "'toy_results/'", "+", "args", ".", "demo", "+", "'_'", "+", "args", ".", "divergence", "+", "'/record_train_loss.txt'", ",", "np", ".", "array", "(", "record_train_loss", ")", ")", "\n", "np", ".", "savetxt", "(", "'toy_results/'", "+", "args", ".", "demo", "+", "'_'", "+", "args", ".", "divergence", "+", "'/record_SCORE_loss.txt'", ",", "np", ".", "array", "(", "record_SCORE_loss", ")", ")", "\n", "np", ".", "savetxt", "(", "'toy_results/'", "+", "args", ".", "demo", "+", "'_'", "+", "args", ".", "divergence", "+", "'/record_Standard_loss.txt'", ",", "np", ".", "array", "(", "record_Standard_loss", ")", ")", "\n", "\n", "print", "(", "'C_L: '", ",", "C_L", ".", "item", "(", ")", ")", "\n", "#print('C_L: ', C_L.item()**2 / 2)", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.__init__": [[35, 52], ["core.utils.Trainer.__init__", "core.utils.seed", "copy.deepcopy", "core.attacks.create_attack", "int", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed", "home.repos.pwc.inspect_result.p2333_score.attacks.__init__.create_attack"], ["def", "__init__", "(", "self", ",", "info", ",", "args", ")", ":", "\n", "        ", "super", "(", "WATrainer", ",", "self", ")", ".", "__init__", "(", "info", ",", "args", ")", "\n", "\n", "seed", "(", "args", ".", "seed", ")", "\n", "self", ".", "wa_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "self", ".", "eval_attack", "=", "create_attack", "(", "self", ".", "wa_model", ",", "CWLoss", ",", "args", ".", "attack", ",", "args", ".", "attack_eps", ",", "4", "*", "args", ".", "attack_iter", ",", "\n", "args", ".", "attack_step", ")", "\n", "num_samples", "=", "50000", "if", "'cifar'", "in", "self", ".", "params", ".", "data", "else", "73257", "\n", "num_samples", "=", "100000", "if", "'tiny-imagenet'", "in", "self", ".", "params", ".", "data", "else", "num_samples", "\n", "if", "self", ".", "params", ".", "data", "in", "[", "'cifar10'", ",", "'cifar10s'", ",", "'svhn'", ",", "'svhns'", "]", ":", "\n", "            ", "self", ".", "num_classes", "=", "10", "\n", "", "elif", "self", ".", "params", ".", "data", "in", "[", "'cifar100'", ",", "'cifar100s'", "]", ":", "\n", "            ", "self", ".", "num_classes", "=", "100", "\n", "", "elif", "self", ".", "params", ".", "data", "==", "'tiny-imagenet'", ":", "\n", "            ", "self", ".", "num_classes", "=", "200", "\n", "", "self", ".", "update_steps", "=", "int", "(", "np", ".", "floor", "(", "num_samples", "/", "self", ".", "params", ".", "batch_size", ")", "+", "1", ")", "\n", "self", ".", "warmup_steps", "=", "0.025", "*", "self", ".", "params", ".", "num_adv_epochs", "*", "self", ".", "update_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.init_optimizer": [[54, 75], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "watrain.WATrainer.init_scheduler", "model.named_parameters", "watrain.WATrainer.init_optimizer.group_weight"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_scheduler"], ["", "def", "init_optimizer", "(", "self", ",", "num_epochs", ")", ":", "\n", "        ", "\"\"\"\n        Initialize optimizer and schedulers.\n        \"\"\"", "\n", "def", "group_weight", "(", "model", ")", ":", "\n", "            ", "group_decay", "=", "[", "]", "\n", "group_no_decay", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'batchnorm'", "in", "n", ":", "\n", "                    ", "group_no_decay", ".", "append", "(", "p", ")", "\n", "", "else", ":", "\n", "                    ", "group_decay", ".", "append", "(", "p", ")", "\n", "", "", "assert", "len", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ")", "==", "len", "(", "group_decay", ")", "+", "len", "(", "group_no_decay", ")", "\n", "groups", "=", "[", "dict", "(", "params", "=", "group_decay", ")", ",", "dict", "(", "params", "=", "group_no_decay", ",", "weight_decay", "=", ".0", ")", "]", "\n", "return", "groups", "\n", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "group_weight", "(", "self", ".", "model", ")", ",", "lr", "=", "self", ".", "params", ".", "lr", ",", "weight_decay", "=", "self", ".", "params", ".", "weight_decay", ",", "\n", "momentum", "=", "0.9", ",", "nesterov", "=", "self", ".", "params", ".", "nesterov", ")", "\n", "if", "num_epochs", "<=", "0", ":", "\n", "            ", "return", "\n", "", "self", ".", "init_scheduler", "(", "num_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.train": [[77, 135], ["pandas.DataFrame", "watrain.WATrainer.model.train", "tqdm.tqdm.tqdm", "watrain.update_bn", "dict", "loss.backward", "watrain.WATrainer.optimizer.step", "watrain.ema_update", "metrics.append.append.append", "watrain.WATrainer.scheduler.step", "metrics.append.append.mean", "core.utils.set_bn_momentum", "range", "watrain.WATrainer.standard_loss", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "watrain.WATrainer.scheduler.step", "pandas.DataFrame", "core.utils.set_bn_momentum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cutmix.cutmix.cutmix", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "x.to", "y.to", "watrain.WATrainer.mart_loss", "watrain.WATrainer.model.parameters", "x.detach", "y.detach", "watrain.WATrainer.trades_loss_LSE", "watrain.WATrainer.trades_loss", "watrain.WATrainer.adversarial_loss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.utils.watrain.update_bn", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.utils.watrain.ema_update", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.utils.utils.set_bn_momentum", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.standard_loss", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.utils.utils.set_bn_momentum", "home.repos.pwc.inspect_result.p2333_score.utils.cutmix.cutmix", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.mart_loss", "home.repos.pwc.inspect_result.p2333_score.utils.trades.trades_loss_LSE", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.trades_loss", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.adversarial_loss"], ["", "def", "train", "(", "self", ",", "dataloader", ",", "epoch", "=", "0", ",", "adversarial", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Run one epoch of training.\n        \"\"\"", "\n", "metrics", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "update_iter", "=", "0", "\n", "for", "data", "in", "tqdm", "(", "dataloader", ",", "desc", "=", "'Epoch {}: '", ".", "format", "(", "epoch", ")", ",", "disable", "=", "not", "verbose", ")", ":", "\n", "            ", "global_step", "=", "(", "epoch", "-", "1", ")", "*", "self", ".", "update_steps", "+", "update_iter", "\n", "if", "global_step", "==", "0", ":", "\n", "# make BN running mean and variance init same as Haiku", "\n", "                ", "set_bn_momentum", "(", "self", ".", "model", ",", "momentum", "=", "1.0", ")", "\n", "", "elif", "global_step", "==", "1", ":", "\n", "                ", "set_bn_momentum", "(", "self", ".", "model", ",", "momentum", "=", "0.01", ")", "\n", "", "update_iter", "+=", "1", "\n", "\n", "x", ",", "y", "=", "data", "\n", "if", "self", ".", "params", ".", "CutMix", ":", "\n", "                ", "x_all", ",", "y_all", "=", "torch", ".", "tensor", "(", "[", "]", ")", ",", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "# 128 x 4 = 512 or 256 x 4 = 1024", "\n", "                    ", "x_tmp", ",", "y_tmp", "=", "x", ".", "detach", "(", ")", ",", "y", ".", "detach", "(", ")", "\n", "x_tmp", ",", "y_tmp", "=", "cutmix", "(", "x_tmp", ",", "y_tmp", ",", "alpha", "=", "1.0", ",", "beta", "=", "1.0", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "x_all", "=", "torch", ".", "cat", "(", "(", "x_all", ",", "x_tmp", ")", ",", "dim", "=", "0", ")", "\n", "y_all", "=", "torch", ".", "cat", "(", "(", "y_all", ",", "y_tmp", ")", ",", "dim", "=", "0", ")", "\n", "", "x", ",", "y", "=", "x_all", ".", "to", "(", "device", ")", ",", "y_all", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "to", "(", "device", ")", ",", "y", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "adversarial", ":", "\n", "                ", "if", "self", ".", "params", ".", "beta", "is", "not", "None", "and", "self", ".", "params", ".", "mart", ":", "\n", "                    ", "loss", ",", "batch_metrics", "=", "self", ".", "mart_loss", "(", "x", ",", "y", ",", "beta", "=", "self", ".", "params", ".", "beta", ")", "\n", "", "elif", "self", ".", "params", ".", "beta", "is", "not", "None", "and", "self", ".", "params", ".", "LSE", ":", "\n", "                    ", "loss", ",", "batch_metrics", "=", "self", ".", "trades_loss_LSE", "(", "x", ",", "y", ",", "beta", "=", "self", ".", "params", ".", "beta", ")", "\n", "", "elif", "self", ".", "params", ".", "beta", "is", "not", "None", ":", "\n", "                    ", "loss", ",", "batch_metrics", "=", "self", ".", "trades_loss", "(", "x", ",", "y", ",", "beta", "=", "self", ".", "params", ".", "beta", ")", "\n", "", "else", ":", "\n", "                    ", "loss", ",", "batch_metrics", "=", "self", ".", "adversarial_loss", "(", "x", ",", "y", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ",", "batch_metrics", "=", "self", ".", "standard_loss", "(", "x", ",", "y", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "params", ".", "clip_grad", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "params", ".", "clip_grad", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "params", ".", "scheduler", "in", "[", "'cyclic'", "]", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "global_step", "=", "(", "epoch", "-", "1", ")", "*", "self", ".", "update_steps", "+", "update_iter", "\n", "ema_update", "(", "self", ".", "wa_model", ",", "self", ".", "model", ",", "global_step", ",", "decay_rate", "=", "self", ".", "params", ".", "tau", ",", "\n", "warmup_steps", "=", "self", ".", "warmup_steps", ",", "dynamic_decay", "=", "True", ")", "\n", "metrics", "=", "metrics", ".", "append", "(", "pd", ".", "DataFrame", "(", "batch_metrics", ",", "index", "=", "[", "0", "]", ")", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "params", ".", "scheduler", "in", "[", "'step'", ",", "'converge'", ",", "'cosine'", ",", "'cosinew'", "]", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "update_bn", "(", "self", ".", "wa_model", ",", "self", ".", "model", ")", "\n", "return", "dict", "(", "metrics", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.trades_loss": [[137, 146], ["trades.trades_loss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.trades_loss"], ["", "def", "trades_loss", "(", "self", ",", "x", ",", "y", ",", "beta", ")", ":", "\n", "        ", "\"\"\"\n        TRADES training.\n        \"\"\"", "\n", "loss", ",", "batch_metrics", "=", "trades_loss", "(", "self", ".", "model", ",", "x", ",", "y", ",", "self", ".", "optimizer", ",", "step_size", "=", "self", ".", "params", ".", "attack_step", ",", "\n", "epsilon", "=", "self", ".", "params", ".", "attack_eps", ",", "perturb_steps", "=", "self", ".", "params", ".", "attack_iter", ",", "\n", "beta", "=", "beta", ",", "attack", "=", "self", ".", "params", ".", "attack", ",", "label_smoothing", "=", "self", ".", "params", ".", "ls", ",", "\n", "use_cutmix", "=", "self", ".", "params", ".", "CutMix", ")", "\n", "return", "loss", ",", "batch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.trades_loss_LSE": [[147, 158], ["trades.trades_loss_LSE"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.trades.trades_loss_LSE"], ["", "def", "trades_loss_LSE", "(", "self", ",", "x", ",", "y", ",", "beta", ")", ":", "\n", "        ", "\"\"\"\n        TRADES training with LSE loss.\n        \"\"\"", "\n", "loss", ",", "batch_metrics", "=", "trades_loss_LSE", "(", "self", ".", "model", ",", "x", ",", "y", ",", "self", ".", "optimizer", ",", "step_size", "=", "self", ".", "params", ".", "attack_step", ",", "\n", "epsilon", "=", "self", ".", "params", ".", "attack_eps", ",", "perturb_steps", "=", "self", ".", "params", ".", "attack_iter", ",", "\n", "beta", "=", "beta", ",", "attack", "=", "self", ".", "params", ".", "attack", ",", "label_smoothing", "=", "self", ".", "params", ".", "ls", ",", "\n", "clip_value", "=", "self", ".", "params", ".", "clip_value", ",", "\n", "use_cutmix", "=", "self", ".", "params", ".", "CutMix", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "loss", ",", "batch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.eval": [[160, 178], ["watrain.WATrainer.wa_model.eval", "len", "core.metrics.accuracy", "x.to", "y.to", "watrain.WATrainer.wa_model", "watrain.WATrainer.wa_model", "core.utils.ctx_noparamgrad_and_eval", "watrain.WATrainer.eval_attack.perturb"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad_and_eval", "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.perturb"], ["", "def", "eval", "(", "self", ",", "dataloader", ",", "adversarial", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate performance of the model.\n        \"\"\"", "\n", "acc", "=", "0.0", "\n", "self", ".", "wa_model", ".", "eval", "(", ")", "\n", "\n", "for", "x", ",", "y", "in", "dataloader", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "to", "(", "device", ")", ",", "y", ".", "to", "(", "device", ")", "\n", "if", "adversarial", ":", "\n", "                ", "with", "ctx_noparamgrad_and_eval", "(", "self", ".", "wa_model", ")", ":", "\n", "                    ", "x_adv", ",", "_", "=", "self", ".", "eval_attack", ".", "perturb", "(", "x", ",", "y", ")", "\n", "", "out", "=", "self", ".", "wa_model", "(", "x_adv", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "wa_model", "(", "x", ")", "\n", "", "acc", "+=", "accuracy", "(", "y", ",", "out", ")", "\n", "", "acc", "/=", "len", "(", "dataloader", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.save_model": [[180, 188], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "watrain.WATrainer.wa_model.state_dict", "watrain.WATrainer.model.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Save model weights.\n        \"\"\"", "\n", "torch", ".", "save", "(", "{", "\n", "'model_state_dict'", ":", "self", ".", "wa_model", ".", "state_dict", "(", ")", ",", "\n", "'unaveraged_model_state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.WATrainer.load_model": [[190, 198], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "watrain.WATrainer.wa_model.load_state_dict", "RuntimeError"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load model weights.\n        \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "'model_state_dict'", "not", "in", "checkpoint", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Model weights not found at {}.'", ".", "format", "(", "path", ")", ")", "\n", "", "self", ".", "wa_model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.ema_update": [[200, 215], ["int", "zip", "wa_model.parameters", "model.parameters", "min"], "function", ["None"], ["", "", "def", "ema_update", "(", "wa_model", ",", "model", ",", "global_step", ",", "decay_rate", "=", "0.995", ",", "warmup_steps", "=", "0", ",", "dynamic_decay", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Exponential model weight averaging update.\n    \"\"\"", "\n", "factor", "=", "int", "(", "global_step", ">=", "warmup_steps", ")", "\n", "if", "dynamic_decay", ":", "\n", "        ", "delta", "=", "global_step", "-", "warmup_steps", "\n", "decay", "=", "min", "(", "decay_rate", ",", "(", "1.", "+", "delta", ")", "/", "(", "10.", "+", "delta", ")", ")", "if", "10.", "+", "delta", "!=", "0", "else", "decay_rate", "\n", "", "else", ":", "\n", "        ", "decay", "=", "decay_rate", "\n", "", "decay", "*=", "factor", "\n", "\n", "for", "p_swa", ",", "p_model", "in", "zip", "(", "wa_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "p_swa", ".", "data", "*=", "decay", "\n", "p_swa", ".", "data", "+=", "p_model", ".", "data", "*", "(", "1", "-", "decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.watrain.update_bn": [[217, 229], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "avg_model.eval", "model.eval", "zip", "avg_model.modules", "model.modules", "isinstance"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_bn", "(", "avg_model", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    Update batch normalization layers.\n    \"\"\"", "\n", "avg_model", ".", "eval", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "module1", ",", "module2", "in", "zip", "(", "avg_model", ".", "modules", "(", ")", ",", "model", ".", "modules", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "module1", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module1", ".", "running_mean", "=", "module2", ".", "running_mean", "\n", "module1", ".", "running_var", "=", "module2", ".", "running_var", "\n", "module1", ".", "num_batches_tracked", "=", "module2", ".", "num_batches_tracked", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.trades.squared_l2_norm": [[10, 13], ["x.view", "x.unsqueeze"], "function", ["None"], ["\n", "\n", "def", "squared_l2_norm", "(", "x", ")", ":", "\n", "    ", "flattened", "=", "x", ".", "view", "(", "x", ".", "unsqueeze", "(", "0", ")", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.trades.l2_norm": [[15, 17], ["squared_l2_norm().sqrt", "trades.squared_l2_norm"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.trades.squared_l2_norm"], ["\n", "\n", "", "def", "l2_norm", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.trades.trades_loss": [[19, 90], ["torch.KLDivLoss", "model.eval", "len", "torch.softmax", "model.train", "torch.autograd.Variable", "optimizer.zero_grad", "model", "model", "torch.cross_entropy", "x_natural.detach", "model", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "nn.KLDivLoss.", "loss.item", "core.metrics.accuracy", "core.metrics.accuracy", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.autograd.Variable.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.autograd.Variable", "torch.SGD", "range", "torch.autograd.Variable", "ValueError", "torch.log_softmax", "torch.softmax", "model.detach", "model.detach", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "nn.KLDivLoss.", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.Variable.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "optim.SGD.zero_grad", "loss.backward", "torch.autograd.Variable.grad.view().norm", "torch.autograd.Variable.grad.div_", "optim.SGD.step", "torch.autograd.Variable.data.add_", "torch.autograd.Variable.data.clamp_().sub_", "torch.autograd.Variable.data.renorm_", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.log_softmax", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "delta.grad.view().norm.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "model", "grad.detach", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "nn.KLDivLoss.", "torch.autograd.Variable.grad.view", "torch.autograd.Variable.data.clamp_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.log_softmax", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "model"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step"], ["\n", "\n", "", "def", "trades_loss", "(", "model", ",", "x_natural", ",", "y", ",", "optimizer", ",", "step_size", "=", "0.003", ",", "epsilon", "=", "0.031", ",", "perturb_steps", "=", "10", ",", "beta", "=", "1.0", ",", "\n", "attack", "=", "'linf-pgd'", ",", "label_smoothing", "=", "0.1", ",", "use_cutmix", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    TRADES training (Zhang et al, 2019).\n    \"\"\"", "\n", "\n", "criterion_ce", "=", "SmoothCrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "smoothing", "=", "label_smoothing", ")", "\n", "criterion_kl", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", "\n", "model", ".", "train", "(", ")", "\n", "track_bn_stats", "(", "model", ",", "False", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "torch", ".", "FloatTensor", "(", "x_natural", ".", "shape", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "\n", "if", "use_cutmix", ":", "# CutMix", "\n", "        ", "p_natural", "=", "y", "\n", "", "else", ":", "\n", "        ", "p_natural", "=", "F", ".", "softmax", "(", "model", "(", "x_natural", ")", ",", "dim", "=", "1", ")", "\n", "p_natural", "=", "p_natural", ".", "detach", "(", ")", "\n", "\n", "", "if", "attack", "==", "'linf-pgd'", ":", "\n", "        ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss_kl", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", ",", "p_natural", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_kl", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "", "elif", "attack", "==", "'l2-pgd'", ":", "\n", "        ", "delta", "=", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "delta", "=", "Variable", "(", "delta", ".", "data", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# Setup optimizers", "\n", "optimizer_delta", "=", "optim", ".", "SGD", "(", "[", "delta", "]", ",", "lr", "=", "epsilon", "/", "perturb_steps", "*", "2", ")", "\n", "\n", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "adv", "=", "x_natural", "+", "delta", "\n", "\n", "# optimize", "\n", "optimizer_delta", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss", "=", "(", "-", "1", ")", "*", "criterion_kl", "(", "F", ".", "log_softmax", "(", "model", "(", "adv", ")", ",", "dim", "=", "1", ")", ",", "p_natural", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "# renorming gradient", "\n", "grad_norms", "=", "delta", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "delta", ".", "grad", ".", "div_", "(", "grad_norms", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "# avoid nan or inf if gradient is 0", "\n", "if", "(", "grad_norms", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                ", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", "=", "torch", ".", "randn_like", "(", "delta", ".", "grad", "[", "grad_norms", "==", "0", "]", ")", "\n", "", "optimizer_delta", ".", "step", "(", ")", "\n", "\n", "# projection", "\n", "delta", ".", "data", ".", "add_", "(", "x_natural", ")", "\n", "delta", ".", "data", ".", "clamp_", "(", "0", ",", "1", ")", ".", "sub_", "(", "x_natural", ")", "\n", "delta", ".", "data", ".", "renorm_", "(", "p", "=", "2", ",", "dim", "=", "0", ",", "maxnorm", "=", "epsilon", ")", "\n", "", "x_adv", "=", "Variable", "(", "x_natural", "+", "delta", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Attack={attack} not supported for TRADES training!'", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "track_bn_stats", "(", "model", ",", "True", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# calculate robust loss", "\n", "logits_natural", "=", "model", "(", "x_natural", ")", "\n", "logits_adv", "=", "model", "(", "x_adv", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.trades.trades_loss_LSE": [[91, 135], ["model.train", "track_bn_stats", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.softmax", "model.train", "track_bn_stats", "torch.autograd.Variable", "optimizer.zero_grad", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x_natural.detach", "torch.FloatTensor().uniform_().cuda().detach", "torch.FloatTensor().uniform_().cuda().detach", "torch.FloatTensor().uniform_().cuda().detach", "torch.FloatTensor().uniform_().cuda().detach", "model", "range", "ValueError", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "model", "model", "torch.sum.mean", "loss.item", "core.metrics.accuracy", "core.metrics.accuracy", "torch.clamp.requires_grad_", "torch.softmax", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.one_hot", "torch.sum.mean", "F.softmax.detach", "F.softmax.detach", "torch.FloatTensor().uniform_().cuda", "torch.FloatTensor().uniform_().cuda", "torch.FloatTensor().uniform_().cuda", "torch.FloatTensor().uniform_().cuda", "model", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "grad.detach", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.utils.utils.track_bn_stats", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.utils.utils.track_bn_stats", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["\n", "if", "use_cutmix", ":", "# CutMix", "\n", "        ", "loss_natural", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "logits_natural", ",", "dim", "=", "1", ")", ",", "y", ")", "\n", "", "else", ":", "\n", "        ", "loss_natural", "=", "criterion_ce", "(", "logits_natural", ",", "y", ")", "\n", "\n", "", "loss_robust", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "logits_adv", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "logits_natural", ",", "dim", "=", "1", ")", ")", "\n", "loss", "=", "loss_natural", "+", "beta", "*", "loss_robust", "\n", "\n", "if", "use_cutmix", ":", "# CutMix", "\n", "        ", "batch_metrics", "=", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'clean_acc'", ":", "-", "1", ",", "\n", "'adversarial_acc'", ":", "-", "1", "}", "\n", "", "else", ":", "\n", "        ", "batch_metrics", "=", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'clean_acc'", ":", "accuracy", "(", "y", ",", "logits_natural", ".", "detach", "(", ")", ")", ",", "\n", "'adversarial_acc'", ":", "accuracy", "(", "y", ",", "logits_adv", ".", "detach", "(", ")", ")", "}", "\n", "\n", "", "return", "loss", ",", "batch_metrics", "\n", "\n", "", "def", "trades_loss_LSE", "(", "model", ",", "x_natural", ",", "y", ",", "optimizer", ",", "step_size", "=", "0.003", ",", "epsilon", "=", "0.031", ",", "perturb_steps", "=", "10", ",", "beta", "=", "1.0", ",", "\n", "attack", "=", "'linf-pgd'", ",", "label_smoothing", "=", "0.1", ",", "clip_value", "=", "0", ",", "use_cutmix", "=", "False", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    TRADES training (Zhang et al, 2019).\n    \"\"\"", "\n", "# criterion_ce = SmoothCrossEntropyLoss(reduction='mean', smoothing=label_smoothing)", "\n", "# criterion_kl = nn.KLDivLoss(reduction='sum')", "\n", "model", ".", "train", "(", ")", "\n", "track_bn_stats", "(", "model", ",", "False", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "torch", ".", "FloatTensor", "(", "x_natural", ".", "shape", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "\n", "if", "use_cutmix", ":", "# CutMix", "\n", "        ", "p_natural", "=", "y", "\n", "", "else", ":", "\n", "        ", "p_natural", "=", "F", ".", "softmax", "(", "model", "(", "x_natural", ")", ",", "dim", "=", "1", ")", "\n", "p_natural", "=", "p_natural", ".", "detach", "(", ")", "\n", "\n", "", "if", "attack", "==", "'linf-pgd'", ":", "\n", "        ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "output_adv", "=", "F", ".", "softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss_lse", "=", "torch", ".", "sum", "(", "(", "output_adv", "-", "p_natural", ")", "**", "2", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_lse", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.cutmix.cutmix": [[6, 39], ["torch.one_hot", "numpy.random.beta", "numpy.sqrt", "numpy.array", "numpy.array", "cutmix._random_box", "numpy.random.permutation", "cutmix.cutmix._cutmix"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.cutmix._random_box"], ["def", "cutmix", "(", "images", ",", "labels", ",", "alpha", "=", "1.0", ",", "beta", "=", "1.0", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Apply CutMix to a batch of images.\n    Arguments:\n        image (torch.FloatTensor): images.\n        labels (torch.LongTensor): target labels.\n        alpha (float): parameter for cut ratio.\n        beta (float): parameter for cut ratio.\n        num_classes (int): number of target classes.\n    Returns:\n        augmented batch of images and labels.\n    \"\"\"", "\n", "batch_size", ",", "_", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "labels", "=", "F", ".", "one_hot", "(", "labels", ",", "num_classes", ")", "\n", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "beta", ")", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ")", "\n", "cut_w", "=", "np", ".", "array", "(", "width", "*", "cut_rat", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "cut_h", "=", "np", ".", "array", "(", "height", "*", "cut_rat", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "box_coords", "=", "_random_box", "(", "height", ",", "width", ",", "cut_h", ",", "cut_w", ")", "\n", "\n", "# Adjust lambda.", "\n", "lam", "=", "1.", "-", "(", "box_coords", "[", "2", "]", "*", "box_coords", "[", "3", "]", "/", "(", "height", "*", "width", ")", ")", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "batch_size", ")", "\n", "\n", "def", "_cutmix", "(", "x", ",", "y", ")", ":", "\n", "        ", "images_a", "=", "x", "\n", "images_b", "=", "x", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "\n", "y", "=", "lam", "*", "y", "+", "(", "1.", "-", "lam", ")", "*", "y", "[", "idx", ",", ":", "]", "\n", "x", "=", "_compose_two_images", "(", "images_a", ",", "images_b", ",", "box_coords", ")", "\n", "return", "x", ",", "y", "\n", "\n", "", "return", "_cutmix", "(", "images", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.cutmix._random_box": [[41, 57], ["numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.array", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "_random_box", "(", "height", ",", "width", ",", "cut_h", ",", "cut_w", ")", ":", "\n", "    ", "\"\"\"\n    Return a random box within the image size.\n    \"\"\"", "\n", "minval_h", "=", "0", "\n", "minval_w", "=", "0", "\n", "maxval_h", "=", "height", "\n", "maxval_w", "=", "width", "\n", "\n", "i", "=", "np", ".", "random", ".", "randint", "(", "minval_h", ",", "maxval_h", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "j", "=", "np", ".", "random", ".", "randint", "(", "minval_w", ",", "maxval_w", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "i", "-", "cut_h", "//", "2", ",", "0", ",", "height", ")", "\n", "bbx1", "=", "np", ".", "clip", "(", "j", "-", "cut_w", "//", "2", ",", "0", ",", "width", ")", "\n", "h", "=", "np", ".", "clip", "(", "i", "+", "cut_h", "//", "2", ",", "0", ",", "height", ")", "-", "bby1", "\n", "w", "=", "np", ".", "clip", "(", "j", "+", "cut_w", "//", "2", ",", "0", ",", "width", ")", "-", "bbx1", "\n", "return", "np", ".", "array", "(", "[", "bby1", ",", "bbx1", ",", "h", ",", "w", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.cutmix._compose_two_images": [[59, 70], ["torch.stack", "torch.stack", "cutmix._window_mask", "cutmix._compose_two_images._single_compose_two_images"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.cutmix._window_mask"], ["", "def", "_compose_two_images", "(", "images", ",", "image_permutation", ",", "bbox", ")", ":", "\n", "    ", "\"\"\"\n    Mix two images.\n    \"\"\"", "\n", "def", "_single_compose_two_images", "(", "image1", ",", "image2", ")", ":", "\n", "        ", "_", ",", "height", ",", "width", "=", "image1", ".", "shape", "\n", "mask", "=", "_window_mask", "(", "bbox", ",", "(", "height", ",", "width", ")", ")", "\n", "return", "image1", "*", "(", "1.", "-", "mask", ")", "+", "image2", "*", "mask", "\n", "\n", "", "new_images", "=", "[", "_single_compose_two_images", "(", "image1", ",", "image2", ")", "for", "image1", ",", "image2", "in", "zip", "(", "images", ",", "image_permutation", ")", "]", "\n", "return", "torch", ".", "stack", "(", "new_images", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.cutmix._window_mask": [[72, 83], ["numpy.reshape", "numpy.reshape", "numpy.logical_and().astype", "numpy.arange", "numpy.arange", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["", "def", "_window_mask", "(", "destination_box", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Compute window mask.\n    \"\"\"", "\n", "height_offset", ",", "width_offset", ",", "h", ",", "w", "=", "destination_box", "\n", "h_range", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "size", "[", "0", "]", ")", ",", "[", "1", ",", "size", "[", "0", "]", ",", "1", "]", ")", "\n", "w_range", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "size", "[", "1", "]", ")", ",", "[", "1", ",", "1", ",", "size", "[", "1", "]", "]", ")", "\n", "return", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "height_offset", "<=", "h_range", ",", "h_range", "<", "height_offset", "+", "h", ")", ",", "\n", "np", ".", "logical_and", "(", "width_offset", "<=", "w_range", ",", "w_range", "<", "width_offset", "+", "w", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad.__init__": [[5, 9], ["context.get_param_grad_state", "context.set_param_grad_off"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.context.get_param_grad_state", "home.repos.pwc.inspect_result.p2333_score.utils.context.set_param_grad_off"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "prev_grad_state", "=", "get_param_grad_state", "(", "module", ")", "\n", "self", ".", "module", "=", "module", "\n", "set_param_grad_off", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad.__enter__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad.__exit__": [[13, 16], ["context.set_param_grad_state"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.context.set_param_grad_state"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "set_param_grad_state", "(", "self", ".", "module", ",", "self", ".", "prev_grad_state", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_eval.__init__": [[19, 23], ["context.get_module_training_state", "context.set_module_training_off"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.context.get_module_training_state", "home.repos.pwc.inspect_result.p2333_score.utils.context.set_module_training_off"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "prev_training_state", "=", "get_module_training_state", "(", "module", ")", "\n", "self", ".", "module", "=", "module", "\n", "set_module_training_off", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_eval.__enter__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_eval.__exit__": [[27, 30], ["context.set_module_training_state"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.context.set_module_training_state"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "set_module_training_state", "(", "self", ".", "module", ",", "self", ".", "prev_training_state", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad_and_eval": [[32, 36], ["context.ctx_noparamgrad", "context.ctx_eval"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "ctx_noparamgrad_and_eval", "(", "module", ")", ":", "\n", "    ", "with", "ctx_noparamgrad", "(", "module", ")", "as", "a", ",", "ctx_eval", "(", "module", ")", "as", "b", ":", "\n", "        ", "yield", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.get_module_training_state": [[38, 40], ["module.modules"], "function", ["None"], ["", "", "def", "get_module_training_state", "(", "module", ")", ":", "\n", "    ", "return", "{", "mod", ":", "mod", ".", "training", "for", "mod", "in", "module", ".", "modules", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.set_module_training_state": [[42, 45], ["module.modules"], "function", ["None"], ["", "def", "set_module_training_state", "(", "module", ",", "training_state", ")", ":", "\n", "    ", "for", "mod", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "mod", ".", "training", "=", "training_state", "[", "mod", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.set_module_training_off": [[47, 50], ["module.modules"], "function", ["None"], ["", "", "def", "set_module_training_off", "(", "module", ")", ":", "\n", "    ", "for", "mod", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "mod", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.get_param_grad_state": [[52, 54], ["module.parameters"], "function", ["None"], ["", "", "def", "get_param_grad_state", "(", "module", ")", ":", "\n", "    ", "return", "{", "param", ":", "param", ".", "requires_grad", "for", "param", "in", "module", ".", "parameters", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.set_param_grad_state": [[56, 59], ["module.parameters"], "function", ["None"], ["", "def", "set_param_grad_state", "(", "module", ",", "grad_state", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "grad_state", "[", "param", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.context.set_param_grad_off": [[61, 64], ["module.parameters"], "function", ["None"], ["", "", "def", "set_param_grad_off", "(", "module", ")", ":", "\n", "    ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.mart.mart_loss": [[9, 57], ["torch.KLDivLoss", "model.eval", "len", "model.train", "torch.autograd.Variable", "optimizer.zero_grad", "model", "model", "torch.softmax", "torch.where", "torch.where", "torch.where", "torch.softmax", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "x_natural.detach", "range", "ValueError", "torch.clamp", "torch.clamp", "torch.clamp", "torch.argsort", "torch.argsort", "torch.argsort", "torch.cross_entropy", "torch.nll_loss", "torch.sum", "torch.sum", "torch.sum", "loss.item", "core.metrics.accuracy", "core.metrics.accuracy", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.gather", "torch.gather", "torch.gather", "float", "model.detach", "model.detach", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.cross_entropy", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "y.unsqueeze().long", "torch.sum", "torch.sum", "torch.sum", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "model", "torch.sign", "torch.sign", "torch.sign", "nn.KLDivLoss.", "grad.detach", "y.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log", "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log"], ["def", "mart_loss", "(", "model", ",", "x_natural", ",", "y", ",", "optimizer", ",", "step_size", "=", "0.007", ",", "epsilon", "=", "0.031", ",", "perturb_steps", "=", "10", ",", "beta", "=", "6.0", ",", "\n", "attack", "=", "'linf-pgd'", ")", ":", "\n", "    ", "\"\"\"\n    MART training (Wang et al, 2020).\n    \"\"\"", "\n", "\n", "kl", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'none'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "\n", "# generate adversarial example", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "if", "attack", "==", "'linf-pgd'", ":", "\n", "        ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss_ce", "=", "F", ".", "cross_entropy", "(", "model", "(", "x_adv", ")", ",", "y", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_ce", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Attack={attack} not supported for MART training!'", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "# zero gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "model", "(", "x_natural", ")", "\n", "logits_adv", "=", "model", "(", "x_adv", ")", "\n", "\n", "adv_probs", "=", "F", ".", "softmax", "(", "logits_adv", ",", "dim", "=", "1", ")", "\n", "tmp1", "=", "torch", ".", "argsort", "(", "adv_probs", ",", "dim", "=", "1", ")", "[", ":", ",", "-", "2", ":", "]", "\n", "new_y", "=", "torch", ".", "where", "(", "tmp1", "[", ":", ",", "-", "1", "]", "==", "y", ",", "tmp1", "[", ":", ",", "-", "2", "]", ",", "tmp1", "[", ":", ",", "-", "1", "]", ")", "\n", "loss_adv", "=", "F", ".", "cross_entropy", "(", "logits_adv", ",", "y", ")", "+", "F", ".", "nll_loss", "(", "torch", ".", "log", "(", "1.0001", "-", "adv_probs", "+", "1e-12", ")", ",", "new_y", ")", "\n", "\n", "nat_probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "true_probs", "=", "torch", ".", "gather", "(", "nat_probs", ",", "1", ",", "(", "y", ".", "unsqueeze", "(", "1", ")", ")", ".", "long", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "loss_robust", "=", "(", "1.0", "/", "batch_size", ")", "*", "torch", ".", "sum", "(", "\n", "torch", ".", "sum", "(", "kl", "(", "torch", ".", "log", "(", "adv_probs", "+", "1e-12", ")", ",", "nat_probs", ")", ",", "dim", "=", "1", ")", "*", "(", "1.0000001", "-", "true_probs", ")", ")", "\n", "loss", "=", "loss_adv", "+", "float", "(", "beta", ")", "*", "loss_robust", "\n", "\n", "batch_metrics", "=", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'clean_acc'", ":", "accuracy", "(", "y", ",", "logits", ".", "detach", "(", ")", ")", ",", "\n", "'adversarial_acc'", ":", "accuracy", "(", "y", ",", "logits_adv", ".", "detach", "(", ")", ")", "}", "\n", "\n", "return", "loss", ",", "batch_metrics", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.__init__": [[10, 15], ["logging.getLogger", "logger.Logger.setup_file_logger", "print"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.setup_file_logger"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "setup_file_logger", "(", ")", "\n", "print", "(", "'Logging to file: '", ",", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.setup_file_logger": [[16, 20], ["logging.FileHandler", "logger.Logger.logger.addHandler", "logger.Logger.logger.setLevel"], "methods", ["None"], ["", "def", "setup_file_logger", "(", "self", ")", ":", "\n", "        ", "hdlr", "=", "logging", ".", "FileHandler", "(", "self", ".", "path", ",", "'w+'", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.logger.Logger.log": [[21, 24], ["print", "logger.Logger.logger.info"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "message", ")", "\n", "self", ".", "logger", ".", "info", "(", "message", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.__init__": [[10, 15], ["rst.CosineLR._reset", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR._reset", "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "max_lr", ",", "epochs", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "max_lr", "=", "max_lr", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "_reset", "(", ")", "\n", "super", "(", "CosineLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR._reset": [[16, 19], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_lr", "=", "self", ".", "max_lr", "\n", "self", ".", "current_epoch", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step": [[20, 26], ["numpy.cos"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_lr", "=", "self", ".", "max_lr", "*", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "(", "self", ".", "current_epoch", "-", "1", ")", "/", "self", ".", "epochs", "*", "np", ".", "pi", ")", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "self", ".", "current_lr", "\n", "", "self", ".", "current_epoch", "+=", "1", "\n", "self", ".", "_last_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.get_lr": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "current_lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.parser.parser_train": [[11, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "parser_train", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments (train.py).\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Standard + Adversarial Training.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--augment'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'Augment training set.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'Batch size for training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size-validation'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'Batch size for testing.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "type", "=", "str", ",", "default", "=", "'/cluster/home/rarade/data/'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-dir'", ",", "type", "=", "str", ",", "default", "=", "'/cluster/scratch/rarade/test/'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'cifar10s'", ",", "choices", "=", "DATASETS", ",", "help", "=", "'Data to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--desc'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'Description of experiment. It will be used to name directories.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model'", ",", "choices", "=", "MODELS", ",", "default", "=", "'wrn-28-10-swish'", ",", "help", "=", "'Model architecture to be used.'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalize'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'Normalize input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained-file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Pretrained weights file name.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-na'", ",", "'--num-adv-epochs'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'Number of adversarial training epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--adv-eval-freq'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'Adversarial evaluation frequency (in epochs).'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "help", "=", "'Stability regularization, i.e., 1/lambda in TRADES.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "'Learning rate for optimizer (SGD).'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'Optimizer (SGD) weight decay.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "choices", "=", "SCHEDULERS", ",", "default", "=", "'cosinew'", ",", "help", "=", "'Type of scheduler.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'Use Nesterov momentum.'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'Gradient norm clipping.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--attack'", ",", "type", "=", "str", ",", "choices", "=", "ATTACKS", ",", "default", "=", "'linf-pgd'", ",", "help", "=", "'Type of attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-eps'", ",", "type", "=", "str2float", ",", "default", "=", "8", "/", "255", ",", "help", "=", "'Epsilon for the attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-step'", ",", "type", "=", "str2float", ",", "default", "=", "2", "/", "255", ",", "help", "=", "'Step size for PGD attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-iter'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Max. number of iterations (if any) for the attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep-clean'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'Use clean samples during adversarial training.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Debug code. Run 1 epoch of training and evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mart'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'MART training.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--unsup-fraction'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "help", "=", "'Ratio of unlabelled data to labelled data.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aux-data-filename'", ",", "type", "=", "str", ",", "help", "=", "'Path to additional Tiny Images data.'", ",", "\n", "default", "=", "'/cluster/scratch/rarade/cifar10s/ti_500K_pseudo_labeled.pickle'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Random seed.'", ")", "\n", "\n", "### Our methods", "\n", "parser", ".", "add_argument", "(", "'--LSE'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'LSE training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ls'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'label smoothing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_value'", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--CutMix'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'use CutMix.'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.parser.parser_eval": [[67, 94], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parser_eval", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments (eval-adv.py, eval-corr.py, eval-aa.py).\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Robustness evaluation.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "type", "=", "str", ",", "default", "=", "'/cluster/home/rarade/data/'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-dir'", ",", "type", "=", "str", ",", "default", "=", "'/cluster/scratch/rarade/test/'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--desc'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'Description of model to be evaluated.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-samples'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'Number of test samples.'", ")", "\n", "\n", "# eval-aa.py", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Evaluate on training set.'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "'--version'", ",", "type", "=", "str", ",", "default", "=", "'standard'", ",", "choices", "=", "[", "'custom'", ",", "'plus'", ",", "'standard'", "]", ",", "\n", "help", "=", "'Version of AA.'", ")", "\n", "\n", "# eval-adv.py", "\n", "parser", ".", "add_argument", "(", "'--source'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Path to source model for black-box evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--wb'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Perform white-box PGD evaluation.'", ")", "\n", "\n", "# eval-rb.py", "\n", "parser", ".", "add_argument", "(", "'--threat'", ",", "type", "=", "str", ",", "default", "=", "'corruptions'", ",", "choices", "=", "[", "'corruptions'", ",", "'Linf'", ",", "'L2'", "]", ",", "\n", "help", "=", "'Threat model for RobustBench evaluation.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Random seed.'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.__init__": [[35, 50], ["object.__init__", "utils.seed", "core.models.create_model", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "train.Trainer.init_optimizer", "train.Trainer.init_attack", "train.Trainer.load_model", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed", "home.repos.pwc.inspect_result.p2333_score.models.__init__.create_model", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_optimizer", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_attack", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.load_model"], ["LOG_DIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "desc", ")", "\n", "WEIGHTS", "=", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'weights-best.pt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "LOG_DIR", ")", ":", "\n", "    ", "shutil", ".", "rmtree", "(", "LOG_DIR", ")", "\n", "", "os", ".", "makedirs", "(", "LOG_DIR", ")", "\n", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'log-train.log'", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "\n", "", "info", "=", "get_data_info", "(", "DATA_DIR", ")", "\n", "BATCH_SIZE", "=", "args", ".", "batch_size", "\n", "BATCH_SIZE_VALIDATION", "=", "args", ".", "batch_size_validation", "\n", "NUM_ADV_EPOCHS", "=", "args", ".", "num_adv_epochs", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_attack": [[52, 65], ["core.attacks.create_attack", "core.attacks.create_attack", "core.attacks.create_attack", "core.attacks.create_attack"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.__init__.create_attack", "home.repos.pwc.inspect_result.p2333_score.attacks.__init__.create_attack", "home.repos.pwc.inspect_result.p2333_score.attacks.__init__.create_attack", "home.repos.pwc.inspect_result.p2333_score.attacks.__init__.create_attack"], ["if", "args", ".", "debug", ":", "\n", "    ", "NUM_ADV_EPOCHS", "=", "1", "\n", "\n", "# To speed up training", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "\n", "# Load data", "\n", "\n", "seed", "(", "args", ".", "seed", ")", "\n", "train_dataset", ",", "test_dataset", ",", "train_dataloader", ",", "test_dataloader", "=", "load_data", "(", "\n", "DATA_DIR", ",", "BATCH_SIZE", ",", "BATCH_SIZE_VALIDATION", ",", "use_augmentation", "=", "args", ".", "augment", ",", "shuffle_train", "=", "True", ",", "\n", "aux_data_filename", "=", "args", ".", "aux_data_filename", ",", "unsup_fraction", "=", "args", ".", "unsup_fraction", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_optimizer": [[67, 76], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "train.Trainer.init_scheduler", "train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_scheduler"], ["del", "train_dataset", ",", "test_dataset", "\n", "\n", "\n", "\n", "# Adversarial Training (AT, TRADES and MART)", "\n", "\n", "seed", "(", "args", ".", "seed", ")", "\n", "trainer", "=", "Trainer", "(", "info", ",", "args", ")", "\n", "last_lr", "=", "args", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.init_scheduler": [[78, 97], ["int", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "numpy.floor", "int", "rst.CosineLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "int", "int"], "methods", ["None"], ["if", "NUM_ADV_EPOCHS", ">", "0", ":", "\n", "    ", "logger", ".", "log", "(", "'\\n\\n'", ")", "\n", "metrics", "=", "pd", ".", "DataFrame", "(", ")", "\n", "logger", ".", "log", "(", "'Standard Accuracy-\\tTest: {:2f}%.'", ".", "format", "(", "trainer", ".", "eval", "(", "test_dataloader", ")", "*", "100", ")", ")", "\n", "\n", "old_score", "=", "[", "0.0", ",", "0.0", "]", "\n", "logger", ".", "log", "(", "'Adversarial training for {} epochs'", ".", "format", "(", "NUM_ADV_EPOCHS", ")", ")", "\n", "trainer", ".", "init_optimizer", "(", "args", ".", "num_adv_epochs", ")", "\n", "test_adv_acc", "=", "0.0", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "NUM_ADV_EPOCHS", "+", "1", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "log", "(", "'======= Epoch {} ======='", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "if", "args", ".", "scheduler", ":", "\n", "        ", "last_lr", "=", "trainer", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "\n", "", "res", "=", "trainer", ".", "train", "(", "train_dataloader", ",", "epoch", "=", "epoch", ",", "adversarial", "=", "True", ")", "\n", "test_acc", "=", "trainer", ".", "eval", "(", "test_dataloader", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train": [[99, 132], ["pandas.DataFrame", "train.Trainer.model.train", "tqdm.tqdm.tqdm", "dict", "loss.backward", "train.Trainer.optimizer.step", "metrics.append.append.append", "train.Trainer.scheduler.step", "metrics.append.append.mean", "x.to", "y.to", "train.Trainer.standard_loss", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "train.Trainer.scheduler.step", "pandas.DataFrame", "train.Trainer.mart_loss", "train.Trainer.model.parameters", "train.Trainer.trades_loss", "train.Trainer.adversarial_loss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.train", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.standard_loss", "home.repos.pwc.inspect_result.p2333_score.utils.rst.CosineLR.step", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.mart_loss", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.trades_loss", "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.adversarial_loss"], ["logger", ".", "log", "(", "'Loss: {:.4f}.\\tLR: {:.4f}'", ".", "format", "(", "res", "[", "'loss'", "]", ",", "last_lr", ")", ")", "\n", "if", "'clean_acc'", "in", "res", ":", "\n", "        ", "logger", ".", "log", "(", "'Standard Accuracy-\\tTrain: {:.2f}%.\\tTest: {:.2f}%.'", ".", "format", "(", "res", "[", "'clean_acc'", "]", "*", "100", ",", "test_acc", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "log", "(", "'Standard Accuracy-\\tTest: {:.2f}%.'", ".", "format", "(", "test_acc", "*", "100", ")", ")", "\n", "", "epoch_metrics", "=", "{", "'train_'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", "}", "\n", "epoch_metrics", ".", "update", "(", "{", "'epoch'", ":", "epoch", ",", "'lr'", ":", "last_lr", ",", "'test_clean_acc'", ":", "test_acc", ",", "'test_adversarial_acc'", ":", "''", "}", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "adv_eval_freq", "==", "0", "or", "epoch", ">", "(", "NUM_ADV_EPOCHS", "-", "5", ")", "or", "(", "epoch", ">=", "(", "NUM_ADV_EPOCHS", "-", "10", ")", "and", "NUM_ADV_EPOCHS", ">", "90", ")", ":", "\n", "        ", "test_adv_acc", "=", "trainer", ".", "eval", "(", "test_dataloader", ",", "adversarial", "=", "True", ")", "\n", "logger", ".", "log", "(", "'Adversarial Accuracy-\\tTrain: {:.2f}%.\\tTest: {:.2f}%.'", ".", "format", "(", "res", "[", "'adversarial_acc'", "]", "*", "100", ",", "\n", "test_adv_acc", "*", "100", ")", ")", "\n", "epoch_metrics", ".", "update", "(", "{", "'test_adversarial_acc'", ":", "test_adv_acc", "}", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "log", "(", "'Adversarial Accuracy-\\tTrain: {:.2f}%.'", ".", "format", "(", "res", "[", "'adversarial_acc'", "]", "*", "100", ")", ")", "\n", "\n", "", "if", "test_adv_acc", ">=", "old_score", "[", "1", "]", ":", "\n", "        ", "old_score", "[", "0", "]", ",", "old_score", "[", "1", "]", "=", "test_acc", ",", "test_adv_acc", "\n", "trainer", ".", "save_model", "(", "WEIGHTS", ")", "\n", "", "trainer", ".", "save_model", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'weights-last.pt'", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'Time taken: {}'", ".", "format", "(", "format_time", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", ")", "\n", "metrics", "=", "metrics", ".", "append", "(", "pd", ".", "DataFrame", "(", "epoch_metrics", ",", "index", "=", "[", "0", "]", ")", ",", "ignore_index", "=", "True", ")", "\n", "metrics", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'stats_adv.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n", "\n", "\n", "# Record metrics", "\n", "\n", "", "train_acc", "=", "res", "[", "'clean_acc'", "]", "if", "'clean_acc'", "in", "res", "else", "trainer", ".", "eval", "(", "train_dataloader", ")", "\n", "logger", ".", "log", "(", "'\\nTraining completed.'", ")", "\n", "logger", ".", "log", "(", "'Standard Accuracy-\\tTrain: {:.2f}%.\\tTest: {:.2f}%.'", ".", "format", "(", "train_acc", "*", "100", ",", "old_score", "[", "0", "]", "*", "100", ")", ")", "\n", "if", "NUM_ADV_EPOCHS", ">", "0", ":", "\n", "    ", "logger", ".", "log", "(", "'Adversarial Accuracy-\\tTrain: {:.2f}%.\\tTest: {:.2f}%.'", ".", "format", "(", "res", "[", "'adversarial_acc'", "]", "*", "100", ",", "old_score", "[", "1", "]", "*", "100", ")", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.standard_loss": [[134, 145], ["train.Trainer.optimizer.zero_grad", "train.Trainer.model", "train.Trainer.criterion", "train.Trainer.detach", "train.Trainer.item", "core.metrics.accuracy"], "methods", ["home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy"], ["", "logger", ".", "log", "(", "'Script Completed.'", ")", "\n", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.adversarial_loss": [[147, 171], ["train.Trainer.optimizer.zero_grad", "train.Trainer.model", "train.Trainer.criterion", "train.Trainer.detach", "context.ctx_noparamgrad_and_eval", "train.Trainer.attack.perturb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train.Trainer.item", "batch_metrics.update", "batch_metrics.update", "core.metrics.accuracy", "core.metrics.accuracy", "core.metrics.accuracy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad_and_eval", "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.perturb", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy"], []], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.trades_loss": [[173, 181], ["trades.trades_loss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.trades_loss"], []], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.mart_loss": [[183, 191], ["mart.mart_loss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.mart_loss"], []], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval": [[193, 211], ["train.Trainer.model.eval", "len", "core.metrics.accuracy", "x.to", "y.to", "train.Trainer.model", "train.Trainer.model", "context.ctx_noparamgrad_and_eval", "train.Trainer.eval_attack.perturb"], "methods", ["home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.eval", "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy", "home.repos.pwc.inspect_result.p2333_score.utils.context.ctx_noparamgrad_and_eval", "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.perturb"], []], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.save_model": [[213, 218], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.model.state_dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.p2333_score.utils.train.Trainer.load_model": [[220, 228], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.Trainer.model.load_state_dict", "RuntimeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.p2333_score.utils.utils.SmoothCrossEntropyLoss.__init__": [[14, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "SmoothCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.SmoothCrossEntropyLoss.forward": [[20, 31], ["torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "loss.mean", "loss.sum", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.NumpyToTensor.__call__": [[127, 129], ["torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "sample", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.track_bn_stats": [[33, 40], ["model.modules", "isinstance"], "function", ["None"], ["", "", "def", "track_bn_stats", "(", "model", ",", "track_stats", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    If track_stats=False, do not update BN running mean and variance and vice versa.\n    \"\"\"", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "track_running_stats", "=", "track_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.set_bn_momentum": [[42, 49], ["model.modules", "isinstance"], "function", ["None"], ["", "", "", "def", "set_bn_momentum", "(", "model", ",", "momentum", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Set the value of momentum for all BN layers.\n    \"\"\"", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.str2bool": [[51, 63], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    Parse boolean using argument parser.\n    \"\"\"", "\n", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.str2float": [[64, 76], ["x.split", "float", "float", "float", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "def", "str2float", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Parse float and fractions using argument parser.\n    \"\"\"", "\n", "if", "'/'", "in", "x", ":", "\n", "        ", "n", ",", "d", "=", "x", ".", "split", "(", "'/'", ")", "\n", "return", "float", "(", "n", ")", "/", "float", "(", "d", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "float", "(", "x", ")", "\n", "", "except", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Fraction or float value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.format_time": [[78, 86], ["int", "str", "round", "datetime.timedelta"], "function", ["None"], ["", "", "", "def", "format_time", "(", "elapsed", ")", ":", "\n", "    ", "\"\"\"\n    Format time for displaying.\n    Arguments:\n        elapsed: time interval in seconds.\n    \"\"\"", "\n", "elapsed_rounded", "=", "int", "(", "round", "(", "(", "elapsed", ")", ")", ")", "\n", "return", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed_rounded", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed": [[88, 97], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.p2333_score.utils.utils.seed"], ["", "def", "seed", "(", "seed", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Seed for PyTorch reproducibility.\n    Arguments:\n        seed (int): Random seed value.\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.unpickle_data": [[99, 109], ["open", "_pickle.load"], "function", ["None"], ["", "def", "unpickle_data", "(", "filename", ",", "mode", "=", "'rb'", ")", ":", "\n", "    ", "\"\"\"\n    Read data from pickled file.\n    Arguments:\n        filename (str): path to the pickled file.\n        mode (str): read mode.\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "mode", ")", "as", "pkfile", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "pkfile", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.utils.utils.pickle_data": [[111, 121], ["open", "_pickle.dump"], "function", ["None"], ["", "def", "pickle_data", "(", "data", ",", "filename", ",", "mode", "=", "'wb'", ")", ":", "\n", "    ", "\"\"\"\n    Write data to pickled file.\n    Arguments:\n        data (Any): data to be written.\n        filename (str): path to the pickled file.\n        mode (str): write mode.\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "mode", ")", "as", "pkfile", ":", "\n", "         ", "pickle", ".", "dump", "(", "data", ",", "pkfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.core.metrics.accuracy": [[3, 14], ["accuracy.item", "float", "true.size", "torch.softmax().argmax", "torch.softmax"], "function", ["None"], ["def", "accuracy", "(", "true", ",", "preds", ")", ":", "\n", "    ", "\"\"\"\n    Computes multi-class accuracy.\n    Arguments:\n        true (torch.Tensor): true labels.\n        preds (torch.Tensor): predicted labels.\n    Returns:\n        Multi-class accuracy.\n    \"\"\"", "\n", "accuracy", "=", "(", "torch", ".", "softmax", "(", "preds", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "==", "true", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "float", "(", "true", ".", "size", "(", "0", ")", ")", "\n", "return", "accuracy", ".", "item", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.attacks.apgd.APGD.__init__": [[22, 30], ["autoattack.autopgd_base.APGDAttack"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "'ce'", ",", "n_restarts", "=", "2", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "ord", "=", "np", ".", "inf", ",", "seed", "=", "1", ")", ":", "\n", "        ", "assert", "loss_fn", "in", "[", "'ce'", ",", "'dlr'", "]", ",", "'Only loss_fn=ce or loss_fn=dlr are supported!'", "\n", "assert", "ord", "in", "[", "2", ",", "np", ".", "inf", "]", ",", "'Only ord=inf or ord=2 are supported!'", "\n", "\n", "norm", "=", "'Linf'", "if", "ord", "==", "np", ".", "inf", "else", "'L2'", "\n", "self", ".", "apgd", "=", "APGDAttack", "(", "predict", ",", "n_restarts", "=", "n_restarts", ",", "n_iter", "=", "nb_iter", ",", "verbose", "=", "False", ",", "eps", "=", "eps", ",", "norm", "=", "norm", ",", "\n", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "seed", "=", "seed", ",", "device", "=", "device", ")", "\n", "self", ".", "apgd", ".", "loss", "=", "loss_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.apgd.APGD.perturb": [[31, 35], ["apgd.APGD.apgd.perturb"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.perturb"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_adv", "=", "self", ".", "apgd", ".", "perturb", "(", "x", ",", "y", ")", "[", "1", "]", "\n", "r_adv", "=", "x_adv", "-", "x", "\n", "return", "x_adv", ",", "r_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.apgd.LinfAPGDAttack.__init__": [[49, 53], ["apgd.APGD.__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "'ce'", ",", "n_restarts", "=", "2", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "seed", "=", "1", ")", ":", "\n", "        ", "ord", "=", "np", ".", "inf", "\n", "super", "(", "L2APGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "n_restarts", "=", "n_restarts", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "ord", "=", "ord", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.apgd.L2APGDAttack.__init__": [[67, 71], ["apgd.APGD.__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "'ce'", ",", "n_restarts", "=", "2", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "seed", "=", "1", ")", ":", "\n", "        ", "ord", "=", "2", "\n", "super", "(", "L2APGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "n_restarts", "=", "n_restarts", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "ord", "=", "ord", ",", "seed", "=", "seed", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.attacks.base.Attack.__init__": [[17, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", ":", "\n", "        ", "self", ".", "predict", "=", "predict", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.base.Attack.perturb": [[23, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "perturb", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Virtual method for generating the adversarial examples.\n        Arguments:\n            x (torch.Tensor): the model's input tensor.\n            **kwargs: optional parameters used by child classes.\n        Returns: \n            adversarial examples.\n        \"\"\"", "\n", "error", "=", "\"Sub-classes must implement perturb.\"", "\n", "raise", "NotImplementedError", "(", "error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.base.Attack.__call__": [[35, 37], ["base.Attack.perturb"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.perturb"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "perturb", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._get_predicted_label": [[40, 52], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base.LabelMixin.predict"], "methods", ["None"], ["    ", "def", "_get_predicted_label", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Compute predicted labels given x. Used to prevent label leaking during adversarial training.\n        Arguments:\n            x (torch.Tensor): the model's input tensor.\n        Returns:\n            torch.Tensor containing predicted labels.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "predict", "(", "x", ")", "\n", "", "_", ",", "y", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._verify_and_process_inputs": [[53, 64], ["utils.replicate_input", "utils.replicate_input", "base.LabelMixin._get_predicted_label"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils.replicate_input", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.replicate_input", "home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._get_predicted_label"], ["", "def", "_verify_and_process_inputs", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "targeted", ":", "\n", "            ", "assert", "y", "is", "not", "None", "\n", "\n", "", "if", "not", "self", ".", "targeted", ":", "\n", "            ", "if", "y", "is", "None", ":", "\n", "                ", "y", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "\n", "", "", "x", "=", "replicate_input", "(", "x", ")", "\n", "y", "=", "replicate_input", "(", "y", ")", "\n", "return", "x", ",", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.attacks.fgsm.FGSMAttack.__init__": [[21, 28], ["base.Attack.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "FGSMAttack", ",", "self", ")", ".", "__init__", "(", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "targeted", "=", "targeted", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.fgsm.FGSMAttack.perturb": [[29, 57], ["fgsm.FGSMAttack._verify_and_process_inputs", "x.requires_grad_", "fgsm.FGSMAttack.predict", "fgsm.FGSMAttack.loss_fn", "fgsm.FGSMAttack.backward", "utils.clamp.grad.detach().sign", "utils.clamp", "utils.batch_multiply", "utils.clamp.detach", "radv.detach", "utils.clamp.grad.detach"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply"], ["", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with an attack length of eps.\n        Arguments:\n            x (torch.Tensor): input tensor.\n            y  (torch.Tensor): label tensor.\n                - if None and self.targeted=False, compute y as predicted labels.\n                - if self.targeted=True, then y must be the targeted labels.\n        Returns: \n            torch.Tensor containing perturbed inputs.\n            torch.Tensor containing the perturbation.\n        \"\"\"", "\n", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "xadv", "=", "x", ".", "requires_grad_", "(", ")", "\n", "outputs", "=", "self", ".", "predict", "(", "xadv", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "outputs", ",", "y", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "loss", "=", "-", "loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "grad_sign", "=", "xadv", ".", "grad", ".", "detach", "(", ")", ".", "sign", "(", ")", "\n", "\n", "xadv", "=", "xadv", "+", "batch_multiply", "(", "self", ".", "eps", ",", "grad_sign", ")", "\n", "xadv", "=", "clamp", "(", "xadv", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "radv", "=", "xadv", "-", "x", "\n", "return", "xadv", ".", "detach", "(", ")", ",", "radv", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.fgsm.FGMAttack.__init__": [[74, 82], ["base.Attack.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "targeted", "=", "False", ")", ":", "\n", "        ", "super", "(", "FGMAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "targeted", "=", "targeted", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.fgsm.FGMAttack.perturb": [[83, 110], ["fgsm.FGMAttack._verify_and_process_inputs", "x.requires_grad_", "fgsm.FGMAttack.predict", "fgsm.FGMAttack.loss_fn", "fgsm.FGMAttack.backward", "normalize_by_pnorm", "utils.clamp", "utils.batch_multiply", "utils.clamp.detach", "radv.detach"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply"], ["", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with an attack length of eps.\n        Arguments:\n            x (torch.Tensor): input tensor.\n            y  (torch.Tensor): label tensor.\n                - if None and self.targeted=False, compute y as predicted labels.\n                - if self.targeted=True, then y must be the targeted labels.\n        Returns: \n            torch.Tensor containing perturbed inputs.\n            torch.Tensor containing the perturbation.\n        \"\"\"", "\n", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "xadv", "=", "x", ".", "requires_grad_", "(", ")", "\n", "outputs", "=", "self", ".", "predict", "(", "xadv", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "outputs", ",", "y", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "            ", "loss", "=", "-", "loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "normalize_by_pnorm", "(", "xadv", ".", "grad", ")", "\n", "xadv", "=", "xadv", "+", "batch_multiply", "(", "self", ".", "eps", ",", "grad", ")", "\n", "xadv", "=", "clamp", "(", "xadv", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "radv", "=", "xadv", "-", "x", "\n", "\n", "return", "xadv", ".", "detach", "(", ")", ",", "radv", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.deepfool.DeepFoolAttack.__init__": [[123, 133], ["base.Attack.__init__", "utils.is_float_or_torch_tensor"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.is_float_or_torch_tensor"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "overshoot", "=", "0.02", ",", "nb_iter", "=", "50", ",", "search_iter", "=", "50", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "ord", "=", "np", ".", "inf", ")", ":", "\n", "        ", "super", "(", "DeepFoolAttack", ",", "self", ")", ".", "__init__", "(", "predict", ",", "None", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "overshoot", "=", "overshoot", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "search_iter", "=", "search_iter", "\n", "self", ".", "targeted", "=", "False", "\n", "\n", "self", ".", "ord", "=", "ord", "\n", "assert", "is_float_or_torch_tensor", "(", "self", ".", "overshoot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.deepfool.DeepFoolAttack.perturb": [[134, 151], ["deepfool.DeepFoolAttack._verify_and_process_inputs", "deepfool.perturb_deepfool"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.p2333_score.attacks.deepfool.perturb_deepfool"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples x, returns their adversarial counterparts.\n        Arguments:\n            x (torch.Tensor): input tensor.\n            y (torch.Tensor): label tensor.\n                - if None and self.targeted=False, compute y as predicted labels.\n        Returns: \n            torch.Tensor containing perturbed inputs,\n            torch.Tensor containing the perturbation    \n        \"\"\"", "\n", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "None", ")", "\n", "x_adv", ",", "r_adv", "=", "perturb_deepfool", "(", "x", ",", "y", ",", "self", ".", "predict", ",", "self", ".", "nb_iter", ",", "self", ".", "overshoot", ",", "ord", "=", "self", ".", "ord", ",", "\n", "clip_min", "=", "self", ".", "clip_min", ",", "clip_max", "=", "self", ".", "clip_max", ",", "search_iter", "=", "self", ".", "search_iter", ",", "\n", "device", "=", "device", ")", "\n", "return", "x_adv", ",", "r_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.deepfool.LinfDeepFoolAttack.__init__": [[166, 173], ["deepfool.DeepFoolAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "overshoot", "=", "0.02", ",", "nb_iter", "=", "50", ",", "search_iter", "=", "50", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ")", ":", "\n", "\n", "        ", "ord", "=", "np", ".", "inf", "\n", "super", "(", "LinfDeepFoolAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "overshoot", "=", "overshoot", ",", "nb_iter", "=", "nb_iter", ",", "search_iter", "=", "search_iter", ",", "clip_min", "=", "clip_min", ",", "\n", "clip_max", "=", "clip_max", ",", "ord", "=", "ord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.deepfool.L2DeepFoolAttack.__init__": [[188, 195], ["deepfool.DeepFoolAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "overshoot", "=", "0.02", ",", "nb_iter", "=", "50", ",", "search_iter", "=", "50", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ")", ":", "\n", "\n", "        ", "ord", "=", "2", "\n", "super", "(", "L2DeepFoolAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "overshoot", "=", "overshoot", ",", "nb_iter", "=", "nb_iter", ",", "search_iter", "=", "search_iter", ",", "clip_min", "=", "clip_min", ",", "\n", "clip_max", "=", "clip_max", ",", "ord", "=", "ord", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.attacks.deepfool.perturb_deepfool": [[17, 105], ["torch.empty_like().copy_", "torch.empty_like().copy_", "x.detach.requires_grad_", "torch.arange", "torch.arange", "torch.zeros_like", "torch.zeros_like", "range", "x.detach.detach", "predict", "numpy.argsort", "torch.from_numpy", "torch.from_numpy", "df_inds_orig.to.to", "logits[].sum().backward", "x.detach.grad.data.clone().detach", "torch.zeros_like", "torch.zeros_like", "torch.clamp", "torch.clamp", "range", "torch.empty_like", "torch.empty_like", "x.detach.grad.zero_", "predict.detach().cpu().numpy", "not_done_inds.sum", "x.detach.data.new_ones", "x.detach.grad.zero_", "logits[].sum().backward", "x.detach.grad.data.clone().detach", "not_done_inds[].float", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "predict().argmax", "logits[].sum", "x.detach.grad.data.clone", "torch.no_grad", "torch.no_grad", "predict.detach().cpu", "logits[].sum", "x.detach.grad.data.clone", "swi.sum", "torch.norm", "torch.norm", "torch.zeros_like.sign", "predict", "torch.abs", "torch.abs", "torch.norm", "torch.norm", "NotImplementedError", "torch.zeros_like.flatten", "predict.detach", "w_k.flatten", "torch.abs", "torch.abs", "torch.norm", "torch.norm", "w_k.flatten"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["def", "perturb_deepfool", "(", "xvar", ",", "yvar", ",", "predict", ",", "nb_iter", "=", "50", ",", "overshoot", "=", "0.02", ",", "ord", "=", "np", ".", "inf", ",", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ",", "\n", "search_iter", "=", "0", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Compute DeepFool perturbations (Moosavi-Dezfooli et al, 2016).\n    Arguments:\n        xvar (torch.Tensor): input images.\n        yvar (torch.Tensor): predictions.\n        predict (nn.Module): forward pass function.\n        nb_iter (int): number of iterations.\n        overshoot (float): how much to overshoot the boundary.\n        ord (int): (optional) the order of maximum distortion (inf or 2).\n        clip_min (float): mininum value per input dimension.\n        clip_max (float): maximum value per input dimension.\n        search_iter (int): no of search iterations.\n        device (torch.device): device to work on.\n    Returns: \n        torch.Tensor containing the perturbed input, \n        torch.Tensor containing the perturbation\n    \"\"\"", "\n", "\n", "x_orig", "=", "xvar", "\n", "x", "=", "torch", ".", "empty_like", "(", "xvar", ")", ".", "copy_", "(", "xvar", ")", "\n", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "batch_i", "=", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "r_tot", "=", "torch", ".", "zeros_like", "(", "x", ".", "data", ")", "\n", "for", "i", "in", "range", "(", "nb_iter", ")", ":", "\n", "        ", "if", "x", ".", "grad", "is", "not", "None", ":", "\n", "            ", "x", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "", "logits", "=", "predict", "(", "x", ")", "\n", "df_inds", "=", "np", ".", "argsort", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "df_inds_other", ",", "df_inds_orig", "=", "df_inds", "[", ":", ",", ":", "-", "1", "]", ",", "df_inds", "[", ":", ",", "-", "1", "]", "\n", "df_inds_orig", "=", "torch", ".", "from_numpy", "(", "df_inds_orig", ")", "\n", "df_inds_orig", "=", "df_inds_orig", ".", "to", "(", "device", ")", "\n", "not_done_inds", "=", "df_inds_orig", "==", "yvar", "\n", "if", "not_done_inds", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "logits", "[", "batch_i", ",", "df_inds_orig", "]", ".", "sum", "(", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad_orig", "=", "x", ".", "grad", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "pert", "=", "x", ".", "data", ".", "new_ones", "(", "x", ".", "shape", "[", "0", "]", ")", "*", "np", ".", "inf", "\n", "w", "=", "torch", ".", "zeros_like", "(", "x", ".", "data", ")", "\n", "\n", "for", "inds", "in", "df_inds_other", ".", "T", ":", "\n", "            ", "x", ".", "grad", ".", "zero_", "(", ")", "\n", "logits", "[", "batch_i", ",", "inds", "]", ".", "sum", "(", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad_cur", "=", "x", ".", "grad", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "w_k", "=", "grad_cur", "-", "grad_orig", "\n", "f_k", "=", "logits", "[", "batch_i", ",", "inds", "]", "-", "logits", "[", "batch_i", ",", "df_inds_orig", "]", "\n", "if", "ord", "==", "2", ":", "\n", "                    ", "pert_k", "=", "torch", ".", "abs", "(", "f_k", ")", "/", "torch", ".", "norm", "(", "w_k", ".", "flatten", "(", "1", ")", ",", "2", ",", "-", "1", ")", "\n", "", "elif", "ord", "==", "np", ".", "inf", ":", "\n", "                    ", "pert_k", "=", "torch", ".", "abs", "(", "f_k", ")", "/", "torch", ".", "norm", "(", "w_k", ".", "flatten", "(", "1", ")", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "\"Only ord=inf and ord=2 have been implemented\"", ")", "\n", "", "swi", "=", "pert_k", "<", "pert", "\n", "if", "swi", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "pert", "[", "swi", "]", "=", "pert_k", "[", "swi", "]", "\n", "w", "[", "swi", "]", "=", "w_k", "[", "swi", "]", "\n", "\n", "", "", "", "if", "ord", "==", "2", ":", "\n", "            ", "r_i", "=", "(", "pert", "+", "1e-6", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "w", "/", "torch", ".", "norm", "(", "w", ".", "flatten", "(", "1", ")", ",", "2", ",", "-", "1", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "", "elif", "ord", "==", "np", ".", "inf", ":", "\n", "            ", "r_i", "=", "(", "pert", "+", "1e-6", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "*", "w", ".", "sign", "(", ")", "\n", "\n", "", "r_tot", "+=", "r_i", "*", "not_done_inds", "[", ":", ",", "None", ",", "None", ",", "None", "]", ".", "float", "(", ")", "\n", "x", ".", "data", "=", "x_orig", "+", "(", "1.", "+", "overshoot", ")", "*", "r_tot", "\n", "x", ".", "data", "=", "torch", ".", "clamp", "(", "x", ".", "data", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "", "x", "=", "x", ".", "detach", "(", ")", "\n", "if", "search_iter", ">", "0", ":", "\n", "        ", "dx", "=", "x", "-", "x_orig", "\n", "dx_l_low", ",", "dx_l_high", "=", "torch", ".", "zeros_like", "(", "dx", ")", ",", "torch", ".", "ones_like", "(", "dx", ")", "\n", "for", "i", "in", "range", "(", "search_iter", ")", ":", "\n", "            ", "dx_l", "=", "(", "dx_l_low", "+", "dx_l_high", ")", "/", "2.", "\n", "dx_x", "=", "x_orig", "+", "dx_l", "*", "dx", "\n", "dx_y", "=", "predict", "(", "dx_x", ")", ".", "argmax", "(", "-", "1", ")", "\n", "label_stay", "=", "dx_y", "==", "yvar", "\n", "label_change", "=", "dx_y", "!=", "yvar", "\n", "dx_l_low", "[", "label_stay", "]", "=", "dx_l", "[", "label_stay", "]", "\n", "dx_l_high", "[", "label_change", "]", "=", "dx_l", "[", "label_change", "]", "\n", "", "x", "=", "dx_x", "\n", "\n", "# x.data = torch.clamp(x.data, clip_min, clip_max)", "\n", "", "r_tot", "=", "x", ".", "data", "-", "x_orig", "\n", "return", "x", ",", "r_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.__init__": [[91, 106], ["base.Attack.__init__", "utils.is_float_or_torch_tensor", "utils.is_float_or_torch_tensor", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.is_float_or_torch_tensor", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.is_float_or_torch_tensor"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "ord", "=", "np", ".", "inf", ",", "targeted", "=", "False", ",", "rand_init_type", "=", "'uniform'", ")", ":", "\n", "        ", "super", "(", "PGDAttack", ",", "self", ")", ".", "__init__", "(", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "eps_iter", "=", "eps_iter", "\n", "self", ".", "rand_init", "=", "rand_init", "\n", "self", ".", "rand_init_type", "=", "rand_init_type", "\n", "self", ".", "ord", "=", "ord", "\n", "self", ".", "targeted", "=", "targeted", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "", "assert", "is_float_or_torch_tensor", "(", "self", ".", "eps_iter", ")", "\n", "assert", "is_float_or_torch_tensor", "(", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.PGDAttack.perturb": [[107, 141], ["pgd.PGDAttack._verify_and_process_inputs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.Parameter", "torch.Parameter", "pgd.perturb_iterative", "utils.rand_init_delta", "utils.clamp", "NotImplementedError", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.p2333_score.attacks.base.LabelMixin._verify_and_process_inputs", "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.perturb_iterative", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.rand_init_delta", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with an attack length of eps.\n        Arguments:\n            x (torch.Tensor): input tensor.\n            y (torch.Tensor): label tensor.\n                - if None and self.targeted=False, compute y as predicted\n                labels.\n                - if self.targeted=True, then y must be the targeted labels.\n        Returns: \n            torch.Tensor containing perturbed inputs,\n            torch.Tensor containing the perturbation    \n        \"\"\"", "\n", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "delta", "=", "nn", ".", "Parameter", "(", "delta", ")", "\n", "if", "self", ".", "rand_init", ":", "\n", "            ", "if", "self", ".", "rand_init_type", "==", "'uniform'", ":", "\n", "                ", "rand_init_delta", "(", "\n", "delta", ",", "x", ",", "self", ".", "ord", ",", "self", ".", "eps", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "\n", "x", "+", "delta", ".", "data", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "-", "x", "\n", "", "elif", "self", ".", "rand_init_type", "==", "'normal'", ":", "\n", "                ", "delta", ".", "data", "=", "0.001", "*", "torch", ".", "randn_like", "(", "x", ")", "# initialize as in TRADES", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Only rand_init_type=normal and rand_init_type=uniform have been implemented.'", ")", "\n", "\n", "", "", "x_adv", ",", "r_adv", "=", "perturb_iterative", "(", "\n", "x", ",", "y", ",", "self", ".", "predict", ",", "nb_iter", "=", "self", ".", "nb_iter", ",", "eps", "=", "self", ".", "eps", ",", "eps_iter", "=", "self", ".", "eps_iter", ",", "loss_fn", "=", "self", ".", "loss_fn", ",", "\n", "minimize", "=", "self", ".", "targeted", ",", "ord", "=", "self", ".", "ord", ",", "clip_min", "=", "self", ".", "clip_min", ",", "clip_max", "=", "self", ".", "clip_max", ",", "delta_init", "=", "delta", "\n", ")", "\n", "\n", "return", "x_adv", ".", "data", ",", "r_adv", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.LinfPGDAttack.__init__": [[159, 166], ["pgd.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ",", "rand_init_type", "=", "'uniform'", ")", ":", "\n", "        ", "ord", "=", "np", ".", "inf", "\n", "super", "(", "LinfPGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "eps_iter", "=", "eps_iter", ",", "rand_init", "=", "rand_init", ",", "\n", "clip_min", "=", "clip_min", ",", "clip_max", "=", "clip_max", ",", "targeted", "=", "targeted", ",", "ord", "=", "ord", ",", "rand_init_type", "=", "rand_init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.L2PGDAttack.__init__": [[184, 191], ["pgd.PGDAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "predict", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "eps_iter", "=", "0.01", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ",", "rand_init_type", "=", "'uniform'", ")", ":", "\n", "        ", "ord", "=", "2", "\n", "super", "(", "L2PGDAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "loss_fn", "=", "loss_fn", ",", "eps", "=", "eps", ",", "nb_iter", "=", "nb_iter", ",", "eps_iter", "=", "eps_iter", ",", "rand_init", "=", "rand_init", ",", "\n", "clip_min", "=", "clip_min", ",", "clip_max", "=", "clip_max", ",", "targeted", "=", "targeted", ",", "ord", "=", "ord", ",", "rand_init_type", "=", "rand_init_type", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.attacks.pgd.perturb_iterative": [[17, 71], ["torch.zeros_like.requires_grad_", "range", "utils.clamp", "torch.zeros_like", "torch.zeros_like", "predict", "loss_fn", "loss_fn.backward", "torch.zeros_like.grad.data.zero_", "torch.zeros_like.grad.data.sign", "utils.batch_clamp", "utils.batch_multiply", "utils.clamp", "utils.normalize_by_pnorm", "NotImplementedError", "utils.batch_multiply", "utils.clamp", "utils.clamp_by_pnorm"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp_by_pnorm"], ["def", "perturb_iterative", "(", "xvar", ",", "yvar", ",", "predict", ",", "nb_iter", ",", "eps", ",", "eps_iter", ",", "loss_fn", ",", "delta_init", "=", "None", ",", "minimize", "=", "False", ",", "ord", "=", "np", ".", "inf", ",", "\n", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Iteratively maximize the loss over the input. It is a shared method for iterative attacks.\n    Arguments:\n        xvar (torch.Tensor): input data.\n        yvar (torch.Tensor): input labels.\n        predict (nn.Module): forward pass function.\n        nb_iter (int): number of iterations.\n        eps (float): maximum distortion.\n        eps_iter (float): attack step size.\n        loss_fn (nn.Module): loss function.\n        delta_init (torch.Tensor): (optional) tensor contains the random initialization.\n        minimize (bool): (optional) whether to minimize or maximize the loss.\n        ord (int): (optional) the order of maximum distortion (inf or 2).\n        clip_min (float): mininum value per input dimension.\n        clip_max (float): maximum value per input dimension.\n    Returns: \n        torch.Tensor containing the perturbed input, \n        torch.Tensor containing the perturbation\n    \"\"\"", "\n", "if", "delta_init", "is", "not", "None", ":", "\n", "        ", "delta", "=", "delta_init", "\n", "", "else", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros_like", "(", "xvar", ")", "\n", "\n", "", "delta", ".", "requires_grad_", "(", ")", "\n", "for", "ii", "in", "range", "(", "nb_iter", ")", ":", "\n", "        ", "outputs", "=", "predict", "(", "xvar", "+", "delta", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "yvar", ")", "\n", "if", "minimize", ":", "\n", "            ", "loss", "=", "-", "loss", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "ord", "==", "np", ".", "inf", ":", "\n", "            ", "grad_sign", "=", "delta", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "batch_multiply", "(", "eps_iter", ",", "grad_sign", ")", "\n", "delta", ".", "data", "=", "batch_clamp", "(", "eps", ",", "delta", ".", "data", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "xvar", ".", "data", "+", "delta", ".", "data", ",", "clip_min", ",", "clip_max", ")", "-", "xvar", ".", "data", "\n", "", "elif", "ord", "==", "2", ":", "\n", "            ", "grad", "=", "delta", ".", "grad", ".", "data", "\n", "grad", "=", "normalize_by_pnorm", "(", "grad", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "batch_multiply", "(", "eps_iter", ",", "grad", ")", "\n", "delta", ".", "data", "=", "clamp", "(", "xvar", ".", "data", "+", "delta", ".", "data", ",", "clip_min", ",", "clip_max", ")", "-", "xvar", ".", "data", "\n", "if", "eps", "is", "not", "None", ":", "\n", "                ", "delta", ".", "data", "=", "clamp_by_pnorm", "(", "delta", ".", "data", ",", "ord", ",", "eps", ")", "\n", "", "", "else", ":", "\n", "            ", "error", "=", "\"Only ord=inf and ord=2 have been implemented\"", "\n", "raise", "NotImplementedError", "(", "error", ")", "\n", "", "delta", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "x_adv", "=", "clamp", "(", "xvar", "+", "delta", ",", "clip_min", ",", "clip_max", ")", "\n", "r_adv", "=", "x_adv", "-", "xvar", "\n", "return", "x_adv", ",", "r_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.__init__.create_attack": [[25, 66], ["fgsm.FGSMAttack", "fgsm.FGMAttack", "pgd.LinfPGDAttack", "pgd.L2PGDAttack", "deepfool.LinfDeepFoolAttack", "deepfool.L2DeepFoolAttack", "apgd.LinfAPGDAttack", "apgd.L2APGDAttack", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.replicate_input": [[13, 18], ["x.detach().clone", "x.detach"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "SmoothCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "reduction", "=", "reduction", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.replicate_input_withgrad": [[20, 25], ["x.detach().clone().requires_grad_", "x.detach().clone", "x.detach"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.calc_l2distsq": [[27, 33], ["d.view().sum", "d.view"], "function", ["None"], ["            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n", "\n", "", "", "def", "track_bn_stats", "(", "model", ",", "track_stats", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp": [[35, 66], ["torch.min.ndimension", "isinstance", "isinstance", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "ValueError", "ValueError", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "min.ndimension", "min.view", "max.ndimension", "max.view"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "track_running_stats", "=", "track_stats", "\n", "\n", "\n", "", "", "", "def", "set_bn_momentum", "(", "model", ",", "momentum", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Set the value of momentum for all BN layers.\n    \"\"\"", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "\n", "", "", "", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    Parse boolean using argument parser.\n    \"\"\"", "\n", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n", "", "", "def", "str2float", "(", "x", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils._batch_multiply_tensor_by_vector": [[68, 76], ["batch_tensor.transpose"], "function", ["None"], ["if", "'/'", "in", "x", ":", "\n", "        ", "n", ",", "d", "=", "x", ".", "split", "(", "'/'", ")", "\n", "return", "float", "(", "n", ")", "/", "float", "(", "d", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "float", "(", "x", ")", "\n", "", "except", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Fraction or float value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils._batch_clamp_tensor_by_vector": [[78, 87], ["torch.min().transpose().contiguous", "torch.min().transpose().contiguous", "torch.min().transpose().contiguous", "torch.min().transpose", "torch.min().transpose", "torch.min().transpose", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "batch_tensor.transpose"], "function", ["None"], ["", "", "", "def", "format_time", "(", "elapsed", ")", ":", "\n", "    ", "\"\"\"\n    Format time for displaying.\n    Arguments:\n        elapsed: time interval in seconds.\n    \"\"\"", "\n", "elapsed_rounded", "=", "int", "(", "round", "(", "(", "elapsed", ")", ")", ")", "\n", "return", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed_rounded", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply": [[89, 101], ["isinstance", "utils._batch_multiply_tensor_by_vector", "isinstance", "len", "len", "TypeError"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils._batch_multiply_tensor_by_vector"], ["    ", "\"\"\"\n    Seed for PyTorch reproducibility.\n    Arguments:\n        seed (int): Random seed value.\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "\n", "", "def", "unpickle_data", "(", "filename", ",", "mode", "=", "'rb'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_clamp": [[103, 116], ["isinstance", "utils._batch_clamp_tensor_by_vector", "isinstance", "len", "len", "utils.clamp", "TypeError"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils._batch_clamp_tensor_by_vector", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], ["\n", "with", "open", "(", "filename", ",", "mode", ")", "as", "pkfile", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "pkfile", ")", "\n", "", "return", "data", "\n", "\n", "\n", "", "def", "pickle_data", "(", "data", ",", "filename", ",", "mode", "=", "'wb'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils._get_norm_batch": [[118, 124], ["x.size", "x.abs().pow().view().sum().pow", "x.abs().pow().view().sum", "x.abs().pow().view", "x.abs().pow", "x.abs"], "function", ["None"], ["\n", "with", "open", "(", "filename", ",", "mode", ")", "as", "pkfile", ":", "\n", "         ", "pickle", ".", "dump", "(", "data", ",", "pkfile", ")", "\n", "\n", "\n", "", "", "class", "NumpyToTensor", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils._thresh_by_magnitude": [[126, 131], ["torch.relu", "torch.relu", "torch.relu", "x.sign", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["\n", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "sample", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp_by_pnorm": [[133, 145], ["utils._get_norm_batch", "isinstance", "torch.min", "torch.min", "torch.min", "utils.batch_multiply", "isinstance", "isinstance", "isinstance", "torch.ones_like", "torch.ones_like", "torch.ones_like", "_get_norm_batch.size", "r.size"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils._get_norm_batch", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply"], []], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.is_float_or_torch_tensor": [[147, 152], ["isinstance", "isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.normalize_by_pnorm": [[154, 168], ["utils._get_norm_batch", "torch.max", "torch.max", "torch.max", "utils.batch_multiply", "isinstance", "isinstance", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils._get_norm_batch", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply"], []], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.rand_init_delta": [[170, 199], ["isinstance", "delta.data.uniform_", "utils.batch_multiply", "utils.clamp", "len", "len", "delta.data.uniform_", "utils.clamp_by_pnorm", "torch.distributions.laplace.Laplace", "laplace.Laplace.sample", "utils.normalize_by_pnorm", "torch.distributions.uniform.Uniform().sample", "NotImplementedError", "utils.clamp", "delta.new_tensor", "delta.new_tensor", "torch.distributions.uniform.Uniform"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils.batch_multiply", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp_by_pnorm", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.normalize_by_pnorm", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], []], "home.repos.pwc.inspect_result.p2333_score.attacks.utils.CWLoss": [[201, 216], ["torch.zeros", "torch.zeros", "torch.zeros", "target_onehot.cuda.cuda", "target_onehot.cuda.scatter_", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "target.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "target.size"], "function", ["home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp", "home.repos.pwc.inspect_result.p2333_score.attacks.utils.clamp"], []], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish._PreActBlock.__init__": [[33, 50], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation_fn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation_fn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "activation_fn", "=", "nn", ".", "ReLU", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "batchnorm_0", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "relu_0", "=", "activation_fn", "(", ")", "\n", "# We manually pad to obtain the same effect as `SAME` (necessary when", "\n", "# `stride` is different than 1).", "\n", "self", ".", "conv_2d_1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "batchnorm_1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "relu_1", "=", "activation_fn", "(", ")", "\n", "self", ".", "conv_2d_2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "has_shortcut", "=", "stride", "!=", "1", "or", "in_planes", "!=", "out_planes", "\n", "if", "self", ".", "has_shortcut", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish._PreActBlock._pad": [[51, 59], ["torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "ValueError"], "methods", ["None"], ["", "", "def", "_pad", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "_stride", "==", "1", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "_stride", "==", "2", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported `stride`.'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish._PreActBlock.forward": [[60, 66], ["preact_resnetwithswish._PreActBlock.relu_0", "preact_resnetwithswish._PreActBlock.conv_2d_1", "preact_resnetwithswish._PreActBlock.conv_2d_2", "preact_resnetwithswish._PreActBlock.batchnorm_0", "preact_resnetwithswish._PreActBlock.shortcut", "preact_resnetwithswish._PreActBlock._pad", "preact_resnetwithswish._PreActBlock.relu_1", "preact_resnetwithswish._PreActBlock._pad", "preact_resnetwithswish._PreActBlock.batchnorm_1"], "methods", ["home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish._PreActBlock._pad", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish._PreActBlock._pad"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu_0", "(", "self", ".", "batchnorm_0", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "self", ".", "_pad", "(", "x", ")", ")", "if", "self", ".", "has_shortcut", "else", "x", "\n", "out", "=", "self", ".", "conv_2d_1", "(", "self", ".", "_pad", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv_2d_2", "(", "self", ".", "relu_1", "(", "self", ".", "batchnorm_1", "(", "out", ")", ")", ")", "\n", "return", "out", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish.PreActResNet.__init__": [[82, 115], ["torch.Module.__init__", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnetwithswish.PreActResNet._make_layer", "preact_resnetwithswish.PreActResNet._make_layer", "preact_resnetwithswish.PreActResNet._make_layer", "preact_resnetwithswish.PreActResNet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation_fn", "torch.Linear", "torch.Linear", "torch.Linear", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ValueError"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ":", "int", "=", "10", ",", "\n", "depth", ":", "int", "=", "18", ",", "\n", "width", ":", "int", "=", "0", ",", "# Used to make the constructor consistent.", "\n", "activation_fn", ":", "nn", ".", "Module", "=", "nn", ".", "ReLU", ",", "\n", "mean", ":", "Union", "[", "Tuple", "[", "float", ",", "...", "]", ",", "float", "]", "=", "CIFAR10_MEAN", ",", "\n", "std", ":", "Union", "[", "Tuple", "[", "float", ",", "...", "]", ",", "float", "]", "=", "CIFAR10_STD", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "num_input_channels", ":", "int", "=", "3", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "width", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported `width`.'", ")", "\n", "", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", ".", "view", "(", "num_input_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "std", ")", ".", "view", "(", "num_input_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "mean_cuda", "=", "None", "\n", "self", ".", "std_cuda", "=", "None", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "conv_2d", "=", "nn", ".", "Conv2d", "(", "num_input_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "depth", "==", "18", ":", "\n", "            ", "num_blocks", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "num_blocks", "=", "(", "3", ",", "4", ",", "6", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported `depth`.'", ")", "\n", "", "self", ".", "layer_0", "=", "self", ".", "_make_layer", "(", "64", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "1", ",", "activation_fn", ")", "\n", "self", ".", "layer_1", "=", "self", ".", "_make_layer", "(", "64", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "2", ",", "activation_fn", ")", "\n", "self", ".", "layer_2", "=", "self", ".", "_make_layer", "(", "128", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "2", ",", "activation_fn", ")", "\n", "self", ".", "layer_3", "=", "self", ".", "_make_layer", "(", "256", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "2", ",", "activation_fn", ")", "\n", "self", ".", "batchnorm", "=", "nn", ".", "BatchNorm2d", "(", "512", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "relu", "=", "activation_fn", "(", ")", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish.PreActResNet._make_layer": [[116, 125], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "preact_resnetwithswish._PreActBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "stride", ",", "\n", "activation_fn", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "_PreActBlock", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "\n", "out_planes", ",", "\n", "stride", ",", "\n", "activation_fn", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish.PreActResNet.forward": [[126, 145], ["preact_resnetwithswish.PreActResNet.conv_2d", "preact_resnetwithswish.PreActResNet.layer_0", "preact_resnetwithswish.PreActResNet.layer_1", "preact_resnetwithswish.PreActResNet.layer_2", "preact_resnetwithswish.PreActResNet.layer_3", "preact_resnetwithswish.PreActResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "preact_resnetwithswish.PreActResNet.logits", "torch.pad", "torch.pad", "torch.pad", "preact_resnetwithswish.PreActResNet.batchnorm", "out.view.view.size", "preact_resnetwithswish.PreActResNet.mean.cuda", "preact_resnetwithswish.PreActResNet.std.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "self", ".", "padding", ",", ")", "*", "4", ")", "\n", "", "if", "x", ".", "is_cuda", ":", "\n", "            ", "if", "self", ".", "mean_cuda", "is", "None", ":", "\n", "                ", "self", ".", "mean_cuda", "=", "self", ".", "mean", ".", "cuda", "(", ")", "\n", "self", ".", "std_cuda", "=", "self", ".", "std", ".", "cuda", "(", ")", "\n", "", "out", "=", "(", "x", "-", "self", ".", "mean_cuda", ")", "/", "self", ".", "std_cuda", "\n", "", "else", ":", "\n", "            ", "out", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "out", "=", "self", ".", "conv_2d", "(", "out", ")", "\n", "out", "=", "self", ".", "layer_0", "(", "out", ")", "\n", "out", "=", "self", ".", "layer_1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer_2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer_3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "batchnorm", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "logits", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish.preact_resnetwithswish": [[147, 169], ["name.split", "int", "preact_resnetwithswish.PreActResNet", "preact_resnetwithswish.PreActResNet", "preact_resnetwithswish.PreActResNet"], "function", ["None"], ["", "", "def", "preact_resnetwithswish", "(", "name", ",", "dataset", "=", "'cifar10'", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Returns suitable PreActResNet model with Swish activation function from its name.\n    Arguments:\n        name (str): name of resnet architecture.\n        num_classes (int): number of target classes.\n        dataset (str): dataset to use.\n    Returns:\n        torch.nn.Module.\n    \"\"\"", "\n", "name_parts", "=", "name", ".", "split", "(", "'-'", ")", "\n", "name", "=", "'-'", ".", "join", "(", "name_parts", "[", ":", "-", "1", "]", ")", "\n", "act_fn", "=", "name_parts", "[", "-", "1", "]", "\n", "depth", "=", "int", "(", "name", "[", "-", "2", ":", "]", ")", "\n", "\n", "if", "'cifar100'", "in", "dataset", ":", "\n", "        ", "return", "PreActResNet", "(", "num_classes", "=", "num_classes", ",", "depth", "=", "depth", ",", "width", "=", "0", ",", "activation_fn", "=", "_ACTIVATION", "[", "act_fn", "]", ",", "\n", "mean", "=", "CIFAR100_MEAN", ",", "std", "=", "CIFAR100_STD", ")", "\n", "", "elif", "'svhn'", "in", "dataset", ":", "\n", "        ", "return", "PreActResNet", "(", "num_classes", "=", "num_classes", ",", "depth", "=", "depth", ",", "width", "=", "0", ",", "activation_fn", "=", "_ACTIVATION", "[", "act_fn", "]", ",", "\n", "mean", "=", "SVHN_MEAN", ",", "std", "=", "SVHN_STD", ")", "\n", "", "return", "PreActResNet", "(", "num_classes", "=", "num_classes", ",", "depth", "=", "depth", ",", "width", "=", "0", ",", "activation_fn", "=", "_ACTIVATION", "[", "act_fn", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish._Block.__init__": [[34, 52], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation_fn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation_fn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "activation_fn", "=", "nn", ".", "ReLU", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batchnorm_0", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "relu_0", "=", "activation_fn", "(", "inplace", "=", "True", ")", "\n", "# We manually pad to obtain the same effect as `SAME` (necessary when `stride` is different than 1).", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "batchnorm_1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "relu_1", "=", "activation_fn", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "has_shortcut", "=", "in_planes", "!=", "out_planes", "\n", "if", "self", ".", "has_shortcut", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "", "self", ".", "_stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish._Block.forward": [[53, 70], ["wideresnetwithswish._Block.conv_0", "wideresnetwithswish._Block.relu_1", "wideresnetwithswish._Block.conv_1", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnetwithswish._Block.relu_0", "wideresnetwithswish._Block.relu_0", "torch.pad", "torch.pad", "torch.pad", "wideresnetwithswish._Block.batchnorm_1", "wideresnetwithswish._Block.batchnorm_0", "wideresnetwithswish._Block.batchnorm_0", "torch.pad", "torch.pad", "torch.pad", "ValueError", "wideresnetwithswish._Block.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "has_shortcut", ":", "\n", "            ", "x", "=", "self", ".", "relu_0", "(", "self", ".", "batchnorm_0", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu_0", "(", "self", ".", "batchnorm_0", "(", "x", ")", ")", "\n", "", "v", "=", "x", "if", "self", ".", "has_shortcut", "else", "out", "\n", "if", "self", ".", "_stride", "==", "1", ":", "\n", "            ", "v", "=", "F", ".", "pad", "(", "v", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "_stride", "==", "2", ":", "\n", "            ", "v", "=", "F", ".", "pad", "(", "v", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported `stride`.'", ")", "\n", "", "out", "=", "self", ".", "conv_0", "(", "v", ")", "\n", "out", "=", "self", ".", "relu_1", "(", "self", ".", "batchnorm_1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv_1", "(", "out", ")", "\n", "out", "=", "torch", ".", "add", "(", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "has_shortcut", "else", "x", ",", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish._BlockGroup.__init__": [[81, 92], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block.append", "wideresnetwithswish._Block"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "num_blocks", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "activation_fn", "=", "nn", ".", "ReLU", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "block", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "block", ".", "append", "(", "\n", "_Block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "\n", "out_planes", ",", "\n", "i", "==", "0", "and", "stride", "or", "1", ",", "\n", "activation_fn", "=", "activation_fn", ")", "\n", ")", "\n", "", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish._BlockGroup.forward": [[93, 95], ["wideresnetwithswish._BlockGroup.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish.WideResNet.__init__": [[110, 151], ["torch.Module.__init__", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation_fn", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnetwithswish.WideResNet.modules", "wideresnetwithswish._BlockGroup", "wideresnetwithswish._BlockGroup", "wideresnetwithswish._BlockGroup", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ":", "int", "=", "10", ",", "\n", "depth", ":", "int", "=", "28", ",", "\n", "width", ":", "int", "=", "10", ",", "\n", "activation_fn", ":", "nn", ".", "Module", "=", "nn", ".", "ReLU", ",", "\n", "mean", ":", "Union", "[", "Tuple", "[", "float", ",", "...", "]", ",", "float", "]", "=", "CIFAR10_MEAN", ",", "\n", "std", ":", "Union", "[", "Tuple", "[", "float", ",", "...", "]", ",", "float", "]", "=", "CIFAR10_STD", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "num_input_channels", ":", "int", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", ".", "view", "(", "num_input_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "std", ")", ".", "view", "(", "num_input_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "mean_cuda", "=", "None", "\n", "self", ".", "std_cuda", "=", "None", "\n", "self", ".", "padding", "=", "padding", "\n", "num_channels", "=", "[", "16", ",", "16", "*", "width", ",", "32", "*", "width", ",", "64", "*", "width", "]", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", "\n", "num_blocks", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "self", ".", "init_conv", "=", "nn", ".", "Conv2d", "(", "num_input_channels", ",", "num_channels", "[", "0", "]", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "_BlockGroup", "(", "num_blocks", ",", "num_channels", "[", "0", "]", ",", "num_channels", "[", "1", "]", ",", "1", ",", "\n", "activation_fn", "=", "activation_fn", ")", ",", "\n", "_BlockGroup", "(", "num_blocks", ",", "num_channels", "[", "1", "]", ",", "num_channels", "[", "2", "]", ",", "2", ",", "\n", "activation_fn", "=", "activation_fn", ")", ",", "\n", "_BlockGroup", "(", "num_blocks", ",", "num_channels", "[", "2", "]", ",", "num_channels", "[", "3", "]", ",", "2", ",", "\n", "activation_fn", "=", "activation_fn", ")", ")", "\n", "self", ".", "batchnorm", "=", "nn", ".", "BatchNorm2d", "(", "num_channels", "[", "3", "]", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "relu", "=", "activation_fn", "(", "inplace", "=", "True", ")", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "num_channels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "num_channels", "=", "num_channels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish.WideResNet.forward": [[152, 169], ["wideresnetwithswish.WideResNet.init_conv", "wideresnetwithswish.WideResNet.layer", "wideresnetwithswish.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnetwithswish.WideResNet.logits", "torch.pad", "torch.pad", "torch.pad", "wideresnetwithswish.WideResNet.batchnorm", "wideresnetwithswish.WideResNet.mean.cuda", "wideresnetwithswish.WideResNet.std.cuda"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "self", ".", "padding", ",", ")", "*", "4", ")", "\n", "", "if", "x", ".", "is_cuda", ":", "\n", "            ", "if", "self", ".", "mean_cuda", "is", "None", ":", "\n", "                ", "self", ".", "mean_cuda", "=", "self", ".", "mean", ".", "cuda", "(", ")", "\n", "self", ".", "std_cuda", "=", "self", ".", "std", ".", "cuda", "(", ")", "\n", "", "out", "=", "(", "x", "-", "self", ".", "mean_cuda", ")", "/", "self", ".", "std_cuda", "\n", "", "else", ":", "\n", "            ", "out", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "", "out", "=", "self", ".", "init_conv", "(", "out", ")", "\n", "out", "=", "self", ".", "layer", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "batchnorm", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "num_channels", ")", "\n", "return", "self", ".", "logits", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish.wideresnetwithswish": [[171, 198], ["name.split", "int", "int", "print", "wideresnetwithswish.WideResNet", "wideresnetwithswish.WideResNet", "wideresnetwithswish.WideResNet"], "function", ["None"], ["", "", "def", "wideresnetwithswish", "(", "name", ",", "dataset", "=", "'cifar10'", ",", "num_classes", "=", "10", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"\n    Returns suitable Wideresnet model with Swish activation function from its name.\n    Arguments:\n        name (str): name of resnet architecture.\n        num_classes (int): number of target classes.\n        device (str or torch.device): device to work on.\n        dataset (str): dataset to use.\n    Returns:\n        torch.nn.Module.\n    \"\"\"", "\n", "# if 'cifar10' not in dataset:", "\n", "#     raise ValueError('WideResNets with Swish activation only support CIFAR-10 and CIFAR-100!')", "\n", "\n", "name_parts", "=", "name", ".", "split", "(", "'-'", ")", "\n", "depth", "=", "int", "(", "name_parts", "[", "1", "]", ")", "\n", "widen", "=", "int", "(", "name_parts", "[", "2", "]", ")", "\n", "act_fn", "=", "name_parts", "[", "3", "]", "\n", "\n", "print", "(", "f'WideResNet-{depth}-{widen}-{act_fn} uses normalization.'", ")", "\n", "if", "'cifar100'", "in", "dataset", ":", "\n", "        ", "return", "WideResNet", "(", "num_classes", "=", "num_classes", ",", "depth", "=", "depth", ",", "width", "=", "widen", ",", "activation_fn", "=", "_ACTIVATION", "[", "act_fn", "]", ",", "\n", "mean", "=", "CIFAR100_MEAN", ",", "std", "=", "CIFAR100_STD", ")", "\n", "", "elif", "'svhn'", "in", "dataset", ":", "\n", "        ", "return", "WideResNet", "(", "num_classes", "=", "num_classes", ",", "depth", "=", "depth", ",", "width", "=", "widen", ",", "activation_fn", "=", "_ACTIVATION", "[", "act_fn", "]", ",", "\n", "mean", "=", "SVHN_MEAN", ",", "std", "=", "SVHN_STD", ")", "\n", "", "return", "WideResNet", "(", "num_classes", "=", "num_classes", ",", "depth", "=", "depth", ",", "width", "=", "widen", ",", "activation_fn", "=", "_ACTIVATION", "[", "act_fn", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.BasicBlock.__init__": [[16, 30], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.BasicBlock.forward": [[31, 41], ["wideresnet.BasicBlock.relu2", "wideresnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.conv1", "wideresnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.NetworkBlock.__init__": [[54, 57], ["torch.Module.__init__", "wideresnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer"], ["def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.NetworkBlock._make_layer": [[58, 63], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.NetworkBlock.forward": [[64, 66], ["wideresnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.WideResNet.__init__": [[77, 107], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "depth", "=", "34", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.WideResNet.forward": [[108, 117], ["wideresnet.WideResNet.conv1", "wideresnet.WideResNet.block1", "wideresnet.WideResNet.block2", "wideresnet.WideResNet.block3", "wideresnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnet.WideResNet.fc", "wideresnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.wideresnet": [[119, 133], ["name.split", "int", "int", "wideresnet.WideResNet"], "function", ["None"], ["", "", "def", "wideresnet", "(", "name", ",", "num_classes", "=", "10", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"\n    Returns suitable Wideresnet model from its name.\n    Arguments:\n        name (str): name of resnet architecture.\n        num_classes (int): number of target classes.\n        device (str or torch.device): device to work on.\n    Returns:\n        torch.nn.Module.\n    \"\"\"", "\n", "name_parts", "=", "name", ".", "split", "(", "'-'", ")", "\n", "depth", "=", "int", "(", "name_parts", "[", "1", "]", ")", "\n", "widen", "=", "int", "(", "name_parts", "[", "2", "]", ")", "\n", "return", "WideResNet", "(", "depth", "=", "depth", ",", "num_classes", "=", "num_classes", ",", "widen_factor", "=", "widen", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.Normalization.__init__": [[16, 22], ["torch.Module.__init__", "len", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "Normalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_channels", "=", "len", "(", "mean", ")", "\n", "self", ".", "mean", "=", "torch", ".", "FloatTensor", "(", "mean", ")", ".", "view", "(", "1", ",", "num_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "sigma", "=", "torch", ".", "FloatTensor", "(", "std", ")", ".", "view", "(", "1", ",", "num_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "mean_cuda", ",", "self", ".", "sigma_cuda", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.Normalization.forward": [[23, 32], ["resnet.Normalization.mean.cuda", "resnet.Normalization.sigma.cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "is_cuda", ":", "\n", "            ", "if", "self", ".", "mean_cuda", "is", "None", ":", "\n", "                ", "self", ".", "mean_cuda", "=", "self", ".", "mean", ".", "cuda", "(", ")", "\n", "self", ".", "sigma_cuda", "=", "self", ".", "sigma", ".", "cuda", "(", ")", "\n", "", "out", "=", "(", "x", "-", "self", ".", "mean_cuda", ")", "/", "self", ".", "sigma_cuda", "\n", "", "else", ":", "\n", "            ", "out", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "sigma", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.BasicBlock.__init__": [[44, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.BasicBlock.forward": [[58, 64], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.Bottleneck.__init__": [[76, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.Bottleneck.forward": [[92, 99], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.ResNet.__init__": [[110, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.ResNet._make_layer": [[122, 129], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.ResNet.forward": [[130, 140], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.resnet.resnet": [[142, 164], ["ValueError", "resnet.ResNet", "resnet.ResNet", "resnet.ResNet", "resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet", "(", "name", ",", "num_classes", "=", "10", ",", "pretrained", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"\n    Returns suitable Resnet model from its name.\n    Arguments:\n        name (str): name of resnet architecture.\n        num_classes (int): number of target classes.\n        pretrained (bool): whether to use a pretrained model.\n        device (str or torch.device): device to work on.\n    Returns:\n        torch.nn.Module.\n    \"\"\"", "\n", "if", "name", "==", "'resnet18'", ":", "\n", "        ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ",", "device", "=", "device", ")", "\n", "", "elif", "name", "==", "'resnet34'", ":", "\n", "        ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "device", "=", "device", ")", "\n", "", "elif", "name", "==", "'resnet50'", ":", "\n", "        ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "device", "=", "device", ")", "\n", "", "elif", "name", "==", "'resnet101'", ":", "\n", "        ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "device", "=", "device", ")", "\n", "\n", "", "raise", "ValueError", "(", "'Only resnet18, resnet34, resnet50 and resnet101 are supported!'", ")", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActBlock.forward": [[28, 35], ["torch.relu", "torch.relu", "torch.relu", "ti_preact_resnet.PreActBlock.conv1", "ti_preact_resnet.PreActBlock.conv2", "ti_preact_resnet.PreActBlock.bn1", "hasattr", "ti_preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "ti_preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActBottleneck.__init__": [[47, 59], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActBottleneck.forward": [[61, 69], ["torch.relu", "torch.relu", "torch.relu", "ti_preact_resnet.PreActBottleneck.conv1", "ti_preact_resnet.PreActBottleneck.conv2", "ti_preact_resnet.PreActBottleneck.conv3", "ti_preact_resnet.PreActBottleneck.bn1", "hasattr", "ti_preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ti_preact_resnet.PreActBottleneck.bn2", "ti_preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActResNet.__init__": [[75, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ti_preact_resnet.PreActResNet._make_layer", "ti_preact_resnet.PreActResNet._make_layer", "ti_preact_resnet.PreActResNet._make_layer", "ti_preact_resnet.PreActResNet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "200", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActResNet._make_layer": [[88, 95], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.PreActResNet.forward": [[96, 107], ["ti_preact_resnet.PreActResNet.conv1", "ti_preact_resnet.PreActResNet.layer1", "ti_preact_resnet.PreActResNet.layer2", "ti_preact_resnet.PreActResNet.layer3", "ti_preact_resnet.PreActResNet.layer4", "torch.relu", "torch.relu", "torch.relu", "ti_preact_resnet.PreActResNet.avgpool", "ti_preact_resnet.PreActResNet.view", "ti_preact_resnet.PreActResNet.linear", "ti_preact_resnet.PreActResNet.bn", "ti_preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.ti_preact_resnet": [[109, 131], ["ti_preact_resnet.PreActResNet", "ti_preact_resnet.PreActResNet", "ti_preact_resnet.PreActResNet", "ti_preact_resnet.PreActResNet", "ValueError"], "function", ["None"], ["", "", "def", "ti_preact_resnet", "(", "name", ",", "num_classes", "=", "200", ",", "pretrained", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"\n    Returns suitable PreAct Resnet model from its name (only for TI-200 dataset).\n    Arguments:\n        name (str): name of resnet architecture.\n        num_classes (int): number of target classes.\n        pretrained (bool): whether to use a pretrained model.\n        device (str or torch.device): device to work on.\n    Returns:\n        torch.nn.Module.\n    \"\"\"", "\n", "if", "name", "==", "'preact-resnet18'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "name", "==", "'preact-resnet34'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "name", "==", "'preact-resnet50'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "name", "==", "'preact-resnet101'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Only preact-resnet18, preact-resnet34, preact-resnet50 and preact-resnet101 are supported!'", ")", "\n", "", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.models.__init__.create_model": [[21, 62], ["torch.nn.DataParallel", "torch.nn.Sequential.to", "ti_preact_resnet", "torch.nn.Sequential", "torch.nn.Sequential", "ValueError", "resnet.Normalization", "preact_resnet.preact_resnet", "preact_resnetwithswish.preact_resnetwithswish", "resnet.resnet", "wideresnet.wideresnet", "wideresnetwithswish.wideresnetwithswish", "ValueError"], "function", ["home.repos.pwc.inspect_result.p2333_score.models.ti_preact_resnet.ti_preact_resnet", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.preact_resnet", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnetwithswish.preact_resnetwithswish", "home.repos.pwc.inspect_result.p2333_score.models.resnet.resnet", "home.repos.pwc.inspect_result.p2333_score.models.wideresnet.wideresnet", "home.repos.pwc.inspect_result.p2333_score.models.wideresnetwithswish.wideresnetwithswish"], []], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActBlock.forward": [[28, 35], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActBottleneck.__init__": [[47, 59], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActBottleneck.forward": [[61, 69], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet.__init__": [[75, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet._make_layer": [[87, 94], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.PreActResNet.forward": [[95, 106], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.bn", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.models.preact_resnet.preact_resnet": [[108, 129], ["ValueError", "preact_resnet.PreActResNet", "preact_resnet.PreActResNet", "preact_resnet.PreActResNet", "preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "preact_resnet", "(", "name", ",", "num_classes", "=", "10", ",", "pretrained", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"\n    Returns suitable Resnet model from its name.\n    Arguments:\n        name (str): name of resnet architecture.\n        num_classes (int): number of target classes.\n        pretrained (bool): whether to use a pretrained model.\n        device (str or torch.device): device to work on.\n    Returns:\n        torch.nn.Module.\n    \"\"\"", "\n", "if", "name", "==", "'preact-resnet18'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "name", "==", "'preact-resnet34'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "name", "==", "'preact-resnet50'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "elif", "name", "==", "'preact-resnet101'", ":", "\n", "        ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", "raise", "ValueError", "(", "'Only preact-resnet18, preact-resnet34, preact-resnet50 and preact-resnet101 are supported!'", ")", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.tiny_imagenet.load_tinyimagenet": [[18, 38], ["torchvision.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Compose", "os.path.join", "os.path.join", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["def", "load_tinyimagenet", "(", "data_dir", ",", "use_augmentation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns Tiny Imagenet-200 train, test datasets and dataloaders.\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "use_augmentation", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "4", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "train_transform", "=", "test_transform", "\n", "\n", "", "train_dataset", "=", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", ",", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'val'", ")", ",", "transform", "=", "test_transform", ")", "\n", "\n", "return", "train_dataset", ",", "test_dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.cifar100.load_cifar100": [[16, 35], ["torchvision.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.Compose", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor"], "function", ["None"], ["def", "load_cifar100", "(", "data_dir", ",", "use_augmentation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns CIFAR100 train, test datasets and dataloaders.\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "use_augmentation", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "train_transform", "=", "test_transform", "\n", "\n", "", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "return", "train_dataset", ",", "test_dataset", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.cifar100s.SemiSupervisedCIFAR100.load_base_dataset": [[48, 52], ["torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "len"], "methods", ["None"], ["def", "load_base_dataset", "(", "self", ",", "train", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "base_dataset", "==", "'cifar100'", ",", "'Only semi-supervised cifar100 is supported. Please use correct dataset!'", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "train", "=", "train", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "dataset", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.cifar100s.load_cifar100s": [[12, 42], ["re.sub", "torchvision.Compose", "cifar100s.SemiSupervisedCIFAR100", "cifar100s.SemiSupervisedCIFAR100", "torchvision.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.utils.data.Subset", "torchvision.ToTensor", "numpy.arange", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.ToTensor"], "function", ["None"], ["def", "load_cifar100s", "(", "data_dir", ",", "use_augmentation", "=", "False", ",", "aux_take_amount", "=", "None", ",", "\n", "aux_data_filename", "=", "None", ",", "validation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns semisupervised CIFAR100 train, test datasets and dataloaders (with DDPM Images).\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n        aux_take_amount (int): number of semi-supervised examples to use (if None, use all).\n        aux_data_filename (str): path to additional data pickle file.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "data_dir", "=", "re", ".", "sub", "(", "'cifar100s'", ",", "'cifar100'", ",", "data_dir", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "use_augmentation", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "train_transform", "=", "test_transform", "\n", "\n", "", "train_dataset", "=", "SemiSupervisedCIFAR100", "(", "base_dataset", "=", "'cifar100'", ",", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "aux_data_filename", "=", "aux_data_filename", ",", "\n", "add_aux_labels", "=", "True", ",", "aux_take_amount", "=", "aux_take_amount", ",", "validation", "=", "validation", ")", "\n", "test_dataset", "=", "SemiSupervisedCIFAR100", "(", "base_dataset", "=", "'cifar100'", ",", "root", "=", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "if", "validation", ":", "\n", "        ", "val_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "val_dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "val_dataset", ",", "np", ".", "arange", "(", "0", ",", "1024", ")", ")", "\n", "return", "train_dataset", ",", "test_dataset", ",", "val_dataset", "\n", "", "return", "train_dataset", ",", "test_dataset", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.cifar10s.SemiSupervisedCIFAR10.load_base_dataset": [[50, 54], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "len"], "methods", ["None"], ["def", "load_base_dataset", "(", "self", ",", "train", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "base_dataset", "==", "'cifar10'", ",", "'Only semi-supervised cifar10 is supported. Please use correct dataset!'", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "train", "=", "train", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.cifar10s.load_cifar10s": [[13, 44], ["re.sub", "torchvision.Compose", "cifar10s.SemiSupervisedCIFAR10", "cifar10s.SemiSupervisedCIFAR10", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.Subset", "torchvision.ToTensor", "numpy.arange", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["def", "load_cifar10s", "(", "data_dir", ",", "use_augmentation", "=", "False", ",", "aux_take_amount", "=", "None", ",", "\n", "aux_data_filename", "=", "'/cluster/scratch/rarade/cifar10s/ti_500K_pseudo_labeled.pickle'", ",", "\n", "validation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns semisupervised CIFAR10 train, test datasets and dataloaders (with Tiny Images).\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n        aux_take_amount (int): number of semi-supervised examples to use (if None, use all).\n        aux_data_filename (str): path to additional data pickle file.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "data_dir", "=", "re", ".", "sub", "(", "'cifar10s'", ",", "'cifar10'", ",", "data_dir", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "use_augmentation", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "train_transform", "=", "test_transform", "\n", "\n", "", "train_dataset", "=", "SemiSupervisedCIFAR10", "(", "base_dataset", "=", "'cifar10'", ",", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "aux_data_filename", "=", "aux_data_filename", ",", "\n", "add_aux_labels", "=", "True", ",", "aux_take_amount", "=", "aux_take_amount", ",", "validation", "=", "validation", ")", "\n", "test_dataset", "=", "SemiSupervisedCIFAR10", "(", "base_dataset", "=", "'cifar10'", ",", "root", "=", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "if", "validation", ":", "\n", "        ", "val_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "val_dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "val_dataset", ",", "np", ".", "arange", "(", "0", ",", "1024", ")", ")", "\n", "return", "train_dataset", ",", "test_dataset", ",", "val_dataset", "\n", "", "return", "train_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.svhns.SemiSupervisedSVHN.load_base_dataset": [[46, 50], ["torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "len"], "methods", ["None"], ["def", "load_base_dataset", "(", "self", ",", "train", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "base_dataset", "==", "'svhn'", ",", "'Only semi-supervised SVHN is supported. Please use correct dataset!'", "\n", "self", ".", "dataset", "=", "torchvision", ".", "datasets", ".", "SVHN", "(", "split", "=", "'train'", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.svhns.load_svhns": [[13, 40], ["re.sub", "torchvision.Compose", "svhns.SemiSupervisedSVHN", "svhns.SemiSupervisedSVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torch.utils.data.Subset", "torchvision.ToTensor", "numpy.arange"], "function", ["None"], ["def", "load_svhns", "(", "data_dir", ",", "use_augmentation", "=", "False", ",", "aux_take_amount", "=", "None", ",", "\n", "aux_data_filename", "=", "'/cluster/scratch/rarade/svhns/ti_500K_pseudo_labeled.pickle'", ",", "\n", "validation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns semisupervised SVHN train, test datasets and dataloaders (with Tiny Images).\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n        aux_take_amount (int): number of semi-supervised examples to use (if None, use all).\n        aux_data_filename (str): path to additional data pickle file.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "data_dir", "=", "re", ".", "sub", "(", "'svhns'", ",", "'svhn'", ",", "data_dir", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "train_transform", "=", "test_transform", "\n", "\n", "train_dataset", "=", "SemiSupervisedSVHN", "(", "base_dataset", "=", "'svhn'", ",", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "aux_data_filename", "=", "aux_data_filename", ",", "\n", "add_aux_labels", "=", "True", ",", "aux_take_amount", "=", "aux_take_amount", ",", "validation", "=", "validation", ")", "\n", "test_dataset", "=", "SemiSupervisedSVHN", "(", "base_dataset", "=", "'svhn'", ",", "root", "=", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "if", "validation", ":", "\n", "        ", "val_dataset", "=", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "data_dir", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "val_dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "val_dataset", ",", "np", ".", "arange", "(", "0", ",", "1024", ")", ")", "\n", "return", "train_dataset", ",", "test_dataset", ",", "val_dataset", "\n", "", "return", "train_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.cifar10.load_cifar10": [[16, 35], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.Compose", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["def", "load_cifar10", "(", "data_dir", ",", "use_augmentation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns CIFAR10 train, test datasets and dataloaders.\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "use_augmentation", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "train_transform", "=", "test_transform", "\n", "\n", "", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "return", "train_dataset", ",", "test_dataset", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.__init__.get_data_info": [[29, 48], ["os.path.basename", "os.path.normpath", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.p2333_score.data.__init__.load_data": [[50, 94], ["os.path.basename", "os.path.normpath", "load_dataset_fn", "load_dataset_fn", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "semisup.get_semisup_dataloaders", "semisup.get_semisup_dataloaders"], "function", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.get_semisup_dataloaders", "home.repos.pwc.inspect_result.p2333_score.data.semisup.get_semisup_dataloaders"], []], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDataset.__init__": [[33, 96], ["semisup.SemiSupervisedDataset.load_base_dataset", "list", "list", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "range", "print", "len", "numpy.concatenate", "semisup.SemiSupervisedDataset.unsup_indices.extend", "range", "len", "len", "numpy.load", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "semisup.SemiSupervisedDataset.targets.extend", "semisup.SemiSupervisedDataset.targets.extend", "range", "len", "os.path.splitext", "open", "pickle.load", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.load_base_dataset", "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed", "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed"], ["def", "__init__", "(", "self", ",", "base_dataset", "=", "'cifar10'", ",", "take_amount", "=", "None", ",", "take_amount_seed", "=", "13", ",", "aux_data_filename", "=", "None", ",", "\n", "add_aux_labels", "=", "False", ",", "aux_take_amount", "=", "None", ",", "train", "=", "False", ",", "validation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "load_base_dataset", "(", "train", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "validation", ":", "\n", "            ", "self", ".", "dataset", ".", "data", "=", "self", ".", "dataset", ".", "data", "[", "1024", ":", "]", "\n", "self", ".", "dataset", ".", "targets", "=", "self", ".", "dataset", ".", "targets", "[", "1024", ":", "]", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "if", "take_amount", "is", "not", "None", ":", "\n", "                ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "sup_indices", ")", ",", "take_amount", ",", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "take_inds", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n", "if", "aux_data_filename", "is", "not", "None", ":", "\n", "                ", "aux_path", "=", "aux_data_filename", "\n", "print", "(", "'Loading data from %s'", "%", "aux_path", ")", "\n", "if", "os", ".", "path", ".", "splitext", "(", "aux_path", ")", "[", "1", "]", "==", "'.pickle'", ":", "\n", "# for data from Carmon et al, 2019.", "\n", "                    ", "with", "open", "(", "aux_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "aux", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_data", "=", "aux", "[", "'data'", "]", "\n", "aux_targets", "=", "aux", "[", "'extrapolated_targets'", "]", "\n", "", "else", ":", "\n", "# for data from Rebuffi et al, 2021.", "\n", "                    ", "aux", "=", "np", ".", "load", "(", "aux_path", ")", "\n", "aux_data", "=", "aux", "[", "'image'", "]", "\n", "aux_targets", "=", "aux", "[", "'label'", "]", "\n", "\n", "", "orig_len", "=", "len", "(", "self", ".", "data", ")", "\n", "\n", "if", "aux_take_amount", "is", "not", "None", ":", "\n", "                    ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "aux_data", ")", ",", "aux_take_amount", ",", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "aux_data", "=", "aux_data", "[", "take_inds", "]", "\n", "aux_targets", "=", "aux_targets", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "aux_data", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "add_aux_labels", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "[", "-", "1", "]", "*", "len", "(", "aux_data", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "aux_targets", ")", "\n", "", "self", ".", "unsup_indices", ".", "extend", "(", "range", "(", "orig_len", ",", "orig_len", "+", "len", "(", "aux_data", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDataset.load_base_dataset": [[97, 99], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "load_base_dataset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDataset.data": [[104, 107], ["None"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDataset.targets": [[112, 115], ["None"], "methods", ["None"], ["", "@", "targets", ".", "setter", "\n", "def", "targets", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "targets", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDataset.__len__": [[116, 118], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDataset.__getitem__": [[119, 122], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "labels", "=", "self", ".", "targets", "\n", "return", "self", ".", "dataset", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.__init__": [[128, 192], ["semisup.SemiSupervisedDatasetSVHN.load_base_dataset", "semisup.SemiSupervisedDatasetSVHN.dataset.labels.tolist", "list", "list", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "range", "print", "len", "numpy.concatenate", "semisup.SemiSupervisedDatasetSVHN.unsup_indices.extend", "range", "len", "len", "numpy.load", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "semisup.SemiSupervisedDatasetSVHN.targets.extend", "semisup.SemiSupervisedDatasetSVHN.targets.extend", "range", "len", "os.path.splitext", "open", "pickle.load", "len", "aux_data.transpose", "len", "len"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.load_base_dataset", "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed", "home.repos.pwc.inspect_result.p2333_score.utils.utils.seed"], ["def", "__init__", "(", "self", ",", "base_dataset", "=", "'svhn'", ",", "take_amount", "=", "None", ",", "take_amount_seed", "=", "13", ",", "aux_data_filename", "=", "None", ",", "\n", "add_aux_labels", "=", "False", ",", "aux_take_amount", "=", "None", ",", "train", "=", "False", ",", "validation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "load_base_dataset", "(", "train", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset", ".", "labels", "=", "self", ".", "dataset", ".", "labels", ".", "tolist", "(", ")", "\n", "\n", "\n", "if", "validation", ":", "\n", "            ", "self", ".", "dataset", ".", "data", "=", "self", ".", "dataset", ".", "data", "[", "1024", ":", "]", "\n", "self", ".", "dataset", ".", "labels", "=", "self", ".", "dataset", ".", "labels", "[", "1024", ":", "]", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "if", "take_amount", "is", "not", "None", ":", "\n", "                ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "sup_indices", ")", ",", "take_amount", ",", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "take_inds", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n", "if", "aux_data_filename", "is", "not", "None", ":", "\n", "                ", "aux_path", "=", "aux_data_filename", "\n", "print", "(", "'Loading data from %s'", "%", "aux_path", ")", "\n", "if", "os", ".", "path", ".", "splitext", "(", "aux_path", ")", "[", "1", "]", "==", "'.pickle'", ":", "\n", "# for data from Carmon et al, 2019.", "\n", "                    ", "with", "open", "(", "aux_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "aux", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_data", "=", "aux", "[", "'data'", "]", "\n", "aux_targets", "=", "aux", "[", "'extrapolated_targets'", "]", "\n", "", "else", ":", "\n", "# for data from Rebuffi et al, 2021.", "\n", "                    ", "aux", "=", "np", ".", "load", "(", "aux_path", ")", "\n", "aux_data", "=", "aux", "[", "'image'", "]", "\n", "aux_targets", "=", "aux", "[", "'label'", "]", "\n", "\n", "", "orig_len", "=", "len", "(", "self", ".", "data", ")", "\n", "\n", "if", "aux_take_amount", "is", "not", "None", ":", "\n", "                    ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "aux_data", ")", ",", "aux_take_amount", ",", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "aux_data", "=", "aux_data", "[", "take_inds", "]", "\n", "aux_targets", "=", "aux_targets", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "aux_data", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "add_aux_labels", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "[", "-", "1", "]", "*", "len", "(", "aux_data", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "aux_targets", ")", "\n", "", "self", ".", "unsup_indices", ".", "extend", "(", "range", "(", "orig_len", ",", "orig_len", "+", "len", "(", "aux_data", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.load_base_dataset": [[193, 195], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "load_base_dataset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.data": [[200, 203], ["None"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.targets": [[208, 211], ["None"], "methods", ["None"], ["", "@", "targets", ".", "setter", "\n", "def", "targets", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "labels", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.__len__": [[212, 214], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedDatasetSVHN.__getitem__": [[215, 218], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "labels", "=", "self", ".", "targets", "\n", "return", "self", ".", "dataset", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__": [[224, 241], ["int", "super().__init__", "int", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "sup_inds", ",", "unsup_inds", ",", "batch_size", ",", "unsup_fraction", "=", "0.5", ",", "num_batches", "=", "None", ")", ":", "\n", "        ", "if", "unsup_fraction", "is", "None", "or", "unsup_fraction", "<", "0", ":", "\n", "            ", "self", ".", "sup_inds", "=", "sup_inds", "+", "unsup_inds", "\n", "unsup_fraction", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "sup_inds", "=", "sup_inds", "\n", "self", ".", "unsup_inds", "=", "unsup_inds", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "unsup_batch_size", "=", "int", "(", "batch_size", "*", "unsup_fraction", ")", "\n", "self", ".", "sup_batch_size", "=", "batch_size", "-", "unsup_batch_size", "\n", "\n", "if", "num_batches", "is", "not", "None", ":", "\n", "            ", "self", ".", "num_batches", "=", "num_batches", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "sup_inds", ")", "/", "self", ".", "sup_batch_size", ")", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__iter__": [[242, 258], ["range", "len", "numpy.random.shuffle", "torch.randperm", "batch.extend", "len", "torch.randint", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_counter", "=", "0", "\n", "while", "batch_counter", "<", "self", ".", "num_batches", ":", "\n", "            ", "sup_inds_shuffled", "=", "[", "self", ".", "sup_inds", "[", "i", "]", "\n", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "sup_inds", ")", ")", "]", "\n", "for", "sup_k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sup_inds", ")", ",", "self", ".", "sup_batch_size", ")", ":", "\n", "                ", "if", "batch_counter", "==", "self", ".", "num_batches", ":", "\n", "                    ", "break", "\n", "", "batch", "=", "sup_inds_shuffled", "[", "sup_k", ":", "(", "sup_k", "+", "self", ".", "sup_batch_size", ")", "]", "\n", "if", "self", ".", "sup_batch_size", "<", "self", ".", "batch_size", ":", "\n", "                    ", "batch", ".", "extend", "(", "[", "self", ".", "unsup_inds", "[", "i", "]", "for", "i", "in", "torch", ".", "randint", "(", "high", "=", "len", "(", "self", ".", "unsup_inds", ")", ",", "\n", "size", "=", "(", "self", ".", "batch_size", "-", "len", "(", "batch", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", "]", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "batch", ")", "\n", "yield", "batch", "\n", "batch_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.SemiSupervisedSampler.__len__": [[259, 261], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "", "", "", ""]], "home.repos.pwc.inspect_result.p2333_score.data.semisup.get_semisup_dataloaders": [[8, 27], ["semisup.SemiSupervisedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "torch.utils.data.DataLoader", "int", "numpy.ceil"], "function", ["None"], ["def", "get_semisup_dataloaders", "(", "train_dataset", ",", "test_dataset", ",", "val_dataset", "=", "None", ",", "batch_size", "=", "256", ",", "batch_size_test", "=", "256", ",", "num_workers", "=", "4", ",", "\n", "unsup_fraction", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Return dataloaders with custom sampling of pseudo-labeled data.\n    \"\"\"", "\n", "dataset_size", "=", "train_dataset", ".", "dataset_size", "\n", "train_batch_sampler", "=", "SemiSupervisedSampler", "(", "train_dataset", ".", "sup_indices", ",", "train_dataset", ".", "unsup_indices", ",", "batch_size", ",", "\n", "unsup_fraction", ",", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "dataset_size", "/", "batch_size", ")", ")", ")", "\n", "epoch_size", "=", "len", "(", "train_batch_sampler", ")", "*", "batch_size", "\n", "\n", "# kwargs = {'num_workers': num_workers, 'pin_memory': torch.cuda.is_available() }", "\n", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", ",", "'pin_memory'", ":", "False", "}", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_sampler", "=", "train_batch_sampler", ",", "**", "kwargs", ")", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size_test", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "if", "val_dataset", ":", "\n", "        ", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batch_size_test", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_dataloader", ",", "test_dataloader", ",", "val_dataloader", "\n", "", "return", "train_dataloader", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.p2333_score.data.svhn.load_svhn": [[16, 31], ["torchvision.Compose", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.ToTensor"], "function", ["None"], ["def", "load_svhn", "(", "data_dir", ",", "use_augmentation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns SVHN train, test datasets and dataloaders.\n    Arguments:\n        data_dir (str): path to data directory.\n        use_augmentation (bool): whether to use augmentations for training set.\n    Returns:\n        train dataset, test dataset. \n    \"\"\"", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "train_transform", "=", "test_transform", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "data_dir", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "data_dir", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "return", "train_dataset", ",", "test_dataset", "", "", ""]]}