{"home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.Metrics.__init__": [[73, 80], ["runstats.Statistics"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric_funcs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            metric_funcs (dict): A dict where the keys are metric names and the\n                values are Python functions for evaluating that metric.\n        \"\"\"", "\n", "self", ".", "metrics", "=", "{", "metric", ":", "Statistics", "(", ")", "for", "metric", "in", "metric_funcs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.Metrics.push": [[81, 84], ["METRIC_FUNCS.items", "evaluate.Metrics.metrics[].push", "func"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.push"], ["", "def", "push", "(", "self", ",", "target", ",", "recons", ")", ":", "\n", "        ", "for", "metric", ",", "func", "in", "METRIC_FUNCS", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "metrics", "[", "metric", "]", ".", "push", "(", "func", "(", "target", ",", "recons", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.Metrics.means": [[85, 87], ["stat.mean", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "", "def", "means", "(", "self", ")", ":", "\n", "        ", "return", "{", "metric", ":", "stat", ".", "mean", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.Metrics.stddevs": [[88, 90], ["stat.stddev", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "def", "stddevs", "(", "self", ")", ":", "\n", "        ", "return", "{", "metric", ":", "stat", ".", "stddev", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.Metrics.__repr__": [[91, 98], ["evaluate.Metrics.means", "evaluate.Metrics.stddevs", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.means", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.stddevs"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "means", "=", "self", ".", "means", "(", ")", "\n", "stddevs", "=", "self", ".", "stddevs", "(", ")", "\n", "metric_names", "=", "sorted", "(", "list", "(", "means", ")", ")", "\n", "return", "\" \"", ".", "join", "(", "\n", "f\"{name} = {means[name]:.4g} +/- {2 * stddevs[name]:.4g}\"", "\n", "for", "name", "in", "metric_names", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.mse": [[21, 24], ["numpy.mean"], "function", ["None"], ["def", "mse", "(", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Compute Mean Squared Error (MSE)\"\"\"", "\n", "return", "np", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.nmse": [[26, 29], ["numpy.array", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm"], ["", "def", "nmse", "(", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Compute Normalized Mean Squared Error (NMSE)\"\"\"", "\n", "return", "np", ".", "array", "(", "np", ".", "linalg", ".", "norm", "(", "gt", "-", "pred", ")", "**", "2", "/", "np", ".", "linalg", ".", "norm", "(", "gt", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.psnr": [[31, 38], ["skimage.metrics.peak_signal_noise_ratio", "gt.max"], "function", ["None"], ["", "def", "psnr", "(", "\n", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ",", "maxval", ":", "Optional", "[", "float", "]", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Compute Peak Signal to Noise Ratio metric (PSNR)\"\"\"", "\n", "if", "maxval", "is", "None", ":", "\n", "        ", "maxval", "=", "gt", ".", "max", "(", ")", "\n", "", "return", "peak_signal_noise_ratio", "(", "gt", ",", "pred", ",", "data_range", "=", "maxval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.ssim": [[40, 58], ["numpy.array", "range", "ValueError", "ValueError", "gt.max", "skimage.metrics.structural_similarity"], "function", ["None"], ["", "def", "ssim", "(", "\n", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ",", "maxval", ":", "Optional", "[", "float", "]", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Compute Structural Similarity Index Metric (SSIM)\"\"\"", "\n", "if", "not", "gt", ".", "ndim", "==", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unexpected number of dimensions in ground truth.\"", ")", "\n", "", "if", "not", "gt", ".", "ndim", "==", "pred", ".", "ndim", ":", "\n", "        ", "raise", "ValueError", "(", "\"Ground truth dimensions does not match pred.\"", ")", "\n", "\n", "", "maxval", "=", "gt", ".", "max", "(", ")", "if", "maxval", "is", "None", "else", "maxval", "\n", "\n", "ssim", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "for", "slice_num", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ssim", "=", "ssim", "+", "structural_similarity", "(", "\n", "gt", "[", "slice_num", "]", ",", "pred", "[", "slice_num", "]", ",", "data_range", "=", "maxval", "\n", ")", "\n", "\n", "", "return", "ssim", "/", "gt", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.evaluate.evaluate": [[101, 125], ["evaluate.Metrics", "args.target_path.iterdir", "h5py.File", "h5py.File", "fastmri.data.transforms.center_crop", "fastmri.data.transforms.center_crop", "evaluate.Metrics.push"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.push"], ["", "", "def", "evaluate", "(", "args", ",", "recons_key", ")", ":", "\n", "    ", "metrics", "=", "Metrics", "(", "METRIC_FUNCS", ")", "\n", "\n", "for", "tgt_file", "in", "args", ".", "target_path", ".", "iterdir", "(", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "tgt_file", ",", "\"r\"", ")", "as", "target", ",", "h5py", ".", "File", "(", "\n", "args", ".", "predictions_path", "/", "tgt_file", ".", "name", ",", "\"r\"", "\n", ")", "as", "recons", ":", "\n", "            ", "if", "args", ".", "acquisition", "and", "args", ".", "acquisition", "!=", "target", ".", "attrs", "[", "\"acquisition\"", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "args", ".", "acceleration", "and", "target", ".", "attrs", "[", "\"acceleration\"", "]", "!=", "args", ".", "acceleration", ":", "\n", "                ", "continue", "\n", "\n", "", "target", "=", "target", "[", "recons_key", "]", "[", "(", ")", "]", "\n", "recons", "=", "recons", "[", "\"reconstruction\"", "]", "[", "(", ")", "]", "\n", "target", "=", "transforms", ".", "center_crop", "(", "\n", "target", ",", "(", "target", ".", "shape", "[", "-", "1", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", ")", "\n", "recons", "=", "transforms", ".", "center_crop", "(", "\n", "recons", ",", "(", "target", ".", "shape", "[", "-", "1", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", ")", "\n", "metrics", ".", "push", "(", "target", ",", "recons", ")", "\n", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.math.complex_mul": [[12, 33], ["torch.stack", "ValueError"], "function", ["None"], ["def", "complex_mul", "(", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Complex multiplication.\n\n    This multiplies two complex tensors assuming that they are both stored as\n    real arrays with the last dimension being the complex dimension.\n\n    Args:\n        x: A PyTorch tensor with the last dimension of size 2.\n        y: A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "if", "not", "x", ".", "shape", "[", "-", "1", "]", "==", "y", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensors do not have separate complex dim.\"", ")", "\n", "\n", "", "re", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "1", "]", "\n", "im", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "0", "]", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "re", ",", "im", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.math.complex_conj": [[35, 53], ["torch.stack", "ValueError"], "function", ["None"], ["", "def", "complex_conj", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Complex conjugate.\n\n    This applies the complex conjugate assuming that the input array has the\n    last dimension as the complex dimension.\n\n    Args:\n        x: A PyTorch tensor with the last dimension of size 2.\n        y: A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "if", "not", "x", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "(", "x", "[", "...", ",", "0", "]", ",", "-", "x", "[", "...", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.math.complex_abs": [[55, 70], ["ValueError"], "function", ["None"], ["", "def", "complex_abs", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the absolute value of a complex valued input tensor.\n\n    Args:\n        data: A complex valued tensor, where the size of the final dimension\n            should be 2.\n\n    Returns:\n        Absolute value of data.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.math.complex_abs_sq": [[72, 87], ["ValueError"], "function", ["None"], ["", "def", "complex_abs_sq", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the squared absolute value of a complex tensor.\n\n    Args:\n        data: A complex valued tensor, where the size of the final dimension\n            should be 2.\n\n    Returns:\n        Squared absolute value of data.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.math.tensor_to_complex_np": [[89, 100], ["torch.view_as_complex().numpy", "torch.view_as_complex"], "function", ["None"], ["", "def", "tensor_to_complex_np", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n\n    Args:\n        data: Input data to be converted to numpy.\n\n    Returns:\n        Complex numpy version of data.\n    \"\"\"", "\n", "return", "torch", ".", "view_as_complex", "(", "data", ")", ".", "numpy", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.fft2c_new": [[14, 39], ["fftc.ifftshift", "torch.view_as_real", "torch.view_as_real", "fftc.fftshift", "ValueError", "torch.fft.fftn", "torch.fft.fftn", "torch.view_as_complex", "torch.view_as_complex"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["def", "fft2c_new", "(", "data", ":", "torch", ".", "Tensor", ",", "norm", ":", "str", "=", "\"ortho\"", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply centered 2 dimensional Fast Fourier Transform.\n\n    Args:\n        data: Complex valued input data containing at least 3 dimensions:\n            dimensions -3 & -2 are spatial dimensions and dimension -1 has size\n            2. All other dimensions are assumed to be batch dimensions.\n        norm: Normalization mode. See ``torch.fft.fft``.\n\n    Returns:\n        The FFT of the input.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "data", "=", "torch", ".", "view_as_real", "(", "\n", "torch", ".", "fft", ".", "fftn", "(", "# type: ignore", "\n", "torch", ".", "view_as_complex", "(", "data", ")", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "norm", "=", "norm", "\n", ")", "\n", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.ifft2c_new": [[41, 66], ["fftc.ifftshift", "torch.view_as_real", "torch.view_as_real", "fftc.fftshift", "ValueError", "torch.fft.ifftn", "torch.fft.ifftn", "torch.view_as_complex", "torch.view_as_complex"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["", "def", "ifft2c_new", "(", "data", ":", "torch", ".", "Tensor", ",", "norm", ":", "str", "=", "\"ortho\"", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply centered 2-dimensional Inverse Fast Fourier Transform.\n\n    Args:\n        data: Complex valued input data containing at least 3 dimensions:\n            dimensions -3 & -2 are spatial dimensions and dimension -1 has size\n            2. All other dimensions are assumed to be batch dimensions.\n        norm: Normalization mode. See ``torch.fft.ifft``.\n\n    Returns:\n        The IFFT of the input.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "data", "=", "torch", ".", "view_as_real", "(", "\n", "torch", ".", "fft", ".", "ifftn", "(", "# type: ignore", "\n", "torch", ".", "view_as_complex", "(", "data", ")", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "norm", "=", "norm", "\n", ")", "\n", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.roll_one_dim": [[71, 91], ["x.narrow", "x.narrow", "torch.cat", "torch.cat", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "roll_one_dim", "(", "x", ":", "torch", ".", "Tensor", ",", "shift", ":", "int", ",", "dim", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Similar to roll but for only one dim.\n\n    Args:\n        x: A PyTorch tensor.\n        shift: Amount to roll.\n        dim: Which dimension to roll.\n\n    Returns:\n        Rolled version of x.\n    \"\"\"", "\n", "shift", "=", "shift", "%", "x", ".", "size", "(", "dim", ")", "\n", "if", "shift", "==", "0", ":", "\n", "        ", "return", "x", "\n", "\n", "", "left", "=", "x", ".", "narrow", "(", "dim", ",", "0", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ")", "\n", "right", "=", "x", ".", "narrow", "(", "dim", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ",", "shift", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "right", ",", "left", ")", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.roll": [[93, 116], ["zip", "len", "len", "ValueError", "fftc.roll_one_dim"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.roll_one_dim"], ["", "def", "roll", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "shift", ":", "List", "[", "int", "]", ",", "\n", "dim", ":", "List", "[", "int", "]", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Similar to np.roll but applies to PyTorch Tensors.\n\n    Args:\n        x: A PyTorch tensor.\n        shift: Amount to roll.\n        dim: Which dimension to roll.\n\n    Returns:\n        Rolled version of x.\n    \"\"\"", "\n", "if", "len", "(", "shift", ")", "!=", "len", "(", "dim", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"len(shift) must match len(dim)\"", ")", "\n", "\n", "", "for", "(", "s", ",", "d", ")", "in", "zip", "(", "shift", ",", "dim", ")", ":", "\n", "        ", "x", "=", "roll_one_dim", "(", "x", ",", "s", ",", "d", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.fftshift": [[118, 141], ["enumerate", "fftc.roll", "range", "len", "x.dim", "x.dim"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["", "def", "fftshift", "(", "x", ":", "torch", ".", "Tensor", ",", "dim", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.fftshift but applies to PyTorch Tensors\n\n    Args:\n        x: A PyTorch tensor.\n        dim: Which dimension to fftshift.\n\n    Returns:\n        fftshifted version of x.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "# this weird code is necessary for toch.jit.script typing", "\n", "        ", "dim", "=", "[", "0", "]", "*", "(", "x", ".", "dim", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "x", ".", "dim", "(", ")", ")", ":", "\n", "            ", "dim", "[", "i", "]", "=", "i", "\n", "\n", "# also necessary for torch.jit.script", "\n", "", "", "shift", "=", "[", "0", "]", "*", "len", "(", "dim", ")", "\n", "for", "i", ",", "dim_num", "in", "enumerate", "(", "dim", ")", ":", "\n", "        ", "shift", "[", "i", "]", "=", "x", ".", "shape", "[", "dim_num", "]", "//", "2", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.fftc.ifftshift": [[143, 166], ["enumerate", "fftc.roll", "range", "len", "x.dim", "x.dim"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["", "def", "ifftshift", "(", "x", ":", "torch", ".", "Tensor", ",", "dim", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.ifftshift but applies to PyTorch Tensors\n\n    Args:\n        x: A PyTorch tensor.\n        dim: Which dimension to ifftshift.\n\n    Returns:\n        ifftshifted version of x.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "# this weird code is necessary for toch.jit.script typing", "\n", "        ", "dim", "=", "[", "0", "]", "*", "(", "x", ".", "dim", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "x", ".", "dim", "(", ")", ")", ":", "\n", "            ", "dim", "[", "i", "]", "=", "i", "\n", "\n", "# also necessary for torch.jit.script", "\n", "", "", "shift", "=", "[", "0", "]", "*", "len", "(", "dim", ")", "\n", "for", "i", ",", "dim_num", "in", "enumerate", "(", "dim", ")", ":", "\n", "        ", "shift", "[", "i", "]", "=", "(", "x", ".", "shape", "[", "dim_num", "]", "+", "1", ")", "//", "2", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss": [[13, 27], ["torch.sqrt"], "function", ["None"], ["def", "rss", "(", "data", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "0", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS).\n\n    RSS is computed assuming that dim is the coil dimension.\n\n    Args:\n        data: The input tensor\n        dim: The dimensions along which to apply the RSS transform\n\n    Returns:\n        The RSS value.\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss_complex": [[29, 43], ["torch.sqrt", "fastmri.complex_abs_sq().sum", "fastmri.complex_abs_sq"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs_sq"], ["", "def", "rss_complex", "(", "data", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "0", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS) for complex inputs.\n\n    RSS is computed assuming that dim is the coil dimension.\n\n    Args:\n        data: The input tensor\n        dim: The dimensions along which to apply the RSS transform\n\n    Returns:\n        The RSS value.\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "fastmri", ".", "complex_abs_sq", "(", "data", ")", ".", "sum", "(", "dim", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.utils.save_reconstructions": [[15, 32], ["out_dir.mkdir", "reconstructions.items", "h5py.File", "hf.create_dataset"], "function", ["None"], ["def", "save_reconstructions", "(", "reconstructions", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "out_dir", ":", "Path", ")", ":", "\n", "    ", "\"\"\"\n    Save reconstruction images.\n\n    This function writes to h5 files that are appropriate for submission to the\n    leaderboard.\n\n    Args:\n        reconstructions: A dictionary mapping input filenames to corresponding\n            reconstructions.\n        out_dir: Path to the output directory where the reconstructions should\n            be saved.\n    \"\"\"", "\n", "out_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "for", "fname", ",", "recons", "in", "reconstructions", ".", "items", "(", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "out_dir", "/", "fname", ",", "\"w\"", ")", "as", "hf", ":", "\n", "            ", "hf", ".", "create_dataset", "(", "\"reconstruction\"", ",", "data", "=", "recons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.utils.convert_fnames_to_v2": [[34, 50], ["path.glob", "path.exists", "ValueError", "fname.rename"], "function", ["None"], ["", "", "", "def", "convert_fnames_to_v2", "(", "path", ":", "Path", ")", ":", "\n", "    ", "\"\"\"\n    Converts filenames to conform to `v2` standard for knee data.\n\n    For a file with name file1000.h5 in `path`, this script simply renames it\n    to file1000_v2.h5. This is for submission to the public knee leaderboards.\n\n    Args:\n        path: Path with files to be renamed.\n    \"\"\"", "\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Path does not exist\"", ")", "\n", "\n", "", "for", "fname", "in", "path", ".", "glob", "(", "\"*.h5\"", ")", ":", "\n", "        ", "if", "not", "fname", ".", "name", "[", "-", "6", ":", "]", "==", "\"_v2.h5\"", ":", "\n", "            ", "fname", ".", "rename", "(", "path", "/", "(", "fname", ".", "stem", "+", "\"_v2.h5\"", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.losses.SSIMLoss.__init__": [[18, 31], ["torch.Module.__init__", "losses.SSIMLoss.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "win_size", ":", "int", "=", "7", ",", "k1", ":", "float", "=", "0.01", ",", "k2", ":", "float", "=", "0.03", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            win_size: Window size for SSIM calculation.\n            k1: k1 parameter for SSIM calculation.\n            k2: k2 parameter for SSIM calculation.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "k1", ",", "self", ".", "k2", "=", "k1", ",", "k2", "\n", "self", ".", "register_buffer", "(", "\"w\"", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "win_size", ",", "win_size", ")", "/", "win_size", "**", "2", ")", "\n", "NP", "=", "win_size", "**", "2", "\n", "self", ".", "cov_norm", "=", "NP", "/", "(", "NP", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.losses.SSIMLoss.forward": [[32, 65], ["isinstance", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "S.mean"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "Tensor", ",", "\n", "Y", ":", "torch", ".", "Tensor", ",", "\n", "data_range", ":", "torch", ".", "Tensor", ",", "\n", "reduced", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "assert", "isinstance", "(", "self", ".", "w", ",", "torch", ".", "Tensor", ")", "\n", "\n", "data_range", "=", "data_range", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "C1", "=", "(", "self", ".", "k1", "*", "data_range", ")", "**", "2", "\n", "C2", "=", "(", "self", ".", "k2", "*", "data_range", ")", "**", "2", "\n", "ux", "=", "F", ".", "conv2d", "(", "X", ",", "self", ".", "w", ")", "# typing: ignore", "\n", "uy", "=", "F", ".", "conv2d", "(", "Y", ",", "self", ".", "w", ")", "#", "\n", "uxx", "=", "F", ".", "conv2d", "(", "X", "*", "X", ",", "self", ".", "w", ")", "\n", "uyy", "=", "F", ".", "conv2d", "(", "Y", "*", "Y", ",", "self", ".", "w", ")", "\n", "uxy", "=", "F", ".", "conv2d", "(", "X", "*", "Y", ",", "self", ".", "w", ")", "\n", "vx", "=", "self", ".", "cov_norm", "*", "(", "uxx", "-", "ux", "*", "ux", ")", "\n", "vy", "=", "self", ".", "cov_norm", "*", "(", "uyy", "-", "uy", "*", "uy", ")", "\n", "vxy", "=", "self", ".", "cov_norm", "*", "(", "uxy", "-", "ux", "*", "uy", ")", "\n", "A1", ",", "A2", ",", "B1", ",", "B2", "=", "(", "\n", "2", "*", "ux", "*", "uy", "+", "C1", ",", "\n", "2", "*", "vxy", "+", "C2", ",", "\n", "ux", "**", "2", "+", "uy", "**", "2", "+", "C1", ",", "\n", "vx", "+", "vy", "+", "C2", ",", "\n", ")", "\n", "D", "=", "B1", "*", "B2", "\n", "S", "=", "(", "A1", "*", "A2", ")", "/", "D", "\n", "\n", "if", "reduced", ":", "\n", "            ", "return", "1", "-", "S", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "1", "-", "S", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.ssim_loss_mixin.SSIM.__init__": [[15, 22], ["torch.nn.Module.__init__", "ssim_loss_mixin.SSIM.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "win_size", "=", "7", ",", "k1", "=", "0.01", ",", "k2", "=", "0.03", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win_size", "=", "win_size", "\n", "self", ".", "k1", ",", "self", ".", "k2", "=", "k1", ",", "k2", "\n", "self", ".", "register_buffer", "(", "'w'", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "win_size", ",", "win_size", ")", "/", "win_size", "**", "2", ")", "\n", "NP", "=", "win_size", "**", "2", "\n", "self", ".", "cov_norm", "=", "NP", "/", "(", "NP", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.ssim_loss_mixin.SSIM.forward": [[23, 42], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "S.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ",", "data_range", ")", ":", "\n", "        ", "data_range", "=", "data_range", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "C1", "=", "(", "self", ".", "k1", "*", "data_range", ")", "**", "2", "\n", "C2", "=", "(", "self", ".", "k2", "*", "data_range", ")", "**", "2", "\n", "\n", "ux", "=", "F", ".", "conv2d", "(", "X", ",", "self", ".", "w", ")", "\n", "uy", "=", "F", ".", "conv2d", "(", "Y", ",", "self", ".", "w", ")", "\n", "uxx", "=", "F", ".", "conv2d", "(", "X", "*", "X", ",", "self", ".", "w", ")", "\n", "uyy", "=", "F", ".", "conv2d", "(", "Y", "*", "Y", ",", "self", ".", "w", ")", "\n", "uxy", "=", "F", ".", "conv2d", "(", "X", "*", "Y", ",", "self", ".", "w", ")", "\n", "\n", "vx", "=", "self", ".", "cov_norm", "*", "(", "uxx", "-", "ux", "*", "ux", ")", "\n", "vy", "=", "self", ".", "cov_norm", "*", "(", "uyy", "-", "uy", "*", "uy", ")", "\n", "vxy", "=", "self", ".", "cov_norm", "*", "(", "uxy", "-", "ux", "*", "uy", ")", "\n", "A1", ",", "A2", ",", "B1", ",", "B2", "=", "(", "2", "*", "ux", "*", "uy", "+", "C1", ",", "2", "*", "vxy", "+", "C2", ",", "ux", "**", "2", "+", "uy", "**", "2", "+", "C1", ",", "vx", "+", "vy", "+", "C2", ")", "\n", "D", "=", "B1", "*", "B2", "\n", "S", "=", "(", "A1", "*", "A2", ")", "/", "D", "\n", "return", "S", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.ssim_loss_mixin.SSIMLossMixin.loss_setup": [[45, 50], ["SSIM().to", "super().loss_setup", "ssim_loss_mixin.SSIM"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.loss_setup"], ["    ", "def", "loss_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "ssim", "=", "SSIM", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "ssim_l1_coefficient", "=", "args", ".", "ssim_l1_coefficient", "\n", "\n", "super", "(", ")", ".", "loss_setup", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.ssim_loss_mixin.SSIMLossMixin.training_loss": [[51, 66], ["ssim_loss_mixin.SSIMLossMixin.predict", "[].float().to", "data.transforms.center_crop_to_smallest", "torch.l1_loss", "torch.l1_loss", "ssim_loss_mixin.SSIMLossMixin.unnorm", "ssim_loss_mixin.SSIMLossMixin.unnorm", "ssim_loss.add", "ssim_loss_mixin.SSIMLossMixin.ssim", "[].float"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.predict", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.unnorm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.unnorm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim"], ["", "def", "training_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "output", ",", "target", "=", "self", ".", "predict", "(", "batch", ")", "\n", "max_value", "=", "batch", "[", "'attrs_dict'", "]", "[", "'max'", "]", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", ",", "target", "=", "transforms", ".", "center_crop_to_smallest", "(", "output", ",", "target", ")", "\n", "l1_loss", "=", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "output_", "=", "self", ".", "unnorm", "(", "output", ",", "batch", ")", "\n", "target_", "=", "self", ".", "unnorm", "(", "target", ",", "batch", ")", "\n", "ssim_loss", "=", "1", "-", "self", ".", "ssim", "(", "output_", ",", "target_", ",", "data_range", "=", "max_value", ")", "\n", "loss", "=", "ssim_loss", ".", "add", "(", "l1_loss", ",", "alpha", "=", "self", ".", "ssim_l1_coefficient", ")", "\n", "loss_dict", "=", "{", "\n", "'train_loss'", ":", "loss", ",", "\n", "'ssim_loss'", ":", "ssim_loss", ",", "\n", "'l1_loss'", ":", "l1_loss", ",", "\n", "}", "\n", "return", "loss_dict", ",", "output", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.transform_mixin.TransformMixin.transform_setup": [[14, 27], ["common.subsample.mask_factory", "common.subsample.mask_factory", "transforms.load", "transforms.load.", "transforms.load.", "super().transform_setup", "transforms.orientation.Orientation"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.mask_factory", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.mask_factory", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.transform_setup"], ["    ", "def", "transform_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "train_mask", "=", "mask_factory", "(", "args", ".", "mask_type", ",", "args", ".", "train_num_low_frequencies", ",", "args", ".", "train_accelerations", ")", "\n", "dev_mask", "=", "mask_factory", "(", "args", ".", "mask_type", ",", "args", ".", "num_low_frequencies", ",", "args", ".", "accelerations", ")", "\n", "\n", "Transform", "=", "transforms", ".", "load", "(", "args", ".", "data_transform", ")", "\n", "\n", "self", ".", "dev_transform", "=", "Transform", "(", "args", ",", "dev_mask", ",", "partition", "=", "'val'", ",", "use_seed", "=", "True", ")", "\n", "self", ".", "train_transform", "=", "Transform", "(", "args", ",", "train_mask", ",", "partition", "=", "'train'", ")", "\n", "\n", "if", "args", ".", "orientation_augmentation", ":", "\n", "            ", "self", ".", "train_transform", "=", "Orientation", "(", "after", "=", "self", ".", "train_transform", ",", "args", "=", "args", ")", "\n", "\n", "", "super", "(", ")", ".", "transform_setup", "(", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.learning_rate_mixin.LearningRateMixin.start_of_epoch_hook": [[12, 58], ["enumerate", "super().start_of_epoch_hook", "logging.info", "Exception"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.start_of_epoch_hook"], ["    ", "def", "start_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "momentum", "=", "args", ".", "momentum", "\n", "decay", "=", "args", ".", "decay", "\n", "\n", "if", "args", ".", "lr_reduction", "==", "\"default\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "75", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"none\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"60-90\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "60", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "90", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"58\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "58", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"80-120\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "80", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "120", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"150-225\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "150", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "225", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"40-50-55\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "40", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "50", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "55", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"50-55-58\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "50", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "55", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "58", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"linear\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.985", "**", "epoch", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"every20\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "20", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"every40\"", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "40", ")", ")", "\n", "", "elif", "args", ".", "lr_reduction", "==", "\"rampupto\"", ":", "\n", "            ", "if", "epoch", "==", "0", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "else", ":", "\n", "                ", "lr", "=", "args", ".", "lr", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"Lr scheme not recognised: {args.lr_reduction}\"", ")", "\n", "\n", "", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "if", "'group_scaling'", "not", "in", "param_group", ":", "\n", "                ", "param_group", "[", "'group_scaling'", "]", "=", "1.0", "\n", "\n", "", "group_lr", "=", "lr", "*", "param_group", "[", "'group_scaling'", "]", "\n", "param_group", "[", "'lr'", "]", "=", "group_lr", "\n", "#param_group['momentum'] = momentum", "\n", "#param_group['weight_decay'] = decay", "\n", "logging", ".", "info", "(", "f\"Group {i} Learning rate: {group_lr} momentum: {momentum} decay: {decay}\"", ")", "\n", "\n", "", "super", "(", ")", ".", "start_of_epoch_hook", "(", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.initial_setup": [[22, 25], ["super().initial_setup"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.initial_setup"], ["    ", "def", "initial_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "initial_setup", "(", "args", ")", "\n", "self", ".", "example_idx", "=", "3", "# From display loader", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.start_of_epoch_hook": [[26, 33], ["super().start_of_epoch_hook", "visualization_mixin.VisualizationMixin.visualize_dev", "visualization_mixin.VisualizationMixin.visualize_data_transform"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.start_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.visualize_dev", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.visualize_data_transform"], ["", "def", "start_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "==", "0", "and", "self", ".", "args", ".", "visual_first_epoch", ":", "\n", "            ", "self", ".", "visualize_dev", "(", "epoch", ")", "\n", "if", "not", "self", ".", "args", ".", "is_distributed", ":", "\n", "                ", "self", ".", "visualize_data_transform", "(", ")", "\n", "\n", "", "", "super", "(", ")", ".", "start_of_epoch_hook", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.end_of_epoch_hook": [[34, 39], ["super().end_of_epoch_hook", "visualization_mixin.VisualizationMixin.visualize_dev"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.visualize_dev"], ["", "def", "end_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ".", "short_epochs", "or", "(", "self", ".", "args", ".", "short_epochs", "and", "epoch", "%", "5", "==", "0", ")", ":", "\n", "            ", "self", ".", "visualize_dev", "(", "epoch", "+", "1", ")", "#Start indexing at 1", "\n", "\n", "", "super", "(", ")", ".", "end_of_epoch_hook", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.quantiles": [[40, 44], ["x.flatten().to().numpy", "numpy.quantile", "x.flatten().to", "x.flatten"], "methods", ["None"], ["", "def", "quantiles", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_np", "=", "x", ".", "flatten", "(", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "qs", "=", "np", ".", "quantile", "(", "x_np", ",", "(", "0.001", ",", "0.01", ",", "0.1", ",", "0.9", ",", "0.99", ",", "0.999", ")", ")", "\n", "return", "\", \"", ".", "join", "(", "[", "f\"{q:+1.1e}\"", "for", "q", "in", "qs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.visualize_dev": [[45, 161], ["visualization_mixin.VisualizationMixin.model.eval", "logging.debug", "torch.no_grad", "enumerate", "logging.debug", "sys.stdout.flush", "torch.zeros().to.cpu", "torch.zeros_like.cpu", "torch.abs", "gc.collect", "logging.debug", "sys.stdout.flush", "image_dir.mkdir", "logging.debug", "range", "gc.collect", "common.image_grid.grid", "gc.collect", "logging.info", "sys.stdout.flush", "logging.debug", "gc.collect", "visualization_mixin.VisualizationMixin.predict", "data.transforms.center_crop_or_pad", "data.transforms.center_crop_or_pad", "range", "logging.debug", "gc.collect", "visualization_mixin.VisualizationMixin.save_images", "gc.collect", "logging.debug", "visualization_mixin.VisualizationMixin.save_images", "gc.collect", "logging.debug", "visualization_mixin.VisualizationMixin.save_images", "torch.zeros_like.cpu", "visualization_mixin.VisualizationMixin.save_images", "gc.collect", "logging.debug", "grid_images[].cpu().numpy", "grid_recons[].cpu().numpy", "losses[].append", "losses[].append", "losses[].append", "torch.min", "torch.max", "image_blocks.append", "common.image_grid.grid.save", "logging.info", "logging.info", "logging.info", "logging.debug", "logging.debug", "torch.zeros().to", "torch.zeros_like", "torch.zeros_like", "logging.debug", "logging.debug", "data.transforms.center_crop_or_pad.data[].float", "data.transforms.center_crop_or_pad.data[].float", "fastmri.common.evaluate.nmse", "fastmri.common.evaluate.ssim", "fastmri.common.evaluate.mse", "data.transforms.complex_abs().squeeze", "data.transforms.root_sum_of_squares().unsqueeze", "data.transforms.center_crop_or_pad", "data.transforms.center_crop_or_pad.data[].float", "grid_images[].cpu", "grid_recons[].cpu", "grid_path.resolve", "torch.zeros", "data.transforms.center_crop_or_pad.std", "data.transforms.center_crop_or_pad.std", "data.transforms.center_crop_or_pad.min", "data.transforms.center_crop_or_pad.min", "data.transforms.center_crop_or_pad.max", "data.transforms.center_crop_or_pad.max", "visualization_mixin.VisualizationMixin.quantiles", "visualization_mixin.VisualizationMixin.quantiles", "data.transforms.complex_abs", "data.transforms.root_sum_of_squares", "data.transforms.ifft2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.image_grid.grid", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.predict", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_or_pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_or_pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.save_images", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.save_images", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.save_images", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.save_images", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.nmse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_or_pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.quantiles", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.quantiles", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2"], ["", "def", "visualize_dev", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "grid_size", "=", "self", ".", "args", ".", "display_count", "\n", "if", "grid_size", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "logging", ".", "debug", "(", "\"Saving visualizations ...\"", ")", "\n", "images_processed", "=", "0", "\n", "\n", "grid_recons", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "display_loader", ")", ":", "\n", "                ", "logging", ".", "debug", "(", "f\"Processing batch_idx: {batch_idx}\"", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "output", ",", "target", "=", "self", ".", "predict", "(", "batch", ")", "\n", "target", "=", "transforms", ".", "center_crop_or_pad", "(", "target", ",", "\n", "(", "self", ".", "args", ".", "resolution_height", ",", "self", ".", "args", ".", "resolution_width", ")", ")", "\n", "output", "=", "transforms", ".", "center_crop_or_pad", "(", "output", ",", "\n", "(", "self", ".", "args", ".", "resolution_height", ",", "self", ".", "args", ".", "resolution_width", ")", ")", "\n", "\n", "if", "batch_idx", "==", "self", ".", "example_idx", ":", "\n", "                    ", "logging", ".", "info", "(", "f\"output std: {output.std()} target std {target.std()}\"", ")", "\n", "logging", ".", "info", "(", "f\"output min: {output.min()} target min {target.min()}\"", ")", "\n", "logging", ".", "info", "(", "f\"output max: {output.max()} target max {target.max()}\"", ")", "\n", "logging", ".", "debug", "(", "f\"output (0.1, 1, 10, 90, 99, 99.9): {self.quantiles(output)}\"", ")", "\n", "logging", ".", "debug", "(", "f\"target (0.1, 1, 10, 90, 99, 99.9): {self.quantiles(target)}\"", ")", "\n", "\n", "", "if", "grid_recons", "is", "None", ":", "\n", "                    ", "grid_recons", "=", "torch", ".", "zeros", "(", "grid_size", ",", "output", ".", "shape", "[", "1", "]", ",", "\n", "output", ".", "shape", "[", "2", "]", ",", "output", ".", "shape", "[", "3", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grid_images", "=", "torch", ".", "zeros_like", "(", "grid_recons", ")", "\n", "grid_iffts", "=", "torch", ".", "zeros_like", "(", "grid_recons", ")", "\n", "logging", ".", "debug", "(", "f\"Built grid\"", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "logging", ".", "debug", "(", "f\"j: {j}\"", ")", "\n", "if", "images_processed", ">=", "grid_size", ":", "\n", "                        ", "break", "\n", "", "grid_recons", "[", "images_processed", ",", "...", "]", "=", "output", ".", "data", "[", "j", ",", "...", "]", ".", "float", "(", ")", "\n", "grid_images", "[", "images_processed", ",", "...", "]", "=", "target", ".", "data", "[", "j", ",", "...", "]", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "display_ifft", ":", "\n", "                        ", "masked_kspace", "=", "batch", "[", "'input'", "]", "\n", "ifft_abs", "=", "transforms", ".", "complex_abs", "(", "transforms", ".", "ifft2", "(", "masked_kspace", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "masked_image", "=", "transforms", ".", "root_sum_of_squares", "(", "ifft_abs", ")", ".", "unsqueeze", "(", "0", ")", "\n", "masked_image", "=", "transforms", ".", "center_crop_or_pad", "(", "masked_image", ",", "\n", "(", "self", ".", "args", ".", "resolution_height", ",", "self", ".", "args", ".", "resolution_width", ")", ")", "\n", "grid_iffts", "[", "images_processed", ",", "...", "]", "=", "masked_image", ".", "data", "[", "j", ",", "...", "]", ".", "float", "(", ")", "\n", "\n", "", "images_processed", "+=", "1", "\n", "\n", "", "", "logging", ".", "debug", "(", "f\"Copying visual images to cpu\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "grid_recons", "=", "grid_recons", ".", "cpu", "(", ")", "\n", "grid_images", "=", "grid_images", ".", "cpu", "(", ")", "\n", "grid_errors", "=", "torch", ".", "abs", "(", "grid_recons", "-", "grid_images", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "rank", "==", "0", ":", "# Only master task does visual", "\n", "                ", "logging", ".", "debug", "(", "f\"Saving target\"", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "self", ".", "save_images", "(", "grid_images", ",", "'Target'", ",", "epoch", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "logging", ".", "debug", "(", "f\"Saving reconstruction\"", ")", "\n", "self", ".", "save_images", "(", "grid_recons", ",", "'Reconstruction'", ",", "epoch", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "logging", ".", "debug", "(", "f\"Saving errors\"", ")", "\n", "self", ".", "save_images", "(", "grid_errors", ",", "'Error'", ",", "epoch", ")", "\n", "\n", "", "logging", ".", "debug", "(", "f\"Sent images to tensorboard and saved.\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "display_ifft", "and", "self", ".", "args", ".", "rank", "==", "0", ":", "\n", "                ", "grid_iffts", "=", "grid_iffts", ".", "cpu", "(", ")", "\n", "self", ".", "save_images", "(", "grid_iffts", ",", "'Ifft'", ",", "epoch", ")", "\n", "\n", "", "image_dir", "=", "self", ".", "exp_dir", "/", "\"grids\"", "\n", "image_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "image_blocks", "=", "[", "]", "\n", "logging", ".", "debug", "(", "f\"Building grid ...\"", ")", "\n", "losses", "=", "{", "'NMSE'", ":", "[", "]", ",", "'SSIM'", ":", "[", "]", ",", "'MSE'", ":", "[", "]", "}", "\n", "for", "i", "in", "range", "(", "images_processed", ")", ":", "\n", "                ", "gc", ".", "collect", "(", ")", "\n", "logging", ".", "debug", "(", "f\"i: {i}\"", ")", "\n", "gtnp", "=", "grid_images", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "prednp", "=", "grid_recons", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "losses", "[", "'NMSE'", "]", ".", "append", "(", "evaluate", ".", "nmse", "(", "gtnp", ",", "prednp", ")", ")", "\n", "losses", "[", "'SSIM'", "]", ".", "append", "(", "evaluate", ".", "ssim", "(", "gtnp", ",", "prednp", ")", ")", "\n", "losses", "[", "'MSE'", "]", ".", "append", "(", "evaluate", ".", "mse", "(", "gtnp", ",", "prednp", ")", ")", "\n", "\n", "gt", "=", "grid_images", "[", "i", "]", "\n", "shift", "=", "torch", ".", "min", "(", "gt", ")", "\n", "scale", "=", "torch", ".", "max", "(", "gt", "-", "shift", ")", "\n", "\n", "image_blocks", ".", "append", "(", "(", "\n", "(", "grid_images", "[", "i", "]", "-", "shift", ")", "/", "scale", ",", "\n", "(", "grid_recons", "[", "i", "]", "-", "shift", ")", "/", "scale", ",", "\n", "0.5", "+", "4", "*", "(", "grid_errors", "[", "i", "]", "/", "scale", ")", ")", "+", "\n", "(", "(", "(", "grid_iffts", "[", "i", "]", "-", "shift", ")", "/", "scale", ",", ")", "if", "self", ".", "args", ".", "display_ifft", "else", "(", ")", ")", "\n", ")", "\n", "\n", "", "del", "gt", "\n", "del", "gtnp", "\n", "del", "prednp", "\n", "del", "grid_images", "\n", "gc", ".", "collect", "(", ")", "\n", "grid_pil", "=", "image_grid", ".", "grid", "(", "image_blocks", ",", "losses", "=", "losses", ",", "runinfo", "=", "self", ".", "runinfo", ")", "\n", "del", "image_blocks", "\n", "gc", ".", "collect", "(", ")", "\n", "grid_path", "=", "image_dir", "/", "f\"epoch{epoch:03}.png\"", "\n", "if", "self", ".", "args", ".", "rank", "==", "0", ":", "\n", "                ", "grid_pil", ".", "save", "(", "grid_path", ",", "format", "=", "\"PNG\"", ")", "\n", "", "logging", ".", "info", "(", "f\"Saved image grid to {grid_path.resolve()}\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.save_images": [[162, 169], ["image.float.float.float", "torchvision.utils.make_grid", "visualization_mixin.VisualizationMixin.tensorboard.add_image", "image.float.float.min", "image.float.float.max"], "methods", ["None"], ["", "", "def", "save_images", "(", "self", ",", "image", ",", "tag", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "tensorboard", ":", "\n", "            ", "image", "=", "image", ".", "float", "(", ")", "\n", "image", "=", "image", "-", "image", ".", "min", "(", ")", "\n", "image", "=", "image", "/", "image", ".", "max", "(", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "image", ",", "nrow", "=", "4", ",", "pad_value", "=", "1", ")", "\n", "self", ".", "tensorboard", ".", "add_image", "(", "tag", ",", "grid", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.visualization_mixin.VisualizationMixin.visualize_data_transform": [[170, 205], ["logging.debug", "sys.stdout.flush", "torch.no_grad", "enumerate", "visualization_mixin.VisualizationMixin.preprocess_data", "input[].transpose().contiguous().view", "torchvision.utils.make_grid", "torchvision.utils.make_grid.mul_().add_().clamp_().permute().to().numpy", "PIL.Image.fromarray", "logging.info", "sys.stdout.flush", "input.dim", "PIL.Image.fromarray.save", "input[].transpose().contiguous", "torchvision.utils.make_grid.mul_().add_().clamp_().permute().to", "grid_path.resolve", "input[].transpose", "torchvision.utils.make_grid.mul_().add_().clamp_().permute", "torchvision.utils.make_grid.mul_().add_().clamp_", "torchvision.utils.make_grid.mul_().add_", "torchvision.utils.make_grid.mul_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "", "def", "visualize_data_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            Just save to disk the raw input data for an example instance.\n            The two complex numbers are shown side-by-side, and the channel\n            dimension is stacked vertically in order.\n        \"\"\"", "\n", "logging", ".", "debug", "(", "\"Saving out raw input grid\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "bidx", ",", "batch", "in", "enumerate", "(", "self", ".", "display_loader", ")", ":", "\n", "                ", "if", "bidx", "==", "self", ".", "example_idx", ":", "\n", "                    ", "break", "\n", "", "", "input", ",", "*", "_", "=", "self", ".", "preprocess_data", "(", "batch", ")", "\n", "\n", "# If the input has a slice dimension, take the first slice", "\n", "if", "input", ".", "dim", "(", ")", "==", "6", ":", "\n", "                ", "input", "=", "input", "[", ":", ",", "0", ",", "...", "]", "\n", "\n", "# Only plot input data that is complex valued", "\n", "", "if", "input", ".", "shape", "[", "-", "1", "]", "!=", "2", ":", "\n", "                ", "return", "\n", "\n", "", "req_shape", "=", "(", "input", ".", "shape", "[", "1", "]", "*", "2", ",", "1", ",", "input", ".", "shape", "[", "2", "]", ",", "input", ".", "shape", "[", "3", "]", ")", "\n", "channels", "=", "input", "[", "0", ",", ":", ",", "None", ",", "...", "]", ".", "transpose", "(", "1", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "req_shape", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "channels", ",", "nrow", "=", "2", ",", "padding", "=", "2", ",", "normalize", "=", "True", ")", "\n", "grid_np", "=", "grid", ".", "mul_", "(", "255", ")", ".", "add_", "(", "0.5", ")", ".", "clamp_", "(", "0", ",", "255", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "to", "(", "'cpu'", ",", "torch", ".", "uint8", ")", ".", "numpy", "(", ")", "\n", "grid_pil", "=", "Image", ".", "fromarray", "(", "grid_np", ")", "\n", "\n", "grid_path", "=", "self", ".", "exp_dir", "/", "\"grids\"", "/", "f\"raw_grid.png\"", "\n", "if", "self", ".", "args", ".", "rank", "==", "0", ":", "\n", "                ", "grid_pil", ".", "save", "(", "grid_path", ",", "format", "=", "\"PNG\"", ")", "\n", "", "logging", ".", "info", "(", "f\"Saved raw input grid to {grid_path.resolve()}\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.initial_setup": [[38, 73], ["super().initial_setup", "logging.info", "torch.load", "logging.info", "torch.load", "signal.signal", "signal.signal", "logging.info", "os.getpid", "os.path.isfile", "checkpointing_mixin.CheckpointingMixin.model_path.exists", "logging.info", "logging.info", "logging.info", "torch.load", "os.remove"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.initial_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load"], ["def", "initial_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "initial_setup", "(", "args", ")", "\n", "\n", "self", ".", "runinfo_path", "=", "self", ".", "exp_dir", "/", "\"current_runinfo.pkl\"", "\n", "self", ".", "model_path", "=", "self", ".", "exp_dir", "/", "'current_model.mdl'", "\n", "\n", "if", "args", ".", "checkpoint_type", "==", "\"resume\"", ":", "\n", "            ", "logging", ".", "info", "(", "f\"RESUMING from checkpoint {args.checkpoint}\"", ")", "\n", "self", ".", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "", "if", "args", ".", "checkpoint_type", "==", "\"restart\"", ":", "\n", "            ", "logging", ".", "info", "(", "f\"RESTARTING from checkpoint {args.checkpoint}\"", ")", "\n", "self", ".", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "# Check for partial job as well", "\n", "            ", "if", "self", ".", "model_path", ".", "exists", "(", ")", "and", "args", ".", "auto_requeue", ":", "\n", "                ", "logging", ".", "info", "(", "\"\"", ")", "\n", "logging", ".", "info", "(", "f\"FOUND model file in working directory, resuming ...\"", ")", "\n", "logging", ".", "info", "(", "\"\"", ")", "\n", "self", ".", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "args", ".", "checkpoint_type", "=", "\"resume\"", "\n", "\n", "\n", "# Set up signal handler to detect Slurm signals", "\n", "", "", "if", "args", ".", "auto_requeue", ":", "#and 'SLURM_NODEID' in os.environ:", "\n", "            ", "signal", ".", "signal", "(", "signal", ".", "SIGUSR1", ",", "self", ".", "requeueHandler", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "self", ".", "termHandler", ")", "\n", "logging", ".", "info", "(", "'Signal handler installed for automatic requeuing'", ")", "\n", "self", ".", "MAIN_PID", "=", "os", ".", "getpid", "(", ")", "\n", "self", ".", "HALT_filename", "=", "'HALT'", "\n", "self", ".", "SIGNAL_RECEIVED", "=", "False", "\n", "'''Halt file is used as a sign of job completionself.\n            Make sure no HALT file left from previous runs.\n            '''", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "HALT_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "HALT_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.model_setup": [[74, 92], ["super().model_setup", "checkpointing_mixin.CheckpointingMixin.model.load_state_dict", "range", "checkpointing_mixin.CheckpointingMixin.model.load_state_dict", "len", "model_state_dict.popitem", "k.find", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.model_setup"], ["", "", "", "def", "model_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "model_setup", "(", "args", ")", "\n", "if", "args", ".", "checkpoint_type", "==", "\"resume\"", "or", "args", ".", "checkpoint_type", "==", "\"restart\"", ":", "\n", "            ", "model_state_dict", "=", "self", ".", "checkpoint", "[", "'model'", "]", "\n", "#model_state_dict = remove_prefix_from_model(self.checkpoint['model'])", "\n", "# Should be compatible with models that do and do not use dataparallel", "\n", "try", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "model_state_dict", ",", "strict", "=", "True", ")", "\n", "", "except", ":", "\n", "                ", "for", "_", "in", "range", "(", "len", "(", "model_state_dict", ")", ")", ":", "\n", "                    ", "k", ",", "v", "=", "model_state_dict", ".", "popitem", "(", "False", ")", "\n", "idx", "=", "k", ".", "find", "(", "'module.'", ")", "\n", "if", "idx", ">=", "0", ":", "\n", "                        ", "newkey", "=", "k", "[", ":", "idx", "]", "+", "k", "[", "idx", "+", "len", "(", "'module.'", ")", ":", "]", "\n", "model_state_dict", "[", "newkey", "]", "=", "v", "\n", "", "else", ":", "\n", "                        ", "model_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "self", ".", "model", ".", "load_state_dict", "(", "model_state_dict", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.optimizer_setup": [[94, 98], ["super().optimizer_setup", "checkpointing_mixin.CheckpointingMixin.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.optimizer_setup"], ["", "", "", "def", "optimizer_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "optimizer_setup", "(", "args", ")", "\n", "if", "args", ".", "checkpoint_type", "==", "\"resume\"", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "self", ".", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.runinfo_setup": [[99, 112], ["super().runinfo_setup", "checkpointing_mixin.CheckpointingMixin.save_info", "checkpointing_mixin.CheckpointingMixin.save_model", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.runinfo_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.save_info", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.save_model"], ["", "", "def", "runinfo_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "runinfo_setup", "(", "args", ")", "\n", "if", "args", ".", "checkpoint_type", "==", "\"resume\"", ":", "\n", "            ", "self", ".", "runinfo", "=", "self", ".", "checkpoint", "[", "\"runinfo\"", "]", "\n", "# at_epoch is last epoch completed (unless at beginning), so start next one.", "\n", "if", "len", "(", "self", ".", "runinfo", "[", "\"dev_losses\"", "]", ")", ">", "0", ":", "\n", "                ", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", "+=", "1", "\n", "\n", "", "del", "self", ".", "checkpoint", "# keep memory usage down", "\n", "", "else", ":", "\n", "# Save before first epoch so we can resume if preempted early", "\n", "            ", "self", ".", "save_info", "(", ")", "\n", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.end_of_epoch_hook": [[113, 117], ["super().end_of_epoch_hook", "checkpointing_mixin.CheckpointingMixin.save_info", "checkpointing_mixin.CheckpointingMixin.save_model"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.save_info", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.save_model"], ["", "", "def", "end_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "end_of_epoch_hook", "(", "epoch", ")", "\n", "self", ".", "save_info", "(", ")", "\n", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.save_info": [[118, 125], ["logging.info", "open", "pickle.dump", "checkpointing_mixin.CheckpointingMixin.runinfo_path.resolve"], "methods", ["None"], ["", "def", "save_info", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ".", "save_info", "or", "self", ".", "args", ".", "rank", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "with", "open", "(", "self", ".", "runinfo_path", ",", "'wb'", ")", "as", "output", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "runinfo", ",", "output", ")", "\n", "", "logging", ".", "info", "(", "f\"Saved runinfo {self.runinfo_path.resolve()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.save_model": [[126, 136], ["logging.debug", "checkpointing_mixin.CheckpointingMixin.model_path.with_suffix", "torch.save", "checkpointing_mixin.CheckpointingMixin.replace", "logging.info", "checkpointing_mixin.CheckpointingMixin.serialize", "checkpointing_mixin.CheckpointingMixin.model_path.resolve"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.serialize"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ".", "save_model", "or", "self", ".", "args", ".", "rank", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "logging", ".", "debug", "(", "\"Saving model ...\"", ")", "\n", "# Avoid corruption if we crash during save by saving to a tmp and then moving", "\n", "tmp_model_path", "=", "self", ".", "model_path", ".", "with_suffix", "(", "\".mdl.tmp\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "serialize", "(", ")", ",", "f", "=", "tmp_model_path", ")", "\n", "tmp_model_path", ".", "replace", "(", "self", ".", "model_path", ")", "\n", "logging", ".", "info", "(", "f\"Saved model {self.model_path.resolve()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.termHandler": [[137, 144], ["print"], "methods", ["None"], ["", "def", "termHandler", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n         Slurm preemption sends a SIGTERM before the SIGUSR1, to give you a warning\n         that the process is going to be preempted. This needs to be caught, otherwise\n         the process will exit early.\n        \"\"\"", "\n", "print", "(", "\"SIGTERM caught and ignored\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.requeueHandler": [[145, 157], ["print", "os.path.isfile", "time.time", "print", "exit"], "methods", ["None"], ["", "def", "requeueHandler", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n            A USR1 signal is sent by slurm if the timelimit of the job is reached\n            or if the job is about to be preempted\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "print", "(", "'Signal received'", ",", "signum", ",", "time", ".", "time", "(", ")", ",", "flush", "=", "True", ")", "\n", "self", ".", "SIGNAL_RECEIVED", "=", "True", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "HALT_filename", ")", ":", "\n", "            ", "print", "(", "'Job is done, exiting'", ",", "flush", "=", "True", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.trigger_job_requeue": [[158, 179], ["exit", "print", "print", "os.system", "print", "print", "checkpointing_mixin.CheckpointingMixin.barrier", "logging.info", "RuntimeError", "os.getpid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier"], ["", "", "def", "trigger_job_requeue", "(", "self", ")", ":", "\n", "        ", "\"\"\" Submit a new job to resume from checkpoint.\n            No need to checkpoint model or runinfo here since we don't\n            currently support resuming from specific batches/iterations\n            (only from epochs)\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "rank", "==", "0", ":", "\n", "### This ensures that only the main processes (rank 0) requeues the job ", "\n", "            ", "print", "(", "'Time is up, back to SLURM queue'", ",", "flush", "=", "True", ")", "\n", "command", "=", "'scontrol requeue '", "+", "os", ".", "environ", "[", "'SLURM_JOB_ID'", "]", "\n", "print", "(", "command", ")", "\n", "if", "os", ".", "system", "(", "command", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'requeue failed'", ")", "\n", "", "print", "(", "'Job successfully requeued'", ",", "flush", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Non-primary process {os.getpid()} waiting for requeue'", ",", "flush", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "is_distributed", ":", "\n", "            ", "self", ".", "barrier", "(", ")", "\n", "logging", ".", "info", "(", "f\"requeue synced\"", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.start_of_batch_hook": [[180, 184], ["super().start_of_batch_hook", "checkpointing_mixin.CheckpointingMixin.trigger_job_requeue"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_batch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.trigger_job_requeue"], ["", "def", "start_of_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "auto_requeue", "and", "self", ".", "SIGNAL_RECEIVED", ":", "\n", "            ", "self", ".", "trigger_job_requeue", "(", ")", "\n", "", "super", "(", ")", ".", "start_of_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.start_of_test_batch_hook": [[185, 189], ["super().start_of_test_batch_hook", "checkpointing_mixin.CheckpointingMixin.trigger_job_requeue"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_test_batch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.CheckpointingMixin.trigger_job_requeue"], ["", "def", "start_of_test_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "auto_requeue", "and", "self", ".", "SIGNAL_RECEIVED", ":", "\n", "            ", "self", ".", "trigger_job_requeue", "(", ")", "\n", "", "super", "(", ")", ".", "start_of_test_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.checkpointing_mixin.remove_prefix_from_model": [[19, 31], ["all", "next().split", "logging.info", "OrderedDict", "model_state_dict.items", "k.startswith", "next", "model_state_dict.keys", "k.split", "iter", "model_state_dict.keys"], "function", ["None"], ["def", "remove_prefix_from_model", "(", "model_state_dict", ")", ":", "\n", "    ", "prefix", "=", "next", "(", "iter", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", ".", "split", "(", "'.'", ",", "1", ")", "[", "0", "]", "\n", "if", "all", "(", "k", ".", "startswith", "(", "prefix", ")", "for", "k", "in", "model_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Removing model prefix '{prefix}' from checkpoint\"", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "model_state_dict", ".", "items", "(", ")", ":", "\n", "                ", "name", "=", "k", ".", "split", "(", "'.'", ",", "1", ")", "[", "1", "]", "#k[7:] # remove 'module.'", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "return", "model_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.trainer.Trainer.__new__": [[21, 39], ["object.__new__", "cls.__class__", "bases.append", "bases.append", "bases.append", "bases.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.trainer.Trainer.__new__"], ["    ", "def", "__new__", "(", "cls", ",", "args", ")", ":", "\n", "        ", "bases", "=", "[", "]", "\n", "if", "args", ".", "orientation_adversary", ":", "\n", "            ", "bases", ".", "append", "(", "AdversaryMixin", ")", "\n", "", "if", "args", ".", "is_distributed", ":", "\n", "            ", "bases", ".", "append", "(", "DistributedMixin", ")", "\n", "", "if", "args", ".", "ssim_loss", ":", "\n", "            ", "bases", ".", "append", "(", "SSIMLossMixin", ")", "\n", "", "if", "args", ".", "parameter_groups", ":", "\n", "            ", "bases", ".", "append", "(", "ParameterGroupMixin", ")", "\n", "\n", "", "bases", "+=", "[", "VisualizationMixin", ",", "LoggingMixin", ",", "LearningRateMixin", ",", "CheckpointingMixin", ",", "\n", "TransformMixin", ",", "TrainingLoopMixin", ",", "BaseTrainer", "]", "\n", "\n", "trainer", "=", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "cls", "=", "trainer", ".", "__class__", "\n", "trainer", ".", "__class__", "=", "cls", ".", "__class__", "(", "cls", ".", "__name__", ",", "(", "cls", ",", "*", "bases", ")", ",", "{", "}", ")", "\n", "return", "trainer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.TensorboardHandler.__init__": [[17, 21], ["logging.Handler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "writer", ",", "tag", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "tag", "=", "tag", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "emit", "(", "self", ",", "record", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.TensorboardHandler.emit": [[21, 26], ["logging_mixin.TensorboardHandler.format", "logging_mixin.TensorboardHandler.writer.add_text"], "methods", ["None"], ["", "def", "emit", "(", "self", ",", "record", ")", ":", "\n", "        ", "log_entry", "=", "self", ".", "format", "(", "record", ")", "\n", "#tag, text_string, global_step=None, walltime=None", "\n", "if", "self", ".", "writer", ".", "file_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_text", "(", "self", ".", "tag", ",", "log_entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.__init__": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "level", ",", "stream", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "self", ".", "_stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write": [[32, 37], ["logging_mixin.LoggerWriter._stream.write", "logging_mixin.LoggerWriter._stream.flush", "logging_mixin.LoggerWriter.level"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "if", "message", "!=", "'\\n'", ":", "\n", "            ", "self", ".", "level", "(", "message", ")", "\n", "", "self", ".", "_stream", ".", "write", "(", "message", ")", "\n", "self", ".", "_stream", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush": [[38, 41], ["logging_mixin.LoggerWriter.level", "logging_mixin.LoggerWriter._stream.flush"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "level", "(", "\"\"", ")", "\n", "self", ".", "_stream", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.initial_setup": [[43, 88], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "super().initial_setup", "logging.getLogger.setLevel", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "tensorboardX.SummaryWriter", "logging.getLogger.addHandler", "logging.info", "shutil.rmtree", "logging_mixin.LoggingMixin.tensorboard_dir.mkdir", "logging_mixin.TensorboardHandler", "str", "str", "logging_mixin.LoggingMixin.tensorboard_dir.resolve"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.initial_setup"], ["    ", "def", "initial_setup", "(", "self", ",", "args", ")", ":", "\n", "#print(f\"Setting up logging, rank: {args.rank}\")", "\n", "        ", "root", "=", "logging", ".", "getLogger", "(", ")", "\n", "root", ".", "handlers", "=", "[", "]", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "            ", "root", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "            ", "root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s | %(message)s'", ")", "\n", "\n", "# When using distributed training only send a single process to stdout", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "ch", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "root", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# send log to a file as well", "\n", "", "fh", "=", "logging", ".", "FileHandler", "(", "self", ".", "exp_dir", "/", "f'stdout_{args.rank}.log'", ",", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "root", ".", "addHandler", "(", "fh", ")", "\n", "\n", "# For debug messages", "\n", "debugh", "=", "logging", ".", "FileHandler", "(", "self", ".", "exp_dir", "/", "f'debug_{args.rank}.log'", ",", "'w'", ")", "\n", "debugh", ".", "setFormatter", "(", "formatter", ")", "\n", "debugh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "root", ".", "addHandler", "(", "debugh", ")", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "self", ".", "tensorboard_dir", "=", "self", ".", "exp_dir", "/", "'tensorboard'", "\n", "\n", "if", "not", "args", ".", "is_distributed", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "str", "(", "self", ".", "tensorboard_dir", ")", ",", "ignore_errors", "=", "True", ")", "\n", "self", ".", "tensorboard_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "log_dir", "=", "self", ".", "tensorboard_dir", "/", "\"main\"", "\n", "", "else", ":", "\n", "                ", "log_dir", "=", "self", ".", "tensorboard_dir", "/", "f\"node{args.rank:03}\"", "\n", "", "self", ".", "tensorboard", "=", "SummaryWriter", "(", "log_dir", "=", "str", "(", "log_dir", ")", ")", "\n", "root", ".", "addHandler", "(", "TensorboardHandler", "(", "self", ".", "tensorboard", ",", "f\"log{args.rank}\"", ")", ")", "\n", "logging", ".", "info", "(", "f\"Tensorboard logging to {self.tensorboard_dir.resolve()}\"", ")", "\n", "", "self", ".", "global_step", "=", "0", "\n", "super", "(", ")", ".", "initial_setup", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.count_parameters": [[89, 103], ["model.parameters", "param.size", "len"], "methods", ["None"], ["", "def", "count_parameters", "(", "self", ",", "model", ")", ":", "\n", "        ", "nparams", "=", "0", "\n", "group_idx", "=", "0", "\n", "nlayers", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "group_size", "=", "1", "\n", "for", "g", "in", "param", ".", "size", "(", ")", ":", "\n", "                ", "group_size", "*=", "g", "\n", "", "nparams", "+=", "group_size", "\n", "group_idx", "+=", "1", "\n", "if", "len", "(", "param", ".", "shape", ")", ">=", "2", ":", "\n", "                ", "nlayers", "+=", "1", "\n", "\n", "", "", "return", "nparams", ",", "nlayers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.model_setup": [[104, 108], ["super().model_setup", "logging_mixin.LoggingMixin.count_parameters", "logging.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.model_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.count_parameters"], ["", "def", "model_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "model_setup", "(", "args", ")", "\n", "nparams", ",", "nlayers", "=", "self", ".", "count_parameters", "(", "self", ".", "model", ")", "\n", "logging", ".", "info", "(", "f\"Model parameters: {nparams:,} layers: {nlayers}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.start_of_batch_hook": [[109, 112], ["super().start_of_batch_hook"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_batch_hook"], ["", "def", "start_of_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "start_of_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.add_losses_to_tensorboard": [[113, 117], ["losses.items", "logging_mixin.LoggingMixin.tensorboard.add_scalar"], "methods", ["None"], ["", "def", "add_losses_to_tensorboard", "(", "self", ",", "losses", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "tensorboard", ":", "\n", "            ", "for", "loss_key", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "tensorboard", ".", "add_scalar", "(", "loss_key", ",", "loss_value", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.training_loss_hook": [[118, 121], ["super().training_loss_hook", "logging_mixin.LoggingMixin.add_losses_to_tensorboard"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.training_loss_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.add_losses_to_tensorboard"], ["", "", "", "def", "training_loss_hook", "(", "self", ",", "progress", ",", "losses", ",", "logging_epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "training_loss_hook", "(", "progress", ",", "losses", ",", "logging_epoch", ")", "\n", "self", ".", "add_losses_to_tensorboard", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.test_loss_hook": [[122, 125], ["super().test_loss_hook", "logging_mixin.LoggingMixin.add_losses_to_tensorboard"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.test_loss_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.add_losses_to_tensorboard"], ["", "def", "test_loss_hook", "(", "self", ",", "losses", ")", ":", "\n", "        ", "super", "(", ")", ".", "test_loss_hook", "(", "losses", ")", "\n", "self", ".", "add_losses_to_tensorboard", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggingMixin.postrun": [[126, 131], ["logging.info", "logging_mixin.LoggingMixin.tensorboard.close", "logging_mixin.LoggingMixin.tensorboard.export_scalars_to_json", "logging_mixin.LoggingMixin.tensorboard_dir.resolve"], "methods", ["None"], ["", "def", "postrun", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Tensorboard logs at {self.tensorboard_dir.resolve()}\"", ")", "\n", "if", "self", ".", "args", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "tensorboard", ".", "export_scalars_to_json", "(", "self", ".", "exp_dir", "/", "\"json_tensorboard.json\"", ")", "\n", "", "self", ".", "tensorboard", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.start_of_batch_hook": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "start_of_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "\"\"\" Called at the start of each batch \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.midbatch_hook": [[32, 35], ["None"], "methods", ["None"], ["", "def", "midbatch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "\"\"\" Called before backwards(), may be called on sub-batchs \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.start_of_test_batch_hook": [[36, 39], ["None"], "methods", ["None"], ["", "def", "start_of_test_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "\"\"\" Called at the start of each batch \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.end_of_test_epoch_hook": [[40, 43], ["None"], "methods", ["None"], ["", "def", "end_of_test_epoch_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\" Called right at the end of the last test batch \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.training_loss_hook": [[44, 48], ["training_loop_mixin.TrainingLoopMixin.runinfo[].append", "training_loop_mixin.TrainingLoopMixin.runinfo[].append"], "methods", ["None"], ["", "def", "training_loss_hook", "(", "self", ",", "progress", ",", "losses", ",", "logging_epoch", ")", ":", "\n", "        ", "\"\"\" For logging \"\"\"", "\n", "self", ".", "runinfo", "[", "\"epoch\"", "]", ".", "append", "(", "progress", ")", "\n", "self", ".", "runinfo", "[", "\"train_losses\"", "]", ".", "append", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.test_loss_hook": [[49, 52], ["training_loop_mixin.TrainingLoopMixin.runinfo[].append"], "methods", ["None"], ["", "def", "test_loss_hook", "(", "self", ",", "losses", ")", ":", "\n", "        ", "\"\"\" dev_loss is the primary loss. losses is a dictionary of other losses \"\"\"", "\n", "self", ".", "runinfo", "[", "\"dev_losses\"", "]", ".", "append", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.predict": [[53, 57], ["training_loop_mixin.TrainingLoopMixin.preprocess_data", "training_loop_mixin.TrainingLoopMixin.model"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data"], ["", "def", "predict", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "self", ".", "preprocess_data", "(", "batch", ")", "\n", "prediction", "=", "self", ".", "model", "(", "batch", ".", "input", ")", "\n", "return", "prediction", ",", "batch", ".", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.training_loss": [[58, 72], ["training_loop_mixin.TrainingLoopMixin.predict", "fastmri.data.transforms.center_crop_to_smallest", "torch.nn.functional.l1_loss", "torch.any", "torch.any", "torch.isnan", "print", "Exception", "torch.isinf", "print", "Exception"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.predict", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest"], ["", "def", "training_loss", "(", "self", ",", "batch", ")", ":", "\n", "        ", "output", ",", "target", "=", "self", ".", "predict", "(", "batch", ")", "\n", "output", ",", "target", "=", "transforms", ".", "center_crop_to_smallest", "(", "output", ",", "target", ")", "\n", "\n", "if", "self", ".", "args", ".", "nan_detection", ":", "\n", "            ", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "output", ")", ")", ":", "\n", "                ", "print", "(", "output", ")", "\n", "raise", "Exception", "(", "\"nan encountered\"", ")", "\n", "", "if", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "output", ")", ")", ":", "\n", "                ", "print", "(", "output", ")", "\n", "raise", "Exception", "(", "\"inf encountered\"", ")", "\n", "\n", "", "", "loss", "=", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "return", "loss", ",", "output", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.additional_training_loss_terms": [[73, 75], ["None"], "methods", ["None"], ["", "def", "additional_training_loss_terms", "(", "self", ",", "loss_dict", ",", "batch", ",", "prediction", ",", "target", ")", ":", "\n", "        ", "return", "loss_dict", ",", "batch", ",", "prediction", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.unnorm": [[76, 79], ["None"], "methods", ["None"], ["", "def", "unnorm", "(", "self", ",", "output", ",", "batch", ")", ":", "\n", "        ", "mean", ",", "std", "=", "batch", ".", "mean", ",", "batch", ".", "std", "\n", "return", "output", "*", "std", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.run": [[80, 220], ["training_loop_mixin.TrainingLoopMixin.model.train", "timeit.default_timer", "enumerate", "torch.autograd.set_detect_anomaly", "training_loop_mixin.TrainingLoopMixin.start_of_batch_hook", "hasattr", "training_loop_mixin.TrainingLoopMixin.training_loss_hook", "logging.info", "sys.stdout.flush", "training_loop_mixin.TrainingLoopMixin.training_loss", "isinstance", "isinstance", "training_loop_mixin.TrainingLoopMixin.additional_training_loss_terms", "training_loop_mixin.TrainingLoopMixin.midbatch_hook", "training_loop_mixin.TrainingLoopMixin.optimizer.zero_grad", "training_loop_mixin.TrainingLoopMixin.backwards", "training_loop_mixin.TrainingLoopMixin.optimizer.batch_step", "training_loop_mixin.TrainingLoopMixin.optimizer.step", "training_loop_mixin.TrainingLoopMixin.check_for_nan", "loss_gpu.cpu().item", "timeit.default_timer", "logging.info", "print", "logging.debug", "print", "logging.debug", "training_loop_mixin.TrainingLoopMixin.run.batch_closure"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_batch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.training_loss_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.training_loss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.additional_training_loss_terms", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.midbatch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.backwards", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.check_for_nan"], ["", "def", "run", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "nbatches", "=", "self", ".", "nbatches", "\n", "interval", "=", "timer", "(", ")", "\n", "percent_done", "=", "0", "\n", "memory_gb", "=", "0.0", "\n", "avg_losses", "=", "{", "}", "\n", "\n", "if", "self", ".", "args", ".", "nan_detection", ":", "\n", "            ", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "\n", "", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "self", ".", "batch_idx", "=", "batch_idx", "\n", "progress", "=", "epoch", "+", "batch_idx", "/", "nbatches", "\n", "\n", "logging_epoch", "=", "(", "batch_idx", "%", "args", ".", "log_interval", "==", "0", "\n", "or", "batch_idx", "==", "(", "nbatches", "-", "1", ")", ")", "\n", "\n", "self", ".", "start_of_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "\n", "if", "batch_idx", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"Starting batch 0\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "def", "batch_closure", "(", "subbatch", ")", ":", "\n", "                ", "nonlocal", "memory_gb", "\n", "\n", "result", "=", "self", ".", "training_loss", "(", "subbatch", ")", "\n", "\n", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "                    ", "result", ",", "prediction", ",", "target", "=", "result", "\n", "", "else", ":", "\n", "                    ", "prediction", "=", "None", "# For backwards compatibility", "\n", "target", "=", "None", "\n", "\n", "", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "# By default self.training_loss() returns a single tensor", "\n", "                    ", "loss_dict", "=", "{", "'train_loss'", ":", "result", "}", "\n", "", "else", ":", "\n", "# Perceptual loss will return a dict of losses where the main", "\n", "# loss is 'train_loss'. This is for easily logging the parts", "\n", "# composing the loss (eg, perceptual loss + l1)", "\n", "                    ", "loss_dict", "=", "result", "\n", "\n", "", "loss_dict", ",", "_", ",", "_", ",", "_", "=", "self", ".", "additional_training_loss_terms", "(", "\n", "loss_dict", ",", "subbatch", ",", "prediction", ",", "target", ")", "\n", "\n", "loss", "=", "loss_dict", "[", "'train_loss'", "]", "\n", "\n", "# Memory usage is at its maximum right before backprop", "\n", "if", "logging_epoch", "and", "self", ".", "args", ".", "cuda", ":", "\n", "                    ", "memory_gb", "=", "torch", ".", "cuda", ".", "memory_allocated", "(", ")", "/", "1000000000", "\n", "\n", "", "self", ".", "midbatch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "backwards", "(", "loss", ")", "\n", "return", "loss", ",", "loss_dict", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "optimizer", ",", "'batch_step'", ")", ":", "\n", "                ", "loss", ",", "loss_dict", "=", "self", ".", "optimizer", ".", "batch_step", "(", "batch", ",", "batch_closure", "=", "batch_closure", ")", "\n", "", "else", ":", "\n", "                ", "closure", "=", "lambda", ":", "batch_closure", "(", "batch", ")", "\n", "loss", ",", "loss_dict", "=", "self", ".", "optimizer", ".", "step", "(", "closure", "=", "closure", ")", "\n", "\n", "", "if", "args", ".", "debug", ":", "\n", "                ", "self", ".", "check_for_nan", "(", "loss", ")", "\n", "\n", "# Running average of all losses returned", "\n", "\n", "", "for", "name", "in", "loss_dict", ":", "\n", "                ", "loss_gpu", "=", "loss_dict", "[", "name", "]", "\n", "loss_cpu", "=", "loss_gpu", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "loss_dict", "[", "name", "]", "=", "loss_cpu", "\n", "if", "batch_idx", "==", "0", ":", "\n", "                    ", "avg_losses", "[", "name", "]", "=", "loss_cpu", "\n", "", "elif", "batch_idx", "<", "50", ":", "\n", "                    ", "avg_losses", "[", "name", "]", "=", "(", "batch_idx", "*", "avg_losses", "[", "name", "]", "+", "loss_cpu", ")", "/", "(", "batch_idx", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "avg_losses", "[", "name", "]", "=", "0.99", "*", "avg_losses", "[", "name", "]", "+", "0.01", "*", "loss_cpu", "\n", "\n", "", "", "losses", "=", "{", "}", "\n", "for", "name", "in", "loss_dict", ":", "\n", "                ", "losses", "[", "'instantaneous_'", "+", "name", "]", "=", "loss_dict", "[", "name", "]", "\n", "losses", "[", "'average_'", "+", "name", "]", "=", "avg_losses", "[", "name", "]", "\n", "\n", "", "del", "loss_dict", "\n", "#self.runinfo['train_fnames'].append(batch['fname'])", "\n", "self", ".", "training_loss_hook", "(", "progress", ",", "losses", ",", "logging_epoch", ")", "\n", "\n", "del", "losses", "\n", "\n", "if", "logging_epoch", ":", "\n", "                ", "mid", "=", "timer", "(", ")", "\n", "new_percent_done", "=", "100.", "*", "batch_idx", "/", "nbatches", "\n", "percent_change", "=", "new_percent_done", "-", "percent_done", "\n", "percent_done", "=", "new_percent_done", "\n", "if", "percent_done", ">", "0", ":", "\n", "                    ", "inst_estimate", "=", "math", ".", "ceil", "(", "(", "mid", "-", "interval", ")", "/", "(", "percent_change", "/", "100", ")", ")", "\n", "inst_estimate", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "inst_estimate", ")", ")", "\n", "", "else", ":", "\n", "                    ", "inst_estimate", "=", "\"unknown\"", "\n", "\n", "", "logging", ".", "info", "(", "'Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}, inst: {} Mem: {:2.1f}gb'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "nbatches", ",", "\n", "100.", "*", "batch_idx", "/", "nbatches", ",", "loss", ".", "item", "(", ")", ",", "inst_estimate", ",", "\n", "memory_gb", ")", ")", "\n", "interval", "=", "mid", "\n", "\n", "if", "self", ".", "args", ".", "break_early", "is", "not", "None", "and", "percent_done", ">=", "self", ".", "args", ".", "break_early", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "import", "os", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                    ", "with", "os", ".", "popen", "(", "'free -m'", ")", "as", "f", ":", "\n", "                        ", "output", "=", "f", ".", "read", "(", ")", "\n", "", "print", "(", "output", ")", "\n", "logging", ".", "debug", "(", "output", ")", "\n", "", "import", "os", "\n", "import", "psutil", "\n", "msg", "=", "f\"rank: {args.rank} pid: {os.getpid()} rss MB : {psutil.Process().memory_info().rss / 1024 ** 2} vms MB: {psutil.Process().memory_info().vms / 1024 ** 2}\"", "\n", "print", "(", "msg", ")", "\n", "logging", ".", "debug", "(", "msg", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "short_epochs", "and", "batch_idx", "==", "300", ":", "\n", "                ", "break", "\n", "\n", "", "if", "self", ".", "args", ".", "short_epochs", "and", "batch_idx", "==", "11830", "//", "(", "args", ".", "world_size", "*", "5", ")", ":", "\n", "                ", "if", "args", ".", "rank", "==", "0", ":", "\n", "                    ", "with", "os", ".", "popen", "(", "'free -m'", ")", "as", "f", ":", "\n", "                        ", "output", "=", "f", ".", "read", "(", ")", "\n", "", "print", "(", "output", ")", "\n", "logging", ".", "debug", "(", "output", ")", "\n", "\n", "", "msg", "=", "f\"rank: {args.rank} pid: {os.getpid()} rss MB : {psutil.Process().memory_info().rss / 1024 ** 2} vms MB: {psutil.Process().memory_info().vms / 1024 ** 2}\"", "\n", "print", "(", "msg", ")", "\n", "logging", ".", "debug", "(", "msg", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.stats": [[221, 227], ["training_loop_mixin.TrainingLoopMixin.compute_stats", "training_loop_mixin.TrainingLoopMixin.test_loss_hook", "logging.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.compute_stats", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.test_loss_hook"], ["", "", "", "def", "stats", "(", "self", ",", "epoch", ",", "loader", ",", "setname", ")", ":", "\n", "        ", "\"\"\" Overriden when doing distributed training \"\"\"", "\n", "losses", "=", "self", ".", "compute_stats", "(", "epoch", ",", "loader", ",", "setname", ")", "\n", "self", ".", "test_loss_hook", "(", "losses", ")", "\n", "logging", ".", "info", "(", "f'Epoch: {epoch}. losses: {losses}'", ")", "\n", "return", "losses", "[", "\"NMSE\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.compute_stats": [[229, 325], ["training_loop_mixin.TrainingLoopMixin.model.eval", "len", "logging.info", "dict", "collections.defaultdict", "collections.defaultdict", "torch.no_grad", "enumerate", "logging.debug", "training_loop_mixin.TrainingLoopMixin.end_of_test_epoch_hook", "collections.defaultdict", "list().copy", "numpy.argmin", "str", "logging.info", "sys.stdout.flush", "dict.fromkeys", "collections.defaultdict.items", "training_loop_mixin.TrainingLoopMixin.start_of_test_batch_hook", "training_loop_mixin.TrainingLoopMixin.preprocess_data", "training_loop_mixin.TrainingLoopMixin.predict", "training_loop_mixin.TrainingLoopMixin.unnorm", "training_loop_mixin.TrainingLoopMixin.unnorm", "range", "numpy.stack", "numpy.stack", "fastmri.data.transforms.center_crop_to_smallest", "fastmri.common.evaluate.ssim", "ssim_for_acquisition_machine[].append", "ssims.append", "nmse.append", "psnr.append", "len", "nmse.append", "ssims.append", "psnr.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.var", "numpy.min", "slice[].item", "recons[].append", "gts[].append", "fastmri.common.utils.host_memory_usage_in_gb", "log", "sys.stdout.flush", "recons.items", "gts.items", "list", "recons[].squeeze", "gts[].squeeze", "fastmri.common.evaluate.nmse", "fastmri.common.evaluate.psnr", "torch.cuda.memory_allocated", "recons.keys", "output[].float().cpu().numpy", "target[].float().cpu().numpy", "sorted", "sorted", "output[].float().cpu", "target[].float().cpu", "output[].float", "target[].float"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.end_of_test_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_test_batch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.predict", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.unnorm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.unnorm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.host_memory_usage_in_gb", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.nmse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.psnr"], ["", "def", "compute_stats", "(", "self", ",", "epoch", ",", "loader", ",", "setname", ")", ":", "\n", "        ", "\"\"\" This is separate from stats mainly for distributed support\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "ndevbatches", "=", "len", "(", "self", ".", "dev_loader", ")", "\n", "logging", ".", "info", "(", "f\"Evaluating {ndevbatches} batches ...\"", ")", "\n", "\n", "recons", ",", "gts", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "acquisition_machine_by_fname", "=", "dict", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "dev_loader", ")", ":", "\n", "                ", "progress", "=", "epoch", "+", "batch_idx", "/", "ndevbatches", "\n", "logging_epoch", "=", "batch_idx", "%", "args", ".", "log_interval", "==", "0", "\n", "logging_epoch_info", "=", "batch_idx", "%", "(", "2", "*", "args", ".", "log_interval", ")", "==", "0", "\n", "log", "=", "logging", ".", "info", "if", "logging_epoch_info", "else", "logging", ".", "debug", "\n", "\n", "self", ".", "start_of_test_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "\n", "batch", "=", "self", ".", "preprocess_data", "(", "batch", ")", "\n", "output", ",", "target", "=", "self", ".", "predict", "(", "batch", ")", "\n", "output", "=", "self", ".", "unnorm", "(", "output", ",", "batch", ")", "\n", "target", "=", "self", ".", "unnorm", "(", "target", ",", "batch", ")", "\n", "fname", ",", "slice", "=", "batch", ".", "fname", ",", "batch", ".", "slice", "\n", "\n", "for", "i", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "slice_cpu", "=", "slice", "[", "i", "]", ".", "item", "(", ")", "\n", "recons", "[", "fname", "[", "i", "]", "]", ".", "append", "(", "(", "slice_cpu", ",", "output", "[", "i", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "gts", "[", "fname", "[", "i", "]", "]", ".", "append", "(", "(", "slice_cpu", ",", "target", "[", "i", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "acquisition_type", "=", "batch", ".", "attrs_dict", "[", "'acquisition'", "]", "[", "i", "]", "\n", "machine_type", "=", "batch", ".", "attrs_dict", "[", "'system'", "]", "[", "i", "]", "\n", "acquisition_machine_by_fname", "[", "fname", "[", "i", "]", "]", "=", "machine_type", "+", "'_'", "+", "acquisition_type", "\n", "\n", "", "if", "logging_epoch", "or", "batch_idx", "==", "ndevbatches", "-", "1", ":", "\n", "                    ", "gpu_memory_gb", "=", "torch", ".", "cuda", ".", "memory_allocated", "(", ")", "/", "1000000000", "\n", "host_memory_gb", "=", "utils", ".", "host_memory_usage_in_gb", "(", ")", "\n", "log", "(", "f\"Evaluated {batch_idx+1} of {ndevbatches} (GPU Mem: {gpu_memory_gb:2.3f}gb Host Mem: {gpu_memory_gb:2.3f}gb)\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "debug_epoch_stats", ":", "\n", "                    ", "break", "\n", "", "del", "output", ",", "target", ",", "batch", "\n", "\n", "", "logging", ".", "debug", "(", "f\"Finished evaluating\"", ")", "\n", "self", ".", "end_of_test_epoch_hook", "(", ")", "\n", "\n", "recons", "=", "{", "\n", "fname", ":", "np", ".", "stack", "(", "[", "pred", "for", "_", ",", "pred", "in", "sorted", "(", "slice_preds", ")", "]", ")", "\n", "for", "fname", ",", "slice_preds", "in", "recons", ".", "items", "(", ")", "\n", "}", "\n", "gts", "=", "{", "\n", "fname", ":", "np", ".", "stack", "(", "[", "pred", "for", "_", ",", "pred", "in", "sorted", "(", "slice_preds", ")", "]", ")", "\n", "for", "fname", ",", "slice_preds", "in", "gts", ".", "items", "(", ")", "\n", "}", "\n", "\n", "nmse", ",", "psnr", ",", "ssims", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "ssim_for_acquisition_machine", "=", "defaultdict", "(", "list", ")", "\n", "recon_keys", "=", "list", "(", "recons", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "for", "fname", "in", "recon_keys", ":", "\n", "                ", "pred_or", ",", "gt_or", "=", "recons", "[", "fname", "]", ".", "squeeze", "(", "1", ")", ",", "gts", "[", "fname", "]", ".", "squeeze", "(", "1", ")", "\n", "pred", ",", "gt", "=", "transforms", ".", "center_crop_to_smallest", "(", "pred_or", ",", "gt_or", ")", "\n", "del", "pred_or", ",", "gt_or", "\n", "\n", "ssim", "=", "evaluate", ".", "ssim", "(", "gt", ",", "pred", ")", "\n", "acquisition_machine", "=", "acquisition_machine_by_fname", "[", "fname", "]", "\n", "ssim_for_acquisition_machine", "[", "acquisition_machine", "]", ".", "append", "(", "ssim", ")", "\n", "ssims", ".", "append", "(", "ssim", ")", "\n", "nmse", ".", "append", "(", "evaluate", ".", "nmse", "(", "gt", ",", "pred", ")", ")", "\n", "psnr", ".", "append", "(", "evaluate", ".", "psnr", "(", "gt", ",", "pred", ")", ")", "\n", "del", "gt", ",", "pred", "\n", "del", "recons", "[", "fname", "]", ",", "gts", "[", "fname", "]", "\n", "\n", "", "if", "len", "(", "nmse", ")", "==", "0", ":", "\n", "               ", "nmse", ".", "append", "(", "0", ")", "\n", "ssims", ".", "append", "(", "0", ")", "\n", "psnr", ".", "append", "(", "0", ")", "\n", "\n", "", "min_vol_ssim", "=", "np", ".", "argmin", "(", "ssims", ")", "\n", "min_vol", "=", "str", "(", "recon_keys", "[", "min_vol_ssim", "]", ")", "\n", "logging", ".", "info", "(", "f\"Min vol ssims: {min_vol}\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "del", "recons", ",", "gts", "\n", "\n", "acquisition_machine_losses", "=", "dict", ".", "fromkeys", "(", "self", ".", "dev_data", ".", "system_acquisitions", ",", "0", ")", "\n", "for", "key", ",", "value", "in", "ssim_for_acquisition_machine", ".", "items", "(", ")", ":", "\n", "                ", "acquisition_machine_losses", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n", "", "losses", "=", "{", "'NMSE'", ":", "np", ".", "mean", "(", "nmse", ")", ",", "\n", "'PSNR'", ":", "np", ".", "mean", "(", "psnr", ")", ",", "\n", "'SSIM'", ":", "np", ".", "mean", "(", "ssims", ")", ",", "\n", "'SSIM_var'", ":", "np", ".", "var", "(", "ssims", ")", ",", "\n", "'SSIM_min'", ":", "np", ".", "min", "(", "ssims", ")", ",", "\n", "**", "acquisition_machine_losses", "}", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.check_for_nan": [[327, 342], ["training_loop_mixin.TrainingLoopMixin.check_for_nan.check"], "methods", ["None"], ["", "def", "check_for_nan", "(", "self", ",", "loss", ")", ":", "\n", "        ", "def", "check", "(", "x", ",", "desc", ")", ":", "\n", "            ", "result", "=", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "x", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "x", ")", ")", "\n", "if", "result", ":", "\n", "                ", "traceback", ".", "print_stack", "(", "file", "=", "sys", ".", "stdout", ")", "\n", "print", "(", "f\"NaN/Inf detected in {desc}\"", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "", "return", "result", "\n", "\n", "", "check", "(", "loss", ".", "data", ",", "\"loss\"", ")", "\n", "# Check all model parameters, and gradients", "\n", "for", "nm", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "check", "(", "p", ".", "data", ",", "nm", ")", "\n", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "check", "(", "p", ".", "grad", ".", "data", ",", "nm", "+", "\".grad\"", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.presetup": [[31, 81], ["os.getcwd", "int", "int", "print", "sys.stderr.flush", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "print", "sys.stdout.flush", "torch.barrier", "torch.barrier", "torch.barrier", "print", "sys.stdout.flush", "sys.stdout.flush", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "print", "sys.stdout.flush", "print", "os.path.exists", "time.sleep", "print", "sys.stdout.flush", "open", "f.read().rstrip", "f.read", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["    ", "def", "presetup", "(", "self", ",", "args", ")", ":", "\n", "        ", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "\n", "if", "world_size", "<=", "8", ":", "\n", "            ", "tcp_address", "=", "\"localhost\"", "\n", "", "else", ":", "\n", "            ", "tcp_address_file", "=", "f\"{cwd}/tcp_address.txt\"", "\n", "print", "(", "f\"({rank}) Waiting for {tcp_address_file} to exist\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "while", "not", "os", ".", "path", ".", "exists", "(", "tcp_address_file", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "30", ")", "\n", "print", "(", "f\"({rank}) {datetime.datetime.now()} Not found yet\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "with", "open", "(", "tcp_address_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "tcp_address", "=", "f", ".", "read", "(", ")", ".", "rstrip", "(", ")", "\n", "", "", "init_method", "=", "f\"tcp://{tcp_address}:23457\"", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "print", "(", "f\"({rank}) Master address: {init_method}\"", ")", "\n", "\n", "", "print", "(", "f\"({rank}) Waiting on init_process_group ...\"", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "init_method", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ")", "\n", "print", "(", "f\"({rank}) process group setup, syncing\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "print", "(", "f\"({rank}) Synced\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "args", ".", "rank", "=", "rank", "\n", "args", ".", "world_size", "=", "world_size", "\n", "#pdb.set_trace()", "\n", "#torch.cuda.set_device(args.rank)", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "8", "# gpus per machine", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "## Only save to disk on the master process", "\n", "if", "rank", "!=", "0", ":", "\n", "            ", "args", ".", "save_info", "=", "False", "\n", "args", ".", "save_model", "=", "False", "\n", "\n", "", "self", ".", "progress_points", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier": [[82, 90], ["torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "sys.stdout.flush", "sys.stderr.flush", "torch.barrier", "torch.barrier", "torch.barrier", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "sys.stdout.flush", "sys.stderr.flush"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "def", "barrier", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "dist", ".", "barrier", "(", "self", ".", "dist_group", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.model_setup": [[91, 113], ["super().model_setup", "logging.info", "sys.stdout.flush", "distributed_mixin.DistributedMixin.distribute_model_object", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "logging.info", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "logging.debug", "logging.info", "logging.info", "list", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.model_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.distribute_model_object"], ["", "def", "model_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\" The model must be wrapped in a DistributedDataParallel instance\n        \"\"\"", "\n", "super", "(", ")", ".", "model_setup", "(", "args", ")", "\n", "\n", "logging", ".", "info", "(", "\"creating DPP instance\"", ")", "\n", "if", "args", ".", "apex_distributed", ":", "\n", "            ", "logging", ".", "info", "(", "\"Using Apex DPP\"", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"Using Pytorch DPP\"", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "distribute_model_object", "(", "self", ".", "model", ")", "\n", "\n", "grank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "gworld_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "logging", ".", "info", "(", "f\"g rank {grank}, world size: {gworld_size}\"", ")", "\n", "\n", "self", ".", "dist_group", "=", "torch", ".", "distributed", ".", "new_group", "(", "ranks", "=", "list", "(", "range", "(", "args", ".", "world_size", ")", ")", ")", "\n", "grank", "=", "torch", ".", "distributed", ".", "get_rank", "(", "self", ".", "dist_group", ")", "\n", "gworld_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", "self", ".", "dist_group", ")", "\n", "logging", ".", "debug", "(", "f\"dist_group rank {grank}, world size: {gworld_size}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.distribute_model_object": [[114, 123], ["ApexDDP", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["None"], ["", "def", "distribute_model_object", "(", "self", ",", "mdl", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "apex_distributed", ":", "\n", "#TODO: try delay_allreduce=True", "\n", "            ", "from", "apex", ".", "parallel", "import", "DistributedDataParallel", "as", "ApexDDP", "\n", "mdl", "=", "ApexDDP", "(", "mdl", ",", "delay_allreduce", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "mdl", "=", "DDP", "(", "mdl", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "output_device", "=", "args", ".", "gpu", ")", "\n", "", "return", "mdl", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.loader_setup": [[124, 153], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.debug", "logging.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "data.volume_sampler.VolumeSampler"], "methods", ["None"], ["", "def", "loader_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\" A distributed sampler has to be used\n        \"\"\"", "\n", "train_sampler", "=", "DistributedSampler", "(", "self", ".", "train_data", ",", "seed", "=", "args", ".", "seed", ")", "\n", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "\n", "self", ".", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "prefetch_factor", "=", "1", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "drop_last", "=", "True", ")", "\n", "\n", "logging", ".", "debug", "(", "\"Determining batches ...\"", ")", "\n", "self", ".", "nbatches", "=", "len", "(", "train_sampler", ")", "//", "args", ".", "batch_size", "\n", "logging", ".", "info", "(", "\"Distributed train Loader created, batches: {}\"", ".", "format", "(", "self", ".", "nbatches", ")", ")", "\n", "\n", "self", ".", "dev_loader", "=", "DataLoader", "(", "\n", "self", ".", "dev_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "VolumeSampler", "(", "self", ".", "dev_data", ")", ",", "\n", "prefetch_factor", "=", "1", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "args", ".", "pin_memory", ",", "drop_last", "=", "False", ")", "\n", "\n", "### No need to use a distributed sampler for the display loader", "\n", "self", ".", "display_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "display_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "prefetch_factor", "=", "1", ",", "\n", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_batch_hook": [[155, 160], ["super().start_of_batch_hook"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_batch_hook"], ["", "def", "start_of_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "start_of_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "# Tell monitoring process that we are still alive", "\n", "if", "logging_epoch", ":", "\n", "            ", "(", "self", ".", "exp_dir", "/", "\"last_alive\"", ")", ".", "touch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_test_batch_hook": [[161, 175], ["super().start_of_test_batch_hook", "distributed_mixin.DistributedMixin.sync", "round", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_test_batch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.sync"], ["", "", "def", "start_of_test_batch_hook", "(", "self", ",", "progress", ",", "logging_epoch", ")", ":", "\n", "        ", "\"\"\" We add syncronization here just to keep all the processes in lock-step.\n            If you don't sync often enough NCCL can hit a timeout and essentially freeze\n        \"\"\"", "\n", "super", "(", ")", ".", "start_of_test_batch_hook", "(", "progress", ",", "logging_epoch", ")", "\n", "#logging.info(f\"{self.args.rank} progress {progress} rounded: {round(progress % 1.0, 4)}\")", "\n", "progress", "=", "progress", "%", "1.0", "\n", "if", "round", "(", "progress", ",", "4", ")", "==", "0.0", ":", "\n", "# Points [0.1, 0.2, ..., 1.0]", "\n", "# these are poped off the list as the increments are reached.", "\n", "            ", "interval", "=", "20", "\n", "self", ".", "progress_points", "=", "[", "(", "1.0", "/", "interval", ")", "*", "i", "for", "i", "in", "range", "(", "0", ",", "interval", "+", "1", ")", "]", "\n", "\n", "", "self", ".", "sync", "(", "progress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.end_of_test_epoch_hook": [[176, 179], ["super().end_of_test_epoch_hook", "distributed_mixin.DistributedMixin.sync"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.end_of_test_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.sync"], ["", "def", "end_of_test_epoch_hook", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "end_of_test_epoch_hook", "(", ")", "\n", "self", ".", "sync", "(", "progress", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.sync": [[180, 189], ["distributed_mixin.DistributedMixin.progress_points.pop", "len", "logging.debug", "distributed_mixin.DistributedMixin.barrier", "logging.debug", "sys.stdout.flush", "sys.stderr.flush"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "def", "sync", "(", "self", ",", "progress", ")", ":", "\n", "        ", "while", "len", "(", "self", ".", "progress_points", ")", ">", "0", "and", "progress", ">=", "self", ".", "progress_points", "[", "0", "]", ":", "\n", "            ", "point", "=", "self", ".", "progress_points", ".", "pop", "(", "0", ")", "\n", "if", "self", ".", "args", ".", "use_barriers", ":", "\n", "                ", "logging", ".", "debug", "(", "f\"({self.args.rank}) ({progress*100.0:2.2f}%) barrier syncing\"", ")", "\n", "self", ".", "barrier", "(", ")", "\n", "logging", ".", "debug", "(", "\"synced\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.start_of_epoch_hook": [[190, 197], ["super().start_of_epoch_hook", "logging.debug", "distributed_mixin.DistributedMixin.barrier", "logging.debug", "sys.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.start_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "", "", "def", "start_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "start_of_epoch_hook", "(", "epoch", ")", "\n", "if", "self", ".", "args", ".", "use_barriers", ":", "\n", "            ", "logging", ".", "debug", "(", "\"(Start of epoch) waiting at dist barrier for all tasks\"", ")", "\n", "self", ".", "barrier", "(", ")", "\n", "logging", ".", "debug", "(", "\"(Start of epoch) barrier past\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.end_of_epoch_hook": [[198, 205], ["super().end_of_epoch_hook", "logging.debug", "distributed_mixin.DistributedMixin.barrier", "logging.debug", "sys.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "", "def", "end_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "end_of_epoch_hook", "(", "epoch", ")", "\n", "if", "self", ".", "args", ".", "use_barriers", ":", "\n", "            ", "logging", ".", "debug", "(", "\"(End of epoch) waiting at dist barrier for all tasks\"", ")", "\n", "self", ".", "barrier", "(", ")", "\n", "logging", ".", "debug", "(", "\"(End of epoch) barrier past\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.save_model": [[206, 215], ["super().save_model", "logging.debug", "distributed_mixin.DistributedMixin.barrier", "logging.debug", "distributed_mixin.DistributedMixin.barrier"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.save_model", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.barrier"], ["", "", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "\"\"\" Saving can take a while so we need barriers to keep the processes in lock-step\"\"\"", "\n", "if", "self", ".", "args", ".", "use_barriers", ":", "\n", "            ", "logging", ".", "debug", "(", "\"waiting at dist barrier for all tasks (pre-save)\"", ")", "\n", "self", ".", "barrier", "(", ")", "\n", "", "super", "(", ")", ".", "save_model", "(", ")", "\n", "if", "self", ".", "args", ".", "use_barriers", ":", "\n", "            ", "logging", ".", "debug", "(", "\"waiting at dist barrier for all tasks (post-save)\"", ")", "\n", "self", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.stats": [[216, 249], ["distributed_mixin.DistributedMixin.compute_stats", "logging.debug", "sys.stdout.flush", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "enumerate", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "logging.debug", "sys.stdout.flush", "enumerate", "distributed_mixin.DistributedMixin.test_loss_hook", "logging.info", "sys.stdout.flush", "sorted", "sorted", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "distributed_mixin.DistributedMixin.keys", "distributed_mixin.DistributedMixin.keys", "losses_tensor[].item", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.compute_stats", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.training_loop_mixin.TrainingLoopMixin.test_loss_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "", "def", "stats", "(", "self", ",", "epoch", ",", "loader", ",", "setname", ")", ":", "\n", "        ", "\"\"\" We use All-reduce to sync the losses across all the processes \"\"\"", "\n", "losses", "=", "self", ".", "compute_stats", "(", "epoch", ",", "loader", ",", "setname", ")", "\n", "logging", ".", "debug", "(", "f'Epoch: {epoch}. process-local losses: {losses}'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "losses_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "losses", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_dataset_size", "=", "loader", ".", "sampler", ".", "total_size", "\n", "all_local_size", "=", "loader", ".", "sampler", ".", "num_samples", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "sorted", "(", "losses", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "local_size", "=", "all_local_size", "\n", "if", "k", "in", "loader", ".", "sampler", ".", "system_acquisition_local_count", ":", "\n", "                ", "local_size", "=", "loader", ".", "sampler", ".", "system_acquisition_local_count", "[", "k", "]", "\n", "\n", "", "losses_tensor", "[", "i", "]", "=", "losses", "[", "k", "]", "*", "local_size", "\n", "\n", "", "dist", ".", "all_reduce", "(", "losses_tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "logging", ".", "debug", "(", "f'({self.args.rank}) Loss all-reduce complete'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "sorted", "(", "losses", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "dataset_size", "=", "all_dataset_size", "\n", "if", "k", "in", "loader", ".", "sampler", ".", "system_acquisition_total_count", ":", "\n", "                ", "dataset_size", "=", "loader", ".", "sampler", ".", "system_acquisition_total_count", "[", "k", "]", "\n", "\n", "", "losses", "[", "k", "]", "=", "losses_tensor", "[", "i", "]", ".", "item", "(", ")", "/", "dataset_size", "# Average it", "\n", "\n", "", "self", ".", "test_loss_hook", "(", "losses", ")", "\n", "logging", ".", "info", "(", "f'Epoch: {epoch}. losses: {losses}'", ")", "\n", "#print(f'Epoch: {epoch}. losses: {losses}')", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "losses", "[", "\"NMSE\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.parameter_group_mixin.ParameterGroupMixin.parameter_groups_setup": [[16, 37], ["parameter_group_mixin.ParameterGroupMixin.model.parameters", "logging.info", "p.dim", "scalar_group.append", "p.dim", "bias_group.append", "main_group.append", "len", "len", "len"], "methods", ["None"], ["def", "parameter_groups_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "main_group", "=", "[", "]", "\n", "bias_group", "=", "[", "]", "\n", "scalar_group", "=", "[", "]", "\n", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", "==", "0", ":", "\n", "                ", "scalar_group", ".", "append", "(", "p", ")", "\n", "", "elif", "p", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "bias_group", ".", "append", "(", "p", ")", "\n", "#print(p.shape)", "\n", "", "else", ":", "\n", "                ", "main_group", ".", "append", "(", "p", ")", "\n", "\n", "\n", "", "", "self", ".", "parameter_groups", "=", "[", "\n", "{", "'params'", ":", "main_group", "}", ",", "\n", "{", "'params'", ":", "bias_group", ",", "'group_scaling'", ":", "args", ".", "bias_lr_scale", "}", ",", "\n", "{", "'params'", ":", "scalar_group", ",", "'group_scaling'", ":", "args", ".", "bias_lr_scale", "}", "\n", "]", "\n", "logging", ".", "info", "(", "f\"Parameter groups | Main: {len(main_group)} Scalar: {len(scalar_group)} Bias: {len(bias_group)}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.__init__": [[32, 47], ["base_trainer.BaseTrainer.exp_dir.mkdir", "base_trainer.BaseTrainer.presetup", "base_trainer.BaseTrainer.initial_setup", "base_trainer.BaseTrainer.transform_setup", "base_trainer.BaseTrainer.data_setup", "base_trainer.BaseTrainer.loader_setup", "base_trainer.BaseTrainer.model_setup", "base_trainer.BaseTrainer.parameter_groups_setup", "base_trainer.BaseTrainer.optimizer_setup", "base_trainer.BaseTrainer.loss_setup", "base_trainer.BaseTrainer.runinfo_setup"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.presetup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.initial_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.transform_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.data_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.loader_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.model_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.parameter_groups_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.optimizer_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.loss_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.runinfo_setup"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "exp_dir", "=", "args", ".", "exp_dir", "\n", "self", ".", "exp_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "self", ".", "presetup", "(", "args", ")", "\n", "self", ".", "initial_setup", "(", "args", ")", "\n", "self", ".", "transform_setup", "(", "args", ")", "\n", "self", ".", "data_setup", "(", "args", ")", "\n", "self", ".", "loader_setup", "(", "args", ")", "\n", "self", ".", "model_setup", "(", "args", ")", "\n", "self", ".", "parameter_groups_setup", "(", "args", ")", "\n", "self", ".", "optimizer_setup", "(", "args", ")", "\n", "self", ".", "loss_setup", "(", "args", ")", "\n", "self", ".", "runinfo_setup", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.presetup": [[48, 50], ["None"], "methods", ["None"], ["", "def", "presetup", "(", "self", ",", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.transform_setup": [[51, 53], ["None"], "methods", ["None"], ["", "def", "transform_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.initial_setup": [[54, 76], ["logging.info", "logging.info", "logging.info", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "logging.info", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.getpid", "os.getppid"], "methods", ["None"], ["", "def", "initial_setup", "(", "self", ",", "args", ")", ":", "\n", "############", "\n", "        ", "logging", ".", "info", "(", "f\"run pid: {os.getpid()} parent: {os.getppid()}\"", ")", "\n", "logging", ".", "info", "(", "\"#########\"", ")", "\n", "logging", ".", "info", "(", "args", ".", "__dict__", ")", "\n", "logging", ".", "info", "(", "f\"Rank: {args.rank} World_size: {args.world_size}, Run {args.run_name}\"", ")", "\n", "\n", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "logging", ".", "info", "(", "f\"Pytorch version: {torch.__version__}\"", ")", "\n", "logging", ".", "info", "(", "\"Using CUDA: {} CUDA AVAIL: {} #DEVICES: {} VERSION: {}\"", ".", "format", "(", "\n", "args", ".", "cuda", ",", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\n", "torch", ".", "version", ".", "cuda", ")", ")", "\n", "if", "not", "args", ".", "cuda", ":", "\n", "            ", "self", ".", "device", "=", "'cpu'", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "'cuda'", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "", "random", ".", "seed", "(", "args", ".", "seed", ")", "# The seed needs to be constant between processes.", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.data_setup": [[77, 117], ["logging.info", "data.mri_data.SliceData", "data.mri_data.SliceData", "fastmri.common.utils.CallbackDataset", "len", "range", "fastmri.common.utils.CallbackDataset", "list", "base_trainer.BaseTrainer.dev_data.slice_indices_by_size.items", "functools.partial", "len", "functools.partial", "len"], "methods", ["None"], ["", "def", "data_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Creating data objects\"", ")", "\n", "\n", "self", ".", "train_data", "=", "SliceData", "(", "\n", "root", "=", "self", ".", "args", ".", "data_path", "/", "f'{args.challenge}_train'", ",", "\n", "transform", "=", "self", ".", "train_transform", ",", "\n", "args", "=", "self", ".", "args", ",", "\n", ")", "\n", "\n", "val_args", "=", "self", ".", "args", "\n", "val_args", ".", "max_kspace_width", "=", "None", "\n", "val_args", ".", "min_kspace_width", "=", "None", "\n", "val_args", ".", "max_kspace_height", "=", "None", "\n", "val_args", ".", "min_kspace_height", "=", "None", "\n", "val_args", ".", "start_slice", "=", "None", "\n", "val_args", ".", "end_slice", "=", "None", "\n", "val_args", ".", "acquisition_types", "=", "None", "\n", "val_args", ".", "acquisition_systems", "=", "None", "\n", "self", ".", "dev_data", "=", "SliceData", "(", "\n", "root", "=", "self", ".", "args", ".", "data_path", "/", "f'{args.challenge}_val'", ",", "\n", "transform", "=", "self", ".", "dev_transform", ",", "\n", "args", "=", "val_args", ",", "\n", ")", "\n", "\n", "if", "self", ".", "args", ".", "resize_type", "==", "\"none\"", ":", "\n", "# Only display the first size in the dataset.", "\n", "            ", "display_size", ",", "indices", "=", "list", "(", "self", ".", "dev_data", ".", "slice_indices_by_size", ".", "items", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "display_data", "=", "CallbackDataset", "(", "\n", "callback", "=", "functools", ".", "partial", "(", "data_for_index", ",", "self", ".", "dev_data", ",", "indices", ")", ",", "\n", "start", "=", "0", ",", "\n", "end", "=", "len", "(", "indices", ")", ",", "\n", "increment", "=", "len", "(", "indices", ")", "//", "args", ".", "display_count", ")", "\n", "", "else", ":", "\n", "            ", "ndev", "=", "len", "(", "self", ".", "dev_data", ")", "\n", "indices", "=", "range", "(", "0", ",", "ndev", ")", "\n", "self", ".", "display_data", "=", "CallbackDataset", "(", "\n", "callback", "=", "functools", ".", "partial", "(", "data_for_index", ",", "self", ".", "dev_data", ",", "indices", ")", ",", "\n", "start", "=", "0", ",", "\n", "end", "=", "ndev", ",", "\n", "increment", "=", "args", ".", "display_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.loader_setup": [[118, 154], ["logging.info", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "logging.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.debug", "len", "logging.info"], "methods", ["None"], ["", "", "def", "loader_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Creating samplers ...\"", ")", "\n", "train_sampler", "=", "RandomSampler", "(", "self", ".", "train_data", ")", "\n", "dev_sampler", "=", "RandomSampler", "(", "self", ".", "dev_data", ")", "\n", "\n", "\n", "logging", ".", "info", "(", "\"Creating data loaders ...\"", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "train_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "persistent_workers", "=", "False", ",", "\n", ")", "\n", "self", ".", "dev_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "dev_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "sampler", "=", "dev_sampler", ",", "\n", "persistent_workers", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "display_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "display_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "False", ",", "\n", "persistent_workers", "=", "False", ",", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\"Determining batches ...\"", ")", "\n", "self", ".", "nbatches", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "logging", ".", "info", "(", "\"Train Loader created, batches: {}\"", ".", "format", "(", "self", ".", "nbatches", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.model_setup": [[155, 159], ["model.load", "base_trainer.BaseTrainer.model.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load"], ["", "def", "model_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "not", "args", ".", "gan", ":", "\n", "            ", "self", ".", "model", "=", "model", ".", "load", "(", "args", ".", "architecture", ",", "args", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.parameter_groups_setup": [[160, 162], ["base_trainer.BaseTrainer.model.parameters"], "methods", ["None"], ["", "", "def", "parameter_groups_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "parameter_groups", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.optimizer_setup": [[163, 165], ["optimizer.load"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load"], ["", "def", "optimizer_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", ".", "load", "(", "self", ".", "parameter_groups", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.loss_setup": [[166, 168], ["None"], "methods", ["None"], ["", "def", "loss_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.runinfo_setup": [[169, 179], ["None"], "methods", ["None"], ["", "def", "runinfo_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "runinfo", "=", "{", "}", "\n", "self", ".", "runinfo", "[", "\"args\"", "]", "=", "args", "\n", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", "=", "0", "\n", "self", ".", "runinfo", "[", "\"seed\"", "]", "=", "args", ".", "seed", "\n", "self", ".", "runinfo", "[", "\"best_dev_loss\"", "]", "=", "1e9", "\n", "self", ".", "runinfo", "[", "\"epoch\"", "]", "=", "[", "]", "\n", "self", ".", "runinfo", "[", "\"train_losses\"", "]", "=", "[", "]", "\n", "self", ".", "runinfo", "[", "\"train_fnames\"", "]", "=", "[", "]", "\n", "self", ".", "runinfo", "[", "\"dev_losses\"", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.serialize": [[180, 189], ["base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict"], "methods", ["None"], ["", "def", "serialize", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'runinfo'", ":", "self", ".", "runinfo", ",", "\n", "'epoch'", ":", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", ",", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_dev_loss'", ":", "self", ".", "runinfo", "[", "\"best_dev_loss\"", "]", ",", "\n", "'exp_dir'", ":", "self", ".", "exp_dir", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train": [[192, 223], ["timeit.default_timer", "range", "timeit.default_timer", "logging.info", "logging.info", "base_trainer.BaseTrainer.postrun", "logging.info", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "base_trainer.BaseTrainer.start_of_epoch_hook", "timeit.default_timer", "base_trainer.BaseTrainer.run", "sys.stdout.flush", "timeit.default_timer", "logging.info", "logging.info", "base_trainer.BaseTrainer.end_of_epoch_hook", "base_trainer.BaseTrainer.train_loader.sampler.set_epoch", "datetime.timedelta", "datetime.timedelta"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.postrun", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.start_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.spawn_dist.run", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_hook", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.volume_sampler.VolumeSampler.set_epoch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "beginning", "=", "timer", "(", ")", "\n", "args", "=", "self", ".", "args", "\n", "for", "epoch", "in", "range", "(", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", ",", "args", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", "=", "epoch", "\n", "logging", ".", "info", "(", "\"Starting epoch {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "is_distributed", ":", "\n", "                ", "self", ".", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "seed", "=", "self", ".", "runinfo", "[", "\"seed\"", "]", "+", "1031", "*", "epoch", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "self", ".", "start_of_epoch_hook", "(", "epoch", ")", "\n", "\n", "start", "=", "timer", "(", ")", "\n", "self", ".", "run", "(", "epoch", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "logging", ".", "info", "(", "f\"TRAIN Epoch took: {datetime.timedelta(seconds=end-start)}\"", ")", "\n", "logging", ".", "info", "(", "\"\"", ")", "\n", "\n", "self", ".", "end_of_epoch_hook", "(", "epoch", ")", "\n", "\n", "", "end", "=", "timer", "(", ")", "\n", "logging", ".", "info", "(", "f\"Run took: {datetime.timedelta(seconds=end-beginning)}\"", ")", "\n", "logging", ".", "info", "(", "\"FINISHED\"", ")", "\n", "\n", "self", ".", "postrun", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.backwards": [[224, 226], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.backward"], ["", "def", "backwards", "(", "self", ",", "loss", ")", ":", "\n", "        ", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.start_of_epoch_hook": [[227, 231], ["base_trainer.BaseTrainer.stats", "logging.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.stats"], ["", "def", "start_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "eval_at_start", "and", "self", ".", "args", ".", "evaluate", ":", "\n", "            ", "dev_loss", "=", "self", ".", "stats", "(", "epoch", ",", "self", ".", "dev_loader", ",", "\"Dev\"", ")", "\n", "logging", ".", "info", "(", "f\"EVAL Loss: {dev_loss}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_hook": [[232, 234], ["base_trainer.BaseTrainer.end_of_epoch_eval_hook"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_eval_hook"], ["", "", "def", "end_of_epoch_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "end_of_epoch_eval_hook", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.end_of_epoch_eval_hook": [[235, 250], ["logging.info", "timeit.default_timer", "base_trainer.BaseTrainer.stats", "timeit.default_timer", "logging.info", "min", "math.isnan", "math.isinf", "logging.info", "base_trainer.BaseTrainer.postrun", "sys.exit", "datetime.timedelta"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.distributed_mixin.DistributedMixin.stats", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.postrun"], ["", "def", "end_of_epoch_eval_hook", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "evaluate", ":", "\n", "            ", "logging", ".", "info", "(", "\"Starting evaluation\"", ")", "\n", "start", "=", "timer", "(", ")", "\n", "dev_loss", "=", "self", ".", "stats", "(", "epoch", ",", "self", ".", "dev_loader", ",", "\"Dev\"", ")", "\n", "end", "=", "timer", "(", ")", "\n", "logging", ".", "info", "(", "f\"EVAL Loss: {dev_loss} time: {datetime.timedelta(seconds=end-start)}\"", ")", "\n", "\n", "if", "math", ".", "isnan", "(", "dev_loss", ")", "or", "math", ".", "isinf", "(", "dev_loss", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"NaN or Inf detected, ending training\"", ")", "\n", "self", ".", "postrun", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "is_new_best", "=", "dev_loss", "<", "self", ".", "runinfo", "[", "\"best_dev_loss\"", "]", "\n", "self", ".", "runinfo", "[", "\"best_dev_loss\"", "]", "=", "min", "(", "self", ".", "runinfo", "[", "\"best_dev_loss\"", "]", ",", "dev_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.postrun": [[251, 253], ["None"], "methods", ["None"], ["", "", "def", "postrun", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data_tensor": [[254, 257], ["t.to"], "methods", ["None"], ["", "def", "preprocess_data_tensor", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\" Override to cast \"\"\"", "\n", "return", "t", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data": [[258, 280], ["hasattr", "isinstance", "collections.OrderedDict", "tensors.items", "collections.namedtuple", "collections.namedtuple.", "isinstance", "isinstance", "collections.OrderedDict.keys", "base_trainer.BaseTrainer.preprocess_data_tensor", "base_trainer.BaseTrainer.preprocess_data_tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data_tensor"], ["", "def", "preprocess_data", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "\"\"\" Called on a batch returned by a dataloader, to do things like\n            .cuda() and .half etc., Should be idempotent.\n            Calls preprocess_data_tensor on tensors\n        \"\"\"", "\n", "if", "hasattr", "(", "tensors", ",", "'_fields'", ")", ":", "\n", "# Skip if already processed to a named tuple", "\n", "            ", "return", "tensors", "\n", "", "elif", "isinstance", "(", "tensors", ",", "dict", ")", ":", "\n", "            ", "ts", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "t", "in", "tensors", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "ts", "[", "k", "]", "=", "self", ".", "preprocess_data_tensor", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "ts", "[", "k", "]", "=", "t", "\n", "# Convert to a named tuple", "\n", "", "", "BatchTuple", "=", "namedtuple", "(", "'Batch'", ",", "ts", ".", "keys", "(", ")", ")", "\n", "return", "BatchTuple", "(", "**", "ts", ")", "\n", "", "elif", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "preprocess_data_tensor", "(", "tensors", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.data_for_index": [[283, 285], ["None"], "function", ["None"], ["", "", "", "def", "data_for_index", "(", "dev_data", ",", "indices", ",", "x", ")", ":", "\n", "    ", "return", "dev_data", "[", "indices", "[", "x", "]", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.run.run": [[18, 47], ["isinstance", "Args().parse_args.trainer_class.rsplit", "importlib.import_module", "getattr", "getattr.", "Args().parse_args", "Args().parse_args", "TrainerClass.eval", "TrainerClass.train", "logging.exception", "print", "print", "sys.stdout.flush", "sys.stderr.flush", "logging.shutdown", "traceback.format_exc", "Args", "Args"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["def", "run", "(", "args", "=", "None", ")", ":", "\n", "    ", "from", ".", "args", "import", "Args", "\n", "\n", "try", ":", "\n", "        ", "if", "args", "is", "None", ":", "\n", "            ", "args", "=", "Args", "(", ")", ".", "parse_args", "(", ")", "\n", "", "if", "isinstance", "(", "args", ",", "dict", ")", ":", "\n", "            ", "args", "=", "Args", "(", "**", "args", ")", ".", "parse_args", "(", ")", "\n", "\n", "", "module_name", ",", "class_name", "=", "args", ".", "trainer_class", ".", "rsplit", "(", "\".\"", ",", "1", ")", "\n", "mdl", "=", "importlib", ".", "import_module", "(", "module_name", ",", "\"fastmri\"", ")", "\n", "TrainerClass", "=", "getattr", "(", "mdl", ",", "class_name", ")", "\n", "\n", "trainer", "=", "TrainerClass", "(", "args", ")", "\n", "if", "args", ".", "eval", ":", "\n", "            ", "trainer", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "trainer", ".", "train", "(", ")", "\n", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "# Hide traceback", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "exception", "(", "\"Uncaught exception (log)\"", ")", "\n", "print", "(", "\"Uncaught exception (print)\"", ")", "\n", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "logging", ".", "shutdown", "(", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.spawn_dist.work": [[26, 33], ["str", "str", "run_task"], "function", ["None"], ["def", "work", "(", "info", ")", ":", "\n", "    ", "rank", ",", "ntasks", ",", "args", "=", "info", "\n", "# This must be imported here, in the child process, not globally.", "\n", "from", ".", "run", "import", "run", "as", "run_task", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "rank", ")", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "run_task", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.spawn_dist.run": [[34, 134], ["isinstance", "print", "os.setpgrp", "multiprocessing.set_start_method", "range", "print", "args.Args().parse_args", "args.Args().parse_args", "multiprocessing.Process", "multiprocessing.Process.start", "processses.append", "print", "sys.stdout.flush", "enumerate", "range", "enumerate", "print", "sys.stdout.flush", "sys.exit", "signal.signal", "signal.signal", "signal.signal", "signal.signal", "signal.signal", "time.sleep", "any", "len", "subprocess.Popen", "multiprocessing.Process.is_alive", "any", "multiprocessing.Process.is_alive", "print", "enumerate", "print", "enumerate", "print", "spawn_dist.run.terminate"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.flush"], ["", "def", "run", "(", "args", "=", "None", ",", "ntasks", "=", "None", ")", ":", "\n", "    ", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "Args", "(", ")", ".", "parse_args", "(", ")", "\n", "", "if", "isinstance", "(", "args", ",", "dict", ")", ":", "\n", "        ", "args", "=", "Args", "(", "**", "args", ")", ".", "parse_args", "(", ")", "\n", "\n", "# Some automatic ntask settings code", "\n", "", "if", "ntasks", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "devices", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "\n", "ntasks", "=", "len", "(", "devices", ".", "split", "(", "','", ")", ")", "\n", "", "except", ":", "\n", "            ", "try", ":", "\n", "                ", "ntasks", "=", "int", "(", "os", ".", "popen", "(", "\"nvidia-smi -L | wc -l\"", ")", ".", "read", "(", ")", ")", "\n", "", "except", ":", "\n", "                ", "ntasks", "=", "2", "\n", "\n", "", "", "", "print", "(", "f\"ntasks: {ntasks}\"", ")", "\n", "\n", "args", ".", "is_distributed", "=", "True", "\n", "# Temp ignore for bug in pytorch dataloader, it leaks semaphores", "\n", "os", ".", "environ", "[", "'PYTHONWARNINGS'", "]", "=", "'ignore:semaphore_tracker:UserWarning,ignore::UserWarning'", "\n", "\n", "# Make this process the head of a process group.", "\n", "os", ".", "setpgrp", "(", ")", "\n", "\n", "# Most important line in this file. CUDA fails horribly if we use the default fork", "\n", "multiprocessing", ".", "set_start_method", "(", "'forkserver'", ")", "\n", "\n", "processses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ntasks", ")", ":", "\n", "        ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "work", ",", "args", "=", "[", "(", "i", ",", "ntasks", ",", "args", ")", "]", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "if", "args", ".", "strace", ":", "\n", "# Addtional Monitoring process", "\n", "            ", "subprocess", ".", "Popen", "(", "[", "\"strace\"", ",", "\"-tt\"", ",", "\n", "\"-o\"", ",", "f\"{args.exp_dir}/strace_{i}.log\"", ",", "\n", "\"-e\"", ",", "\"trace=write\"", ",", "\"-s256\"", ",", "\n", "\"-p\"", ",", "f\"{p.pid}\"", "]", ")", "\n", "\n", "", "processses", ".", "append", "(", "p", ")", "\n", "\n", "", "def", "terminate", "(", "signum", ",", "frame", ")", ":", "\n", "# Try terminate first", "\n", "        ", "print", "(", "\"terminating child processes\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "processses", ")", ":", "\n", "            ", "if", "p", ".", "is_alive", "(", ")", ":", "\n", "                ", "p", ".", "terminate", "(", ")", "\n", "\n", "# Wait a little", "\n", "", "", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "            ", "if", "any", "(", "p", ".", "is_alive", "(", ")", "for", "p", "in", "processses", ")", ":", "\n", "                ", "sleep", "(", "0.1", ")", "\n", "\n", "## If they are still alive after that kill -9 them", "\n", "", "", "for", "i", ",", "p", "in", "enumerate", "(", "processses", ")", ":", "\n", "            ", "if", "p", ".", "is_alive", "(", ")", ":", "\n", "                ", "print", "(", "f\"Sending SIGKILL to process {i}\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "os", ".", "kill", "(", "p", ".", "pid", ",", "signal", ".", "SIGKILL", ")", "\n", "\n", "", "", "print", "(", "\"exiting\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "\n", "", "if", "args", ".", "auto_requeue", ":", "\n", "        ", "def", "forward_usr1_signal", "(", "signum", ",", "frame", ")", ":", "\n", "            ", "print", "(", "f\"Received USR1 signal in spawn_dist\"", ",", "flush", "=", "True", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "processses", ")", ":", "\n", "                ", "if", "p", ".", "is_alive", "(", ")", ":", "\n", "                    ", "os", ".", "kill", "(", "p", ".", "pid", ",", "signal", ".", "SIGUSR1", ")", "\n", "\n", "", "", "", "def", "forward_term_signal", "(", "signum", ",", "frame", ")", ":", "\n", "            ", "print", "(", "f\"Received SIGTERM signal in spawn_dist\"", ",", "flush", "=", "True", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "processses", ")", ":", "\n", "                ", "if", "p", ".", "is_alive", "(", ")", ":", "\n", "                    ", "os", ".", "kill", "(", "p", ".", "pid", ",", "signal", ".", "SIGTERM", ")", "\n", "\n", "# For requeing we need to ignore SIGTERM, and forward USR1", "\n", "", "", "", "signal", ".", "signal", "(", "signal", ".", "SIGUSR1", ",", "forward_usr1_signal", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "forward_term_signal", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "terminate", ")", "\n", "\n", "", "else", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "terminate", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "terminate", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "sleep", "(", "0.5", ")", "\n", "if", "any", "(", "not", "p", ".", "is_alive", "(", ")", "for", "p", "in", "processses", ")", ":", "\n", "            ", "print", "(", "\"Detected an exited process, so exiting main\"", ")", "\n", "terminate", "(", "None", ",", "None", ")", "\n", "# for i, p in enumerate(processses):", "\n", "#     if not p.is_alive():", "\n", "#         print(f\"process {i} dead\")", "\n", "\n", "", "", "print", "(", "\"DONE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.__init__": [[20, 376], ["argparse.ArgumentParser.__init__", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.set_defaults", "args.Args.set_defaults", "os.getpid", "os.getcwd", "pathlib.Path.cwd"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "overrides", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "overrides", "=", "overrides", "\n", "\n", "self", ".", "add_argument", "(", "'--run_name'", ",", "default", "=", "\"run\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--tensorboard'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--debug'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Additional debug logging/checks. Very slow.\"", ")", "\n", "self", ".", "add_argument", "(", "'--strace'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Monitor stdout using strace, for detailed logging of distributed runs\"", ")", "\n", "self", ".", "add_argument", "(", "\"--trainer_class\"", ",", "default", "=", "\"fastmri.trainer.Trainer\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "\"--architecture\"", ",", "default", "=", "\"public_unet.unet\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--gan'", ",", "dest", "=", "'gan'", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--eval'", ",", "dest", "=", "'eval'", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--copy_data_to_scratch'", ",", "dest", "=", "'copy_data_to_scratch'", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--override_with_runinfo_args'", ",", "type", "=", "Path", ",", "default", "=", "None", ",", "\n", "help", "=", "'If specified, override the args with the ones given in the provided runinfo file'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--resize_type'", ",", "default", "=", "\"crop\"", ",", "choices", "=", "[", "\"none\"", ",", "\"crop\"", ",", "\"pad\"", ",", "'singlebatch'", "]", ",", "\n", "help", "=", "'How to scale the images to the given resolution'", ")", "\n", "self", ".", "add_argument", "(", "\"--data_transform\"", ",", "default", "=", "\"rss.RSSDataTransform\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--resolution_width'", ",", "default", "=", "320", ",", "type", "=", "int", ",", "help", "=", "'Resolution width of images'", ")", "\n", "self", ".", "add_argument", "(", "'--resolution_height'", ",", "default", "=", "320", ",", "type", "=", "int", ",", "help", "=", "'Resolution height of images'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--grappa_input'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Should you use Grappa for input'", ")", "\n", "self", ".", "add_argument", "(", "'--grappa_input_path'", ",", "type", "=", "Path", ",", "default", "=", "None", ",", "help", "=", "'Path to grappa kernels'", ")", "\n", "self", ".", "add_argument", "(", "'--grappa_path'", ",", "type", "=", "Path", ",", "default", "=", "None", ",", "help", "=", "'Path to grappa kernels'", ")", "\n", "self", ".", "add_argument", "(", "'--grappa_target'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Should you use 2x grappa for the ground truth'", ")", "\n", "self", ".", "add_argument", "(", "'--grappa_target_path'", ",", "type", "=", "Path", ",", "default", "=", "None", ",", "help", "=", "'Path to grappa kernels'", ")", "\n", "self", ".", "add_argument", "(", "'--apply_grappa'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Should you use Grappa in the kspace model'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--display_ifft'", ",", "dest", "=", "\"display_ifft\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--challenge'", ",", "choices", "=", "[", "'singlecoil'", ",", "'multicoil'", "]", ",", "default", "=", "\"multicoil\"", ",", "\n", "help", "=", "'Which challenge'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--magnet'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "Path", ",", "default", "=", "\"/datasets01_101/fastMRI/112718\"", ",", "\n", "help", "=", "'Path to challenge dataset'", ")", "\n", "self", ".", "add_argument", "(", "'--sample_rate'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'Fraction of total volumes to include'", ")", "\n", "self", ".", "add_argument", "(", "'--calculate_offsets_directly'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Ignore acq start/end info in metadata and just calculate directly\"", ")", "\n", "self", ".", "add_argument", "(", "'--min_kspace_width'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--max_kspace_width'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--min_kspace_height'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--max_kspace_height'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--min_target_width'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--min_target_height'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--max_target_width'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--max_target_height'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--start_slice'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--end_slice'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--only_square_targets'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "self", ".", "add_argument", "(", "'--filter_acceleration'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Filter input data that has accelerated by the given amount\"", ")", "\n", "self", ".", "add_argument", "(", "'--max_num_coils'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--min_num_coils'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--scale_inputs'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--scale_type'", ",", "type", "=", "str", ",", "default", "=", "'mean'", ")", "\n", "self", ".", "add_argument", "(", "'--acquisition_types'", ",", "nargs", "=", "'*'", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--acquisition_systems'", ",", "nargs", "=", "'*'", ",", "default", "=", "None", ",", "help", "=", "\"Choices: ['Avanto', 'TrioTim', 'Skyra', 'Aera', 'Biograph_mMR', 'Prisma_fit']\"", ")", "\n", "self", ".", "add_argument", "(", "'--coil_compress_coils'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "\n", "# var net args", "\n", "self", ".", "add_argument", "(", "'--method-str'", ",", "help", "=", "'The main model is build from this string in var_net.var_net'", ")", "\n", "self", ".", "add_argument", "(", "'--sens-method-str'", ",", "help", "=", "'The sensitivty maps model is build from this string in var_net.var_net'", ")", "\n", "self", ".", "add_argument", "(", "'--norm'", ",", "choices", "=", "(", "'layer'", ",", "'instance'", ",", "'group'", ")", ",", "default", "=", "'group'", ",", "help", "=", "'Normalization of the unets in var_net.var_net'", ")", "\n", "self", ".", "add_argument", "(", "'--norm-type'", ",", "choices", "=", "(", "'layer'", ",", "'instance'", ",", "'group'", ")", ",", "default", "=", "'group'", ")", "\n", "self", ".", "add_argument", "(", "'--norm-mean'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "add_argument", "(", "'--norm-std'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "add_argument", "(", "'--kernel-size'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'Kernel size in convolutions in var_net.var_net'", ")", "\n", "self", ".", "add_argument", "(", "'--sqrt-eps'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'Number to add before calling .sqrt() in var_net.var_net'", ")", "\n", "self", ".", "add_argument", "(", "'--var_net_model'", ",", "type", "=", "str", ",", "default", "=", "'unet'", ",", "help", "=", "'The UNet model used in var net'", ")", "\n", "self", ".", "add_argument", "(", "'--compute_sensitivities'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "# Mask parameters", "\n", "self", ".", "add_argument", "(", "'--accelerations'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "4", "]", ",", "type", "=", "int", ",", "\n", "help", "=", "'Ratio of k-space columns to be sampled. If multiple values are '", "\n", "'provided, then one of those is chosen uniformly at random for '", "\n", "'each volume.'", ")", "\n", "self", ".", "add_argument", "(", "'--num_low_frequencies'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "28", "]", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of low-frequency k-space columns to be sampled. Should '", "\n", "'have the same length as accelerations'", ")", "\n", "self", ".", "add_argument", "(", "'--train_accelerations'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "4", "]", ",", "type", "=", "int", ",", "\n", "help", "=", "'Equivalent to --accelerations but for train set'", ")", "\n", "self", ".", "add_argument", "(", "'--train_num_low_frequencies'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "28", "]", ",", "type", "=", "int", ",", "\n", "help", "=", "'Equivalent to --num_low_frequencies but for train st'", ")", "\n", "self", ".", "add_argument", "(", "'--mask_type'", ",", "default", "=", "\"equispaced\"", ",", "choices", "=", "[", "\"equispaced\"", ",", "\"random\"", ",", "\"random_fraction\"", ",", "\"magic\"", "]", ",", "\n", "help", "=", "'The strategy used to mask k-space inputs'", ")", "\n", "\n", "#### Data augmentations", "\n", "self", ".", "add_argument", "(", "'--transforms_on_gpu'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Do data transforms on the gpu when possible\"", ")", "\n", "self", ".", "add_argument", "(", "'--padding_augmentation'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of levels of padding augmentation to randomly sample from\"", ")", "\n", "self", ".", "add_argument", "(", "'--rotation_augmentation'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--elastic_augmentation'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--orientation_augmentation'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--orientation_augmentation_dev'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--debug_phase_direction'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "\"For debugging only\"", ")", "\n", "self", ".", "add_argument", "(", "'--add_gibbs_artifacts_augmentation'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Add false Gibbs artifacts to the image\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--resize_min_width'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Input is resized in image space to if less wide than this\"", ")", "\n", "self", ".", "add_argument", "(", "'--resize_max_width'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Input is resized in image space to if wider than this\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "\"Per-gpu batch-size\"", ")", "\n", "self", ".", "add_argument", "(", "'--eval_batch_size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Larger batches can be used during eval as less memory is needed\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "\"Data loader worker count per GPU\"", ")", "\n", "self", ".", "add_argument", "(", "'--pin_memory'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Pin tensors in dataloader. Can cause issues with distributed training\"", ")", "\n", "self", ".", "add_argument", "(", "'--is_distributed'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "\"Distributed training flag (set automatically)\"", ")", "\n", "self", ".", "add_argument", "(", "'--use_barriers'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"During distributed training, keep processes in sync using barriers\"", ")", "\n", "self", ".", "add_argument", "(", "'--sync_params'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Sync paramters between machines each epoch to reduce drift, and diagnose initialization bugs\"", ")", "\n", "self", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Distributed rank (0 for single). Set by environment variable automatically\"", ")", "\n", "self", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Distributed world_size (1 for single). Set by environment variable automatically\"", ")", "\n", "self", ".", "add_argument", "(", "'--apex_distributed'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "\"Use Apex for distributed training\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--apex'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "\"NVIDIA Apex half-prec training\"", ")", "\n", "self", ".", "add_argument", "(", "'--apex_amp'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--apex_loss_scale'", ",", "default", "=", "1e4", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Prevent underflow by scaling the loss internally up by this amount\"", ")", "\n", "self", ".", "add_argument", "(", "'--nan_detection'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Use pytorch's NaN detection mode which is slower but extremely useful for debugging\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--log_interval'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--save_info'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--display_count'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "\n", "help", "=", "\"How many images to save out every epoch for display\"", ")", "\n", "self", ".", "add_argument", "(", "'--visual_first_epoch'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"save image grid visual of untrained model before training begins\"", ")", "\n", "\n", "\n", "self", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'rmsprop'", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.001", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--beta2'", ",", "default", "=", "None", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--adam_eps'", ",", "default", "=", "1e-8", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--decay'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--lr_reduction'", ",", "default", "=", "\"every40\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--parameter_groups'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Split scalar and vector parameters into separate parameter groups\"", ")", "\n", "self", ".", "add_argument", "(", "'--bias_lr_scale'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Scale the learning rate of all scalar/vector model parameters by this amount if --parameter_groups is set\"", ")", "\n", "self", ".", "add_argument", "(", "'--ramp_lr_by'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Start learning rate x times smaller and ramp up\"", ")", "# Not implemented yet", "\n", "self", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--eval_at_start'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Perform DEV set evaluation at the beginning of training\"", ")", "\n", "self", ".", "add_argument", "(", "'--debug_epoch'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Only process one batch each epoch for debugging purposes\"", ")", "\n", "self", ".", "add_argument", "(", "'--debug_epoch_stats'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Only process one batch each stats (eval) epoch for debugging purposes\"", ")", "\n", "self", ".", "add_argument", "(", "'--break_early'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Percentage to break each epoch at\"", ")", "\n", "self", ".", "add_argument", "(", "'--debug_memory'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "'Output memory diagnostics then quit'", ")", "\n", "self", ".", "add_argument", "(", "'--channels'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "\n", "# UNET Settings", "\n", "self", ".", "add_argument", "(", "'--num_chans'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'Number of U-Net channels'", ")", "\n", "self", ".", "add_argument", "(", "'--res_chans'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'Number of U-Net channels'", ")", "\n", "self", ".", "add_argument", "(", "'--num_pools'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Number of U-Net pooling layers'", ")", "\n", "self", ".", "add_argument", "(", "'--drop_prob'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'Dropout probability'", ")", "\n", "self", ".", "add_argument", "(", "'--num_models'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Number of models for cascaded models'", ")", "\n", "self", ".", "add_argument", "(", "'--dilation'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Conv dilation'", ")", "\n", "self", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Num of conv layers'", ")", "\n", "self", ".", "add_argument", "(", "'--groups'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Num of connections between inputs and outputs'", ")", "\n", "\n", "# Initialization", "\n", "self", ".", "add_argument", "(", "'--smart_initialization'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--initialization'", ",", "default", "=", "\"fan_out\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "Path", ",", "default", "=", "Path", ".", "cwd", "(", ")", "/", "\"logs\"", "/", "\"run\"", ",", "\n", "help", "=", "'Path where model and results should be saved'", ")", "\n", "\n", "# Dicom", "\n", "self", ".", "add_argument", "(", "'--dicom'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "'Use dicom dataset rather than challenge'", ")", "\n", "self", ".", "add_argument", "(", "'--dicom_root'", ",", "type", "=", "Path", ",", "default", "=", "\"/checkpoint/jzb/data/mmap\"", ",", "\n", "help", "=", "'Path to dicom dataset'", ")", "\n", "self", ".", "add_argument", "(", "'--dicom_normalization'", ",", "default", "=", "\"volume\"", ",", "choices", "=", "[", "\"volume\"", ",", "\"instance\"", "]", ",", "\n", "help", "=", "'Normalize dicom images by volume or instance mean and std.'", ")", "\n", "self", ".", "add_argument", "(", "'--filter_dicom_scan_type'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "'Filter dicom dataset type by the \"cor\" scan type. These images are closer '", "\n", "'to the challenge dataset.'", ")", "\n", "\n", "# Perecptual loss", "\n", "self", ".", "add_argument", "(", "'--perceptual'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use perceptual loss while training'", ")", "\n", "self", ".", "add_argument", "(", "'--perceptual_loss_normalize'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Prenormalize inputs to the perceptual loss to be mean 0 variance 1\"", ")", "\n", "self", ".", "add_argument", "(", "'--perceptual_loss_architecture'", ",", "type", "=", "str", ",", "\n", "default", "=", "'vgg_bw_perceptual.vgg19bw_features'", ",", "\n", "help", "=", "'Base architecture of the perceptual loss net'", ")", "\n", "self", ".", "add_argument", "(", "'--perceptual_loss_kwargs'", ",", "type", "=", "dict", ",", "default", "=", "{", "}", ",", "\n", "help", "=", "'kwargs passed to the perceptual loss architecture'", ")", "\n", "self", ".", "add_argument", "(", "'--perceptual_loss_checkpoint'", ",", "type", "=", "Path", ",", "\n", "default", "=", "'/checkpoint/mikerabbat/fast_mri/perceptual/pretrained_models/vgg19bw/checkpoint.pt'", ")", "\n", "self", ".", "add_argument", "(", "'--perceptual_loss_cutoff_layer'", ",", "type", "=", "str", ",", "\n", "default", "=", "'relu2_2'", ",", "\n", "help", "=", "'Layer of the base architecture to use as '", "\n", "'features for perceptual loss'", ")", "\n", "self", ".", "add_argument", "(", "'--perceptual_l1_coefficient'", ",", "type", "=", "float", ",", "\n", "default", "=", "0.1", ",", "\n", "help", "=", "'Weight multiplying L1 loss added to perceptual'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--ssim_loss'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use SSIM loss while training'", ")", "\n", "self", ".", "add_argument", "(", "'--ssim_l1_coefficient'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'Weight multiplying L1 loss added to SSIM loss'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--q_loss'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Select a q weighted loss'", ")", "\n", "self", ".", "add_argument", "(", "'--loss_denominator_power'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"q weight for the q_loss, changing relative weighting of low vs high contrast regions\"", ")", "\n", "self", ".", "add_argument", "(", "'--loss_kernel'", ",", "type", "=", "float", ",", "default", "=", "1.5", ",", "\n", "help", "=", "'Gaussian kernel size in pixel stds used for loss calculations'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--gradient_loss'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Penalize differences in the average magnitude of the gradient\"", ")", "\n", "\n", "# DicomWriter", "\n", "self", ".", "add_argument", "(", "'--model_checkpoint'", ",", "default", "=", "None", ",", "type", "=", "Path", ",", "\n", "help", "=", "'Path to the model checkpoint to use for reconstruction'", "\n", "'(Used by DicomWriter)'", ")", "\n", "self", ".", "add_argument", "(", "'--dicom_save_dir'", ",", "default", "=", "None", ",", "type", "=", "Path", ",", "\n", "help", "=", "'Path to the directory where dicoms should be saved'", ")", "\n", "self", ".", "add_argument", "(", "'--save_ground_truth'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "'Whether to save DICOMs of ground truth images (default=False)'", ")", "\n", "self", ".", "add_argument", "(", "'--reconstruct_all'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "'Save DICOMs of reconstructions for every test case.'", "\n", "'Default is to only save the six common test cases'", "\n", "'used in the image review sessions.'", ")", "\n", "self", ".", "add_argument", "(", "'--noise_levels'", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "]", ",", "type", "=", "float", ",", "\n", "help", "=", "'List of noise levels used when producing DICOMS'", ")", "\n", "self", ".", "add_argument", "(", "'--series_number'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'Initial series number (useful when presenting '", "\n", "'multiple methods side-by-side)'", ")", "\n", "self", ".", "add_argument", "(", "'--series_description'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "'Descriptive name for this series'", ")", "\n", "\n", "### Cluster", "\n", "self", ".", "add_argument", "(", "'--checkpoint_type'", ",", "default", "=", "\"none\"", ",", "choices", "=", "[", "\"resume\"", ",", "\"restart\"", ",", "\"none\"", "]", ",", "\n", "help", "=", "'Resume (keeping all runinfo) or restart (keeping only model weights) from a previous '", "\n", "'model checkpoint. \"--checkpoint\" should be set with this'", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Path to an existing checkpoint. Used along with \"--resume\"'", ")", "\n", "self", ".", "add_argument", "(", "'--auto_requeue'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "'If job is killed by slurm, reschedule it'", ")", "\n", "\n", "##############################", "\n", "### Direct zeronet parameters", "\n", "self", ".", "add_argument", "(", "'--first_layer_planes'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--cascades'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--blocks_middle'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--blocks_inner_middle'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--blocks_inner'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--blocks_outer'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--use_fixed_conv'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--bottle_neck_factor'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"resnet block expansion factor\"", ")", "\n", "self", ".", "add_argument", "(", "'--groupnorm'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--use_fixed_conv_block'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "self", ".", "add_argument", "(", "'--block_type'", ",", "default", "=", "'bottleneck'", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--tall_convs'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--autoregressive_sample_rate'", ",", "default", "=", "0.01", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--ar_channels'", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--box_sample'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Do AR sampling simultanously for each box, with the boxes tiling the image\"", ")", "\n", "self", ".", "add_argument", "(", "'--boxes_per_dim'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Tile image with the square of this many boxes. Must evenly divide height/width\"", ")", "\n", "\n", "#### Autocalibration", "\n", "self", ".", "add_argument", "(", "'--autocal_subsample'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Train autocalibration model on subsampled k-space or not\"", ")", "\n", "self", ".", "add_argument", "(", "'--autocal_soft_normalization'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "\n", "## Direct reconstruction", "\n", "self", ".", "add_argument", "(", "'--whiten_coils'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Pre-whiten all coils for the direct transforms\"", ")", "\n", "self", ".", "add_argument", "(", "'--sensitivity_target'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"use SENSE-REDUCE based target instead of RSS for the direct transforms\"", ")", "\n", "self", ".", "add_argument", "(", "'--imagespace_projection'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Use imagespace projection instead of fourier based projection\"", ")", "\n", "self", ".", "add_argument", "(", "'--rss_output'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Use RSS instead of SENSE based output on the last layer of the cascade\"", ")", "\n", "self", ".", "add_argument", "(", "'--gradient_checkpointing'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Greatly reduce memory using checkpointing. Requires support by the model used.\"", ")", "\n", "\n", "### Architecture search", "\n", "self", ".", "add_argument", "(", "'--arch_seed'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Optionanlly fix architecture every iteration with the archsearch model, for debugging\"", ")", "\n", "self", ".", "add_argument", "(", "'--arch_eval_size'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Size of subset of the training data used to choose best architecture (per gpu)\"", ")", "\n", "self", ".", "add_argument", "(", "'--arch_eval_nseeds'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of seeds to consider during post-run search for best architecture\"", ")", "\n", "\n", "#### Orientation adversary", "\n", "self", ".", "add_argument", "(", "'--orientation_save_images'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"For one-off use, save out pngs for debugging\"", ")", "\n", "self", ".", "add_argument", "(", "'--orientation_save_images_from'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"skip this number of initial batches\"", ")", "\n", "self", ".", "add_argument", "(", "'--orientation_adversary'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Use the orientation detection adversary\"", ")", "\n", "self", ".", "add_argument", "(", "'--number_of_adversaries'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Potentially use an ensemble of multiple adversaries\"", ")", "\n", "self", ".", "add_argument", "(", "'--adversary_lr_scale'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The learning rate for the adversary is this multiple of the main learning rate\"", ")", "\n", "self", ".", "add_argument", "(", "'--adversary_epoch_from'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Start training adversary at a certain epoch\"", ")", "\n", "self", ".", "add_argument", "(", "'--warmup_adversary_from'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Start training adversary from this epoch, potentially from an earlier epoch than \"", "\n", "\"when it's used to regulate the predictor via adversary_epoch_from\"", ")", "\n", "self", ".", "add_argument", "(", "'--adversary_strength'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'strength of adversary_mixin adv training in loss'", ")", "\n", "self", ".", "add_argument", "(", "'--reg_param'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Regularize the adversary's gradient norm\"", ")", "\n", "self", ".", "add_argument", "(", "'--adversary_weight_decay'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Apply this weight decay to the adversary (decay param effects predictor only)\"", ")", "\n", "self", ".", "add_argument", "(", "'--adv_target_uncertain'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Train predictor to encourage 0.5 prop output from adv instead of 0/1\"", ")", "\n", "self", ".", "add_argument", "(", "'--adversary_model'", ",", "default", "=", "\"unpooled_resnet50\"", ",", "type", "=", "str", ")", "\n", "self", ".", "add_argument", "(", "'--dont_learn_predictor'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Only learn adversary for debugging purposes\"", ")", "\n", "\n", "# multi-slice paarams", "\n", "self", ".", "add_argument", "(", "'--before_slices'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of slices to grab for prediction before the slice being predicted\"", ")", "\n", "self", ".", "add_argument", "(", "'--after_slices'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of slices to grab for prediction after the slice being predicted\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--short_epochs'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Run only 20% of each epoch\"", ")", "\n", "self", ".", "add_argument", "(", "'--evaluate'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Evaluate on dev set every epoch\"", ")", "\n", "\n", "# Override defaults with passed overrides", "\n", "self", ".", "set_defaults", "(", "**", "overrides", ")", "\n", "\n", "## Some run specific context that we want globally accessible and saved out", "\n", "## at the end of the run.", "\n", "self", ".", "set_defaults", "(", "\n", "main_pid", "=", "os", ".", "getpid", "(", ")", ",", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args": [[378, 410], ["pickle.load", "super().parse_args", "super().parse_known_args", "pickle.load", "vars", "args.Args.set_defaults", "args.Args.set_defaults", "super().parse_known_args", "len", "open", "isinstance", "args.Args.set_defaults", "open", "int", "print", "isinstance", "vars", "os.environ.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load"], ["", "def", "parse_args", "(", "self", ",", "args", "=", "None", ",", "namespace", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            As well as the usual command line argument parsing, this also accepts a\n            single argument specifying a pickle file, which arguments are read from.\n\n            It also overrides defaults if the override_with_runinfo_args argument is provided.\n        \"\"\"", "\n", "args_list", "=", "sys", ".", "argv", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "2", "and", "\"--\"", "not", "in", "sys", ".", "argv", "[", "1", "]", "and", "\".pkl\"", "in", "sys", ".", "argv", "[", "1", "]", ":", "\n", "            ", "run_config_file", "=", "sys", ".", "argv", "[", "1", "]", "\n", "run_config", "=", "pickle", ".", "load", "(", "open", "(", "run_config_file", ",", "'rb'", ")", ")", "\n", "if", "not", "isinstance", "(", "run_config", ",", "list", ")", ":", "\n", "                ", "if", "int", "(", "os", ".", "environ", ".", "get", "(", "'RANK'", ",", "0", ")", ")", "==", "0", ":", "\n", "                    ", "print", "(", "f\"Found single argument config file: {run_config_file}. Overriding defaults\"", ")", "\n", "", "if", "not", "isinstance", "(", "run_config", ",", "dict", ")", ":", "\n", "                    ", "run_config", "=", "vars", "(", "run_config", ")", "\n", "", "self", ".", "set_defaults", "(", "**", "run_config", ")", "\n", "", "parsed_args", "=", "super", "(", ")", ".", "parse_args", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "parsed_args", ",", "_", "=", "super", "(", ")", ".", "parse_known_args", "(", "args", "=", "args", ",", "namespace", "=", "namespace", ")", "\n", "\n", "", "if", "parsed_args", ".", "override_with_runinfo_args", "is", "not", "None", ":", "\n", "            ", "run_config", "=", "pickle", ".", "load", "(", "open", "(", "parsed_args", ".", "override_with_runinfo_args", ",", "'rb'", ")", ")", "\n", "run_config_args", "=", "vars", "(", "run_config", "[", "'args'", "]", ")", "\n", "\n", "# We need to override the defaults twice so that the user defined arguments", "\n", "# always have the highest priority, followed by the runinfo args and then the defaults.", "\n", "self", ".", "set_defaults", "(", "**", "run_config_args", ")", "\n", "self", ".", "set_defaults", "(", "**", "self", ".", "overrides", ")", "\n", "parsed_args", ",", "_", "=", "super", "(", ")", ".", "parse_known_args", "(", "args", "=", "args", ",", "namespace", "=", "namespace", ")", "\n", "\n", "", "return", "parsed_args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.unet.Unet.__init__": [[23, 66], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet.ConvBlock", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "unet.Unet.up_transpose_conv.append", "unet.Unet.up_conv.append", "unet.Unet.down_sample_layers.append", "unet.Unet.up_transpose_conv.append", "unet.Unet.up_conv.append", "unet.TransposeConvBlock", "torch.nn.Sequential", "unet.ConvBlock", "unet.ConvBlock", "unet.TransposeConvBlock", "unet.ConvBlock", "unet.ConvBlock", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", ":", "int", ",", "\n", "out_chans", ":", "int", ",", "\n", "chans", ":", "int", "=", "32", ",", "\n", "num_pool_layers", ":", "int", "=", "4", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans: Number of channels in the input to the U-Net model.\n            out_chans: Number of channels in the output to the U-Net model.\n            chans: Number of output channels of the first convolution layer.\n            num_pool_layers: Number of down-sampling and up-sampling layers.\n            drop_prob: Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", ".", "append", "(", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", ")", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "up_transpose_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ")", "\n", "ch", "//=", "2", "\n", "\n", "", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "self", ".", "out_chans", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.unet.Unet.forward": [[69, 106], ["unet.Unet.conv", "zip", "layer", "stack.append", "torch.nn.functional.avg_pool2d", "stack.pop", "transpose_conv", "torch.cat", "conv", "torch.sum", "torch.nn.functional.pad", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "image", "\n", "\n", "# apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# apply up-sampling layers", "\n", "for", "transpose_conv", ",", "conv", "in", "zip", "(", "self", ".", "up_transpose_conv", ",", "self", ".", "up_conv", ")", ":", "\n", "            ", "downsample_layer", "=", "stack", ".", "pop", "(", ")", "\n", "output", "=", "transpose_conv", "(", "output", ")", "\n", "\n", "# reflect pad on the right/botton if needed to handle odd input dimensions", "\n", "padding", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "padding", "[", "1", "]", "=", "1", "# padding right", "\n", "", "if", "output", ".", "shape", "[", "-", "2", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "padding", "[", "3", "]", "=", "1", "# padding bottom", "\n", "", "if", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "padding", ")", ")", "!=", "0", ":", "\n", "                ", "output", "=", "F", ".", "pad", "(", "output", ",", "padding", ",", "\"reflect\"", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "downsample_layer", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.unet.ConvBlock.__init__": [[114, 136], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ":", "int", ",", "out_chans", ":", "int", ",", "drop_prob", ":", "float", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans: Number of channels in the input.\n            out_chans: Number of channels in the output.\n            drop_prob: Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.unet.ConvBlock.forward": [[138, 147], ["unet.ConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.unet.TransposeConvBlock.__init__": [[155, 172], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ":", "int", ",", "out_chans", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans: Number of channels in the input.\n            out_chans: Number of channels in the output.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.unet.TransposeConvBlock.forward": [[174, 183], ["unet.TransposeConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n\n        Returns:\n            Output tensor of shape `(N, out_chans, H*2, W*2)`.\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "image", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.LOUPEPolicy.__init__": [[25, 58], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_actions", ":", "int", ",", "\n", "budget", ":", "int", ",", "\n", "use_softplus", ":", "bool", "=", "True", ",", "\n", "slope", ":", "float", "=", "10", ",", "\n", "sampler_detach_mask", ":", "bool", "=", "False", ",", "\n", "straight_through_slope", ":", "float", "=", "10", ",", "\n", "fix_sign_leakage", ":", "bool", "=", "True", ",", "\n", "st_clamp", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# shape = [1, W]", "\n", "self", ".", "use_softplus", "=", "use_softplus", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "straight_through_slope", "=", "straight_through_slope", "\n", "self", ".", "fix_sign_leakage", "=", "fix_sign_leakage", "\n", "self", ".", "st_clamp", "=", "st_clamp", "\n", "\n", "if", "use_softplus", ":", "\n", "# Softplus will be applied", "\n", "            ", "self", ".", "sampler", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "normal", "(", "\n", "torch", ".", "ones", "(", "(", "1", ",", "num_actions", ")", ")", ",", "torch", ".", "ones", "(", "(", "1", ",", "num_actions", ")", ")", "/", "10", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "# Sigmoid will be applied", "\n", "            ", "self", ".", "sampler", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "num_actions", ")", ")", ")", "\n", "\n", "", "self", ".", "binarizer", "=", "ThresholdSigmoidMask", ".", "apply", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "sampler_detach_mask", "=", "sampler_detach_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.LOUPEPolicy.forward": [[59, 105], ["policy.LOUPEPolicy.sampler.expand", "masked_prob_mask[].reshape", "policy.LOUPEPolicy.rescale_probs", "policy.LOUPEPolicy.flatten", "policy.LOUPEPolicy.binarizer", "policy.LOUPEPolicy.reshape", "masked_prob_mask.reshape", "torch.softplus", "torch.softplus", "torch.softplus", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "mask.detach.detach.detach", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "[].reshape", "mask.detach.detach.reshape", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "mask.detach.detach.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.detach.detach.reshape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.rescale_probs"], ["", "def", "forward", "(", "self", ",", "mask", ":", "torch", ".", "Tensor", ",", "kspace", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "B", ",", "M", ",", "H", ",", "W", ",", "C", "=", "kspace", ".", "shape", "# batch, coils, height, width, complex", "\n", "# Reshape to [B, W]", "\n", "sampler_out", "=", "self", ".", "sampler", ".", "expand", "(", "mask", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "if", "self", ".", "use_softplus", ":", "\n", "# Softplus to make positive", "\n", "            ", "prob_mask", "=", "F", ".", "softplus", "(", "sampler_out", ",", "beta", "=", "self", ".", "slope", ")", "\n", "prob_mask", "=", "prob_mask", "/", "torch", ".", "max", "(", "\n", "(", "1", "-", "mask", ".", "reshape", "(", "prob_mask", ".", "shape", "[", "0", "]", ",", "prob_mask", ".", "shape", "[", "1", "]", ")", ")", "*", "prob_mask", ",", "\n", "dim", "=", "1", ",", "\n", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# Sigmoid to make positive", "\n", "            ", "prob_mask", "=", "torch", ".", "sigmoid", "(", "self", ".", "slope", "*", "sampler_out", ")", "\n", "# Mask out already sampled rows", "\n", "", "masked_prob_mask", "=", "prob_mask", "*", "(", "\n", "1", "-", "mask", ".", "reshape", "(", "prob_mask", ".", "shape", "[", "0", "]", ",", "prob_mask", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "# Take out zero (masked) probabilities, since we don't want to include", "\n", "# those in the normalisation", "\n", "nonzero_idcs", "=", "(", "mask", ".", "view", "(", "B", ",", "W", ")", "==", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "probs_to_norm", "=", "masked_prob_mask", "[", "nonzero_idcs", "]", ".", "reshape", "(", "B", ",", "-", "1", ")", "\n", "# Rescale probabilities to desired sparsity.", "\n", "normed_probs", "=", "self", ".", "rescale_probs", "(", "probs_to_norm", ")", "\n", "# Reassign to original array", "\n", "masked_prob_mask", "[", "nonzero_idcs", "]", "=", "normed_probs", ".", "flatten", "(", ")", "\n", "# Binarize the mask", "\n", "flat_bin_mask", "=", "self", ".", "binarizer", "(", "\n", "masked_prob_mask", ",", "self", ".", "straight_through_slope", ",", "self", ".", "st_clamp", "\n", ")", "\n", "# BCHW --> BW --> B11W1", "\n", "acquisitions", "=", "flat_bin_mask", ".", "reshape", "(", "B", ",", "1", ",", "1", ",", "W", ",", "1", ")", "\n", "final_prob_mask", "=", "masked_prob_mask", ".", "reshape", "(", "B", ",", "1", ",", "1", ",", "W", ",", "1", ")", "\n", "# B11W1", "\n", "mask", "=", "mask", "+", "acquisitions", "\n", "# BMHWC", "\n", "masked_kspace", "=", "mask", "*", "kspace", "\n", "if", "self", ".", "sampler_detach_mask", ":", "\n", "            ", "mask", "=", "mask", ".", "detach", "(", ")", "\n", "# Note that since masked_kspace = mask * kspace, this kspace_pred will leak sign information", "\n", "", "if", "self", ".", "fix_sign_leakage", ":", "\n", "            ", "fix_sign_leakage_mask", "=", "torch", ".", "where", "(", "\n", "torch", ".", "bitwise_and", "(", "kspace", "<", "0.0", ",", "mask", "==", "0.0", ")", ",", "-", "1.0", ",", "1.0", "\n", ")", "\n", "masked_kspace", "=", "masked_kspace", "*", "fix_sign_leakage_mask", "\n", "", "return", "mask", ",", "masked_kspace", ",", "final_prob_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.LOUPEPolicy.rescale_probs": [[106, 131], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "ret.append", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le"], "methods", ["None"], ["", "def", "rescale_probs", "(", "self", ",", "batch_x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Rescale Probability Map\n        given a prob map x, rescales it so that it obtains the desired sparsity,\n        specified by self.budget and the image size.\n\n        if mean(x) > sparsity, then rescaling is easy: x' = x * sparsity / mean(x)\n        if mean(x) < sparsity, one can basically do the same thing by rescaling\n                                (1-x) appropriately, then taking 1 minus the result.\n        \"\"\"", "\n", "\n", "batch_size", ",", "W", "=", "batch_x", ".", "shape", "\n", "sparsity", "=", "self", ".", "budget", "/", "W", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "x", "=", "batch_x", "[", "i", ":", "i", "+", "1", "]", "\n", "xbar", "=", "torch", ".", "mean", "(", "x", ")", "\n", "r", "=", "sparsity", "/", "(", "xbar", ")", "\n", "beta", "=", "(", "1", "-", "sparsity", ")", "/", "(", "1", "-", "xbar", ")", "\n", "\n", "# compute adjustment", "\n", "le", "=", "torch", ".", "le", "(", "r", ",", "1", ")", ".", "float", "(", ")", "\n", "ret", ".", "append", "(", "le", "*", "x", "*", "r", "+", "(", "1", "-", "le", ")", "*", "(", "1", "-", "(", "1", "-", "x", ")", "*", "beta", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "ret", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.__init__": [[138, 177], ["torch.Module.__init__", "policy.LineConvSampler"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "budget", ":", "int", ",", "\n", "crop_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "128", ",", "128", ")", ",", "\n", "slope", ":", "float", "=", "10", ",", "\n", "sampler_detach_mask", ":", "bool", "=", "False", ",", "\n", "use_softplus", ":", "bool", "=", "True", ",", "\n", "straight_through_slope", ":", "float", "=", "10", ",", "\n", "fix_sign_leakage", ":", "bool", "=", "True", ",", "\n", "st_clamp", ":", "bool", "=", "False", ",", "\n", "fc_size", ":", "int", "=", "256", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", "num_fc_layers", ":", "int", "=", "3", ",", "\n", "activation", ":", "str", "=", "\"leakyrelu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sampler", "=", "LineConvSampler", "(", "\n", "input_dim", "=", "(", "2", ",", "*", "crop_size", ")", ",", "\n", "slope", "=", "slope", ",", "\n", "use_softplus", "=", "use_softplus", ",", "\n", "fc_size", "=", "fc_size", ",", "\n", "num_fc_layers", "=", "num_fc_layers", ",", "\n", "drop_prob", "=", "drop_prob", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "\n", "self", ".", "binarizer", "=", "ThresholdSigmoidMask", ".", "apply", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "straight_through_slope", "=", "straight_through_slope", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "sampler_detach_mask", "=", "sampler_detach_mask", "\n", "self", ".", "use_softplus", "=", "use_softplus", "\n", "self", ".", "fix_sign_leakage", "=", "fix_sign_leakage", "\n", "self", ".", "st_clamp", "=", "st_clamp", "\n", "self", ".", "fc_size", "=", "fc_size", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "num_fc_layers", "=", "num_fc_layers", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.forward": [[178, 194], ["policy.StraightThroughPolicy.sampler", "flat_prob_mask[].reshape", "policy.StraightThroughPolicy.rescale_probs", "policy.StraightThroughPolicy.flatten", "policy.StraightThroughPolicy.binarizer", "mask.view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.rescale_probs"], ["", "def", "forward", "(", "self", ",", "kspace_pred", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "kspace_pred", ".", "shape", "\n", "flat_prob_mask", "=", "self", ".", "sampler", "(", "kspace_pred", ",", "mask", ")", "\n", "# Take out zero (masked) probabilities, since we don't want to include", "\n", "# those in the normalisation", "\n", "nonzero_idcs", "=", "(", "mask", ".", "view", "(", "B", ",", "W", ")", "==", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "probs_to_norm", "=", "flat_prob_mask", "[", "nonzero_idcs", "]", ".", "reshape", "(", "B", ",", "-", "1", ")", "\n", "# Rescale probabilities to desired sparsity.", "\n", "normed_probs", "=", "self", ".", "rescale_probs", "(", "probs_to_norm", ")", "\n", "# Reassign to original array", "\n", "flat_prob_mask", "[", "nonzero_idcs", "]", "=", "normed_probs", ".", "flatten", "(", ")", "\n", "# Binarize the mask", "\n", "flat_bin_mask", "=", "self", ".", "binarizer", "(", "\n", "flat_prob_mask", ",", "self", ".", "straight_through_slope", ",", "self", ".", "st_clamp", "\n", ")", "\n", "return", "flat_bin_mask", ",", "flat_prob_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.do_acquisition": [[195, 226], ["policy.StraightThroughPolicy.sens_reduce().squeeze().permute", "policy.StraightThroughPolicy.", "acquisitions.reshape.reshape.reshape", "flat_prob_mask.reshape", "mask.detach.detach.detach", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "policy.StraightThroughPolicy.sens_reduce().squeeze", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "policy.StraightThroughPolicy.sens_reduce"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce"], ["", "def", "do_acquisition", "(", "\n", "self", ",", "\n", "kspace", ":", "torch", ".", "Tensor", ",", "\n", "kspace_pred", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "sens_maps", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "B", ",", "M", ",", "H", ",", "W", ",", "C", "=", "kspace", ".", "shape", "# batch, coils, height, width, complex", "\n", "# BMHWC --> BHWC --> BCHW", "\n", "current_recon", "=", "(", "\n", "self", ".", "sens_reduce", "(", "kspace_pred", ",", "sens_maps", ")", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", ")", "\n", "\n", "# BCHW --> BW --> B11W1", "\n", "acquisitions", ",", "flat_prob_mask", "=", "self", "(", "current_recon", ",", "mask", ")", "\n", "acquisitions", "=", "acquisitions", ".", "reshape", "(", "B", ",", "1", ",", "1", ",", "W", ",", "1", ")", "\n", "prob_mask", "=", "flat_prob_mask", ".", "reshape", "(", "B", ",", "1", ",", "1", ",", "W", ",", "1", ")", "\n", "\n", "# B11W1", "\n", "mask", "=", "mask", "+", "acquisitions", "\n", "# BMHWC", "\n", "masked_kspace", "=", "mask", "*", "kspace", "\n", "if", "self", ".", "sampler_detach_mask", ":", "\n", "            ", "mask", "=", "mask", ".", "detach", "(", ")", "\n", "# Note that since masked_kspace = mask * kspace, this kspace_pred will leak sign information.", "\n", "", "if", "self", ".", "fix_sign_leakage", ":", "\n", "            ", "fix_sign_leakage_mask", "=", "torch", ".", "where", "(", "\n", "torch", ".", "bitwise_and", "(", "kspace", "<", "0.0", ",", "mask", "==", "0.0", ")", ",", "-", "1.0", ",", "1.0", "\n", ")", "\n", "masked_kspace", "=", "masked_kspace", "*", "fix_sign_leakage_mask", "\n", "", "return", "mask", ",", "masked_kspace", ",", "prob_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.sens_reduce": [[227, 231], ["fastmri.ifft2c", "fastmri.complex_mul().sum", "fastmri.complex_mul", "fastmri.complex_conj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj"], ["", "def", "sens_reduce", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "sens_maps", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "fastmri", ".", "ifft2c", "(", "x", ")", "\n", "return", "fastmri", ".", "complex_mul", "(", "x", ",", "fastmri", ".", "complex_conj", "(", "sens_maps", ")", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.rescale_probs": [[233, 258], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "ret.append", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le"], "methods", ["None"], ["", "def", "rescale_probs", "(", "self", ",", "batch_x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Rescale Probability Map\n        given a prob map x, rescales it so that it obtains the desired sparsity,\n        specified by self.budget and the image size.\n\n        if mean(x) > sparsity, then rescaling is easy: x' = x * sparsity / mean(x)\n        if mean(x) < sparsity, one can basically do the same thing by rescaling\n                                (1-x) appropriately, then taking 1 minus the result.\n        \"\"\"", "\n", "\n", "batch_size", ",", "W", "=", "batch_x", ".", "shape", "\n", "sparsity", "=", "self", ".", "budget", "/", "W", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "x", "=", "batch_x", "[", "i", ":", "i", "+", "1", "]", "\n", "xbar", "=", "torch", ".", "mean", "(", "x", ")", "\n", "r", "=", "sparsity", "/", "(", "xbar", ")", "\n", "beta", "=", "(", "1", "-", "sparsity", ")", "/", "(", "1", "-", "xbar", ")", "\n", "\n", "# compute adjustment", "\n", "le", "=", "torch", ".", "le", "(", "r", ",", "1", ")", ".", "float", "(", ")", "\n", "ret", ".", "append", "(", "le", "*", "x", "*", "r", "+", "(", "1", "-", "le", ")", "*", "(", "1", "-", "(", "1", "-", "x", ")", "*", "beta", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "ret", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.__init__": [[261, 268], ["torch.autograd.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Straight through estimator.\n        The forward step stochastically binarizes the probability mask.\n        The backward step estimate the non differentiable > operator using sigmoid with large slope (10).\n        \"\"\"", "\n", "super", "(", "ThresholdSigmoidMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.forward": [[269, 300], ["len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ctx.save_for_backward", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "x.new().uniform_", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.isclose", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "RuntimeError", "x.new", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inputs", ",", "slope", ",", "clamp", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "inputs", ")", "\n", "probs", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "x", "=", "inputs", "[", "i", ":", "i", "+", "1", "]", "\n", "count", "=", "0", "\n", "while", "True", ":", "\n", "                ", "prob", "=", "x", ".", "new", "(", "x", ".", "size", "(", ")", ")", ".", "uniform_", "(", ")", "\n", "result", "=", "(", "x", ">", "prob", ")", ".", "float", "(", ")", "\n", "if", "torch", ".", "isclose", "(", "torch", ".", "mean", "(", "result", ")", ",", "torch", ".", "mean", "(", "x", ")", ",", "atol", "=", "1e-3", ")", ":", "\n", "                    ", "break", "\n", "", "count", "+=", "1", "\n", "if", "count", ">", "1000", ":", "\n", "                    ", "print", "(", "torch", ".", "mean", "(", "prob", ")", ",", "torch", ".", "mean", "(", "result", ")", ",", "torch", ".", "mean", "(", "x", ")", ")", "\n", "raise", "RuntimeError", "(", "\n", "\"Rejection sampled exceeded number of tries. Probably this means all \"", "\n", "\"sampling probabilities are 1 or 0 for some reason, leading to divide \"", "\n", "\"by zero in rescale_probs().\"", "\n", ")", "\n", "", "", "probs", ".", "append", "(", "prob", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "", "results", "=", "torch", ".", "cat", "(", "results", ",", "dim", "=", "0", ")", "\n", "probs", "=", "torch", ".", "cat", "(", "probs", ",", "dim", "=", "0", ")", "\n", "\n", "slope", "=", "torch", ".", "tensor", "(", "slope", ",", "requires_grad", "=", "False", ")", "\n", "ctx", ".", "clamp", "=", "clamp", "\n", "ctx", ".", "save_for_backward", "(", "inputs", ",", "probs", ",", "slope", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.backward": [[301, 313], ["torch.hardtanh", "torch.hardtanh", "torch.hardtanh", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "prob", ",", "slope", "=", "ctx", ".", "saved_tensors", "\n", "if", "ctx", ".", "clamp", ":", "\n", "            ", "grad_output", "=", "F", ".", "hardtanh", "(", "grad_output", ")", "\n", "# derivative of sigmoid function", "\n", "", "current_grad", "=", "(", "\n", "slope", "\n", "*", "torch", ".", "exp", "(", "-", "slope", "*", "(", "input", "-", "prob", ")", ")", "\n", "/", "torch", ".", "pow", "(", "(", "torch", ".", "exp", "(", "-", "slope", "*", "(", "input", "-", "prob", ")", ")", "+", "1", ")", ",", "2", ")", "\n", ")", "\n", "return", "current_grad", "*", "grad_output", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.SingleConvBlock.__init__": [[321, 349], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "layers.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_chans", ":", "int", ",", "out_chans", ":", "int", ",", "drop_prob", ":", "float", "=", "0", ",", "pool_size", ":", "int", "=", "2", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input.\n            out_chans (int): Number of channels in the output.\n            drop_prob (float): Dropout probability.\n            pool_size (int): Size of 2D max-pooling operator.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "pool_size", "=", "pool_size", "\n", "\n", "layers", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", ",", "\n", "]", "\n", "\n", "if", "pool_size", ">", "1", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "pool_size", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.SingleConvBlock.forward": [[350, 358], ["policy.SingleConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.SingleConvBlock.__repr__": [[359, 362], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"ConvBlock(in_chans={self.in_chans}, out_chans={self.out_chans}, \"", "\n", "f\"drop_prob={self.drop_prob}, max_pool_size={self.pool_size})\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.LineConvSampler.__init__": [[367, 458], ["torch.Module.__init__", "policy.SingleConvBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "functools.reduce", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "list", "fc_out.append", "policy.SingleConvBlock", "torch.Linear", "torch.Linear", "torch.Linear", "fc_out.append", "range", "policy.LineConvSampler.feature_extractor", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ELU", "torch.ELU", "torch.ELU", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ":", "tuple", "=", "(", "2", ",", "128", ",", "128", ")", ",", "\n", "chans", ":", "int", "=", "16", ",", "\n", "num_pool_layers", ":", "int", "=", "4", ",", "\n", "fc_size", ":", "int", "=", "256", ",", "\n", "drop_prob", ":", "float", "=", "0", ",", "\n", "slope", ":", "float", "=", "10", ",", "\n", "use_softplus", ":", "bool", "=", "True", ",", "\n", "num_fc_layers", ":", "int", "=", "3", ",", "\n", "activation", ":", "str", "=", "\"leakyrelu\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input to the U-Net model.\n            input_dim (tuple): Input size of reconstructed images (C, H, W).\n            chans (int): Number of output channels of the first convolution layer.\n            num_pool_layers (int): Number of down-sampling layers.\n            fc_size (int): Number of hidden neurons for the fully connected layers.\n            drop_prob (float): Dropout probability.\n            num_fc_layers (int): Number of fully connected layers to use after convolutional part.\n            use_softplus (bool): Whether to use softplus as final activation (otherwise sigmoid).\n            activation (str): Activation function to use: leakyrelu or elu.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "input_dim", ")", "==", "3", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "in_chans", "=", "input_dim", "[", "0", "]", "\n", "self", ".", "num_actions", "=", "input_dim", "[", "-", "1", "]", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "fc_size", "=", "fc_size", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "pool_size", "=", "2", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "use_softplus", "=", "use_softplus", "\n", "self", ".", "num_fc_layers", "=", "num_fc_layers", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "# Initial from in_chans to chans", "\n", "self", ".", "channel_layer", "=", "SingleConvBlock", "(", "\n", "self", ".", "in_chans", ",", "chans", ",", "drop_prob", ",", "pool_size", "=", "1", "\n", ")", "\n", "\n", "# Downsampling convolution", "\n", "# These are num_pool_layers layers where each layers 2x2 max pools, and doubles", "\n", "# the number of channels.", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "SingleConvBlock", "(", "\n", "chans", "*", "2", "**", "i", ",", "\n", "chans", "*", "2", "**", "(", "i", "+", "1", ")", ",", "\n", "drop_prob", ",", "\n", "pool_size", "=", "self", ".", "pool_size", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_pool_layers", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "channel_layer", ",", "*", "self", ".", "down_sample_layers", "\n", ")", "\n", "\n", "# Dynamically determinte size of fc_layer", "\n", "self", ".", "flattened_size", "=", "functools", ".", "reduce", "(", "\n", "operator", ".", "mul", ",", "list", "(", "self", ".", "feature_extractor", "(", "torch", ".", "rand", "(", "1", ",", "*", "input_dim", ")", ")", ".", "shape", ")", "\n", ")", "\n", "\n", "fc_out", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_fc_layers", ")", ":", "\n", "            ", "in_features", "=", "fc_size", "\n", "out_features", "=", "fc_size", "\n", "if", "layer", "==", "0", ":", "\n", "                ", "in_features", "=", "self", ".", "flattened_size", "\n", "", "if", "layer", "+", "1", "==", "self", ".", "num_fc_layers", ":", "\n", "                ", "out_features", "=", "self", ".", "num_actions", "\n", "", "fc_out", ".", "append", "(", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ")", ")", "\n", "\n", "if", "layer", "+", "1", "<", "self", ".", "num_fc_layers", ":", "\n", "                ", "act", ":", "nn", ".", "Module", "\n", "if", "activation", "==", "\"leakyrelu\"", ":", "\n", "                    ", "act", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "                    ", "act", "=", "nn", ".", "ELU", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "f\"Invalid activation function {activation}. Should be leakyrelu or elu.\"", "\n", ")", "\n", "", "fc_out", ".", "append", "(", "act", ")", "\n", "\n", "", "", "self", ".", "fc_out", "=", "nn", ".", "Sequential", "(", "*", "fc_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.LineConvSampler.forward": [[459, 491], ["policy.LineConvSampler.feature_extractor", "image_emb.flatten.flatten.flatten", "policy.LineConvSampler.fc_out", "torch.softplus", "torch.softplus", "torch.softplus", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "[].reshape", "mask.reshape", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            image (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n            mask (torch.Tensor): Input tensor of shape [resolution], containing 0s and 1s\n        Returns:\n            torch.Tensor: prob_mask [batch_size, num_actions] corresponding to all actions at the\n            given observation. Gives probabilities of sampling a particular action.\n        \"\"\"", "\n", "\n", "# Image embedding", "\n", "image_emb", "=", "self", ".", "feature_extractor", "(", "image", ")", "\n", "# flatten all but batch dimension before FC layers", "\n", "image_emb", "=", "image_emb", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "out", "=", "self", ".", "fc_out", "(", "image_emb", ")", "\n", "\n", "if", "self", ".", "use_softplus", ":", "\n", "# Softplus to make positive", "\n", "            ", "out", "=", "F", ".", "softplus", "(", "out", ",", "beta", "=", "self", ".", "slope", ")", "\n", "# Make sure max probability is 1, but ignore already sampled rows for this normalisation, since", "\n", "#  those get masked out later anyway.", "\n", "prob_mask", "=", "out", "/", "torch", ".", "max", "(", "\n", "(", "1", "-", "mask", ".", "reshape", "(", "out", ".", "shape", "[", "0", "]", ",", "out", ".", "shape", "[", "1", "]", ")", ")", "*", "out", ",", "dim", "=", "1", "\n", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "prob_mask", "=", "torch", ".", "sigmoid", "(", "self", ".", "slope", "*", "out", ")", "\n", "# Mask out already sampled rows", "\n", "", "prob_mask", "=", "prob_mask", "*", "(", "\n", "1", "-", "mask", ".", "reshape", "(", "prob_mask", ".", "shape", "[", "0", "]", ",", "prob_mask", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "assert", "len", "(", "prob_mask", ".", "shape", ")", "==", "2", "\n", "return", "prob_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveSensitivityModel.__init__": [[30, 61], ["torch.Module.__init__", "varnet.NormUnet"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "chans", ":", "int", ",", "\n", "num_pools", ":", "int", ",", "\n", "in_chans", ":", "int", "=", "2", ",", "\n", "out_chans", ":", "int", "=", "2", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", "num_sense_lines", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            chans: Number of output channels of the first convolution layer.\n            num_pools: Number of down-sampling and up-sampling layers.\n            in_chans: Number of channels in the input to the U-Net model.\n            out_chans: Number of channels in the output to the U-Net model.\n            drop_prob: Dropout probability.\n            num_sense_lines: Number of low-frequency lines to use for sensitivity map\n                computation, must be even or `None`. Default `None` will automatically\n                compute the number from masks. Default behaviour may cause some slices to\n                use more low-frequency lines than others, when used in conjunction with\n                e.g. the EquispacedMaskFunc defaults.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_sense_lines", "=", "num_sense_lines", "\n", "self", ".", "norm_unet", "=", "NormUnet", "(", "\n", "chans", ",", "\n", "num_pools", ",", "\n", "in_chans", "=", "in_chans", ",", "\n", "out_chans", "=", "out_chans", ",", "\n", "drop_prob", "=", "drop_prob", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveSensitivityModel.chans_to_batch_dim": [[63, 67], ["x.view"], "methods", ["None"], ["", "def", "chans_to_batch_dim", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", ",", "comp", "=", "x", ".", "shape", "\n", "\n", "return", "x", ".", "view", "(", "b", "*", "c", ",", "1", ",", "h", ",", "w", ",", "comp", ")", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveSensitivityModel.batch_chans_to_chan_dim": [[68, 73], ["x.view"], "methods", ["None"], ["", "def", "batch_chans_to_chan_dim", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "batch_size", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "bc", ",", "_", ",", "h", ",", "w", ",", "comp", "=", "x", ".", "shape", "\n", "c", "=", "bc", "//", "batch_size", "\n", "\n", "return", "x", ".", "view", "(", "batch_size", ",", "c", ",", "h", ",", "w", ",", "comp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveSensitivityModel.divide_root_sum_of_squares": [[74, 76], ["fastmri.rss_complex().unsqueeze().unsqueeze", "fastmri.rss_complex().unsqueeze", "fastmri.rss_complex"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss_complex"], ["", "def", "divide_root_sum_of_squares", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "x", "/", "fastmri", ".", "rss_complex", "(", "x", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveSensitivityModel.get_pad_and_num_low_freqs": [[77, 102], ["torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.max", "torch.max", "torch.max", "torch.max", "squeezed_mask[].flip", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.min", "torch.min", "torch.min", "torch.min", "RuntimeError", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "get_pad_and_num_low_freqs", "(", "\n", "self", ",", "mask", ":", "torch", ".", "Tensor", ",", "num_sense_lines", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# get low frequency line locations and mask them out", "\n", "        ", "squeezed_mask", "=", "mask", "[", ":", ",", "0", ",", "0", ",", ":", ",", "0", "]", "\n", "cent", "=", "squeezed_mask", ".", "shape", "[", "1", "]", "//", "2", "\n", "# running argmin returns the first non-zero", "\n", "left", "=", "torch", ".", "argmin", "(", "squeezed_mask", "[", ":", ",", ":", "cent", "]", ".", "flip", "(", "1", ")", ",", "dim", "=", "1", ")", "\n", "right", "=", "torch", ".", "argmin", "(", "squeezed_mask", "[", ":", ",", "cent", ":", "]", ",", "dim", "=", "1", ")", "\n", "num_low_freqs", "=", "torch", ".", "max", "(", "\n", "2", "*", "torch", ".", "min", "(", "left", ",", "right", ")", ",", "torch", ".", "ones_like", "(", "left", ")", "\n", ")", "# force a symmetric center unless 1", "\n", "\n", "if", "self", ".", "num_sense_lines", "is", "not", "None", ":", "# Use pre-specified number instead", "\n", "            ", "if", "(", "num_low_freqs", "<", "num_sense_lines", ")", ".", "all", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"`num_sense_lines` cannot be greater than the actual number of \"", "\n", "\"low-frequency lines in the mask: {}\"", ".", "format", "(", "num_low_freqs", ")", "\n", ")", "\n", "", "num_low_freqs", "=", "num_sense_lines", "*", "torch", ".", "ones", "(", "\n", "mask", ".", "shape", "[", "0", "]", ",", "dtype", "=", "mask", ".", "dtype", ",", "device", "=", "mask", ".", "device", "\n", ")", "\n", "\n", "", "pad", "=", "(", "mask", ".", "shape", "[", "-", "2", "]", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "return", "pad", ",", "num_low_freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveSensitivityModel.forward": [[103, 118], ["adaptive_varnet.AdaptiveSensitivityModel.get_pad_and_num_low_freqs", "fastmri.data.transforms.batched_mask_center", "fastmri.ifft2c", "adaptive_varnet.AdaptiveSensitivityModel.chans_to_batch_dim", "adaptive_varnet.AdaptiveSensitivityModel.norm_unet", "adaptive_varnet.AdaptiveSensitivityModel.batch_chans_to_chan_dim", "adaptive_varnet.AdaptiveSensitivityModel.divide_root_sum_of_squares"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.get_pad_and_num_low_freqs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.batched_mask_center", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.chans_to_batch_dim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.batch_chans_to_chan_dim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.divide_root_sum_of_squares"], ["", "def", "forward", "(", "self", ",", "masked_kspace", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "pad", ",", "num_low_freqs", "=", "self", ".", "get_pad_and_num_low_freqs", "(", "mask", ",", "self", ".", "num_sense_lines", ")", "\n", "x", "=", "transforms", ".", "batched_mask_center", "(", "masked_kspace", ",", "pad", ",", "pad", "+", "num_low_freqs", ")", "\n", "\n", "# convert to image space", "\n", "x", "=", "fastmri", ".", "ifft2c", "(", "x", ")", "\n", "x", ",", "b", "=", "self", ".", "chans_to_batch_dim", "(", "x", ")", "\n", "# NOTE: Channel dimensions have been converted to batch dimensions, so this", "\n", "#  acts like a UNet that treats every coil as a separate image!", "\n", "# estimate sensitivities", "\n", "x", "=", "self", ".", "norm_unet", "(", "x", ")", "\n", "x", "=", "self", ".", "batch_chans_to_chan_dim", "(", "x", ",", "b", ")", "\n", "x", "=", "self", ".", "divide_root_sum_of_squares", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNet.__init__": [[129, 321], ["torch.Module.__init__", "adaptive_varnet.AdaptiveSensitivityModel", "torch.ModuleList", "torch.ModuleList", "isinstance", "policy.StraightThroughPolicy.LOUPEPolicy", "torch.ModuleList", "torch.ModuleList", "adaptive_varnet.AdaptiveVarNetBlock", "RuntimeError", "varnet.NormUnet", "range", "range", "policy.StraightThroughPolicy.StraightThroughPolicy", "policies.append", "policy.StraightThroughPolicy.StraightThroughPolicy", "policy.StraightThroughPolicy.StraightThroughPolicy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "budget", ":", "int", "=", "22", ",", "\n", "num_cascades", ":", "int", "=", "12", ",", "\n", "sens_chans", ":", "int", "=", "8", ",", "\n", "sens_pools", ":", "int", "=", "4", ",", "\n", "chans", ":", "int", "=", "18", ",", "\n", "pools", ":", "int", "=", "4", ",", "\n", "cascades_per_policy", ":", "int", "=", "1", ",", "\n", "loupe_mask", ":", "bool", "=", "False", ",", "\n", "use_softplus", ":", "bool", "=", "True", ",", "\n", "crop_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "128", ",", "128", ")", ",", "\n", "num_actions", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "num_sense_lines", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "hard_dc", ":", "bool", "=", "False", ",", "\n", "dc_mode", ":", "str", "=", "\"simul\"", ",", "\n", "slope", ":", "float", "=", "10", ",", "\n", "sparse_dc_gradients", ":", "bool", "=", "True", ",", "\n", "straight_through_slope", ":", "float", "=", "10", ",", "\n", "st_clamp", ":", "bool", "=", "False", ",", "\n", "policy_fc_size", ":", "int", "=", "256", ",", "\n", "policy_drop_prob", ":", "float", "=", "0.0", ",", "\n", "policy_num_fc_layers", ":", "int", "=", "3", ",", "\n", "policy_activation", ":", "str", "=", "\"leakyrelu\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            budget: Total number of acquisitions to do.\n            num_cascades: Number of cascades (i.e., layers) for variational\n                network.\n            sens_chans: Number of channels for sensitivity map U-Net.\n            sens_pools Number of downsampling and upsampling layers for\n                sensitivity map U-Net.\n            chans: Number of channels for cascade U-Net.\n            pools: Number of downsampling and upsampling layers for cascade\n                U-Net.\n            cascades_per_policy: How many cascades to use per policy step.\n                Policies will be applied starting after first cascade, and then\n                every cascades_per_policy cascades after. Note that\n                num_cascades % cascades_per_policy should equal 1. There is an\n                option to set cascades_per_policy equal to num_cascades as well,\n                in which case the policy will be applied before the first\n                cascade only.\n            loupe_mask: Whether to use LOUPE-like mask instead of equispaced\n                (still keeps center lines).\n            use_softplus: Whether to use softplus or sigmoid in LOUPE.\n            crop_size: tuple, crop size of MR images.\n            num_actions: Number of possible actions to sample (=image width).\n                Used only when loupe_mask is True.\n            num_sense_lines: Number of low-frequency lines to use for\n                sensitivity map computation, must be even or `None`. Default\n                `None` will automatically compute the number from masks.\n                Default behaviour may cause some slices to use more\n                low-frequency lines than others, when used in conjunction with\n                e.g. the EquispacedMaskFunc defaults.\n            hard_dc: Whether to do hard DC layers instead of soft (learned).\n            dc_mode: Whether to do DC before ('first'), after ('last') or\n                simultaneously ('simul') with Refinement step. Default 'simul'.\n            slope: Slope to use for sigmoid in LOUPE and Policy forward, or\n                beta to use in softplus.\n            sparse_dc_gradients: Whether to sparsify the gradients in DC by\n                using torch.where() with the mask: this essentially removes\n                gradients for the policy on unsampled rows.\n            straight_through_slope: Slope to use in Straight Through estimator.\n            st_clamp: Whether to clamp gradients between -1 and 1 in straight\n                through estimator.\n            policy_fc_size: int, size of fully connected layers in Policy\n                architecture.\n            policy_drop_prob: float, dropout probability of convolutional\n                layers in Policy.\n            policy_num_fc_layers: int, number of fully-connected layers to\n                apply after the convolutional layers in the policy.\n            policy_activation: str, \"leakyrelu\" or \"elu\". Activation function\n                to use between fully-connected layers in the policy. Only used\n                if policy_num_fc_layers > 1.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "cascades_per_policy", "=", "cascades_per_policy", "\n", "self", ".", "loupe_mask", "=", "loupe_mask", "\n", "self", ".", "use_softplus", "=", "use_softplus", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "self", ".", "num_sense_lines", "=", "num_sense_lines", "\n", "self", ".", "hard_dc", "=", "hard_dc", "\n", "self", ".", "dc_mode", "=", "dc_mode", "\n", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "sparse_dc_gradients", "=", "sparse_dc_gradients", "\n", "self", ".", "straight_through_slope", "=", "straight_through_slope", "\n", "\n", "self", ".", "st_clamp", "=", "st_clamp", "\n", "\n", "self", ".", "policy_fc_size", "=", "policy_fc_size", "\n", "self", ".", "policy_drop_prob", "=", "policy_drop_prob", "\n", "self", ".", "policy_num_fc_layers", "=", "policy_num_fc_layers", "\n", "self", ".", "policy_activation", "=", "policy_activation", "\n", "\n", "self", ".", "sens_net", "=", "AdaptiveSensitivityModel", "(", "\n", "sens_chans", ",", "sens_pools", ",", "num_sense_lines", "=", "num_sense_lines", "\n", ")", "\n", "self", ".", "cascades", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AdaptiveVarNetBlock", "(", "\n", "NormUnet", "(", "chans", ",", "pools", ")", ",", "\n", "hard_dc", "=", "hard_dc", ",", "\n", "dc_mode", "=", "dc_mode", ",", "\n", "sparse_dc_gradients", "=", "sparse_dc_gradients", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "num_cascades", ")", "\n", "]", "\n", ")", "\n", "\n", "# LOUPE or adaptive policies", "\n", "if", "self", ".", "loupe_mask", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "num_actions", ",", "int", ")", "\n", "self", ".", "loupe", "=", "LOUPEPolicy", "(", "\n", "self", ".", "num_actions", ",", "\n", "self", ".", "budget", ",", "\n", "use_softplus", "=", "self", ".", "use_softplus", ",", "\n", "slope", "=", "self", ".", "slope", ",", "\n", "straight_through_slope", "=", "self", ".", "straight_through_slope", ",", "\n", "st_clamp", "=", "self", ".", "st_clamp", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Define policies. If budget is not cleanly divided by num_cascades - 1,", "\n", "# then put all remaining acquisitions in last cascade.", "\n", "            ", "remaining_budget", "=", "self", ".", "budget", "\n", "if", "cascades_per_policy", ">", "num_cascades", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Number of cascades {} cannot be smaller than number of cascades \"", "\n", "\"per policy {}.\"", ".", "format", "(", "num_cascades", ",", "cascades_per_policy", ")", "\n", ")", "\n", "", "elif", "num_cascades", "!=", "cascades_per_policy", ":", "\n", "                ", "base_budget", "=", "self", ".", "budget", "//", "(", "(", "num_cascades", "-", "1", ")", "//", "cascades_per_policy", ")", "\n", "policies", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_cascades", ")", ":", "# First cascade has no policy", "\n", "# 5/5 --> no i (special case, see if-else outside this for-loop)", "\n", "# 5/4 --> i = 1", "\n", "# 5/3 --> i = 2", "\n", "# 5/2 --> i = 1, 3", "\n", "# 5/1 --> i = 1, 2, 3, 4", "\n", "                    ", "if", "(", "\n", "num_cascades", "-", "i", "\n", ")", "%", "cascades_per_policy", "==", "0", ":", "# Count from the back", "\n", "                        ", "if", "remaining_budget", "<", "2", "*", "base_budget", ":", "\n", "                            ", "policy", "=", "StraightThroughPolicy", "(", "\n", "remaining_budget", ",", "\n", "crop_size", ",", "\n", "slope", "=", "self", ".", "slope", ",", "\n", "use_softplus", "=", "self", ".", "use_softplus", ",", "\n", "straight_through_slope", "=", "self", ".", "straight_through_slope", ",", "\n", "st_clamp", "=", "self", ".", "st_clamp", ",", "\n", "fc_size", "=", "self", ".", "policy_fc_size", ",", "\n", "drop_prob", "=", "self", ".", "policy_drop_prob", ",", "\n", "num_fc_layers", "=", "self", ".", "policy_num_fc_layers", ",", "\n", "activation", "=", "self", ".", "policy_activation", ",", "\n", ")", "\n", "remaining_budget", "=", "0", "\n", "", "else", ":", "\n", "                            ", "policy", "=", "StraightThroughPolicy", "(", "\n", "base_budget", ",", "\n", "crop_size", ",", "\n", "slope", "=", "self", ".", "slope", ",", "\n", "use_softplus", "=", "self", ".", "use_softplus", ",", "\n", "straight_through_slope", "=", "self", ".", "straight_through_slope", ",", "\n", "st_clamp", "=", "self", ".", "st_clamp", ",", "\n", "fc_size", "=", "self", ".", "policy_fc_size", ",", "\n", "drop_prob", "=", "self", ".", "policy_drop_prob", ",", "\n", "num_fc_layers", "=", "self", ".", "policy_num_fc_layers", ",", "\n", "activation", "=", "self", ".", "policy_activation", ",", "\n", ")", "\n", "remaining_budget", "-=", "base_budget", "\n", "", "policies", ".", "append", "(", "policy", ")", "\n", "", "", "", "else", ":", "# Will do single policy immediately before first cascade", "\n", "                ", "policies", "=", "[", "\n", "StraightThroughPolicy", "(", "\n", "self", ".", "budget", ",", "\n", "crop_size", ",", "\n", "slope", "=", "self", ".", "slope", ",", "\n", "use_softplus", "=", "self", ".", "use_softplus", ",", "\n", "straight_through_slope", "=", "self", ".", "straight_through_slope", ",", "\n", "st_clamp", "=", "self", ".", "st_clamp", ",", "\n", "fc_size", "=", "self", ".", "policy_fc_size", ",", "\n", "drop_prob", "=", "self", ".", "policy_drop_prob", ",", "\n", "num_fc_layers", "=", "self", ".", "policy_num_fc_layers", ",", "\n", "activation", "=", "self", ".", "policy_activation", ",", "\n", ")", "\n", "]", "\n", "\n", "", "self", ".", "policies", "=", "nn", ".", "ModuleList", "(", "policies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNet.forward": [[322, 408], ["collections.defaultdict", "adaptive_varnet.AdaptiveVarNet.extract_low_freq_mask", "extra_outputs[].append", "adaptive_varnet.AdaptiveVarNet.sens_net", "extra_outputs[].append", "fastmri.complex_abs().squeeze", "extra_outputs[].append", "masked_kspace.clone", "enumerate", "fastmri.rss", "extra_outputs[].append", "fastmri.complex_abs().squeeze.detach().cpu", "adaptive_varnet.AdaptiveVarNet.loupe", "extra_outputs[].append", "extra_outputs[].append", "fastmri.complex_abs().squeeze", "extra_outputs[].append", "masked_kspace.clone", "adaptive_varnet.AdaptiveVarNet.policies[].do_acquisition", "extra_outputs[].append", "extra_outputs[].append", "cascade", "fastmri.complex_abs().squeeze", "extra_outputs[].append", "fastmri.complex_abs", "fastmri.rss.detach().cpu", "fastmri.complex_abs", "fastmri.complex_abs().squeeze.detach().cpu", "len", "len", "ValueError", "fastmri.complex_abs().squeeze.detach().cpu", "adaptive_varnet.AdaptiveVarNet.policies[].do_acquisition", "extra_outputs[].append", "extra_outputs[].append", "fastmri.ifft2c", "adaptive_varnet.AdaptiveVarNet.sens_reduce", "fastmri.complex_abs().squeeze.detach", "fastmri.complex_abs", "fastmri.complex_abs", "len", "fastmri.rss.detach", "adaptive_varnet.AdaptiveVarNet.sens_reduce", "fastmri.complex_abs().squeeze.detach", "adaptive_varnet.AdaptiveVarNet.sens_reduce", "fastmri.complex_abs().squeeze.detach", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNet.extract_low_freq_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.do_acquisition", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.StraightThroughPolicy.do_acquisition", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "kspace", ":", "torch", ".", "Tensor", ",", "\n", "masked_kspace", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "\n", "        ", "extra_outputs", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# Make it so that masked_kspace and mask are reduced to center only.", "\n", "mask", ",", "masked_kspace", "=", "self", ".", "extract_low_freq_mask", "(", "mask", ",", "masked_kspace", ")", "\n", "extra_outputs", "[", "\"masks\"", "]", ".", "append", "(", "mask", ")", "\n", "\n", "# Sensitivity", "\n", "sens_maps", "=", "self", ".", "sens_net", "(", "masked_kspace", ",", "mask", ")", "\n", "extra_outputs", "[", "\"sense\"", "]", ".", "append", "(", "sens_maps", ")", "\n", "\n", "# Store current reconstruction", "\n", "current_recon", "=", "fastmri", ".", "complex_abs", "(", "\n", "self", ".", "sens_reduce", "(", "masked_kspace", ",", "sens_maps", ")", "\n", ")", ".", "squeeze", "(", "1", ")", "\n", "extra_outputs", "[", "\"recons\"", "]", ".", "append", "(", "current_recon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "# Sample LOUPE mask", "\n", "if", "self", ".", "loupe_mask", ":", "\n", "            ", "mask", ",", "masked_kspace", ",", "prob_mask", "=", "self", ".", "loupe", "(", "mask", ",", "kspace", ")", "\n", "\n", "extra_outputs", "[", "\"masks\"", "]", ".", "append", "(", "mask", ")", "\n", "extra_outputs", "[", "\"prob_masks\"", "]", ".", "append", "(", "prob_mask", ")", "\n", "# Store current reconstruction", "\n", "current_recon", "=", "fastmri", ".", "complex_abs", "(", "\n", "self", ".", "sens_reduce", "(", "masked_kspace", ",", "sens_maps", ")", "\n", ")", ".", "squeeze", "(", "1", ")", "\n", "extra_outputs", "[", "\"recons\"", "]", ".", "append", "(", "current_recon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "cascades_per_policy", "==", "len", "(", "self", ".", "cascades", ")", "and", "not", "self", ".", "loupe_mask", ":", "\n", "# Special setting: do policy once before any cascade only.", "\n", "            ", "if", "len", "(", "self", ".", "policies", ")", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Must have only one policy when number of cascades \"", "\n", "f\"{len(self.cascades)} equals the number of cascades_per_policy \"", "\n", "f\"{self.cascades_per_policy}.\"", "\n", ")", "\n", "", "kspace_pred", "=", "masked_kspace", ".", "clone", "(", ")", "\n", "mask", ",", "masked_kspace", ",", "prob_mask", "=", "self", ".", "policies", "[", "0", "]", ".", "do_acquisition", "(", "\n", "kspace", ",", "kspace_pred", ",", "mask", ",", "sens_maps", "\n", ")", "\n", "extra_outputs", "[", "\"masks\"", "]", ".", "append", "(", "mask", ")", "\n", "extra_outputs", "[", "\"prob_masks\"", "]", ".", "append", "(", "prob_mask", ")", "\n", "\n", "", "kspace_pred", "=", "masked_kspace", ".", "clone", "(", ")", "\n", "\n", "j", "=", "0", "# Keep track of policy number", "\n", "for", "i", ",", "cascade", "in", "enumerate", "(", "self", ".", "cascades", ")", ":", "\n", "            ", "kspace_pred", "=", "cascade", "(", "\n", "kspace_pred", ",", "masked_kspace", ",", "mask", ",", "sens_maps", ",", "kspace", "=", "kspace", "\n", ")", "\n", "\n", "# Store current reconstruction", "\n", "current_recon", "=", "fastmri", ".", "complex_abs", "(", "\n", "self", ".", "sens_reduce", "(", "masked_kspace", ",", "sens_maps", ")", "\n", ")", ".", "squeeze", "(", "1", ")", "\n", "extra_outputs", "[", "\"recons\"", "]", ".", "append", "(", "current_recon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "if", "i", "==", "len", "(", "self", ".", "cascades", ")", "-", "1", "or", "self", ".", "loupe_mask", ":", "\n", "                ", "continue", "# Don't do acquisition, just reconstruct", "\n", "\n", "# Count from the back", "\n", "", "if", "(", "\n", "len", "(", "self", ".", "cascades", ")", "-", "(", "i", "+", "1", ")", "\n", ")", "%", "self", ".", "cascades_per_policy", "==", "0", "and", "self", ".", "cascades_per_policy", "!=", "len", "(", "\n", "self", ".", "cascades", "\n", ")", ":", "\n", "                ", "mask", ",", "masked_kspace", ",", "prob_mask", "=", "self", ".", "policies", "[", "j", "]", ".", "do_acquisition", "(", "\n", "kspace", ",", "kspace_pred", ",", "mask", ",", "sens_maps", "\n", ")", "\n", "j", "+=", "1", "\n", "\n", "extra_outputs", "[", "\"masks\"", "]", ".", "append", "(", "mask", ")", "\n", "extra_outputs", "[", "\"prob_masks\"", "]", ".", "append", "(", "prob_mask", ")", "\n", "\n", "# Could presumably do complex_abs(complex_rss()) instead and get same result?", "\n", "", "", "output", "=", "fastmri", ".", "rss", "(", "fastmri", ".", "complex_abs", "(", "fastmri", ".", "ifft2c", "(", "kspace_pred", ")", ")", ",", "dim", "=", "1", ")", "\n", "# Add final reconstruction image", "\n", "extra_outputs", "[", "\"recons\"", "]", ".", "append", "(", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "output", ",", "extra_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNet.extract_low_freq_mask": [[409, 424], ["adaptive_varnet.AdaptiveVarNet.sens_net.get_pad_and_num_low_freqs", "fastmri.data.transforms.batched_mask_center", "fastmri.data.transforms.batched_mask_center"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.get_pad_and_num_low_freqs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.batched_mask_center", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.batched_mask_center"], ["", "def", "extract_low_freq_mask", "(", "self", ",", "mask", ":", "torch", ".", "Tensor", ",", "masked_kspace", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Extracts low frequency components that are used by sensitivity map\n        computation. This serves as the starting point for active acquisition.\n        \"\"\"", "\n", "pad", ",", "num_low_freqs", "=", "self", ".", "sens_net", ".", "get_pad_and_num_low_freqs", "(", "\n", "mask", ",", "self", ".", "num_sense_lines", "\n", ")", "\n", "\n", "mask", "=", "transforms", ".", "batched_mask_center", "(", "mask", ",", "pad", ",", "pad", "+", "num_low_freqs", ")", "\n", "masked_kspace", "=", "transforms", ".", "batched_mask_center", "(", "\n", "masked_kspace", ",", "pad", ",", "pad", "+", "num_low_freqs", "\n", ")", "\n", "\n", "return", "mask", ",", "masked_kspace", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNet.sens_reduce": [[425, 429], ["fastmri.ifft2c", "fastmri.complex_mul().sum", "fastmri.complex_mul", "fastmri.complex_conj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj"], ["", "def", "sens_reduce", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "sens_maps", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "fastmri", ".", "ifft2c", "(", "x", ")", "\n", "return", "fastmri", ".", "complex_mul", "(", "x", ",", "fastmri", ".", "complex_conj", "(", "sens_maps", ")", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNetBlock.__init__": [[441, 480], ["torch.Module.__init__", "ValueError", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", "inter_sens", ":", "bool", "=", "True", ",", "\n", "hard_dc", ":", "bool", "=", "False", ",", "\n", "dc_mode", ":", "str", "=", "\"simul\"", ",", "\n", "sparse_dc_gradients", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            model: Module for \"regularization\" component of variational\n                network.\n            inter_sens: boolean, whether to do reduction and expansion using\n                estimated sensitivity maps.\n            hard_dc: boolean, whether to do hard DC layer instead of soft.\n            dc_mode: str, whether to do DC before ('first'), after ('last') or\n                simultaneously ('simul') with Refinement step. Default 'simul'.\n            sparse_dc_gradients: Whether to sparsify the gradients in DC by\n                using torch.where() with the mask: this essentially removes\n                gradients for the policy on unsampled rows.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "inter_sens", "=", "inter_sens", "\n", "self", ".", "hard_dc", "=", "hard_dc", "\n", "self", ".", "dc_mode", "=", "dc_mode", "\n", "self", ".", "sparse_dc_gradients", "=", "sparse_dc_gradients", "\n", "\n", "if", "dc_mode", "not", "in", "[", "\"first\"", ",", "\"last\"", ",", "\"simul\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"`dc_mode` must be one of 'first', 'last', or 'simul'. \"", "\n", "\"Not {}\"", ".", "format", "(", "dc_mode", ")", "\n", ")", "\n", "\n", "", "if", "hard_dc", ":", "\n", "            ", "self", ".", "dc_weight", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "dc_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNetBlock.sens_expand": [[481, 483], ["fastmri.fft2c", "fastmri.complex_mul"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul"], ["", "", "def", "sens_expand", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "sens_maps", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "fastmri", ".", "fft2c", "(", "fastmri", ".", "complex_mul", "(", "x", ",", "sens_maps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNetBlock.sens_reduce": [[484, 488], ["fastmri.ifft2c", "fastmri.complex_mul().sum", "fastmri.complex_mul", "fastmri.complex_conj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj"], ["", "def", "sens_reduce", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "sens_maps", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "fastmri", ".", "ifft2c", "(", "x", ")", "\n", "return", "fastmri", ".", "complex_mul", "(", "x", ",", "fastmri", ".", "complex_conj", "(", "sens_maps", ")", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.adaptive_varnet.AdaptiveVarNetBlock.forward": [[490, 563], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "adaptive_varnet.AdaptiveVarNetBlock.sens_expand", "adaptive_varnet.AdaptiveVarNetBlock.model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "adaptive_varnet.AdaptiveVarNetBlock.sens_reduce", "ValueError", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "mask.byte", "mask.byte", "torch.where", "torch.where", "torch.where", "torch.where", "mask.byte"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_expand", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "current_kspace", ":", "torch", ".", "Tensor", ",", "\n", "ref_kspace", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "sens_maps", ":", "torch", ".", "Tensor", ",", "\n", "kspace", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "zero", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "current_kspace", ")", "\n", "\n", "if", "self", ".", "dc_mode", "==", "\"first\"", ":", "\n", "# DC before Refinement, this directly puts kspace rows from ref_kspace", "\n", "#  into current_kspace if dc_weight = 1.", "\n", "            ", "if", "self", ".", "sparse_dc_gradients", ":", "\n", "                ", "current_kspace", "=", "(", "\n", "current_kspace", "\n", "-", "torch", ".", "where", "(", "mask", ".", "byte", "(", ")", ",", "current_kspace", "-", "ref_kspace", ",", "zero", ")", "\n", "*", "self", ".", "dc_weight", "\n", ")", "\n", "", "else", ":", "\n", "# Values in current_kspace that should be replaced by actual sampled", "\n", "# information", "\n", "                ", "dc_kspace", "=", "current_kspace", "*", "mask", "\n", "# don't need to multiply ref_kspace by mask because ref_kspace is 0", "\n", "# where mask is 0", "\n", "current_kspace", "=", "(", "\n", "current_kspace", "-", "(", "dc_kspace", "-", "ref_kspace", ")", "*", "self", ".", "dc_weight", "\n", ")", "\n", "\n", "", "", "model_term", "=", "self", ".", "sens_expand", "(", "\n", "self", ".", "model", "(", "self", ".", "sens_reduce", "(", "current_kspace", ",", "sens_maps", ")", ")", ",", "\n", "sens_maps", ",", "\n", ")", "\n", "\n", "if", "self", ".", "dc_mode", "==", "\"first\"", ":", "\n", "            ", "return", "current_kspace", "-", "model_term", "\n", "", "elif", "self", ".", "dc_mode", "==", "\"simul\"", ":", "\n", "# Default implementation: simultaneous DC and Refinement", "\n", "            ", "if", "self", ".", "sparse_dc_gradients", ":", "\n", "                ", "soft_dc", "=", "(", "\n", "torch", ".", "where", "(", "mask", ".", "byte", "(", ")", ",", "current_kspace", "-", "ref_kspace", ",", "zero", ")", "\n", "*", "self", ".", "dc_weight", "\n", ")", "\n", "", "else", ":", "\n", "# Values in current_kspace that should be replaced by actual sampled", "\n", "# information", "\n", "                ", "dc_kspace", "=", "current_kspace", "*", "mask", "\n", "soft_dc", "=", "(", "dc_kspace", "-", "ref_kspace", ")", "*", "self", ".", "dc_weight", "\n", "", "return", "current_kspace", "-", "soft_dc", "-", "model_term", "\n", "", "elif", "self", ".", "dc_mode", "==", "\"last\"", ":", "\n", "            ", "combined_kspace", "=", "current_kspace", "-", "model_term", "\n", "\n", "if", "self", ".", "sparse_dc_gradients", ":", "\n", "                ", "combined_kspace", "=", "(", "\n", "combined_kspace", "\n", "-", "torch", ".", "where", "(", "mask", ".", "byte", "(", ")", ",", "combined_kspace", "-", "ref_kspace", ",", "zero", ")", "\n", "*", "self", ".", "dc_weight", "\n", ")", "\n", "", "else", ":", "\n", "# Values in combined_kspace that should be replaced by actual sampled", "\n", "# information", "\n", "                ", "dc_kspace", "=", "combined_kspace", "*", "mask", "\n", "# don't need to multiply ref_kspace by mask because ref_kspace is 0", "\n", "# where mask is 0", "\n", "combined_kspace", "=", "(", "\n", "combined_kspace", "-", "(", "dc_kspace", "-", "ref_kspace", ")", "*", "self", ".", "dc_weight", "\n", ")", "\n", "\n", "", "return", "combined_kspace", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"`dc_mode` must be one of 'first', 'last', or 'simul'. \"", "\n", "\"Not {}\"", ".", "format", "(", "self", ".", "dc_mode", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.__init__": [[30, 54], ["torch.Module.__init__", "unet.Unet"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "chans", ":", "int", ",", "\n", "num_pools", ":", "int", ",", "\n", "in_chans", ":", "int", "=", "2", ",", "\n", "out_chans", ":", "int", "=", "2", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            chans: Number of output channels of the first convolution layer.\n            num_pools: Number of down-sampling and up-sampling layers.\n            in_chans: Number of channels in the input to the U-Net model.\n            out_chans: Number of channels in the output to the U-Net model.\n            drop_prob: Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "unet", "=", "Unet", "(", "\n", "in_chans", "=", "in_chans", ",", "\n", "out_chans", "=", "out_chans", ",", "\n", "chans", "=", "chans", ",", "\n", "num_pool_layers", "=", "num_pools", ",", "\n", "drop_prob", "=", "drop_prob", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.complex_to_chan_dim": [[56, 60], ["x.permute().reshape", "x.permute"], "methods", ["None"], ["", "def", "complex_to_chan_dim", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", ",", "two", "=", "x", ".", "shape", "\n", "assert", "two", "==", "2", "\n", "return", "x", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "reshape", "(", "b", ",", "2", "*", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.chan_complex_to_last_dim": [[61, 66], ["x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "chan_complex_to_last_dim", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "b", ",", "c2", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "assert", "c2", "%", "2", "==", "0", "\n", "c", "=", "c2", "//", "2", "\n", "return", "x", ".", "view", "(", "b", ",", "2", ",", "c", ",", "h", ",", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.norm": [[67, 78], ["x.view.view.view", "x.view.view.mean().view", "x.view.view.std().view", "x.view.view.view", "x.view.view.mean", "x.view.view.std"], "methods", ["None"], ["", "def", "norm", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# group norm", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "2", ",", "c", "//", "2", "*", "h", "*", "w", ")", "\n", "\n", "mean", "=", "x", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ",", "2", ",", "1", ",", "1", ")", "\n", "std", "=", "x", ".", "std", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ",", "2", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "(", "x", "-", "mean", ")", "/", "std", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.unnorm": [[79, 83], ["None"], "methods", ["None"], ["", "def", "unnorm", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "mean", ":", "torch", ".", "Tensor", ",", "std", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "x", "*", "std", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad": [[84, 99], ["torch.pad", "torch.pad", "torch.pad", "math.floor", "math.ceil", "math.floor", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad"], ["", "def", "pad", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "List", "[", "int", "]", ",", "List", "[", "int", "]", ",", "int", ",", "int", "]", "]", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "w_mult", "=", "(", "(", "w", "-", "1", ")", "|", "15", ")", "+", "1", "\n", "h_mult", "=", "(", "(", "h", "-", "1", ")", "|", "15", ")", "+", "1", "\n", "w_pad", "=", "[", "math", ".", "floor", "(", "(", "w_mult", "-", "w", ")", "/", "2", ")", ",", "math", ".", "ceil", "(", "(", "w_mult", "-", "w", ")", "/", "2", ")", "]", "\n", "h_pad", "=", "[", "math", ".", "floor", "(", "(", "h_mult", "-", "h", ")", "/", "2", ")", ",", "math", ".", "ceil", "(", "(", "h_mult", "-", "h", ")", "/", "2", ")", "]", "\n", "# TODO: fix this type when PyTorch fixes theirs", "\n", "# the documentation lies - this actually takes a list", "\n", "# https://github.com/pytorch/pytorch/blob/master/torch/nn/functional.py#L3457", "\n", "# https://github.com/pytorch/pytorch/pull/16949", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "w_pad", "+", "h_pad", ")", "\n", "\n", "return", "x", ",", "(", "h_pad", ",", "w_pad", ",", "h_mult", ",", "w_mult", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.unpad": [[100, 109], ["None"], "methods", ["None"], ["", "def", "unpad", "(", "\n", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "h_pad", ":", "List", "[", "int", "]", ",", "\n", "w_pad", ":", "List", "[", "int", "]", ",", "\n", "h_mult", ":", "int", ",", "\n", "w_mult", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "x", "[", "...", ",", "h_pad", "[", "0", "]", ":", "h_mult", "-", "h_pad", "[", "1", "]", ",", "w_pad", "[", "0", "]", ":", "w_mult", "-", "w_pad", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.forward": [[110, 127], ["varnet.NormUnet.complex_to_chan_dim", "varnet.NormUnet.norm", "varnet.NormUnet.pad", "varnet.NormUnet.unet", "varnet.NormUnet.unpad", "varnet.NormUnet.unnorm", "varnet.NormUnet.chan_complex_to_last_dim", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.complex_to_chan_dim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.unet", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.unpad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.unnorm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.chan_complex_to_last_dim"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "not", "x", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Last dimension must be 2 for complex.\"", ")", "\n", "\n", "# get shapes for unet and normalize", "\n", "", "x", "=", "self", ".", "complex_to_chan_dim", "(", "x", ")", "\n", "x", ",", "mean", ",", "std", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", ",", "pad_sizes", "=", "self", ".", "pad", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "unet", "(", "x", ")", "\n", "\n", "# get shapes back and unnormalize", "\n", "x", "=", "self", ".", "unpad", "(", "x", ",", "*", "pad_sizes", ")", "\n", "x", "=", "self", ".", "unnorm", "(", "x", ",", "mean", ",", "std", ")", "\n", "x", "=", "self", ".", "chan_complex_to_last_dim", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.__init__": [[138, 165], ["torch.Module.__init__", "varnet.NormUnet"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "chans", ":", "int", ",", "\n", "num_pools", ":", "int", ",", "\n", "in_chans", ":", "int", "=", "2", ",", "\n", "out_chans", ":", "int", "=", "2", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", "mask_center", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            chans: Number of output channels of the first convolution layer.\n            num_pools: Number of down-sampling and up-sampling layers.\n            in_chans: Number of channels in the input to the U-Net model.\n            out_chans: Number of channels in the output to the U-Net model.\n            drop_prob: Dropout probability.\n            mask_center: Whether to mask center of k-space for sensitivity map\n                calculation.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mask_center", "=", "mask_center", "\n", "self", ".", "norm_unet", "=", "NormUnet", "(", "\n", "chans", ",", "\n", "num_pools", ",", "\n", "in_chans", "=", "in_chans", ",", "\n", "out_chans", "=", "out_chans", ",", "\n", "drop_prob", "=", "drop_prob", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.chans_to_batch_dim": [[167, 171], ["x.view"], "methods", ["None"], ["", "def", "chans_to_batch_dim", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", ",", "comp", "=", "x", ".", "shape", "\n", "\n", "return", "x", ".", "view", "(", "b", "*", "c", ",", "1", ",", "h", ",", "w", ",", "comp", ")", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.batch_chans_to_chan_dim": [[172, 177], ["x.view"], "methods", ["None"], ["", "def", "batch_chans_to_chan_dim", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "batch_size", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "bc", ",", "_", ",", "h", ",", "w", ",", "comp", "=", "x", ".", "shape", "\n", "c", "=", "bc", "//", "batch_size", "\n", "\n", "return", "x", ".", "view", "(", "batch_size", ",", "c", ",", "h", ",", "w", ",", "comp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.divide_root_sum_of_squares": [[178, 180], ["fastmri.rss_complex().unsqueeze().unsqueeze", "fastmri.rss_complex().unsqueeze", "fastmri.rss_complex"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss_complex"], ["", "def", "divide_root_sum_of_squares", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "x", "/", "fastmri", ".", "rss_complex", "(", "x", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.get_pad_and_num_low_freqs": [[181, 202], ["mask[].to", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "squeezed_mask[].flip", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "get_pad_and_num_low_freqs", "(", "\n", "self", ",", "mask", ":", "torch", ".", "Tensor", ",", "num_low_frequencies", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "num_low_frequencies", "is", "None", "or", "num_low_frequencies", "==", "0", ":", "\n", "# get low frequency line locations and mask them out", "\n", "            ", "squeezed_mask", "=", "mask", "[", ":", ",", "0", ",", "0", ",", ":", ",", "0", "]", ".", "to", "(", "torch", ".", "int8", ")", "\n", "cent", "=", "squeezed_mask", ".", "shape", "[", "1", "]", "//", "2", "\n", "# running argmin returns the first non-zero", "\n", "left", "=", "torch", ".", "argmin", "(", "squeezed_mask", "[", ":", ",", ":", "cent", "]", ".", "flip", "(", "1", ")", ",", "dim", "=", "1", ")", "\n", "right", "=", "torch", ".", "argmin", "(", "squeezed_mask", "[", ":", ",", "cent", ":", "]", ",", "dim", "=", "1", ")", "\n", "num_low_frequencies_tensor", "=", "torch", ".", "max", "(", "\n", "2", "*", "torch", ".", "min", "(", "left", ",", "right", ")", ",", "torch", ".", "ones_like", "(", "left", ")", "\n", ")", "# force a symmetric center unless 1", "\n", "", "else", ":", "\n", "            ", "num_low_frequencies_tensor", "=", "num_low_frequencies", "*", "torch", ".", "ones", "(", "\n", "mask", ".", "shape", "[", "0", "]", ",", "dtype", "=", "mask", ".", "dtype", ",", "device", "=", "mask", ".", "device", "\n", ")", "\n", "\n", "", "pad", "=", "(", "mask", ".", "shape", "[", "-", "2", "]", "-", "num_low_frequencies_tensor", "+", "1", ")", "//", "2", "\n", "\n", "return", "pad", ",", "num_low_frequencies_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.forward": [[203, 223], ["varnet.SensitivityModel.chans_to_batch_dim", "varnet.SensitivityModel.divide_root_sum_of_squares", "varnet.SensitivityModel.get_pad_and_num_low_freqs", "fastmri.data.transforms.batched_mask_center", "fastmri.ifft2c", "varnet.SensitivityModel.batch_chans_to_chan_dim", "varnet.SensitivityModel.norm_unet"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.chans_to_batch_dim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.divide_root_sum_of_squares", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.get_pad_and_num_low_freqs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.batched_mask_center", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.batch_chans_to_chan_dim"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "masked_kspace", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "num_low_frequencies", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "mask_center", ":", "\n", "            ", "pad", ",", "num_low_freqs", "=", "self", ".", "get_pad_and_num_low_freqs", "(", "\n", "mask", ",", "num_low_frequencies", "\n", ")", "\n", "masked_kspace", "=", "transforms", ".", "batched_mask_center", "(", "\n", "masked_kspace", ",", "pad", ",", "pad", "+", "num_low_freqs", "\n", ")", "\n", "\n", "# convert to image space", "\n", "", "images", ",", "batches", "=", "self", ".", "chans_to_batch_dim", "(", "fastmri", ".", "ifft2c", "(", "masked_kspace", ")", ")", "\n", "\n", "# estimate sensitivities", "\n", "return", "self", ".", "divide_root_sum_of_squares", "(", "\n", "self", ".", "batch_chans_to_chan_dim", "(", "self", ".", "norm_unet", "(", "images", ")", ",", "batches", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.VarNet.__init__": [[234, 265], ["torch.Module.__init__", "varnet.SensitivityModel", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "varnet.VarNetBlock", "varnet.NormUnet", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_cascades", ":", "int", "=", "12", ",", "\n", "sens_chans", ":", "int", "=", "8", ",", "\n", "sens_pools", ":", "int", "=", "4", ",", "\n", "chans", ":", "int", "=", "18", ",", "\n", "pools", ":", "int", "=", "4", ",", "\n", "mask_center", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            num_cascades: Number of cascades (i.e., layers) for variational\n                network.\n            sens_chans: Number of channels for sensitivity map U-Net.\n            sens_pools Number of downsampling and upsampling layers for\n                sensitivity map U-Net.\n            chans: Number of channels for cascade U-Net.\n            pools: Number of downsampling and upsampling layers for cascade\n                U-Net.\n            mask_center: Whether to mask center of k-space for sensitivity map\n                calculation.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sens_net", "=", "SensitivityModel", "(", "\n", "chans", "=", "sens_chans", ",", "\n", "num_pools", "=", "sens_pools", ",", "\n", "mask_center", "=", "mask_center", ",", "\n", ")", "\n", "self", ".", "cascades", "=", "nn", ".", "ModuleList", "(", "\n", "[", "VarNetBlock", "(", "NormUnet", "(", "chans", ",", "pools", ")", ")", "for", "_", "in", "range", "(", "num_cascades", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.VarNet.forward": [[267, 280], ["varnet.VarNet.sens_net", "masked_kspace.clone", "fastmri.rss", "cascade", "fastmri.complex_abs", "fastmri.ifft2c"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "masked_kspace", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "num_low_frequencies", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "sens_maps", "=", "self", ".", "sens_net", "(", "masked_kspace", ",", "mask", ",", "num_low_frequencies", ")", "\n", "kspace_pred", "=", "masked_kspace", ".", "clone", "(", ")", "\n", "\n", "for", "cascade", "in", "self", ".", "cascades", ":", "\n", "            ", "kspace_pred", "=", "cascade", "(", "kspace_pred", ",", "masked_kspace", ",", "mask", ",", "sens_maps", ")", "\n", "\n", "", "return", "fastmri", ".", "rss", "(", "fastmri", ".", "complex_abs", "(", "fastmri", ".", "ifft2c", "(", "kspace_pred", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.VarNetBlock.__init__": [[291, 301], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            model: Module for \"regularization\" component of variational\n                network.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "dc_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.VarNetBlock.sens_expand": [[302, 304], ["fastmri.fft2c", "fastmri.complex_mul"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul"], ["", "def", "sens_expand", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "sens_maps", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "fastmri", ".", "fft2c", "(", "fastmri", ".", "complex_mul", "(", "x", ",", "sens_maps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.VarNetBlock.sens_reduce": [[305, 309], ["fastmri.complex_mul().sum", "fastmri.complex_mul", "fastmri.ifft2c", "fastmri.complex_conj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj"], ["", "def", "sens_reduce", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "sens_maps", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "fastmri", ".", "complex_mul", "(", "\n", "fastmri", ".", "ifft2c", "(", "x", ")", ",", "fastmri", ".", "complex_conj", "(", "sens_maps", ")", "\n", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.VarNetBlock.forward": [[310, 324], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "varnet.VarNetBlock.sens_expand", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "varnet.VarNetBlock.model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "varnet.VarNetBlock.sens_reduce"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_expand", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "current_kspace", ":", "torch", ".", "Tensor", ",", "\n", "ref_kspace", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "sens_maps", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "zero", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "current_kspace", ")", "\n", "soft_dc", "=", "torch", ".", "where", "(", "mask", ",", "current_kspace", "-", "ref_kspace", ",", "zero", ")", "*", "self", ".", "dc_weight", "\n", "model_term", "=", "self", ".", "sens_expand", "(", "\n", "self", ".", "model", "(", "self", ".", "sens_reduce", "(", "current_kspace", ",", "sens_maps", ")", ")", ",", "sens_maps", "\n", ")", "\n", "\n", "return", "current_kspace", "-", "soft_dc", "-", "model_term", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.__init__": [[86, 175], ["pytorch_lightning.LightningDataModule.__init__", "data_module._check_both_not_none", "data_module._check_both_not_none", "data_module._check_both_not_none", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module._check_both_not_none", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module._check_both_not_none", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module._check_both_not_none"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data_path", ":", "Path", ",", "\n", "challenge", ":", "str", ",", "\n", "train_transform", ":", "Callable", ",", "\n", "val_transform", ":", "Callable", ",", "\n", "test_transform", ":", "Callable", ",", "\n", "combine_train_val", ":", "bool", "=", "False", ",", "\n", "test_split", ":", "str", "=", "\"test\"", ",", "\n", "test_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "val_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "test_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "val_volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "test_volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "use_dataset_cache_file", ":", "bool", "=", "True", ",", "\n", "batch_size", ":", "int", "=", "1", ",", "\n", "num_workers", ":", "int", "=", "4", ",", "\n", "distributed_sampler", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_path: Path to root data directory. For example, if knee/path\n                is the root directory with subdirectories multicoil_train and\n                multicoil_val, you would input knee/path for data_path.\n            challenge: Name of challenge from ('multicoil', 'singlecoil').\n            train_transform: A transform object for the training split.\n            val_transform: A transform object for the validation split.\n            test_transform: A transform object for the test split.\n            combine_train_val: Whether to combine train and val splits into one\n                large train dataset. Use this for leaderboard submission.\n            test_split: Name of test split from (\"test\", \"challenge\").\n            test_path: An optional test path. Passing this overwrites data_path\n                and test_split.\n            sample_rate: Fraction of slices of the training data split to use.\n                Can be set to less than 1.0 for rapid prototyping. If not set,\n                it defaults to 1.0. To subsample the dataset either set\n                sample_rate (sample by slice) or volume_sample_rate (sample by\n                volume), but not both.\n            val_sample_rate: Same as sample_rate, but for val split.\n            test_sample_rate: Same as sample_rate, but for test split.\n            volume_sample_rate: Fraction of volumes of the training data split\n                to use. Can be set to less than 1.0 for rapid prototyping. If\n                not set, it defaults to 1.0. To subsample the dataset either\n                set sample_rate (sample by slice) or volume_sample_rate (sample\n                by volume), but not both.\n            val_volume_sample_rate: Same as volume_sample_rate, but for val\n                split.\n            test_volume_sample_rate: Same as volume_sample_rate, but for val\n                split.\n            use_dataset_cache_file: Whether to cache dataset metadata. This is\n                very useful for large datasets like the brain data.\n            batch_size: Batch size.\n            num_workers: Number of workers for PyTorch dataloader.\n            distributed_sampler: Whether to use a distributed sampler. This\n                should be set to True if training with ddp.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "_check_both_not_none", "(", "sample_rate", ",", "volume_sample_rate", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Can set sample_rate or volume_sample_rate, but not both.\"", ")", "\n", "", "if", "_check_both_not_none", "(", "val_sample_rate", ",", "val_volume_sample_rate", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can set val_sample_rate or val_volume_sample_rate, but not both.\"", "\n", ")", "\n", "", "if", "_check_both_not_none", "(", "test_sample_rate", ",", "test_volume_sample_rate", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can set test_sample_rate or test_volume_sample_rate, but not both.\"", "\n", ")", "\n", "\n", "", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "challenge", "=", "challenge", "\n", "self", ".", "train_transform", "=", "train_transform", "\n", "self", ".", "val_transform", "=", "val_transform", "\n", "self", ".", "test_transform", "=", "test_transform", "\n", "self", ".", "combine_train_val", "=", "combine_train_val", "\n", "self", ".", "test_split", "=", "test_split", "\n", "self", ".", "test_path", "=", "test_path", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "val_sample_rate", "=", "val_sample_rate", "\n", "self", ".", "test_sample_rate", "=", "test_sample_rate", "\n", "self", ".", "volume_sample_rate", "=", "volume_sample_rate", "\n", "self", ".", "val_volume_sample_rate", "=", "val_volume_sample_rate", "\n", "self", ".", "test_volume_sample_rate", "=", "test_volume_sample_rate", "\n", "self", ".", "use_dataset_cache_file", "=", "use_dataset_cache_file", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "distributed_sampler", "=", "distributed_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule._create_data_loader": [[176, 268], ["torch.utils.data.DataLoader", "fastmri.data.CombinedSliceDataset", "fastmri.data.SliceDataset", "torch.utils.data.DistributedSampler", "fastmri.data.VolumeSampler"], "methods", ["None"], ["", "def", "_create_data_loader", "(", "\n", "self", ",", "\n", "data_transform", ":", "Callable", ",", "\n", "data_partition", ":", "str", ",", "\n", "sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "utils", ".", "data", ".", "DataLoader", ":", "\n", "        ", "if", "data_partition", "==", "\"train\"", ":", "\n", "            ", "is_train", "=", "True", "\n", "sample_rate", "=", "self", ".", "sample_rate", "if", "sample_rate", "is", "None", "else", "sample_rate", "\n", "volume_sample_rate", "=", "(", "\n", "self", ".", "volume_sample_rate", "\n", "if", "volume_sample_rate", "is", "None", "\n", "else", "volume_sample_rate", "\n", ")", "\n", "", "else", ":", "\n", "            ", "is_train", "=", "False", "\n", "if", "data_partition", "==", "\"val\"", ":", "\n", "                ", "sample_rate", "=", "(", "\n", "self", ".", "val_sample_rate", "if", "sample_rate", "is", "None", "else", "sample_rate", "\n", ")", "\n", "volume_sample_rate", "=", "(", "\n", "self", ".", "val_volume_sample_rate", "\n", "if", "volume_sample_rate", "is", "None", "\n", "else", "volume_sample_rate", "\n", ")", "\n", "", "elif", "data_partition", "==", "\"test\"", ":", "\n", "                ", "sample_rate", "=", "(", "\n", "self", ".", "test_sample_rate", "if", "sample_rate", "is", "None", "else", "sample_rate", "\n", ")", "\n", "volume_sample_rate", "=", "(", "\n", "self", ".", "test_volume_sample_rate", "\n", "if", "volume_sample_rate", "is", "None", "\n", "else", "volume_sample_rate", "\n", ")", "\n", "\n", "# if desired, combine train and val together for the train split", "\n", "", "", "dataset", ":", "Union", "[", "SliceDataset", ",", "CombinedSliceDataset", "]", "\n", "if", "is_train", "and", "self", ".", "combine_train_val", ":", "\n", "            ", "data_paths", "=", "[", "\n", "self", ".", "data_path", "/", "f\"{self.challenge}_train\"", ",", "\n", "self", ".", "data_path", "/", "f\"{self.challenge}_val\"", ",", "\n", "]", "\n", "data_transforms", "=", "[", "data_transform", ",", "data_transform", "]", "\n", "challenges", "=", "[", "self", ".", "challenge", ",", "self", ".", "challenge", "]", "\n", "sample_rates", ",", "volume_sample_rates", "=", "None", ",", "None", "# default: no subsampling", "\n", "if", "sample_rate", "is", "not", "None", ":", "\n", "                ", "sample_rates", "=", "[", "sample_rate", ",", "sample_rate", "]", "\n", "", "if", "volume_sample_rate", "is", "not", "None", ":", "\n", "                ", "volume_sample_rates", "=", "[", "volume_sample_rate", ",", "volume_sample_rate", "]", "\n", "", "dataset", "=", "CombinedSliceDataset", "(", "\n", "roots", "=", "data_paths", ",", "\n", "transforms", "=", "data_transforms", ",", "\n", "challenges", "=", "challenges", ",", "\n", "sample_rates", "=", "sample_rates", ",", "\n", "volume_sample_rates", "=", "volume_sample_rates", ",", "\n", "use_dataset_cache", "=", "self", ".", "use_dataset_cache_file", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "data_partition", "in", "(", "\"test\"", ",", "\"challenge\"", ")", "and", "self", ".", "test_path", "is", "not", "None", ":", "\n", "                ", "data_path", "=", "self", ".", "test_path", "\n", "", "else", ":", "\n", "                ", "data_path", "=", "self", ".", "data_path", "/", "f\"{self.challenge}_{data_partition}\"", "\n", "\n", "", "dataset", "=", "SliceDataset", "(", "\n", "root", "=", "data_path", ",", "\n", "transform", "=", "data_transform", ",", "\n", "sample_rate", "=", "sample_rate", ",", "\n", "volume_sample_rate", "=", "volume_sample_rate", ",", "\n", "challenge", "=", "self", ".", "challenge", ",", "\n", "use_dataset_cache", "=", "self", ".", "use_dataset_cache_file", ",", "\n", ")", "\n", "\n", "# ensure that entire volumes go to the same GPU in the ddp setting", "\n", "", "sampler", "=", "None", "\n", "\n", "if", "self", ".", "distributed_sampler", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "sampler", "=", "fastmri", ".", "data", ".", "VolumeSampler", "(", "dataset", ",", "shuffle", "=", "False", ")", "\n", "\n", "", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "is_train", "if", "sampler", "is", "None", "else", "False", ",", "\n", ")", "\n", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.prepare_data": [[269, 300], ["enumerate", "zip", "fastmri.data.SliceDataset"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "# call dataset for each split one time to make sure the cache is set up on the", "\n", "# rank 0 ddp process. if not using cache, don't do this", "\n", "        ", "if", "self", ".", "use_dataset_cache_file", ":", "\n", "            ", "if", "self", ".", "test_path", "is", "not", "None", ":", "\n", "                ", "test_path", "=", "self", ".", "test_path", "\n", "", "else", ":", "\n", "                ", "test_path", "=", "self", ".", "data_path", "/", "f\"{self.challenge}_test\"", "\n", "", "data_paths", "=", "[", "\n", "self", ".", "data_path", "/", "f\"{self.challenge}_train\"", ",", "\n", "self", ".", "data_path", "/", "f\"{self.challenge}_val\"", ",", "\n", "test_path", ",", "\n", "]", "\n", "data_transforms", "=", "[", "\n", "self", ".", "train_transform", ",", "\n", "self", ".", "val_transform", ",", "\n", "self", ".", "test_transform", ",", "\n", "]", "\n", "for", "i", ",", "(", "data_path", ",", "data_transform", ")", "in", "enumerate", "(", "\n", "zip", "(", "data_paths", ",", "data_transforms", ")", "\n", ")", ":", "\n", "# NOTE: Fixed so that val and test use correct sample rates", "\n", "                ", "sample_rate", "=", "self", ".", "sample_rate", "# if i == 0 else 1.0", "\n", "volume_sample_rate", "=", "self", ".", "volume_sample_rate", "# if i == 0 else None", "\n", "_", "=", "SliceDataset", "(", "\n", "root", "=", "data_path", ",", "\n", "transform", "=", "data_transform", ",", "\n", "sample_rate", "=", "sample_rate", ",", "\n", "volume_sample_rate", "=", "volume_sample_rate", ",", "\n", "challenge", "=", "self", ".", "challenge", ",", "\n", "use_dataset_cache", "=", "self", ".", "use_dataset_cache_file", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.train_dataloader": [[302, 304], ["data_module.FastMriDataModule._create_data_loader"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule._create_data_loader"], ["", "", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_data_loader", "(", "self", ".", "train_transform", ",", "data_partition", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.val_dataloader": [[305, 307], ["data_module.FastMriDataModule._create_data_loader"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule._create_data_loader"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_data_loader", "(", "self", ".", "val_transform", ",", "data_partition", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.test_dataloader": [[308, 311], ["data_module.FastMriDataModule._create_data_loader"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule._create_data_loader"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_data_loader", "(", "\n", "self", ".", "test_transform", ",", "data_partition", "=", "self", ".", "test_split", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args": [[313, 426], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_data_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "\n", "# dataset arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_path\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "Path", ",", "\n", "help", "=", "\"Path to fastMRI data root\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_path\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "Path", ",", "\n", "help", "=", "\"Path to data for test mode. This overwrites data_path and test_split\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--challenge\"", ",", "\n", "choices", "=", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ",", "\n", "default", "=", "\"singlecoil\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Which challenge to preprocess for\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_split\"", ",", "\n", "choices", "=", "(", "\"val\"", ",", "\"test\"", ",", "\"challenge\"", ")", ",", "\n", "default", "=", "\"test\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Which data split to use as test split\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sample_rate\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Fraction of slices in the dataset to use (train split only). If not \"", "\n", "\"given all will be used. Cannot set together with volume_sample_rate.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val_sample_rate\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Fraction of slices in the dataset to use (val split only). If not \"", "\n", "\"given all will be used. Cannot set together with volume_sample_rate.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_sample_rate\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Fraction of slices in the dataset to use (test split only). If not \"", "\n", "\"given all will be used. Cannot set together with volume_sample_rate.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--volume_sample_rate\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Fraction of volumes of the dataset to use (train split only). If not \"", "\n", "\"given all will be used. Cannot set together with sample_rate.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val_volume_sample_rate\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Fraction of volumes of the dataset to use (val split only). If not \"", "\n", "\"given all will be used. Cannot set together with val_sample_rate.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_volume_sample_rate\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Fraction of volumes of the dataset to use (test split only). If not \"", "\n", "\"given all will be used. Cannot set together with test_sample_rate.\"", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use_dataset_cache_file\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", ",", "\n", "help", "=", "\"Whether to cache dataset metadata in a pkl file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--combine_train_val\"", ",", "\n", "default", "=", "False", ",", "\n", "type", "=", "bool", ",", "\n", "help", "=", "\"Whether to combine train and val splits for training\"", ",", "\n", ")", "\n", "\n", "# data loader arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Data loader batch size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_workers\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of workers to use in data loader\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.worker_init_fn": [[19, 63], ["torch.utils.data.get_worker_info", "torch.distributed.is_available", "isinstance", "torch.distributed.is_initialized", "enumerate", "data.transform.mask_func.rng.seed", "dataset.transform.mask_func.rng.seed", "torch.distributed.get_rank", "len", "len", "torch.distributed.get_rank", "len"], "function", ["None"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "\"\"\"Handle random seeding for all mask_func.\"\"\"", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "data", ":", "Union", "[", "\n", "SliceDataset", ",", "CombinedSliceDataset", "\n", "]", "=", "worker_info", ".", "dataset", "# pylint: disable=no-member", "\n", "\n", "# Check if we are using DDP", "\n", "is_ddp", "=", "False", "\n", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "is_ddp", "=", "True", "\n", "\n", "# for NumPy random seed we need it to be in this range", "\n", "", "", "base_seed", "=", "worker_info", ".", "seed", "# pylint: disable=no-member", "\n", "\n", "if", "isinstance", "(", "data", ",", "CombinedSliceDataset", ")", ":", "\n", "        ", "for", "i", ",", "dataset", "in", "enumerate", "(", "data", ".", "datasets", ")", ":", "\n", "            ", "if", "dataset", ".", "transform", ".", "mask_func", "is", "not", "None", ":", "\n", "                ", "if", "(", "\n", "is_ddp", "\n", ")", ":", "# DDP training: unique seed is determined by worker, device, dataset", "\n", "                    ", "seed_i", "=", "(", "\n", "base_seed", "\n", "-", "worker_info", ".", "id", "\n", "+", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "*", "(", "worker_info", ".", "num_workers", "*", "len", "(", "data", ".", "datasets", ")", ")", "\n", "+", "worker_info", ".", "id", "*", "len", "(", "data", ".", "datasets", ")", "\n", "+", "i", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "seed_i", "=", "(", "\n", "base_seed", "\n", "-", "worker_info", ".", "id", "\n", "+", "worker_info", ".", "id", "*", "len", "(", "data", ".", "datasets", ")", "\n", "+", "i", "\n", ")", "\n", "", "dataset", ".", "transform", ".", "mask_func", ".", "rng", ".", "seed", "(", "seed_i", "%", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "", "", "", "elif", "data", ".", "transform", ".", "mask_func", "is", "not", "None", ":", "\n", "        ", "if", "is_ddp", ":", "# DDP training: unique seed is determined by worker and device", "\n", "            ", "seed", "=", "base_seed", "+", "torch", ".", "distributed", ".", "get_rank", "(", ")", "*", "worker_info", ".", "num_workers", "\n", "", "else", ":", "\n", "            ", "seed", "=", "base_seed", "\n", "", "data", ".", "transform", ".", "mask_func", ".", "rng", ".", "seed", "(", "seed", "%", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module._check_both_not_none": [[65, 70], ["None"], "function", ["None"], ["", "", "def", "_check_both_not_none", "(", "val1", ",", "val2", ")", ":", "\n", "    ", "if", "(", "val1", "is", "not", "None", ")", "and", "(", "val2", "is", "not", "None", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.__init__": [[150, 242], ["fastmri.pl_modules.mri_module.MriModule.__init__", "varnet_module.VarNetModule.save_hyperparameters", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedArraySum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedArraySum", "metrics.DistributedMetricSum", "varnet_module.VarNet", "fastmri.SSIMLoss"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["optim", ",", "self", ".", "lr_step_size", ",", "self", ".", "lr_gamma", "\n", ")", "\n", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", "=", "MriModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "\n", "# param overwrites", "\n", "\n", "# network params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_cascades\"", ",", "\n", "default", "=", "12", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of VarNet cascades\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pools\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of U-Net pooling layers in VarNet blocks\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--chans\"", ",", "\n", "default", "=", "18", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of channels for U-Net in VarNet blocks\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sens_pools\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of pooling layers for sense map estimation U-Net in VarNet\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sens_chans\"", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of channels for sense map estimation U-Net in VarNet\"", ",", "\n", ")", "\n", "\n", "# training params (opt)", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "default", "=", "0.0003", ",", "type", "=", "float", ",", "help", "=", "\"Adam learning rate\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_step_size\"", ",", "\n", "default", "=", "40", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Epoch at which to decrease step size\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_gamma\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Extent to which step size should be decreased\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_decay\"", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Strength of weight decay regularization\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.forward": [[243, 245], ["varnet_module.VarNetModule.varnet"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.training_step": [[246, 267], ["varnet_module.VarNetModule.", "fastmri.data.transforms.center_crop_to_smallest", "varnet_module.VarNetModule.loss", "varnet_module.VarNetModule.log", "output.unsqueeze", "target.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.validation_step": [[324, 342], ["varnet_module.VarNetModule.forward", "fastmri.data.transforms.center_crop_to_smallest", "varnet_module.VarNetModule.loss", "output.unsqueeze", "target.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryEnsemble.forward", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.test_step": [[561, 577], ["varnet_module.VarNetModule.", "fastmri.data.transforms.center_crop", "fastmri.data.transforms.center_crop.cpu().numpy", "fastmri.data.transforms.center_crop.cpu"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.configure_optimizers": [[579, 589], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "varnet_module.VarNetModule.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.add_model_specific_args": [[590, 656], ["argparse.ArgumentParser", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.__init__": [[28, 79], ["mri_module.MriModule.__init__", "unet_module.UnetModule.save_hyperparameters", "fastmri.models.Unet"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "32", ",", "\n", "num_pool_layers", "=", "4", ",", "\n", "drop_prob", "=", "0.0", ",", "\n", "lr", "=", "0.001", ",", "\n", "lr_step_size", "=", "40", ",", "\n", "lr_gamma", "=", "0.1", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int, optional): Number of channels in the input to the\n                U-Net model. Defaults to 1.\n            out_chans (int, optional): Number of channels in the output to the\n                U-Net model. Defaults to 1.\n            chans (int, optional): Number of output channels of the first\n                convolution layer. Defaults to 32.\n            num_pool_layers (int, optional): Number of down-sampling and\n                up-sampling layers. Defaults to 4.\n            drop_prob (float, optional): Dropout probability. Defaults to 0.0.\n            lr (float, optional): Learning rate. Defaults to 0.001.\n            lr_step_size (int, optional): Learning rate step size. Defaults to\n                40.\n            lr_gamma (float, optional): Learning rate gamma decay. Defaults to\n                0.1.\n            weight_decay (float, optional): Parameter for penalizing weights\n                norm. Defaults to 0.0.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_step_size", "=", "lr_step_size", "\n", "self", ".", "lr_gamma", "=", "lr_gamma", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "self", ".", "unet", "=", "Unet", "(", "\n", "in_chans", "=", "self", ".", "in_chans", ",", "\n", "out_chans", "=", "self", ".", "out_chans", ",", "\n", "chans", "=", "self", ".", "chans", ",", "\n", "num_pool_layers", "=", "self", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "self", ".", "drop_prob", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.forward": [[81, 83], ["unet_module.UnetModule.unet().squeeze", "unet_module.UnetModule.unet", "image.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.unet"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "unet", "(", "image", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.training_step": [[84, 91], ["unet_module.UnetModule.", "torch.nn.functional.l1_loss", "unet_module.UnetModule.log", "torch.nn.functional.l1_loss.detach"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "self", "(", "batch", ".", "image", ")", "\n", "loss", "=", "F", ".", "l1_loss", "(", "output", ",", "batch", ".", "target", ")", "\n", "\n", "self", ".", "log", "(", "\"loss\"", ",", "loss", ".", "detach", "(", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.validation_step": [[92, 105], ["unet_module.UnetModule.", "batch.mean.unsqueeze().unsqueeze", "batch.std.unsqueeze().unsqueeze", "torch.nn.functional.l1_loss", "batch.mean.unsqueeze", "batch.std.unsqueeze"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "self", "(", "batch", ".", "image", ")", "\n", "mean", "=", "batch", ".", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "std", "=", "batch", ".", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "return", "{", "\n", "\"batch_idx\"", ":", "batch_idx", ",", "\n", "\"fname\"", ":", "batch", ".", "fname", ",", "\n", "\"slice_num\"", ":", "batch", ".", "slice_num", ",", "\n", "\"max_value\"", ":", "batch", ".", "max_value", ",", "\n", "\"output\"", ":", "output", "*", "std", "+", "mean", ",", "\n", "\"target\"", ":", "batch", ".", "target", "*", "std", "+", "mean", ",", "\n", "\"val_loss\"", ":", "F", ".", "l1_loss", "(", "output", ",", "batch", ".", "target", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.test_step": [[107, 116], ["unet_module.UnetModule.forward", "batch.mean.unsqueeze().unsqueeze", "batch.std.unsqueeze().unsqueeze", "batch.mean.unsqueeze", "batch.std.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryEnsemble.forward"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "self", ".", "forward", "(", "batch", ".", "image", ")", "\n", "mean", "=", "batch", ".", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "std", "=", "batch", ".", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "return", "{", "\n", "\"fname\"", ":", "batch", ".", "fname", ",", "\n", "\"slice\"", ":", "batch", ".", "slice_num", ",", "\n", "\"output\"", ":", "(", "output", "*", "std", "+", "mean", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.configure_optimizers": [[118, 129], ["torch.optim.RMSprop", "torch.optim.lr_scheduler.StepLR", "unet_module.UnetModule.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optim", ",", "self", ".", "lr_step_size", ",", "self", ".", "lr_gamma", "\n", ")", "\n", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.unet_module.UnetModule.add_model_specific_args": [[130, 179], ["argparse.ArgumentParser", "mri_module.MriModule.add_model_specific_args", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument", "mri_module.MriModule.add_model_specific_args.add_argument"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", "=", "MriModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "\n", "# network params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--in_chans\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Number of U-Net input channels\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--out_chans\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Number of U-Net output chanenls\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--chans\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"Number of top-level U-Net filters.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_pool_layers\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of U-Net pooling layers.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--drop_prob\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "\"U-Net dropout probability\"", "\n", ")", "\n", "\n", "# training params (opt)", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "help", "=", "\"RMSProp learning rate\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_step_size\"", ",", "\n", "default", "=", "40", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Epoch at which to decrease step size\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "\"Amount to decrease step size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_decay\"", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Strength of weight decay regularization\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.DistributedMetricSum.__init__": [[22, 26], ["torchmetrics.metric.Metric.__init__", "mri_module.DistributedMetricSum.add_state", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dist_sync_on_step", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dist_sync_on_step", "=", "dist_sync_on_step", ")", "\n", "\n", "self", ".", "add_state", "(", "\"quantity\"", ",", "default", "=", "torch", ".", "tensor", "(", "0.0", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.DistributedMetricSum.update": [[27, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", ":", "# type: ignore", "\n", "        ", "self", ".", "quantity", "+=", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.DistributedMetricSum.compute": [[30, 32], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "quantity", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.__init__": [[54, 70], ["pytorch_lightning.LightningModule.__init__", "mri_module.DistributedMetricSum", "mri_module.DistributedMetricSum", "mri_module.DistributedMetricSum", "mri_module.DistributedMetricSum", "mri_module.DistributedMetricSum", "mri_module.DistributedMetricSum"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_log_images", ":", "int", "=", "16", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            num_log_images: Number of images to log. Defaults to 16.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_log_images", "=", "num_log_images", "\n", "self", ".", "val_log_indices", "=", "None", "\n", "\n", "self", ".", "NMSE", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "SSIM", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "PSNR", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "ValLoss", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TotExamples", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TotSliceExamples", "=", "DistributedMetricSum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.validation_step_end": [[71, 149], ["isinstance", "enumerate", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "enumerate", "val_logs[].unsqueeze", "val_logs[].unsqueeze", "list", "int", "[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "dict", "dict", "dict", "val_logs.keys", "RuntimeError", "RuntimeError", "RuntimeError", "[].unsqueeze", "[].unsqueeze", "torch.abs", "mri_module.MriModule.log_image", "mri_module.MriModule.log_image", "mri_module.MriModule.log_image", "[].cpu", "numpy.random.permutation", "[].unsqueeze.max", "[].unsqueeze.max", "torch.abs.max", "[].cpu", "[].cpu", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "len", "fastmri.evaluate.mse", "fastmri.evaluate.mse", "fastmri.evaluate.ssim", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim"], ["", "def", "validation_step_end", "(", "self", ",", "val_logs", ")", ":", "\n", "# check inputs", "\n", "        ", "for", "k", "in", "(", "\n", "\"batch_idx\"", ",", "\n", "\"fname\"", ",", "\n", "\"slice_num\"", ",", "\n", "\"max_value\"", ",", "\n", "\"output\"", ",", "\n", "\"target\"", ",", "\n", "\"val_loss\"", ",", "\n", ")", ":", "\n", "            ", "if", "k", "not", "in", "val_logs", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "f\"Expected key {k} in dict returned by validation_step.\"", "\n", ")", "\n", "", "", "if", "val_logs", "[", "\"output\"", "]", ".", "ndim", "==", "2", ":", "\n", "            ", "val_logs", "[", "\"output\"", "]", "=", "val_logs", "[", "\"output\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "val_logs", "[", "\"output\"", "]", ".", "ndim", "!=", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unexpected output size from validation_step.\"", ")", "\n", "", "if", "val_logs", "[", "\"target\"", "]", ".", "ndim", "==", "2", ":", "\n", "            ", "val_logs", "[", "\"target\"", "]", "=", "val_logs", "[", "\"target\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "val_logs", "[", "\"target\"", "]", ".", "ndim", "!=", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unexpected output size from validation_step.\"", ")", "\n", "\n", "# pick a set of images to log if we don't have one already", "\n", "", "if", "self", ".", "val_log_indices", "is", "None", ":", "\n", "            ", "self", ".", "val_log_indices", "=", "list", "(", "\n", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "trainer", ".", "val_dataloaders", "[", "0", "]", ")", ")", "[", "\n", ":", "self", ".", "num_log_images", "\n", "]", "\n", ")", "\n", "\n", "# log images to tensorboard", "\n", "", "if", "isinstance", "(", "val_logs", "[", "\"batch_idx\"", "]", ",", "int", ")", ":", "\n", "            ", "batch_indices", "=", "[", "val_logs", "[", "\"batch_idx\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "batch_indices", "=", "val_logs", "[", "\"batch_idx\"", "]", "\n", "", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_indices", ")", ":", "\n", "            ", "if", "batch_idx", "in", "self", ".", "val_log_indices", ":", "\n", "                ", "key", "=", "f\"val_images_idx_{batch_idx}\"", "\n", "target", "=", "val_logs", "[", "\"target\"", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "output", "=", "val_logs", "[", "\"output\"", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "error", "=", "torch", ".", "abs", "(", "target", "-", "output", ")", "\n", "output", "=", "output", "/", "output", ".", "max", "(", ")", "\n", "target", "=", "target", "/", "target", ".", "max", "(", ")", "\n", "error", "=", "error", "/", "error", ".", "max", "(", ")", "\n", "self", ".", "log_image", "(", "f\"{key}/target\"", ",", "target", ")", "\n", "self", ".", "log_image", "(", "f\"{key}/reconstruction\"", ",", "output", ")", "\n", "self", ".", "log_image", "(", "f\"{key}/error\"", ",", "error", ")", "\n", "\n", "# compute evaluation metrics", "\n", "", "", "mse_vals", "=", "defaultdict", "(", "dict", ")", "\n", "target_norms", "=", "defaultdict", "(", "dict", ")", "\n", "ssim_vals", "=", "defaultdict", "(", "dict", ")", "\n", "max_vals", "=", "dict", "(", ")", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "val_logs", "[", "\"fname\"", "]", ")", ":", "\n", "            ", "slice_num", "=", "int", "(", "val_logs", "[", "\"slice_num\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "maxval", "=", "val_logs", "[", "\"max_value\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "val_logs", "[", "\"output\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "val_logs", "[", "\"target\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mse_vals", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "mse", "(", "target", ",", "output", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "target_norms", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "mse", "(", "target", ",", "np", ".", "zeros_like", "(", "target", ")", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "ssim_vals", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "ssim", "(", "target", "[", "None", ",", "...", "]", ",", "output", "[", "None", ",", "...", "]", ",", "maxval", "=", "maxval", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "max_vals", "[", "fname", "]", "=", "maxval", "\n", "\n", "", "return", "{", "\n", "\"val_loss\"", ":", "val_logs", "[", "\"val_loss\"", "]", ",", "\n", "\"mse_vals\"", ":", "dict", "(", "mse_vals", ")", ",", "\n", "\"target_norms\"", ":", "dict", "(", "target_norms", ")", ",", "\n", "\"ssim_vals\"", ":", "dict", "(", "ssim_vals", ")", ",", "\n", "\"max_vals\"", ":", "max_vals", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image": [[151, 153], ["mri_module.MriModule.logger.experiment.add_image"], "methods", ["None"], ["", "def", "log_image", "(", "self", ",", "name", ",", "image", ")", ":", "\n", "        ", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "name", ",", "image", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.validation_epoch_end": [[154, 222], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "collections.defaultdict.keys", "mri_module.MriModule.NMSE", "mri_module.MriModule.SSIM", "mri_module.MriModule.PSNR", "mri_module.MriModule.TotExamples", "mri_module.MriModule.ValLoss", "mri_module.MriModule.TotSliceExamples", "mri_module.MriModule.log", "metrics.items", "losses.append", "val_log[].keys", "val_log[].keys", "val_log[].keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "dict.keys", "torch.mean", "torch.mean", "torch.tensor", "torch.sum", "torch.tensor", "mri_module.MriModule.log", "val_log[].view", "mse_vals[].update", "target_norms[].update", "ssim_vals[].update", "torch.cat", "torch.cat", "torch.mean", "torch.cat", "len", "torch.log10", "torch.cat", "v.view", "v.view", "torch.log10", "mse_vals[].items", "target_norms[].items", "torch.tensor", "v.view", "ssim_vals[].items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update"], ["", "def", "validation_epoch_end", "(", "self", ",", "val_logs", ")", ":", "\n", "# aggregate losses", "\n", "        ", "losses", "=", "[", "]", "\n", "mse_vals", "=", "defaultdict", "(", "dict", ")", "\n", "target_norms", "=", "defaultdict", "(", "dict", ")", "\n", "ssim_vals", "=", "defaultdict", "(", "dict", ")", "\n", "max_vals", "=", "dict", "(", ")", "\n", "\n", "# use dict updates to handle duplicate slices", "\n", "for", "val_log", "in", "val_logs", ":", "\n", "            ", "losses", ".", "append", "(", "val_log", "[", "\"val_loss\"", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "for", "k", "in", "val_log", "[", "\"mse_vals\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "mse_vals", "[", "k", "]", ".", "update", "(", "val_log", "[", "\"mse_vals\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_log", "[", "\"target_norms\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "target_norms", "[", "k", "]", ".", "update", "(", "val_log", "[", "\"target_norms\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_log", "[", "\"ssim_vals\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ssim_vals", "[", "k", "]", ".", "update", "(", "val_log", "[", "\"ssim_vals\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_log", "[", "\"max_vals\"", "]", ":", "\n", "                ", "max_vals", "[", "k", "]", "=", "val_log", "[", "\"max_vals\"", "]", "[", "k", "]", "\n", "\n", "# check to make sure we have all files in all metrics", "\n", "", "", "assert", "(", "\n", "mse_vals", ".", "keys", "(", ")", "\n", "==", "target_norms", ".", "keys", "(", ")", "\n", "==", "ssim_vals", ".", "keys", "(", ")", "\n", "==", "max_vals", ".", "keys", "(", ")", "\n", ")", "\n", "\n", "# apply means across image volumes", "\n", "metrics", "=", "{", "\"nmse\"", ":", "0", ",", "\"ssim\"", ":", "0", ",", "\"psnr\"", ":", "0", "}", "\n", "local_examples", "=", "0", "\n", "for", "fname", "in", "mse_vals", ".", "keys", "(", ")", ":", "\n", "            ", "local_examples", "=", "local_examples", "+", "1", "\n", "mse_val", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "mse_vals", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "target_norm", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "target_norms", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "metrics", "[", "\"nmse\"", "]", "=", "metrics", "[", "\"nmse\"", "]", "+", "mse_val", "/", "target_norm", "\n", "metrics", "[", "\"psnr\"", "]", "=", "(", "\n", "metrics", "[", "\"psnr\"", "]", "\n", "+", "20", "\n", "*", "torch", ".", "log10", "(", "\n", "torch", ".", "tensor", "(", "\n", "max_vals", "[", "fname", "]", ",", "dtype", "=", "mse_val", ".", "dtype", ",", "device", "=", "mse_val", ".", "device", "\n", ")", "\n", ")", "\n", "-", "10", "*", "torch", ".", "log10", "(", "mse_val", ")", "\n", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "metrics", "[", "\"ssim\"", "]", "+", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "ssim_vals", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "\n", "# reduce across ddp via sum", "\n", "", "metrics", "[", "\"nmse\"", "]", "=", "self", ".", "NMSE", "(", "metrics", "[", "\"nmse\"", "]", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "self", ".", "SSIM", "(", "metrics", "[", "\"ssim\"", "]", ")", "\n", "metrics", "[", "\"psnr\"", "]", "=", "self", ".", "PSNR", "(", "metrics", "[", "\"psnr\"", "]", ")", "\n", "tot_examples", "=", "self", ".", "TotExamples", "(", "torch", ".", "tensor", "(", "local_examples", ")", ")", "\n", "val_loss", "=", "self", ".", "ValLoss", "(", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "losses", ")", ")", ")", "\n", "tot_slice_examples", "=", "self", ".", "TotSliceExamples", "(", "\n", "torch", ".", "tensor", "(", "len", "(", "losses", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", ")", "\n", "\n", "self", ".", "log", "(", "\"validation_loss\"", ",", "val_loss", "/", "tot_slice_examples", ",", "prog_bar", "=", "True", ")", "\n", "for", "metric", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "f\"val_metrics/{metric}\"", ",", "value", "/", "tot_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.test_epoch_end": [[223, 245], ["collections.defaultdict", "hasattr", "mri_module.MriModule.print", "fastmri.save_reconstructions", "enumerate", "numpy.stack", "zip", "pathlib.Path", "pathlib.Path.cwd", "int", "sorted", "slice_num.cpu", "outputs[].items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions"], ["", "", "def", "test_epoch_end", "(", "self", ",", "test_logs", ")", ":", "\n", "        ", "outputs", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "# use dicts for aggregation to handle duplicate slices in ddp mode", "\n", "for", "log", "in", "test_logs", ":", "\n", "            ", "for", "i", ",", "(", "fname", ",", "slice_num", ")", "in", "enumerate", "(", "zip", "(", "log", "[", "\"fname\"", "]", ",", "log", "[", "\"slice\"", "]", ")", ")", ":", "\n", "                ", "outputs", "[", "fname", "]", "[", "int", "(", "slice_num", ".", "cpu", "(", ")", ")", "]", "=", "log", "[", "\"output\"", "]", "[", "i", "]", "\n", "\n", "# stack all the slices for each file", "\n", "", "", "for", "fname", "in", "outputs", ":", "\n", "            ", "outputs", "[", "fname", "]", "=", "np", ".", "stack", "(", "\n", "[", "out", "for", "_", ",", "out", "in", "sorted", "(", "outputs", "[", "fname", "]", ".", "items", "(", ")", ")", "]", "\n", ")", "\n", "\n", "# pull the default_root_dir if we have a trainer, otherwise save to cwd", "\n", "", "if", "hasattr", "(", "self", ",", "\"trainer\"", ")", ":", "\n", "            ", "save_path", "=", "pathlib", ".", "Path", "(", "self", ".", "trainer", ".", "default_root_dir", ")", "/", "\"reconstructions\"", "\n", "", "else", ":", "\n", "            ", "save_path", "=", "pathlib", ".", "Path", ".", "cwd", "(", ")", "/", "\"reconstructions\"", "\n", "", "self", ".", "print", "(", "f\"Saving reconstructions to {save_path}\"", ")", "\n", "\n", "fastmri", ".", "save_reconstructions", "(", "outputs", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.add_model_specific_args": [[246, 262], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "\n", "# logging params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_log_images\"", ",", "\n", "default", "=", "16", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of images to log to Tensorboard\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.__init__": [[31, 187], ["fastmri.pl_modules.mri_module.MriModule.__init__", "adaptive_varnet_module.AdaptiveVarNetModule.save_hyperparameters", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedArraySum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedMetricSum", "metrics.DistributedArraySum", "metrics.DistributedMetricSum", "fastmri.models.AdaptiveVarNet", "fastmri.SSIMLoss"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_cascades", ":", "int", "=", "12", ",", "\n", "pools", ":", "int", "=", "4", ",", "\n", "chans", ":", "int", "=", "18", ",", "\n", "sens_pools", ":", "int", "=", "4", ",", "\n", "sens_chans", ":", "int", "=", "8", ",", "\n", "lr", ":", "float", "=", "0.0003", ",", "\n", "lr_step_size", ":", "int", "=", "40", ",", "\n", "lr_gamma", ":", "float", "=", "0.1", ",", "\n", "weight_decay", ":", "float", "=", "0.0", ",", "\n", "budget", ":", "int", "=", "22", ",", "\n", "cascades_per_policy", ":", "int", "=", "1", ",", "\n", "loupe_mask", ":", "bool", "=", "False", ",", "\n", "use_softplus", ":", "bool", "=", "True", ",", "\n", "crop_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "128", ",", "128", ")", ",", "\n", "num_actions", ":", "int", "=", "None", ",", "\n", "num_sense_lines", ":", "int", "=", "None", ",", "\n", "hard_dc", ":", "bool", "=", "False", ",", "\n", "dc_mode", ":", "str", "=", "\"simul\"", ",", "\n", "slope", ":", "float", "=", "10", ",", "\n", "sparse_dc_gradients", ":", "bool", "=", "True", ",", "\n", "straight_through_slope", ":", "float", "=", "10", ",", "\n", "st_clamp", ":", "bool", "=", "False", ",", "\n", "policy_fc_size", ":", "int", "=", "256", ",", "\n", "policy_drop_prob", ":", "float", "=", "0.0", ",", "\n", "policy_num_fc_layers", ":", "int", "=", "3", ",", "\n", "policy_activation", ":", "str", "=", "\"leakyrelu\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            num_cascades: Number of cascades (i.e., layers) for variational\n                network.\n            pools: Number of downsampling and upsampling layers for cascade\n                U-Net.\n            chans: Number of channels for cascade U-Net.\n            sens_pools: Number of downsampling and upsampling layers for\n                sensitivity map U-Net.\n            sens_chans: Number of channels for sensitivity map U-Net.\n            lr: Learning rate.\n            lr_step_size: Learning rate step size.\n            lr_gamma: Learning rate gamma decay.\n            weight_decay: Parameter for penalizing weights norm.\n            budget: Number of adaptive acquisitions to perform, if doing adaptive\n                acquisition.\n            cascades_per_policy: How many cascades to use per policy step.\n            loupe_mask: Whether to use LOUPE-like mask instead of equispaced\n                (still keeps center lines).\n            use_softplus: Whether to use softplus or sigmoid in LOUPE.\n            crop_size: tuple, crop size of MR images.\n            num_actions: Number of possible actions to sample (=image width). Used\n                only when loupe_mask is True.\n            num_sense_lines: Number of low-frequency lines to use for\n                sensitivity map computation, must be even or `None`. Default\n                `None` will automatically compute the number from masks.\n                Default behaviour may cause some slices to use more\n                low-frequency lines than others, when used in conjunction with\n                e.g. the EquispacedMaskFunc defaults.\n            hard_dc: Whether to do hard DC layers instead of soft (learned).\n            dc_mode: str, whether to do DC before ('first'), after ('last') or\n                simultaneously ('simul') with Refinement step. Default 'simul'.\n            slope: Slope to use for sigmoid in LOUPE and Policy forward, or\n                beta to use in softplus.\n            sparse_dc_gradients: Whether to sparsify the gradients in DC by\n                using torch.where() with the mask: this essentially removes\n                gradients for the policy on unsampled rows.\n            straight_through_slope: Slope to use in Straight Through estimator.\n            st_clamp: Whether to clamp gradients between -1 and 1 in straight\n                through estimator.\n            policy_fc_size: int, size of fully connected layers in Policy\n                architecture.\n            policy_drop_prob: float, dropout probability of convolutional\n                layers in Policy.\n            policy_num_fc_layers: int, number of fully-connected layers to\n                apply after the convolutional layers in the policy.\n            policy_activation: str, \"leakyrelu\" or \"elu\". Activation function\n                to use between fully-connected layers in the policy. Only used\n                if policy_num_fc_layers > 1.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "num_cascades", "=", "num_cascades", "\n", "self", ".", "pools", "=", "pools", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "sens_pools", "=", "sens_pools", "\n", "self", ".", "sens_chans", "=", "sens_chans", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_step_size", "=", "lr_step_size", "\n", "self", ".", "lr_gamma", "=", "lr_gamma", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "cascades_per_policy", "=", "cascades_per_policy", "\n", "self", ".", "loupe_mask", "=", "loupe_mask", "\n", "self", ".", "use_softplus", "=", "use_softplus", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "self", ".", "num_sense_lines", "=", "num_sense_lines", "\n", "self", ".", "hard_dc", "=", "hard_dc", "\n", "self", ".", "dc_mode", "=", "dc_mode", "\n", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "sparse_dc_gradients", "=", "sparse_dc_gradients", "\n", "self", ".", "straight_through_slope", "=", "straight_through_slope", "\n", "self", ".", "st_clamp", "=", "st_clamp", "\n", "\n", "self", ".", "policy_fc_size", "=", "policy_fc_size", "\n", "self", ".", "policy_drop_prob", "=", "policy_drop_prob", "\n", "self", ".", "policy_num_fc_layers", "=", "policy_num_fc_layers", "\n", "self", ".", "policy_activation", "=", "policy_activation", "\n", "\n", "# logging functions", "\n", "self", ".", "NMSE", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "SSIM", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "PSNR", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "ValLoss", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TotExamples", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TotSliceExamples", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "ValMargDist", "=", "DistributedArraySum", "(", ")", "\n", "self", ".", "ValCondEnt", "=", "DistributedMetricSum", "(", ")", "\n", "\n", "self", ".", "TrainNMSE", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TrainSSIM", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TrainPSNR", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TrainLoss", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TrainTotExamples", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TrainTotSliceExamples", "=", "DistributedMetricSum", "(", ")", "\n", "self", ".", "TrainMargDist", "=", "DistributedArraySum", "(", ")", "\n", "self", ".", "TrainCondEnt", "=", "DistributedMetricSum", "(", ")", "\n", "\n", "self", ".", "varnet", "=", "AdaptiveVarNet", "(", "\n", "num_cascades", "=", "self", ".", "num_cascades", ",", "\n", "sens_chans", "=", "self", ".", "sens_chans", ",", "\n", "sens_pools", "=", "self", ".", "sens_pools", ",", "\n", "chans", "=", "self", ".", "chans", ",", "\n", "pools", "=", "self", ".", "pools", ",", "\n", "budget", "=", "self", ".", "budget", ",", "\n", "cascades_per_policy", "=", "self", ".", "cascades_per_policy", ",", "\n", "loupe_mask", "=", "self", ".", "loupe_mask", ",", "\n", "crop_size", "=", "self", ".", "crop_size", ",", "\n", "use_softplus", "=", "self", ".", "use_softplus", ",", "\n", "num_actions", "=", "self", ".", "num_actions", ",", "\n", "num_sense_lines", "=", "self", ".", "num_sense_lines", ",", "\n", "hard_dc", "=", "self", ".", "hard_dc", ",", "\n", "dc_mode", "=", "self", ".", "dc_mode", ",", "\n", "slope", "=", "self", ".", "slope", ",", "\n", "sparse_dc_gradients", "=", "self", ".", "sparse_dc_gradients", ",", "\n", "st_clamp", "=", "self", ".", "st_clamp", ",", "\n", "policy_fc_size", "=", "self", ".", "policy_fc_size", ",", "\n", "policy_drop_prob", "=", "self", ".", "policy_drop_prob", ",", "\n", "policy_num_fc_layers", "=", "self", ".", "policy_num_fc_layers", ",", "\n", "policy_activation", "=", "self", ".", "policy_activation", ",", "\n", ")", "\n", "\n", "self", ".", "loss", "=", "fastmri", ".", "SSIMLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.forward": [[188, 190], ["adaptive_varnet_module.AdaptiveVarNetModule.varnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "kspace", ",", "masked_kspace", ",", "mask", ")", ":", "\n", "        ", "return", "self", ".", "varnet", "(", "kspace", ",", "masked_kspace", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.compute_loss": [[191, 196], ["adaptive_varnet_module.AdaptiveVarNetModule.loss", "output.unsqueeze", "target.unsqueeze"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "output", ",", "target", ",", "max_value", ")", ":", "\n", "        ", "base_loss", "=", "self", ".", "loss", "(", "\n", "output", ".", "unsqueeze", "(", "1", ")", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "data_range", "=", "max_value", "\n", ")", "\n", "return", "base_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.training_step": [[197, 216], ["adaptive_varnet_module.AdaptiveVarNetModule.", "fastmri.data.transforms.center_crop_to_smallest", "adaptive_varnet_module.AdaptiveVarNetModule.compute_loss", "adaptive_varnet_module.AdaptiveVarNetModule.log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.compute_loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", ",", "extra_outputs", "=", "self", "(", "batch", ".", "kspace", ",", "batch", ".", "masked_kspace", ",", "batch", ".", "mask", ")", "\n", "\n", "target", ",", "output", "=", "transforms", ".", "center_crop_to_smallest", "(", "batch", ".", "target", ",", "output", ")", "\n", "\n", "loss", "=", "self", ".", "compute_loss", "(", "output", ",", "target", ",", "batch", ".", "max_value", ")", "\n", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ")", "\n", "\n", "# Return same stuff as on validation step here", "\n", "return", "{", "\n", "\"batch_idx\"", ":", "batch_idx", ",", "\n", "\"fname\"", ":", "batch", ".", "fname", ",", "\n", "\"slice_num\"", ":", "batch", ".", "slice_num", ",", "\n", "\"max_value\"", ":", "batch", ".", "max_value", ",", "\n", "\"output\"", ":", "output", ",", "\n", "\"target\"", ":", "target", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"extra_outputs\"", ":", "extra_outputs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.training_step_end": [[218, 289], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "enumerate", "train_logs[].unsqueeze", "train_logs[].unsqueeze", "adaptive_varnet_module.AdaptiveVarNetModule.TrainMargDist", "torch.sum", "adaptive_varnet_module.AdaptiveVarNetModule.TrainCondEnt", "int", "[].cpu().numpy", "[].detach().cpu().numpy", "[].cpu().numpy", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "train_logs.keys", "RuntimeError", "RuntimeError", "RuntimeError", "len", "prob_masks.sum", "torch.sum.sum", "[].cpu", "torch.log", "[].cpu", "[].detach().cpu", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "fastmri.evaluate.mse", "fastmri.evaluate.mse", "fastmri.evaluate.ssim", "[].detach", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim"], ["", "def", "training_step_end", "(", "self", ",", "train_logs", ")", ":", "\n", "# check inputs", "\n", "        ", "for", "k", "in", "(", "\n", "\"batch_idx\"", ",", "\n", "\"fname\"", ",", "\n", "\"slice_num\"", ",", "\n", "\"max_value\"", ",", "\n", "\"output\"", ",", "\n", "\"target\"", ",", "\n", "\"loss\"", ",", "\n", "\"extra_outputs\"", ",", "\n", ")", ":", "\n", "            ", "if", "k", "not", "in", "train_logs", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "f\"Expected key {k} in dict returned by training_step.\"", "\n", ")", "\n", "", "", "if", "train_logs", "[", "\"output\"", "]", ".", "ndim", "==", "2", ":", "\n", "            ", "train_logs", "[", "\"output\"", "]", "=", "train_logs", "[", "\"output\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "train_logs", "[", "\"output\"", "]", ".", "ndim", "!=", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unexpected output size from training_step.\"", ")", "\n", "", "if", "train_logs", "[", "\"target\"", "]", ".", "ndim", "==", "2", ":", "\n", "            ", "train_logs", "[", "\"target\"", "]", "=", "train_logs", "[", "\"target\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "train_logs", "[", "\"target\"", "]", ".", "ndim", "!=", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unexpected output size from training_step.\"", ")", "\n", "\n", "# Get marginal and conditional distribution", "\n", "# Doing this here will probably lead to overcounting some", "\n", "#  slice wrt to others, but the only way to solve this is to", "\n", "#  do it at epoch end, which requires storing a lot of results.", "\n", "", "if", "\"prob_masks\"", "in", "train_logs", "[", "\"extra_outputs\"", "]", ":", "\n", "            ", "assert", "self", ".", "budget", "is", "not", "None", "\n", "# Only log last prob_mask", "\n", "# N11W1", "\n", "prob_masks", "=", "train_logs", "[", "\"extra_outputs\"", "]", "[", "\"prob_masks\"", "]", "[", "-", "1", "]", "\n", "if", "len", "(", "train_logs", "[", "\"extra_outputs\"", "]", "[", "\"prob_masks\"", "]", ")", "==", "1", ":", "\n", "                ", "budget", "=", "self", ".", "budget", "\n", "", "else", ":", "# multiple policies use only last budget for normalisation", "\n", "                ", "budget", "=", "self", ".", "varnet", ".", "policies", "[", "-", "1", "]", ".", "budget", "\n", "", "prob_masks", "=", "prob_masks", "[", ":", ",", "0", ",", "0", ",", ":", ",", "0", "]", "/", "budget", "\n", "self", ".", "TrainMargDist", "(", "prob_masks", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "cond_ents", "=", "torch", ".", "sum", "(", "-", "1", "*", "prob_masks", "*", "torch", ".", "log", "(", "prob_masks", "+", "1e-8", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "TrainCondEnt", "(", "cond_ents", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "\n", "# compute evaluation metrics", "\n", "", "mse_vals", "=", "defaultdict", "(", "dict", ")", "\n", "target_norms", "=", "defaultdict", "(", "dict", ")", "\n", "ssim_vals", "=", "defaultdict", "(", "dict", ")", "\n", "max_vals", "=", "dict", "(", ")", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "train_logs", "[", "\"fname\"", "]", ")", ":", "\n", "            ", "slice_num", "=", "int", "(", "train_logs", "[", "\"slice_num\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "maxval", "=", "train_logs", "[", "\"max_value\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "train_logs", "[", "\"output\"", "]", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "train_logs", "[", "\"target\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mse_vals", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "mse", "(", "target", ",", "output", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "target_norms", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "mse", "(", "target", ",", "np", ".", "zeros_like", "(", "target", ")", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "ssim_vals", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "ssim", "(", "target", "[", "None", ",", "...", "]", ",", "output", "[", "None", ",", "...", "]", ",", "maxval", "=", "maxval", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "max_vals", "[", "fname", "]", "=", "maxval", "\n", "\n", "", "return", "{", "\n", "\"loss\"", ":", "train_logs", "[", "\"loss\"", "]", ",", "\n", "\"mse_vals\"", ":", "mse_vals", ",", "\n", "\"target_norms\"", ":", "target_norms", ",", "\n", "\"ssim_vals\"", ":", "ssim_vals", ",", "\n", "\"max_vals\"", ":", "max_vals", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.validation_step": [[291, 307], ["adaptive_varnet_module.AdaptiveVarNetModule.", "fastmri.data.transforms.center_crop_to_smallest", "adaptive_varnet_module.AdaptiveVarNetModule.compute_loss"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.compute_loss"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", ",", "extra_outputs", "=", "self", "(", "batch", ".", "kspace", ",", "batch", ".", "masked_kspace", ",", "batch", ".", "mask", ")", "\n", "\n", "target", ",", "output", "=", "transforms", ".", "center_crop_to_smallest", "(", "batch", ".", "target", ",", "output", ")", "\n", "\n", "loss", "=", "self", ".", "compute_loss", "(", "output", ",", "target", ",", "batch", ".", "max_value", ")", "\n", "\n", "return", "{", "\n", "\"batch_idx\"", ":", "batch_idx", ",", "\n", "\"fname\"", ":", "batch", ".", "fname", ",", "\n", "\"slice_num\"", ":", "batch", ".", "slice_num", ",", "\n", "\"max_value\"", ":", "batch", ".", "max_value", ",", "\n", "\"output\"", ":", "output", ",", "\n", "\"target\"", ":", "target", ",", "\n", "\"val_loss\"", ":", "loss", ",", "\n", "\"extra_outputs\"", ":", "extra_outputs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.validation_step_end": [[309, 406], ["isinstance", "enumerate", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "enumerate", "val_logs[].unsqueeze", "val_logs[].unsqueeze", "list", "adaptive_varnet_module.AdaptiveVarNetModule.ValMargDist", "torch.sum", "adaptive_varnet_module.AdaptiveVarNetModule.ValCondEnt", "int", "[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "val_logs.keys", "RuntimeError", "RuntimeError", "RuntimeError", "[].unsqueeze", "[].unsqueeze", "torch.abs", "adaptive_varnet_module.AdaptiveVarNetModule.log_image", "adaptive_varnet_module.AdaptiveVarNetModule.log_image", "adaptive_varnet_module.AdaptiveVarNetModule.log_image", "len", "prob_masks.sum", "torch.sum.sum", "[].cpu", "numpy.random.permutation", "[].unsqueeze.max", "[].unsqueeze.max", "torch.abs.max", "torch.log", "[].cpu", "[].cpu", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "len", "fastmri.evaluate.mse", "fastmri.evaluate.mse", "fastmri.evaluate.ssim", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim"], ["", "def", "validation_step_end", "(", "self", ",", "val_logs", ")", ":", "\n", "# check inputs", "\n", "        ", "for", "k", "in", "(", "\n", "\"batch_idx\"", ",", "\n", "\"fname\"", ",", "\n", "\"slice_num\"", ",", "\n", "\"max_value\"", ",", "\n", "\"output\"", ",", "\n", "\"target\"", ",", "\n", "\"val_loss\"", ",", "\n", "\"extra_outputs\"", ",", "\n", ")", ":", "\n", "            ", "if", "k", "not", "in", "val_logs", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "f\"Expected key {k} in dict returned by validation_step.\"", "\n", ")", "\n", "", "", "if", "val_logs", "[", "\"output\"", "]", ".", "ndim", "==", "2", ":", "\n", "            ", "val_logs", "[", "\"output\"", "]", "=", "val_logs", "[", "\"output\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "val_logs", "[", "\"output\"", "]", ".", "ndim", "!=", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unexpected output size from validation_step.\"", ")", "\n", "", "if", "val_logs", "[", "\"target\"", "]", ".", "ndim", "==", "2", ":", "\n", "            ", "val_logs", "[", "\"target\"", "]", "=", "val_logs", "[", "\"target\"", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "val_logs", "[", "\"target\"", "]", ".", "ndim", "!=", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unexpected output size from validation_step.\"", ")", "\n", "\n", "# pick a set of images to log if we don't have one already", "\n", "", "if", "self", ".", "val_log_indices", "is", "None", ":", "\n", "            ", "self", ".", "val_log_indices", "=", "list", "(", "\n", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "trainer", ".", "val_dataloaders", "[", "0", "]", ")", ")", "[", "\n", ":", "self", ".", "num_log_images", "\n", "]", "\n", ")", "\n", "\n", "# log images to tensorboard", "\n", "", "if", "isinstance", "(", "val_logs", "[", "\"batch_idx\"", "]", ",", "int", ")", ":", "\n", "            ", "batch_indices", "=", "[", "val_logs", "[", "\"batch_idx\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "batch_indices", "=", "val_logs", "[", "\"batch_idx\"", "]", "\n", "", "for", "i", ",", "batch_idx", "in", "enumerate", "(", "batch_indices", ")", ":", "\n", "            ", "if", "batch_idx", "in", "self", ".", "val_log_indices", ":", "\n", "                ", "key", "=", "f\"val_images_idx_{batch_idx}\"", "\n", "target", "=", "val_logs", "[", "\"target\"", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "output", "=", "val_logs", "[", "\"output\"", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "error", "=", "torch", ".", "abs", "(", "target", "-", "output", ")", "\n", "output", "=", "output", "/", "output", ".", "max", "(", ")", "\n", "target", "=", "target", "/", "target", ".", "max", "(", ")", "\n", "error", "=", "error", "/", "error", ".", "max", "(", ")", "\n", "self", ".", "log_image", "(", "f\"{key}/target\"", ",", "target", ")", "\n", "self", ".", "log_image", "(", "f\"{key}/reconstruction\"", ",", "output", ")", "\n", "self", ".", "log_image", "(", "f\"{key}/error\"", ",", "error", ")", "\n", "\n", "# Get marginal and conditional distribution", "\n", "# Doing this here will probably lead to overcounting some", "\n", "#  slice wrt to others, but the only way to solve this is to", "\n", "#  do it at epoch end, which requires storing a lot of results.", "\n", "", "", "if", "\"prob_masks\"", "in", "val_logs", "[", "\"extra_outputs\"", "]", ":", "\n", "            ", "assert", "self", ".", "budget", "is", "not", "None", "\n", "# Only log last prob_mask", "\n", "# N11W1", "\n", "prob_masks", "=", "val_logs", "[", "\"extra_outputs\"", "]", "[", "\"prob_masks\"", "]", "[", "-", "1", "]", "\n", "if", "len", "(", "val_logs", "[", "\"extra_outputs\"", "]", "[", "\"prob_masks\"", "]", ")", "==", "1", ":", "\n", "                ", "budget", "=", "self", ".", "budget", "\n", "", "else", ":", "# multiple policies use only last budget for normalisation", "\n", "                ", "budget", "=", "self", ".", "varnet", ".", "policies", "[", "-", "1", "]", ".", "budget", "\n", "", "prob_masks", "=", "prob_masks", "[", ":", ",", "0", ",", "0", ",", ":", ",", "0", "]", "/", "budget", "\n", "self", ".", "ValMargDist", "(", "prob_masks", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "cond_ents", "=", "torch", ".", "sum", "(", "-", "1", "*", "prob_masks", "*", "torch", ".", "log", "(", "prob_masks", "+", "1e-8", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "ValCondEnt", "(", "cond_ents", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "\n", "# compute evaluation metrics", "\n", "", "mse_vals", "=", "defaultdict", "(", "dict", ")", "\n", "target_norms", "=", "defaultdict", "(", "dict", ")", "\n", "ssim_vals", "=", "defaultdict", "(", "dict", ")", "\n", "max_vals", "=", "dict", "(", ")", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "val_logs", "[", "\"fname\"", "]", ")", ":", "\n", "            ", "slice_num", "=", "int", "(", "val_logs", "[", "\"slice_num\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "maxval", "=", "val_logs", "[", "\"max_value\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "val_logs", "[", "\"output\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "val_logs", "[", "\"target\"", "]", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mse_vals", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "mse", "(", "target", ",", "output", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "target_norms", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "mse", "(", "target", ",", "np", ".", "zeros_like", "(", "target", ")", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "ssim_vals", "[", "fname", "]", "[", "slice_num", "]", "=", "torch", ".", "tensor", "(", "\n", "evaluate", ".", "ssim", "(", "target", "[", "None", ",", "...", "]", ",", "output", "[", "None", ",", "...", "]", ",", "maxval", "=", "maxval", ")", "\n", ")", ".", "view", "(", "1", ")", "\n", "max_vals", "[", "fname", "]", "=", "maxval", "\n", "\n", "", "return", "{", "\n", "\"val_loss\"", ":", "val_logs", "[", "\"val_loss\"", "]", ",", "\n", "\"mse_vals\"", ":", "mse_vals", ",", "\n", "\"target_norms\"", ":", "target_norms", ",", "\n", "\"ssim_vals\"", ":", "ssim_vals", ",", "\n", "\"max_vals\"", ":", "max_vals", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.training_epoch_end": [[408, 475], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "collections.defaultdict.keys", "adaptive_varnet_module.AdaptiveVarNetModule.TrainNMSE", "adaptive_varnet_module.AdaptiveVarNetModule.TrainSSIM", "adaptive_varnet_module.AdaptiveVarNetModule.TrainPSNR", "adaptive_varnet_module.AdaptiveVarNetModule.TrainTotExamples", "adaptive_varnet_module.AdaptiveVarNetModule.TrainLoss", "adaptive_varnet_module.AdaptiveVarNetModule.TrainTotSliceExamples", "adaptive_varnet_module.AdaptiveVarNetModule.log", "metrics.items", "losses.append", "train_log[].keys", "train_log[].keys", "train_log[].keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "dict.keys", "torch.mean", "torch.mean", "torch.tensor", "torch.sum", "torch.tensor", "adaptive_varnet_module.AdaptiveVarNetModule.log", "train_log[].data.view", "mse_vals[].update", "target_norms[].update", "ssim_vals[].update", "torch.cat", "torch.cat", "torch.mean", "torch.cat", "len", "torch.log10", "torch.cat", "v.view", "v.view", "torch.log10", "mse_vals[].items", "target_norms[].items", "torch.tensor", "v.view", "ssim_vals[].items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update"], ["", "def", "training_epoch_end", "(", "self", ",", "train_logs", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "mse_vals", "=", "defaultdict", "(", "dict", ")", "\n", "target_norms", "=", "defaultdict", "(", "dict", ")", "\n", "ssim_vals", "=", "defaultdict", "(", "dict", ")", "\n", "max_vals", "=", "dict", "(", ")", "\n", "\n", "# use dict updates to handle duplicate slices", "\n", "for", "train_log", "in", "train_logs", ":", "\n", "            ", "losses", ".", "append", "(", "train_log", "[", "\"loss\"", "]", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "for", "k", "in", "train_log", "[", "\"mse_vals\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "mse_vals", "[", "k", "]", ".", "update", "(", "train_log", "[", "\"mse_vals\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "train_log", "[", "\"target_norms\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "target_norms", "[", "k", "]", ".", "update", "(", "train_log", "[", "\"target_norms\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "train_log", "[", "\"ssim_vals\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ssim_vals", "[", "k", "]", ".", "update", "(", "train_log", "[", "\"ssim_vals\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "train_log", "[", "\"max_vals\"", "]", ":", "\n", "                ", "max_vals", "[", "k", "]", "=", "train_log", "[", "\"max_vals\"", "]", "[", "k", "]", "\n", "\n", "# check to make sure we have all files in all metrics", "\n", "", "", "assert", "(", "\n", "mse_vals", ".", "keys", "(", ")", "\n", "==", "target_norms", ".", "keys", "(", ")", "\n", "==", "ssim_vals", ".", "keys", "(", ")", "\n", "==", "max_vals", ".", "keys", "(", ")", "\n", ")", "\n", "\n", "# apply means across image volumes", "\n", "metrics", "=", "{", "\"nmse\"", ":", "0", ",", "\"ssim\"", ":", "0", ",", "\"psnr\"", ":", "0", "}", "\n", "local_examples", "=", "0", "\n", "for", "fname", "in", "mse_vals", ".", "keys", "(", ")", ":", "\n", "            ", "local_examples", "=", "local_examples", "+", "1", "\n", "mse_val", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "mse_vals", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "target_norm", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "target_norms", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "metrics", "[", "\"nmse\"", "]", "=", "metrics", "[", "\"nmse\"", "]", "+", "mse_val", "/", "target_norm", "\n", "metrics", "[", "\"psnr\"", "]", "=", "(", "\n", "metrics", "[", "\"psnr\"", "]", "\n", "+", "20", "\n", "*", "torch", ".", "log10", "(", "\n", "torch", ".", "tensor", "(", "\n", "max_vals", "[", "fname", "]", ",", "dtype", "=", "mse_val", ".", "dtype", ",", "device", "=", "mse_val", ".", "device", "\n", ")", "\n", ")", "\n", "-", "10", "*", "torch", ".", "log10", "(", "mse_val", ")", "\n", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "metrics", "[", "\"ssim\"", "]", "+", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "ssim_vals", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "\n", "# reduce across ddp via sum", "\n", "", "metrics", "[", "\"nmse\"", "]", "=", "self", ".", "TrainNMSE", "(", "metrics", "[", "\"nmse\"", "]", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "self", ".", "TrainSSIM", "(", "metrics", "[", "\"ssim\"", "]", ")", "\n", "metrics", "[", "\"psnr\"", "]", "=", "self", ".", "TrainPSNR", "(", "metrics", "[", "\"psnr\"", "]", ")", "\n", "tot_examples", "=", "self", ".", "TrainTotExamples", "(", "torch", ".", "tensor", "(", "local_examples", ")", ")", "\n", "train_loss", "=", "self", ".", "TrainLoss", "(", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "losses", ")", ")", ")", "\n", "tot_slice_examples", "=", "self", ".", "TrainTotSliceExamples", "(", "\n", "torch", ".", "tensor", "(", "len", "(", "losses", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", ")", "\n", "\n", "self", ".", "log", "(", "\"training_loss\"", ",", "train_loss", "/", "tot_slice_examples", ",", "prog_bar", "=", "True", ")", "\n", "for", "metric", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "f\"train_metrics/{metric}\"", ",", "value", "/", "tot_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.validation_epoch_end": [[476, 544], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "collections.defaultdict.keys", "adaptive_varnet_module.AdaptiveVarNetModule.NMSE", "adaptive_varnet_module.AdaptiveVarNetModule.SSIM", "adaptive_varnet_module.AdaptiveVarNetModule.PSNR", "adaptive_varnet_module.AdaptiveVarNetModule.TotExamples", "adaptive_varnet_module.AdaptiveVarNetModule.ValLoss", "adaptive_varnet_module.AdaptiveVarNetModule.TotSliceExamples", "adaptive_varnet_module.AdaptiveVarNetModule.log", "metrics.items", "losses.append", "val_log[].keys", "val_log[].keys", "val_log[].keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "dict.keys", "torch.mean", "torch.mean", "torch.tensor", "torch.sum", "torch.tensor", "adaptive_varnet_module.AdaptiveVarNetModule.log", "val_log[].view", "mse_vals[].update", "target_norms[].update", "ssim_vals[].update", "torch.cat", "torch.cat", "torch.mean", "torch.cat", "len", "torch.log10", "torch.cat", "v.view", "v.view", "torch.log10", "mse_vals[].items", "target_norms[].items", "torch.tensor", "v.view", "ssim_vals[].items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update"], ["", "", "def", "validation_epoch_end", "(", "self", ",", "val_logs", ")", ":", "\n", "# aggregate losses", "\n", "        ", "losses", "=", "[", "]", "\n", "mse_vals", "=", "defaultdict", "(", "dict", ")", "\n", "target_norms", "=", "defaultdict", "(", "dict", ")", "\n", "ssim_vals", "=", "defaultdict", "(", "dict", ")", "\n", "max_vals", "=", "dict", "(", ")", "\n", "\n", "# use dict updates to handle duplicate slices", "\n", "for", "val_log", "in", "val_logs", ":", "\n", "            ", "losses", ".", "append", "(", "val_log", "[", "\"val_loss\"", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "for", "k", "in", "val_log", "[", "\"mse_vals\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "mse_vals", "[", "k", "]", ".", "update", "(", "val_log", "[", "\"mse_vals\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_log", "[", "\"target_norms\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "target_norms", "[", "k", "]", ".", "update", "(", "val_log", "[", "\"target_norms\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_log", "[", "\"ssim_vals\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ssim_vals", "[", "k", "]", ".", "update", "(", "val_log", "[", "\"ssim_vals\"", "]", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_log", "[", "\"max_vals\"", "]", ":", "\n", "                ", "max_vals", "[", "k", "]", "=", "val_log", "[", "\"max_vals\"", "]", "[", "k", "]", "\n", "\n", "# check to make sure we have all files in all metrics", "\n", "", "", "assert", "(", "\n", "mse_vals", ".", "keys", "(", ")", "\n", "==", "target_norms", ".", "keys", "(", ")", "\n", "==", "ssim_vals", ".", "keys", "(", ")", "\n", "==", "max_vals", ".", "keys", "(", ")", "\n", ")", "\n", "\n", "# apply means across image volumes", "\n", "metrics", "=", "{", "\"nmse\"", ":", "0", ",", "\"ssim\"", ":", "0", ",", "\"psnr\"", ":", "0", "}", "\n", "local_examples", "=", "0", "\n", "for", "fname", "in", "mse_vals", ".", "keys", "(", ")", ":", "\n", "            ", "local_examples", "=", "local_examples", "+", "1", "\n", "mse_val", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "mse_vals", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "target_norm", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "target_norms", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "metrics", "[", "\"nmse\"", "]", "=", "metrics", "[", "\"nmse\"", "]", "+", "mse_val", "/", "target_norm", "\n", "metrics", "[", "\"psnr\"", "]", "=", "(", "\n", "metrics", "[", "\"psnr\"", "]", "\n", "+", "20", "\n", "*", "torch", ".", "log10", "(", "\n", "torch", ".", "tensor", "(", "\n", "max_vals", "[", "fname", "]", ",", "dtype", "=", "mse_val", ".", "dtype", ",", "device", "=", "mse_val", ".", "device", "\n", ")", "\n", ")", "\n", "-", "10", "*", "torch", ".", "log10", "(", "mse_val", ")", "\n", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "metrics", "[", "\"ssim\"", "]", "+", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "[", "v", ".", "view", "(", "-", "1", ")", "for", "_", ",", "v", "in", "ssim_vals", "[", "fname", "]", ".", "items", "(", ")", "]", ")", "\n", ")", "\n", "\n", "# reduce across ddp via sum", "\n", "", "metrics", "[", "\"nmse\"", "]", "=", "self", ".", "NMSE", "(", "metrics", "[", "\"nmse\"", "]", ")", "\n", "metrics", "[", "\"ssim\"", "]", "=", "self", ".", "SSIM", "(", "metrics", "[", "\"ssim\"", "]", ")", "\n", "metrics", "[", "\"psnr\"", "]", "=", "self", ".", "PSNR", "(", "metrics", "[", "\"psnr\"", "]", ")", "\n", "tot_examples", "=", "self", ".", "TotExamples", "(", "torch", ".", "tensor", "(", "local_examples", ")", ")", "\n", "val_loss", "=", "self", ".", "ValLoss", "(", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "losses", ")", ")", ")", "\n", "tot_slice_examples", "=", "self", ".", "TotSliceExamples", "(", "\n", "torch", ".", "tensor", "(", "len", "(", "losses", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", ")", "\n", "\n", "self", ".", "log", "(", "\"validation_loss\"", ",", "val_loss", "/", "tot_slice_examples", ",", "prog_bar", "=", "True", ")", "\n", "for", "metric", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log", "(", "f\"val_metrics/{metric}\"", ",", "value", "/", "tot_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.test_step": [[545, 560], ["adaptive_varnet_module.AdaptiveVarNetModule.", "fastmri.data.transforms.center_crop", "fastmri.data.transforms.center_crop.cpu().numpy", "fastmri.data.transforms.center_crop.cpu"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], ["", "", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", ",", "extra_outputs", "=", "self", "(", "batch", ".", "kspace", ",", "batch", ".", "masked_kspace", ",", "batch", ".", "mask", ")", "\n", "\n", "crop_size", "=", "batch", ".", "crop_size", "[", "0", "]", "# always have a batch size of 1 for varnet", "\n", "\n", "# check for FLAIR 203", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "            ", "crop_size", "=", "(", "output", ".", "shape", "[", "-", "1", "]", ",", "output", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "output", "=", "transforms", ".", "center_crop", "(", "output", ",", "crop_size", ")", "\n", "\n", "return", "{", "\n", "\"fname\"", ":", "batch", ".", "fname", ",", "\n", "\"slice\"", ":", "batch", ".", "slice_num", ",", "\n", "\"output\"", ":", "output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.configure_optimizers": [[562, 572], ["torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "adaptive_varnet_module.AdaptiveVarNetModule.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# This needs to be a class attribute for storing of gradients workaround", "\n", "        ", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "self", ".", "optim", ",", "self", ".", "lr_step_size", ",", "self", ".", "lr_gamma", "\n", ")", "\n", "\n", "return", "[", "self", ".", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args": [[573, 639], ["argparse.ArgumentParser", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument", "fastmri.pl_modules.mri_module.MriModule.add_model_specific_args.add_argument"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Define parameters that only apply to this model\n        \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", "=", "MriModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "\n", "# param overwrites", "\n", "\n", "# network params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_cascades\"", ",", "\n", "default", "=", "12", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of VarNet cascades\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pools\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of U-Net pooling layers in VarNet blocks\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--chans\"", ",", "\n", "default", "=", "18", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of channels for U-Net in VarNet blocks\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sens_pools\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of pooling layers for sense map estimation U-Net in VarNet\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sens_chans\"", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of channels for sense map estimation U-Net in VarNet\"", ",", "\n", ")", "\n", "\n", "# training params (opt)", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "default", "=", "0.0003", ",", "type", "=", "float", ",", "help", "=", "\"Adam learning rate\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_step_size\"", ",", "\n", "default", "=", "40", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Epoch at which to decrease step size\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_gamma\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Extent to which step size should be decreased\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--weight_decay\"", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Strength of weight decay regularization\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedArraySum.__init__": [[13, 17], ["super().__init__", "metrics.DistributedArraySum.add_state", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dist_sync_on_step", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dist_sync_on_step", "=", "dist_sync_on_step", ")", "\n", "\n", "self", ".", "add_state", "(", "\"quantity\"", ",", "default", "=", "torch", ".", "zeros", "(", "1", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedArraySum.update": [[18, 22], ["batch.to", "torch.Size", "metrics.DistributedArraySum.quantity.expand().clone", "metrics.DistributedArraySum.quantity.expand"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", ":", "# type: ignore", "\n", "        ", "if", "self", ".", "quantity", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", "]", ")", ":", "# type: ignore", "\n", "            ", "self", ".", "quantity", "=", "self", ".", "quantity", ".", "expand", "(", "batch", ".", "shape", "[", "0", "]", ")", ".", "clone", "(", ")", "# type: ignore", "\n", "", "self", ".", "quantity", "+=", "batch", ".", "to", "(", "self", ".", "quantity", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedArraySum.compute": [[23, 25], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "quantity", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.__init__": [[28, 32], ["super().__init__", "metrics.DistributedMetricSum.add_state", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dist_sync_on_step", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dist_sync_on_step", "=", "dist_sync_on_step", ")", "\n", "\n", "self", ".", "add_state", "(", "\"quantity\"", ",", "default", "=", "torch", ".", "tensor", "(", "0.0", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update": [[33, 35], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", ":", "# type: ignore", "\n", "        ", "self", ".", "quantity", "+=", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute": [[36, 38], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "quantity", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNet.__init__": [[34, 90], ["torch.Module.__init__", "fastmri.models.adaptive_varnet.AdaptiveSensitivityModel", "torch.ModuleList", "torch.ModuleList", "fastmri.models.adaptive_varnet.AdaptiveVarNetBlock", "fastmri.models.varnet.NormUnet", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "num_cascades", ":", "int", "=", "12", ",", "\n", "pools", ":", "int", "=", "4", ",", "\n", "chans", ":", "int", "=", "18", ",", "\n", "sens_pools", ":", "int", "=", "4", ",", "\n", "sens_chans", ":", "int", "=", "8", ",", "\n", "lr", ":", "float", "=", "0.0003", ",", "\n", "lr_step_size", ":", "int", "=", "40", ",", "\n", "lr_gamma", ":", "float", "=", "0.1", ",", "\n", "weight_decay", ":", "float", "=", "0.0", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            num_cascades: Number of cascades (i.e., layers) for variational\n                network.\n            pools: Number of downsampling and upsampling layers for cascade\n                U-Net.\n            chans: Number of channels for cascade U-Net.\n            sens_pools: Number of downsampling and upsampling layers for\n                sensitivity map U-Net.\n            sens_chans: Number of channels for sensitivity map U-Net.\n            lr: Learning rate.\n            lr_step_size: Learning rate step size.\n            lr_gamma: Learning rate gamma decay.\n            weight_decay: Parameter for penalizing weights norm.\n            num_sense_lines: Number of low-frequency lines to use for sensitivity map\n                computation, must be even or `None`. Default `None` will automatically\n                compute the number from masks. Default behaviour may cause some slices to\n                use more low-frequency lines than others, when used in conjunction with\n                e.g. the EquispacedMaskFunc defaults. To prevent this, either set\n                `num_sense_lines`, or set `skip_low_freqs` and `skip_around_low_freqs`\n                to `True` in the EquispacedMaskFunc. Note that setting this value may\n                lead to undesired behaviour when training on multiple accelerations\n                simultaneously.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "num_cascades", "=", "num_cascades", "\n", "self", ".", "pools", "=", "pools", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "sens_pools", "=", "sens_pools", "\n", "self", ".", "sens_chans", "=", "sens_chans", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_step_size", "=", "lr_step_size", "\n", "self", ".", "lr_gamma", "=", "lr_gamma", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "self", ".", "varnet", "=", "VarNet", "(", "\n", "num_cascades", "=", "self", ".", "num_cascades", ",", "\n", "sens_chans", "=", "self", ".", "sens_chans", ",", "\n", "sens_pools", "=", "self", ".", "sens_pools", ",", "\n", "chans", "=", "self", ".", "chans", ",", "\n", "pools", "=", "self", ".", "pools", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNet.forward": [[93, 126], ["collections.defaultdict", "varnet_module.VarNet.sens_net", "extra_outputs[].append", "masked_kspace.clone", "extra_outputs[].append", "fastmri.complex_abs().squeeze", "extra_outputs[].append", "fastmri.rss", "varnet_module.VarNet.detach().cpu", "mask.detach().cpu", "fastmri.complex_abs().squeeze.detach().cpu", "cascade", "fastmri.complex_abs().squeeze", "extra_outputs[].append", "fastmri.complex_abs", "fastmri.complex_abs", "fastmri.complex_abs().squeeze.detach().cpu", "fastmri.ifft2c", "varnet_module.VarNet.detach", "mask.detach", "varnet_module.VarNet.sens_reduce", "fastmri.complex_abs().squeeze.detach", "fastmri.complex_abs", "varnet_module.VarNet.sens_reduce", "fastmri.complex_abs().squeeze.detach"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce"], ["self", ".", "loss", "=", "fastmri", ".", "SSIMLoss", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "masked_kspace", ",", "mask", ",", "num_low_frequencies", ")", ":", "\n", "        ", "return", "self", ".", "varnet", "(", "masked_kspace", ",", "mask", ",", "num_low_frequencies", ")", "\n", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "self", "(", "batch", ".", "masked_kspace", ",", "batch", ".", "mask", ",", "batch", ".", "num_low_frequencies", ")", "\n", "\n", "target", ",", "output", "=", "transforms", ".", "center_crop_to_smallest", "(", "batch", ".", "target", ",", "output", ")", "\n", "loss", "=", "self", ".", "loss", "(", "\n", "output", ".", "unsqueeze", "(", "1", ")", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "data_range", "=", "batch", ".", "max_value", "\n", ")", "\n", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "self", ".", "forward", "(", "\n", "batch", ".", "masked_kspace", ",", "batch", ".", "mask", ",", "batch", ".", "num_low_frequencies", "\n", ")", "\n", "target", ",", "output", "=", "transforms", ".", "center_crop_to_smallest", "(", "batch", ".", "target", ",", "output", ")", "\n", "\n", "return", "{", "\n", "\"batch_idx\"", ":", "batch_idx", ",", "\n", "\"fname\"", ":", "batch", ".", "fname", ",", "\n", "\"slice_num\"", ":", "batch", ".", "slice_num", ",", "\n", "\"max_value\"", ":", "batch", ".", "max_value", ",", "\n", "\"output\"", ":", "output", ",", "\n", "\"target\"", ":", "target", ",", "\n", "\"val_loss\"", ":", "self", ".", "loss", "(", "\n", "output", ".", "unsqueeze", "(", "1", ")", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "data_range", "=", "batch", ".", "max_value", "\n", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNet.sens_reduce": [[127, 131], ["fastmri.ifft2c", "fastmri.complex_mul().sum", "fastmri.complex_mul", "fastmri.complex_conj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj"], ["\n", "", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "output", "=", "self", "(", "batch", ".", "masked_kspace", ",", "batch", ".", "mask", ",", "batch", ".", "num_low_frequencies", ")", "\n", "\n", "# check for FLAIR 203", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.training_step_end": [[269, 322], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "enumerate", "train_logs[].unsqueeze", "train_logs[].unsqueeze", "int", "[].cpu().numpy", "[].detach().cpu().numpy", "[].cpu().numpy", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "train_logs.keys", "RuntimeError", "RuntimeError", "RuntimeError", "[].cpu", "[].cpu", "[].detach().cpu", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "fastmri.evaluate.mse", "fastmri.evaluate.mse", "fastmri.evaluate.ssim", "[].detach", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.validation_step_end": [[344, 422], ["isinstance", "enumerate", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "enumerate", "val_logs[].unsqueeze", "val_logs[].unsqueeze", "list", "int", "[].cpu().numpy", "[].cpu().numpy", "[].cpu().numpy", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "val_logs.keys", "RuntimeError", "RuntimeError", "RuntimeError", "[].unsqueeze", "[].unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "varnet_module.VarNetModule.log_image", "varnet_module.VarNetModule.log_image", "varnet_module.VarNetModule.log_image", "[].cpu", "numpy.random.permutation", "[].unsqueeze.max", "[].unsqueeze.max", "torch.abs.max", "torch.abs.max", "[].cpu", "[].cpu", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "fastmri.evaluate.mse", "fastmri.evaluate.mse", "fastmri.evaluate.ssim", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.mri_module.MriModule.log_image", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.training_epoch_end": [[424, 491], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "collections.defaultdict.keys", "varnet_module.VarNetModule.TrainNMSE", "varnet_module.VarNetModule.TrainSSIM", "varnet_module.VarNetModule.TrainPSNR", "varnet_module.VarNetModule.TrainTotExamples", "varnet_module.VarNetModule.TrainLoss", "varnet_module.VarNetModule.TrainTotSliceExamples", "varnet_module.VarNetModule.log", "metrics.items", "losses.append", "train_log[].keys", "train_log[].keys", "train_log[].keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "dict.keys", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "varnet_module.VarNetModule.log", "train_log[].data.view", "mse_vals[].update", "target_norms[].update", "ssim_vals[].update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "v.view", "v.view", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "mse_vals[].items", "target_norms[].items", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "v.view", "ssim_vals[].items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.varnet_module.VarNetModule.validation_epoch_end": [[492, 560], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "dict", "collections.defaultdict.keys", "varnet_module.VarNetModule.NMSE", "varnet_module.VarNetModule.SSIM", "varnet_module.VarNetModule.PSNR", "varnet_module.VarNetModule.TotExamples", "varnet_module.VarNetModule.ValLoss", "varnet_module.VarNetModule.TotSliceExamples", "varnet_module.VarNetModule.log", "metrics.items", "losses.append", "val_log[].keys", "val_log[].keys", "val_log[].keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "collections.defaultdict.keys", "dict.keys", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "varnet_module.VarNetModule.log", "val_log[].view", "mse_vals[].update", "target_norms[].update", "ssim_vals[].update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "v.view", "v.view", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "mse_vals[].items", "target_norms[].items", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "v.view", "ssim_vals[].items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.UnetDataTransform.__init__": [[287, 308], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "which_challenge", ":", "str", ",", "\n", "mask_func", ":", "Optional", "[", "MaskFunc", "]", "=", "None", ",", "\n", "use_seed", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            which_challenge: Challenge from (\"singlecoil\", \"multicoil\").\n            mask_func: Optional; A function that can create a mask of\n                appropriate shape.\n            use_seed: If true, this class computes a pseudo random number\n                generator seed from the filename. This ensures that the same\n                mask is used for all the slices of a given volume every time.\n        \"\"\"", "\n", "if", "which_challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Challenge should either be 'singlecoil' or 'multicoil'\"", ")", "\n", "\n", "", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "which_challenge", "=", "which_challenge", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.UnetDataTransform.__call__": [[309, 389], ["transforms.to_tensor", "fastmri.ifft2c", "transforms.complex_center_crop", "fastmri.complex_abs", "transforms.normalize_instance", "fastmri.rss.clamp", "transforms.UnetSample", "fastmri.rss", "transforms.to_tensor", "transforms.center_crop", "transforms.normalize", "torch.Tensor.clamp", "torch.Tensor", "attrs.keys", "tuple", "transforms.apply_mask", "map"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "kspace", ":", "np", ".", "ndarray", ",", "\n", "mask", ":", "np", ".", "ndarray", ",", "\n", "target", ":", "np", ".", "ndarray", ",", "\n", "attrs", ":", "Dict", ",", "\n", "fname", ":", "str", ",", "\n", "slice_num", ":", "int", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "str", ",", "int", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            kspace: Input k-space of shape (num_coils, rows, cols) for\n                multi-coil data or (rows, cols) for single coil data.\n            mask: Mask from the test dataset.\n            target: Target image.\n            attrs: Acquisition related information stored in the HDF5 object.\n            fname: File name.\n            slice_num: Serial number of the slice.\n\n        Returns:\n            A tuple containing, zero-filled input image, the reconstruction\n            target, the mean used for normalization, the standard deviations\n            used for normalization, the filename, and the slice number.\n        \"\"\"", "\n", "kspace_torch", "=", "to_tensor", "(", "kspace", ")", "\n", "\n", "# check for max value", "\n", "max_value", "=", "attrs", "[", "\"max\"", "]", "if", "\"max\"", "in", "attrs", ".", "keys", "(", ")", "else", "0.0", "\n", "\n", "# apply mask", "\n", "if", "self", ".", "mask_func", ":", "\n", "            ", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "# we only need first element, which is k-space after masking", "\n", "masked_kspace", "=", "apply_mask", "(", "kspace_torch", ",", "self", ".", "mask_func", ",", "seed", "=", "seed", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace_torch", "\n", "\n", "# inverse Fourier transform to get zero filled solution", "\n", "", "image", "=", "fastmri", ".", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "# check for FLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "            ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "", "image", "=", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# absolute value", "\n", "image", "=", "fastmri", ".", "complex_abs", "(", "image", ")", "\n", "\n", "# apply Root-Sum-of-Squares if multicoil data", "\n", "if", "self", ".", "which_challenge", "==", "\"multicoil\"", ":", "\n", "            ", "image", "=", "fastmri", ".", "rss", "(", "image", ")", "\n", "\n", "# normalize input", "\n", "", "image", ",", "mean", ",", "std", "=", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target_torch", "=", "to_tensor", "(", "target", ")", "\n", "target_torch", "=", "center_crop", "(", "target_torch", ",", "crop_size", ")", "\n", "target_torch", "=", "normalize", "(", "target_torch", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "target_torch", "=", "target_torch", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "            ", "target_torch", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "", "return", "UnetSample", "(", "\n", "image", "=", "image", ",", "\n", "target", "=", "target_torch", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", "fname", "=", "fname", ",", "\n", "slice_num", "=", "slice_num", ",", "\n", "max_value", "=", "max_value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.VarNetDataTransform.__init__": [[423, 434], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mask_func", ":", "Optional", "[", "MaskFunc", "]", "=", "None", ",", "use_seed", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mask_func: Optional; A function that can create a mask of\n                appropriate shape. Defaults to None.\n            use_seed: If True, this class computes a pseudo random number\n                generator seed from the filename. This ensures that the same\n                mask is used for all the slices of a given volume every time.\n        \"\"\"", "\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.VarNetDataTransform.__call__": [[435, 513], ["transforms.to_tensor", "transforms.to_tensor", "torch.tensor", "tuple", "transforms.apply_mask", "transforms.VarNetSample", "numpy.array", "torch.from_numpy", "mask_torch.reshape.reshape.reshape", "transforms.VarNetSample", "map", "len", "mask.reshape().astype", "mask_torch.reshape.reshape.to", "mask_torch.reshape.reshape.to", "mask.reshape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "kspace", ":", "np", ".", "ndarray", ",", "\n", "mask", ":", "np", ".", "ndarray", ",", "\n", "target", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "\n", "attrs", ":", "Dict", ",", "\n", "fname", ":", "str", ",", "\n", "slice_num", ":", "int", ",", "\n", ")", "->", "VarNetSample", ":", "\n", "        ", "\"\"\"\n        Args:\n            kspace: Input k-space of shape (num_coils, rows, cols) for\n                multi-coil data.\n            mask: Mask from the test dataset.\n            target: Target image.\n            attrs: Acquisition related information stored in the HDF5 object.\n            fname: File name.\n            slice_num: Serial number of the slice.\n\n        Returns:\n            A VarNetSample with the masked k-space, sampling mask, target\n            image, the filename, the slice number, the maximum image value\n            (from target), the target crop size, and the number of low\n            frequency lines sampled.\n        \"\"\"", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target_torch", "=", "to_tensor", "(", "target", ")", "\n", "max_value", "=", "attrs", "[", "\"max\"", "]", "\n", "", "else", ":", "\n", "            ", "target_torch", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "max_value", "=", "0.0", "\n", "\n", "", "kspace_torch", "=", "to_tensor", "(", "kspace", ")", "\n", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "acq_start", "=", "attrs", "[", "\"padding_left\"", "]", "\n", "acq_end", "=", "attrs", "[", "\"padding_right\"", "]", "\n", "\n", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "mask_func", "is", "not", "None", ":", "\n", "            ", "masked_kspace", ",", "mask_torch", ",", "num_low_frequencies", "=", "apply_mask", "(", "\n", "kspace_torch", ",", "self", ".", "mask_func", ",", "seed", "=", "seed", ",", "padding", "=", "(", "acq_start", ",", "acq_end", ")", "\n", ")", "\n", "\n", "sample", "=", "VarNetSample", "(", "\n", "masked_kspace", "=", "masked_kspace", ",", "\n", "mask", "=", "mask_torch", ".", "to", "(", "torch", ".", "bool", ")", ",", "\n", "num_low_frequencies", "=", "num_low_frequencies", ",", "\n", "target", "=", "target_torch", ",", "\n", "fname", "=", "fname", ",", "\n", "slice_num", "=", "slice_num", ",", "\n", "max_value", "=", "max_value", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace_torch", "\n", "shape", "=", "np", ".", "array", "(", "kspace_torch", ".", "shape", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "shape", "[", ":", "-", "3", "]", "=", "1", "\n", "mask_shape", "=", "[", "1", "]", "*", "len", "(", "shape", ")", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask_torch", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "mask_torch", "=", "mask_torch", ".", "reshape", "(", "*", "mask_shape", ")", "\n", "mask_torch", "[", ":", ",", ":", ",", ":", "acq_start", "]", "=", "0", "\n", "mask_torch", "[", ":", ",", ":", ",", "acq_end", ":", "]", "=", "0", "\n", "\n", "sample", "=", "VarNetSample", "(", "\n", "masked_kspace", "=", "masked_kspace", ",", "\n", "mask", "=", "mask_torch", ".", "to", "(", "torch", ".", "bool", ")", ",", "\n", "num_low_frequencies", "=", "0", ",", "\n", "target", "=", "target_torch", ",", "\n", "fname", "=", "fname", ",", "\n", "slice_num", "=", "slice_num", ",", "\n", "max_value", "=", "max_value", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.MiniCoilTransform.__init__": [[547, 569], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mask_func", ":", "Optional", "[", "MaskFunc", "]", "=", "None", ",", "\n", "use_seed", ":", "Optional", "[", "bool", "]", "=", "True", ",", "\n", "crop_size", ":", "Optional", "[", "tuple", "]", "=", "None", ",", "\n", "num_compressed_coils", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mask_func: Optional; A function that can create a mask of\n                appropriate shape. Defaults to None.\n            use_seed: If True, this class computes a pseudo random number\n                generator seed from the filename. This ensures that the same\n                mask is used for all the slices of a given volume every time.\n            crop_size: Image dimensions for mini MR images.\n            num_compressed_coils: Number of coils to output from coil\n                compression.\n        \"\"\"", "\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "num_compressed_coils", "=", "num_compressed_coils", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.MiniCoilTransform.__call__": [[570, 675], ["fastmri.fft2c().numpy", "transforms.complex_center_crop", "fastmri.rss_complex", "torch.tensor.max", "numpy.reshape", "numpy.linalg.svd", "numpy.reshape", "transforms.to_tensor", "transforms.MiniCoilSample", "transforms.to_tensor", "torch.tensor", "torch.tensor", "tuple", "fastmri.ifft2c", "numpy.array", "transforms.apply_mask", "mask.byte.byte.byte", "isinstance", "isinstance", "isinstance", "map", "fastmri.fft2c", "transforms.to_tensor", "numpy.array", "torch.from_numpy", "mask.byte.byte.reshape", "mask.byte.byte.byte", "numpy.array", "len", "torch.tensor", "torch.tensor", "torch.tensor", "ValueError", "transforms.complex_center_crop", "len", "mask.byte.byte.reshape().astype", "fastmri.ifft2c", "numpy.matrix", "transforms.to_tensor", "mask.byte.byte.reshape", "type"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss_complex", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice_num", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            kspace: Input k-space of shape (num_coils, rows, cols) for\n                multi-coil data.\n            mask: Mask from the test dataset. Not used if mask_func is defined.\n            target: Target image.\n            attrs: Acquisition related information stored in the HDF5 object.\n            fname: File name.\n            slice_num: Serial number of the slice.\n\n        Returns:\n            tuple containing:\n                kspace: original kspace (used for active acquisition only).\n                masked_kspace: k-space after applying sampling mask. If there\n                    is no mask or mask_func, returns same as kspace.\n                mask: The applied sampling mask\n                target: The target image (if applicable). The target is built\n                    from the RSS opp of all coils pre-compression.\n                fname: File name.\n                slice_num: The slice index.\n                max_value: Maximum image value.\n                crop_size: The size to crop the final image.\n        \"\"\"", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "to_tensor", "(", "target", ")", "\n", "max_value", "=", "attrs", "[", "\"max\"", "]", "\n", "", "else", ":", "\n", "            ", "target", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "max_value", "=", "0.0", "\n", "\n", "", "if", "self", ".", "crop_size", "is", "None", ":", "\n", "            ", "crop_size", "=", "torch", ".", "tensor", "(", "[", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "or", "isinstance", "(", "self", ".", "crop_size", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "self", ".", "crop_size", ")", "==", "2", "\n", "if", "self", ".", "crop_size", "[", "0", "]", "is", "None", "or", "self", ".", "crop_size", "[", "1", "]", "is", "None", ":", "\n", "                    ", "crop_size", "=", "torch", ".", "tensor", "(", "\n", "[", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "crop_size", "=", "torch", ".", "tensor", "(", "self", ".", "crop_size", ")", "\n", "", "", "elif", "isinstance", "(", "self", ".", "crop_size", ",", "int", ")", ":", "\n", "                ", "crop_size", "=", "torch", ".", "tensor", "(", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"`crop_size` should be None, tuple, list, or int, not: {type(self.crop_size)}\"", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "num_compressed_coils", "is", "None", ":", "\n", "            ", "num_compressed_coils", "=", "kspace", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "num_compressed_coils", "=", "self", ".", "num_compressed_coils", "\n", "\n", "", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "acq_start", "=", "0", "\n", "acq_end", "=", "crop_size", "[", "1", "]", "\n", "\n", "# new cropping section", "\n", "square_crop", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "kspace", "=", "fastmri", ".", "fft2c", "(", "\n", "complex_center_crop", "(", "fastmri", ".", "ifft2c", "(", "to_tensor", "(", "kspace", ")", ")", ",", "square_crop", ")", "\n", ")", ".", "numpy", "(", ")", "\n", "kspace", "=", "complex_center_crop", "(", "kspace", ",", "crop_size", ")", "\n", "\n", "# we calculate the target before coil compression. This causes the mini", "\n", "# simulation to be one where we have a 15-coil, low-resolution image", "\n", "# and our reconstructor has an SVD coil approximation. This is a little", "\n", "# bit more realistic than doing the target after SVD compression", "\n", "target", "=", "fastmri", ".", "rss_complex", "(", "fastmri", ".", "ifft2c", "(", "to_tensor", "(", "kspace", ")", ")", ")", "\n", "max_value", "=", "target", ".", "max", "(", ")", "\n", "\n", "# apply coil compression", "\n", "new_shape", "=", "(", "num_compressed_coils", ",", ")", "+", "kspace", ".", "shape", "[", "1", ":", "]", "\n", "kspace", "=", "np", ".", "reshape", "(", "kspace", ",", "(", "kspace", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "left_vec", ",", "_", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "kspace", ",", "compute_uv", "=", "True", ",", "full_matrices", "=", "False", ")", "\n", "kspace", "=", "np", ".", "reshape", "(", "\n", "np", ".", "array", "(", "np", ".", "matrix", "(", "left_vec", "[", ":", ",", ":", "num_compressed_coils", "]", ")", ".", "H", "@", "kspace", ")", ",", "\n", "new_shape", ",", "\n", ")", "\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "\n", "# Mask kspace", "\n", "if", "self", ".", "mask_func", ":", "\n", "            ", "masked_kspace", ",", "mask", ",", "_", "=", "apply_mask", "(", "\n", "kspace", ",", "self", ".", "mask_func", ",", "seed", ",", "(", "acq_start", ",", "acq_end", ")", "\n", ")", "\n", "mask", "=", "mask", ".", "byte", "(", ")", "\n", "", "elif", "mask", "is", "not", "None", ":", "\n", "            ", "masked_kspace", "=", "kspace", "\n", "shape", "=", "np", ".", "array", "(", "kspace", ".", "shape", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "shape", "[", ":", "-", "3", "]", "=", "1", "\n", "mask_shape", "=", "[", "1", "]", "*", "len", "(", "shape", ")", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "*", "mask_shape", ")", "\n", "mask", "=", "mask", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace", "\n", "shape", "=", "np", ".", "array", "(", "kspace", ".", "shape", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "\n", "", "return", "MiniCoilSample", "(", "\n", "kspace", ",", "masked_kspace", ",", "mask", ",", "target", ",", "fname", ",", "slice_num", ",", "max_value", ",", "crop_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor": [[76, 92], ["isinstance", "numpy.iscomplexobj", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["shape", "=", "(", "1", ",", ")", "*", "len", "(", "data", ".", "shape", "[", ":", "-", "3", "]", ")", "+", "tuple", "(", "data", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "mask", ",", "num_low_frequencies", "=", "mask_func", "(", "shape", ",", "offset", ",", "seed", ")", "\n", "if", "padding", "is", "not", "None", ":", "\n", "        ", "mask", "[", "...", ",", ":", "padding", "[", "0", "]", ",", ":", "]", "=", "0", "\n", "mask", "[", "...", ",", "padding", "[", "1", "]", ":", ",", ":", "]", "=", "0", "# padding value inclusive on right of zeros", "\n", "\n", "", "masked_data", "=", "data", "*", "mask", "+", "0.0", "# the + 0.0 removes the sign of the zeros", "\n", "\n", "return", "masked_data", ",", "mask", ",", "num_low_frequencies", "\n", "\n", "\n", "", "def", "mask_center", "(", "x", ":", "torch", ".", "Tensor", ",", "mask_from", ":", "int", ",", "mask_to", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.tensor_to_complex_np": [[37, 48], ["torch.view_as_complex().numpy", "torch.view_as_complex"], "function", ["None"], ["", "def", "tensor_to_complex_np", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n\n    Args:\n        data: Input data to be converted to numpy.\n\n    Returns:\n        Complex numpy version of data.\n    \"\"\"", "\n", "return", "torch", ".", "view_as_complex", "(", "data", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask": [[94, 123], ["numpy.array", "mask_func", "mask.to.to"], "function", ["None"], ["\n", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", ":", ",", ":", ",", ":", ",", "mask_from", ":", "mask_to", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "mask_from", ":", "mask_to", "]", "\n", "\n", "return", "mask", "\n", "\n", "\n", "", "def", "batched_mask_center", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "mask_from", ":", "torch", ".", "Tensor", ",", "mask_to", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Initializes a mask with the center filled in.\n\n    Can operate with different masks for each batch element.\n\n    Args:\n        mask_from: Part of center to start filling.\n        mask_to: Part of center to end filling.\n\n    Returns:\n        A mask with the center filled.\n    \"\"\"", "\n", "if", "not", "mask_from", ".", "shape", "==", "mask_to", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"mask_from and mask_to must match shapes.\"", ")", "\n", "", "if", "not", "mask_from", ".", "ndim", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"mask_from and mask_to must have 1 dimension.\"", ")", "\n", "", "if", "not", "mask_from", ".", "shape", "[", "0", "]", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.mask_center": [[548, 554], ["torch.zeros_like"], "function", ["None"], ["self", ",", "\n", "mask_func", ":", "Optional", "[", "MaskFunc", "]", "=", "None", ",", "\n", "use_seed", ":", "Optional", "[", "bool", "]", "=", "True", ",", "\n", "crop_size", ":", "Optional", "[", "tuple", "]", "=", "None", ",", "\n", "num_compressed_coils", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.batched_mask_center": [[104, 137], ["ValueError", "ValueError", "transforms.mask_center", "torch.zeros_like", "enumerate", "ValueError", "int", "int", "zip"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.mask_center"], ["", "def", "batched_mask_center", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "mask_from", ":", "torch", ".", "Tensor", ",", "mask_to", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Initializes a mask with the center filled in.\n\n    Can operate with different masks for each batch element.\n\n    Args:\n        mask_from: Part of center to start filling.\n        mask_to: Part of center to end filling.\n\n    Returns:\n        A mask with the center filled.\n    \"\"\"", "\n", "if", "not", "mask_from", ".", "shape", "==", "mask_to", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"mask_from and mask_to must match shapes.\"", ")", "\n", "", "if", "not", "mask_from", ".", "ndim", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"mask_from and mask_to must have 1 dimension.\"", ")", "\n", "", "if", "not", "mask_from", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "if", "(", "not", "x", ".", "shape", "[", "0", "]", "==", "mask_from", ".", "shape", "[", "0", "]", ")", "or", "(", "\n", "not", "x", ".", "shape", "[", "0", "]", "==", "mask_to", ".", "shape", "[", "0", "]", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mask_from and mask_to must have batch_size length.\"", ")", "\n", "\n", "", "", "if", "mask_from", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "mask", "=", "mask_center", "(", "x", ",", "int", "(", "mask_from", ")", ",", "int", "(", "mask_to", ")", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "i", ",", "(", "start", ",", "end", ")", "in", "enumerate", "(", "zip", "(", "mask_from", ",", "mask_to", ")", ")", ":", "\n", "            ", "mask", "[", "i", ",", ":", ",", ":", ",", "start", ":", "end", "]", "=", "x", "[", "i", ",", ":", ",", ":", ",", "start", ":", "end", "]", "\n", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop": [[296, 316], ["None"], "function", ["None"], ["\n", "if", "which_challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Challenge should either be 'singlecoil' or 'multicoil'\"", ")", "\n", "\n", "", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "which_challenge", "=", "which_challenge", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n", "", "def", "__call__", "(", "\n", "self", ",", "\n", "kspace", ":", "np", ".", "ndarray", ",", "\n", "mask", ":", "np", ".", "ndarray", ",", "\n", "target", ":", "np", ".", "ndarray", ",", "\n", "attrs", ":", "Dict", ",", "\n", "fname", ":", "str", ",", "\n", "slice_num", ":", "int", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop": [[354, 375], ["None"], "function", ["None"], ["\n", "# check for FLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "            ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "", "image", "=", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# absolute value", "\n", "image", "=", "fastmri", ".", "complex_abs", "(", "image", ")", "\n", "\n", "# apply Root-Sum-of-Squares if multicoil data", "\n", "if", "self", ".", "which_challenge", "==", "\"multicoil\"", ":", "\n", "            ", "image", "=", "fastmri", ".", "rss", "(", "image", ")", "\n", "\n", "# normalize input", "\n", "", "image", ",", "mean", ",", "std", "=", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target_torch", "=", "to_tensor", "(", "target", ")", "\n", "target_torch", "=", "center_crop", "(", "target_torch", ",", "crop_size", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest": [[318, 327], ["min", "min", "transforms.center_crop", "transforms.center_crop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], ["        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize": [[377, 392], ["None"], "function", ["None"], ["target_torch", "=", "target_torch", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "            ", "target_torch", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "", "return", "UnetSample", "(", "\n", "image", "=", "image", ",", "\n", "target", "=", "target_torch", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", "fname", "=", "fname", ",", "\n", "slice_num", "=", "slice_num", ",", "\n", "max_value", "=", "max_value", ",", "\n", ")", "\n", "\n", "\n", "", "", "class", "VarNetSample", "(", "NamedTuple", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize_instance": [[394, 410], ["data.mean", "data.std", "transforms.normalize"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize"], ["\n", "\n", "masked_kspace", ":", "torch", ".", "Tensor", "\n", "mask", ":", "torch", ".", "Tensor", "\n", "num_low_frequencies", ":", "Optional", "[", "int", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.CombinedSliceDataset.__init__": [[108, 184], ["range", "ValueError", "ValueError", "len", "mri_data.CombinedSliceDataset.datasets.append", "len", "len", "len", "len", "len", "len", "len", "len", "mri_data.SliceDataset"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "roots", ":", "Sequence", "[", "Path", "]", ",", "\n", "challenges", ":", "Sequence", "[", "str", "]", ",", "\n", "transforms", ":", "Optional", "[", "Sequence", "[", "Optional", "[", "Callable", "]", "]", "]", "=", "None", ",", "\n", "sample_rates", ":", "Optional", "[", "Sequence", "[", "Optional", "[", "float", "]", "]", "]", "=", "None", ",", "\n", "volume_sample_rates", ":", "Optional", "[", "Sequence", "[", "Optional", "[", "float", "]", "]", "]", "=", "None", ",", "\n", "use_dataset_cache", ":", "bool", "=", "False", ",", "\n", "dataset_cache_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"dataset_cache.pkl\"", ",", "\n", "num_cols", ":", "Optional", "[", "Tuple", "[", "int", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            roots: Paths to the datasets.\n            challenges: \"singlecoil\" or \"multicoil\" depending on which\n                challenge to use.\n            transforms: Optional; A sequence of callable objects that\n                preprocesses the raw data into appropriate form. The transform\n                function should take 'kspace', 'target', 'attributes',\n                'filename', and 'slice' as inputs. 'target' may be null for\n                test data.\n            sample_rates: Optional; A sequence of floats between 0 and 1.\n                This controls what fraction of the slices should be loaded.\n                When creating subsampled datasets either set sample_rates\n                (sample by slices) or volume_sample_rates (sample by volumes)\n                but not both.\n            volume_sample_rates: Optional; A sequence of floats between 0 and 1.\n                This controls what fraction of the volumes should be loaded.\n                When creating subsampled datasets either set sample_rates\n                (sample by slices) or volume_sample_rates (sample by volumes)\n                but not both.\n            use_dataset_cache: Whether to cache dataset metadata. This is very\n                useful for large datasets like the brain data.\n            dataset_cache_file: Optional; A file in which to cache dataset\n                information for faster load times.\n            num_cols: Optional; If provided, only slices with the desired\n                number of columns will be considered.\n        \"\"\"", "\n", "if", "sample_rates", "is", "not", "None", "and", "volume_sample_rates", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"either set sample_rates (sample by slices) or volume_sample_rates (sample by volumes) but not both\"", "\n", ")", "\n", "", "if", "transforms", "is", "None", ":", "\n", "            ", "transforms", "=", "[", "None", "]", "*", "len", "(", "roots", ")", "\n", "", "if", "sample_rates", "is", "None", ":", "\n", "            ", "sample_rates", "=", "[", "None", "]", "*", "len", "(", "roots", ")", "\n", "", "if", "volume_sample_rates", "is", "None", ":", "\n", "            ", "volume_sample_rates", "=", "[", "None", "]", "*", "len", "(", "roots", ")", "\n", "", "if", "not", "(", "\n", "len", "(", "roots", ")", "\n", "==", "len", "(", "transforms", ")", "\n", "==", "len", "(", "challenges", ")", "\n", "==", "len", "(", "sample_rates", ")", "\n", "==", "len", "(", "volume_sample_rates", ")", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Lengths of roots, transforms, challenges, sample_rates do not match\"", "\n", ")", "\n", "\n", "", "self", ".", "datasets", "=", "[", "]", "\n", "self", ".", "examples", ":", "List", "[", "Tuple", "[", "Path", ",", "int", ",", "Dict", "[", "str", ",", "object", "]", "]", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "roots", ")", ")", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "\n", "SliceDataset", "(", "\n", "root", "=", "roots", "[", "i", "]", ",", "\n", "transform", "=", "transforms", "[", "i", "]", ",", "\n", "challenge", "=", "challenges", "[", "i", "]", ",", "\n", "sample_rate", "=", "sample_rates", "[", "i", "]", ",", "\n", "volume_sample_rate", "=", "volume_sample_rates", "[", "i", "]", ",", "\n", "use_dataset_cache", "=", "use_dataset_cache", ",", "\n", "dataset_cache_file", "=", "dataset_cache_file", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "examples", "=", "self", ".", "examples", "+", "self", ".", "datasets", "[", "-", "1", "]", ".", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.CombinedSliceDataset.__len__": [[185, 187], ["sum", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "len", "(", "dataset", ")", "for", "dataset", "in", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.CombinedSliceDataset.__getitem__": [[188, 194], ["len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "if", "i", "<", "len", "(", "dataset", ")", ":", "\n", "                ", "return", "dataset", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "i", "=", "i", "-", "len", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceDataset.__init__": [[201, 304], ["pathlib.Path", "ValueError", "ValueError", "mri_data.SliceDataset.dataset_cache_file.exists", "list", "sorted", "logging.info", "random.shuffle", "round", "open", "pickle.load", "pickle.load.get", "pathlib.Path().iterdir", "mri_data.SliceDataset._retrieve_metadata", "logging.info", "sorted", "random.shuffle", "round", "pickle.load.get", "open", "pickle.dump", "len", "list", "pathlib.Path", "range", "set", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceDataset._retrieve_metadata"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", ",", "\n", "challenge", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "use_dataset_cache", ":", "bool", "=", "False", ",", "\n", "sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "dataset_cache_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"dataset_cache.pkl\"", ",", "\n", "num_cols", ":", "Optional", "[", "Tuple", "[", "int", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: Path to the dataset.\n            challenge: \"singlecoil\" or \"multicoil\" depending on which challenge\n                to use.\n            transform: Optional; A callable object that pre-processes the raw\n                data into appropriate form. The transform function should take\n                'kspace', 'target', 'attributes', 'filename', and 'slice' as\n                inputs. 'target' may be null for test data.\n            use_dataset_cache: Whether to cache dataset metadata. This is very\n                useful for large datasets like the brain data.\n            sample_rate: Optional; A float between 0 and 1. This controls what fraction\n                of the slices should be loaded. Defaults to 1 if no value is given.\n                When creating a sampled dataset either set sample_rate (sample by slices)\n                or volume_sample_rate (sample by volumes) but not both.\n            volume_sample_rate: Optional; A float between 0 and 1. This controls what fraction\n                of the volumes should be loaded. Defaults to 1 if no value is given.\n                When creating a sampled dataset either set sample_rate (sample by slices)\n                or volume_sample_rate (sample by volumes) but not both.\n            dataset_cache_file: Optional; A file in which to cache dataset\n                information for faster load times.\n            num_cols: Optional; If provided, only slices with the desired\n                number of columns will be considered.\n        \"\"\"", "\n", "if", "challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'challenge should be either \"singlecoil\" or \"multicoil\"'", ")", "\n", "\n", "", "if", "sample_rate", "is", "not", "None", "and", "volume_sample_rate", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"either set sample_rate (sample by slices) or volume_sample_rate (sample by volumes) but not both\"", "\n", ")", "\n", "\n", "", "self", ".", "dataset_cache_file", "=", "Path", "(", "dataset_cache_file", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "# set default sampling mode if none given", "\n", "if", "sample_rate", "is", "None", ":", "\n", "            ", "sample_rate", "=", "1.0", "\n", "", "if", "volume_sample_rate", "is", "None", ":", "\n", "            ", "volume_sample_rate", "=", "1.0", "\n", "\n", "# load dataset cache if we have and user wants to use it", "\n", "", "if", "self", ".", "dataset_cache_file", ".", "exists", "(", ")", "and", "use_dataset_cache", ":", "\n", "            ", "with", "open", "(", "self", ".", "dataset_cache_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "dataset_cache", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "dataset_cache", "=", "{", "}", "\n", "\n", "# check if our dataset is in the cache", "\n", "# if there, use that metadata, if not, then regenerate the metadata", "\n", "", "if", "dataset_cache", ".", "get", "(", "root", ")", "is", "None", "or", "not", "use_dataset_cache", ":", "\n", "            ", "files", "=", "list", "(", "Path", "(", "root", ")", ".", "iterdir", "(", ")", ")", "\n", "for", "fname", "in", "sorted", "(", "files", ")", ":", "\n", "                ", "metadata", ",", "num_slices", "=", "self", ".", "_retrieve_metadata", "(", "fname", ")", "\n", "\n", "self", ".", "examples", "+=", "[", "\n", "(", "fname", ",", "slice_ind", ",", "metadata", ")", "for", "slice_ind", "in", "range", "(", "num_slices", ")", "\n", "]", "\n", "\n", "", "if", "dataset_cache", ".", "get", "(", "root", ")", "is", "None", "and", "use_dataset_cache", ":", "\n", "                ", "dataset_cache", "[", "root", "]", "=", "self", ".", "examples", "\n", "logging", ".", "info", "(", "f\"Saving dataset cache to {self.dataset_cache_file}.\"", ")", "\n", "with", "open", "(", "self", ".", "dataset_cache_file", ",", "\"wb\"", ")", "as", "cache_f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "dataset_cache", ",", "cache_f", ")", "\n", "", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "f\"Using dataset cache from {self.dataset_cache_file}.\"", ")", "\n", "self", ".", "examples", "=", "dataset_cache", "[", "root", "]", "\n", "\n", "# subsample if desired", "\n", "", "if", "sample_rate", "<", "1.0", ":", "# sample by slice", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", ":", "num_examples", "]", "\n", "", "elif", "volume_sample_rate", "<", "1.0", ":", "# sample by volume", "\n", "            ", "vol_names", "=", "sorted", "(", "list", "(", "set", "(", "[", "f", "[", "0", "]", ".", "stem", "for", "f", "in", "self", ".", "examples", "]", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "vol_names", ")", "\n", "num_volumes", "=", "round", "(", "len", "(", "vol_names", ")", "*", "volume_sample_rate", ")", "\n", "sampled_vols", "=", "vol_names", "[", ":", "num_volumes", "]", "\n", "self", ".", "examples", "=", "[", "\n", "example", "for", "example", "in", "self", ".", "examples", "if", "example", "[", "0", "]", ".", "stem", "in", "sampled_vols", "\n", "]", "\n", "\n", "", "if", "num_cols", ":", "\n", "            ", "self", ".", "examples", "=", "[", "\n", "ex", "\n", "for", "ex", "in", "self", ".", "examples", "\n", "if", "ex", "[", "2", "]", "[", "\"encoding_size\"", "]", "[", "1", "]", "in", "num_cols", "# type: ignore", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceDataset._retrieve_metadata": [[306, 340], ["h5py.File", "xml.fromstring", "int", "int", "int", "int", "int", "int", "int", "mri_data.et_query", "int", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query", "mri_data.et_query"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query"], ["", "", "def", "_retrieve_metadata", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "et_root", "=", "etree", ".", "fromstring", "(", "hf", "[", "\"ismrmrd_header\"", "]", "[", "(", ")", "]", ")", "\n", "\n", "enc", "=", "[", "\"encoding\"", ",", "\"encodedSpace\"", ",", "\"matrixSize\"", "]", "\n", "enc_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "rec", "=", "[", "\"encoding\"", ",", "\"reconSpace\"", ",", "\"matrixSize\"", "]", "\n", "recon_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "\n", "lims", "=", "[", "\"encoding\"", ",", "\"encodingLimits\"", ",", "\"kspace_encoding_step_1\"", "]", "\n", "enc_limits_center", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"center\"", "]", ")", ")", "\n", "enc_limits_max", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"maximum\"", "]", ")", ")", "+", "1", "\n", "\n", "padding_left", "=", "enc_size", "[", "1", "]", "//", "2", "-", "enc_limits_center", "\n", "padding_right", "=", "padding_left", "+", "enc_limits_max", "\n", "\n", "num_slices", "=", "hf", "[", "\"kspace\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "metadata", "=", "{", "\n", "\"padding_left\"", ":", "padding_left", ",", "\n", "\"padding_right\"", ":", "padding_right", ",", "\n", "\"encoding_size\"", ":", "enc_size", ",", "\n", "\"recon_size\"", ":", "recon_size", ",", "\n", "}", "\n", "\n", "return", "metadata", ",", "num_slices", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceDataset.__len__": [[341, 343], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceDataset.__getitem__": [[344, 363], ["h5py.File", "dict", "dict.update", "mri_data.SliceDataset.transform", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update"], ["", "def", "__getitem__", "(", "self", ",", "i", ":", "int", ")", ":", "\n", "        ", "fname", ",", "dataslice", ",", "metadata", "=", "self", ".", "examples", "[", "i", "]", "\n", "\n", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "kspace", "=", "hf", "[", "\"kspace\"", "]", "[", "dataslice", "]", "\n", "\n", "mask", "=", "np", ".", "asarray", "(", "hf", "[", "\"mask\"", "]", ")", "if", "\"mask\"", "in", "hf", "else", "None", "\n", "\n", "target", "=", "hf", "[", "self", ".", "recons_key", "]", "[", "dataslice", "]", "if", "self", ".", "recons_key", "in", "hf", "else", "None", "\n", "\n", "attrs", "=", "dict", "(", "hf", ".", "attrs", ")", "\n", "attrs", ".", "update", "(", "metadata", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ".", "name", ",", "dataslice", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ".", "name", ",", "dataslice", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.__init__": [[377, 507], ["mri_data.SliceDataset.__init__", "pathlib.Path", "pandas.read_csv", "ValueError", "ValueError", "os.getcwd", "mri_data.AnnotatedSliceDataset.is_file", "mri_data.AnnotatedSliceDataset.download_csv", "annotations_df.itertuples", "len", "mri_data.AnnotatedSliceDataset.get_annotation", "mri_data.AnnotatedSliceDataset.annotated_examples.append", "list", "len", "mri_data.AnnotatedSliceDataset.get_annotation", "mri_data.AnnotatedSliceDataset.annotated_examples.append", "list", "list", "mri_data.AnnotatedSliceDataset.get_annotation", "mri_data.AnnotatedSliceDataset.annotated_examples.append", "metadata.copy", "list", "list", "torch.randint", "mri_data.AnnotatedSliceDataset.get_annotation", "mri_data.AnnotatedSliceDataset.annotated_examples.append", "metadata.copy", "list", "list", "metadata.copy", "len", "mri_data.AnnotatedSliceDataset.get_annotation", "mri_data.AnnotatedSliceDataset.annotated_examples.append", "metadata.copy", "list", "metadata.copy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.download_csv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.get_annotation", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.get_annotation", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.get_annotation", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.get_annotation", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.get_annotation"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", ",", "\n", "challenge", ":", "str", ",", "\n", "subsplit", ":", "str", ",", "\n", "multiple_annotation_policy", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "use_dataset_cache", ":", "bool", "=", "False", ",", "\n", "sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "dataset_cache_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"dataset_cache.pkl\"", ",", "\n", "num_cols", ":", "Optional", "[", "Tuple", "[", "int", "]", "]", "=", "None", ",", "\n", "annotation_version", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: Path to the dataset.\n            challenge: \"singlecoil\" or \"multicoil\" depending on which challenge\n                to use.\n            subsplit: 'knee' or 'brain' depending on which dataset to use.\n            multiple_annotation_policy: 'first', 'random' or 'all'.\n                If 'first', then only use the first annotation.\n                If 'random', then pick an annotation at random.\n                If 'all' then two or more copies of the same slice for each annotation\n                will be extended.\n            transform: Optional; A callable object that pre-processes the raw\n                data into appropriate form. The transform function should take\n                'kspace', 'target', 'attributes', 'filename', and 'slice' as\n                inputs. 'target' may be null for test data.\n            use_dataset_cache: Whether to cache dataset metadata. This is very\n                useful for large datasets like the brain data.\n            sample_rate: Optional; A float between 0 and 1. This controls what fraction\n                of the slices should be loaded. Defaults to 1 if no value is given.\n                When creating a sampled dataset either set sample_rate (sample by slices)\n                or volume_sample_rate (sample by volumes) but not both.\n            volume_sample_rate: Optional; A float between 0 and 1. This controls what fraction\n                of the volumes should be loaded. Defaults to 1 if no value is given.\n                When creating a sampled dataset either set sample_rate (sample by slices)\n                or volume_sample_rate (sample by volumes) but not both.\n            dataset_cache_file: Optional; A file in which to cache dataset\n                information for faster load times.\n            num_cols: Optional; If provided, only slices with the desired\n                number of columns will be considered.\n            annotation_version: Optional; If provided, a specific version of csv file will be downloaded based on its git hash.\n                Default value is None, then the latest version will be used.\n        \"\"\"", "\n", "\n", "# subclass SliceDataset", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "root", ",", "\n", "challenge", ",", "\n", "transform", ",", "\n", "use_dataset_cache", ",", "\n", "sample_rate", ",", "\n", "volume_sample_rate", ",", "\n", "dataset_cache_file", ",", "\n", "num_cols", ",", "\n", ")", "\n", "\n", "self", ".", "annotated_examples", "=", "[", "]", "\n", "\n", "if", "subsplit", "not", "in", "(", "\"knee\"", ",", "\"brain\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'subsplit should be either \"knee\" or \"brain\"'", ")", "\n", "", "if", "multiple_annotation_policy", "not", "in", "(", "\"first\"", ",", "\"random\"", ",", "\"all\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'multiple_annotation_policy should be \"single\", \"random\", or \"all\"'", "\n", ")", "\n", "\n", "# download csv file from github using git hash to find certain version", "\n", "", "annotation_name", "=", "f\"{subsplit}{annotation_version}.csv\"", "\n", "annotation_path", "=", "Path", "(", "os", ".", "getcwd", "(", ")", ",", "\".annotation_cache\"", ",", "annotation_name", ")", "\n", "if", "not", "annotation_path", ".", "is_file", "(", ")", ":", "\n", "            ", "annotation_path", "=", "self", ".", "download_csv", "(", "\n", "annotation_version", ",", "subsplit", ",", "annotation_path", "\n", ")", "\n", "", "annotations_csv", "=", "pd", ".", "read_csv", "(", "annotation_path", ")", "\n", "\n", "for", "example", "in", "self", ".", "examples", ":", "\n", "            ", "fname", ",", "slice_ind", ",", "metadata", "=", "example", "\n", "\n", "# using filename and slice to find desired annotation", "\n", "annotations_df", "=", "annotations_csv", "[", "\n", "(", "annotations_csv", "[", "\"file\"", "]", "==", "fname", ".", "stem", ")", "\n", "&", "(", "annotations_csv", "[", "\"slice\"", "]", "==", "slice_ind", ")", "\n", "]", "\n", "annotations_list", "=", "annotations_df", ".", "itertuples", "(", "index", "=", "True", ",", "name", "=", "\"Pandas\"", ")", "\n", "\n", "# if annotation (filename or slice) not found, fill in empty values", "\n", "if", "len", "(", "annotations_df", ")", "==", "0", ":", "\n", "                ", "annotation", "=", "self", ".", "get_annotation", "(", "True", ",", "None", ")", "\n", "metadata", "[", "\"annotation\"", "]", "=", "annotation", "\n", "self", ".", "annotated_examples", ".", "append", "(", "\n", "list", "(", "[", "fname", ",", "slice_ind", ",", "metadata", ".", "copy", "(", ")", "]", ")", "\n", ")", "\n", "\n", "", "elif", "len", "(", "annotations_df", ")", "==", "1", ":", "\n", "                ", "rows", "=", "list", "(", "annotations_list", ")", "[", "0", "]", "\n", "annotation", "=", "self", ".", "get_annotation", "(", "False", ",", "rows", ")", "\n", "metadata", "[", "\"annotation\"", "]", "=", "annotation", "\n", "self", ".", "annotated_examples", ".", "append", "(", "\n", "list", "(", "[", "fname", ",", "slice_ind", ",", "metadata", ".", "copy", "(", ")", "]", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "# only use the first annotation", "\n", "                ", "if", "multiple_annotation_policy", "==", "\"first\"", ":", "\n", "                    ", "rows", "=", "list", "(", "annotations_list", ")", "[", "0", "]", "\n", "annotation", "=", "self", ".", "get_annotation", "(", "False", ",", "rows", ")", "\n", "metadata", "[", "\"annotation\"", "]", "=", "annotation", "\n", "self", ".", "annotated_examples", ".", "append", "(", "\n", "list", "(", "[", "fname", ",", "slice_ind", ",", "metadata", ".", "copy", "(", ")", "]", ")", "\n", ")", "\n", "\n", "# use an annotation at random", "\n", "", "elif", "multiple_annotation_policy", "==", "\"random\"", ":", "\n", "                    ", "random_number", "=", "torch", ".", "randint", "(", "len", "(", "annotations_df", ")", "-", "1", ",", "(", "1", ",", ")", ")", "\n", "rows", "=", "list", "(", "annotations_list", ")", "[", "random_number", "]", "\n", "annotation", "=", "self", ".", "get_annotation", "(", "False", ",", "rows", ")", "\n", "metadata", "[", "\"annotation\"", "]", "=", "annotation", "\n", "self", ".", "annotated_examples", ".", "append", "(", "\n", "list", "(", "[", "fname", ",", "slice_ind", ",", "metadata", ".", "copy", "(", ")", "]", ")", "\n", ")", "\n", "\n", "# extend examples to have tow copies of the same slice, one for each annotation", "\n", "", "elif", "multiple_annotation_policy", "==", "\"all\"", ":", "\n", "                    ", "for", "rows", "in", "annotations_list", ":", "\n", "                        ", "annotation", "=", "self", ".", "get_annotation", "(", "False", ",", "rows", ")", "\n", "metadata", "[", "\"annotation\"", "]", "=", "annotation", "\n", "self", ".", "annotated_examples", ".", "append", "(", "\n", "list", "(", "[", "fname", ",", "slice_ind", ",", "metadata", ".", "copy", "(", ")", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.get_annotation": [[509, 533], ["str", "int", "str", "int", "int", "int", "str", "int", "int"], "methods", ["None"], ["", "", "", "", "", "def", "get_annotation", "(", "self", ",", "empty_value", ",", "row", ")", ":", "\n", "        ", "if", "empty_value", "is", "True", ":", "\n", "            ", "annotation", "=", "{", "\n", "\"fname\"", ":", "\"\"", ",", "\n", "\"slice\"", ":", "\"\"", ",", "\n", "\"study_level\"", ":", "\"\"", ",", "\n", "\"x\"", ":", "-", "1", ",", "\n", "\"y\"", ":", "-", "1", ",", "\n", "\"width\"", ":", "-", "1", ",", "\n", "\"height\"", ":", "-", "1", ",", "\n", "\"label\"", ":", "\"\"", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "annotation", "=", "{", "\n", "\"fname\"", ":", "str", "(", "row", ".", "file", ")", ",", "\n", "\"slice\"", ":", "int", "(", "row", ".", "slice", ")", ",", "\n", "\"study_level\"", ":", "str", "(", "row", ".", "study_level", ")", ",", "\n", "\"x\"", ":", "int", "(", "row", ".", "x", ")", ",", "\n", "\"y\"", ":", "320", "-", "int", "(", "row", ".", "y", ")", "-", "int", "(", "row", ".", "height", ")", "-", "1", ",", "\n", "\"width\"", ":", "int", "(", "row", ".", "width", ")", ",", "\n", "\"height\"", ":", "int", "(", "row", ".", "height", ")", ",", "\n", "\"label\"", ":", "str", "(", "row", ".", "label", ")", ",", "\n", "}", "\n", "", "return", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.AnnotatedSliceDataset.download_csv": [[534, 547], ["requests.get", "pathlib.Path().mkdir", "open", "requests.get.iter_content", "pathlib.Path", "fh.write"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write"], ["", "def", "download_csv", "(", "self", ",", "version", ",", "subsplit", ",", "path", ")", ":", "\n", "# request file by git hash and mri type", "\n", "        ", "url", "=", "f\"https://raw.githubusercontent.com/microsoft/fastmri-plus/{version}/Annotations/{subsplit}.csv\"", "\n", "request", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "10", ",", "stream", "=", "True", ")", "\n", "\n", "# create temporary folders", "\n", "Path", "(", "\".annotation_cache\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# download csv from github and save it locally", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "            ", "for", "chunk", "in", "request", ".", "iter_content", "(", "1024", "*", "1024", ")", ":", "\n", "                ", "fh", ".", "write", "(", "chunk", ")", "\n", "", "", "return", "path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query": [[25, 58], ["root.find", "str", "RuntimeError"], "function", ["None"], ["def", "et_query", "(", "\n", "root", ":", "etree", ".", "Element", ",", "\n", "qlist", ":", "Sequence", "[", "str", "]", ",", "\n", "namespace", ":", "str", "=", "\"http://www.ismrm.org/ISMRMRD\"", ",", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    ElementTree query function.\n\n    This can be used to query an xml document via ElementTree. It uses qlist\n    for nested queries.\n\n    Args:\n        root: Root of the xml to search through.\n        qlist: A list of strings for nested searches, e.g. [\"Encoding\",\n            \"matrixSize\"]\n        namespace: Optional; xml namespace to prepend query.\n\n    Returns:\n        The retrieved data as a string.\n    \"\"\"", "\n", "s", "=", "\".\"", "\n", "prefix", "=", "\"ismrmrd_namespace\"", "\n", "\n", "ns", "=", "{", "prefix", ":", "namespace", "}", "\n", "\n", "for", "el", "in", "qlist", ":", "\n", "        ", "s", "=", "s", "+", "f\"//{prefix}:{el}\"", "\n", "\n", "", "value", "=", "root", ".", "find", "(", "s", ",", "ns", ")", "\n", "if", "value", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Element not found\"", ")", "\n", "\n", "", "return", "str", "(", "value", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir": [[60, 101], ["pathlib.Path", "pathlib.Path", "pathlib.Path.is_file", "warnings.warn", "open", "yaml.dump", "open", "yaml.safe_load", "pathlib.Path.resolve"], "function", ["None"], ["", "def", "fetch_dir", "(", "\n", "key", ":", "str", ",", "data_config_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"fastmri_dirs.yaml\"", "\n", ")", "->", "Path", ":", "\n", "    ", "\"\"\"\n    Data directory fetcher.\n\n    This is a brute-force simple way to configure data directories for a\n    project. Simply overwrite the variables for `knee_path` and `brain_path`\n    and this function will retrieve the requested subsplit of the data for use.\n\n    Args:\n        key: key to retrieve path from data_config_file. Expected to be in\n            (\"knee_path\", \"brain_path\", \"log_path\").\n        data_config_file: Optional; Default path config file to fetch path\n            from.\n\n    Returns:\n        The path to the specified directory.\n    \"\"\"", "\n", "data_config_file", "=", "Path", "(", "data_config_file", ")", "\n", "if", "not", "data_config_file", ".", "is_file", "(", ")", ":", "\n", "        ", "default_config", "=", "{", "\n", "\"knee_path\"", ":", "\"/path/to/knee\"", ",", "\n", "\"brain_path\"", ":", "\"/path/to/brain\"", ",", "\n", "\"log_path\"", ":", "\".\"", ",", "\n", "}", "\n", "with", "open", "(", "data_config_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "default_config", ",", "f", ")", "\n", "\n", "", "data_dir", "=", "default_config", "[", "key", "]", "\n", "\n", "warn", "(", "\n", "f\"Path config at {data_config_file.resolve()} does not exist. \"", "\n", "\"A template has been created for you. \"", "\n", "\"Please enter the directory paths for your system to have defaults.\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "data_config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data_dir", "=", "yaml", ".", "safe_load", "(", "f", ")", "[", "key", "]", "\n", "\n", "", "", "return", "Path", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.volume_sampler.VolumeSampler.__init__": [[25, 57], ["torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "numpy.array", "numpy.array_split", "dict.fromkeys", "dict.fromkeys", "enumerate", "numpy.array", "len", "sorted", "list", "volume_sampler.VolumeSampler.indices.append"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "Union", "[", "CombinedSliceDataset", ",", "SliceDataset", "]", ",", "\n", "num_replicas", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "rank", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "True", ",", "\n", "seed", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dataset: An MRI dataset (e.g., SliceData).\n            num_replicas: Number of processes participating in distributed\n                training. By default, :attr:`rank` is retrieved from the\n                current distributed group.\n            rank: Rank of the current process within :attr:`num_replicas`. By\n                default, :attr:`rank` is retrieved from the current distributed\n                group.\n            shuffle: If ``True`` (default), sampler will shuffle the indices.\n            seed: random seed used to shuffle the sampler if\n                :attr:`shuffle=True`. This number should be identical across\n                all processes in the distributed group.\n        \"\"\"", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.volume_sampler.VolumeSampler.__iter__": [[58, 65], ["torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "iter", "indices_shuffled.tolist", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "# get all file names and split them based on number of processes", "\n", "self", ".", "all_volume_names", "=", "sorted", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.volume_sampler.VolumeSampler.__len__": [[66, 68], ["None"], "methods", ["None"], ["set", "(", "str", "(", "example", "[", "0", "]", ")", "for", "example", "in", "self", ".", "dataset", ".", "examples", ")", "\n", ")", "\n", "self", ".", "all_volumes_split", ":", "List", "[", "List", "[", "str", "]", "]", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.volume_sampler.VolumeSampler.set_epoch": [[69, 71], ["None"], "methods", ["None"], ["for", "rank_num", "in", "range", "(", "self", ".", "num_replicas", ")", ":", "\n", "            ", "self", ".", "all_volumes_split", ".", "append", "(", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.__init__": [[51, 81], ["numpy.random.RandomState", "ValueError", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "center_fractions", ":", "Sequence", "[", "float", "]", ",", "\n", "accelerations", ":", "Sequence", "[", "int", "]", ",", "\n", "allow_any_combination", ":", "bool", "=", "False", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            center_fractions: Fraction of low-frequency columns to be retained.\n                If multiple values are provided, then one of these numbers is\n                chosen uniformly each time.\n            accelerations: Amount of under-sampling. This should have the same\n                length as center_fractions. If multiple values are provided,\n                then one of these is chosen uniformly each time.\n            allow_any_combination: Whether to allow cross combinations of\n                elements from ``center_fractions`` and ``accelerations``.\n            seed: Seed for starting the internal random number generator of the\n                ``MaskFunc``.\n        \"\"\"", "\n", "if", "len", "(", "center_fractions", ")", "!=", "len", "(", "accelerations", ")", "and", "not", "allow_any_combination", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of center fractions should match number of accelerations \"", "\n", "\"if allow_any_combination is False.\"", "\n", ")", "\n", "\n", "", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "allow_any_combination", "=", "allow_any_combination", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.__call__": [[82, 111], ["len", "ValueError", "subsample.temp_seed", "subsample.MaskFunc.sample_mask", "torch.max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.temp_seed", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MagicMaskFractionFunc.sample_mask"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "shape", ":", "Sequence", "[", "int", "]", ",", "\n", "offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Sample and return a k-space mask.\n\n        Args:\n            shape: Shape of k-space.\n            offset: Offset from 0 to begin mask (for equispaced masks). If no\n                offset is given, then one is selected randomly.\n            seed: Seed for random number generator for reproducibility.\n\n        Returns:\n            A 2-tuple containing 1) the k-space mask and 2) the number of\n            center frequency lines.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_mask", ",", "accel_mask", ",", "num_low_frequencies", "=", "self", ".", "sample_mask", "(", "\n", "shape", ",", "offset", "\n", ")", "\n", "\n", "# combine masks together", "\n", "", "return", "torch", ".", "max", "(", "center_mask", ",", "accel_mask", ")", ",", "num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.sample_mask": [[112, 148], ["subsample.MaskFunc.choose_acceleration", "round", "subsample.MaskFunc.reshape_mask", "subsample.MaskFunc.reshape_mask", "subsample.MaskFunc.calculate_center_mask", "subsample.MaskFunc.calculate_acceleration_mask"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.calculate_center_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.EquispacedMaskFractionFunc.calculate_acceleration_mask"], ["", "def", "sample_mask", "(", "\n", "self", ",", "\n", "shape", ":", "Sequence", "[", "int", "]", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Sample a new k-space mask.\n\n        This function samples and returns two components of a k-space mask: 1)\n        the center mask (e.g., for sensitivity map calculation) and 2) the\n        acceleration mask (for the edge of k-space). Both of these masks, as\n        well as the integer of low frequency samples, are returned.\n\n        Args:\n            shape: Shape of the k-space to subsample.\n            offset: Offset from 0 to begin mask (for equispaced masks).\n\n        Returns:\n            A 3-tuple contaiing 1) the mask for the center of k-space, 2) the\n            mask for the high frequencies of k-space, and 3) the integer count\n            of low frequency samples.\n        \"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_low_frequencies", "=", "round", "(", "num_cols", "*", "center_fraction", ")", "\n", "center_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_center_mask", "(", "shape", ",", "num_low_frequencies", ")", ",", "shape", "\n", ")", "\n", "acceleration_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_acceleration_mask", "(", "\n", "num_cols", ",", "acceleration", ",", "offset", ",", "num_low_frequencies", "\n", ")", ",", "\n", "shape", ",", "\n", ")", "\n", "\n", "return", "center_mask", ",", "acceleration_mask", ",", "num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.reshape_mask": [[149, 156], ["torch.from_numpy", "mask.reshape().astype", "mask.reshape"], "methods", ["None"], ["", "def", "reshape_mask", "(", "self", ",", "mask", ":", "np", ".", "ndarray", ",", "shape", ":", "Sequence", "[", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Reshape mask to desired output shape.\"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.calculate_acceleration_mask": [[157, 177], ["None"], "methods", ["None"], ["", "def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Produce mask for non-central acceleration lines.\n\n        Args:\n            num_cols: Number of columns of k-space (2D subsampling).\n            acceleration: Desired acceleration rate.\n            offset: Offset from 0 to begin masking (for equispaced masks).\n            num_low_frequencies: Integer count of low-frequency lines sampled.\n\n        Returns:\n            A mask for the high spatial frequencies of k-space.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.calculate_center_mask": [[178, 198], ["numpy.zeros", "numpy.zeros.sum"], "methods", ["None"], ["", "def", "calculate_center_mask", "(", "\n", "self", ",", "shape", ":", "Sequence", "[", "int", "]", ",", "num_low_freqs", ":", "int", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Build center mask based on number of low frequencies.\n\n        Args:\n            shape: Shape of k-space to mask.\n            num_low_freqs: Number of low-frequency lines to sample.\n\n        Returns:\n            A mask for hte low spatial frequencies of k-space.\n        \"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "1", "\n", "assert", "mask", ".", "sum", "(", ")", "==", "num_low_freqs", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.choose_acceleration": [[199, 208], ["subsample.MaskFunc.rng.randint", "subsample.MaskFunc.rng.choice", "subsample.MaskFunc.rng.choice", "len"], "methods", ["None"], ["", "def", "choose_acceleration", "(", "self", ")", ":", "\n", "        ", "\"\"\"Choose acceleration based on class parameters.\"\"\"", "\n", "if", "self", ".", "allow_any_combination", ":", "\n", "            ", "return", "self", ".", "rng", ".", "choice", "(", "self", ".", "center_fractions", ")", ",", "self", ".", "rng", ".", "choice", "(", "\n", "self", ".", "accelerations", "\n", ")", "\n", "", "else", ":", "\n", "            ", "choice", "=", "self", ".", "rng", ".", "randint", "(", "len", "(", "self", ".", "center_fractions", ")", ")", "\n", "return", "self", ".", "center_fractions", "[", "choice", "]", ",", "self", ".", "accelerations", "[", "choice", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.RandomMaskFunc.calculate_acceleration_mask": [[233, 245], ["subsample.RandomMaskFunc.rng.uniform"], "methods", ["None"], ["def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "prob", "=", "(", "num_cols", "/", "acceleration", "-", "num_low_frequencies", ")", "/", "(", "\n", "num_cols", "-", "num_low_frequencies", "\n", ")", "\n", "\n", "return", "self", ".", "rng", ".", "uniform", "(", "size", "=", "num_cols", ")", "<", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.EquiSpacedMaskFunc.calculate_acceleration_mask": [[256, 283], ["numpy.zeros", "subsample.EquiSpacedMaskFunc.rng.randint", "round"], "methods", ["None"], ["def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Produce mask for non-central acceleration lines.\n\n        Args:\n            num_cols: Number of columns of k-space (2D subsampling).\n            acceleration: Desired acceleration rate.\n            offset: Offset from 0 to begin masking. If no offset is specified,\n                then one is selected randomly.\n            num_low_frequencies: Not used.\n\n        Returns:\n            A mask for the high spatial frequencies of k-space.\n        \"\"\"", "\n", "if", "offset", "is", "None", ":", "\n", "            ", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "high", "=", "round", "(", "acceleration", ")", ")", "\n", "\n", "", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "[", "offset", ":", ":", "acceleration", "]", "=", "1", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.EquispacedMaskFractionFunc.calculate_acceleration_mask": [[308, 342], ["numpy.zeros", "numpy.arange", "numpy.around().astype", "subsample.EquispacedMaskFractionFunc.rng.randint", "numpy.around", "round"], "methods", ["None"], ["def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Produce mask for non-central acceleration lines.\n\n        Args:\n            num_cols: Number of columns of k-space (2D subsampling).\n            acceleration: Desired acceleration rate.\n            offset: Offset from 0 to begin masking. If no offset is specified,\n                then one is selected randomly.\n            num_low_frequencies: Number of low frequencies. Used to adjust mask\n                to exactly match the target acceleration.\n\n        Returns:\n            A mask for the high spatial frequencies of k-space.\n        \"\"\"", "\n", "# determine acceleration rate by adjusting for the number of low frequencies", "\n", "adjusted_accel", "=", "(", "acceleration", "*", "(", "num_low_frequencies", "-", "num_cols", ")", ")", "/", "(", "\n", "num_low_frequencies", "*", "acceleration", "-", "num_cols", "\n", ")", "\n", "if", "offset", "is", "None", ":", "\n", "            ", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "high", "=", "round", "(", "adjusted_accel", ")", ")", "\n", "\n", "", "mask", "=", "np", ".", "zeros", "(", "num_cols", ")", "\n", "accel_samples", "=", "np", ".", "arange", "(", "offset", ",", "num_cols", "-", "1", ",", "adjusted_accel", ")", "\n", "accel_samples", "=", "np", ".", "around", "(", "accel_samples", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "mask", "[", "accel_samples", "]", "=", "1.0", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MagicMaskFunc.calculate_acceleration_mask": [[363, 405], ["numpy.zeros", "numpy.zeros", "numpy.flip", "numpy.concatenate", "numpy.fft.fftshift", "subsample.MagicMaskFunc.rng.randint"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Produce mask for non-central acceleration lines.\n\n        Args:\n            num_cols: Number of columns of k-space (2D subsampling).\n            acceleration: Desired acceleration rate.\n            offset: Offset from 0 to begin masking. If no offset is specified,\n                then one is selected randomly.\n            num_low_frequencies: Not used.\n\n        Returns:\n            A mask for the high spatial frequencies of k-space.\n        \"\"\"", "\n", "if", "offset", "is", "None", ":", "\n", "            ", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "high", "=", "acceleration", ")", "\n", "\n", "", "if", "offset", "%", "2", "==", "0", ":", "\n", "            ", "offset_pos", "=", "offset", "+", "1", "\n", "offset_neg", "=", "offset", "+", "2", "\n", "", "else", ":", "\n", "            ", "offset_pos", "=", "offset", "-", "1", "+", "3", "\n", "offset_neg", "=", "offset", "-", "1", "+", "0", "\n", "\n", "", "poslen", "=", "(", "num_cols", "+", "1", ")", "//", "2", "\n", "neglen", "=", "num_cols", "-", "(", "num_cols", "+", "1", ")", "//", "2", "\n", "mask_positive", "=", "np", ".", "zeros", "(", "poslen", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask_negative", "=", "np", ".", "zeros", "(", "neglen", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "mask_positive", "[", "offset_pos", ":", ":", "acceleration", "]", "=", "1", "\n", "mask_negative", "[", "offset_neg", ":", ":", "acceleration", "]", "=", "1", "\n", "mask_negative", "=", "np", ".", "flip", "(", "mask_negative", ")", "\n", "\n", "mask", "=", "np", ".", "concatenate", "(", "(", "mask_positive", ",", "mask_negative", ")", ")", "\n", "\n", "return", "np", ".", "fft", ".", "fftshift", "(", "mask", ")", "# shift mask and return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MagicMaskFractionFunc.sample_mask": [[426, 476], ["subsample.MagicMaskFractionFunc.choose_acceleration", "round", "round", "max", "subsample.MagicMaskFractionFunc.reshape_mask", "subsample.MagicMaskFractionFunc.reshape_mask", "min", "round", "subsample.MagicMaskFractionFunc.calculate_center_mask", "subsample.MagicMaskFractionFunc.calculate_acceleration_mask"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.MaskFunc.calculate_center_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.EquispacedMaskFractionFunc.calculate_acceleration_mask"], ["def", "sample_mask", "(", "\n", "self", ",", "\n", "shape", ":", "Sequence", "[", "int", "]", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Sample a new k-space mask.\n\n        This function samples and returns two components of a k-space mask: 1)\n        the center mask (e.g., for sensitivity map calculation) and 2) the\n        acceleration mask (for the edge of k-space). Both of these masks, as\n        well as the integer of low frequency samples, are returned.\n\n        Args:\n            shape: Shape of the k-space to subsample.\n            offset: Offset from 0 to begin mask (for equispaced masks).\n\n        Returns:\n            A 3-tuple contaiing 1) the mask for the center of k-space, 2) the\n            mask for the high frequencies of k-space, and 3) the integer count\n            of low frequency samples.\n        \"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "fraction_low_freqs", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "num_low_frequencies", "=", "round", "(", "num_cols", "*", "fraction_low_freqs", ")", "\n", "\n", "# bound the number of low frequencies between 1 and target columns", "\n", "target_columns_to_sample", "=", "round", "(", "num_cols", "/", "acceleration", ")", "\n", "num_low_frequencies", "=", "max", "(", "min", "(", "num_low_frequencies", ",", "target_columns_to_sample", ")", ",", "1", ")", "\n", "\n", "# adjust acceleration rate based on target acceleration.", "\n", "adjusted_target_columns_to_sample", "=", "(", "\n", "target_columns_to_sample", "-", "num_low_frequencies", "\n", ")", "\n", "adjusted_acceleration", "=", "0", "\n", "if", "adjusted_target_columns_to_sample", ">", "0", ":", "\n", "            ", "adjusted_acceleration", "=", "round", "(", "num_cols", "/", "adjusted_target_columns_to_sample", ")", "\n", "\n", "", "center_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_center_mask", "(", "shape", ",", "num_low_frequencies", ")", ",", "shape", "\n", ")", "\n", "accel_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_acceleration_mask", "(", "\n", "num_cols", ",", "adjusted_acceleration", ",", "offset", ",", "num_low_frequencies", "\n", ")", ",", "\n", "shape", ",", "\n", ")", "\n", "\n", "return", "center_mask", ",", "accel_mask", ",", "num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.temp_seed": [[15, 30], ["rng.get_state", "rng.seed", "rng.set_state"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ":", "np", ".", "random", ".", "RandomState", ",", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", ")", ":", "\n", "    ", "\"\"\"A context manager for temporarily adjusting the random seed.\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "pass", "\n", "", "", "else", ":", "\n", "        ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "rng", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.subsample.create_mask_for_mask_type": [[478, 505], ["subsample.RandomMaskFunc", "subsample.EquiSpacedMaskFunc", "subsample.EquispacedMaskFractionFunc", "subsample.MagicMaskFunc", "subsample.MagicMaskFractionFunc", "ValueError"], "function", ["None"], ["", "", "def", "create_mask_for_mask_type", "(", "\n", "mask_type_str", ":", "str", ",", "\n", "center_fractions", ":", "Sequence", "[", "float", "]", ",", "\n", "accelerations", ":", "Sequence", "[", "int", "]", ",", "\n", ")", "->", "MaskFunc", ":", "\n", "    ", "\"\"\"\n    Creates a mask of the specified type.\n\n    Args:\n        center_fractions: What fraction of the center of k-space to include.\n        accelerations: What accelerations to apply.\n\n    Returns:\n        A mask func for the target mask type.\n    \"\"\"", "\n", "if", "mask_type_str", "==", "\"random\"", ":", "\n", "        ", "return", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"equispaced\"", ":", "\n", "        ", "return", "EquiSpacedMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"equispaced_fraction\"", ":", "\n", "        ", "return", "EquispacedMaskFractionFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"magic\"", ":", "\n", "        ", "return", "MagicMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"magic_fraction\"", ":", "\n", "        ", "return", "MagicMaskFractionFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"{mask_type_str} not supported\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_to_chans": [[46, 50], ["data.permute().contiguous().view", "data.permute().contiguous", "data.permute"], "function", ["None"], ["\n", "return", "torch", ".", "view_as_complex", "(", "data", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "def", "apply_mask", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.chans_to_complex": [[52, 57], ["data.view().permute().contiguous", "data.view().permute", "data.view"], "function", ["None"], ["mask_func", ":", "MaskFunc", ",", "\n", "offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", "=", "None", ",", "\n", "padding", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_complex_model": [[59, 67], ["data.view().std().view", "std.expand().contiguous.expand().contiguous", "transforms.chans_to_complex", "model", "data.view().std", "std.expand().contiguous.expand", "transforms.complex_to_chans", "data.view"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.chans_to_complex", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_to_chans"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.kspace_dc": [[69, 71], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.image_dc": [[73, 75], ["T.ifft2", "transforms.kspace_dc", "T.fft2"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.kspace_dc", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2"], ["\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask_tensor": [[124, 139], ["None"], "function", ["None"], ["        ", "if", "(", "not", "x", ".", "shape", "[", "0", "]", "==", "mask_from", ".", "shape", "[", "0", "]", ")", "or", "(", "\n", "not", "x", ".", "shape", "[", "0", "]", "==", "mask_to", ".", "shape", "[", "0", "]", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mask_from and mask_to must have batch_size length.\"", ")", "\n", "\n", "", "", "if", "mask_from", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "mask", "=", "mask_center", "(", "x", ",", "int", "(", "mask_from", ")", ",", "int", "(", "mask_to", ")", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "i", ",", "(", "start", ",", "end", ")", "in", "enumerate", "(", "zip", "(", "mask_from", ",", "mask_to", ")", ")", ":", "\n", "            ", "mask", "[", "i", ",", ":", ",", ":", ",", "start", ":", "end", "]", "=", "x", "[", "i", ",", ":", ",", ":", ",", "start", ":", "end", "]", "\n", "\n", "", "", "return", "mask", "\n", "\n", "\n", "", "def", "center_crop", "(", "data", ":", "torch", ".", "Tensor", ",", "shape", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2": [[141, 158], ["transforms.ifftshift", "fft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["\n", "if", "not", "(", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "and", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid shapes.\"", ")", "\n", "\n", "", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2": [[160, 177], ["transforms.ifftshift", "ifft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n", "\n", "", "def", "complex_center_crop", "(", "data", ":", "torch", ".", "Tensor", ",", "shape", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input image or batch of complex images.\n\n    Args:\n        data: The complex input tensor to be center cropped. It should have at\n            least 3 dimensions and the cropping is applied along dimensions -3\n            and -2 and the last dimensions should have a size of 2.\n        shape: The output shape. The shape should be smaller than the\n            corresponding dimensions of data.\n\n    Returns:\n        The center cropped image\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.rfft2": [[179, 184], ["transforms.ifftshift", "rfft", "transforms.fftshift"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["        ", "raise", "ValueError", "(", "\"Invalid shapes.\"", ")", "\n", "\n", "", "w_from", "=", "(", "data", ".", "shape", "[", "-", "3", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.irfft2": [[186, 192], ["transforms.ifftshift", "irfft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", ",", ":", "]", "\n", "\n", "\n", "", "def", "center_crop_to_smallest", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2_np": [[193, 201], ["numpy.fft.ifftshift", "numpy.fft.fft2", "numpy.fft.fftshift"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2_np": [[203, 211], ["numpy.fft.ifftshift", "numpy.fft.ifft2", "numpy.fft.fftshift"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["\n", "smallest_width", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "smallest_height", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", ",", "y", ".", "shape", "[", "-", "2", "]", ")", "\n", "x", "=", "center_crop", "(", "x", ",", "(", "smallest_height", ",", "smallest_width", ")", ")", "\n", "y", "=", "center_crop", "(", "y", ",", "(", "smallest_height", ",", "smallest_width", ")", ")", "\n", "\n", "return", "x", ",", "y", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs": [[212, 225], ["data.size"], "function", ["None"], ["\n", "\n", "", "def", "normalize", "(", "\n", "data", ":", "torch", ".", "Tensor", ",", "\n", "mean", ":", "Union", "[", "float", ",", "torch", ".", "Tensor", "]", ",", "\n", "stddev", ":", "Union", "[", "float", ",", "torch", ".", "Tensor", "]", ",", "\n", "eps", ":", "Union", "[", "float", ",", "torch", ".", "Tensor", "]", "=", "0.0", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs_sq": [[226, 232], ["data.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj": [[417, 419], ["torch.stack"], "function", ["None"], ["\n", "", "class", "VarNetDataTransform", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares": [[237, 252], ["torch.norm", "Exception"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm"], ["", "def", "normalize_instance", "(", "\n", "data", ":", "torch", ".", "Tensor", ",", "eps", ":", "Union", "[", "float", ",", "torch", ".", "Tensor", "]", "=", "0.0", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Normalize the given tensor  with instance norm/\n\n    Applies the formula (data - mean) / (stddev + eps), where mean and stddev\n    are computed from the data itself.\n\n    Args:\n        data: Input data to be normalized\n        eps: Added to stddev to prevent dividing by zero.\n\n    Returns:\n        torch.Tensor: Normalized tensor\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares_complex": [[253, 269], ["torch.sqrt", "Exception", "complex_abs_sq().sum", "transforms.complex_abs_sq"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs_sq"], ["mean", "=", "data", ".", "mean", "(", ")", "\n", "std", "=", "data", ".", "std", "(", ")", "\n", "\n", "return", "normalize", "(", "data", ",", "mean", ",", "std", ",", "eps", ")", ",", "mean", ",", "std", "\n", "\n", "\n", "", "class", "UnetSample", "(", "NamedTuple", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_or_pad": [[329, 352], ["list", "transforms.center_crop_or_pad.crop_or_pad_indices"], "function", ["None"], ["\n", "kspace_torch", "=", "to_tensor", "(", "kspace", ")", "\n", "\n", "# check for max value", "\n", "max_value", "=", "attrs", "[", "\"max\"", "]", "if", "\"max\"", "in", "attrs", ".", "keys", "(", ")", "else", "0.0", "\n", "\n", "# apply mask", "\n", "if", "self", ".", "mask_func", ":", "\n", "            ", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "# we only need first element, which is k-space after masking", "\n", "masked_kspace", "=", "apply_mask", "(", "kspace_torch", ",", "self", ".", "mask_func", ",", "seed", "=", "seed", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace_torch", "\n", "\n", "# inverse Fourier transform to get zero filled solution", "\n", "", "image", "=", "fastmri", ".", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_scalar_to_tensor": [[411, 416], ["torch.tensor"], "function", ["None"], ["target", ":", "torch", ".", "Tensor", "\n", "fname", ":", "str", "\n", "slice_num", ":", "int", "\n", "max_value", ":", "float", "\n", "crop_size", ":", "Tuple", "[", "int", ",", "int", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_mult": [[421, 426], ["torch.stack"], "function", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "mask_func", ":", "Optional", "[", "MaskFunc", "]", "=", "None", ",", "use_seed", ":", "bool", "=", "True", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_mult_real": [[427, 433], ["torch.stack"], "function", ["None"], ["\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "use_seed", "=", "use_seed", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj_mult_real": [[434, 437], ["None"], "function", ["None"], ["\n", "", "def", "__call__", "(", "\n", "self", ",", "\n", "kspace", ":", "np", ".", "ndarray", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj_mult": [[439, 445], ["torch.stack"], "function", ["None"], ["target", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "\n", "attrs", ":", "Dict", ",", "\n", "fname", ":", "str", ",", "\n", "slice_num", ":", "int", ",", "\n", ")", "->", "VarNetSample", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_div": [[446, 449], ["transforms.complex_conj_mult", "transforms.complex_abs_sq"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj_mult", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs_sq"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_pack": [[450, 458], ["x.permute().contiguous().view", "x.permute().contiguous", "x.permute"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_unpack": [[459, 468], ["x.view().permute().contiguous", "x.view().permute", "x.view"], "function", ["None"], ["\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target_torch", "=", "to_tensor", "(", "target", ")", "\n", "max_value", "=", "attrs", "[", "\"max\"", "]", "\n", "", "else", ":", "\n", "            ", "target_torch", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "max_value", "=", "0.0", "\n", "\n", "", "kspace_torch", "=", "to_tensor", "(", "kspace", ")", "\n", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_packed_to_planar": [[470, 479], ["torch.stack"], "function", ["None"], ["acq_end", "=", "attrs", "[", "\"padding_right\"", "]", "\n", "\n", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "mask_func", "is", "not", "None", ":", "\n", "            ", "masked_kspace", ",", "mask_torch", ",", "num_low_frequencies", "=", "apply_mask", "(", "\n", "kspace_torch", ",", "self", ".", "mask_func", ",", "seed", "=", "seed", ",", "padding", "=", "(", "acq_start", ",", "acq_end", ")", "\n", ")", "\n", "\n", "sample", "=", "VarNetSample", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_planar_to_packed": [[481, 490], ["torch.stack"], "function", ["None"], ["mask", "=", "mask_torch", ".", "to", "(", "torch", ".", "bool", ")", ",", "\n", "num_low_frequencies", "=", "num_low_frequencies", ",", "\n", "target", "=", "target_torch", ",", "\n", "fname", "=", "fname", ",", "\n", "slice_num", "=", "slice_num", ",", "\n", "max_value", "=", "max_value", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace_torch", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_whiten": [[492, 514], ["real.nelement", "torch.Tensor", "torch.eig", "torch.matmul", "complex_image.mean", "real.mul().sum", "real.mean().mul", "real.mul().sum", "real.mean().mul", "imag.mul().sum", "imag.mean().mul", "real.mean", "imag.mean", "imag.mean", "real.mul", "real.mean", "real.mul", "real.mean", "imag.mul", "imag.mean"], "function", ["None"], ["num_cols", "=", "shape", "[", "-", "2", "]", "\n", "shape", "[", ":", "-", "3", "]", "=", "1", "\n", "mask_shape", "=", "[", "1", "]", "*", "len", "(", "shape", ")", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask_torch", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "mask_torch", "=", "mask_torch", ".", "reshape", "(", "*", "mask_shape", ")", "\n", "mask_torch", "[", ":", ",", ":", ",", ":", "acq_start", "]", "=", "0", "\n", "mask_torch", "[", ":", ",", ":", ",", "acq_end", ":", "]", "=", "0", "\n", "\n", "sample", "=", "VarNetSample", "(", "\n", "masked_kspace", "=", "masked_kspace", ",", "\n", "mask", "=", "mask_torch", ".", "to", "(", "torch", ".", "bool", ")", ",", "\n", "num_low_frequencies", "=", "0", ",", "\n", "target", "=", "target_torch", ",", "\n", "fname", "=", "fname", ",", "\n", "slice_num", "=", "slice_num", ",", "\n", "max_value", "=", "max_value", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll": [[518, 533], ["isinstance", "roll.narrow", "roll.narrow", "torch.cat", "zip", "roll.size", "len", "len", "transforms.roll", "roll.size", "roll.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["\n", "\n", "kspace", ":", "torch", ".", "Tensor", "\n", "masked_kspace", ":", "torch", ".", "Tensor", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift": [[534, 546], ["transforms.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["mask", ":", "torch", ".", "Tensor", "\n", "target", ":", "torch", ".", "Tensor", "\n", "fname", ":", "str", "\n", "slice_num", ":", "int", "\n", "max_value", ":", "float", "\n", "crop_size", ":", "Tuple", "[", "int", ",", "int", "]", "\n", "\n", "\n", "", "class", "MiniCoilTransform", ":", "\n", "    ", "\"\"\"\n    Multi-coil compressed transform, for faster prototyping.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift": [[556, 568], ["transforms.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "num_compressed_coils", "=", "num_compressed_coils", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.topolar": [[569, 574], ["torch.norm", "torch.atan2", "torch.stack", "x.dim"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm"], ["\n", "", "def", "__call__", "(", "self", ",", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice_num", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.frompolar": [[575, 580], ["torch.stack", "x.dim", "torch.cos", "torch.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.subsample": [[582, 586], ["range"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_grappa": [[588, 613], ["kernel.unsqueeze.to", "transforms.complex_to_chans", "torch.nn.functional.pad", "torch.cat", "transforms.chans_to_complex", "transforms.kspace_dc", "subsample.dim", "subsample.unsqueeze", "kernel.unsqueeze.unsqueeze", "transforms.subsample", "torch.nn.functional.conv2d", "result_ksp.squeeze.squeeze", "input_ksp_[].unsqueeze", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_to_chans", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.NormUnet.pad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.chans_to_complex", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.kspace_dc", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.subsample"], ["\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "to_tensor", "(", "target", ")", "\n", "max_value", "=", "attrs", "[", "\"max\"", "]", "\n", "", "else", ":", "\n", "            ", "target", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "max_value", "=", "0.0", "\n", "\n", "", "if", "self", ".", "crop_size", "is", "None", ":", "\n", "            ", "crop_size", "=", "torch", ".", "tensor", "(", "[", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "or", "isinstance", "(", "self", ".", "crop_size", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "self", ".", "crop_size", ")", "==", "2", "\n", "if", "self", ".", "crop_size", "[", "0", "]", "is", "None", "or", "self", ".", "crop_size", "[", "1", "]", "is", "None", ":", "\n", "                    ", "crop_size", "=", "torch", ".", "tensor", "(", "\n", "[", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "crop_size", "=", "torch", ".", "tensor", "(", "self", ".", "crop_size", ")", "\n", "", "", "elif", "isinstance", "(", "self", ".", "crop_size", ",", "int", ")", ":", "\n", "                ", "crop_size", "=", "torch", ".", "tensor", "(", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.coil_compress": [[615, 642], ["torch.stack.numpy", "tuple", "torch.stack.reshape", "numpy.transpose", "numpy.reshape", "torch.stack", "numpy.conj", "scipy.linalg.svd", "scipy.sparse.linalg.svds", "print", "traceback.print_exc", "torch.Tensor", "torch.Tensor", "numpy.real", "numpy.imag"], "function", ["None"], ["                ", "raise", "ValueError", "(", "\n", "f\"`crop_size` should be None, tuple, list, or int, not: {type(self.crop_size)}\"", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "num_compressed_coils", "is", "None", ":", "\n", "            ", "num_compressed_coils", "=", "kspace", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "num_compressed_coils", "=", "self", ".", "num_compressed_coils", "\n", "\n", "", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "acq_start", "=", "0", "\n", "acq_end", "=", "crop_size", "[", "1", "]", "\n", "\n", "# new cropping section", "\n", "square_crop", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "kspace", "=", "fastmri", ".", "fft2c", "(", "\n", "complex_center_crop", "(", "fastmri", ".", "ifft2c", "(", "to_tensor", "(", "kspace", ")", ")", ",", "square_crop", ")", "\n", ")", ".", "numpy", "(", ")", "\n", "kspace", "=", "complex_center_crop", "(", "kspace", ",", "crop_size", ")", "\n", "\n", "# we calculate the target before coil compression. This causes the mini", "\n", "# simulation to be one where we have a 15-coil, low-resolution image", "\n", "# and our reconstructor has an SVD coil approximation. This is a little", "\n", "# bit more realistic than doing the target after SVD compression", "\n", "target", "=", "fastmri", ".", "rss_complex", "(", "fastmri", ".", "ifft2c", "(", "to_tensor", "(", "kspace", ")", ")", ")", "\n", "max_value", "=", "target", ".", "max", "(", ")", "\n", "\n", "# apply coil compression", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.create_input": [[19, 23], ["numpy.arange().reshape", "torch.from_numpy().float", "numpy.arange", "torch.from_numpy", "numpy.product"], "function", ["None"], ["[", "(", "[", "4", ",", "150", ",", "75", ",", "2", "]", ",", "[", "0.08", "]", ",", "[", "4", "]", ")", ",", "(", "[", "2", ",", "120", ",", "60", ",", "2", "]", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ")", "]", ",", "\n", ")", "\n", "def", "test_apply_mask", "(", "shape", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_apply_mask": [[25, 38], ["pytest.mark.parametrize", "fastmri.common.subsample.RandomMask", "fastmri.common.subsample.RandomMask.", "test_transforms.create_input", "fastmri.data.transforms.apply_mask", "numpy.all", "numpy.all", "expected_mask.numpy", "mask.numpy", "output.numpy", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["expected_mask", ",", "expected_num_low_frequencies", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "assert", "expected_num_low_frequencies", "in", "[", "\n", "round", "(", "cf", "*", "shape", "[", "-", "2", "]", ")", "for", "cf", "in", "center_fractions", "\n", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_frequencies", "=", "transforms", ".", "apply_mask", "(", "x", ",", "mask_func", ",", "seed", "=", "123", ")", "\n", "\n", "assert", "(", "state", "[", "1", "]", "==", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "assert", "output", ".", "shape", "==", "x", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "expected_mask", ".", "shape", "\n", "assert", "np", ".", "all", "(", "expected_mask", ".", "numpy", "(", ")", "==", "mask", ".", "numpy", "(", ")", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "where", "(", "mask", ".", "numpy", "(", ")", "==", "0", ",", "0", ",", "output", ".", "numpy", "(", ")", ")", "==", "output", ".", "numpy", "(", ")", ")", "\n", "assert", "num_low_frequencies", "==", "expected_num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_fft2": [[40, 56], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.fft2().numpy", "fastmri.common.utils.tensor_to_complex_np", "numpy.fft.ifftshift", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.allclose", "fastmri.data.transforms.fft2"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, center_fractions, accelerations\"", ",", "\n", "[", "(", "[", "150", ",", "75", ",", "2", "]", ",", "[", "0.08", "]", ",", "[", "4", "]", ")", ",", "(", "[", "120", ",", "60", ",", "2", "]", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ")", "]", ",", "\n", ")", "\n", "def", "test_apply_mask_with_padding", "(", "shape", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "padding", "=", "[", "3", ",", "shape", "[", "-", "2", "]", "-", "3", "]", "\n", "mask_func", "=", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "expected_mask", ",", "expected_num_low_frequencies", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "assert", "expected_num_low_frequencies", "in", "[", "\n", "round", "(", "cf", "*", "shape", "[", "-", "2", "]", ")", "for", "cf", "in", "center_fractions", "\n", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_frequencies", "=", "transforms", ".", "apply_mask", "(", "\n", "x", ",", "\n", "mask_func", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_ifft2": [[58, 74], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.ifft2().numpy", "fastmri.common.utils.tensor_to_complex_np", "numpy.fft.ifftshift", "numpy.fft.ifft2", "numpy.fft.fftshift", "numpy.allclose", "fastmri.data.transforms.ifft2"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2"], ["padding", "=", "padding", ",", "\n", ")", "\n", "\n", "assert", "(", "state", "[", "1", "]", "==", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "assert", "output", ".", "shape", "==", "x", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "expected_mask", ".", "shape", "\n", "assert", "np", ".", "unique", "(", "mask", ".", "numpy", "(", ")", ")", ".", "tolist", "(", ")", "==", "[", "0.0", ",", "1.0", "]", "\n", "assert", "np", ".", "all", "(", "\n", "expected_mask", "[", "...", ",", "padding", "[", "0", "]", ":", "padding", "[", "1", "]", ",", ":", "]", ".", "numpy", "(", ")", "\n", "==", "mask", "[", "...", ",", "padding", "[", "0", "]", ":", "padding", "[", "1", "]", ",", ":", "]", ".", "numpy", "(", ")", "\n", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "where", "(", "mask", ".", "numpy", "(", ")", "==", "0", ",", "0", ",", "output", ".", "numpy", "(", ")", ")", "==", "output", ".", "numpy", "(", ")", ")", "\n", "assert", "num_low_frequencies", "==", "expected_num_low_frequencies", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"mask_type\"", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_complex_abs": [[76, 88], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.complex_abs().numpy", "fastmri.common.utils.tensor_to_complex_np", "numpy.abs", "numpy.allclose", "fastmri.data.transforms.complex_abs"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs"], [")", "\n", "def", "test_mask_types", "(", "mask_type", ")", ":", "\n", "    ", "shape_list", "=", "(", "(", "4", ",", "32", ",", "32", ",", "2", ")", ",", "(", "2", ",", "64", ",", "32", ",", "2", ")", ",", "(", "1", ",", "33", ",", "24", ",", "2", ")", ")", "\n", "center_fraction_list", "=", "(", "[", "0.08", "]", ",", "[", "0.04", "]", ",", "[", "0.04", ",", "0.08", "]", ")", "\n", "acceleration_list", "=", "(", "[", "4", "]", ",", "[", "8", "]", ",", "[", "4", ",", "8", "]", ")", "\n", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "for", "shape", "in", "shape_list", ":", "\n", "        ", "for", "center_fractions", ",", "accelerations", "in", "zip", "(", "\n", "center_fraction_list", ",", "acceleration_list", "\n", ")", ":", "\n", "            ", "mask_func", "=", "create_mask_for_mask_type", "(", "\n", "mask_type", ",", "center_fractions", ",", "accelerations", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_root_sum_of_squares": [[90, 100], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.root_sum_of_squares().numpy", "numpy.sqrt", "numpy.allclose", "numpy.sum", "fastmri.data.transforms.root_sum_of_squares", "create_input.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares"], ["expected_mask", ",", "expected_num_low_frequencies", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_frequencies", "=", "transforms", ".", "apply_mask", "(", "\n", "x", ",", "mask_func", ",", "seed", "=", "123", "\n", ")", "\n", "\n", "assert", "(", "state", "[", "1", "]", "==", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "assert", "output", ".", "shape", "==", "x", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "expected_mask", ".", "shape", "\n", "assert", "np", ".", "all", "(", "expected_mask", ".", "numpy", "(", ")", "==", "mask", ".", "numpy", "(", ")", ")", "\n", "assert", "np", ".", "all", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_center_crop": [[102, 111], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.center_crop().numpy", "list", "fastmri.data.transforms.center_crop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], [")", "\n", "assert", "num_low_frequencies", "==", "expected_num_low_frequencies", "\n", "\n", "\n", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "(", "\n", "\"allow_any_combination, center_fractions, accelerations, seed, \"", "\n", "\"choose_acceleration_output\"", "\n", ")", ",", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_center_crop_to_smallest": [[112, 122], ["pytest.mark.parametrize", "test_transforms.create_input", "test_transforms.create_input", "fastmri.data.transforms.center_crop_to_smallest", "list"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_to_smallest"], ["(", "True", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ",", "2", ",", "(", "0.04", ",", "4", ")", ")", ",", "\n", "(", "False", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ",", "2", ",", "(", "0.04", ",", "8", ")", ")", ",", "\n", "(", "True", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "16", ",", "8", ",", "4", "]", ",", "8", ",", "(", "0.08", ",", "16", ")", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_fraction_accel_sync", "(", "\n", "allow_any_combination", ",", "\n", "center_fractions", ",", "\n", "accelerations", ",", "\n", "seed", ",", "\n", "choose_acceleration_output", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_center_crop_or_pad": [[123, 132], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.center_crop_or_pad", "list"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop_or_pad"], [")", ":", "\n", "    ", "\"\"\"For this test we have manually checked choose_acceleration_output.\"\"\"", "\n", "f", "=", "MaskFunc", "(", "\n", "center_fractions", "=", "center_fractions", ",", "\n", "accelerations", "=", "accelerations", ",", "\n", "allow_any_combination", "=", "allow_any_combination", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n", "if", "not", "allow_any_combination", ":", "\n", "        ", "for", "_", "in", "range", "(", "50", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_complex_center_crop": [[133, 143], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.complex_center_crop().numpy", "list", "fastmri.data.transforms.complex_center_crop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop"], ["            ", "center_fraction", ",", "acceleration", "=", "f", ".", "choose_acceleration", "(", ")", "\n", "assert", "center_fractions", ".", "index", "(", "center_fraction", ")", "==", "accelerations", ".", "index", "(", "\n", "acceleration", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "f", ".", "choose_acceleration", "(", ")", "==", "choose_acceleration_output", "\n", "\n", "\n", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, target_shape\"", ",", "[", "[", "[", "10", ",", "10", "]", ",", "[", "4", ",", "4", "]", "]", ",", "[", "[", "4", ",", "6", "]", ",", "[", "2", ",", "4", "]", "]", ",", "[", "[", "8", ",", "4", "]", ",", "[", "4", ",", "4", "]", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_normalize": [[144, 154], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.normalize().numpy", "numpy.isclose", "numpy.isclose", "transforms.normalize().numpy.mean", "transforms.normalize().numpy.std", "fastmri.data.transforms.normalize", "create_input.numpy().std", "create_input.numpy().mean", "create_input.numpy", "create_input.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize"], ["def", "test_center_crop", "(", "shape", ",", "target_shape", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "transforms", ".", "center_crop", "(", "x", ",", "target_shape", ")", ".", "numpy", "(", ")", "\n", "\n", "assert", "list", "(", "out_torch", ".", "shape", ")", "==", "target_shape", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, target_shape\"", ",", "[", "[", "[", "10", ",", "10", "]", ",", "[", "4", ",", "4", "]", "]", ",", "[", "[", "4", ",", "6", "]", ",", "[", "2", ",", "4", "]", "]", ",", "[", "[", "8", ",", "4", "]", ",", "[", "4", ",", "4", "]", "]", "]", "\n", ")", "\n", "def", "test_complex_center_crop", "(", "shape", ",", "target_shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_normalize_instance": [[156, 168], ["pytest.mark.parametrize", "test_transforms.create_input", "fastmri.data.transforms.normalize_instance", "output.numpy.numpy", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "create_input.numpy().mean", "create_input.numpy().std", "output.numpy.mean", "output.numpy.std", "create_input.numpy", "create_input.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize_instance"], ["x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "transforms", ".", "complex_center_crop", "(", "x", ",", "target_shape", ")", ".", "numpy", "(", ")", "\n", "\n", "assert", "list", "(", "out_torch", ".", "shape", ")", "==", "target_shape", "+", "[", "\n", "2", ",", "\n", "]", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, mean, stddev\"", ",", "[", "[", "[", "10", ",", "10", "]", ",", "0", ",", "1", "]", ",", "[", "[", "4", ",", "6", "]", ",", "4", ",", "10", "]", ",", "[", "[", "8", ",", "4", "]", ",", "2", ",", "3", "]", "]", "\n", ")", "\n", "def", "test_normalize", "(", "shape", ",", "mean", ",", "stddev", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_roll": [[170, 186], ["pytest.mark.parametrize", "pytest.mark.parametrize", "numpy.arange().reshape", "fastmri.data.transforms.roll().numpy", "numpy.roll", "numpy.allclose", "numpy.arange", "fastmri.data.transforms.roll", "numpy.product", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["\n", "assert", "np", ".", "isclose", "(", "output", ".", "mean", "(", ")", ",", "(", "x", ".", "numpy", "(", ")", ".", "mean", "(", ")", "-", "mean", ")", "/", "stddev", ")", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "std", "(", ")", ",", "x", ".", "numpy", "(", ")", ".", "std", "(", ")", "/", "stddev", ")", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"shape\"", ",", "[", "[", "10", ",", "10", "]", ",", "[", "20", ",", "40", ",", "30", "]", "]", ")", "\n", "def", "test_normalize_instance", "(", "shape", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mean", ",", "stddev", "=", "transforms", ".", "normalize_instance", "(", "x", ")", "\n", "output", "=", "output", ".", "numpy", "(", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "x", ".", "numpy", "(", ")", ".", "mean", "(", ")", ",", "mean", ",", "rtol", "=", "1e-2", ")", "\n", "assert", "np", ".", "isclose", "(", "x", ".", "numpy", "(", ")", ".", "std", "(", ")", ",", "stddev", ",", "rtol", "=", "1e-2", ")", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "mean", "(", ")", ",", "0", ",", "rtol", "=", "1e-2", ",", "atol", "=", "1e-3", ")", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "std", "(", ")", ",", "1", ",", "rtol", "=", "1e-2", ",", "atol", "=", "1e-3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_fftshift": [[188, 197], ["pytest.mark.parametrize", "numpy.arange().reshape", "fastmri.data.transforms.fftshift().numpy", "numpy.fft.fftshift", "numpy.allclose", "numpy.arange", "fastmri.data.transforms.fftshift", "numpy.product", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.test_transforms.test_ifftshift": [[199, 209], ["pytest.mark.parametrize", "numpy.arange().reshape", "fastmri.data.transforms.ifftshift().numpy", "numpy.fft.ifftshift", "numpy.allclose", "numpy.arange", "fastmri.data.transforms.ifftshift", "numpy.product", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceData.__init__": [[29, 197], ["list", "collections.defaultdict", "set", "sorted", "ValueError", "pathlib.Path().iterdir", "random.shuffle", "round", "os.path.basename", "h5py.File", "mri_data.get_system_from_volume", "float", "ismrmrd.xsd.CreateFromDocument", "range", "mri_data.SliceData.slice_indices_by_size[].extend", "mri_data.SliceData.system_acquisitions.add", "re.search().group", "min", "len", "pathlib.Path", "len", "abs", "range", "len", "re.search", "numpy.nonzero", "[].decode"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.get_system_from_volume"], [")", "->", "str", ":", "\n", "    ", "\"\"\"\n    ElementTree query function.\n\n    This can be used to query an xml document via ElementTree. It uses qlist\n    for nested queries.\n\n    Args:\n        root: Root of the xml to search through.\n        qlist: A list of strings for nested searches, e.g. [\"Encoding\",\n            \"matrixSize\"]\n        namespace: Optional; xml namespace to prepend query.\n\n    Returns:\n        The retrieved data as a string.\n    \"\"\"", "\n", "s", "=", "\".\"", "\n", "prefix", "=", "\"ismrmrd_namespace\"", "\n", "\n", "ns", "=", "{", "prefix", ":", "namespace", "}", "\n", "\n", "for", "el", "in", "qlist", ":", "\n", "        ", "s", "=", "s", "+", "f\"//{prefix}:{el}\"", "\n", "\n", "", "value", "=", "root", ".", "find", "(", "s", ",", "ns", ")", "\n", "if", "value", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Element not found\"", ")", "\n", "\n", "", "return", "str", "(", "value", ".", "text", ")", "\n", "\n", "\n", "", "def", "fetch_dir", "(", "\n", "key", ":", "str", ",", "data_config_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"fastmri_dirs.yaml\"", "\n", ")", "->", "Path", ":", "\n", "    ", "\"\"\"\n    Data directory fetcher.\n\n    This is a brute-force simple way to configure data directories for a\n    project. Simply overwrite the variables for `knee_path` and `brain_path`\n    and this function will retrieve the requested subsplit of the data for use.\n\n    Args:\n        key: key to retrieve path from data_config_file. Expected to be in\n            (\"knee_path\", \"brain_path\", \"log_path\").\n        data_config_file: Optional; Default path config file to fetch path\n            from.\n\n    Returns:\n        The path to the specified directory.\n    \"\"\"", "\n", "data_config_file", "=", "Path", "(", "data_config_file", ")", "\n", "if", "not", "data_config_file", ".", "is_file", "(", ")", ":", "\n", "        ", "default_config", "=", "{", "\n", "\"knee_path\"", ":", "\"/path/to/knee\"", ",", "\n", "\"brain_path\"", ":", "\"/path/to/brain\"", ",", "\n", "\"log_path\"", ":", "\".\"", ",", "\n", "}", "\n", "with", "open", "(", "data_config_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "default_config", ",", "f", ")", "\n", "\n", "", "data_dir", "=", "default_config", "[", "key", "]", "\n", "\n", "warn", "(", "\n", "f\"Path config at {data_config_file.resolve()} does not exist. \"", "\n", "\"A template has been created for you. \"", "\n", "\"Please enter the directory paths for your system to have defaults.\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "data_config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data_dir", "=", "yaml", ".", "safe_load", "(", "f", ")", "[", "key", "]", "\n", "\n", "", "", "return", "Path", "(", "data_dir", ")", "\n", "\n", "\n", "", "class", "CombinedSliceDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "\"\"\"\n    A container for combining slice datasets.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "roots", ":", "Sequence", "[", "Path", "]", ",", "\n", "challenges", ":", "Sequence", "[", "str", "]", ",", "\n", "transforms", ":", "Optional", "[", "Sequence", "[", "Optional", "[", "Callable", "]", "]", "]", "=", "None", ",", "\n", "sample_rates", ":", "Optional", "[", "Sequence", "[", "Optional", "[", "float", "]", "]", "]", "=", "None", ",", "\n", "volume_sample_rates", ":", "Optional", "[", "Sequence", "[", "Optional", "[", "float", "]", "]", "]", "=", "None", ",", "\n", "use_dataset_cache", ":", "bool", "=", "False", ",", "\n", "dataset_cache_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"dataset_cache.pkl\"", ",", "\n", "num_cols", ":", "Optional", "[", "Tuple", "[", "int", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            roots: Paths to the datasets.\n            challenges: \"singlecoil\" or \"multicoil\" depending on which\n                challenge to use.\n            transforms: Optional; A sequence of callable objects that\n                preprocesses the raw data into appropriate form. The transform\n                function should take 'kspace', 'target', 'attributes',\n                'filename', and 'slice' as inputs. 'target' may be null for\n                test data.\n            sample_rates: Optional; A sequence of floats between 0 and 1.\n                This controls what fraction of the slices should be loaded.\n                When creating subsampled datasets either set sample_rates\n                (sample by slices) or volume_sample_rates (sample by volumes)\n                but not both.\n            volume_sample_rates: Optional; A sequence of floats between 0 and 1.\n                This controls what fraction of the volumes should be loaded.\n                When creating subsampled datasets either set sample_rates\n                (sample by slices) or volume_sample_rates (sample by volumes)\n                but not both.\n            use_dataset_cache: Whether to cache dataset metadata. This is very\n                useful for large datasets like the brain data.\n            dataset_cache_file: Optional; A file in which to cache dataset\n                information for faster load times.\n            num_cols: Optional; If provided, only slices with the desired\n                number of columns will be considered.\n        \"\"\"", "\n", "if", "sample_rates", "is", "not", "None", "and", "volume_sample_rates", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"either set sample_rates (sample by slices) or volume_sample_rates (sample by volumes) but not both\"", "\n", ")", "\n", "", "if", "transforms", "is", "None", ":", "\n", "            ", "transforms", "=", "[", "None", "]", "*", "len", "(", "roots", ")", "\n", "", "if", "sample_rates", "is", "None", ":", "\n", "            ", "sample_rates", "=", "[", "None", "]", "*", "len", "(", "roots", ")", "\n", "", "if", "volume_sample_rates", "is", "None", ":", "\n", "            ", "volume_sample_rates", "=", "[", "None", "]", "*", "len", "(", "roots", ")", "\n", "", "if", "not", "(", "\n", "len", "(", "roots", ")", "\n", "==", "len", "(", "transforms", ")", "\n", "==", "len", "(", "challenges", ")", "\n", "==", "len", "(", "sample_rates", ")", "\n", "==", "len", "(", "volume_sample_rates", ")", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Lengths of roots, transforms, challenges, sample_rates do not match\"", "\n", ")", "\n", "\n", "", "self", ".", "datasets", "=", "[", "]", "\n", "self", ".", "examples", ":", "List", "[", "Tuple", "[", "Path", ",", "int", ",", "Dict", "[", "str", ",", "object", "]", "]", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "roots", ")", ")", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "\n", "SliceDataset", "(", "\n", "root", "=", "roots", "[", "i", "]", ",", "\n", "transform", "=", "transforms", "[", "i", "]", ",", "\n", "challenge", "=", "challenges", "[", "i", "]", ",", "\n", "sample_rate", "=", "sample_rates", "[", "i", "]", ",", "\n", "volume_sample_rate", "=", "volume_sample_rates", "[", "i", "]", ",", "\n", "use_dataset_cache", "=", "use_dataset_cache", ",", "\n", "dataset_cache_file", "=", "dataset_cache_file", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "examples", "=", "self", ".", "examples", "+", "self", ".", "datasets", "[", "-", "1", "]", ".", "examples", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "len", "(", "dataset", ")", "for", "dataset", "in", "self", ".", "datasets", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "if", "i", "<", "len", "(", "dataset", ")", ":", "\n", "                ", "return", "dataset", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "i", "=", "i", "-", "len", "(", "dataset", ")", "\n", "\n", "\n", "", "", "", "", "class", "SliceDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceData.__len__": [[198, 200], ["len"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.SliceData.__getitem__": [[201, 235], ["list", "h5py.File", "dict", "mri_data.get_system_from_volume", "mri_data.SliceData.transform", "list", "range", "len", "numpy.stack", "numpy.stack", "print", "logging.debug", "range", "numpy.nonzero", "os.getpid", "psutil.Process().memory_info", "psutil.Process().memory_info", "psutil.Process", "psutil.Process"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.get_system_from_volume"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", ",", "\n", "challenge", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "use_dataset_cache", ":", "bool", "=", "False", ",", "\n", "sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "volume_sample_rate", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "dataset_cache_file", ":", "Union", "[", "str", ",", "Path", ",", "os", ".", "PathLike", "]", "=", "\"dataset_cache.pkl\"", ",", "\n", "num_cols", ":", "Optional", "[", "Tuple", "[", "int", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: Path to the dataset.\n            challenge: \"singlecoil\" or \"multicoil\" depending on which challenge\n                to use.\n            transform: Optional; A callable object that pre-processes the raw\n                data into appropriate form. The transform function should take\n                'kspace', 'target', 'attributes', 'filename', and 'slice' as\n                inputs. 'target' may be null for test data.\n            use_dataset_cache: Whether to cache dataset metadata. This is very\n                useful for large datasets like the brain data.\n            sample_rate: Optional; A float between 0 and 1. This controls what fraction\n                of the slices should be loaded. Defaults to 1 if no value is given.\n                When creating a sampled dataset either set sample_rate (sample by slices)\n                or volume_sample_rate (sample by volumes) but not both.\n            volume_sample_rate: Optional; A float between 0 and 1. This controls what fraction\n                of the volumes should be loaded. Defaults to 1 if no value is given.\n                When creating a sampled dataset either set sample_rate (sample by slices)\n                or volume_sample_rate (sample by volumes) but not both.\n            dataset_cache_file: Optional; A file in which to cache dataset\n                information for faster load times.\n            num_cols: Optional; If provided, only slices with the desired\n                number of columns will be considered.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.get_system_from_volume": [[237, 243], ["[].decode", "xml.fromstring", "ET.fromstring.findall"], "function", ["None"], ["            ", "raise", "ValueError", "(", "'challenge should be either \"singlecoil\" or \"multicoil\"'", ")", "\n", "\n", "", "if", "sample_rate", "is", "not", "None", "and", "volume_sample_rate", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"either set sample_rate (sample by slices) or volume_sample_rate (sample by volumes) but not both\"", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_fft2": [[18, 38], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.fft2c().numpy", "fastmri.data.transforms.tensor_to_complex_np", "numpy.fft.ifftshift", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.allclose", "fastmri.fft2c"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape\"", ",", "\n", "[", "\n", "[", "3", ",", "3", "]", ",", "\n", "[", "4", ",", "6", "]", ",", "\n", "[", "10", ",", "8", ",", "4", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_fft2", "(", "shape", ")", ":", "\n", "    ", "shape", "=", "shape", "+", "[", "2", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "fastmri", ".", "fft2c", "(", "x", ")", ".", "numpy", "(", ")", "\n", "out_torch", "=", "out_torch", "[", "...", ",", "0", "]", "+", "1j", "*", "out_torch", "[", "...", ",", "1", "]", "\n", "\n", "input_numpy", "=", "transforms", ".", "tensor_to_complex_np", "(", "x", ")", "\n", "input_numpy", "=", "np", ".", "fft", ".", "ifftshift", "(", "input_numpy", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "out_numpy", "=", "np", ".", "fft", ".", "fft2", "(", "input_numpy", ",", "norm", "=", "\"ortho\"", ")", "\n", "out_numpy", "=", "np", ".", "fft", ".", "fftshift", "(", "out_numpy", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_ifft2": [[40, 60], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.ifft2c().numpy", "fastmri.data.transforms.tensor_to_complex_np", "numpy.fft.ifftshift", "numpy.fft.ifft2", "numpy.fft.fftshift", "numpy.allclose", "fastmri.ifft2c"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape\"", ",", "\n", "[", "\n", "[", "3", ",", "3", "]", ",", "\n", "[", "4", ",", "6", "]", ",", "\n", "[", "10", ",", "8", ",", "4", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_ifft2", "(", "shape", ")", ":", "\n", "    ", "shape", "=", "shape", "+", "[", "2", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "fastmri", ".", "ifft2c", "(", "x", ")", ".", "numpy", "(", ")", "\n", "out_torch", "=", "out_torch", "[", "...", ",", "0", "]", "+", "1j", "*", "out_torch", "[", "...", ",", "1", "]", "\n", "\n", "input_numpy", "=", "transforms", ".", "tensor_to_complex_np", "(", "x", ")", "\n", "input_numpy", "=", "np", ".", "fft", ".", "ifftshift", "(", "input_numpy", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "out_numpy", "=", "np", ".", "fft", ".", "ifft2", "(", "input_numpy", ",", "norm", "=", "\"ortho\"", ")", "\n", "out_numpy", "=", "np", ".", "fft", ".", "fftshift", "(", "out_numpy", ",", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_complex_abs": [[62, 78], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.complex_abs().numpy", "fastmri.data.transforms.tensor_to_complex_np", "numpy.abs", "numpy.allclose", "fastmri.complex_abs"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape\"", ",", "\n", "[", "\n", "[", "3", ",", "3", "]", ",", "\n", "[", "4", ",", "6", "]", ",", "\n", "[", "10", ",", "8", ",", "4", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_complex_abs", "(", "shape", ")", ":", "\n", "    ", "shape", "=", "shape", "+", "[", "2", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "fastmri", ".", "complex_abs", "(", "x", ")", ".", "numpy", "(", ")", "\n", "input_numpy", "=", "transforms", ".", "tensor_to_complex_np", "(", "x", ")", "\n", "out_numpy", "=", "np", ".", "abs", "(", "input_numpy", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_root_sum_of_squares": [[80, 94], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.rss().numpy", "numpy.sqrt", "numpy.allclose", "numpy.sum", "fastmri.rss", "conftest.create_input.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, dim\"", ",", "\n", "[", "\n", "[", "[", "3", ",", "3", "]", ",", "0", "]", ",", "\n", "[", "[", "4", ",", "6", "]", ",", "1", "]", ",", "\n", "[", "[", "10", ",", "8", ",", "4", "]", ",", "2", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_root_sum_of_squares", "(", "shape", ",", "dim", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "fastmri", ".", "rss", "(", "x", ",", "dim", ")", ".", "numpy", "(", ")", "\n", "out_numpy", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "x", ".", "numpy", "(", ")", "**", "2", ",", "dim", ")", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_roll": [[96, 125], ["pytest.mark.parametrize", "pytest.mark.parametrize", "numpy.arange().reshape", "fastmri.roll().numpy", "numpy.roll", "numpy.allclose", "isinstance", "isinstance", "numpy.arange", "fastmri.roll", "numpy.product", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.roll"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shift, dim\"", ",", "\n", "[", "\n", "(", "0", ",", "0", ")", ",", "\n", "(", "1", ",", "0", ")", ",", "\n", "(", "-", "1", ",", "0", ")", ",", "\n", "(", "100", ",", "0", ")", ",", "\n", "(", "[", "1", ",", "2", "]", ",", "[", "1", ",", "2", "]", ")", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape\"", ",", "\n", "[", "\n", "[", "5", ",", "6", ",", "2", "]", ",", "\n", "[", "3", ",", "4", ",", "5", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_roll", "(", "shift", ",", "dim", ",", "shape", ")", ":", "\n", "    ", "x", "=", "np", ".", "arange", "(", "np", ".", "product", "(", "shape", ")", ")", ".", "reshape", "(", "shape", ")", "\n", "if", "isinstance", "(", "shift", ",", "int", ")", "and", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "torch_shift", "=", "[", "shift", "]", "\n", "torch_dim", "=", "[", "dim", "]", "\n", "", "else", ":", "\n", "        ", "torch_shift", "=", "shift", "\n", "torch_dim", "=", "dim", "\n", "", "out_torch", "=", "fastmri", ".", "roll", "(", "torch", ".", "from_numpy", "(", "x", ")", ",", "torch_shift", ",", "torch_dim", ")", ".", "numpy", "(", ")", "\n", "out_numpy", "=", "np", ".", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_fftshift": [[127, 140], ["pytest.mark.parametrize", "numpy.arange().reshape", "fastmri.fftshift().numpy", "numpy.fft.fftshift", "numpy.allclose", "numpy.arange", "fastmri.fftshift", "numpy.product", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape\"", ",", "\n", "[", "\n", "[", "5", ",", "3", "]", ",", "\n", "[", "2", ",", "4", ",", "6", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_fftshift", "(", "shape", ")", ":", "\n", "    ", "x", "=", "np", ".", "arange", "(", "np", ".", "product", "(", "shape", ")", ")", ".", "reshape", "(", "shape", ")", "\n", "out_torch", "=", "fastmri", ".", "fftshift", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", ".", "numpy", "(", ")", "\n", "out_numpy", "=", "np", ".", "fft", ".", "fftshift", "(", "x", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_math.test_ifftshift": [[142, 156], ["pytest.mark.parametrize", "numpy.arange().reshape", "fastmri.ifftshift().numpy", "numpy.fft.ifftshift", "numpy.allclose", "numpy.arange", "fastmri.ifftshift", "numpy.product", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape\"", ",", "\n", "[", "\n", "[", "5", ",", "3", "]", ",", "\n", "[", "2", ",", "4", ",", "5", "]", ",", "\n", "[", "2", ",", "7", ",", "5", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_ifftshift", "(", "shape", ")", ":", "\n", "    ", "x", "=", "np", ".", "arange", "(", "np", ".", "product", "(", "shape", ")", ")", ".", "reshape", "(", "shape", ")", "\n", "out_torch", "=", "fastmri", ".", "ifftshift", "(", "torch", ".", "from_numpy", "(", "x", ")", ")", ".", "numpy", "(", ")", "\n", "out_numpy", "=", "np", ".", "fft", ".", "ifftshift", "(", "x", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "out_torch", ",", "out_numpy", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_apply_mask": [[17, 38], ["pytest.mark.parametrize", "numpy.random.get_state", "fastmri.data.subsample.RandomMaskFunc", "fastmri.data.subsample.RandomMaskFunc.", "conftest.create_input", "fastmri.data.transforms.apply_mask", "numpy.all", "numpy.all", "round", "expected_mask.numpy", "mask.numpy", "numpy.where", "output.numpy", "output.numpy", "numpy.random.get_state", "mask.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, center_fractions, accelerations\"", ",", "\n", "[", "(", "[", "4", ",", "150", ",", "75", ",", "2", "]", ",", "[", "0.08", "]", ",", "[", "4", "]", ")", ",", "(", "[", "2", ",", "120", ",", "60", ",", "2", "]", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ")", "]", ",", "\n", ")", "\n", "def", "test_apply_mask", "(", "shape", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "mask_func", "=", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "expected_mask", ",", "expected_num_low_frequencies", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "assert", "expected_num_low_frequencies", "in", "[", "\n", "round", "(", "cf", "*", "shape", "[", "-", "2", "]", ")", "for", "cf", "in", "center_fractions", "\n", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_frequencies", "=", "transforms", ".", "apply_mask", "(", "x", ",", "mask_func", ",", "seed", "=", "123", ")", "\n", "\n", "assert", "(", "state", "[", "1", "]", "==", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "assert", "output", ".", "shape", "==", "x", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "expected_mask", ".", "shape", "\n", "assert", "np", ".", "all", "(", "expected_mask", ".", "numpy", "(", ")", "==", "mask", ".", "numpy", "(", ")", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "where", "(", "mask", ".", "numpy", "(", ")", "==", "0", ",", "0", ",", "output", ".", "numpy", "(", ")", ")", "==", "output", ".", "numpy", "(", ")", ")", "\n", "assert", "num_low_frequencies", "==", "expected_num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_apply_mask_with_padding": [[40, 71], ["pytest.mark.parametrize", "numpy.random.get_state", "fastmri.data.subsample.RandomMaskFunc", "fastmri.data.subsample.RandomMaskFunc.", "conftest.create_input", "fastmri.data.transforms.apply_mask", "numpy.all", "numpy.all", "numpy.unique().tolist", "round", "expected_mask[].numpy", "mask[].numpy", "numpy.where", "output.numpy", "numpy.unique", "output.numpy", "numpy.random.get_state", "mask.numpy", "mask.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, center_fractions, accelerations\"", ",", "\n", "[", "(", "[", "150", ",", "75", ",", "2", "]", ",", "[", "0.08", "]", ",", "[", "4", "]", ")", ",", "(", "[", "120", ",", "60", ",", "2", "]", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ")", "]", ",", "\n", ")", "\n", "def", "test_apply_mask_with_padding", "(", "shape", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "padding", "=", "[", "3", ",", "shape", "[", "-", "2", "]", "-", "3", "]", "\n", "mask_func", "=", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "expected_mask", ",", "expected_num_low_frequencies", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "assert", "expected_num_low_frequencies", "in", "[", "\n", "round", "(", "cf", "*", "shape", "[", "-", "2", "]", ")", "for", "cf", "in", "center_fractions", "\n", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_frequencies", "=", "transforms", ".", "apply_mask", "(", "\n", "x", ",", "\n", "mask_func", ",", "\n", "seed", "=", "123", ",", "\n", "padding", "=", "padding", ",", "\n", ")", "\n", "\n", "assert", "(", "state", "[", "1", "]", "==", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "assert", "output", ".", "shape", "==", "x", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "expected_mask", ".", "shape", "\n", "assert", "np", ".", "unique", "(", "mask", ".", "numpy", "(", ")", ")", ".", "tolist", "(", ")", "==", "[", "0.0", ",", "1.0", "]", "\n", "assert", "np", ".", "all", "(", "\n", "expected_mask", "[", "...", ",", "padding", "[", "0", "]", ":", "padding", "[", "1", "]", ",", ":", "]", ".", "numpy", "(", ")", "\n", "==", "mask", "[", "...", ",", "padding", "[", "0", "]", ":", "padding", "[", "1", "]", ",", ":", "]", ".", "numpy", "(", ")", "\n", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "where", "(", "mask", ".", "numpy", "(", ")", "==", "0", ",", "0", ",", "output", ".", "numpy", "(", ")", ")", "==", "output", ".", "numpy", "(", ")", ")", "\n", "assert", "num_low_frequencies", "==", "expected_num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_mask_types": [[73, 104], ["pytest.mark.parametrize", "numpy.random.get_state", "zip", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.subsample.create_mask_for_mask_type.", "conftest.create_input", "fastmri.data.transforms.apply_mask", "numpy.all", "numpy.all", "expected_mask.numpy", "mask.numpy", "numpy.where", "output.numpy", "output.numpy", "numpy.random.get_state", "mask.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"mask_type\"", ",", "\n", "[", "\"random\"", ",", "\"equispaced\"", ",", "\"equispaced_fraction\"", ",", "\"magic\"", ",", "\"magic_fraction\"", "]", ",", "\n", ")", "\n", "def", "test_mask_types", "(", "mask_type", ")", ":", "\n", "    ", "shape_list", "=", "(", "(", "4", ",", "32", ",", "32", ",", "2", ")", ",", "(", "2", ",", "64", ",", "32", ",", "2", ")", ",", "(", "1", ",", "33", ",", "24", ",", "2", ")", ")", "\n", "center_fraction_list", "=", "(", "[", "0.08", "]", ",", "[", "0.04", "]", ",", "[", "0.04", ",", "0.08", "]", ")", "\n", "acceleration_list", "=", "(", "[", "4", "]", ",", "[", "8", "]", ",", "[", "4", ",", "8", "]", ")", "\n", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "for", "shape", "in", "shape_list", ":", "\n", "        ", "for", "center_fractions", ",", "accelerations", "in", "zip", "(", "\n", "center_fraction_list", ",", "acceleration_list", "\n", ")", ":", "\n", "            ", "mask_func", "=", "create_mask_for_mask_type", "(", "\n", "mask_type", ",", "center_fractions", ",", "accelerations", "\n", ")", "\n", "expected_mask", ",", "expected_num_low_frequencies", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_frequencies", "=", "transforms", ".", "apply_mask", "(", "\n", "x", ",", "mask_func", ",", "seed", "=", "123", "\n", ")", "\n", "\n", "assert", "(", "state", "[", "1", "]", "==", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", ")", ".", "all", "(", ")", "\n", "assert", "output", ".", "shape", "==", "x", ".", "shape", "\n", "assert", "mask", ".", "shape", "==", "expected_mask", ".", "shape", "\n", "assert", "np", ".", "all", "(", "expected_mask", ".", "numpy", "(", ")", "==", "mask", ".", "numpy", "(", ")", ")", "\n", "assert", "np", ".", "all", "(", "\n", "np", ".", "where", "(", "mask", ".", "numpy", "(", ")", "==", "0", ",", "0", ",", "output", ".", "numpy", "(", ")", ")", "==", "output", ".", "numpy", "(", ")", "\n", ")", "\n", "assert", "num_low_frequencies", "==", "expected_num_low_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_fraction_accel_sync": [[106, 139], ["pytest.mark.parametrize", "fastmri.data.subsample.MaskFunc", "range", "fastmri.data.subsample.MaskFunc.choose_acceleration", "fastmri.data.subsample.MaskFunc.choose_acceleration", "center_fractions.index", "accelerations.index"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "(", "\n", "\"allow_any_combination, center_fractions, accelerations, seed, \"", "\n", "\"choose_acceleration_output\"", "\n", ")", ",", "\n", "[", "\n", "(", "True", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ",", "2", ",", "(", "0.04", ",", "4", ")", ")", ",", "\n", "(", "False", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "8", ",", "4", "]", ",", "2", ",", "(", "0.04", ",", "8", ")", ")", ",", "\n", "(", "True", ",", "[", "0.04", ",", "0.08", "]", ",", "[", "16", ",", "8", ",", "4", "]", ",", "8", ",", "(", "0.08", ",", "16", ")", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_fraction_accel_sync", "(", "\n", "allow_any_combination", ",", "\n", "center_fractions", ",", "\n", "accelerations", ",", "\n", "seed", ",", "\n", "choose_acceleration_output", ",", "\n", ")", ":", "\n", "    ", "\"\"\"For this test we have manually checked choose_acceleration_output.\"\"\"", "\n", "f", "=", "MaskFunc", "(", "\n", "center_fractions", "=", "center_fractions", ",", "\n", "accelerations", "=", "accelerations", ",", "\n", "allow_any_combination", "=", "allow_any_combination", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n", "if", "not", "allow_any_combination", ":", "\n", "        ", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "            ", "center_fraction", ",", "acceleration", "=", "f", ".", "choose_acceleration", "(", ")", "\n", "assert", "center_fractions", ".", "index", "(", "center_fraction", ")", "==", "accelerations", ".", "index", "(", "\n", "acceleration", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "f", ".", "choose_acceleration", "(", ")", "==", "choose_acceleration_output", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_center_crop": [[141, 149], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.data.transforms.center_crop().numpy", "list", "fastmri.data.transforms.center_crop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, target_shape\"", ",", "[", "[", "[", "10", ",", "10", "]", ",", "[", "4", ",", "4", "]", "]", ",", "[", "[", "4", ",", "6", "]", ",", "[", "2", ",", "4", "]", "]", ",", "[", "[", "8", ",", "4", "]", ",", "[", "4", ",", "4", "]", "]", "]", "\n", ")", "\n", "def", "test_center_crop", "(", "shape", ",", "target_shape", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "transforms", ".", "center_crop", "(", "x", ",", "target_shape", ")", ".", "numpy", "(", ")", "\n", "\n", "assert", "list", "(", "out_torch", ".", "shape", ")", "==", "target_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_complex_center_crop": [[151, 161], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.data.transforms.complex_center_crop().numpy", "list", "fastmri.data.transforms.complex_center_crop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, target_shape\"", ",", "[", "[", "[", "10", ",", "10", "]", ",", "[", "4", ",", "4", "]", "]", ",", "[", "[", "4", ",", "6", "]", ",", "[", "2", ",", "4", "]", "]", ",", "[", "[", "8", ",", "4", "]", ",", "[", "4", ",", "4", "]", "]", "]", "\n", ")", "\n", "def", "test_complex_center_crop", "(", "shape", ",", "target_shape", ")", ":", "\n", "    ", "shape", "=", "shape", "+", "[", "2", "]", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "out_torch", "=", "transforms", ".", "complex_center_crop", "(", "x", ",", "target_shape", ")", ".", "numpy", "(", ")", "\n", "\n", "assert", "list", "(", "out_torch", ".", "shape", ")", "==", "target_shape", "+", "[", "\n", "2", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_normalize": [[164, 173], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.data.transforms.normalize().numpy", "numpy.isclose", "numpy.isclose", "transforms.normalize().numpy.mean", "transforms.normalize().numpy.std", "fastmri.data.transforms.normalize", "conftest.create_input.numpy().std", "conftest.create_input.numpy().mean", "conftest.create_input.numpy", "conftest.create_input.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, mean, stddev\"", ",", "[", "[", "[", "10", ",", "10", "]", ",", "0", ",", "1", "]", ",", "[", "[", "4", ",", "6", "]", ",", "4", ",", "10", "]", ",", "[", "[", "8", ",", "4", "]", ",", "2", ",", "3", "]", "]", "\n", ")", "\n", "def", "test_normalize", "(", "shape", ",", "mean", ",", "stddev", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "output", "=", "transforms", ".", "normalize", "(", "x", ",", "mean", ",", "stddev", ")", ".", "numpy", "(", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "mean", "(", ")", ",", "(", "x", ".", "numpy", "(", ")", ".", "mean", "(", ")", "-", "mean", ")", "/", "stddev", ")", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "std", "(", ")", ",", "x", ".", "numpy", "(", ")", ".", "std", "(", ")", "/", "stddev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_transforms.test_normalize_instance": [[175, 185], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.data.transforms.normalize_instance", "output.numpy.numpy", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "conftest.create_input.numpy().mean", "conftest.create_input.numpy().std", "output.numpy.mean", "output.numpy.std", "conftest.create_input.numpy", "conftest.create_input.numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.normalize_instance"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"shape\"", ",", "[", "[", "10", ",", "10", "]", ",", "[", "20", ",", "40", ",", "30", "]", "]", ")", "\n", "def", "test_normalize_instance", "(", "shape", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mean", ",", "stddev", "=", "transforms", ".", "normalize_instance", "(", "x", ")", "\n", "output", "=", "output", ".", "numpy", "(", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "x", ".", "numpy", "(", ")", ".", "mean", "(", ")", ",", "mean", ",", "rtol", "=", "1e-2", ")", "\n", "assert", "np", ".", "isclose", "(", "x", ".", "numpy", "(", ")", ".", "std", "(", ")", ",", "stddev", ",", "rtol", "=", "1e-2", ")", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "mean", "(", ")", ",", "0", ",", "rtol", "=", "1e-2", ",", "atol", "=", "1e-3", ")", "\n", "assert", "np", ".", "isclose", "(", "output", ".", "std", "(", ")", ",", "1", ",", "rtol", "=", "1e-2", ",", "atol", "=", "1e-3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_models.test_unet": [[18, 37], ["pytest.mark.parametrize", "conftest.create_input", "fastmri.models.Unet", "fastmri.models.Unet."], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, out_chans, chans\"", ",", "\n", "[", "\n", "(", "[", "1", ",", "1", ",", "32", ",", "16", "]", ",", "5", ",", "1", ")", ",", "\n", "(", "[", "5", ",", "1", ",", "15", ",", "12", "]", ",", "10", ",", "32", ")", ",", "\n", "(", "[", "3", ",", "2", ",", "13", ",", "18", "]", ",", "1", ",", "16", ")", ",", "\n", "(", "[", "1", ",", "2", ",", "17", ",", "19", "]", ",", "3", ",", "8", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_unet", "(", "shape", ",", "out_chans", ",", "chans", ")", ":", "\n", "    ", "x", "=", "create_input", "(", "shape", ")", "\n", "\n", "num_chans", "=", "x", ".", "shape", "[", "1", "]", "\n", "\n", "unet", "=", "Unet", "(", "in_chans", "=", "num_chans", ",", "out_chans", "=", "out_chans", ",", "chans", "=", "chans", ",", "num_pool_layers", "=", "2", ")", "\n", "\n", "y", "=", "unet", "(", "x", ")", "\n", "\n", "assert", "y", ".", "shape", "[", "1", "]", "==", "out_chans", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_models.test_varnet": [[39, 73], ["pytest.mark.parametrize", "fastmri.data.subsample.RandomMaskFunc", "conftest.create_input", "range", "torch.cat", "torch.cat", "fastmri.models.VarNet", "fastmri.models.VarNet.", "fastmri.data.transforms.apply_mask", "outputs.append", "masks.append", "torch.cat.byte"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, chans, center_fractions, accelerations, mask_center\"", ",", "\n", "[", "\n", "(", "[", "1", ",", "3", ",", "32", ",", "16", ",", "2", "]", ",", "1", ",", "[", "0.08", "]", ",", "[", "4", "]", ",", "True", ")", ",", "\n", "(", "[", "5", ",", "5", ",", "15", ",", "12", ",", "2", "]", ",", "32", ",", "[", "0.04", "]", ",", "[", "8", "]", ",", "True", ")", ",", "\n", "(", "[", "3", ",", "8", ",", "13", ",", "18", ",", "2", "]", ",", "16", ",", "[", "0.08", "]", ",", "[", "4", "]", ",", "True", ")", ",", "\n", "(", "[", "1", ",", "2", ",", "17", ",", "19", ",", "2", "]", ",", "8", ",", "[", "0.08", "]", ",", "[", "4", "]", ",", "True", ")", ",", "\n", "(", "[", "1", ",", "2", ",", "17", ",", "19", ",", "2", "]", ",", "8", ",", "[", "0.08", "]", ",", "[", "4", "]", ",", "False", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_varnet", "(", "shape", ",", "chans", ",", "center_fractions", ",", "accelerations", ",", "mask_center", ")", ":", "\n", "    ", "mask_func", "=", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "outputs", ",", "masks", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "output", ",", "mask", ",", "_", "=", "transforms", ".", "apply_mask", "(", "x", "[", "i", ":", "i", "+", "1", "]", ",", "mask_func", ",", "seed", "=", "123", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "outputs", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "masks", ")", "\n", "\n", "varnet", "=", "VarNet", "(", "\n", "num_cascades", "=", "2", ",", "\n", "sens_chans", "=", "4", ",", "\n", "sens_pools", "=", "2", ",", "\n", "chans", "=", "chans", ",", "\n", "pools", "=", "2", ",", "\n", "mask_center", "=", "mask_center", ",", "\n", ")", "\n", "\n", "y", "=", "varnet", "(", "output", ",", "mask", ".", "byte", "(", ")", ")", "\n", "\n", "assert", "y", ".", "shape", "[", "1", ":", "]", "==", "x", ".", "shape", "[", "2", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_models.test_varnet_num_sense_lines": [[75, 113], ["pytest.mark.parametrize", "fastmri.data.subsample.RandomMaskFunc", "conftest.create_input", "fastmri.data.transforms.apply_mask", "fastmri.models.VarNet", "fastmri.models.VarNet.", "fastmri.models.VarNet.sens_net.get_pad_and_num_low_freqs", "torch.allclose", "mask.byte", "[].to", "torch.ones", "int", "mask.squeeze", "int", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.varnet.SensitivityModel.get_pad_and_num_low_freqs"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"shape, chans, center_fractions, accelerations, mask_center\"", ",", "\n", "[", "\n", "(", "[", "1", ",", "3", ",", "64", ",", "82", ",", "2", "]", ",", "1", ",", "[", "0.08", "]", ",", "[", "4", "]", ",", "True", ")", ",", "\n", "(", "[", "1", ",", "3", ",", "64", ",", "76", ",", "2", "]", ",", "1", ",", "[", "0.04", "]", ",", "[", "4", "]", ",", "True", ")", ",", "\n", "(", "[", "1", ",", "3", ",", "64", ",", "55", ",", "2", "]", ",", "1", ",", "[", "0.08", "]", ",", "[", "4", "]", ",", "False", ")", ",", "\n", "(", "[", "1", ",", "3", ",", "64", ",", "90", ",", "2", "]", ",", "1", ",", "[", "0.04", "]", ",", "[", "4", "]", ",", "False", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_varnet_num_sense_lines", "(", "\n", "shape", ",", "chans", ",", "center_fractions", ",", "accelerations", ",", "mask_center", "\n", ")", ":", "\n", "    ", "mask_func", "=", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "x", "=", "create_input", "(", "shape", ")", "\n", "output", ",", "mask", ",", "num_low_freqs", "=", "transforms", ".", "apply_mask", "(", "x", ",", "mask_func", ",", "seed", "=", "123", ")", "\n", "\n", "varnet", "=", "VarNet", "(", "\n", "num_cascades", "=", "2", ",", "\n", "sens_chans", "=", "4", ",", "\n", "sens_pools", "=", "2", ",", "\n", "chans", "=", "chans", ",", "\n", "pools", "=", "2", ",", "\n", "mask_center", "=", "mask_center", ",", "\n", ")", "\n", "\n", "if", "mask_center", "is", "True", ":", "\n", "        ", "pad", ",", "net_low_freqs", "=", "varnet", ".", "sens_net", ".", "get_pad_and_num_low_freqs", "(", "\n", "mask", ",", "num_low_freqs", "\n", ")", "\n", "assert", "net_low_freqs", "==", "num_low_freqs", "\n", "assert", "torch", ".", "allclose", "(", "\n", "mask", ".", "squeeze", "(", ")", "[", "int", "(", "pad", ")", ":", "int", "(", "pad", "+", "net_low_freqs", ")", "]", ".", "to", "(", "torch", ".", "int8", ")", ",", "\n", "torch", ".", "ones", "(", "[", "int", "(", "net_low_freqs", ")", "]", ",", "dtype", "=", "torch", ".", "int8", ")", ",", "\n", ")", "\n", "\n", "", "y", "=", "varnet", "(", "output", ",", "mask", ".", "byte", "(", ")", ",", "num_low_frequencies", "=", "4", ")", "\n", "\n", "assert", "y", ".", "shape", "[", "1", ":", "]", "==", "x", ".", "shape", "[", "2", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_models.test_unet_scripting": [[115, 119], ["fastmri.models.Unet", "torch.jit.script"], "function", ["None"], ["", "def", "test_unet_scripting", "(", ")", ":", "\n", "    ", "model", "=", "Unet", "(", "in_chans", "=", "1", ",", "out_chans", "=", "1", ",", "chans", "=", "8", ",", "num_pool_layers", "=", "2", ",", "drop_prob", "=", "0.0", ")", "\n", "scr", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "assert", "scr", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_models.test_varnet_scripting": [[121, 125], ["fastmri.models.VarNet", "torch.jit.script"], "function", ["None"], ["", "def", "test_varnet_scripting", "(", ")", ":", "\n", "    ", "model", "=", "VarNet", "(", "num_cascades", "=", "4", ",", "pools", "=", "2", ",", "chans", "=", "8", ",", "sens_pools", "=", "2", ",", "sens_chans", "=", "4", ")", "\n", "scr", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "assert", "scr", "is", "not", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_data.test_slice_datasets": [[15, 42], ["monkeypatch.setattr", "fastmri.data.mri_data.SliceDataset", "fastmri.data.mri_data.SliceDataset", "str", "len", "len"], "function", ["None"], ["def", "test_slice_datasets", "(", "fastmri_mock_dataset", ",", "monkeypatch", ")", ":", "\n", "    ", "knee_path", ",", "brain_path", ",", "metadata", "=", "fastmri_mock_dataset", "\n", "\n", "def", "retrieve_metadata_mock", "(", "a", ",", "fname", ")", ":", "\n", "        ", "return", "metadata", "[", "str", "(", "fname", ")", "]", "\n", "\n", "", "monkeypatch", ".", "setattr", "(", "SliceDataset", ",", "\"_retrieve_metadata\"", ",", "retrieve_metadata_mock", ")", "\n", "\n", "for", "challenge", "in", "(", "\"multicoil\"", ",", "\"singlecoil\"", ")", ":", "\n", "        ", "for", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"challenge\"", ")", ":", "\n", "            ", "dataset", "=", "SliceDataset", "(", "\n", "knee_path", "/", "f\"{challenge}_{split}\"", ",", "transform", "=", "None", ",", "challenge", "=", "challenge", "\n", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "dataset", "[", "0", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "-", "1", "]", "is", "not", "None", "\n", "\n", "", "", "for", "challenge", "in", "(", "\"multicoil\"", ",", ")", ":", "\n", "        ", "for", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"challenge\"", ")", ":", "\n", "            ", "dataset", "=", "SliceDataset", "(", "\n", "brain_path", "/", "f\"{challenge}_{split}\"", ",", "transform", "=", "None", ",", "challenge", "=", "challenge", "\n", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "dataset", "[", "0", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "-", "1", "]", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_data.test_combined_slice_dataset": [[44, 87], ["monkeypatch.setattr", "fastmri.data.mri_data.SliceDataset", "fastmri.data.mri_data.SliceDataset", "fastmri.data.mri_data.CombinedSliceDataset", "fastmri.data.mri_data.SliceDataset", "fastmri.data.mri_data.SliceDataset", "fastmri.data.mri_data.CombinedSliceDataset", "len", "len", "len", "len", "len", "len", "str"], "function", ["None"], ["", "", "", "def", "test_combined_slice_dataset", "(", "fastmri_mock_dataset", ",", "monkeypatch", ")", ":", "\n", "    ", "knee_path", ",", "brain_path", ",", "metadata", "=", "fastmri_mock_dataset", "\n", "\n", "def", "retrieve_metadata_mock", "(", "a", ",", "fname", ")", ":", "\n", "        ", "return", "metadata", "[", "str", "(", "fname", ")", "]", "\n", "\n", "", "monkeypatch", ".", "setattr", "(", "SliceDataset", ",", "\"_retrieve_metadata\"", ",", "retrieve_metadata_mock", ")", "\n", "\n", "roots", "=", "[", "knee_path", "/", "\"multicoil_train\"", ",", "knee_path", "/", "\"multicoil_val\"", "]", "\n", "challenges", "=", "[", "\"multicoil\"", ",", "\"multicoil\"", "]", "\n", "transforms", "=", "[", "None", ",", "None", "]", "\n", "\n", "dataset1", "=", "SliceDataset", "(", "\n", "root", "=", "roots", "[", "0", "]", ",", "challenge", "=", "challenges", "[", "0", "]", ",", "transform", "=", "transforms", "[", "0", "]", "\n", ")", "\n", "dataset2", "=", "SliceDataset", "(", "\n", "root", "=", "roots", "[", "1", "]", ",", "challenge", "=", "challenges", "[", "1", "]", ",", "transform", "=", "transforms", "[", "1", "]", "\n", ")", "\n", "comb_dataset", "=", "CombinedSliceDataset", "(", "\n", "roots", "=", "roots", ",", "challenges", "=", "challenges", ",", "transforms", "=", "transforms", "\n", ")", "\n", "\n", "assert", "len", "(", "comb_dataset", ")", "==", "len", "(", "dataset1", ")", "+", "len", "(", "dataset2", ")", "\n", "assert", "comb_dataset", "[", "0", "]", "is", "not", "None", "\n", "assert", "comb_dataset", "[", "-", "1", "]", "is", "not", "None", "\n", "\n", "roots", "=", "[", "brain_path", "/", "\"multicoil_train\"", ",", "brain_path", "/", "\"multicoil_val\"", "]", "\n", "challenges", "=", "[", "\"multicoil\"", ",", "\"multicoil\"", "]", "\n", "transforms", "=", "[", "None", ",", "None", "]", "\n", "\n", "dataset1", "=", "SliceDataset", "(", "\n", "root", "=", "roots", "[", "0", "]", ",", "challenge", "=", "challenges", "[", "0", "]", ",", "transform", "=", "transforms", "[", "0", "]", "\n", ")", "\n", "dataset2", "=", "SliceDataset", "(", "\n", "root", "=", "roots", "[", "1", "]", ",", "challenge", "=", "challenges", "[", "1", "]", ",", "transform", "=", "transforms", "[", "1", "]", "\n", ")", "\n", "comb_dataset", "=", "CombinedSliceDataset", "(", "\n", "roots", "=", "roots", ",", "challenges", "=", "challenges", ",", "transforms", "=", "transforms", "\n", ")", "\n", "\n", "assert", "len", "(", "comb_dataset", ")", "==", "len", "(", "dataset1", ")", "+", "len", "(", "dataset2", ")", "\n", "assert", "comb_dataset", "[", "0", "]", "is", "not", "None", "\n", "assert", "comb_dataset", "[", "-", "1", "]", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_data.test_annotated_slice_dataset": [[89, 139], ["monkeypatch.setattr", "monkeypatch.setattr", "str", "fastmri.data.mri_data.AnnotatedSliceDataset", "fastmri.data.mri_data.AnnotatedSliceDataset", "len", "len"], "function", ["None"], ["", "def", "test_annotated_slice_dataset", "(", "\n", "fastmri_mock_dataset", ",", "fastmri_mock_annotation", ",", "monkeypatch", "\n", ")", ":", "\n", "    ", "knee_path", ",", "brain_path", ",", "metadata", "=", "fastmri_mock_dataset", "\n", "annotation_knee_csv", ",", "annotation_brain_csv", "=", "fastmri_mock_annotation", "\n", "\n", "def", "download_csv_mock", "(", "a", ",", "version", ",", "subsplit", ",", "path", ")", ":", "\n", "        ", "if", "subsplit", "==", "\"knee\"", ":", "\n", "            ", "return", "annotation_knee_csv", "\n", "", "else", ":", "\n", "            ", "return", "annotation_brain_csv", "\n", "\n", "", "", "def", "retrieve_metadata_mock", "(", "a", ",", "fname", ")", ":", "\n", "        ", "return", "metadata", "[", "str", "(", "fname", ")", "]", "\n", "\n", "", "monkeypatch", ".", "setattr", "(", "AnnotatedSliceDataset", ",", "\"download_csv\"", ",", "download_csv_mock", ")", "\n", "\n", "monkeypatch", ".", "setattr", "(", "SliceDataset", ",", "\"_retrieve_metadata\"", ",", "retrieve_metadata_mock", ")", "\n", "\n", "for", "challenge", "in", "(", "\"multicoil\"", ",", "\"singlecoil\"", ")", ":", "\n", "        ", "for", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"challenge\"", ")", ":", "\n", "            ", "for", "multiple_annotation_policy", "in", "(", "\"first\"", ",", "\"random\"", ",", "\"all\"", ")", ":", "\n", "                ", "dataset", "=", "AnnotatedSliceDataset", "(", "\n", "knee_path", "/", "f\"{challenge}_{split}\"", ",", "\n", "challenge", "=", "challenge", ",", "\n", "subsplit", "=", "\"knee\"", ",", "\n", "multiple_annotation_policy", "=", "multiple_annotation_policy", ",", "\n", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "dataset", "[", "0", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "-", "1", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "0", "]", "[", "3", "]", "[", "\"annotation\"", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "-", "1", "]", "[", "3", "]", "[", "\"annotation\"", "]", "is", "not", "None", "\n", "\n", "", "", "", "for", "challenge", "in", "(", "\"multicoil\"", ",", ")", ":", "\n", "        ", "for", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"challenge\"", ")", ":", "\n", "            ", "for", "multiple_annotation_policy", "in", "(", "\"first\"", ",", "\"random\"", ",", "\"all\"", ")", ":", "\n", "                ", "dataset", "=", "AnnotatedSliceDataset", "(", "\n", "brain_path", "/", "f\"{challenge}_{split}\"", ",", "\n", "challenge", "=", "challenge", ",", "\n", "subsplit", "=", "\"brain\"", ",", "\n", "multiple_annotation_policy", "=", "multiple_annotation_policy", ",", "\n", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "dataset", "[", "0", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "-", "1", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "0", "]", "[", "3", "]", "[", "\"annotation\"", "]", "is", "not", "None", "\n", "assert", "dataset", "[", "-", "1", "]", "[", "3", "]", "[", "\"annotation\"", "]", "is", "not", "None", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.create_temp_data.create_temp_data": [[13, 108], ["numpy.random.default_rng", "range", "len", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.normal", "numpy.absolute().astype", "np.random.default_rng.integers().astype", "h5py.File", "hf.create_dataset", "split.split", "split.split", "np.random.default_rng.normal", "split.split", "numpy.dtype", "np.absolute().astype.max", "hf.create_dataset", "str", "numpy.absolute", "np.random.default_rng.integers", "data.astype", "split.split", "hf.create_dataset", "hf.create_dataset", "np.random.default_rng.normal"], "function", ["None"], ["def", "create_temp_data", "(", "path", ")", ":", "\n", "    ", "rg", "=", "np", ".", "random", ".", "default_rng", "(", "seed", "=", "1234", ")", "\n", "max_num_slices", "=", "15", "\n", "max_num_coils", "=", "15", "\n", "data_splits", "=", "{", "\n", "\"knee_data\"", ":", "[", "\n", "\"multicoil_train\"", ",", "\n", "\"multicoil_val\"", ",", "\n", "\"multicoil_test\"", ",", "\n", "\"multicoil_challenge\"", ",", "\n", "\"singlecoil_train\"", ",", "\n", "\"singlecoil_val\"", ",", "\n", "\"singlecoil_test\"", ",", "\n", "\"singlecoil_challenge\"", ",", "\n", "]", ",", "\n", "\"brain_data\"", ":", "[", "\n", "\"multicoil_train\"", ",", "\n", "\"multicoil_val\"", ",", "\n", "\"multicoil_test\"", ",", "\n", "\"multicoil_challenge\"", ",", "\n", "]", ",", "\n", "}", "\n", "\n", "enc_sizes", "=", "{", "\n", "\"train\"", ":", "[", "(", "1", ",", "128", ",", "64", ")", ",", "(", "1", ",", "128", ",", "49", ")", ",", "(", "1", ",", "150", ",", "67", ")", "]", ",", "\n", "\"val\"", ":", "[", "(", "1", ",", "128", ",", "64", ")", ",", "(", "1", ",", "170", ",", "57", ")", "]", ",", "\n", "\"test\"", ":", "[", "(", "1", ",", "128", ",", "64", ")", ",", "(", "1", ",", "96", ",", "96", ")", "]", ",", "\n", "\"challenge\"", ":", "[", "(", "1", ",", "128", ",", "64", ")", ",", "(", "1", ",", "96", ",", "48", ")", "]", ",", "\n", "}", "\n", "recon_sizes", "=", "{", "\n", "\"train\"", ":", "[", "(", "1", ",", "64", ",", "64", ")", ",", "(", "1", ",", "49", ",", "49", ")", ",", "(", "1", ",", "67", ",", "67", ")", "]", ",", "\n", "\"val\"", ":", "[", "(", "1", ",", "64", ",", "64", ")", ",", "(", "1", ",", "57", ",", "47", ")", "]", ",", "\n", "\"test\"", ":", "[", "(", "1", ",", "64", ",", "64", ")", ",", "(", "1", ",", "96", ",", "96", ")", "]", ",", "\n", "\"challenge\"", ":", "[", "(", "1", ",", "64", ",", "64", ")", ",", "(", "1", ",", "48", ",", "48", ")", "]", ",", "\n", "}", "\n", "\n", "metadata", "=", "{", "}", "\n", "for", "dataset", "in", "data_splits", ":", "\n", "        ", "for", "split", "in", "data_splits", "[", "dataset", "]", ":", "\n", "            ", "fcount", "=", "0", "\n", "(", "path", "/", "dataset", "/", "split", ")", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "encs", "=", "enc_sizes", "[", "split", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "]", "\n", "recs", "=", "recon_sizes", "[", "split", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "encs", ")", ")", ":", "\n", "                ", "fname", "=", "path", "/", "dataset", "/", "split", "/", "f\"file{fcount}.h5\"", "\n", "num_slices", "=", "rg", ".", "integers", "(", "2", ",", "max_num_slices", ")", "\n", "if", "\"multicoil\"", "in", "split", ":", "\n", "                    ", "num_coils", "=", "rg", ".", "integers", "(", "2", ",", "max_num_coils", ")", "\n", "enc_size", "=", "(", "num_slices", ",", "num_coils", ",", "encs", "[", "i", "]", "[", "-", "2", "]", ",", "encs", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "recon_size", "=", "(", "num_slices", ",", "recs", "[", "i", "]", "[", "-", "2", "]", ",", "recs", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "enc_size", "=", "(", "num_slices", ",", "encs", "[", "i", "]", "[", "-", "2", "]", ",", "encs", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "recon_size", "=", "(", "num_slices", ",", "recs", "[", "i", "]", "[", "-", "2", "]", ",", "recs", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "\n", "", "data", "=", "rg", ".", "normal", "(", "size", "=", "enc_size", ")", "+", "1j", "*", "rg", ".", "normal", "(", "size", "=", "enc_size", ")", "\n", "\n", "if", "split", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "in", "(", "\"train\"", ",", "\"val\"", ")", ":", "\n", "                    ", "recon", "=", "np", ".", "absolute", "(", "rg", ".", "normal", "(", "size", "=", "recon_size", ")", ")", ".", "astype", "(", "\n", "np", ".", "dtype", "(", "\"<f4\"", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "rg", ".", "integers", "(", "0", ",", "2", ",", "size", "=", "recon_size", "[", "-", "1", "]", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "fname", ",", "\"w\"", ")", "as", "hf", ":", "\n", "                    ", "hf", ".", "create_dataset", "(", "\"kspace\"", ",", "data", "=", "data", ".", "astype", "(", "np", ".", "complex64", ")", ")", "\n", "if", "split", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "in", "(", "\"train\"", ",", "\"val\"", ")", ":", "\n", "                        ", "hf", ".", "attrs", "[", "\"max\"", "]", "=", "recon", ".", "max", "(", ")", "\n", "if", "\"singlecoil\"", "in", "split", ":", "\n", "                            ", "hf", ".", "create_dataset", "(", "\"reconstruction_esc\"", ",", "data", "=", "recon", ")", "\n", "", "else", ":", "\n", "                            ", "hf", ".", "create_dataset", "(", "\"reconstruction_rss\"", ",", "data", "=", "recon", ")", "\n", "", "", "else", ":", "\n", "                        ", "hf", ".", "create_dataset", "(", "\"mask\"", ",", "data", "=", "mask", ")", "\n", "\n", "", "", "enc_size", "=", "encs", "[", "i", "]", "\n", "\n", "enc_limits_center", "=", "enc_size", "[", "1", "]", "//", "2", "+", "1", "\n", "enc_limits_max", "=", "enc_size", "[", "1", "]", "-", "2", "\n", "\n", "padding_left", "=", "enc_size", "[", "1", "]", "//", "2", "-", "enc_limits_center", "\n", "padding_right", "=", "padding_left", "+", "enc_limits_max", "\n", "\n", "metadata", "[", "str", "(", "fname", ")", "]", "=", "(", "\n", "{", "\n", "\"padding_left\"", ":", "padding_left", ",", "\n", "\"padding_right\"", ":", "padding_right", ",", "\n", "\"encoding_size\"", ":", "enc_size", ",", "\n", "\"recon_size\"", ":", "recon_size", ",", "\n", "}", ",", "\n", "num_slices", ",", "\n", ")", "\n", "\n", "fcount", "+=", "1", "\n", "\n", "", "", "", "return", "path", "/", "\"knee_data\"", ",", "path", "/", "\"brain_data\"", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.create_temp_data.create_temp_annotation": [[110, 214], ["numpy.random.default_rng", "range", "pandas.DataFrame", "pd.DataFrame.to_csv", "range", "pandas.DataFrame", "pd.DataFrame.to_csv", "annotations_knee.append", "annotations_brain.append", "annotations_knee[].keys", "annotations_brain[].keys", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "np.random.default_rng.integers", "np.random.default_rng.choice", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.choice", "str", "np.random.default_rng.integers", "np.random.default_rng.choice", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.integers", "np.random.default_rng.choice", "np.random.default_rng.integers", "np.random.default_rng.integers"], "function", ["None"], ["", "def", "create_temp_annotation", "(", "path", ")", ":", "\n", "    ", "rg", "=", "np", ".", "random", ".", "default_rng", "(", "seed", "=", "1234", ")", "\n", "\n", "annotations_knee", "=", "[", "]", "\n", "annotations_brain", "=", "[", "]", "\n", "label_knee", "=", "[", "\n", "\"Meniscus Tear\"", ",", "\n", "\"Displaced Meniscal Tissue\"", ",", "\n", "\"Bone-Subchondral Edema\"", ",", "\n", "\"Bone Lesion\"", ",", "\n", "\"Bone-Fracture/Contusion/Dislocation\"", ",", "\n", "\"ACL High Grade Sprain\"", ",", "\n", "\"ACL Low-Mod Grade Sprain\"", ",", "\n", "\"MCL High Grade Sprain\"", ",", "\n", "\"MCL Low-Mod Grade Sprain\"", ",", "\n", "\"PCL High Grade Sprain\"", ",", "\n", "\"PCL Low-Mod Grade Sprain\"", ",", "\n", "\"LCL Complex High Grade Sprain\"", ",", "\n", "\"LCL Complex Low-Mod Grade Sprain\"", ",", "\n", "\"Cartilage Full Thickness Loss/Defect\"", ",", "\n", "\"Cartilage Partial Thickness Loss/Defect\"", ",", "\n", "\"Joint Effusion\"", ",", "\n", "\"Joint Bodies\"", ",", "\n", "\"Periarticular Cysts\"", ",", "\n", "\"Muscle Strain\"", ",", "\n", "\"Soft Tissue Lesion\"", ",", "\n", "\"Patellar Retinaculum High Grade Sprain\"", ",", "\n", "\"Artifact\"", ",", "\n", "]", "\n", "\n", "label_brain", "=", "[", "\n", "\"Absent Septum Pellucidum\"", ",", "\n", "\"Craniectomy\"", ",", "\n", "\"Craniotomy\"", ",", "\n", "\"Craniotomy with Cranioplasty\"", ",", "\n", "\"Dural Thickening\"", ",", "\n", "\"Edema\"", ",", "\n", "\"Encephalomalacia\"", ",", "\n", "\"Enlarged Ventricles\"", ",", "\n", "\"Extra-Axial Mass\"", ",", "\n", "\"Intraventricular Substance\"", ",", "\n", "\"Likely Cysts\"", ",", "\n", "\"Lacunar Infarct\"", ",", "\n", "\"Mass\"", ",", "\n", "\"Nonspecific Lesion\"", ",", "\n", "\"Nonspecific White Matter Lesion\"", ",", "\n", "\"Normal Variant\"", ",", "\n", "\"Paranasal Sinus Opacification\"", ",", "\n", "\"Pineal Cyst\"", ",", "\n", "\"Possible Artifact\"", ",", "\n", "\"Posttreatment Change\"", ",", "\n", "\"Resection Cavity\"", ",", "\n", "\"Global Ischemia\"", ",", "\n", "\"Small Vessel Chronic White Matter Ischemic Change\"", ",", "\n", "\"Motion Artifact\"", ",", "\n", "\"Possible Demyelinating Disease\"", ",", "\n", "\"Colpocephaly\"", ",", "\n", "\"White Matter Disease\"", ",", "\n", "\"Innumerable Bilateral Focal Brain Lesions\"", ",", "\n", "\"Extra-Axial Collection\"", ",", "\n", "\"Normal for Age\"", ",", "\n", "]", "\n", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "annotations_knee", ".", "append", "(", "\n", "{", "\n", "\"file\"", ":", "\"file\"", "+", "str", "(", "1000000", "+", "rg", ".", "integers", "(", "1", ",", "2546", ")", ")", ",", "\n", "\"slice\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "45", ")", ")", ",", "\n", "\"study_level\"", ":", "rg", ".", "choice", "(", "[", "\"Yes\"", ",", "\"No\"", "]", ",", "1", ")", "[", "0", "]", ",", "\n", "\"x\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"y\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"width\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"height\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"label\"", ":", "rg", ".", "choice", "(", "label_knee", ",", "1", ")", "[", "0", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "annotations_knee_df", "=", "pd", ".", "DataFrame", "(", "\n", "annotations_knee", ",", "columns", "=", "annotations_knee", "[", "0", "]", ".", "keys", "(", ")", "\n", ")", "\n", "annotation_knee_csv", "=", "f\"{path}/knee_annotation.csv\"", "\n", "annotations_knee_df", ".", "to_csv", "(", "annotation_knee_csv", ")", "\n", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "annotations_brain", ".", "append", "(", "\n", "{", "\n", "\"file\"", ":", "\"file\"", "+", "str", "(", "1000000", "+", "rg", ".", "integers", "(", "1", ",", "2546", ")", ")", ",", "\n", "\"slice\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "45", ")", ")", ",", "\n", "\"study_level\"", ":", "rg", ".", "choice", "(", "[", "\"Yes\"", ",", "\"No\"", "]", ",", "1", ")", "[", "0", "]", ",", "\n", "\"x\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"y\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"width\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"height\"", ":", "str", "(", "rg", ".", "integers", "(", "0", ",", "255", ")", ")", ",", "\n", "\"label\"", ":", "rg", ".", "choice", "(", "label_brain", ",", "1", ")", "[", "0", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "annotations_brain_df", "=", "pd", ".", "DataFrame", "(", "\n", "annotations_brain", ",", "columns", "=", "annotations_brain", "[", "0", "]", ".", "keys", "(", ")", "\n", ")", "\n", "annotation_brain_csv", "=", "f\"{path}/brain_annotation.csv\"", "\n", "annotations_brain_df", ".", "to_csv", "(", "annotation_brain_csv", ")", "\n", "\n", "return", "annotation_knee_csv", ",", "annotation_brain_csv", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_modules.build_unet_args": [[19, 80], ["argparse.ArgumentParser", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.UnetModule.add_model_specific_args", "Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "Trainer.add_argparse_args.set_defaults", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.parse_args"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args"], ["def", "build_unet_args", "(", "data_path", ",", "logdir", ",", "backend", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "num_gpus", "=", "0", "\n", "batch_size", "=", "1", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"random\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "data_path", "=", "data_path", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "# module config", "\n", "parser", "=", "UnetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "8", ",", "\n", "num_pool_layers", "=", "2", ",", "\n", "drop_prob", "=", "0.0", ",", "\n", "lr", "=", "0.001", ",", "\n", "lr_step_size", "=", "40", ",", "\n", "lr_gamma", "=", "0.1", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "\n", "default_root_dir", "=", "logdir", ",", "\n", "replace_sampler_ddp", "=", "(", "backend", "!=", "\"ddp\"", ")", ",", "\n", "accelerator", "=", "backend", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"train\"", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_modules.build_varnet_args": [[82, 148], ["argparse.ArgumentParser", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.VarNetModule.add_model_specific_args", "Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "Trainer.add_argparse_args.set_defaults", "Trainer.add_argparse_args.add_argument", "Trainer.add_argparse_args.parse_args"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args"], ["", "def", "build_varnet_args", "(", "data_path", ",", "logdir", ",", "backend", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "num_gpus", "=", "0", "\n", "batch_size", "=", "1", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"equispaced\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "\n", "mask_type", "=", "\"equispaced\"", ",", "\n", "challenge", "=", "\"multicoil\"", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "VarNetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "num_cascades", "=", "4", ",", "\n", "pools", "=", "2", ",", "\n", "chans", "=", "8", ",", "\n", "sens_pools", "=", "2", ",", "\n", "sens_chans", "=", "4", ",", "\n", "lr", "=", "0.001", ",", "\n", "lr_step_size", "=", "40", ",", "\n", "lr_gamma", "=", "0.1", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "\n", "default_root_dir", "=", "logdir", ",", "\n", "replace_sampler_ddp", "=", "(", "backend", "!=", "\"ddp\"", ")", ",", "\n", "accelerator", "=", "backend", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"train\"", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_modules.test_unet_trainer": [[150, 200], ["pytest.mark.parametrize", "monkeypatch.setattr", "test_modules.build_unet_args", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.UnetModule", "pytorch_lightning.Trainer.from_argparse_args", "Trainer.from_argparse_args.fit", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_modules.build_unet_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"backend\"", ",", "[", "None", "]", ")", "\n", "def", "test_unet_trainer", "(", "fastmri_mock_dataset", ",", "backend", ",", "tmp_path", ",", "monkeypatch", ")", ":", "\n", "    ", "knee_path", ",", "_", ",", "metadata", "=", "fastmri_mock_dataset", "\n", "\n", "def", "retrieve_metadata_mock", "(", "a", ",", "fname", ")", ":", "\n", "        ", "return", "metadata", "[", "str", "(", "fname", ")", "]", "\n", "\n", "", "monkeypatch", ".", "setattr", "(", "SliceDataset", ",", "\"_retrieve_metadata\"", ",", "retrieve_metadata_mock", ")", "\n", "\n", "params", "=", "build_unet_args", "(", "knee_path", ",", "tmp_path", ",", "backend", ")", "\n", "params", ".", "fast_dev_run", "=", "True", "\n", "params", ".", "backend", "=", "backend", "\n", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "params", ".", "mask_type", ",", "params", ".", "center_fractions", ",", "params", ".", "accelerations", "\n", ")", "\n", "train_transform", "=", "UnetDataTransform", "(", "\n", "params", ".", "challenge", ",", "mask_func", "=", "mask", ",", "use_seed", "=", "False", "\n", ")", "\n", "val_transform", "=", "UnetDataTransform", "(", "params", ".", "challenge", ",", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "UnetDataTransform", "(", "params", ".", "challenge", ")", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "params", ".", "data_path", ",", "\n", "challenge", "=", "params", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "test_split", "=", "params", ".", "test_split", ",", "\n", "sample_rate", "=", "params", ".", "sample_rate", ",", "\n", "batch_size", "=", "params", ".", "batch_size", ",", "\n", "num_workers", "=", "params", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "params", ".", "accelerator", "==", "\"ddp\"", ")", ",", "\n", "use_dataset_cache_file", "=", "False", ",", "\n", ")", "\n", "\n", "model", "=", "UnetModule", "(", "\n", "in_chans", "=", "params", ".", "in_chans", ",", "\n", "out_chans", "=", "params", ".", "out_chans", ",", "\n", "chans", "=", "params", ".", "chans", ",", "\n", "num_pool_layers", "=", "params", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "params", ".", "drop_prob", ",", "\n", "lr", "=", "params", ".", "lr", ",", "\n", "lr_step_size", "=", "params", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "params", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "params", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "trainer", "=", "Trainer", ".", "from_argparse_args", "(", "params", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "data_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_modules.test_varnet_trainer": [[202, 248], ["pytest.mark.parametrize", "monkeypatch.setattr", "test_modules.build_varnet_args", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.VarNetModule", "pytorch_lightning.Trainer.from_argparse_args", "Trainer.from_argparse_args.fit", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_modules.build_varnet_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"backend\"", ",", "[", "None", "]", ")", "\n", "def", "test_varnet_trainer", "(", "fastmri_mock_dataset", ",", "backend", ",", "tmp_path", ",", "monkeypatch", ")", ":", "\n", "    ", "knee_path", ",", "_", ",", "metadata", "=", "fastmri_mock_dataset", "\n", "\n", "def", "retrieve_metadata_mock", "(", "a", ",", "fname", ")", ":", "\n", "        ", "return", "metadata", "[", "str", "(", "fname", ")", "]", "\n", "\n", "", "monkeypatch", ".", "setattr", "(", "SliceDataset", ",", "\"_retrieve_metadata\"", ",", "retrieve_metadata_mock", ")", "\n", "\n", "params", "=", "build_varnet_args", "(", "knee_path", ",", "tmp_path", ",", "backend", ")", "\n", "params", ".", "fast_dev_run", "=", "True", "\n", "params", ".", "backend", "=", "backend", "\n", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "params", ".", "mask_type", ",", "params", ".", "center_fractions", ",", "params", ".", "accelerations", "\n", ")", "\n", "train_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "VarNetDataTransform", "(", ")", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "params", ".", "data_path", ",", "\n", "challenge", "=", "params", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "test_split", "=", "params", ".", "test_split", ",", "\n", "sample_rate", "=", "params", ".", "sample_rate", ",", "\n", "batch_size", "=", "params", ".", "batch_size", ",", "\n", "num_workers", "=", "params", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "params", ".", "accelerator", "==", "\"ddp\"", ")", ",", "\n", "use_dataset_cache_file", "=", "False", ",", "\n", ")", "\n", "model", "=", "VarNetModule", "(", "\n", "num_cascades", "=", "params", ".", "num_cascades", ",", "\n", "pools", "=", "params", ".", "pools", ",", "\n", "chans", "=", "params", ".", "chans", ",", "\n", "sens_pools", "=", "params", ".", "sens_pools", ",", "\n", "sens_chans", "=", "params", ".", "sens_chans", ",", "\n", "lr", "=", "params", ".", "lr", ",", "\n", "lr_step_size", "=", "params", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "params", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "params", ".", "weight_decay", ",", "\n", ")", "\n", "trainer", "=", "Trainer", ".", "from_argparse_args", "(", "params", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "data_module", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.create_input": [[18, 23], ["numpy.arange().reshape", "torch.from_numpy().float", "numpy.arange", "torch.from_numpy", "numpy.product"], "function", ["None"], ["def", "create_input", "(", "shape", ")", ":", "\n", "    ", "x", "=", "np", ".", "arange", "(", "np", ".", "product", "(", "shape", ")", ")", ".", "reshape", "(", "shape", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.fastmri_mock_dataset": [[25, 30], ["pytest.fixture", "tmp_path_factory.mktemp", "create_temp_data.create_temp_data"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.create_temp_data.create_temp_data"], ["", "@", "pytest", ".", "fixture", "(", "scope", "=", "\"session\"", ")", "\n", "def", "fastmri_mock_dataset", "(", "tmp_path_factory", ")", ":", "\n", "    ", "path", "=", "tmp_path_factory", ".", "mktemp", "(", "\"fastmri_data\"", ")", "\n", "\n", "return", "create_temp_data", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.fastmri_mock_annotation": [[32, 37], ["pytest.fixture", "tmp_path_factory.mktemp", "create_temp_data.create_temp_annotation"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.create_temp_data.create_temp_annotation"], ["", "@", "pytest", ".", "fixture", "(", "scope", "=", "\"session\"", ")", "\n", "def", "fastmri_mock_annotation", "(", "tmp_path_factory", ")", ":", "\n", "    ", "path", "=", "tmp_path_factory", ".", "mktemp", "(", "\"fastmri_annotation\"", ")", "\n", "\n", "return", "create_temp_annotation", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.skip_integration_tests": [[39, 42], ["None"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "\n", "def", "skip_integration_tests", "(", ")", ":", "\n", "    ", "return", "SKIP_INTEGRATIONS", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.knee_split_lens": [[44, 56], ["None"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "\n", "def", "knee_split_lens", "(", ")", ":", "\n", "    ", "split_lens", "=", "{", "\n", "\"multicoil_train\"", ":", "34742", ",", "\n", "\"multicoil_val\"", ":", "7135", ",", "\n", "\"multicoil_test\"", ":", "4092", ",", "\n", "\"singlecoil_train\"", ":", "34742", ",", "\n", "\"singlecoil_val\"", ":", "7135", ",", "\n", "\"singlecoil_test\"", ":", "3903", ",", "\n", "}", "\n", "\n", "return", "split_lens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.conftest.brain_split_lens": [[58, 67], ["None"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "\n", "def", "brain_split_lens", "(", ")", ":", "\n", "    ", "split_lens", "=", "{", "\n", "\"multicoil_train\"", ":", "70748", ",", "\n", "\"multicoil_val\"", ":", "21842", ",", "\n", "\"multicoil_test\"", ":", "8852", ",", "\n", "}", "\n", "\n", "return", "split_lens", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_integrations.test_knee_dataset_lengths": [[13, 24], ["fastmri.data.mri_data.fetch_dir", "knee_split_lens.items", "pytest.skip", "fastmri.data.mri_data.SliceDataset", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["def", "test_knee_dataset_lengths", "(", "knee_split_lens", ",", "skip_integration_tests", ")", ":", "\n", "    ", "if", "skip_integration_tests", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"config set to skip\"", ")", "\n", "\n", "", "knee_path", "=", "fetch_dir", "(", "\"knee_path\"", ")", "\n", "\n", "for", "split", ",", "data_len", "in", "knee_split_lens", ".", "items", "(", ")", ":", "\n", "        ", "challenge", "=", "\"multicoil\"", "if", "\"multicoil\"", "in", "split", "else", "\"singlecoil\"", "\n", "dataset", "=", "SliceDataset", "(", "knee_path", "/", "split", ",", "transform", "=", "None", ",", "challenge", "=", "challenge", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", "==", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_integrations.test_brain_dataset_lengths": [[26, 38], ["fastmri.data.mri_data.fetch_dir", "brain_split_lens.items", "pytest.skip", "fastmri.data.mri_data.SliceDataset", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "test_brain_dataset_lengths", "(", "brain_split_lens", ",", "skip_integration_tests", ")", ":", "\n", "    ", "if", "skip_integration_tests", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"config set to skip\"", ")", "\n", "\n", "", "brain_path", "=", "fetch_dir", "(", "\"brain_path\"", ")", "\n", "\n", "for", "split", ",", "data_len", "in", "brain_split_lens", ".", "items", "(", ")", ":", "\n", "        ", "dataset", "=", "SliceDataset", "(", "\n", "brain_path", "/", "split", ",", "transform", "=", "None", ",", "challenge", "=", "\"multicoil\"", "\n", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", "==", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.tests.test_integrations.test_combined_dataset_lengths": [[40, 58], ["fastmri.data.mri_data.fetch_dir", "fastmri.data.mri_data.fetch_dir", "knee_split_lens.items", "pytest.skip", "brain_split_lens.items", "fastmri.data.mri_data.CombinedSliceDataset", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "test_combined_dataset_lengths", "(", "\n", "knee_split_lens", ",", "brain_split_lens", ",", "skip_integration_tests", "\n", ")", ":", "\n", "    ", "if", "skip_integration_tests", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"config set to skip\"", ")", "\n", "\n", "", "knee_path", "=", "fetch_dir", "(", "\"knee_path\"", ")", "\n", "brain_path", "=", "fetch_dir", "(", "\"brain_path\"", ")", "\n", "\n", "for", "knee_split", ",", "knee_data_len", "in", "knee_split_lens", ".", "items", "(", ")", ":", "\n", "        ", "for", "brain_split", ",", "brain_data_len", "in", "brain_split_lens", ".", "items", "(", ")", ":", "\n", "            ", "dataset", "=", "CombinedSliceDataset", "(", "\n", "[", "knee_path", "/", "knee_split", ",", "brain_path", "/", "brain_split", "]", ",", "\n", "transforms", "=", "[", "None", ",", "None", "]", ",", "\n", "challenges", "=", "[", "\"multicoil\"", ",", "\"multicoil\"", "]", ",", "\n", ")", "\n", "\n", "assert", "len", "(", "dataset", ")", "==", "knee_data_len", "+", "brain_data_len", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.zero_filled.run_zero_filled.save_zero_filled": [[20, 55], ["tqdm.tqdm", "fastmri.save_reconstructions", "list", "data_dir.glob", "h5py.File", "xml.fromstring", "fastmri.data.transforms.to_tensor", "fastmri.ifft2c", "fastmri.data.transforms.complex_center_crop", "fastmri.complex_abs", "int", "int", "fastmri.rss", "fastmri.data.mri_data.et_query", "fastmri.data.mri_data.et_query"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.coil_combine.rss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.et_query"], ["def", "save_zero_filled", "(", "data_dir", ",", "out_dir", ",", "which_challenge", ")", ":", "\n", "    ", "reconstructions", "=", "{", "}", "\n", "\n", "for", "fname", "in", "tqdm", "(", "list", "(", "data_dir", ".", "glob", "(", "\"*.h5\"", ")", ")", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "et_root", "=", "etree", ".", "fromstring", "(", "hf", "[", "\"ismrmrd_header\"", "]", "[", "(", ")", "]", ")", "\n", "masked_kspace", "=", "transforms", ".", "to_tensor", "(", "hf", "[", "\"kspace\"", "]", "[", "(", ")", "]", ")", "\n", "\n", "# extract target image width, height from ismrmrd header", "\n", "enc", "=", "[", "\"encoding\"", ",", "\"encodedSpace\"", ",", "\"matrixSize\"", "]", "\n", "crop_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", ")", "\n", "\n", "# inverse Fourier Transform to get zero filled solution", "\n", "image", "=", "fastmri", ".", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# check for FLAIR 203", "\n", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "                ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "# crop input image", "\n", "", "image", "=", "transforms", ".", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# absolute value", "\n", "image", "=", "fastmri", ".", "complex_abs", "(", "image", ")", "\n", "\n", "# apply Root-Sum-of-Squares if multicoil data", "\n", "if", "which_challenge", "==", "\"multicoil\"", ":", "\n", "                ", "image", "=", "fastmri", ".", "rss", "(", "image", ",", "dim", "=", "1", ")", "\n", "\n", "", "reconstructions", "[", "fname", ".", "name", "]", "=", "image", "\n", "\n", "", "", "fastmri", ".", "save_reconstructions", "(", "reconstructions", ",", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.zero_filled.run_zero_filled.create_arg_parser": [[57, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_path\"", ",", "\n", "type", "=", "Path", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Path to the data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_path\"", ",", "\n", "type", "=", "Path", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Path to save the reconstructions to\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--challenge\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Which challenge\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.str2bool": [[16, 25], ["isinstance", "v.lower", "v.lower", "ValueError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Boolean value expected.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.entropy": [[27, 32], ["prob_mask.log"], "function", ["None"], ["", "", "def", "entropy", "(", "prob_mask", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "ent", "=", "-", "(", "prob_mask", "*", "prob_mask", ".", "log", "(", ")", "+", "(", "1", "-", "prob_mask", ")", "*", "(", "1", "-", "prob_mask", ")", ".", "log", "(", ")", ")", "\n", "ent", "[", "prob_mask", "==", "0", "]", "=", "0", "\n", "ent", "[", "prob_mask", "==", "1", "]", "=", "0", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.load_model": [[34, 49], ["print", "torch.load", "module_class.load_state_dict", "torch.device", "pl_modules.AdaptiveVarNetModule", "pl_modules.VarNetModule"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load"], ["", "def", "load_model", "(", "\n", "module_class", ":", "pl", ".", "LightningModule", ",", "\n", "fname", ":", "pathlib", ".", "Path", ",", "\n", ")", ":", "\n", "    ", "print", "(", "f\"loading model from {fname}\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n", "# Initialise model with stored params", "\n", "module", "=", "module_class", "(", "**", "checkpoint", "[", "\"hyper_parameters\"", "]", ")", "\n", "\n", "# Load stored weights: this will error if the keys don't match the model weights, which will happen", "\n", "#  when we are loading a VarNet instead of an AdaptiveVarNet or vice-versa.", "\n", "module", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.cli_main": [[51, 231], ["pytorch_lightning.seed_everything", "subsample.create_mask_for_mask_type", "fastmri.data.transforms.MiniCoilTransform", "fastmri.pl_modules.FastMriDataModule", "load_model.to", "set", "torch.cuda.is_available", "print", "eval_pretrained_adaptive_varnet.load_model", "print", "fastmri.pl_modules.FastMriDataModule.val_dataloader", "fastmri.pl_modules.FastMriDataModule.train_dataloader", "torch.no_grad", "enumerate", "vol_info.items", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "print", "eval_pretrained_adaptive_varnet.load_model", "print", "load_model.", "enumerate", "torch.stack().numpy", "torch.stack().numpy", "np.concatenate.mean().item", "np.concatenate.mean().item", "np.concatenate.mean().item", "torch.cat().double", "print", "torch.cat().double.mean", "entropy().sum", "entropy().sum().mean", "return_dict.update", "batch.kspace.to", "batch.masked_kspace.to", "batch.mask.to", "prob_masks_list[].squeeze().detach().cpu", "numpy.isclose", "set.add", "vol_info[].append", "all_prob_masks.append", "fastmri.evaluate.ssim", "fastmri.evaluate.psnr", "fastmri.evaluate.nmse", "all_ssims.append", "all_psnrs.append", "all_nmses.append", "zip", "numpy.array", "numpy.array", "numpy.array", "len", "batch_prob_masks[].sum", "torch.stack", "torch.stack", "torch.stack", "fastmri.evaluate.ssim", "fastmri.evaluate.psnr", "fastmri.evaluate.nmse", "all_ssims.append", "all_psnrs.append", "all_nmses.append", "np.concatenate.mean", "np.concatenate.mean", "np.concatenate.mean", "torch.cat", "eval_pretrained_adaptive_varnet.entropy", "entropy().sum", "entropy().sum().mean.item", "entropy().sum.item", "mut_inf.item", "prob_masks_list[].squeeze().detach", "output[].cpu", "batch.masked_kspace[].cpu", "batch.target[].cpu", "eval_pretrained_adaptive_varnet.entropy", "prob_masks_list[].squeeze"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.load_model", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.val_dataloader", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.train_dataloader", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.load_model", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.psnr", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.nmse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.psnr", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.nmse", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.entropy", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.entropy"], ["", "def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "0", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "\n", "args", ".", "center_fractions", ",", "\n", "args", ".", "accelerations", ",", "\n", "args", ".", "skip_low_freqs", ",", "\n", ")", "\n", "\n", "# Assumes coil compression with 4 coils", "\n", "val_transform", "=", "MiniCoilTransform", "(", "\n", "mask_func", "=", "mask", ",", "\n", "num_compressed_coils", "=", "4", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", ")", "\n", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "val_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "val_transform", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "volume_sample_rate", "=", "args", ".", "volume_sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "device", "=", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "\n", "non_adaptive", "=", "False", "\n", "try", ":", "\n", "# Try to load as AdaptiveVarNetModule, if this fails, then the model is probably a VarNetModule instead", "\n", "        ", "print", "(", "\"Trying to load as AdaptiveVarNetModule...\"", ")", "\n", "model", "=", "load_model", "(", "AdaptiveVarNetModule", ",", "args", ".", "load_checkpoint", ")", "\n", "\n", "print", "(", "\"... Success!\"", ")", "\n", "", "except", "RuntimeError", ":", "\n", "# If this still fails, then probably the state dict", "\n", "        ", "print", "(", "\n", "\"Loading as AdaptiveVarNetModule failed, trying to load as VarNetModule...\"", "\n", ")", "\n", "model", "=", "load_model", "(", "VarNetModule", ",", "args", ".", "load_checkpoint", ")", "\n", "non_adaptive", "=", "True", "\n", "print", "(", "\"... Success!\"", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "data_loader", "=", "(", "\n", "data_module", ".", "val_dataloader", "(", ")", "\n", "if", "args", ".", "data_mode", "==", "\"val\"", "\n", "else", "data_module", ".", "train_dataloader", "(", ")", "\n", ")", "\n", "\n", "# --------------------------------------------------------------------------------", "\n", "# We loop over the whole dataset and store information per-volume[", "\n", "# The metrics will be computed in a different loop", "\n", "# --------------------------------------------------------------------------------", "\n", "vol_info", "=", "{", "}", "\n", "seen_slices", "=", "set", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "i", "==", "args", ".", "num_batches", ":", "\n", "                ", "break", "\n", "\n", "", "output", ",", "extra_outputs", "=", "model", "(", "\n", "batch", ".", "kspace", ".", "to", "(", "device", ")", ",", "\n", "batch", ".", "masked_kspace", ".", "to", "(", "device", ")", ",", "\n", "batch", ".", "mask", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "\n", "prob_masks_list", "=", "extra_outputs", "[", "\"prob_masks\"", "]", "\n", "if", "not", "non_adaptive", ":", "\n", "                ", "assert", "(", "\n", "len", "(", "prob_masks_list", ")", "==", "1", "\n", ")", ",", "\"Found more than one prob mask... Multiple policies in this checkpoint?\"", "\n", "batch_prob_masks", "=", "(", "\n", "prob_masks_list", "[", "0", "]", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", ")", "# b x 1 x 1 x 128 x 1 --> b x 128", "\n", "assert", "np", ".", "isclose", "(", "\n", "batch_prob_masks", "[", "0", "]", ".", "sum", "(", ")", ",", "model", ".", "budget", "\n", ")", ",", "f\"Sum of a prob mask should match budget {model.budget}!\"", "\n", "\n", "", "for", "i", ",", "f", "in", "enumerate", "(", "batch", ".", "fname", ")", ":", "\n", "                ", "if", "f", "not", "in", "vol_info", ":", "\n", "                    ", "vol_info", "[", "f", "]", "=", "[", "]", "\n", "", "prob_mask", "=", "None", "if", "non_adaptive", "else", "batch_prob_masks", "[", "i", "]", "\n", "slice_id", "=", "(", "f", ",", "batch", ".", "slice_num", "[", "i", "]", ")", "\n", "assert", "slice_id", "not", "in", "seen_slices", "\n", "seen_slices", ".", "add", "(", "slice_id", ")", "\n", "vol_info", "[", "f", "]", ".", "append", "(", "\n", "(", "\n", "output", "[", "i", "]", ".", "cpu", "(", ")", ",", "\n", "batch", ".", "masked_kspace", "[", "i", "]", ".", "cpu", "(", ")", ",", "\n", "batch", ".", "slice_num", "[", "i", "]", ",", "\n", "batch", ".", "target", "[", "i", "]", ".", "cpu", "(", ")", ",", "\n", "batch", ".", "max_value", "[", "i", "]", ",", "\n", "prob_mask", ",", "\n", ")", "\n", ")", "\n", "\n", "# --------------------------------------------------------------------------------", "\n", "# Now we compute metrics per volume", "\n", "# --------------------------------------------------------------------------------", "\n", "", "", "all_prob_masks", "=", "[", "]", "\n", "all_ssims", ",", "all_psnrs", ",", "all_nmses", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "vol_name", ",", "vol_data", "in", "vol_info", ".", "items", "(", ")", ":", "\n", "# slice_data is (output, masked_kspace, slice_num, target, max_value, prob_mask)", "\n", "            ", "output", "=", "torch", ".", "stack", "(", "[", "slice_data", "[", "0", "]", "for", "slice_data", "in", "vol_data", "]", ")", ".", "numpy", "(", ")", "\n", "target", "=", "torch", ".", "stack", "(", "[", "slice_data", "[", "3", "]", "for", "slice_data", "in", "vol_data", "]", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "not", "non_adaptive", ":", "\n", "                ", "all_prob_masks", ".", "append", "(", "\n", "torch", ".", "stack", "(", "[", "slice_data", "[", "-", "1", "]", "for", "slice_data", "in", "vol_data", "]", ")", "\n", ")", "\n", "\n", "# ----- Metrics calculation -----", "\n", "", "if", "args", ".", "vol_based", ":", "\n", "# Note that SSIMLoss computes average SSIM over the entire batch", "\n", "                ", "ssim", "=", "evaluate", ".", "ssim", "(", "target", ",", "output", ")", "\n", "psnr", "=", "evaluate", ".", "psnr", "(", "target", ",", "output", ")", "\n", "nmse", "=", "evaluate", ".", "nmse", "(", "target", ",", "output", ")", "\n", "all_ssims", ".", "append", "(", "ssim", ")", "\n", "all_psnrs", ".", "append", "(", "psnr", ")", "\n", "all_nmses", ".", "append", "(", "nmse", ")", "\n", "", "else", ":", "\n", "                ", "for", "gt", ",", "rec", "in", "zip", "(", "target", ",", "output", ")", ":", "\n", "                    ", "gt", "=", "gt", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "rec", "=", "rec", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "ssim", "=", "evaluate", ".", "ssim", "(", "gt", ",", "rec", ")", "\n", "psnr", "=", "evaluate", ".", "psnr", "(", "gt", ",", "rec", ")", "\n", "nmse", "=", "evaluate", ".", "nmse", "(", "gt", ",", "rec", ")", "\n", "all_ssims", ".", "append", "(", "ssim", ")", "\n", "all_psnrs", ".", "append", "(", "psnr", ")", "\n", "all_nmses", ".", "append", "(", "nmse", ")", "\n", "\n", "# --------------------------------------------------------------------------------", "\n", "# Aggregate everything", "\n", "# --------------------------------------------------------------------------------", "\n", "", "", "", "ssim_array", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "all_ssims", ")", "[", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "psnr_array", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "all_psnrs", ")", "[", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "nmse_array", "=", "np", ".", "concatenate", "(", "np", ".", "array", "(", "all_nmses", ")", "[", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return_dict", "=", "{", "\n", "\"ssim\"", ":", "ssim_array", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"psnr\"", ":", "psnr_array", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"nmse\"", ":", "nmse_array", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "}", "\n", "\n", "if", "all_prob_masks", ":", "\n", "# Each row sums to model.budget.", "\n", "            ", "prob_mask_tensor", "=", "torch", ".", "cat", "(", "all_prob_masks", ",", "dim", "=", "0", ")", ".", "double", "(", ")", "\n", "\n", "print", "(", "\n", "f\"Computed {prob_mask_tensor.shape[0]} masks of size {prob_mask_tensor.shape[1]}\"", "\n", ")", "\n", "\n", "marg_prob", "=", "prob_mask_tensor", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "marg_entropy", "=", "entropy", "(", "marg_prob", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "avg_cond_entropy", "=", "entropy", "(", "prob_mask_tensor", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "mut_inf", "=", "marg_entropy", "-", "avg_cond_entropy", "\n", "\n", "return_dict", ".", "update", "(", "\n", "{", "\n", "\"cond_ent_ind\"", ":", "avg_cond_entropy", ".", "item", "(", ")", ",", "\n", "\"marg_ent_ind\"", ":", "marg_entropy", ".", "item", "(", ")", ",", "\n", "\"mi_ind\"", ":", "mut_inf", ".", "item", "(", ")", ",", "\n", "}", "\n", ")", "\n", "", "print", "(", "return_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.build_args": [[233, 318], ["argparse.ArgumentParser", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "FastMriDataModule.add_data_specific_args.add_argument", "pl_modules.AdaptiveVarNetModule.add_model_specific_args", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "FastMriDataModule.add_data_specific_args.set_defaults", "FastMriDataModule.add_data_specific_args.parse_args", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load_checkpoint\"", ",", "\n", "type", "=", "pathlib", ".", "Path", ",", "\n", "help", "=", "\"Model checkpoint to load.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "(", "\n", "\"Number of center lines to use in mask. 0.08 for acceleration 4, 0.04 for acceleration 8 models.\"", ",", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "(", "\n", "\"Acceleration rates to use. This and `center_fractions` matter mostly for evaluating the equispaced \"", "\n", "\"models (the other models only care that the Auto-Calibration Region is fully sampled). Regardless, good \"", "\n", "\"practice is to set these parameters to the values specified in the `center_fractions` help, for the \"", "\n", "\"corresponding acceleration.\"", ",", "\n", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--crop_size\"", ",", "\n", "default", "=", "(", "128", ",", "128", ")", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"Crop size used by checkpoint.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_batches\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_mode\"", ",", "\n", "default", "=", "\"val\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"train\"", ",", "\"val\"", "]", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip_low_freqs\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether skip low-frequency lines when computing equispaced mask.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vol_based\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to do volume-based evaluation (otherwise slice-based).\"", ",", "\n", ")", "\n", "\n", "parser", "=", "AdaptiveVarNetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"adaptive_equispaced_fraction\"", ",", "# VarNet uses equispaced mask", "\n", "challenge", "=", "\"multicoil\"", ",", "# only multicoil implemented for VarNet", "\n", "batch_size", "=", "64", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", "num_workers", "=", "20", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "assert", "(", "\n", "len", "(", "args", ".", "crop_size", ")", "==", "2", "\n", ")", ",", "f\"Crop size must be of length 2, not {len(args.crop_size)}.\"", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.eval_pretrained_adaptive_varnet.run_cli": [[320, 327], ["eval_pretrained_adaptive_varnet.build_args", "eval_pretrained_adaptive_varnet.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.WandbLoggerCallback.__init__": [[176, 236], ["pytorch_lightning.callbacks.Callback.__init__", "wandb.init", "wandb.util.generate_id", "datetime.datetime.datetime.now", "pathlib.Path.mkdir", "train_adaptive_varnet_demo.make_wandb_run_name", "open", "f.read", "open", "pathlib.Path", "pathlib.Path.cwd", "wandb.run.name.split", "open", "f.write", "open", "f.write", "open", "f.write", "open", "f.write", "f.read", "datetime.datetime.now.strftime", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.make_wandb_run_name", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "args", ".", "resume_from_checkpoint", ":", "\n", "# Get wandb id from file in checkpoint dir", "\n", "# resume_from_checkpoint = default_root_dir / checkpoints / model.ckpt", "\n", "# wandb_id is stored in default_root_dir / wandb_id.txt", "\n", "            ", "with", "open", "(", "\n", "pathlib", ".", "Path", "(", "args", ".", "resume_from_checkpoint", ")", ".", "parent", ".", "parent", "\n", "/", "\"wandb_id.txt\"", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "id", "=", "f", ".", "read", "(", ")", "\n", "", "with", "open", "(", "\n", "pathlib", ".", "Path", "(", "args", ".", "resume_from_checkpoint", ")", ".", "parent", ".", "parent", "\n", "/", "\"wandb_dir.txt\"", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "dir", "=", "pathlib", ".", "Path", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "id", "=", "wandb", ".", "util", ".", "generate_id", "(", ")", "\n", "\n", "base_dir", "=", "pathlib", ".", "Path", ".", "cwd", "(", ")", "/", "\"wandb\"", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "if", "args", ".", "learn_acquisition", ":", "\n", "                ", "if", "args", ".", "loupe_mask", ":", "\n", "                    ", "algo", "=", "\"loupe\"", "\n", "", "else", ":", "\n", "                    ", "algo", "=", "\"adaptive\"", "\n", "", "", "else", ":", "\n", "                ", "algo", "=", "\"non_adaptive\"", "\n", "", "dir", "=", "base_dir", "/", "now", ".", "strftime", "(", "\"%Y_%m_%d\"", ")", "/", "algo", "\n", "dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "wandb", ".", "init", "(", "\n", "entity", "=", "self", ".", "args", ".", "wandb_entity", ",", "\n", "project", "=", "self", ".", "args", ".", "project", ",", "\n", "config", "=", "self", ".", "args", ",", "\n", "resume", "=", "\"allow\"", ",", "\n", "id", "=", "id", ",", "\n", "dir", "=", "dir", ",", "\n", ")", "\n", "\n", "if", "not", "wandb", ".", "run", ".", "resumed", ":", "\n", "# Extract run index from wandb name", "\n", "            ", "wandb_index", "=", "wandb", ".", "run", ".", "name", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", "\n", "# Overwrite wandb run name", "\n", "wandb_name", "=", "make_wandb_run_name", "(", "args", ")", "\n", "wandb", ".", "run", ".", "name", "=", "wandb_name", "+", "\"-\"", "+", "wandb_index", "\n", "\n", "# Save wandb info", "\n", "with", "open", "(", "pathlib", ".", "Path", "(", "args", ".", "default_root_dir", ")", "/", "wandb", ".", "run", ".", "name", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "wandb", ".", "run", ".", "id", ")", "\n", "", "with", "open", "(", "pathlib", ".", "Path", "(", "args", ".", "default_root_dir", ")", "/", "wandb", ".", "run", ".", "id", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "wandb", ".", "run", ".", "name", ")", "\n", "", "with", "open", "(", "pathlib", ".", "Path", "(", "args", ".", "default_root_dir", ")", "/", "\"wandb_id.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "wandb", ".", "run", ".", "id", ")", "\n", "", "with", "open", "(", "pathlib", ".", "Path", "(", "args", ".", "default_root_dir", ")", "/", "\"wandb_dir.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.WandbLoggerCallback.on_pretrain_routine_start": [[237, 252], ["len", "len", "len", "print", "print", "print", "wandb.log", "trainer.datamodule.train_dataloader", "trainer.datamodule.val_dataloader", "trainer.datamodule.test_dataloader"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.train_dataloader", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.val_dataloader", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.test_dataloader"], ["", "", "", "def", "on_pretrain_routine_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "train_loader_len", "=", "len", "(", "trainer", ".", "datamodule", ".", "train_dataloader", "(", ")", ")", "\n", "val_loader_len", "=", "len", "(", "trainer", ".", "datamodule", ".", "val_dataloader", "(", ")", ")", "\n", "test_loader_len", "=", "len", "(", "trainer", ".", "datamodule", ".", "test_dataloader", "(", ")", ")", "\n", "\n", "print", "(", "f\"Train loader batches: {train_loader_len}\"", ")", "\n", "print", "(", "f\"Val loader batches: {val_loader_len}\"", ")", "\n", "print", "(", "f\"Test loader batches: {test_loader_len}\"", ")", "\n", "\n", "wandb", ".", "log", "(", "\n", "{", "\n", "\"epoch\"", ":", "-", "1", ",", "\n", "\"train_batches\"", ":", "train_loader_len", ",", "\n", "\"val_batches\"", ":", "val_loader_len", ",", "\n", "\"test_batches\"", ":", "test_loader_len", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.WandbLoggerCallback.on_train_epoch_end": [[255, 308], ["pl_module.TrainTotExamples.compute().item", "pl_module.TrainTotSliceExamples.compute().item", "wandb.log", "pl_module.TrainMargDist.compute", "pl_module.TrainMargDist.compute.sum", "pl_module.TrainSSIM.compute().item", "pl_module.TrainPSNR.compute().item", "pl_module.TrainNMSE.compute().item", "pl_module.TrainLoss.compute().item", "torch.Size", "len", "matplotlib.imshow", "matplotlib.colorbar", "wandb.log", "matplotlib.close", "torch.sum", "wandb.log", "pl_module.TrainTotExamples.compute", "pl_module.TrainTotSliceExamples.compute", "pl_module.TrainMargDist.compute.expand().cpu().numpy", "pl_module.TrainCondEnt.compute", "pl_module.TrainSSIM.compute", "pl_module.TrainPSNR.compute", "pl_module.TrainNMSE.compute", "pl_module.TrainLoss.compute", "torch.log", "pl_module.TrainMargDist.compute.expand().cpu", "pl_module.TrainMargDist.compute.expand"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute"], ["", "def", "on_train_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ",", "outputs", ")", ":", "\n", "        ", "epoch", "=", "trainer", ".", "current_epoch", "\n", "\n", "tot_ex", "=", "pl_module", ".", "TrainTotExamples", ".", "compute", "(", ")", ".", "item", "(", ")", "\n", "tot_slice_ex", "=", "pl_module", ".", "TrainTotSliceExamples", ".", "compute", "(", ")", ".", "item", "(", ")", "\n", "ssim", "=", "pl_module", ".", "TrainSSIM", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_ex", "\n", "psnr", "=", "pl_module", ".", "TrainPSNR", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_ex", "\n", "nmse", "=", "pl_module", ".", "TrainNMSE", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_ex", "\n", "train_loss", "=", "pl_module", ".", "TrainLoss", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_slice_ex", "\n", "wandb_dict", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"train_loss\"", ":", "train_loss", ",", "\n", "\"train_ssim\"", ":", "ssim", ",", "\n", "\"train_psnr\"", ":", "psnr", ",", "\n", "\"train_nmse\"", ":", "nmse", ",", "\n", "\"train_tot_ex\"", ":", "tot_ex", ",", "\n", "\"train_tot_slice_ex\"", ":", "tot_slice_ex", ",", "\n", "}", "\n", "\n", "wandb", ".", "log", "(", "wandb_dict", ")", "\n", "\n", "# For some reason tot_ex is not the correct number to divide by, due to some", "\n", "#  kind of weird issue with how we count it. Fortunately, we know the sum of", "\n", "#  val_marg_dist should be 1, so we can compute the correct normalisation", "\n", "#  number from that constraint. Probably this means that we're overcounting", "\n", "#  some examples relative to others for the entropy calculations?", "\n", "# NOTE: This is not really the correct distribution, since the policy is a", "\n", "#  bunch of independent Bernoullis (+ rejection sampling), not a policy over", "\n", "#  a single acquisition.", "\n", "# NOTE: These are not the entropies reported in the paper.", "\n", "train_marg_dist", "=", "pl_module", ".", "TrainMargDist", ".", "compute", "(", ")", "\n", "norm_ex", "=", "train_marg_dist", ".", "sum", "(", ")", "\n", "train_marg_dist", "=", "train_marg_dist", "/", "norm_ex", "\n", "if", "train_marg_dist", ".", "shape", "!=", "torch", ".", "Size", "(", "[", "1", "]", ")", ":", "# Check that we didn't skip", "\n", "            ", "W", "=", "len", "(", "train_marg_dist", ")", "\n", "plt", ".", "imshow", "(", "\n", "train_marg_dist", ".", "expand", "(", "W", ",", "W", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "cmap", "=", "\"gist_gray\"", ",", "\n", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "wandb", ".", "log", "(", "{", "\"train_marg_dist\"", ":", "plt", ",", "\"epoch\"", ":", "epoch", "}", ")", "\n", "plt", ".", "close", "(", ")", "\n", "train_marg_ent", "=", "torch", ".", "sum", "(", "\n", "-", "1", "*", "train_marg_dist", "*", "torch", ".", "log", "(", "train_marg_dist", "+", "1e-8", ")", "\n", ")", "\n", "train_cond_ent", "=", "pl_module", ".", "TrainCondEnt", ".", "compute", "(", ")", "/", "norm_ex", "\n", "train_mut_inf", "=", "train_marg_ent", "-", "train_cond_ent", "\n", "wandb", ".", "log", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"train_marg_ent\"", ":", "train_marg_ent", ",", "\n", "\"train_cond_ent\"", ":", "train_cond_ent", ",", "\n", "\"train_mut_inf\"", ":", "train_mut_inf", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.WandbLoggerCallback.on_validation_epoch_end": [[311, 365], ["pl_module.TotExamples.compute().item", "pl_module.TotSliceExamples.compute().item", "wandb.log", "pl_module.ValMargDist.compute", "pl_module.ValMargDist.compute.sum().item", "pl_module.SSIM.compute().item", "pl_module.PSNR.compute().item", "pl_module.NMSE.compute().item", "pl_module.ValLoss.compute().item", "torch.Size", "len", "matplotlib.imshow", "matplotlib.colorbar", "wandb.log", "matplotlib.close", "torch.sum", "wandb.log", "pl_module.TotExamples.compute", "pl_module.TotSliceExamples.compute", "pl_module.ValMargDist.compute.sum", "pl_module.ValMargDist.compute.expand().cpu().numpy", "pl_module.ValCondEnt.compute", "pl_module.SSIM.compute", "pl_module.PSNR.compute", "pl_module.NMSE.compute", "pl_module.ValLoss.compute", "torch.log", "pl_module.ValMargDist.compute.expand().cpu", "pl_module.ValMargDist.compute.expand"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.compute"], ["", "", "def", "on_validation_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "epoch", "=", "trainer", ".", "current_epoch", "\n", "\n", "# See MriModule.validation_epoch_end()", "\n", "tot_ex", "=", "pl_module", ".", "TotExamples", ".", "compute", "(", ")", ".", "item", "(", ")", "\n", "tot_slice_ex", "=", "pl_module", ".", "TotSliceExamples", ".", "compute", "(", ")", ".", "item", "(", ")", "\n", "ssim", "=", "pl_module", ".", "SSIM", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_ex", "\n", "psnr", "=", "pl_module", ".", "PSNR", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_ex", "\n", "nmse", "=", "pl_module", ".", "NMSE", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_ex", "\n", "val_loss", "=", "pl_module", ".", "ValLoss", ".", "compute", "(", ")", ".", "item", "(", ")", "/", "tot_slice_ex", "\n", "wandb_dict", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"val_loss\"", ":", "val_loss", ",", "\n", "\"val_ssim\"", ":", "ssim", ",", "\n", "\"val_psnr\"", ":", "psnr", ",", "\n", "\"val_nmse\"", ":", "nmse", ",", "\n", "\"val_tot_ex\"", ":", "tot_ex", ",", "\n", "\"val_tot_slice_ex\"", ":", "tot_slice_ex", ",", "\n", "}", "\n", "\n", "wandb", ".", "log", "(", "wandb_dict", ")", "\n", "\n", "# For some reason tot_ex is not the correct number to divide by, due to some", "\n", "#  kind of weird issue with how we count it. Fortunately, we know the sum of", "\n", "#  val_marg_dist should be 1, so we can compute the correct normalisation", "\n", "#  number from that constraint. Probably this means that we're overcounting", "\n", "#  some examples relative to others for the entropy calculations?", "\n", "# NOTE: This is not really the correct distribution, since the policy is a", "\n", "#  bunch of independent Bernoullis (+ rejection sampling), not a policy over", "\n", "#  a single acquisition.", "\n", "# NOTE: These are not the entropies reported in the paper.", "\n", "val_marg_dist", "=", "pl_module", ".", "ValMargDist", ".", "compute", "(", ")", "\n", "norm_ex", "=", "val_marg_dist", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_marg_dist", "=", "val_marg_dist", "/", "norm_ex", "\n", "if", "val_marg_dist", ".", "shape", "!=", "torch", ".", "Size", "(", "[", "1", "]", ")", ":", "# Check that we didn't skip", "\n", "            ", "W", "=", "len", "(", "val_marg_dist", ")", "\n", "plt", ".", "imshow", "(", "\n", "val_marg_dist", ".", "expand", "(", "W", ",", "W", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "cmap", "=", "\"gist_gray\"", ",", "\n", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "wandb", ".", "log", "(", "{", "\"val_marg_dist\"", ":", "plt", ",", "\"epoch\"", ":", "epoch", "}", ")", "\n", "plt", ".", "close", "(", ")", "\n", "val_marg_ent", "=", "torch", ".", "sum", "(", "\n", "-", "1", "*", "val_marg_dist", "*", "torch", ".", "log", "(", "val_marg_dist", "+", "1e-8", ")", "\n", ")", "\n", "val_cond_ent", "=", "pl_module", ".", "ValCondEnt", ".", "compute", "(", ")", "/", "norm_ex", "\n", "val_mut_inf", "=", "val_marg_ent", "-", "val_cond_ent", "\n", "wandb", ".", "log", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"val_marg_ent\"", ":", "val_marg_ent", ",", "\n", "\"val_cond_ent\"", ":", "val_cond_ent", ",", "\n", "\"val_mut_inf\"", ":", "val_mut_inf", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.count_parameters": [[27, 29], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "if", "model", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.count_trainable_parameters": [[31, 36], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_trainable_parameters", "(", "model", ")", ":", "\n", "    ", "return", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "if", "model", "is", "not", "None", "\n", "else", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.count_untrainable_parameters": [[39, 44], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_untrainable_parameters", "(", "model", ")", ":", "\n", "    ", "return", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "not", "p", ".", "requires_grad", ")", "\n", "if", "model", "is", "not", "None", "\n", "else", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.str2bool": [[47, 56], ["isinstance", "v.lower", "v.lower", "ValueError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Boolean value expected.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.str2none": [[58, 65], ["v.lower"], "function", ["None"], ["", "", "def", "str2none", "(", "v", ")", ":", "\n", "    ", "if", "v", "is", "None", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "==", "\"none\"", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.int2none": [[67, 74], ["v.lower", "int"], "function", ["None"], ["", "", "def", "int2none", "(", "v", ")", ":", "\n", "    ", "if", "v", "is", "None", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "==", "\"none\"", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.float2none": [[76, 83], ["v.lower", "float"], "function", ["None"], ["", "", "def", "float2none", "(", "v", ")", ":", "\n", "    ", "if", "v", "is", "None", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "==", "\"none\"", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "float", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.make_wandb_run_name": [[85, 173], ["str", "str", "str", "len", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "make_wandb_run_name", "(", "args", ")", ":", "\n", "    ", "name", "=", "\"\"", "\n", "\n", "# Create base name", "\n", "if", "args", ".", "learn_acquisition", ":", "\n", "        ", "if", "args", ".", "loupe_mask", ":", "\n", "            ", "name", "+=", "\"loupe-\"", "\n", "", "else", ":", "\n", "            ", "name", "+=", "\"act-\"", "\n", "", "", "else", ":", "\n", "        ", "name", "+=", "\"Nact-\"", "\n", "", "assert", "len", "(", "args", ".", "accelerations", ")", "==", "1", "\n", "name", "+=", "str", "(", "args", ".", "accelerations", "[", "0", "]", ")", "\n", "name", "+=", "\"-cas\"", "\n", "name", "+=", "str", "(", "args", ".", "num_cascades", ")", "\n", "name", "+=", "\"-\"", "\n", "\n", "if", "args", ".", "learn_acquisition", "and", "not", "args", ".", "loupe_mask", ":", "\n", "        ", "name", "+=", "\"p\"", "\n", "name", "+=", "str", "(", "args", ".", "cascades_per_policy", ")", "\n", "name", "+=", "\"-\"", "\n", "\n", "", "if", "args", ".", "chans", "!=", "18", ":", "\n", "        ", "name", "+=", "\"ch\"", "\n", "name", "+=", "str", "(", "args", ".", "chans", ")", "\n", "name", "+=", "\"-\"", "\n", "\n", "", "if", "args", ".", "num_compressed_coils", "==", "1", ":", "\n", "        ", "name", "+=", "\"singlecoil-\"", "\n", "\n", "", "if", "args", ".", "sparse_dc_gradients", ":", "\n", "        ", "name", "+=", "\"dcsparse-\"", "\n", "", "else", ":", "\n", "        ", "name", "+=", "\"dcmultip-\"", "\n", "\n", "", "if", "args", ".", "learn_acquisition", ":", "\n", "        ", "if", "args", ".", "use_softplus", ":", "\n", "            ", "name", "+=", "f\"softplus{args.slope}b-\"", "\n", "", "else", ":", "\n", "            ", "name", "+=", "f\"sigmoid{args.slope}s-\"", "\n", "", "if", "args", ".", "straight_through_slope", "!=", "10", ":", "\n", "            ", "name", "+=", "f\"stslope{args.straight_through_slope}-\"", "\n", "", "if", "args", ".", "hard_dc", ":", "\n", "            ", "if", "not", "args", ".", "dc_mode", "==", "\"first\"", ":", "\n", "                ", "name", "+=", "f\"hdc{args.dc_mode}-\"", "\n", "", "", "else", ":", "\n", "            ", "name", "+=", "\"sdc-\"", "\n", "\n", "", "if", "args", ".", "st_clamp", ":", "\n", "            ", "name", "+=", "\"stclamp-\"", "\n", "\n", "", "if", "not", "args", ".", "loupe_mask", ":", "# Policy runs", "\n", "            ", "if", "args", ".", "policy_num_fc_layers", "!=", "3", "and", "args", ".", "policy_fc_size", "!=", "256", ":", "\n", "                ", "name", "+=", "f\"{args.policy_num_fc_layers}fc{args.policy_fc_size}-\"", "\n", "", "elif", "args", ".", "policy_num_fc_layers", "!=", "3", ":", "\n", "                ", "name", "+=", "f\"{args.policy_num_fc_layers}fc-\"", "\n", "", "elif", "args", ".", "policy_fc_size", "!=", "256", ":", "\n", "                ", "name", "+=", "f\"fc{args.policy_fc_size}-\"", "\n", "\n", "", "if", "args", ".", "policy_drop_prob", "!=", "0.0", ":", "\n", "                ", "name", "+=", "f\"drop{args.policy_drop_prob}-\"", "\n", "\n", "", "if", "args", ".", "policy_activation", "!=", "\"leakyrelu\"", ":", "\n", "                ", "name", "+=", "\"elu-\"", "\n", "", "", "else", ":", "# LOUPE runs", "\n", "            ", "pass", "\n", "", "", "else", ":", "# Non-active runs", "\n", "        ", "if", "args", ".", "mask_type", "!=", "\"adaptive_equispaced_fraction\"", ":", "\n", "            ", "name", "+=", "f\"{args.mask_type}-\"", "\n", "\n", "", "", "name", "+=", "\"seed\"", "\n", "name", "+=", "str", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "lr", "!=", "0.001", ":", "\n", "        ", "name", "+=", "\"-lr{}\"", ".", "format", "(", "args", ".", "lr", ")", "\n", "\n", "", "if", "args", ".", "sample_rate", "is", "None", "and", "args", ".", "volume_sample_rate", "is", "not", "None", ":", "\n", "        ", "if", "args", ".", "volume_sample_rate", "!=", "1.0", ":", "\n", "            ", "name", "+=", "\"-\"", "\n", "name", "+=", "\"vsr\"", "\n", "name", "+=", "str", "(", "args", ".", "volume_sample_rate", ")", "\n", "", "", "elif", "args", ".", "sample_rate", "is", "not", "None", "and", "args", ".", "volume_sample_rate", "is", "None", ":", "\n", "        ", "if", "args", ".", "sample_rate", "!=", "1.0", ":", "\n", "            ", "name", "+=", "\"-\"", "\n", "name", "+=", "\"sr\"", "\n", "name", "+=", "str", "(", "args", ".", "sample_rate", ")", "\n", "\n", "", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.cli_main": [[369, 500], ["subsample.create_mask_for_mask_type", "fastmri.data.transforms.MiniCoilTransform", "fastmri.data.transforms.MiniCoilTransform", "fastmri.data.transforms.MiniCoilTransform", "fastmri.pl_modules.FastMriDataModule", "pytorch_lightning.seed_everything", "pl_modules.AdaptiveVarNetModule", "pl_modules.VarNetModule", "pytorch_lightning.Trainer.from_argparse_args", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "wandb.finish", "pl.Trainer.from_argparse_args.test", "ValueError", "len", "len", "train_adaptive_varnet_demo.WandbLoggerCallback"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["", "", "", "def", "cli_main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "num_sense_lines", "is", "not", "None", ":", "\n", "        ", "assert", "(", "\n", "args", ".", "num_sense_lines", "%", "2", "==", "0", "\n", ")", ",", "\"`num_sense_lines` must be even, not {}\"", ".", "format", "(", "args", ".", "num_sense_lines", ")", "\n", "assert", "(", "\n", "len", "(", "args", ".", "accelerations", ")", "==", "1", "and", "len", "(", "args", ".", "center_fractions", ")", "==", "1", "\n", ")", ",", "\"Cannot use multiple accelerations when `num_sense_lines` is set.\"", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "\n", "args", ".", "center_fractions", ",", "\n", "args", ".", "accelerations", ",", "\n", "args", ".", "skip_low_freqs", ",", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "MiniCoilTransform", "(", "\n", "mask_func", "=", "mask", ",", "\n", "use_seed", "=", "False", ",", "# Set this to True to get deterministic results for Equispaced and Random.", "\n", "num_compressed_coils", "=", "args", ".", "num_compressed_coils", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", ")", "\n", "val_transform", "=", "MiniCoilTransform", "(", "\n", "mask_func", "=", "mask", ",", "\n", "num_compressed_coils", "=", "args", ".", "num_compressed_coils", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", ")", "\n", "if", "args", ".", "test_split", "in", "(", "\"test\"", ",", "\"challenge\"", ")", ":", "\n", "        ", "mask", "=", "None", "\n", "", "test_transform", "=", "MiniCoilTransform", "(", "\n", "mask_func", "=", "mask", ",", "\n", "num_compressed_coils", "=", "args", ".", "num_compressed_coils", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", ")", "\n", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "volume_sample_rate", "=", "args", ".", "volume_sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "in", "(", "\"ddp\"", ",", "\"ddp_cpu\"", ")", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "if", "args", ".", "learn_acquisition", ":", "\n", "        ", "model", "=", "AdaptiveVarNetModule", "(", "\n", "num_cascades", "=", "args", ".", "num_cascades", ",", "\n", "pools", "=", "args", ".", "pools", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "sens_pools", "=", "args", ".", "sens_pools", ",", "\n", "sens_chans", "=", "args", ".", "sens_chans", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "budget", "=", "args", ".", "budget", ",", "\n", "cascades_per_policy", "=", "args", ".", "cascades_per_policy", ",", "\n", "loupe_mask", "=", "args", ".", "loupe_mask", ",", "\n", "use_softplus", "=", "args", ".", "use_softplus", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "num_actions", "=", "args", ".", "crop_size", "[", "1", "]", ",", "\n", "num_sense_lines", "=", "args", ".", "num_sense_lines", ",", "\n", "hard_dc", "=", "args", ".", "hard_dc", ",", "\n", "dc_mode", "=", "args", ".", "dc_mode", ",", "\n", "slope", "=", "args", ".", "slope", ",", "\n", "sparse_dc_gradients", "=", "args", ".", "sparse_dc_gradients", ",", "\n", "straight_through_slope", "=", "args", ".", "straight_through_slope", ",", "\n", "st_clamp", "=", "args", ".", "st_clamp", ",", "\n", "policy_fc_size", "=", "args", ".", "policy_fc_size", ",", "\n", "policy_drop_prob", "=", "args", ".", "policy_drop_prob", ",", "\n", "policy_num_fc_layers", "=", "args", ".", "policy_num_fc_layers", ",", "\n", "policy_activation", "=", "args", ".", "policy_activation", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "VarNetModule", "(", "\n", "num_cascades", "=", "args", ".", "num_cascades", ",", "\n", "pools", "=", "args", ".", "pools", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "sens_pools", "=", "args", ".", "sens_pools", ",", "\n", "sens_chans", "=", "args", ".", "sens_chans", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "num_sense_lines", "=", "args", ".", "num_sense_lines", ",", "\n", "hard_dc", "=", "args", ".", "hard_dc", ",", "\n", "dc_mode", "=", "args", ".", "dc_mode", ",", "\n", "sparse_dc_gradients", "=", "args", ".", "sparse_dc_gradients", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "\n", "args", ",", "num_sanity_val_steps", "=", "0", ",", "callbacks", "=", "[", "WandbLoggerCallback", "(", "args", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ",", "num_sanity_val_steps", "=", "0", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n", "# Finish up wandb groups", "\n", "", "if", "args", ".", "wandb", "and", "args", ".", "accelerator", "==", "\"DDP\"", ":", "\n", "        ", "wandb", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.build_args": [[502, 785], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pl_modules.VarNetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "pathlib.Path", "pytorch_lightning.callbacks.ModelCheckpoint", "pathlib.Path.exists", "pathlib.Path.mkdir", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "sorted", "str", "open", "json.dump", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str", "parser.parse_args.__dict__.items"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "(", "\n", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"varnet\"", "/", "\"vscode_default_dir\"", "\n", ")", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int2none", ",", "\n", "help", "=", "\"Random seed to use. `None` for no seed.\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"adaptive_equispaced_fraction\"", ")", ",", "\n", "default", "=", "\"adaptive_equispaced_fraction\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# Wandb arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wandb\"", ",", "\n", "default", "=", "False", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to use wandb logging.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--project\"", ",", "\n", "default", "=", "\"varmri\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Project name for wandb logging.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wandb_entity\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str2none", ",", "\n", "help", "=", "\"wandb entity to use.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_compressed_coils\"", ",", "\n", "default", "=", "4", ",", "\n", "type", "=", "int2none", ",", "\n", "help", "=", "\"How many coils to use in coil compression..\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--crop_size\"", ",", "\n", "default", "=", "(", "128", ",", "128", ")", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "int2none", ",", "\n", "help", "=", "\"Crop size of images for MiniCoilTransform.\"", ",", "\n", ")", "\n", "\n", "# Active acquisition arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--learn_acquisition\"", ",", "\n", "default", "=", "False", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to do mask design (e.g. LOUPE, Policy) or not.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--budget\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of acquisitions to do when doing active acquisition.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cascades_per_policy\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "(", "\n", "\"How many cascades to do per policy. `num_cascades` must be \"", "\n", "\"a multiple of this + 1 when learning a Policy model. Else \"", "\n", "\"this argument is ignored.\"", "\n", ")", ",", "\n", ")", "\n", "\n", "# LOUPE arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--loupe_mask\"", ",", "\n", "default", "=", "False", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to use LOUPE mask, for non-adaptive acquisition.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use_softplus\"", ",", "\n", "default", "=", "False", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to use softplus or sigmoid in LOUPE and Policy.\"", ",", "\n", ")", "\n", "\n", "# Mask arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip_low_freqs\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether skip low-frequency lines when computing equispaced mask.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_sense_lines\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int2none", ",", "\n", "help", "=", "(", "\n", "\"Number of low-frequency lines to use for computation of sensitivity maps.\"", "\n", "\"Default `None` will compute it automatically from masks. Must be even.\"", "\n", ")", ",", "\n", ")", "\n", "\n", "# DC arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--hard_dc\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to do hard DC layers instead of learned soft DC.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dc_mode\"", ",", "\n", "default", "=", "\"first\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "(", "\n", "\"Whether to do DC before ('first'), after ('last') or simultaneously \"", "\n", "\"('simul') with Refinement step. Default 'first'.\"", "\n", ")", ",", "\n", ")", "\n", "\n", "# Gradient arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--slope\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Slope to use for LOUPE and Policy sigmoid, or beta to use in softplus.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sparse_dc_gradients\"", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "(", "\n", "\"Whether to sparsify the gradients in DC by using torch.where() \"", "\n", "\"with the mask: this essentially removes gradients for the policy \"", "\n", "\"on unsampled rows.\"", "\n", ")", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--straight_through_slope\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Slope to use in Straight Through estimator.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--st_clamp\"", ",", "\n", "default", "=", "False", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to clamp gradients between -1 and 1 in straight through estimator.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--policy_fc_size\"", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Size of intermediate Policy fc-layers.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--policy_drop_prob\"", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Dropout probability of Policy convolutional layers.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--policy_num_fc_layers\"", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of Policy fc-layers.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--policy_activation\"", ",", "\n", "default", "=", "\"leakyrelu\"", ",", "\n", "choices", "=", "[", "\"leakyrelu\"", ",", "\"elu\"", "]", ",", "\n", "help", "=", "\"Activation function to use in between Policy fc-layers.\"", ",", "\n", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"adaptive_equispaced_fraction\"", ",", "# VarNet uses equispaced mask", "\n", "challenge", "=", "\"multicoil\"", ",", "# only multicoil implemented for VarNet", "\n", "batch_size", "=", "1", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", "num_workers", "=", "20", ",", "\n", ")", "\n", "\n", "# module config", "\n", "# NOTE: Should technically also add defaults here for ActiveVarNetModule", "\n", "parser", "=", "VarNetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "num_cascades", "=", "5", ",", "# number of unrolled iterations", "\n", "pools", "=", "4", ",", "# number of pooling layers for U-Net", "\n", "chans", "=", "18", ",", "# number of top-level channels for U-Net", "\n", "sens_pools", "=", "4", ",", "# number of pooling layers for sense est. U-Net", "\n", "sens_chans", "=", "8", ",", "# number of top-level channels for sense est. U-Net", "\n", "lr", "=", "0.001", ",", "# Adam learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "1", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "accelerator", "=", "None", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Save arguments", "\n", "args_dir", "=", "pathlib", ".", "Path", "(", "args", ".", "default_root_dir", ")", "\n", "if", "not", "args_dir", ".", "exists", "(", ")", ":", "\n", "        ", "args_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "", "checkpoint_dir", "=", "args_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "checkpoint_callback", "=", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "filepath", "=", "checkpoint_dir", ",", "\n", "save_top_k", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "monitor", "=", "\"validation_loss\"", ",", "\n", "mode", "=", "\"min\"", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "args_dict", "=", "{", "key", ":", "str", "(", "value", ")", "for", "key", ",", "value", "in", "args", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "args_dir", "/", "\"args_dict.json\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args_dict", ",", "f", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.run_cli": [[787, 799], ["train_adaptive_varnet_demo.build_args", "pathlib.Path().iterdir", "train_adaptive_varnet_demo.cli_main", "pathlib.Path", "fname.unlink", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# Prevent Lightning pre-emption", "\n", "for", "fname", "in", "pathlib", ".", "Path", "(", "args", ".", "default_root_dir", ")", ".", "iterdir", "(", ")", ":", "\n", "        ", "if", "fname", ".", "name", "[", ":", "len", "(", "\"hpc_ckpt\"", ")", "]", "==", "\"hpc_ckpt\"", "and", "fname", ".", "suffix", "==", "\".ckpt\"", ":", "\n", "            ", "fname", ".", "unlink", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "", "", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.EquispacedMaskFractionFunc.__init__": [[69, 91], ["fastmri.data.subsample.MaskFunc.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["\n", "if", "len", "(", "center_fractions", ")", "!=", "len", "(", "accelerations", ")", "and", "not", "allow_any_combination", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of center fractions should match number of accelerations \"", "\n", "\"if allow_any_combination is False.\"", "\n", ")", "\n", "\n", "", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "allow_any_combination", "=", "allow_any_combination", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "", "def", "__call__", "(", "\n", "self", ",", "\n", "shape", ":", "Sequence", "[", "int", "]", ",", "\n", "offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.EquispacedMaskFractionFunc.calculate_acceleration_mask": [[92, 138], ["numpy.zeros", "subsample.EquispacedMaskFractionFunc.rng.randint", "numpy.arange", "numpy.around().astype", "round", "numpy.around", "int"], "methods", ["None"], ["\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_mask", ",", "accel_mask", ",", "num_low_frequencies", "=", "self", ".", "sample_mask", "(", "\n", "shape", ",", "offset", "\n", ")", "\n", "\n", "# combine masks together", "\n", "", "return", "torch", ".", "max", "(", "center_mask", ",", "accel_mask", ")", ",", "num_low_frequencies", "\n", "\n", "", "def", "sample_mask", "(", "\n", "self", ",", "\n", "shape", ":", "Sequence", "[", "int", "]", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Sample a new k-space mask.\n\n        This function samples and returns two components of a k-space mask: 1)\n        the center mask (e.g., for sensitivity map calculation) and 2) the\n        acceleration mask (for the edge of k-space). Both of these masks, as\n        well as the integer of low frequency samples, are returned.\n\n        Args:\n            shape: Shape of the k-space to subsample.\n            offset: Offset from 0 to begin mask (for equispaced masks).\n\n        Returns:\n            A 3-tuple contaiing 1) the mask for the center of k-space, 2) the\n            mask for the high frequencies of k-space, and 3) the integer count\n            of low frequency samples.\n        \"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_low_frequencies", "=", "round", "(", "num_cols", "*", "center_fraction", ")", "\n", "center_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_center_mask", "(", "shape", ",", "num_low_frequencies", ")", ",", "shape", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type": [[15, 44], ["fastmri.data.subsample.RandomMaskFunc", "subsample.EquispacedMaskFractionFunc", "ValueError"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ":", "np", ".", "random", ".", "RandomState", ",", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", ")", ":", "\n", "    ", "\"\"\"A context manager for temporarily adjusting the random seed.\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "pass", "\n", "", "", "else", ":", "\n", "        ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "rng", ".", "set_state", "(", "state", ")", "\n", "\n", "\n", "", "", "", "class", "MaskFunc", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.util.copy_file": [[7, 17], ["dest.is_file", "print", "tempfile.mkstemp", "shutil.copy", "shutil.move", "print"], "function", ["None"], ["def", "copy_file", "(", "src_dest_tuple", ":", "Tuple", "[", "pathlib", ".", "Path", ",", "pathlib", ".", "Path", "]", ")", ":", "\n", "    ", "src", "=", "src_dest_tuple", "[", "0", "]", "\n", "dest", "=", "src_dest_tuple", "[", "1", "]", "\n", "if", "dest", ".", "is_file", "(", ")", ":", "\n", "        ", "print", "(", "f\"Found {dest}, nothing to copy.\"", ")", "\n", "return", "\n", "", "print", "(", "f\"Copy from {src} to {dest}\"", ")", "\n", "temp", ",", "temp_fname", "=", "tempfile", ".", "mkstemp", "(", "dir", "=", "dest", ".", "parent", ")", "\n", "shutil", ".", "copy", "(", "src", ",", "temp_fname", ")", "\n", "shutil", ".", "move", "(", "temp_fname", ",", "dest", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.run_pretrained_unet_inference.download_model": [[31, 49], ["requests.get", "int", "tqdm.tqdm", "tqdm.tqdm.close", "requests.get.headers.get", "open", "requests.get.iter_content", "tqdm.tqdm.update", "fh.write", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write"], ["def", "download_model", "(", "url", ",", "fname", ")", ":", "\n", "    ", "response", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "10", ",", "stream", "=", "True", ")", "\n", "\n", "chunk_size", "=", "1", "*", "1024", "*", "1024", "# 1 MB chunks", "\n", "total_size_in_bytes", "=", "int", "(", "response", ".", "headers", ".", "get", "(", "\"content-length\"", ",", "0", ")", ")", "\n", "progress_bar", "=", "tqdm", "(", "\n", "desc", "=", "\"Downloading state_dict\"", ",", "\n", "total", "=", "total_size_in_bytes", ",", "\n", "unit", "=", "\"iB\"", ",", "\n", "unit_scale", "=", "True", ",", "\n", ")", "\n", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "            ", "progress_bar", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "fh", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.run_pretrained_unet_inference.run_unet_model": [[51, 61], ["model().squeeze().cpu", "mean.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "std.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "int", "model().squeeze", "mean.unsqueeze().unsqueeze.unsqueeze", "std.unsqueeze().unsqueeze.unsqueeze", "model", "image.to().unsqueeze", "image.to"], "function", ["None"], ["", "def", "run_unet_model", "(", "batch", ",", "model", ",", "device", ")", ":", "\n", "    ", "image", ",", "_", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", ",", "_", "=", "batch", "\n", "\n", "output", "=", "model", "(", "image", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "output", "=", "(", "output", "*", "std", "+", "mean", ")", ".", "cpu", "(", ")", "\n", "\n", "return", "output", ",", "int", "(", "slice_num", "[", "0", "]", ")", ",", "fname", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.run_pretrained_unet_inference.run_inference": [[63, 116], ["fastmri.models.Unet", "model.to.load_state_dict", "model.to.eval", "torch.utils.data.DataLoader", "time.perf_counter", "collections.defaultdict", "model.to.to", "tqdm.tqdm", "fastmri.save_reconstructions", "fastmri.save_reconstructions", "time.perf_counter", "print", "torch.load", "fastmri.UnetDataTransform", "fastmri.UnetDataTransform", "fastmri.data.SliceDataset", "fastmri.data.SliceDataset", "outputs[].append", "numpy.stack", "pathlib.Path().exists", "run_pretrained_unet_inference.download_model", "torch.no_grad", "run_pretrained_unet_inference.run_unet_model", "len", "pathlib.Path", "sorted"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.run_pretrained_varnet_inference.download_model", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.run_pretrained_unet_inference.run_unet_model"], ["", "def", "run_inference", "(", "challenge", ",", "state_dict_file", ",", "data_path", ",", "output_path", ",", "device", ")", ":", "\n", "    ", "model", "=", "Unet", "(", "in_chans", "=", "1", ",", "out_chans", "=", "1", ",", "chans", "=", "256", ",", "num_pool_layers", "=", "4", ",", "drop_prob", "=", "0.0", ")", "\n", "# download the state_dict if we don't have it", "\n", "if", "state_dict_file", "is", "None", ":", "\n", "        ", "if", "not", "Path", "(", "MODEL_FNAMES", "[", "challenge", "]", ")", ".", "exists", "(", ")", ":", "\n", "            ", "url_root", "=", "UNET_FOLDER", "\n", "download_model", "(", "url_root", "+", "MODEL_FNAMES", "[", "challenge", "]", ",", "MODEL_FNAMES", "[", "challenge", "]", ")", "\n", "\n", "", "state_dict_file", "=", "MODEL_FNAMES", "[", "challenge", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state_dict_file", ")", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n", "# data loader setup", "\n", "if", "\"_mc\"", "in", "challenge", ":", "\n", "        ", "data_transform", "=", "T", ".", "UnetDataTransform", "(", "which_challenge", "=", "\"multicoil\"", ")", "\n", "", "else", ":", "\n", "        ", "data_transform", "=", "T", ".", "UnetDataTransform", "(", "which_challenge", "=", "\"singlecoil\"", ")", "\n", "\n", "", "if", "\"_mc\"", "in", "challenge", ":", "\n", "        ", "dataset", "=", "SliceDataset", "(", "\n", "root", "=", "data_path", ",", "\n", "transform", "=", "data_transform", ",", "\n", "challenge", "=", "\"multicoil\"", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "SliceDataset", "(", "\n", "root", "=", "data_path", ",", "\n", "transform", "=", "data_transform", ",", "\n", "challenge", "=", "\"singlecoil\"", ",", "\n", ")", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "num_workers", "=", "4", ")", "\n", "\n", "# run the model", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "outputs", "=", "defaultdict", "(", "list", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "desc", "=", "\"Running inference\"", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "slice_num", ",", "fname", "=", "run_unet_model", "(", "batch", ",", "model", ",", "device", ")", "\n", "\n", "", "outputs", "[", "fname", "]", ".", "append", "(", "(", "slice_num", ",", "output", ")", ")", "\n", "\n", "# save outputs", "\n", "", "for", "fname", "in", "outputs", ":", "\n", "        ", "outputs", "[", "fname", "]", "=", "np", ".", "stack", "(", "[", "out", "for", "_", ",", "out", "in", "sorted", "(", "outputs", "[", "fname", "]", ")", "]", ")", "\n", "\n", "", "fastmri", ".", "save_reconstructions", "(", "outputs", ",", "output_path", "/", "\"reconstructions\"", ")", "\n", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "print", "(", "f\"Elapsed time for {len(dataloader)} slices: {end_time-start_time}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.train_unet_demo.cli_main": [[20, 78], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.UnetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "in", "(", "\"ddp\"", ",", "\"ddp_cpu\"", ")", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "UnetModule", "(", "\n", "in_chans", "=", "args", ".", "in_chans", ",", "\n", "out_chans", "=", "args", ".", "out_chans", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.train_unet_demo.build_args": [[80, 179], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.UnetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "pytorch_lightning.callbacks.ModelCheckpoint", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "num_gpus", "=", "2", "\n", "backend", "=", "\"ddp\"", "\n", "batch_size", "=", "1", "if", "backend", "==", "\"ddp\"", "else", "num_gpus", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"unet\"", "/", "\"unet_demo\"", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced_fraction\"", ")", ",", "\n", "default", "=", "\"random\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config with path to fastMRI data and batch size", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "data_path", "=", "data_path", ",", "batch_size", "=", "batch_size", ",", "test_path", "=", "None", ")", "\n", "\n", "# module config", "\n", "parser", "=", "UnetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "in_chans", "=", "1", ",", "# number of input channels to U-Net", "\n", "out_chans", "=", "1", ",", "# number of output chanenls to U-Net", "\n", "chans", "=", "32", ",", "# number of top-level U-Net channels", "\n", "num_pool_layers", "=", "4", ",", "# number of U-Net pooling layers", "\n", "drop_prob", "=", "0.0", ",", "# dropout probability", "\n", "lr", "=", "0.001", ",", "# RMSProp learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight decay regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "strategy", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "callbacks", "=", "[", "\n", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "dirpath", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", ",", "\n", "save_top_k", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "monitor", "=", "\"validation_loss\"", ",", "\n", "mode", "=", "\"min\"", ",", "\n", ")", "\n", "]", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet.train_unet_demo.run_cli": [[181, 188], ["train_unet_demo.build_args", "train_unet_demo.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_knee_sc_leaderboard.cli_main": [[20, 79], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.UnetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "combine_train_val", "=", "True", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "in", "(", "\"ddp\"", ",", "\"ddp_cpu\"", ")", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "UnetModule", "(", "\n", "in_chans", "=", "args", ".", "in_chans", ",", "\n", "out_chans", "=", "args", ".", "out_chans", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_knee_sc_leaderboard.build_args": [[81, 184], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.UnetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "pytorch_lightning.callbacks.ModelCheckpoint", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "backend", "=", "\"ddp\"", "\n", "num_gpus", "=", "32", "\n", "batch_size", "=", "1", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "(", "\n", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"unet\"", "/", "\"knee_sc_leaderboard\"", "\n", ")", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"random\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config with path to fastMRI data and batch size", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"random\"", ",", "# random for knee data", "\n", "challenge", "=", "\"singlecoil\"", ",", "# which challenge", "\n", "batch_size", "=", "batch_size", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "UnetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "in_chans", "=", "1", ",", "# number of input channels to U-Net", "\n", "out_chans", "=", "1", ",", "# number of output chanenls to U-Net", "\n", "chans", "=", "256", ",", "# number of top-level U-Net channels", "\n", "num_pool_layers", "=", "4", ",", "# number of U-Net pooling layers", "\n", "drop_prob", "=", "0.0", ",", "# dropout probability", "\n", "lr", "=", "0.001", ",", "# RMSProp learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight decay regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "accelerator", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "checkpoint_callback", "=", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "filepath", "=", "checkpoint_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_knee_sc_leaderboard.run_cli": [[186, 193], ["unet_knee_sc_leaderboard.build_args", "unet_knee_sc_leaderboard.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_brain_leaderboard.cli_main": [[20, 79], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.UnetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "combine_train_val", "=", "True", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "in", "(", "\"ddp\"", ",", "\"ddp_cpu\"", ")", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "UnetModule", "(", "\n", "in_chans", "=", "args", ".", "in_chans", ",", "\n", "out_chans", "=", "args", ".", "out_chans", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_brain_leaderboard.build_args": [[81, 182], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.UnetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "pytorch_lightning.callbacks.ModelCheckpoint", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "backend", "=", "\"ddp\"", "\n", "num_gpus", "=", "32", "\n", "batch_size", "=", "1", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"brain_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"unet\"", "/", "\"brain_leaderboard\"", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"equispaced\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", ",", "0.04", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", ",", "8", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config with path to fastMRI data and batch size", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"equispaced\"", ",", "# equispaced for brain data", "\n", "challenge", "=", "\"multicoil\"", ",", "# which challenge", "\n", "batch_size", "=", "batch_size", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "UnetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "in_chans", "=", "1", ",", "# number of input channels to U-Net", "\n", "out_chans", "=", "1", ",", "# number of output chanenls to U-Net", "\n", "chans", "=", "256", ",", "# number of top-level U-Net channels", "\n", "num_pool_layers", "=", "4", ",", "# number of U-Net pooling layers", "\n", "drop_prob", "=", "0.0", ",", "# dropout probability", "\n", "lr", "=", "0.001", ",", "# RMSProp learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight decay regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "accelerator", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "checkpoint_callback", "=", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "filepath", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", ",", "\n", "verbose", "=", "True", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_brain_leaderboard.run_cli": [[184, 191], ["unet_brain_leaderboard.build_args", "unet_brain_leaderboard.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_knee_mc_leaderboard.cli_main": [[20, 79], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.data.transforms.UnetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.UnetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ",", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "UnetDataTransform", "(", "args", ".", "challenge", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "combine_train_val", "=", "True", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "in", "(", "\"ddp\"", ",", "\"ddp_cpu\"", ")", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "UnetModule", "(", "\n", "in_chans", "=", "args", ".", "in_chans", ",", "\n", "out_chans", "=", "args", ".", "out_chans", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_knee_mc_leaderboard.build_args": [[81, 184], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.UnetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "pytorch_lightning.callbacks.ModelCheckpoint", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "backend", "=", "\"ddp\"", "\n", "num_gpus", "=", "32", "\n", "batch_size", "=", "1", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "(", "\n", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"unet\"", "/", "\"knee_mc_leaderboard\"", "\n", ")", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"random\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", ",", "0.04", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", ",", "8", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config with path to fastMRI data and batch size", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"random\"", ",", "# random for knee data", "\n", "challenge", "=", "\"multicoil\"", ",", "# which challenge", "\n", "batch_size", "=", "batch_size", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "UnetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "in_chans", "=", "1", ",", "# number of input channels to U-Net", "\n", "out_chans", "=", "1", ",", "# number of output chanenls to U-Net", "\n", "chans", "=", "256", ",", "# number of top-level U-Net channels", "\n", "num_pool_layers", "=", "4", ",", "# number of U-Net pooling layers", "\n", "drop_prob", "=", "0.0", ",", "# dropout probability", "\n", "lr", "=", "0.001", ",", "# RMSProp learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight decay regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "accelerator", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "checkpoint_callback", "=", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "filepath", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", ",", "\n", "verbose", "=", "True", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.unet_reproduce_20201111.py.unet_knee_mc_leaderboard.run_cli": [[186, 193], ["unet_knee_mc_leaderboard.build_args", "unet_knee_mc_leaderboard.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.train_varnet_demo.cli_main": [[20, 78], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.VarNetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "VarNetDataTransform", "(", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "in", "(", "\"ddp\"", ",", "\"ddp_cpu\"", ")", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "VarNetModule", "(", "\n", "num_cascades", "=", "args", ".", "num_cascades", ",", "\n", "pools", "=", "args", ".", "pools", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "sens_pools", "=", "args", ".", "sens_pools", ",", "\n", "sens_chans", "=", "args", ".", "sens_chans", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.train_varnet_demo.build_args": [[80, 185], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.VarNetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "pytorch_lightning.callbacks.ModelCheckpoint", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "backend", "=", "\"ddp\"", "\n", "num_gpus", "=", "2", "if", "backend", "==", "\"ddp\"", "else", "1", "\n", "batch_size", "=", "1", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"varnet\"", "/", "\"varnet_demo\"", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced_fraction\"", ")", ",", "\n", "default", "=", "\"equispaced_fraction\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"equispaced_fraction\"", ",", "# VarNet uses equispaced mask", "\n", "challenge", "=", "\"multicoil\"", ",", "# only multicoil implemented for VarNet", "\n", "batch_size", "=", "batch_size", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "VarNetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "num_cascades", "=", "8", ",", "# number of unrolled iterations", "\n", "pools", "=", "4", ",", "# number of pooling layers for U-Net", "\n", "chans", "=", "18", ",", "# number of top-level channels for U-Net", "\n", "sens_pools", "=", "4", ",", "# number of pooling layers for sense est. U-Net", "\n", "sens_chans", "=", "8", ",", "# number of top-level channels for sense est. U-Net", "\n", "lr", "=", "0.001", ",", "# Adam learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "strategy", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "callbacks", "=", "[", "\n", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "dirpath", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", ",", "\n", "save_top_k", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "monitor", "=", "\"validation_loss\"", ",", "\n", "mode", "=", "\"min\"", ",", "\n", ")", "\n", "]", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.train_varnet_demo.run_cli": [[187, 194], ["train_varnet_demo.build_args", "train_varnet_demo.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.run_pretrained_varnet_inference.download_model": [[30, 46], ["requests.get", "int", "tqdm.tqdm", "requests.get.headers.get", "open", "requests.get.iter_content", "tqdm.tqdm.update", "fh.write", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.metrics.DistributedMetricSum.update", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.logging_mixin.LoggerWriter.write"], ["def", "download_model", "(", "url", ",", "fname", ")", ":", "\n", "    ", "response", "=", "requests", ".", "get", "(", "url", ",", "timeout", "=", "10", ",", "stream", "=", "True", ")", "\n", "\n", "chunk_size", "=", "8", "*", "1024", "*", "1024", "# 8 MB chunks", "\n", "total_size_in_bytes", "=", "int", "(", "response", ".", "headers", ".", "get", "(", "\"content-length\"", ",", "0", ")", ")", "\n", "progress_bar", "=", "tqdm", "(", "\n", "desc", "=", "\"Downloading state_dict\"", ",", "\n", "total", "=", "total_size_in_bytes", ",", "\n", "unit", "=", "\"iB\"", ",", "\n", "unit_scale", "=", "True", ",", "\n", ")", "\n", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "            ", "progress_bar", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "fh", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.run_pretrained_varnet_inference.run_varnet_model": [[48, 60], ["model().cpu", "fastmri.center_crop", "int", "model", "batch.masked_kspace.to", "batch.mask.to"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], ["", "", "", "def", "run_varnet_model", "(", "batch", ",", "model", ",", "device", ")", ":", "\n", "    ", "crop_size", "=", "batch", ".", "crop_size", "\n", "\n", "output", "=", "model", "(", "batch", ".", "masked_kspace", ".", "to", "(", "device", ")", ",", "batch", ".", "mask", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", "\n", "\n", "# detect FLAIR 203", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "        ", "crop_size", "=", "(", "output", ".", "shape", "[", "-", "1", "]", ",", "output", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "output", "=", "T", ".", "center_crop", "(", "output", ",", "crop_size", ")", "[", "0", "]", "\n", "\n", "return", "output", ",", "int", "(", "batch", ".", "slice_num", "[", "0", "]", ")", ",", "batch", ".", "fname", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.run_pretrained_varnet_inference.run_inference": [[62, 102], ["fastmri.models.VarNet", "model.to.load_state_dict", "model.to.eval", "fastmri.VarNetDataTransform", "fastmri.data.SliceDataset", "torch.utils.data.DataLoader", "time.perf_counter", "collections.defaultdict", "model.to.to", "tqdm.tqdm", "fastmri.save_reconstructions", "fastmri.save_reconstructions", "time.perf_counter", "print", "torch.load", "outputs[].append", "numpy.stack", "pathlib.Path().exists", "run_pretrained_varnet_inference.download_model", "torch.no_grad", "run_pretrained_varnet_inference.run_varnet_model", "len", "pathlib.Path", "sorted"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.run_pretrained_varnet_inference.download_model", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet.run_pretrained_varnet_inference.run_varnet_model"], ["", "def", "run_inference", "(", "challenge", ",", "state_dict_file", ",", "data_path", ",", "output_path", ",", "device", ")", ":", "\n", "    ", "model", "=", "VarNet", "(", "num_cascades", "=", "12", ",", "pools", "=", "4", ",", "chans", "=", "18", ",", "sens_pools", "=", "4", ",", "sens_chans", "=", "8", ")", "\n", "# download the state_dict if we don't have it", "\n", "if", "state_dict_file", "is", "None", ":", "\n", "        ", "if", "not", "Path", "(", "MODEL_FNAMES", "[", "challenge", "]", ")", ".", "exists", "(", ")", ":", "\n", "            ", "url_root", "=", "VARNET_FOLDER", "\n", "download_model", "(", "url_root", "+", "MODEL_FNAMES", "[", "challenge", "]", ",", "MODEL_FNAMES", "[", "challenge", "]", ")", "\n", "\n", "", "state_dict_file", "=", "MODEL_FNAMES", "[", "challenge", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state_dict_file", ")", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n", "# data loader setup", "\n", "data_transform", "=", "T", ".", "VarNetDataTransform", "(", ")", "\n", "dataset", "=", "SliceDataset", "(", "\n", "root", "=", "data_path", ",", "transform", "=", "data_transform", ",", "challenge", "=", "\"multicoil\"", "\n", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "num_workers", "=", "4", ")", "\n", "\n", "# run the model", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "outputs", "=", "defaultdict", "(", "list", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "desc", "=", "\"Running inference\"", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ",", "slice_num", ",", "fname", "=", "run_varnet_model", "(", "batch", ",", "model", ",", "device", ")", "\n", "\n", "", "outputs", "[", "fname", "]", ".", "append", "(", "(", "slice_num", ",", "output", ")", ")", "\n", "\n", "# save outputs", "\n", "", "for", "fname", "in", "outputs", ":", "\n", "        ", "outputs", "[", "fname", "]", "=", "np", ".", "stack", "(", "[", "out", "for", "_", ",", "out", "in", "sorted", "(", "outputs", "[", "fname", "]", ")", "]", ")", "\n", "\n", "", "fastmri", ".", "save_reconstructions", "(", "outputs", ",", "output_path", "/", "\"reconstructions\"", ")", "\n", "\n", "end_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "print", "(", "f\"Elapsed time for {len(dataloader)} slices: {end_time-start_time}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_knee_leaderboard.cli_main": [[20, 79], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.VarNetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "VarNetDataTransform", "(", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "combine_train_val", "=", "True", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "==", "\"ddp\"", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "VarNetModule", "(", "\n", "num_cascades", "=", "args", ".", "num_cascades", ",", "\n", "pools", "=", "args", ".", "pools", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "sens_pools", "=", "args", ".", "sens_pools", ",", "\n", "sens_chans", "=", "args", ".", "sens_chans", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_knee_leaderboard.build_args": [[81, 184], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.VarNetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "pytorch_lightning.callbacks.ModelCheckpoint", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "backend", "=", "\"ddp\"", "\n", "num_gpus", "=", "32", "\n", "batch_size", "=", "1", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"knee_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "(", "\n", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"varnet\"", "/", "\"knee_leaderboard\"", "\n", ")", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"equispaced\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", ",", "0.04", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", ",", "8", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"random\"", ",", "# VarNet uses equispaced mask", "\n", "challenge", "=", "\"multicoil\"", ",", "# only multicoil implemented for VarNet", "\n", "batch_size", "=", "batch_size", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "VarNetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "num_cascades", "=", "12", ",", "# number of unrolled iterations", "\n", "pools", "=", "4", ",", "# number of pooling layers for U-Net", "\n", "chans", "=", "18", ",", "# number of top-level channels for U-Net", "\n", "sens_pools", "=", "4", ",", "# number of pooling layers for sense est. U-Net", "\n", "sens_chans", "=", "8", ",", "# number of top-level channels for sense est. U-Net", "\n", "lr", "=", "0.0003", ",", "# Adam learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "accelerator", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "checkpoint_callback", "=", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "filepath", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", ",", "\n", "verbose", "=", "True", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_knee_leaderboard.run_cli": [[186, 193], ["varnet_knee_leaderboard.build_args", "varnet_knee_leaderboard.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main": [[20, 79], ["pytorch_lightning.seed_everything", "fastmri.data.subsample.create_mask_for_mask_type", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.data.transforms.VarNetDataTransform", "fastmri.pl_modules.FastMriDataModule", "fastmri.pl_modules.VarNetModule", "pytorch_lightning.Trainer.from_argparse_args", "pl.Trainer.from_argparse_args.fit", "pl.Trainer.from_argparse_args.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.subsample.create_mask_for_mask_type"], ["def", "cli_main", "(", "args", ")", ":", "\n", "    ", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# ------------", "\n", "# data", "\n", "# ------------", "\n", "# this creates a k-space mask for transforming input data", "\n", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "mask_type", ",", "args", ".", "center_fractions", ",", "args", ".", "accelerations", "\n", ")", "\n", "# use random masks for train transform, fixed masks for val transform", "\n", "train_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ",", "use_seed", "=", "False", ")", "\n", "val_transform", "=", "VarNetDataTransform", "(", "mask_func", "=", "mask", ")", "\n", "test_transform", "=", "VarNetDataTransform", "(", ")", "\n", "# ptl data module - this handles data loaders", "\n", "data_module", "=", "FastMriDataModule", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "challenge", "=", "args", ".", "challenge", ",", "\n", "train_transform", "=", "train_transform", ",", "\n", "val_transform", "=", "val_transform", ",", "\n", "test_transform", "=", "test_transform", ",", "\n", "combine_train_val", "=", "True", ",", "\n", "test_split", "=", "args", ".", "test_split", ",", "\n", "test_path", "=", "args", ".", "test_path", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed_sampler", "=", "(", "args", ".", "accelerator", "==", "\"ddp\"", ")", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# model", "\n", "# ------------", "\n", "model", "=", "VarNetModule", "(", "\n", "num_cascades", "=", "args", ".", "num_cascades", ",", "\n", "pools", "=", "args", ".", "pools", ",", "\n", "chans", "=", "args", ".", "chans", ",", "\n", "sens_pools", "=", "args", ".", "sens_pools", ",", "\n", "sens_chans", "=", "args", ".", "sens_chans", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "lr_step_size", "=", "args", ".", "lr_step_size", ",", "\n", "lr_gamma", "=", "args", ".", "lr_gamma", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# ------------", "\n", "# trainer", "\n", "# ------------", "\n", "trainer", "=", "pl", ".", "Trainer", ".", "from_argparse_args", "(", "args", ")", "\n", "\n", "# ------------", "\n", "# run", "\n", "# ------------", "\n", "if", "args", ".", "mode", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "trainer", ".", "test", "(", "model", ",", "datamodule", "=", "data_module", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"unrecognized mode {args.mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args": [[81, 184], ["argparse.ArgumentParser", "pathlib.Path", "fastmri.data.mri_data.fetch_dir", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "pl.Trainer.add_argparse_args.add_argument", "fastmri.pl_modules.FastMriDataModule.add_data_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "fastmri.pl_modules.VarNetModule.add_model_specific_args", "pl.Trainer.add_argparse_args.set_defaults", "pytorch_lightning.Trainer.add_argparse_args", "pl.Trainer.add_argparse_args.set_defaults", "pl.Trainer.add_argparse_args.parse_args", "pytorch_lightning.callbacks.ModelCheckpoint", "checkpoint_dir.exists", "checkpoint_dir.mkdir", "sorted", "fastmri.data.mri_data.fetch_dir", "checkpoint_dir.glob", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.data_module.FastMriDataModule.add_data_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.pl_modules.adaptive_varnet_module.AdaptiveVarNetModule.add_model_specific_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.args.Args.parse_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.mri_data.fetch_dir"], ["", "", "def", "build_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "# basic args", "\n", "path_config", "=", "pathlib", ".", "Path", "(", "\"../../fastmri_dirs.yaml\"", ")", "\n", "backend", "=", "\"ddp\"", "\n", "num_gpus", "=", "32", "\n", "batch_size", "=", "1", "\n", "\n", "# set defaults based on optional directory config", "\n", "data_path", "=", "fetch_dir", "(", "\"brain_path\"", ",", "path_config", ")", "\n", "default_root_dir", "=", "(", "\n", "fetch_dir", "(", "\"log_path\"", ",", "path_config", ")", "/", "\"varnet\"", "/", "\"brain_leaderboard\"", "\n", ")", "\n", "\n", "# client arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mode\"", ",", "\n", "default", "=", "\"train\"", ",", "\n", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Operation mode\"", ",", "\n", ")", "\n", "\n", "# data transform params", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "\n", "choices", "=", "(", "\"random\"", ",", "\"equispaced\"", ")", ",", "\n", "default", "=", "\"equispaced\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Type of k-space mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--center_fractions\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "0.08", ",", "0.04", "]", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Number of center lines to use in mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--accelerations\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "4", ",", "8", "]", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Acceleration rates to use for masks\"", ",", "\n", ")", "\n", "\n", "# data config", "\n", "parser", "=", "FastMriDataModule", ".", "add_data_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "data_path", "=", "data_path", ",", "# path to fastMRI data", "\n", "mask_type", "=", "\"equispaced\"", ",", "# VarNet uses equispaced mask", "\n", "challenge", "=", "\"multicoil\"", ",", "# only multicoil implemented for VarNet", "\n", "batch_size", "=", "batch_size", ",", "# number of samples per batch", "\n", "test_path", "=", "None", ",", "# path for test split, overwrites data_path", "\n", ")", "\n", "\n", "# module config", "\n", "parser", "=", "VarNetModule", ".", "add_model_specific_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "num_cascades", "=", "12", ",", "# number of unrolled iterations", "\n", "pools", "=", "4", ",", "# number of pooling layers for U-Net", "\n", "chans", "=", "18", ",", "# number of top-level channels for U-Net", "\n", "sens_pools", "=", "4", ",", "# number of pooling layers for sense est. U-Net", "\n", "sens_chans", "=", "8", ",", "# number of top-level channels for sense est. U-Net", "\n", "lr", "=", "0.0003", ",", "# Adam learning rate", "\n", "lr_step_size", "=", "40", ",", "# epoch at which to decrease learning rate", "\n", "lr_gamma", "=", "0.1", ",", "# extent to which to decrease learning rate", "\n", "weight_decay", "=", "0.0", ",", "# weight regularization strength", "\n", ")", "\n", "\n", "# trainer config", "\n", "parser", "=", "pl", ".", "Trainer", ".", "add_argparse_args", "(", "parser", ")", "\n", "parser", ".", "set_defaults", "(", "\n", "gpus", "=", "num_gpus", ",", "# number of gpus to use", "\n", "replace_sampler_ddp", "=", "False", ",", "# this is necessary for volume dispatch during val", "\n", "accelerator", "=", "backend", ",", "# what distributed version to use", "\n", "seed", "=", "42", ",", "# random seed", "\n", "deterministic", "=", "True", ",", "# makes things slower, but deterministic", "\n", "default_root_dir", "=", "default_root_dir", ",", "# directory for logs and checkpoints", "\n", "max_epochs", "=", "50", ",", "# max number of epochs", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# configure checkpointing in checkpoint_dir", "\n", "checkpoint_dir", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", "\n", "if", "not", "checkpoint_dir", ".", "exists", "(", ")", ":", "\n", "        ", "checkpoint_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "args", ".", "checkpoint_callback", "=", "pl", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "filepath", "=", "args", ".", "default_root_dir", "/", "\"checkpoints\"", ",", "\n", "verbose", "=", "True", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", "\n", "\n", "# set default checkpoint if one exists in our checkpoint directory", "\n", "if", "args", ".", "resume_from_checkpoint", "is", "None", ":", "\n", "        ", "ckpt_list", "=", "sorted", "(", "checkpoint_dir", ".", "glob", "(", "\"*.ckpt\"", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "ckpt_list", ":", "\n", "            ", "args", ".", "resume_from_checkpoint", "=", "str", "(", "ckpt_list", "[", "-", "1", "]", ")", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.run_cli": [[186, 193], ["varnet_brain_leaderboard.build_args", "varnet_brain_leaderboard.cli_main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.build_args", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.varnet_reproduce_20201111.varnet_brain_leaderboard.cli_main"], ["", "def", "run_cli", "(", ")", ":", "\n", "    ", "args", "=", "build_args", "(", ")", "\n", "\n", "# ---------------------", "\n", "# RUN TRAINING", "\n", "# ---------------------", "\n", "cli_main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.DataTransform.__init__": [[32, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "split", ",", "reg_wt", "=", "None", ",", "mask_func", "=", "None", ",", "use_seed", "=", "True", ")", ":", "\n", "        ", "if", "split", "in", "(", "\"train\"", ",", "\"val\"", ")", ":", "\n", "            ", "self", ".", "retrieve_acc", "=", "False", "\n", "self", ".", "mask_func", "=", "mask_func", "\n", "", "else", ":", "\n", "            ", "self", ".", "retrieve_acc", "=", "True", "\n", "self", ".", "mask_func", "=", "None", "\n", "\n", "", "self", ".", "reg_wt", "=", "reg_wt", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.DataTransform.__call__": [[43, 103], ["fastmri.data.transforms.to_tensor", "fastmri.data.transforms.apply_mask", "tuple", "open", "yaml.safe_load", "ValueError", "ValueError", "map"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice_num", ")", ":", "\n", "        ", "\"\"\"\n        Data Transformer that simply returns the input masked k-space data and\n        relevant attributes needed for running MRI reconstruction algorithms\n        implemented in BART.\n\n        Args:\n            masked_kspace (numpy.array): Input k-space of shape (num_coils, rows,\n                cols, 2) for multi-coil data or (rows, cols, 2) for single coil\n                data.\n            target (numpy.array, optional): Target image.\n            attrs (dict): Acquisition related information stored in the HDF5\n                object.\n            fname (str): File name.\n            slice_num (int): Serial number of the slice.\n\n        Returns:\n            tuple: tuple containing:\n                masked_kspace (torch.Tensor): Sub-sampled k-space with the same\n                    shape as kspace.\n                reg_wt (float): Regularization parameter.\n                fname (str): File name containing the current data item.\n                slice_num (int): The index of the current slice in the volume.\n                crop_size (tuple): Size of the image to crop to given ISMRMRD\n                    header.\n                num_low_freqs (int): Number of low-resolution lines acquired.\n        \"\"\"", "\n", "kspace", "=", "T", ".", "to_tensor", "(", "kspace", ")", "\n", "\n", "# apply mask", "\n", "if", "self", ".", "mask_func", ":", "\n", "            ", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "masked_kspace", ",", "mask", "=", "T", ".", "apply_mask", "(", "kspace", ",", "self", ".", "mask_func", ",", "seed", ")", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace", "\n", "\n", "", "if", "self", ".", "retrieve_acc", ":", "\n", "            ", "num_low_freqs", "=", "attrs", "[", "\"num_low_frequency\"", "]", "\n", "", "else", ":", "\n", "            ", "num_low_freqs", "=", "None", "\n", "\n", "", "if", "self", ".", "retrieve_acc", "and", "self", ".", "reg_wt", "is", "None", ":", "\n", "            ", "acquisition", "=", "attrs", "[", "\"acquisition\"", "]", "\n", "acceleration", "=", "attrs", "[", "\"acceleration\"", "]", "\n", "\n", "with", "open", "(", "\"cs_config.yaml\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "param_dict", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "if", "acquisition", "not", "in", "param_dict", "[", "args", ".", "challenge", "]", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Invalid acquisition protocol: {acquisition}\"", ")", "\n", "", "if", "acceleration", "not", "in", "(", "4", ",", "8", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Invalid acceleration factor: {acceleration}\"", ")", "\n", "\n", "", "reg_wt", "=", "param_dict", "[", "args", ".", "challenge", "]", "[", "acquisition", "]", "[", "acceleration", "]", "\n", "", "else", ":", "\n", "            ", "reg_wt", "=", "self", ".", "reg_wt", "\n", "\n", "", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "return", "(", "masked_kspace", ",", "reg_wt", ",", "fname", ",", "slice_num", ",", "crop_size", ",", "num_low_freqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.cs_total_variation": [[105, 141], ["kspace.unsqueeze.permute().unsqueeze", "fastmri.tensor_to_complex_np", "bart.bart", "torch.from_numpy", "fastmri.data.transforms.center_crop", "kspace.unsqueeze.unsqueeze", "bart.bart", "bart.bart", "numpy.abs", "kspace.unsqueeze.permute"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.center_crop"], ["", "", "def", "cs_total_variation", "(", "args", ",", "kspace", ",", "reg_wt", ",", "crop_size", ",", "num_low_freqs", ")", ":", "\n", "    ", "\"\"\"\n    Run ESPIRIT coil sensitivity estimation and Total Variation Minimization\n    based reconstruction algorithm using the BART toolkit.\n\n    Args:\n        args (argparse.Namespace): Arguments including ESPIRiT parameters.\n        reg_wt (float): Regularization parameter.\n        crop_size (tuple): Size to crop final image to.\n\n    Returns:\n        np.array: Reconstructed image.\n    \"\"\"", "\n", "if", "args", ".", "challenge", "==", "\"singlecoil\"", ":", "\n", "        ", "kspace", "=", "kspace", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "kspace", "=", "kspace", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kspace", "=", "tensor_to_complex_np", "(", "kspace", ")", "\n", "\n", "# estimate sensitivity maps", "\n", "if", "num_low_freqs", "is", "None", ":", "\n", "        ", "sens_maps", "=", "bart", ".", "bart", "(", "1", ",", "\"ecalib -d0 -m1\"", ",", "kspace", ")", "\n", "", "else", ":", "\n", "        ", "sens_maps", "=", "bart", ".", "bart", "(", "1", ",", "f\"ecalib -d0 -m1 -r {num_low_freqs}\"", ",", "kspace", ")", "\n", "\n", "# use Total Variation Minimization to reconstruct the image", "\n", "", "pred", "=", "bart", ".", "bart", "(", "\n", "1", ",", "f\"pics -d0 -S -R T:7:0:{reg_wt} -i {args.num_iters}\"", ",", "kspace", ",", "sens_maps", "\n", ")", "\n", "pred", "=", "torch", ".", "from_numpy", "(", "np", ".", "abs", "(", "pred", "[", "0", "]", ")", ")", "\n", "\n", "# check for FLAIR 203", "\n", "if", "pred", ".", "shape", "[", "1", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "        ", "crop_size", "=", "(", "pred", ".", "shape", "[", "1", "]", ",", "pred", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "return", "T", ".", "center_crop", "(", "pred", ",", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.save_outputs": [[143, 156], ["collections.defaultdict", "fastmri.save_reconstructions", "reconstructions[].append", "numpy.stack", "collections.defaultdict.items", "sorted"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions"], ["", "def", "save_outputs", "(", "outputs", ",", "output_path", ")", ":", "\n", "    ", "\"\"\"Saves reconstruction outputs to output_path.\"\"\"", "\n", "reconstructions", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "fname", ",", "slice_num", ",", "pred", "in", "outputs", ":", "\n", "        ", "reconstructions", "[", "fname", "]", ".", "append", "(", "(", "slice_num", ",", "pred", ")", ")", "\n", "\n", "", "reconstructions", "=", "{", "\n", "fname", ":", "np", ".", "stack", "(", "[", "pred", "for", "_", ",", "pred", "in", "sorted", "(", "slice_preds", ")", "]", ")", "\n", "for", "fname", ",", "slice_preds", "in", "reconstructions", ".", "items", "(", ")", "\n", "}", "\n", "\n", "fastmri", ".", "save_reconstructions", "(", "reconstructions", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.run_model": [[158, 178], ["run_bart.cs_total_variation"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.cs_total_variation"], ["", "def", "run_model", "(", "idx", ")", ":", "\n", "    ", "\"\"\"\n    Run BART on idx index from dataset.\n\n    Args:\n        idx (int): The index of the dataset.\n\n    Returns:\n        tuple: tuple with\n            fname: Filename\n            slice_num: Slice number.\n            prediction: Reconstructed image.\n    \"\"\"", "\n", "masked_kspace", ",", "reg_wt", ",", "fname", ",", "slice_num", ",", "crop_size", ",", "num_low_freqs", "=", "dataset", "[", "idx", "]", "\n", "\n", "prediction", "=", "cs_total_variation", "(", "\n", "args", ",", "masked_kspace", ",", "reg_wt", ",", "crop_size", ",", "num_low_freqs", "\n", ")", "\n", "\n", "return", "fname", ",", "slice_num", ",", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.run_bart": [[180, 196], ["logging.info", "run_bart.save_outputs", "time.perf_counter", "range", "len", "pool.map.append", "time.perf_counter", "multiprocessing.Pool", "time.perf_counter", "pool.map", "run_bart.run_model", "range", "time.perf_counter", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.save_outputs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.run_model"], ["", "def", "run_bart", "(", "args", ")", ":", "\n", "    ", "\"\"\"Run the BART reconstruction on the given data set.\"\"\"", "\n", "if", "args", ".", "num_procs", "==", "0", ":", "\n", "        ", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "run_model", "(", "i", ")", ")", "\n", "", "time_taken", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "", "else", ":", "\n", "        ", "with", "multiprocessing", ".", "Pool", "(", "args", ".", "num_procs", ")", "as", "pool", ":", "\n", "            ", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "outputs", "=", "pool", ".", "map", "(", "run_model", ",", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "time_taken", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "\n", "", "", "logging", ".", "info", "(", "f\"Run Time = {time_taken:} s\"", ")", "\n", "save_outputs", "(", "outputs", ",", "args", ".", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.cs.run_bart.create_arg_parser": [[198, 255], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_path\"", ",", "\n", "type", "=", "pathlib", ".", "Path", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Path to the data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_path\"", ",", "\n", "type", "=", "pathlib", ".", "Path", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Path to save the reconstructions to\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--challenge\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Which challenge\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sample_rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"Percent of data to run\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mask_type\"", ",", "choices", "=", "[", "\"random\"", ",", "\"equispaced\"", "]", ",", "default", "=", "\"random\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--split\"", ",", "\n", "choices", "=", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"challenge\"", "]", ",", "\n", "default", "=", "\"val\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--accelerations\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "4", "]", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--center_fractions\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "0.08", "]", ",", "type", "=", "float", ")", "\n", "\n", "# bart args", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_iters\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "200", ",", "\n", "help", "=", "\"Number of iterations to run the reconstruction algorithm\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--reg_wt\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"Regularization weight parameter\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_procs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"Number of processes. Set to 0 to disable multiprocessing.\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Abs.forward": [[63, 65], ["fastmri.data.transforms.complex_abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "T", ".", "complex_abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.MaskCenter.forward": [[73, 80], ["x.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "fastmri.data.transforms.mask_center"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.mask_center"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "s", "=", "x", ".", "size", "(", "2", ")", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "j", "in", "range", "(", "s", ")", ":", "\n", "            ", "lf", "=", "input", "[", "'num_lf'", "]", "[", "j", "]", "\n", "mask", "[", ":", ",", ":", ",", "j", ",", "...", "]", "=", "T", ".", "mask_center", "(", "x", "[", ":", ",", ":", ",", "j", ",", "...", "]", ",", "lf", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.RSS.forward": [[82, 84], ["fastmri.data.transforms.root_sum_of_squares_complex"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares_complex"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "T", ".", "root_sum_of_squares_complex", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.dRSS.forward": [[86, 88], ["fastmri.data.transforms.root_sum_of_squares_complex().unsqueeze().unsqueeze", "fastmri.data.transforms.root_sum_of_squares_complex().unsqueeze", "fastmri.data.transforms.root_sum_of_squares_complex"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares_complex"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "T", ".", "root_sum_of_squares_complex", "(", "x", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Fm2Batch.__init__": [[90, 93], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Fm2Batch.forward": [[94, 104], ["x.view.view.contiguous().view", "merge_multi_slice().unsqueeze().contiguous", "var_net.Fm2Batch.model", "unmerge_multi_slice().contiguous", "x.view.view.view", "x.view.view.contiguous", "merge_multi_slice().unsqueeze", "var_net.unmerge_multi_slice", "var_net.merge_multi_slice"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.unmerge_multi_slice", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.merge_multi_slice"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "*", "other", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "c", ",", "1", ",", "*", "other", ")", "\n", "x", "=", "merge_multi_slice", "(", "x", ",", "cat_dim", "=", "-", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "unmerge_multi_slice", "(", "x", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "bc", ",", "one", ",", "*", "other", "=", "x", ".", "shape", "\n", "c", "=", "bc", "//", "b", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "*", "other", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Complex2Fm.forward": [[106, 110], ["x.permute().contiguous().view", "x.permute().contiguous", "x.permute"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "s", ",", "h", ",", "w", ",", "two", "=", "x", ".", "shape", "\n", "assert", "two", "==", "2", "\n", "return", "x", ".", "permute", "(", "0", ",", "5", ",", "1", ",", "2", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "2", "*", "c", "*", "s", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Fm2Complex.forward": [[112, 118], ["var_net.get_num_slices", "x.view().permute", "x.view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.get_num_slices"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "get_num_slices", "(", ")", "\n", "b", ",", "cs2", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "assert", "cs2", "%", "(", "2", "*", "s", ")", "==", "0", "\n", "c", "=", "cs2", "//", "(", "2", "*", "s", ")", "\n", "return", "x", ".", "view", "(", "b", ",", "2", ",", "c", ",", "s", ",", "h", ",", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "5", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Polar.forward": [[120, 124], ["complex_abs2().sqrt", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "complex_abs2"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r", "=", "complex_abs2", "(", "x", ")", ".", "sqrt", "(", ")", "\n", "phi", "=", "torch", ".", "atan2", "(", "x", "[", "...", ",", "1", "]", ",", "x", "[", "...", ",", "0", "]", ")", "\n", "return", "torch", ".", "stack", "(", "(", "r", ",", "phi", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Cartesian.forward": [[126, 129], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r", ",", "phi", "=", "x", "[", "...", ",", "0", "]", ",", "x", "[", "...", ",", "1", "]", "\n", "return", "torch", ".", "stack", "(", "(", "r", "*", "torch", ".", "cos", "(", "phi", ")", ",", "r", "*", "torch", ".", "sin", "(", "phi", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.FT.forward": [[131, 138], ["fastmri.data.transforms.fft2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "        ", "y", "=", "T", ".", "fft2", "(", "x", ")", "\n", "# if torch.any(torch.isnan(y)):", "\n", "#     pdb.set_trace()", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.IFT.forward": [[140, 147], ["fastmri.data.transforms.ifft2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "        ", "y", "=", "T", ".", "ifft2", "(", "x", ")", "\n", "# if torch.any(torch.isnan(y)):", "\n", "#     pdb.set_trace()", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Pop.__init__": [[152, 155], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "method", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "method", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Norm.__init__": [[157, 160], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Norm.forward": [[161, 163], ["var_net.norm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "norm", "(", "x", ",", "self", ".", "model", ",", "args", ".", "norm_type", ",", "args", ".", "norm_mean", ",", "args", ".", "norm_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.DC.forward": [[192, 194], ["var_net.dc"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.dc"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "return", "dc", "(", "x", ",", "input", "[", "'mask'", "]", ",", "input", "[", "'kspace'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SensExpand.forward": [[199, 201], ["var_net.sens_expand"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_expand"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "return", "sens_expand", "(", "x", ",", "input", "[", "'sens_maps'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SensReduce.forward": [[206, 208], ["var_net.sens_reduce"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "return", "sens_reduce", "(", "x", ",", "input", "[", "'sens_maps'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.GRAPPA.__init__": [[218, 221], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "acceleration", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "acceleration", "=", "acceleration", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.GRAPPA.forward": [[222, 224], ["fastmri.data.transforms.apply_grappa", "input[].float"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_grappa"], ["", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "return", "T", ".", "apply_grappa", "(", "x", ",", "input", "[", "f'grappa_{self.acceleration}'", "]", ",", "input", "[", "'kspace'", "]", ",", "input", "[", "'mask'", "]", ".", "float", "(", ")", ",", "sample_accel", "=", "self", ".", "acceleration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SequentialPlus.forward": [[226, 254], ["len", "enumerate", "isinstance", "input[].clone", "var_net.SequentialPlus._modules.values", "var_net.SequentialPlus._modules.values", "isinstance", "stack.append", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module", "module.requires_grad_", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "module", "stack.pop", "stack.pop"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "stack", "=", "[", "]", "\n", "x", "=", "input", "[", "'kspace'", "]", ".", "clone", "(", ")", "if", "isinstance", "(", "input", ",", "dict", ")", "else", "input", "\n", "\n", "nmodules", "=", "len", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "\n", "for", "module_idx", ",", "module", "in", "enumerate", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", ":", "\n", "            ", "last_module_flag", "=", "module_idx", "==", "nmodules", "-", "1", "\n", "\n", "if", "isinstance", "(", "module", ",", "Push", ")", ":", "\n", "                ", "stack", ".", "append", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "Pop", ")", ":", "\n", "                ", "if", "module", ".", "method", "==", "'concat'", ":", "\n", "                    ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "stack", ".", "pop", "(", ")", ")", ",", "1", ")", "\n", "", "elif", "module", ".", "method", "==", "'add'", ":", "\n", "                    ", "x", "=", "x", "+", "stack", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "(", "DC", ",", "SensExpand", ",", "SensReduce", ",", "SoftDC", ",", "GRAPPA", ",", "MaskCenter", ")", ")", ":", "\n", "                    ", "x", "=", "module", "(", "x", ",", "input", ")", "\n", "", "else", ":", "\n", "                    ", "if", "args", ".", "gradient_checkpointing", "and", "not", "last_module_flag", ":", "\n", "                        ", "x", ".", "requires_grad_", "(", ")", "\n", "x", "=", "checkpoint", "(", "module", ",", "x", ")", "\n", "", "else", ":", "\n", "                        ", "x", "=", "module", "(", "x", ")", "\n", "", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Pad.__init__": [[256, 259], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.Pad.forward": [[260, 262], ["var_net.pad16"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.pad16"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "pad16", "(", "x", ",", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.CombineSlices.__init__": [[303, 306], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "slice_dim", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slice_dim", "=", "slice_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.CombineSlices.forward": [[307, 309], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "index_select", "(", "x", ",", "dim", "=", "self", ".", "slice_dim", ",", "index", "=", "torch", ".", "tensor", "(", "0", ",", "device", "=", "x", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.__init__": [[320, 329], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "var_net.SoftDC.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "space", "=", "'k-space'", ",", "mode", "=", "'parallel'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "space", "in", "{", "'img-space'", ",", "'k-space'", "}", "\n", "assert", "mode", "in", "{", "'parallel'", ",", "'sequential'", "}", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "lambda_", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "'zero'", ",", "torch", ".", "zeros", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.soft_dc": [[330, 343], ["torch.where", "torch.where", "torch.where", "torch.where", "fastmri.data.transforms.fft2", "var_net.sens_reduce", "var_net.sens_expand", "fastmri.data.transforms.ifft2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_expand", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2"], ["", "def", "soft_dc", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "        ", "if", "self", ".", "space", "==", "'img-space'", ":", "\n", "            ", "x", "=", "T", ".", "fft2", "(", "sens_expand", "(", "x", ",", "input", "[", "'sens_maps'", "]", ")", ")", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "", "x", "=", "torch", ".", "where", "(", "input", "[", "'mask'", "]", ",", "x", "-", "input", "[", "'kspace'", "]", ",", "self", ".", "zero", ")", "\n", "if", "self", ".", "space", "==", "'img-space'", ":", "\n", "            ", "x", "=", "sens_reduce", "(", "T", ".", "ifft2", "(", "x", ")", ",", "input", "[", "'sens_maps'", "]", ")", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "", "return", "self", ".", "lambda_", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.net_forward": [[344, 363], ["merge_multi_slice().unsqueeze().contiguous", "var_net.SoftDC.net", "unmerge_multi_slice().contiguous", "var_net.sens_reduce", "fastmri.data.transforms.fft2", "fastmri.data.transforms.ifft2", "merge_multi_slice().unsqueeze", "var_net.unmerge_multi_slice", "var_net.sens_expand", "var_net.merge_multi_slice"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.unmerge_multi_slice", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_expand", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.merge_multi_slice"], ["", "def", "net_forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "xinitial", "=", "x", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "if", "self", ".", "space", "==", "'k-space'", ":", "\n", "            ", "x", "=", "sens_reduce", "(", "T", ".", "ifft2", "(", "x", ")", ",", "input", "[", "'sens_maps'", "]", ")", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "", "x", "=", "merge_multi_slice", "(", "x", ",", "cat_dim", "=", "-", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "net", "(", "x", ")", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "x", "=", "unmerge_multi_slice", "(", "x", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "space", "==", "'k-space'", ":", "\n", "            ", "x", "=", "T", ".", "fft2", "(", "sens_expand", "(", "x", ",", "input", "[", "'sens_maps'", "]", ")", ")", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.forward": [[364, 370], ["var_net.SoftDC.net_forward", "var_net.SoftDC.net_forward", "var_net.SoftDC.soft_dc", "var_net.SoftDC.soft_dc"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.net_forward", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.net_forward", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.soft_dc", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SoftDC.soft_dc"], ["", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'parallel'", ":", "\n", "            ", "return", "x", "-", "self", ".", "soft_dc", "(", "x", ",", "input", ")", "-", "self", ".", "net_forward", "(", "x", ",", "input", ")", "\n", "", "elif", "self", ".", "mode", "==", "'sequential'", ":", "\n", "            ", "x", "=", "self", ".", "net_forward", "(", "x", ",", "input", ")", "\n", "return", "x", "-", "self", ".", "soft_dc", "(", "x", ",", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SensModel.__init__": [[378, 382], ["torch.nn.Module.__init__", "var_net.parse_model", "var_net.parse_model"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.parse_model", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.parse_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_sens", "=", "parse_model", "(", "args", ".", "sens_method_str", ")", "\n", "self", ".", "model", "=", "parse_model", "(", "args", ".", "method_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.SensModel.forward": [[383, 389], ["var_net.SensModel.model", "var_net.SensModel.model_sens"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "model_sens", "is", "not", "None", ":", "\n", "            ", "input", "[", "'sens_maps'", "]", "=", "self", ".", "model_sens", "(", "input", ")", "\n", "# if torch.any(torch.isnan(input['sens_maps'])):", "\n", "#     pdb.set_trace()", "\n", "", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.get_num_slices": [[21, 23], ["None"], "function", ["None"], ["def", "get_num_slices", "(", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.merge_multi_slice": [[24, 38], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "merge_multi_slice", "(", "data", ",", "cat_dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "args", ".", "before_slices", "==", "0", "and", "args", ".", "after_slices", "==", "0", ":", "\n", "        ", "return", "data", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "", "merged_data", "=", "data", "[", ":", ",", ":", ",", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "args", ".", "before_slices", ")", ":", "\n", "        ", "merged_data", "=", "torch", ".", "cat", "(", "\n", "(", "data", "[", ":", ",", ":", ",", "i", "+", "1", "]", ",", "merged_data", ")", ",", "dim", "=", "cat_dim", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "args", ".", "after_slices", ")", ":", "\n", "        ", "merged_data", "=", "torch", ".", "cat", "(", "(", "\n", "merged_data", ",", "data", "[", ":", ",", ":", ",", "args", ".", "before_slices", "+", "i", "+", "1", "]", ")", ",", "dim", "=", "cat_dim", ")", "\n", "\n", "", "return", "merged_data", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.unmerge_multi_slice": [[39, 61], ["range", "range", "torch.stack().squeeze", "torch.stack().squeeze", "slices.append", "slices.append", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "unmerge_multi_slice", "(", "data", ",", "cat_dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "args", ".", "before_slices", "==", "0", "and", "args", ".", "after_slices", "==", "0", ":", "\n", "        ", "return", "data", "\n", "\n", "", "num_slices", "=", "1", "+", "args", ".", "before_slices", "+", "args", ".", "after_slices", "\n", "b", ",", "c", ",", "one", ",", "h", ",", "w", ",", "two", "=", "data", ".", "shape", "\n", "slice_width", "=", "w", "//", "num_slices", "\n", "\n", "middle_slice_start", "=", "(", "args", ".", "before_slices", "*", "slice_width", ")", "\n", "middle_slice_end", "=", "(", "args", ".", "before_slices", "*", "slice_width", ")", "+", "slice_width", "\n", "slices", "=", "[", "data", "[", "...", ",", "middle_slice_start", ":", "middle_slice_end", ",", ":", "]", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "args", ".", "before_slices", ")", ":", "\n", "        ", "slice_start", "=", "(", "i", ")", "*", "slice_width", "\n", "slice_end", "=", "(", "i", "+", "1", ")", "*", "slice_width", "\n", "slices", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", ",", "slice_start", ":", "slice_end", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "before_slices", "+", "1", ",", "args", ".", "after_slices", "+", "args", ".", "before_slices", "+", "1", ")", ":", "\n", "        ", "slice_start", "=", "(", "i", ")", "*", "slice_width", "\n", "slice_end", "=", "(", "i", "+", "1", ")", "*", "slice_width", "\n", "slices", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", ":", ",", "slice_start", ":", "slice_end", "]", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "slices", ",", "dim", "=", "cat_dim", ")", ".", "squeeze", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul": [[66, 71], ["torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "complex_mul", "(", "x", ",", "y", ")", ":", "\n", "    ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "y", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "re", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "1", "]", "\n", "im", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "0", "]", "\n", "return", "torch", ".", "stack", "(", "(", "re", ",", "im", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm": [[164, 190], ["x.contiguous().view.view", "model", "x.contiguous().view.contiguous().view", "x.contiguous().view.mean().view", "x.contiguous().view.std().view", "x.contiguous().view.contiguous().view", "x.contiguous().view.contiguous", "x.contiguous().view.mean().view", "x.contiguous().view.std().view", "x.contiguous().view.contiguous().view", "x.contiguous().view.mean", "x.contiguous().view.std", "x.contiguous().view.contiguous", "x.contiguous().view.mean().view().expand().contiguous().view", "x.contiguous().view.std().view().expand().contiguous().view", "x.contiguous().view.mean", "x.contiguous().view.std", "x.contiguous().view.contiguous", "x.contiguous().view.mean().view().expand().contiguous", "x.contiguous().view.std().view().expand().contiguous", "x.contiguous().view.mean().view().expand", "x.contiguous().view.std().view().expand", "x.contiguous().view.mean().view", "x.contiguous().view.std().view", "x.contiguous().view.mean", "x.contiguous().view.std"], "function", ["None"], ["", "", "def", "norm", "(", "x", ",", "model", ",", "norm_type", ",", "norm_mean", ",", "norm_std", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "mean", ",", "std", "=", "0", ",", "1", "\n", "if", "norm_type", "==", "'layer'", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", "*", "h", "*", "w", ")", "\n", "if", "norm_mean", ":", "\n", "            ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "", "if", "norm_std", ":", "\n", "            ", "std", "=", "x", ".", "std", "(", "dim", "=", "1", ")", ".", "view", "(", "b", ",", "1", ",", "1", ",", "1", ")", "\n", "", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "if", "norm_mean", ":", "\n", "            ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "", "if", "norm_std", ":", "\n", "            ", "std", "=", "x", ".", "std", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "", "", "elif", "norm_type", "==", "'group'", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "2", ",", "c", "//", "2", "*", "h", "*", "w", ")", "\n", "if", "norm_mean", ":", "\n", "            ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ",", "2", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "b", ",", "2", ",", "c", "//", "2", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "", "if", "norm_std", ":", "\n", "            ", "std", "=", "x", ".", "std", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ",", "2", ",", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "b", ",", "2", ",", "c", "//", "2", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "", "", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "x", "=", "model", "(", "x", ")", "\n", "x", "=", "x", "*", "std", "+", "mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.dc": [[195, 197], ["torch.where", "torch.where"], "function", ["None"], ["", "", "def", "dc", "(", "x", ",", "mask", ",", "kspace", ")", ":", "\n", "    ", "return", "torch", ".", "where", "(", "mask", ",", "kspace", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_expand": [[202, 204], ["var_net.complex_mul"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul"], ["", "", "def", "sens_expand", "(", "x", ",", "sens_maps", ")", ":", "\n", "    ", "return", "complex_mul", "(", "x", ",", "sens_maps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.sens_reduce": [[209, 216], ["complex_mul().sum", "var_net.complex_mul", "fastmri.data.transforms.complex_conj"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.complex_mul", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_conj"], ["", "", "def", "sens_reduce", "(", "x", ",", "sens_maps", ")", ":", "\n", "# if torch.any(torch.isnan(x)):", "\n", "#     pdb.set_trace()", "\n", "    ", "y", "=", "complex_mul", "(", "x", ",", "T", ".", "complex_conj", "(", "sens_maps", ")", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# if torch.any(torch.isnan(y)):", "\n", "#     pdb.set_trace()", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.pad16": [[263, 275], ["var_net.pad16.floor_ceil"], "function", ["None"], ["", "", "def", "pad16", "(", "x", ",", "func", ")", ":", "\n", "    ", "def", "floor_ceil", "(", "n", ")", ":", "\n", "        ", "return", "math", ".", "floor", "(", "n", ")", ",", "math", ".", "ceil", "(", "n", ")", "\n", "", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "w_mult", "=", "(", "(", "w", "-", "1", ")", "|", "15", ")", "+", "1", "\n", "h_mult", "=", "(", "(", "h", "-", "1", ")", "|", "15", ")", "+", "1", "\n", "w_pad", "=", "floor_ceil", "(", "(", "w_mult", "-", "w", ")", "/", "2", ")", "\n", "h_pad", "=", "floor_ceil", "(", "(", "h_mult", "-", "h", ")", "/", "2", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "w_pad", "+", "h_pad", ")", "\n", "x", "=", "func", "(", "x", ")", "\n", "x", "=", "x", "[", "...", ",", "h_pad", "[", "0", "]", ":", "h_mult", "-", "h_pad", "[", "1", "]", ",", "w_pad", "[", "0", "]", ":", "w_mult", "-", "w_pad", "[", "1", "]", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.unet_grappa": [[276, 288], ["fastmri.model.public_unet.UnetModel"], "function", ["None"], ["", "def", "unet_grappa", "(", "in_chans", ",", "out_chans", ",", "chans", ")", ":", "\n", "    ", "return", "UnetModel", "(", "\n", "in_chans", "=", "in_chans", ",", "\n", "out_chans", "=", "out_chans", ",", "\n", "chans", "=", "chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pools", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "variant", "=", "None", ",", "\n", "kernel_size", "=", "args", ".", "kernel_size", ",", "\n", "padding", "=", "args", ".", "kernel_size", "//", "2", ",", "\n", "dilation", "=", "args", ".", "dilation", ",", "\n", "groups", "=", "args", ".", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.create_model": [[290, 295], ["var_net.unet_grappa", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.unet_grappa"], ["", "def", "create_model", "(", "chans", ",", "in_chans", ",", "out_chans", ")", ":", "\n", "    ", "if", "args", ".", "var_net_model", "==", "'unet'", ":", "\n", "        ", "return", "unet_grappa", "(", "in_chans", ",", "out_chans", ",", "chans", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Model type: {type}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.unet": [[296, 301], ["var_net.Pad", "var_net.Norm", "var_net.SequentialPlus", "var_net.create_model"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.create_model"], ["", "", "def", "unet", "(", "f", ",", "in_chans", ",", "out_chans", "=", "None", ")", ":", "\n", "    ", "if", "out_chans", "is", "None", ":", "\n", "        ", "out_chans", "=", "in_chans", "\n", "\n", "", "return", "Pad", "(", "Norm", "(", "SequentialPlus", "(", "create_model", "(", "f", ",", "in_chans", ",", "out_chans", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.coord": [[310, 312], ["torch.nn.Sequential", "var_net.Complex2Fm", "var_net.Fm2Complex"], "function", ["None"], ["", "", "def", "coord", "(", "module", ",", "out_chans", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "Complex2Fm", "(", ")", ",", "module", ",", "Fm2Complex", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.cunet": [[313, 315], ["var_net.coord", "var_net.unet"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.coord", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.unet"], ["", "def", "cunet", "(", "f", ",", "fm_in", ",", "out_chans", "=", "None", ")", ":", "\n", "    ", "return", "coord", "(", "unet", "(", "f", ",", "fm_in", ",", "out_chans", ")", ",", "out_chans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.polar": [[316, 318], ["torch.nn.Sequential", "var_net.Polar", "var_net.Complex2Fm", "var_net.Fm2Complex", "var_net.Cartesian"], "function", ["None"], ["", "def", "polar", "(", "module", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "Polar", "(", ")", ",", "Complex2Fm", "(", ")", ",", "module", ",", "Fm2Complex", "(", ")", ",", "Cartesian", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.parse_model": [[371, 376], ["re.sub", "eval", "int", "m.group", "m.group"], "function", ["None"], ["", "", "", "def", "parse_model", "(", "s", ")", ":", "\n", "    ", "if", "s", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "s", "=", "re", ".", "sub", "(", "'(\\d+)\\[(.*?)\\]'", ",", "lambda", "m", ":", "int", "(", "m", ".", "group", "(", "1", ")", ")", "*", "m", ".", "group", "(", "2", ")", ",", "s", ")", "\n", "return", "eval", "(", "f'SequentialPlus({s})'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.var_net": [[390, 394], ["var_net.SensModel"], "function", ["None"], ["", "", "def", "var_net", "(", "args_local", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "args_local", "\n", "return", "SensModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.var_net_explicit_sens": [[395, 399], ["var_net.parse_model"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.parse_model"], ["", "def", "var_net_explicit_sens", "(", "args_local", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "args_local", "\n", "return", "parse_model", "(", "args", ".", "method_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.__init__.load": [[13, 30], ["logging.info", "name.rsplit", "getattr.", "len", "importlib.import_module", "getattr", "Exception", "Exception"], "function", ["None"], ["# package is not installed", "\n", "    ", "import", "warnings", "\n", "\n", "warnings", ".", "warn", "(", "\"Could not retrieve fastmri version!\"", ")", "\n", "\n", "\n", "", "from", ".", "coil_combine", "import", "rss", ",", "rss_complex", "\n", "from", ".", "fftc", "import", "fft2c_new", "as", "fft2c", "\n", "from", ".", "fftc", "import", "fftshift", "\n", "from", ".", "fftc", "import", "ifft2c_new", "as", "ifft2c", "\n", "from", ".", "fftc", "import", "ifftshift", ",", "roll", "\n", "from", ".", "losses", "import", "SSIMLoss", "\n", "from", ".", "math", "import", "(", "\n", "complex_abs", ",", "\n", "complex_abs_sq", ",", "\n", "complex_conj", ",", "\n", "complex_mul", ",", "\n", "tensor_to_complex_np", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.ConvBlock.__init__": [[19, 55], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.Dropout2d", "min"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "drop_prob", ",", "variant", "=", "None", ",", "ks", "=", "3", ",", "pad", "=", "1", ",", "dil", "=", "1", ",", "num_group", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input.\n            out_chans (int): Number of channels in the output.\n            drop_prob (float): Dropout probability.\n            variant (string): Variant of Convolutional Block ('dense', 'res', or None).\n            ks (int): Kernel size.\n            pad (int): Padding.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans1", "=", "out_chans", "\n", "self", ".", "out_chans2", "=", "out_chans", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "variant", "=", "variant", "\n", "\n", "if", "variant", "==", "'dense'", ":", "\n", "            ", "self", ".", "out_chans1", "=", "out_chans", "//", "2", "\n", "self", ".", "out_chans2", "=", "out_chans", "-", "out_chans", "//", "2", "\n", "", "elif", "variant", "==", "'res'", ":", "\n", "            ", "self", ".", "out_chans2", "=", "out_chans", "-", "min", "(", "in_chans", ",", "out_chans", "//", "2", ")", "\n", "\n", "", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "self", ".", "out_chans1", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pad", ",", "dilation", "=", "dil", ",", "groups", "=", "num_group", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", "\n", ")", "\n", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "out_chans1", ",", "self", ".", "out_chans2", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pad", ",", "dilation", "=", "dil", ",", "groups", "=", "num_group", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.ConvBlock.forward": [[57, 73], ["public_unet.ConvBlock.layer1", "public_unet.ConvBlock.layer2", "torch.cat", "torch.cat", "min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "x1", "=", "self", ".", "layer1", "(", "input", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "\n", "if", "self", ".", "variant", "==", "'dense'", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "x2", ",", "x1", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "variant", "==", "'res'", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "x2", ",", "input", "[", ":", ",", ":", "min", "(", "self", ".", "in_chans", ",", "self", ".", "out_chans1", "//", "2", ")", "]", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.ConvBlock.__repr__": [[74, 76], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'ConvBlock(in_chans={self.in_chans}, out_chans1={self.out_chans1}, out_chans2={self.out_chans2} '", "f'drop_prob={self.drop_prob}, variant={self.variant})'", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.UnetModel.__init__": [[89, 122], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "public_unet.ConvBlock", "torch.nn.ModuleList", "range", "torch.nn.Sequential", "public_unet.ConvBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "public_unet.ConvBlock", "public_unet.ConvBlock", "public_unet.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "chans", ",", "num_pool_layers", ",", "drop_prob", ",", "variant", "=", "None", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input to the U-Net model.\n            out_chans (int): Number of channels in the output to the U-Net model.\n            chans (int): Number of output channels of the first convolution layer.\n            num_pool_layers (int): Number of down-sampling and up-sampling layers.\n            drop_prob (float): Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ",", "variant", "=", "variant", ",", "ks", "=", "kernel_size", ",", "pad", "=", "padding", ",", "dil", "=", "dilation", ",", "num_group", "=", "groups", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "i", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", "+=", "[", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ",", "variant", "=", "variant", ",", "ks", "=", "kernel_size", ",", "pad", "=", "padding", ",", "dil", "=", "dilation", ",", "num_group", "=", "groups", ")", "]", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", ",", "drop_prob", ",", "variant", "=", "variant", ",", "ks", "=", "kernel_size", ",", "pad", "=", "padding", ",", "dil", "=", "dilation", ",", "num_group", "=", "groups", ")", "\n", "\n", "self", ".", "up_sample_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_sample_layers", "+=", "[", "ConvBlock", "(", "ch", "*", "2", ",", "ch", "//", "2", ",", "drop_prob", ",", "variant", "=", "variant", ",", "ks", "=", "kernel_size", ",", "pad", "=", "padding", ",", "dil", "=", "dilation", ",", "num_group", "=", "groups", ")", "]", "\n", "ch", "//=", "2", "\n", "", "self", ".", "up_sample_layers", "+=", "[", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ",", "variant", "=", "variant", ",", "ks", "=", "kernel_size", ",", "pad", "=", "padding", ",", "dil", "=", "dilation", ",", "num_group", "=", "groups", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "ch", "//", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch", "//", "2", ",", "out_chans", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.UnetModel.forward": [[124, 151], ["public_unet.UnetModel.conv", "public_unet.UnetModel.conv2", "layer", "stack.append", "torch.nn.functional.max_pool2d", "stack.pop", "torch.nn.functional.interpolate", "torch.cat", "layer"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv"], ["", "def", "forward", "(", "self", ",", "input", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "input", "\n", "# Apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "max_pool2d", "(", "output", ",", "kernel_size", "=", "2", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# Apply up-sampling layers", "\n", "for", "layer", "in", "self", ".", "up_sample_layers", ":", "\n", "            ", "downsample_layer", "=", "stack", ".", "pop", "(", ")", "\n", "layer_size", "=", "(", "downsample_layer", ".", "shape", "[", "-", "2", "]", ",", "downsample_layer", ".", "shape", "[", "-", "1", "]", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "output", ",", "size", "=", "layer_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "downsample_layer", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "layer", "(", "output", ")", "\n", "\n", "", "return", "self", ".", "conv2", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.UnetModel2.__init__": [[171, 184], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "public_unet.Push", "torch.nn.AvgPool2d", "public_unet.Push", "torch.nn.AvgPool2d", "public_unet.Push", "torch.nn.AvgPool2d", "public_unet.Push", "torch.nn.AvgPool2d", "public_unet.Pop", "public_unet.Pop", "public_unet.Pop", "public_unet.Pop", "torch.nn.Conv2d", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv", "public_unet.conv"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "chans", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "c", "=", "chans", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "*", "conv", "(", "in_chans", ",", "1", "*", "c", ")", ",", "*", "conv", "(", "1", "*", "c", ",", "1", "*", "c", ")", ",", "Push", "(", ")", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "*", "conv", "(", "1", "*", "c", ",", "2", "*", "c", ")", ",", "*", "conv", "(", "2", "*", "c", ",", "2", "*", "c", ")", ",", "Push", "(", ")", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "*", "conv", "(", "2", "*", "c", ",", "4", "*", "c", ")", ",", "*", "conv", "(", "4", "*", "c", ",", "4", "*", "c", ")", ",", "Push", "(", ")", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "*", "conv", "(", "4", "*", "c", ",", "8", "*", "c", ")", ",", "*", "conv", "(", "8", "*", "c", ",", "8", "*", "c", ")", ",", "Push", "(", ")", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ",", "\n", "*", "conv", "(", "8", "*", "c", ",", "16", "*", "c", ")", ",", "*", "conv", "(", "16", "*", "c", ",", "16", "*", "c", ")", ",", "*", "conv", "(", "16", "*", "c", ",", "8", "*", "c", ",", "transpose", "=", "True", ")", ",", "Pop", "(", ")", ",", "\n", "*", "conv", "(", "16", "*", "c", ",", "8", "*", "c", ")", ",", "*", "conv", "(", "8", "*", "c", ",", "8", "*", "c", ")", ",", "*", "conv", "(", "8", "*", "c", ",", "4", "*", "c", ",", "transpose", "=", "True", ")", ",", "Pop", "(", ")", ",", "\n", "*", "conv", "(", "8", "*", "c", ",", "4", "*", "c", ")", ",", "*", "conv", "(", "4", "*", "c", ",", "4", "*", "c", ")", ",", "*", "conv", "(", "4", "*", "c", ",", "2", "*", "c", ",", "transpose", "=", "True", ")", ",", "Pop", "(", ")", ",", "\n", "*", "conv", "(", "4", "*", "c", ",", "2", "*", "c", ")", ",", "*", "conv", "(", "2", "*", "c", ",", "2", "*", "c", ")", ",", "*", "conv", "(", "2", "*", "c", ",", "1", "*", "c", ",", "transpose", "=", "True", ")", ",", "Pop", "(", ")", ",", "\n", "*", "conv", "(", "2", "*", "c", ",", "1", "*", "c", ")", ",", "*", "conv", "(", "1", "*", "c", ",", "1", "*", "c", ")", ",", "nn", ".", "Conv2d", "(", "1", "*", "c", ",", "out_chans", ",", "1", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.UnetModel2.forward": [[186, 197], ["isinstance", "public_unet.UnetModel2.stack.append", "isinstance", "torch.cat", "lyr", "public_unet.UnetModel2.stack.pop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "stack", "=", "[", "]", "\n", "x", "=", "input", "\n", "for", "lyr", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "lyr", ",", "Push", ")", ":", "\n", "                ", "self", ".", "stack", ".", "append", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "lyr", ",", "Pop", ")", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "stack", ".", "pop", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "lyr", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.conv": [[161, 168], ["torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.ConvTranspose2d", "torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv", "(", "in_channels", ",", "out_channels", ",", "transpose", "=", "False", ",", "kernel_size", "=", "3", ")", ":", "\n", "    ", "if", "transpose", ":", "\n", "        ", "yield", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "2", ",", "2", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "yield", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "1", ",", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "", "yield", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", "\n", "yield", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.public_unet.unet": [[199, 206], ["public_unet.UnetModel"], "function", ["None"], ["", "", "def", "unet", "(", "args", ")", ":", "\n", "    ", "return", "UnetModel", "(", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "args", ".", "num_chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pools", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.BasicBlock.__init__": [[30, 47], ["torch.Module.__init__", "unpooled_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "unpooled_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.BasicBlock.forward": [[48, 65], ["unpooled_resnet.BasicBlock.conv1", "unpooled_resnet.BasicBlock.bn1", "unpooled_resnet.BasicBlock.relu", "unpooled_resnet.BasicBlock.conv2", "unpooled_resnet.BasicBlock.bn2", "unpooled_resnet.BasicBlock.relu", "unpooled_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.Bottleneck.__init__": [[70, 86], ["torch.Module.__init__", "unpooled_resnet.conv1x1", "norm_layer", "unpooled_resnet.conv3x3", "norm_layer", "unpooled_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.Bottleneck.forward": [[87, 108], ["unpooled_resnet.Bottleneck.conv1", "unpooled_resnet.Bottleneck.bn1", "unpooled_resnet.Bottleneck.relu", "unpooled_resnet.Bottleneck.conv2", "unpooled_resnet.Bottleneck.bn2", "unpooled_resnet.Bottleneck.relu", "unpooled_resnet.Bottleneck.conv3", "unpooled_resnet.Bottleneck.bn3", "unpooled_resnet.Bottleneck.relu", "unpooled_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.ResNet.__init__": [[112, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "unpooled_resnet.ResNet._make_layer", "unpooled_resnet.ResNet._make_layer", "unpooled_resnet.ResNet._make_layer", "unpooled_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "unpooled_resnet.ResNet.modules", "len", "ValueError", "isinstance", "unpooled_resnet.ResNet.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "lambda", "f", ":", "nn", ".", "GroupNorm", "(", "f", "//", "32", ",", "f", ")", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.ResNet._make_layer": [[163, 186], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "unpooled_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.ResNet.forward": [[187, 203], ["unpooled_resnet.ResNet.conv1", "unpooled_resnet.ResNet.bn1", "unpooled_resnet.ResNet.relu", "unpooled_resnet.ResNet.layer1", "unpooled_resnet.ResNet.layer2", "unpooled_resnet.ResNet.layer3", "unpooled_resnet.ResNet.layer4", "unpooled_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "unpooled_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#x = self.maxpool(x)", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.UnpooledResnet50.__init__": [[205, 210], ["unpooled_resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.unpooled_resnet.conv1x1": [[22, 25], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.BasicBlock.__init__": [[30, 47], ["torch.Module.__init__", "torchvision_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torchvision_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.BasicBlock.forward": [[48, 65], ["torchvision_resnet.BasicBlock.conv1", "torchvision_resnet.BasicBlock.bn1", "torchvision_resnet.BasicBlock.relu", "torchvision_resnet.BasicBlock.conv2", "torchvision_resnet.BasicBlock.bn2", "torchvision_resnet.BasicBlock.relu", "torchvision_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.Bottleneck.__init__": [[70, 86], ["torch.Module.__init__", "torchvision_resnet.conv1x1", "norm_layer", "torchvision_resnet.conv3x3", "norm_layer", "torchvision_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.Bottleneck.forward": [[87, 108], ["torchvision_resnet.Bottleneck.conv1", "torchvision_resnet.Bottleneck.bn1", "torchvision_resnet.Bottleneck.relu", "torchvision_resnet.Bottleneck.conv2", "torchvision_resnet.Bottleneck.bn2", "torchvision_resnet.Bottleneck.relu", "torchvision_resnet.Bottleneck.conv3", "torchvision_resnet.Bottleneck.bn3", "torchvision_resnet.Bottleneck.relu", "torchvision_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet.__init__": [[112, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torchvision_resnet.ResNet._make_layer", "torchvision_resnet.ResNet._make_layer", "torchvision_resnet.ResNet._make_layer", "torchvision_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torchvision_resnet.ResNet.modules", "len", "ValueError", "isinstance", "torchvision_resnet.ResNet.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "lambda", "f", ":", "nn", ".", "GroupNorm", "(", "f", "//", "32", ",", "f", ")", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet._make_layer": [[163, 186], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torchvision_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.ResNet.forward": [[187, 203], ["torchvision_resnet.ResNet.conv1", "torchvision_resnet.ResNet.bn1", "torchvision_resnet.ResNet.relu", "torchvision_resnet.ResNet.maxpool", "torchvision_resnet.ResNet.layer1", "torchvision_resnet.ResNet.layer2", "torchvision_resnet.ResNet.layer3", "torchvision_resnet.ResNet.layer4", "torchvision_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torchvision_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.Resnet50.__init__": [[205, 210], ["torchvision_resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.torchvision_resnet.conv1x1": [[22, 25], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1.Discriminator.__init__": [[24, 70], ["torch.nn.Module.__init__", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "resnet_r1.Discriminator.modules", "resnet_r1.ResnetBlock", "resnet_r1.ResnetBlock", "isinstance", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "resnet_r1.ResnetBlock", "resnet_r1.ResnetBlock", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "#self.embed_size = 1", "\n", "#s0 = self.s0 = args.smallest_res", "\n", "nf", "=", "self", ".", "nf", "=", "64", "#args.ndf", "\n", "#nf_max = self.nf_max = args.ndf_max", "\n", "\n", "# Submodules", "\n", "nlayers", "=", "1", "\n", "self", ".", "nf0", "=", "nf", "*", "2", "**", "nlayers", "\n", "\n", "blocks", "=", "[", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "#ResnetBlock(nf, nf),", "\n", "]", "\n", "\n", "for", "i", "in", "range", "(", "nlayers", ")", ":", "\n", "            ", "nf0", "=", "nf", "*", "2", "**", "i", "\n", "nf1", "=", "nf", "*", "2", "**", "(", "i", "+", "1", ")", "\n", "blocks", "+=", "[", "\n", "#nn.AvgPool2d(2, stride=2, padding=0),", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "ResnetBlock", "(", "nf0", ",", "nf1", ")", ",", "\n", "ResnetBlock", "(", "nf1", ",", "nf1", ")", ",", "\n", "#ResnetBlock(nf1, nf1),", "\n", "]", "\n", "\n", "# Initial up-channeling conv", "\n", "", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", "*", "nf", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ")", "\n", "\n", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "# Final stage is standard avg-pool followed by linear", "\n", "self", ".", "pool_max", "=", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "nf0", ",", "num_classes", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "3", ",", "affine", "=", "False", ",", "eps", "=", "0.0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1.Discriminator.forward": [[71, 85], ["x.size", "resnet_r1.Discriminator.norm", "resnet_r1.Discriminator.conv_img", "resnet_r1.Discriminator.resnet", "resnet_r1.Discriminator.pool_max", "resnet_r1.Discriminator.pool", "resnet_r1.Discriminator.view", "resnet_r1.Discriminator.fc", "resnet_r1.actvn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "x", "\n", "\n", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "#pdb.set_trace()", "\n", "out", "=", "self", ".", "conv_img", "(", "out", ")", "\n", "out", "=", "self", ".", "resnet", "(", "out", ")", "\n", "out", "=", "self", ".", "pool_max", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "self", ".", "nf0", ")", "\n", "out", "=", "self", ".", "fc", "(", "actvn", "(", "out", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1.ResnetBlock.__init__": [[88, 113], ["torch.nn.Module.__init__", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "min", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "fhidden", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "self", ".", "fin", "=", "fin", "\n", "self", ".", "fout", "=", "fout", "\n", "if", "fhidden", "is", "None", ":", "\n", "            ", "self", ".", "fhidden", "=", "min", "(", "fin", ",", "fout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fhidden", "=", "fhidden", "\n", "\n", "# Submodules", "\n", "", "self", ".", "norm_0", "=", "nn", ".", "GroupNorm", "(", "self", ".", "fin", "//", "32", ",", "self", ".", "fin", ")", "\n", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "self", ".", "fin", ",", "self", ".", "fhidden", ",", "\n", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "norm_1", "=", "nn", ".", "GroupNorm", "(", "self", ".", "fhidden", "//", "32", ",", "self", ".", "fhidden", ")", "\n", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "fhidden", ",", "self", ".", "fout", ",", "\n", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "self", ".", "fin", ",", "self", ".", "fout", ",", "\n", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1.ResnetBlock.forward": [[114, 121], ["resnet_r1.ResnetBlock._shortcut", "resnet_r1.ResnetBlock.conv_0", "resnet_r1.ResnetBlock.conv_1", "resnet_r1.actvn", "resnet_r1.actvn", "resnet_r1.ResnetBlock.norm_0", "resnet_r1.ResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.ResnetBlock._shortcut", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "_shortcut", "(", "x", ")", "\n", "dx", "=", "self", ".", "conv_0", "(", "actvn", "(", "self", ".", "norm_0", "(", "x", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "actvn", "(", "self", ".", "norm_1", "(", "dx", ")", ")", ")", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1.ResnetBlock._shortcut": [[122, 128], ["resnet_r1.ResnetBlock.conv_s"], "methods", ["None"], ["", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1.actvn": [[130, 132], ["torch.nn.functional.relu"], "function", ["None"], ["", "", "def", "actvn", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "relu", "(", "x", ")", "\n", "#return F.leaky_relu(x, 2e-1)", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_prev.Discriminator.__init__": [[24, 68], ["torch.nn.Module.__init__", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "resnet_r1_prev.Discriminator.modules", "resnet_r1_prev.ResnetBlock", "resnet_r1_prev.ResnetBlock", "resnet_r1_prev.ResnetBlock", "isinstance", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "resnet_r1_prev.ResnetBlock", "resnet_r1_prev.ResnetBlock", "resnet_r1_prev.ResnetBlock", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "#self.embed_size = 1", "\n", "#s0 = self.s0 = args.smallest_res", "\n", "nf", "=", "self", ".", "nf", "=", "192", "#args.ndf", "\n", "#nf_max = self.nf_max = args.ndf_max", "\n", "\n", "# Submodules", "\n", "nlayers", "=", "1", "\n", "self", ".", "nf0", "=", "nf", "*", "2", "**", "nlayers", "\n", "\n", "blocks", "=", "[", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "]", "\n", "\n", "for", "i", "in", "range", "(", "nlayers", ")", ":", "\n", "            ", "nf0", "=", "nf", "*", "2", "**", "i", "\n", "nf1", "=", "nf", "*", "2", "**", "(", "i", "+", "1", ")", "\n", "blocks", "+=", "[", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "ResnetBlock", "(", "nf0", ",", "nf1", ")", ",", "\n", "ResnetBlock", "(", "nf1", ",", "nf1", ")", ",", "\n", "ResnetBlock", "(", "nf1", ",", "nf1", ")", ",", "\n", "]", "\n", "\n", "# Initial up-channeling conv", "\n", "", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", "*", "nf", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ")", "\n", "\n", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "# Final stage is standard avg-pool followed by linear", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "nf0", ",", "num_classes", ")", "\n", "#self.norm = nn.GroupNorm(1, 1, affine=False, eps=0.0)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_prev.Discriminator.forward": [[69, 82], ["x.size", "resnet_r1_prev.Discriminator.conv_img", "resnet_r1_prev.Discriminator.resnet", "resnet_r1_prev.Discriminator.pool", "resnet_r1_prev.Discriminator.view", "resnet_r1_prev.Discriminator.fc", "resnet_r1_prev.actvn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "x", "\n", "\n", "#out = self.norm(out)", "\n", "#pdb.set_trace()", "\n", "out", "=", "self", ".", "conv_img", "(", "out", ")", "\n", "out", "=", "self", ".", "resnet", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "self", ".", "nf0", ")", "\n", "out", "=", "self", ".", "fc", "(", "actvn", "(", "out", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_prev.ResnetBlock.__init__": [[85, 110], ["torch.nn.Module.__init__", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "min", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "fhidden", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "self", ".", "fin", "=", "fin", "\n", "self", ".", "fout", "=", "fout", "\n", "if", "fhidden", "is", "None", ":", "\n", "            ", "self", ".", "fhidden", "=", "min", "(", "fin", ",", "fout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fhidden", "=", "fhidden", "\n", "\n", "# Submodules", "\n", "", "self", ".", "norm_0", "=", "nn", ".", "GroupNorm", "(", "self", ".", "fin", "//", "32", ",", "self", ".", "fin", ")", "\n", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "self", ".", "fin", ",", "self", ".", "fhidden", ",", "\n", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "norm_1", "=", "nn", ".", "GroupNorm", "(", "self", ".", "fhidden", "//", "32", ",", "self", ".", "fhidden", ")", "\n", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "fhidden", ",", "self", ".", "fout", ",", "\n", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "self", ".", "fin", ",", "self", ".", "fout", ",", "\n", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_prev.ResnetBlock.forward": [[111, 118], ["resnet_r1_prev.ResnetBlock._shortcut", "resnet_r1_prev.ResnetBlock.conv_0", "resnet_r1_prev.ResnetBlock.conv_1", "resnet_r1_prev.actvn", "resnet_r1_prev.actvn", "resnet_r1_prev.ResnetBlock.norm_0", "resnet_r1_prev.ResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.ResnetBlock._shortcut", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "_shortcut", "(", "x", ")", "\n", "dx", "=", "self", ".", "conv_0", "(", "actvn", "(", "self", ".", "norm_0", "(", "x", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "actvn", "(", "self", ".", "norm_1", "(", "dx", ")", ")", ")", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_prev.ResnetBlock._shortcut": [[119, 125], ["resnet_r1_prev.ResnetBlock.conv_s"], "methods", ["None"], ["", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_prev.actvn": [[127, 129], ["torch.nn.functional.relu"], "function", ["None"], ["", "", "def", "actvn", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "relu", "(", "x", ")", "\n", "#return F.leaky_relu(x, 2e-1)", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_wide.WideDiscriminator.__init__": [[25, 67], ["torch.nn.Module.__init__", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "resnet_r1_wide.WideDiscriminator.modules", "fastmri.model.classifiers.resnet_r1.ResnetBlock", "fastmri.model.classifiers.resnet_r1.ResnetBlock", "fastmri.model.classifiers.resnet_r1.ResnetBlock", "isinstance", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "fastmri.model.classifiers.resnet_r1.ResnetBlock", "fastmri.model.classifiers.resnet_r1.ResnetBlock", "fastmri.model.classifiers.resnet_r1.ResnetBlock", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "self", ".", "nf", "=", "128", "\n", "\n", "# Submodules", "\n", "nlayers", "=", "1", "\n", "self", ".", "nf0", "=", "nf", "*", "2", "**", "nlayers", "\n", "\n", "blocks", "=", "[", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "]", "\n", "\n", "for", "i", "in", "range", "(", "nlayers", ")", ":", "\n", "            ", "nf0", "=", "nf", "*", "2", "**", "i", "\n", "nf1", "=", "nf", "*", "2", "**", "(", "i", "+", "1", ")", "\n", "blocks", "+=", "[", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", ",", "\n", "ResnetBlock", "(", "nf0", ",", "nf1", ")", ",", "\n", "ResnetBlock", "(", "nf1", ",", "nf1", ")", ",", "\n", "ResnetBlock", "(", "nf1", ",", "nf1", ")", ",", "\n", "]", "\n", "\n", "# Initial up-channeling conv", "\n", "", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", "*", "nf", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ")", "\n", "\n", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "# Final stage is standard avg-pool followed by linear", "\n", "self", ".", "pool_max", "=", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "4", ",", "padding", "=", "0", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "nf0", ",", "num_classes", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "3", ",", "affine", "=", "False", ",", "eps", "=", "0.0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_wide.WideDiscriminator.forward": [[68, 81], ["x.size", "resnet_r1_wide.WideDiscriminator.norm", "resnet_r1_wide.WideDiscriminator.conv_img", "resnet_r1_wide.WideDiscriminator.resnet", "resnet_r1_wide.WideDiscriminator.pool_max", "resnet_r1_wide.WideDiscriminator.pool", "resnet_r1_wide.WideDiscriminator.view", "resnet_r1_wide.WideDiscriminator.fc", "resnet_r1_wide.actvn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "x", "\n", "\n", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_img", "(", "out", ")", "\n", "out", "=", "self", ".", "resnet", "(", "out", ")", "\n", "out", "=", "self", ".", "pool_max", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "self", ".", "nf0", ")", "\n", "out", "=", "self", ".", "fc", "(", "actvn", "(", "out", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_wide.actvn": [[82, 84], ["torch.nn.functional.relu"], "function", ["None"], ["", "", "def", "actvn", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "relu", "(", "x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.SimpleDiscriminator.__init__": [[24, 54], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "resnet_r1_simple.SimpleDiscriminator.modules", "resnet_r1_simple.ResnetBlock", "resnet_r1_simple.ResnetBlock", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "1", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "self", ".", "nf", "=", "128", "\n", "\n", "# Submodules", "\n", "nlayers", "=", "0", "\n", "self", ".", "nf0", "=", "nf", "\n", "\n", "blocks", "=", "[", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "ResnetBlock", "(", "nf", ",", "nf", ")", ",", "\n", "]", "\n", "\n", "# Initial up-channeling conv", "\n", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", "*", "nf", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ")", "\n", "\n", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "# Final stage is standard avg-pool followed by linear", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "nf0", ",", "num_classes", ")", "\n", "#self.norm = nn.GroupNorm(1, 1, affine=False, eps=0.0)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.SimpleDiscriminator.forward": [[55, 68], ["x.size", "resnet_r1_simple.SimpleDiscriminator.conv_img", "resnet_r1_simple.SimpleDiscriminator.resnet", "resnet_r1_simple.SimpleDiscriminator.pool", "resnet_r1_simple.SimpleDiscriminator.view", "resnet_r1_simple.SimpleDiscriminator.fc", "resnet_r1_simple.actvn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "x", "\n", "\n", "#out = self.norm(out)", "\n", "#pdb.set_trace()", "\n", "out", "=", "self", ".", "conv_img", "(", "out", ")", "\n", "out", "=", "self", ".", "resnet", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "self", ".", "nf0", ")", "\n", "out", "=", "self", ".", "fc", "(", "actvn", "(", "out", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.ResnetBlock.__init__": [[71, 96], ["torch.nn.Module.__init__", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "min", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "fhidden", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "self", ".", "fin", "=", "fin", "\n", "self", ".", "fout", "=", "fout", "\n", "if", "fhidden", "is", "None", ":", "\n", "            ", "self", ".", "fhidden", "=", "min", "(", "fin", ",", "fout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fhidden", "=", "fhidden", "\n", "\n", "# Submodules", "\n", "", "self", ".", "norm_0", "=", "nn", ".", "GroupNorm", "(", "self", ".", "fin", "//", "32", ",", "self", ".", "fin", ")", "\n", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "self", ".", "fin", ",", "self", ".", "fhidden", ",", "\n", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "norm_1", "=", "nn", ".", "GroupNorm", "(", "self", ".", "fhidden", "//", "32", ",", "self", ".", "fhidden", ")", "\n", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "fhidden", ",", "self", ".", "fout", ",", "\n", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "self", ".", "fin", ",", "self", ".", "fout", ",", "\n", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.ResnetBlock.forward": [[97, 104], ["resnet_r1_simple.ResnetBlock._shortcut", "resnet_r1_simple.ResnetBlock.conv_0", "resnet_r1_simple.ResnetBlock.conv_1", "resnet_r1_simple.actvn", "resnet_r1_simple.actvn", "resnet_r1_simple.ResnetBlock.norm_0", "resnet_r1_simple.ResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.ResnetBlock._shortcut", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "_shortcut", "(", "x", ")", "\n", "dx", "=", "self", ".", "conv_0", "(", "actvn", "(", "self", ".", "norm_0", "(", "x", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "actvn", "(", "self", ".", "norm_1", "(", "dx", ")", ")", ")", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.ResnetBlock._shortcut": [[105, 111], ["resnet_r1_simple.ResnetBlock.conv_s"], "methods", ["None"], ["", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.classifiers.resnet_r1_simple.actvn": [[113, 115], ["torch.nn.functional.relu"], "function", ["None"], ["", "", "def", "actvn", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "relu", "(", "x", ")", "\n", "#return F.leaky_relu(x, 2e-1)", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.predict": [[28, 45], ["var_net_trainer.VarNetTrainer.preprocess_data", "var_net_trainer.VarNetTrainer.model", "input_ksp.unsqueeze.unsqueeze.dim", "input_ksp.unsqueeze.unsqueeze.unsqueeze", "target.unsqueeze.unsqueeze.unsqueeze", "dict", "input_ksp.unsqueeze.unsqueeze.transpose", "var_net_trainer.VarNetTrainer.mask.transpose().byte", "var_net_trainer.VarNetTrainer.mask.transpose"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data"], ["    ", "def", "predict", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "self", ".", "preprocess_data", "(", "batch", ")", "\n", "input_ksp", "=", "batch", ".", "input", "\n", "num_lf", "=", "batch", ".", "num_lf", "\n", "target", "=", "batch", ".", "target_im", "\n", "\n", "if", "input_ksp", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "input_ksp", "=", "input_ksp", ".", "unsqueeze", "(", "1", ")", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "output", "=", "self", ".", "model", "(", "dict", "(", "\n", "kspace", "=", "input_ksp", ".", "transpose", "(", "1", ",", "2", ")", ",", "\n", "mask", "=", "batch", ".", "mask", ".", "transpose", "(", "1", ",", "2", ")", ".", "byte", "(", ")", ",", "\n", "num_lf", "=", "num_lf", ",", "\n", "sens_maps", "=", "batch", ".", "sens_map", ")", ")", "\n", "\n", "return", "output", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.var_net.var_net_trainer.VarNetTrainer.unnorm": [[46, 49], ["var_net_trainer.VarNetTrainer.preprocess_data"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.preprocess_data"], ["", "def", "unnorm", "(", "self", ",", "output", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "self", ".", "preprocess_data", "(", "batch", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryModel.__init__": [[29, 33], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "prediction_model", ",", "adversary_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prediction_model", "=", "prediction_model", "\n", "self", ".", "adversary_model", "=", "adversary_model", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryModel.forward": [[33, 42], ["adversary_mixin.AdversaryModel.adversary_model", "adversary_mixin.AdversaryModel.prediction_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n            Evaluating the adversary and prediction models both need\n            to use the forward method to work with distributed learning\n        \"\"\"", "\n", "if", "'adversary'", "in", "kwargs", "and", "kwargs", "[", "'adversary'", "]", ":", "\n", "            ", "return", "self", ".", "adversary_model", "(", "*", "args", ")", "# Doesn't take kwargs", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "prediction_model", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryEnsemble.__init__": [[47, 52], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "adversary_mixin.AdversaryEnsemble.adversaries.append", "Adversary"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], ["def", "__init__", "(", "self", ",", "nadvs", ",", "Adversary", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adversaries", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "nadvs", ")", ":", "\n", "            ", "self", ".", "adversaries", ".", "append", "(", "Adversary", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryEnsemble.forward": [[53, 60], ["torch.cat", "results.append", "adversary"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "# Apply to each and concat results", "\n", "        ", "results", "=", "[", "]", "\n", "for", "adversary", "in", "self", ".", "adversaries", ":", "\n", "            ", "results", ".", "append", "(", "adversary", "(", "*", "args", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "results", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.initial_setup": [[66, 77], ["super().initial_setup", "Exception", "Exception", "Exception"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.initial_setup"], ["def", "initial_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "initial_setup", "(", "args", ")", "\n", "if", "args", ".", "batch_size", "!=", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"trainer requires batch_size 1\"", ")", "\n", "", "self", ".", "display_batch_size", "=", "1", "\n", "self", ".", "img_shape", "=", "(", "args", ".", "resolution_width", ",", "args", ".", "resolution_height", ")", "\n", "\n", "if", "args", ".", "warmup_adversary_from", ">", "args", ".", "adversary_epoch_from", ":", "\n", "            ", "raise", "Exception", "(", "\"warmup_adversary_from > adversary_epoch_from. Bad configuration!\"", ")", "\n", "", "if", "not", "args", ".", "orientation_augmentation", ":", "\n", "            ", "raise", "Exception", "(", "\"Orientation augmentation required for adversary\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.model_setup": [[78, 110], ["super().model_setup", "logging.info", "adversary_mixin.AdversaryModel", "adversary_mixin.AdversaryMixin.count_parameters", "logging.info", "adversary_mixin.AdversaryMixin.count_parameters", "logging.info", "adversary_mixin.AdversaryEnsemble", "Adversary", "Adversary.cuda", "Exception"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.model_setup", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.count_parameters", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.adaptive_varnet.train_adaptive_varnet_demo.count_parameters"], ["", "", "def", "model_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "model_setup", "(", "args", ")", "\n", "\n", "# Load adversary model as well", "\n", "logging", ".", "info", "(", "\"Loading adversary model\"", ")", "\n", "if", "args", ".", "adversary_model", "==", "\"shallow\"", ":", "\n", "            ", "Adversary", "=", "Discriminator", "\n", "", "elif", "args", ".", "adversary_model", "==", "\"wide\"", ":", "\n", "            ", "Adversary", "=", "WideDiscriminator", "\n", "", "elif", "args", ".", "adversary_model", "==", "\"simple\"", ":", "\n", "            ", "Adversary", "=", "SimpleDiscriminator", "\n", "", "elif", "args", ".", "adversary_model", "==", "\"unpooled_resnet50\"", ":", "\n", "            ", "Adversary", "=", "UnpooledResnet50", "\n", "", "elif", "args", ".", "adversary_model", "==", "\"resnet50\"", ":", "\n", "            ", "Adversary", "=", "Resnet50", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"Adversary model {args.adversary_model} not recognised\"", ")", "\n", "\n", "", "if", "args", ".", "number_of_adversaries", ">", "1", ":", "\n", "            ", "adversary_model", "=", "AdversaryEnsemble", "(", "args", ".", "number_of_adversaries", ",", "\n", "Adversary", ",", "num_classes", "=", "1", ",", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "adversary_model", "=", "Adversary", "(", "num_classes", "=", "1", ",", "args", "=", "args", ")", "\n", "\n", "", "self", ".", "model", "=", "AdversaryModel", "(", "\n", "prediction_model", "=", "self", ".", "model", ",", "\n", "adversary_model", "=", "adversary_model", ".", "cuda", "(", ")", ")", "\n", "\n", "nparams", ",", "nlayers", "=", "self", ".", "count_parameters", "(", "self", ".", "model", ".", "prediction_model", ")", "\n", "logging", ".", "info", "(", "f\"Predictor parameters: {nparams:,} layers: {nlayers}\"", ")", "\n", "nparams", ",", "nlayers", "=", "self", ".", "count_parameters", "(", "self", ".", "model", ".", "adversary_model", ")", "\n", "logging", ".", "info", "(", "f\"Adversary parameters: {nparams:,} layers: {nlayers}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.parameter_groups_setup": [[111, 123], ["adversary_mixin.AdversaryMixin.model.prediction_model.parameters", "adversary_mixin.AdversaryMixin.model.adversary_model.parameters"], "methods", ["None"], ["", "def", "parameter_groups_setup", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "dont_learn_predictor", ":", "\n", "            ", "prediction_scaling", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "prediction_scaling", "=", "1.0", "\n", "\n", "", "self", ".", "parameter_groups", "=", "[", "\n", "{", "'params'", ":", "self", ".", "model", ".", "prediction_model", ".", "parameters", "(", ")", ",", "\n", "'group_scaling'", ":", "prediction_scaling", "}", ",", "\n", "{", "'params'", ":", "self", ".", "model", ".", "adversary_model", ".", "parameters", "(", ")", ",", "\n", "'group_scaling'", ":", "args", ".", "adversary_lr_scale", ",", "\n", "'weight_decay'", ":", "args", ".", "adversary_weight_decay", "}", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.predictor_adv_loss": [[125, 144], ["adversary_mixin.toggle_grad", "adversary_mixin.AdversaryMixin.model", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.tensor().cuda", "torch.ones().cuda", "torch.tensor", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad"], ["", "def", "predictor_adv_loss", "(", "self", ",", "prediction_reorien", ",", "true_label", ")", ":", "\n", "        ", "bs", ",", "ch", ",", "h", ",", "w", "=", "prediction_reorien", ".", "shape", "\n", "args", "=", "self", ".", "args", "\n", "if", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", ">=", "args", ".", "adversary_epoch_from", ":", "\n", "### Apply resnet", "\n", "            ", "toggle_grad", "(", "self", ".", "model", ".", "adversary_model", ",", "False", ")", "\n", "orientation_prediction", "=", "self", ".", "model", "(", "prediction_reorien", ",", "adversary", "=", "True", ")", "\n", "\n", "if", "args", ".", "adv_target_uncertain", ":", "\n", "                ", "false_label", "=", "1", "-", "true_label", "\n", "", "else", ":", "\n", "                ", "false_label", "=", "0.5", "*", "torch", ".", "ones", "(", "(", "bs", ",", "args", ".", "number_of_adversaries", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "orien_loss_predictor", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "orientation_prediction", ",", "false_label", ")", "\n", "orien_loss_predictor", "=", "orien_loss_predictor", "*", "args", ".", "adversary_strength", "\n", "#pdb.set_trace()", "\n", "", "else", ":", "\n", "            ", "orien_loss_predictor", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "", "return", "orien_loss_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.adversary_adv_loss": [[145, 172], ["adversary_mixin.toggle_grad", "prediction_reorien.detach", "prediction_reorien.detach.requires_grad_", "adversary_mixin.AdversaryMixin.model", "torch.nn.functional.binary_cross_entropy_with_logits", "correct.float().mean", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda.mean", "torch.tensor().cuda", "correct.float", "compute_grad2().mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "adversary_mixin.compute_grad2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.compute_grad2"], ["", "def", "adversary_adv_loss", "(", "self", ",", "prediction_reorien", ",", "true_label", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", ">=", "args", ".", "warmup_adversary_from", ":", "\n", "# Encourage the adversary to predict the correct orientation", "\n", "            ", "toggle_grad", "(", "self", ".", "model", ".", "adversary_model", ",", "True", ")", "\n", "prediction_reorien_adv", "=", "prediction_reorien", ".", "detach", "(", ")", "\n", "prediction_reorien_adv", ".", "requires_grad_", "(", ")", "#TODO Might not be required", "\n", "orientation_prediction_adv", "=", "self", ".", "model", "(", "prediction_reorien_adv", ",", "adversary", "=", "True", ")", "\n", "orien_loss_adv", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "orientation_prediction_adv", ",", "true_label", ")", "\n", "\n", "# Prediction error for logging", "\n", "correct", "=", "(", "orientation_prediction_adv", ">", "0", ")", ".", "float", "(", ")", "==", "true_label", "\n", "accuracy", "=", "correct", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "#pdb.set_trace()", "\n", "\n", "if", "args", ".", "reg_param", ">", "0", ":", "\n", "                ", "reg", "=", "args", ".", "reg_param", "*", "compute_grad2", "(", "\n", "orientation_prediction_adv", ",", "\n", "prediction_reorien_adv", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "reg", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "reg", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "orien_loss_adv", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "accuracy", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "orientation_prediction_adv", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "", "return", "orien_loss_adv", ",", "orientation_prediction_adv", ".", "mean", "(", ")", ",", "accuracy", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.additional_training_loss_terms": [[173, 223], ["super().additional_training_loss_terms", "[].cuda", "prediction.transpose", "torch.where", "true_label.expand.expand.expand", "prediction_reorien.div.div.expand", "prediction_reorien.div.div.div", "adversary_mixin.AdversaryMixin.predictor_adv_loss", "adversary_mixin.AdversaryMixin.adversary_adv_loss", "Exception", "[].cuda.float", "prediction_reorien.div.div.mean", "prediction_reorien.div.div.std", "prediction_reorien.div.div.register_hook", "prediction.register_hook", "orientation_prediction_adv.register_hook", "reg.register_hook", "adversary_mixin.AdversaryMixin.grad_log", "adversary_mixin.AdversaryMixin.grad_log", "adversary_mixin.AdversaryMixin.grad_log", "adversary_mixin.AdversaryMixin.grad_log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.additional_training_loss_terms", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.predictor_adv_loss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.adversary_adv_loss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.grad_log", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.grad_log", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.grad_log", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.grad_log"], ["", "def", "additional_training_loss_terms", "(", "self", ",", "loss_dict", ",", "batch", ",", "prediction", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n            Adds the orientation adversary terms to the loss_dict\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "loss_dict", ",", "batch", ",", "prediction", ",", "target", "=", "super", "(", ")", ".", "additional_training_loss_terms", "(", "\n", "loss_dict", ",", "batch", ",", "prediction", ",", "target", ")", "\n", "if", "prediction", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"AdversaryMixin only supports Trainers which output prediction from the training_loss\"", ")", "\n", "", "bs", ",", "ch", ",", "h", ",", "w", "=", "prediction", ".", "shape", "\n", "\n", "# Orientation augmentation", "\n", "is_rotated", "=", "batch", "[", "'attrs_dict'", "]", "[", "'rotated'", "]", ".", "cuda", "(", ")", "\n", "prediction_rot", "=", "prediction", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "# If tagged as rotated then rotate (transpose) it back", "\n", "prediction_reorien", "=", "torch", ".", "where", "(", "is_rotated", ",", "prediction_rot", ",", "prediction", ")", "\n", "true_label", "=", "is_rotated", ".", "float", "(", ")", "[", "...", ",", "None", "]", "\n", "true_label", "=", "true_label", ".", "expand", "(", "bs", ",", "args", ".", "number_of_adversaries", ")", "\n", "\n", "# change to three input channels so we can use standard resnet models", "\n", "prediction_reorien", "=", "prediction_reorien", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "# Normalize to std 1 centered", "\n", "prediction_reorien", "=", "prediction_reorien", "-", "prediction_reorien", ".", "mean", "(", ")", "\n", "prediction_reorien", "=", "prediction_reorien", ".", "div", "(", "prediction_reorien", ".", "std", "(", ")", ")", "\n", "\n", "orien_loss_predictor", "=", "self", ".", "predictor_adv_loss", "(", "prediction_reorien", ",", "true_label", ")", "\n", "orien_loss_adv", ",", "opred", ",", "accuracy", ",", "reg", "=", "self", ".", "adversary_adv_loss", "(", "prediction_reorien", ",", "true_label", ")", "\n", "\n", "pred_loss", "=", "loss_dict", "[", "'train_loss'", "]", "\n", "total_loss", "=", "pred_loss", "+", "orien_loss_predictor", "+", "orien_loss_adv", "+", "reg", "\n", "\n", "#pdb.set_trace()", "\n", "loss_dict", "=", "{", "**", "loss_dict", ",", "\n", "'train_loss'", ":", "total_loss", ",", "\n", "'pred_loss'", ":", "pred_loss", ",", "\n", "'pred_orien'", ":", "orien_loss_predictor", ",", "\n", "'accu_orien'", ":", "accuracy", ",", "\n", "'adv_bias'", ":", "opred", ",", "\n", "'adv_orien'", ":", "orien_loss_adv", ",", "\n", "'reg'", ":", "reg", "}", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "# Monitor the contribution from the two loss terms to the predictor", "\n", "            ", "prediction_reorien", ".", "register_hook", "(", "lambda", "g", ":", "self", ".", "grad_log", "(", "g", ",", "\"adversary -> predictor\"", ")", ")", "\n", "prediction", ".", "register_hook", "(", "lambda", "g", ":", "self", ".", "grad_log", "(", "g", ",", "\"predictor + adversary\"", ")", ")", "\n", "orientation_prediction_adv", ".", "register_hook", "(", "lambda", "g", ":", "self", ".", "grad_log", "(", "g", ",", "\"adversary\"", ")", ")", "\n", "reg", ".", "register_hook", "(", "lambda", "g", ":", "self", ".", "grad_log", "(", "g", ",", "\"reg\"", ")", ")", "\n", "\n", "", "return", "loss_dict", ",", "batch", ",", "prediction", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.training_loss_hook": [[224, 242], ["super().training_loss_hook", "logging.info", "logging.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.training_loss_hook"], ["", "def", "training_loss_hook", "(", "self", ",", "progress", ",", "losses", ",", "logging_epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "training_loss_hook", "(", "progress", ",", "losses", ",", "logging_epoch", ")", "\n", "epoch", "=", "self", ".", "runinfo", "[", "\"at_epoch\"", "]", "\n", "if", "epoch", "<", "self", ".", "args", ".", "warmup_adversary_from", ":", "\n", "            ", "return", "\n", "\n", "", "warm", "=", "(", "epoch", ">=", "self", ".", "args", ".", "warmup_adversary_from", ")", "and", "(", "epoch", "<", "self", ".", "args", ".", "adversary_epoch_from", ")", "\n", "\n", "if", "logging_epoch", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "f\"pred: {losses['instantaneous_pred_loss']:1.4f} \"", "\n", "f\"pred or: {losses['instantaneous_pred_orien']:1.4f} \"", "\n", "f\"adv or: {losses['instantaneous_adv_orien']:1.4f} \"", "\n", "f\"acc: {losses['instantaneous_accu_orien']:1.0f} \"", "\n", "f\"bias: {losses['instantaneous_adv_bias']:1.2e} \"", "\n", "f\"reg: {losses['instantaneous_reg']:1.1e} warm: {warm}\"", ")", "\n", "logging", ".", "info", "(", "\n", "f\"Running acc: {losses['average_accu_orien']:1.3f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.AdversaryMixin.grad_log": [[243, 246], ["logging.info", "g.norm().item", "g.norm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm"], ["", "", "def", "grad_log", "(", "self", ",", "g", ",", "name", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f\"    Norm of gradient from {name}: {g.norm().item():1.2e}\"", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad": [[247, 250], ["fastmri.model.parameters", "p.requires_grad_"], "function", ["None"], ["", "", "def", "toggle_grad", "(", "model", ",", "requires_grad", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.compute_grad2": [[251, 261], ["x_in.size", "grad_dout.pow", "grad_dout.pow.view().sum", "torch.autograd.grad", "grad_dout.pow.size", "x_in.size", "grad_dout.pow.view", "d_out.sum"], "function", ["None"], ["", "", "def", "compute_grad2", "(", "d_out", ",", "x_in", ")", ":", "\n", "    ", "batch_size", "=", "x_in", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_out", ".", "sum", "(", ")", ",", "inputs", "=", "x_in", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "x_in", ".", "size", "(", ")", ")", "\n", "reg", "=", "grad_dout2", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "return", "reg", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.__init__": [[29, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "generator", ",", "discriminator", ",", "use_reg", "=", "False", ")", ":", "\n", "        ", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "use_reg", "=", "use_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.generator_loss": [[34, 45], ["fastmri.orientation_adversary.adversary_mixin.toggle_grad", "fastmri.orientation_adversary.adversary_mixin.toggle_grad", "test_adversary.ReferenceTrainer.generator.train", "test_adversary.ReferenceTrainer.discriminator.train", "test_adversary.ReferenceTrainer.generator", "test_adversary.ReferenceTrainer.discriminator", "test_adversary.ReferenceTrainer.compute_loss"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.compute_loss"], ["", "def", "generator_loss", "(", "self", ",", "z", ")", ":", "\n", "        ", "toggle_grad", "(", "self", ".", "generator", ",", "True", ")", "\n", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "discriminator", ".", "train", "(", ")", "\n", "\n", "x_fake", "=", "self", ".", "generator", "(", "z", ")", "\n", "\n", "d_fake", "=", "self", ".", "discriminator", "(", "x_fake", ")", "\n", "gloss", "=", "self", ".", "compute_loss", "(", "d_fake", ",", "0", ")", "\n", "return", "gloss", ",", "x_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.generator_trainstep": [[46, 50], ["test_adversary.ReferenceTrainer.generator_loss", "gloss.backward", "gloss.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.generator_loss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.backward"], ["", "def", "generator_trainstep", "(", "self", ",", "z", ")", ":", "\n", "        ", "gloss", ",", "x_fakes", "=", "self", ".", "generator_loss", "(", "z", ")", "\n", "gloss", ".", "backward", "(", ")", "\n", "return", "gloss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.discriminator_trainstep": [[51, 77], ["fastmri.orientation_adversary.adversary_mixin.toggle_grad", "fastmri.orientation_adversary.adversary_mixin.toggle_grad", "test_adversary.ReferenceTrainer.generator.train", "test_adversary.ReferenceTrainer.discriminator.train", "test_adversary.ReferenceTrainer.requires_grad_", "test_adversary.ReferenceTrainer.discriminator", "test_adversary.ReferenceTrainer.compute_loss", "test_adversary.ReferenceTrainer.backward", "fastmri.orientation_adversary.adversary_mixin.toggle_grad", "torch.no_grad", "test_adversary.ReferenceTrainer.generator", "fastmri.orientation_adversary.adversary_mixin.compute_grad2().mean", "torch.tensor.backward", "torch.tensor", "test_adversary.ReferenceTrainer.item", "torch.tensor.item", "test_adversary.ReferenceTrainer.detach", "fastmri.orientation_adversary.adversary_mixin.compute_grad2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.compute_loss", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.backward", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.backward", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.compute_grad2"], ["", "def", "discriminator_trainstep", "(", "self", ",", "z", ")", ":", "\n", "        ", "toggle_grad", "(", "self", ".", "generator", ",", "False", ")", "\n", "toggle_grad", "(", "self", ".", "discriminator", ",", "True", ")", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "discriminator", ".", "train", "(", ")", "\n", "\n", "# On fake data", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_fake", "=", "self", ".", "generator", "(", "z", ")", "\n", "\n", "", "x_fake", ".", "requires_grad_", "(", ")", "\n", "d_fake", "=", "self", ".", "discriminator", "(", "x_fake", ")", "\n", "dloss", "=", "self", ".", "compute_loss", "(", "d_fake", ",", "1", ")", "\n", "\n", "dloss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "\n", "if", "self", ".", "use_reg", ":", "\n", "            ", "reg", "=", "compute_grad2", "(", "d_fake", ",", "x_fake", ")", ".", "mean", "(", ")", "\n", "reg", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "reg", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n", "", "toggle_grad", "(", "self", ".", "discriminator", ",", "False", ")", "\n", "\n", "\n", "return", "dloss", ".", "item", "(", ")", ",", "reg", ".", "item", "(", ")", ",", "x_fake", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.compute_loss": [[78, 82], ["d_out.new_full", "torch.nn.functional.binary_cross_entropy_with_logits", "d_out.size"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "d_out", ",", "target", ")", ":", "\n", "        ", "targets", "=", "d_out", ".", "new_full", "(", "size", "=", "d_out", ".", "size", "(", ")", ",", "fill_value", "=", "target", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "d_out", ",", "targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.test_adversary": [[83, 153], ["torch.nn.Linear", "torch.nn.Linear", "nn.Linear.train", "nn.Linear.train", "torch.empty().normal_", "torch.empty().normal_.requires_grad_", "torch.ones", "nn.Linear.", "fastmri.orientation_adversary.adversary_mixin.toggle_grad", "nn.Linear.", "torch.nn.functional.binary_cross_entropy_with_logits", "fastmri.orientation_adversary.adversary_mixin.toggle_grad", "prediction_model.detach", "prediction_reorien.detach.requires_grad_", "nn.Linear.", "torch.nn.functional.binary_cross_entropy_with_logits", "correct.float().mean", "total_loss.backward", "nn.Linear.weight.grad.clone", "nn.Linear.weight.grad.clone", "nn.Linear.zero_grad", "nn.Linear.zero_grad", "test_adversary.ReferenceTrainer", "test_adversary.ReferenceTrainer.discriminator_trainstep", "test_adversary.ReferenceTrainer.generator_trainstep", "nn.Linear.weight.grad.clone", "nn.Linear.weight.grad.clone", "torch.allclose", "torch.allclose", "fastmri.orientation_adversary.adversary_mixin.compute_grad2().mean", "torch.zeros_like", "torch.empty", "correct.float", "fastmri.orientation_adversary.adversary_mixin.compute_grad2"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.fastmri.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.toggle_grad", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.models.policy.ThresholdSigmoidMask.backward", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.discriminator_trainstep", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.test_adversary.ReferenceTrainer.generator_trainstep", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.orientation_adversary.adversary_mixin.compute_grad2"], ["", "", "def", "test_adversary", "(", ")", ":", "\n", "    ", "\"\"\" The adversary mixin uses a different way of computing the loss\n        compared to the reference implementation, it only calls backwards once.\n        This unit test just compares this technique to a reference version.\n    \"\"\"", "\n", "use_reg", "=", "True", "\n", "nchan", "=", "10", "\n", "bs", "=", "1", "\n", "prediction_model", "=", "nn", ".", "Linear", "(", "nchan", ",", "nchan", ")", "\n", "adversary_model", "=", "nn", ".", "Linear", "(", "nchan", ",", "1", ")", "\n", "prediction_model", ".", "train", "(", ")", "\n", "adversary_model", ".", "train", "(", ")", "\n", "\n", "data", "=", "torch", ".", "empty", "(", "bs", ",", "10", ")", ".", "normal_", "(", ")", "\n", "data", ".", "requires_grad_", "(", ")", "\n", "\n", "true_label", "=", "torch", ".", "ones", "(", "(", "bs", ",", "1", ")", ")", "\n", "\n", "# Forward pass through prediction model", "\n", "prediction_reorien", "=", "prediction_model", "(", "data", ")", "\n", "\n", "### Apply resnet", "\n", "toggle_grad", "(", "adversary_model", ",", "False", ")", "\n", "orientation_prediction", "=", "adversary_model", "(", "prediction_reorien", ")", "\n", "\n", "# Encourage the predictor to trick the adversary TODO: Should this be 0.5 instead?", "\n", "false_label", "=", "1", "-", "true_label", "\n", "orien_loss_predictor", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "orientation_prediction", ",", "false_label", ")", "\n", "orien_loss_predictor", "=", "orien_loss_predictor", "\n", "\n", "# Encourage the adversary to predict the correct orientation", "\n", "toggle_grad", "(", "adversary_model", ",", "True", ")", "\n", "prediction_reorien_adv", "=", "prediction_reorien", ".", "detach", "(", ")", "\n", "prediction_reorien_adv", ".", "requires_grad_", "(", ")", "#TODO Might not be required", "\n", "orientation_prediction_adv", "=", "adversary_model", "(", "prediction_reorien_adv", ")", "\n", "orien_loss_adv", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "orientation_prediction_adv", ",", "true_label", ")", "\n", "\n", "# Prediction error for logging", "\n", "correct", "=", "(", "orientation_prediction_adv", ">", "0", ")", ".", "float", "(", ")", "==", "true_label", "\n", "accuracy", "=", "correct", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "if", "use_reg", ":", "\n", "        ", "reg", "=", "compute_grad2", "(", "\n", "orientation_prediction_adv", ",", "\n", "prediction_reorien_adv", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "reg", "=", "torch", ".", "zeros_like", "(", "orien_loss_adv", ")", "\n", "\n", "", "total_loss", "=", "orien_loss_predictor", "+", "orien_loss_adv", "+", "reg", "\n", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "adversary_grad", "=", "adversary_model", ".", "weight", ".", "grad", ".", "clone", "(", ")", "\n", "prediction_grad", "=", "prediction_model", ".", "weight", ".", "grad", ".", "clone", "(", ")", "\n", "\n", "adversary_model", ".", "zero_grad", "(", ")", "\n", "prediction_model", ".", "zero_grad", "(", ")", "\n", "\n", "####################################", "\n", "### Now try reference implementation", "\n", "trainer", "=", "ReferenceTrainer", "(", "prediction_model", ",", "adversary_model", ",", "use_reg", "=", "use_reg", ")", "\n", "\n", "dloss", ",", "reg", ",", "_", "=", "trainer", ".", "discriminator_trainstep", "(", "data", ")", "\n", "gloss", "=", "trainer", ".", "generator_trainstep", "(", "data", ")", "\n", "\n", "ref_adversary_grad", "=", "adversary_model", ".", "weight", ".", "grad", ".", "clone", "(", ")", "\n", "ref_prediction_grad", "=", "prediction_model", ".", "weight", ".", "grad", ".", "clone", "(", ")", "\n", "\n", "assert", "torch", ".", "allclose", "(", "adversary_grad", ",", "ref_adversary_grad", ")", "\n", "assert", "torch", ".", "allclose", "(", "prediction_grad", ",", "ref_prediction_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.orientation.Orientation.__init__": [[14, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "after", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "after", "=", "after", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.orientation.Orientation.__call__": [[18, 34], ["torch.tensor().uniform_().item", "orientation.Orientation.after", "isinstance", "torch.tensor().uniform_", "kspace.transpose.transpose.transpose", "kspace.transpose.transpose.transpose", "target.transpose.transpose.transpose", "target.transpose.transpose.transpose", "torch.tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "uniform_", "(", "0", ",", "1", ")", ".", "item", "(", ")", "\n", "\n", "if", "alpha", ">", "0.5", ":", "\n", "            ", "if", "isinstance", "(", "kspace", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "kspace", "=", "kspace", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "# Width/ Height, last dim is imag", "\n", "if", "target", "is", "not", "None", ":", "\n", "                    ", "target", "=", "target", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "kspace", "=", "kspace", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "# Permutes unlike transpose in pytorch", "\n", "if", "target", "is", "not", "None", ":", "\n", "                    ", "target", "=", "target", ".", "transpose", "(", "1", ",", "0", ")", "\n", "", "", "attrs", "[", "'rotated'", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "attrs", "[", "'rotated'", "]", "=", "False", "\n", "", "return", "self", ".", "after", "(", "kspace", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.kspace.KSpaceDataTransform.__init__": [[31, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mask_func", ",", "partition", ",", "use_seed", "=", "True", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.kspace.KSpaceDataTransform.__call__": [[37, 140], ["fastmri.data.transforms.to_tensor", "fastmri.data.transforms.to_tensor", "gc.collect", "gc.collect", "fastmri.data.transforms.apply_mask", "gc.collect", "torch.Tensor", "gc.collect", "gc.collect", "torch.Tensor", "gc.collect", "gc.collect", "torch.mean.view", "dict", "gc.collect", "collections.OrderedDict", "fastmri.data.transforms.coil_compress", "kspace_np.sum", "len", "tuple", "kspace.est_sens_maps", "fastmri.data.transforms.to_tensor", "torch.Tensor", "fastmri.data.transforms.ifft2", "fastmri.data.transforms.complex_abs", "map", "h5py.File", "fastmri.data.transforms.to_tensor", "fastmri.data.transforms.apply_grappa", "h5py.File", "fastmri.data.transforms.to_tensor", "h5py.File", "fastmri.data.transforms.to_tensor", "fastmri.data.transforms.apply_grappa", "fastmri.data.transforms.root_sum_of_squares", "torch.max", "torch.mean", "fastmri.data.transforms.apply_grappa.clone", "fastmri.data.transforms.complex_abs", "fastmri.data.transforms.ifft2"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.coil_compress", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.kspace.est_sens_maps", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_grappa", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.apply_grappa", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.root_sum_of_squares", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_abs", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2"], ["", "def", "__call__", "(", "self", ",", "target_ksp", ",", "target_im", ",", "attrs", ",", "fname", ",", "slice", ")", ":", "\n", "        ", "kspace_np", "=", "target_ksp", "\n", "target_im", "=", "transforms", ".", "to_tensor", "(", "target_im", ")", "\n", "target_ksp", "=", "transforms", ".", "to_tensor", "(", "target_ksp", ")", "\n", "\n", "gc", ".", "collect", "(", ")", "\n", "if", "self", ".", "args", ".", "coil_compress_coils", ":", "\n", "            ", "target_ksp", "=", "transforms", ".", "coil_compress", "(", "target_ksp", ",", "self", ".", "args", ".", "coil_compress_coils", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "calculate_offsets_directly", ":", "\n", "            ", "krow", "=", "kspace_np", ".", "sum", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "# flatten to a single row", "\n", "width", "=", "len", "(", "krow", ")", "\n", "offset", "=", "(", "krow", "!=", "0", ")", ".", "argmax", "(", ")", "\n", "acq_start", "=", "offset", "\n", "acq_end", "=", "width", "-", "(", "krow", "[", ":", ":", "-", "1", "]", "!=", "0", ")", ".", "argmax", "(", ")", "#exclusive", "\n", "", "else", ":", "\n", "            ", "offset", "=", "None", "# Mask will pick randomly", "\n", "if", "self", ".", "partition", "==", "'val'", "and", "'mask_offset'", "in", "attrs", ":", "\n", "                ", "offset", "=", "attrs", "[", "'mask_offset'", "]", "\n", "\n", "", "acq_start", "=", "attrs", "[", "'padding_left'", "]", "\n", "acq_end", "=", "attrs", "[", "'padding_right'", "]", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "input_ksp", ",", "mask", ",", "num_lf", "=", "transforms", ".", "apply_mask", "(", "\n", "target_ksp", ",", "self", ".", "mask_func", ",", "\n", "seed", ",", "offset", ",", "\n", "(", "acq_start", ",", "acq_end", ")", ")", "\n", "\n", "#pdb.set_trace()", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "sens_map", "=", "torch", ".", "Tensor", "(", "0", ")", "\n", "if", "self", ".", "args", ".", "compute_sensitivities", ":", "\n", "            ", "start_of_center_mask", "=", "(", "kspace_np", ".", "shape", "[", "-", "1", "]", "-", "num_lf", "+", "1", ")", "//", "2", "\n", "end_of_center_mask", "=", "start_of_center_mask", "+", "num_lf", "\n", "sens_map", "=", "est_sens_maps", "(", "kspace_np", ",", "start_of_center_mask", ",", "end_of_center_mask", ")", "\n", "sens_map", "=", "transforms", ".", "to_tensor", "(", "sens_map", ")", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "grappa_input", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "self", ".", "args", ".", "grappa_input_path", "/", "self", ".", "partition", "/", "fname", ",", "'r'", ")", "as", "hf", ":", "\n", "                ", "kernel", "=", "transforms", ".", "to_tensor", "(", "hf", "[", "'kernel'", "]", "[", "slice", "]", ")", "\n", "input_ksp", "=", "transforms", ".", "apply_grappa", "(", "input_ksp", ",", "kernel", ",", "target_ksp", ",", "mask", ")", "\n", "\n", "", "", "gc", ".", "collect", "(", ")", "\n", "\n", "grappa_kernel", "=", "torch", ".", "Tensor", "(", "0", ")", "\n", "if", "self", ".", "args", ".", "grappa_path", "is", "not", "None", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "self", ".", "args", ".", "grappa_path", "/", "self", ".", "partition", "/", "fname", ",", "'r'", ")", "as", "hf", ":", "\n", "                ", "grappa_kernel", "=", "transforms", ".", "to_tensor", "(", "hf", "[", "'kernel'", "]", "[", "slice", "]", ")", "\n", "\n", "", "", "gc", ".", "collect", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "grappa_target", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "self", ".", "args", ".", "grappa_target_path", "/", "self", ".", "partition", "/", "fname", ",", "'r'", ")", "as", "hf", ":", "\n", "                ", "kernel", "=", "transforms", ".", "to_tensor", "(", "hf", "[", "'kernel'", "]", "[", "slice", "]", ")", "\n", "target_ksp", "=", "transforms", ".", "apply_grappa", "(", "target_ksp", ".", "clone", "(", ")", ",", "kernel", ",", "target_ksp", ",", "mask", ",", "sample_accel", "=", "2", ")", "\n", "target_im", "=", "transforms", ".", "root_sum_of_squares", "(", "transforms", ".", "complex_abs", "(", "transforms", ".", "ifft2", "(", "target_ksp", ")", ")", ")", "\n", "\n", "", "", "gc", ".", "collect", "(", ")", "\n", "\n", "\n", "if", "not", "self", ".", "args", ".", "scale_inputs", ":", "\n", "            ", "scale", "=", "torch", ".", "Tensor", "(", "[", "1.", "]", ")", "\n", "", "else", ":", "\n", "            ", "input_im", "=", "transforms", ".", "ifft2", "(", "input_ksp", ")", "\n", "abs_input", "=", "transforms", ".", "complex_abs", "(", "input_im", ")", "\n", "del", "input_im", "\n", "\n", "if", "self", ".", "args", ".", "scale_type", "==", "'max'", ":", "\n", "                ", "scale", "=", "torch", ".", "max", "(", "abs_input", ")", "\n", "", "else", ":", "\n", "                ", "scale", "=", "torch", ".", "mean", "(", "abs_input", ")", "\n", "\n", "", "del", "abs_input", "\n", "\n", "input_ksp", "/=", "scale", "\n", "target_ksp", "/=", "scale", "\n", "target_im", "/=", "scale", "\n", "\n", "", "scale", "=", "scale", ".", "view", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "attrs_dict", "=", "dict", "(", "**", "attrs", ")", "\n", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "#pdb.set_trace()", "\n", "\n", "return", "OrderedDict", "(", "\n", "input", "=", "input_ksp", ",", "\n", "target", "=", "target_ksp", ",", "\n", "target_im", "=", "target_im", ",", "\n", "mask", "=", "mask", ",", "\n", "grappa_kernel", "=", "grappa_kernel", ",", "\n", "scale", "=", "scale", ",", "\n", "attrs_dict", "=", "attrs_dict", ",", "\n", "fname", "=", "fname", ",", "\n", "slice", "=", "slice", ",", "\n", "num_lf", "=", "num_lf", ",", "\n", "sens_map", "=", "sens_map", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.kspace.est_sens_maps": [[18, 28], ["numpy.zeros", "numpy.where", "numpy.exp", "numpy.fft.fftshift", "numpy.sqrt", "numpy.fft.ifft2", "numpy.sum", "numpy.fft.ifftshift", "numpy.abs", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifft2", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift"], ["def", "est_sens_maps", "(", "kspace", ",", "start", ",", "end", ",", "apodize_hori", "=", "0.07", ")", ":", "\n", "    ", "num_coils", ",", "height", ",", "width", "=", "kspace", ".", "shape", "\n", "mask", "=", "np", ".", "zeros", "(", "width", ",", "dtype", "=", "kspace", ".", "dtype", ")", "\n", "mask", "[", "start", ":", "end", "]", "=", "1", "\n", "kspace", "=", "np", ".", "where", "(", "mask", ",", "kspace", ",", "0", ")", "\n", "mask", "=", "np", ".", "exp", "(", "-", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "width", ")", "/", "apodize_hori", ")", "**", "2", ",", "dtype", "=", "kspace", ".", "dtype", ")", "\n", "kspace", "=", "kspace", "*", "mask", "\n", "sens_maps", "=", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "ifft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "kspace", ")", ",", "norm", "=", "'ortho'", ")", ")", "\n", "sens_maps", "/=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "sens_maps", ")", "**", "2", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "sens_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.transforms.__init__.load": [[13, 30], ["logging.info", "name.rsplit", "len", "importlib.import_module", "getattr", "Exception", "Exception"], "function", ["None"], ["# package is not installed", "\n", "    ", "import", "warnings", "\n", "\n", "warnings", ".", "warn", "(", "\"Could not retrieve fastmri version!\"", ")", "\n", "\n", "\n", "", "from", ".", "coil_combine", "import", "rss", ",", "rss_complex", "\n", "from", ".", "fftc", "import", "fft2c_new", "as", "fft2c", "\n", "from", ".", "fftc", "import", "fftshift", "\n", "from", ".", "fftc", "import", "ifft2c_new", "as", "ifft2c", "\n", "from", ".", "fftc", "import", "ifftshift", ",", "roll", "\n", "from", ".", "losses", "import", "SSIMLoss", "\n", "from", ".", "math", "import", "(", "\n", "complex_abs", ",", "\n", "complex_abs_sq", ",", "\n", "complex_conj", ",", "\n", "complex_mul", ",", "\n", "tensor_to_complex_np", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.optimizer.__init__.load": [[12, 33], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.LBFGS", "torch.optim.LBFGS", "Exception"], "function", ["None"], ["", "except", "PackageNotFoundError", ":", "\n", "# package is not installed", "\n", "    ", "import", "warnings", "\n", "\n", "warnings", ".", "warn", "(", "\"Could not retrieve fastmri version!\"", ")", "\n", "\n", "\n", "", "from", ".", "coil_combine", "import", "rss", ",", "rss_complex", "\n", "from", ".", "fftc", "import", "fft2c_new", "as", "fft2c", "\n", "from", ".", "fftc", "import", "fftshift", "\n", "from", ".", "fftc", "import", "ifft2c_new", "as", "ifft2c", "\n", "from", ".", "fftc", "import", "ifftshift", ",", "roll", "\n", "from", ".", "losses", "import", "SSIMLoss", "\n", "from", ".", "math", "import", "(", "\n", "complex_abs", ",", "\n", "complex_abs_sq", ",", "\n", "complex_conj", ",", "\n", "complex_mul", ",", "\n", "tensor_to_complex_np", ",", "\n", ")", "\n", "from", ".", "utils", "import", "convert_fnames_to_v2", ",", "save_reconstructions", "\n", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.__init__": [[59, 62], ["runstats.Statistics"], "methods", ["None"], ["\n", "", "METRIC_FUNCS", "=", "dict", "(", "\n", "MSE", "=", "mse", ",", "\n", "NMSE", "=", "nmse", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.push": [[64, 67], ["METRIC_FUNCS.items", "evaluate.Metrics.metrics[].push", "func"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.push"], ["SSIM", "=", "ssim", ",", "\n", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.means": [[68, 71], ["stat.mean", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["class", "Metrics", ":", "\n", "    ", "\"\"\"\n    Maintains running statistics for a given collection of metrics.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.stddevs": [[73, 76], ["stat.stddev", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric_funcs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.__repr__": [[78, 84], ["evaluate.Metrics.means", "evaluate.Metrics.stddevs", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.means", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.stddevs"], ["\n", "self", ".", "metrics", "=", "{", "metric", ":", "Statistics", "(", ")", "for", "metric", "in", "metric_funcs", "}", "\n", "\n", "", "def", "push", "(", "self", ",", "target", ",", "recons", ")", ":", "\n", "        ", "for", "metric", ",", "func", "in", "METRIC_FUNCS", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "metrics", "[", "metric", "]", ".", "push", "(", "func", "(", "target", ",", "recons", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.mse": [[24, 27], ["numpy.mean"], "function", ["None"], ["\n", "\n", "", "def", "nmse", "(", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Compute Normalized Mean Squared Error (NMSE)\"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.nmse": [[29, 32], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.model.var_net.norm"], ["\n", "\n", "", "def", "psnr", "(", "\n", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ",", "maxval", ":", "Optional", "[", "float", "]", "=", "None", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.psnr": [[34, 37], ["peak_signal_noise_ratio", "gt.max"], "function", ["None"], ["    ", "\"\"\"Compute Peak Signal to Noise Ratio metric (PSNR)\"\"\"", "\n", "if", "maxval", "is", "None", ":", "\n", "        ", "maxval", "=", "gt", ".", "max", "(", ")", "\n", "", "return", "peak_signal_noise_ratio", "(", "gt", ",", "pred", ",", "data_range", "=", "maxval", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.ssim": [[39, 43], ["skimage.metrics.structural_similarity", "gt.transpose", "pred.transpose", "gt.max"], "function", ["None"], ["\n", "", "def", "ssim", "(", "\n", "gt", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ",", "maxval", ":", "Optional", "[", "float", "]", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Compute Structural Similarity Index Metric (SSIM)\"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.evaluate": [[87, 101], ["evaluate.Metrics", "args.target_path.iterdir", "h5py.File", "h5py.File", "evaluate.Metrics.push"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.evaluate.Metrics.push"], ["\n", "", "def", "stddevs", "(", "self", ")", ":", "\n", "        ", "return", "{", "metric", ":", "stat", ".", "stddev", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "}", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "means", "=", "self", ".", "means", "(", ")", "\n", "stddevs", "=", "self", ".", "stddevs", "(", ")", "\n", "metric_names", "=", "sorted", "(", "list", "(", "means", ")", ")", "\n", "return", "\" \"", ".", "join", "(", "\n", "f\"{name} = {means[name]:.4g} +/- {2 * stddevs[name]:.4g}\"", "\n", "for", "name", "in", "metric_names", "\n", ")", "\n", "\n", "\n", "", "", "def", "evaluate", "(", "args", ",", "recons_key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.image_grid.grid": [[21, 126], ["len", "len", "int", "numpy.zeros", "range", "numpy.clip", "PIL.Image.fromarray", "str", "textwrap.fill", "PIL.ImageDraw.Draw", "PIL.ImageFont.load_default", "ImageDraw.Draw.text", "math.ceil", "image_grid.grid.block_location"], "function", ["None"], ["def", "grid", "(", "image_blocks", ",", "losses", "=", "None", ",", "runinfo", "=", "None", ",", "header_height", "=", "300", ")", ":", "\n", "    ", "\"\"\"\n        Pass in a list of image blocks i.e. sets of images to be viewed side-by-side\n        in the grid. A header with runinfo is added.\n    \"\"\"", "\n", "nimages", "=", "len", "(", "image_blocks", ")", "\n", "assert", "nimages", "!=", "0", "\n", "\n", "images_per_block", "=", "len", "(", "image_blocks", "[", "0", "]", ")", "\n", "assert", "images_per_block", "!=", "0", "\n", "\n", "# Assume all images have the same width and height.", "\n", "height", "=", "image_blocks", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "width", "=", "image_blocks", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "2", "]", "\n", "\n", "caption_height", "=", "20", "\n", "grid_width", "=", "1170", "\n", "\n", "pad_width", "=", "width", "+", "2", "\n", "pad_height", "=", "height", "+", "2", "\n", "block_width", "=", "images_per_block", "*", "pad_width", "\n", "if", "block_width", ">", "grid_width", ":", "\n", "        ", "grid_width", "=", "block_width", "\n", "\n", "", "grid_block_width", "=", "grid_width", "//", "block_width", "\n", "\n", "grid_block_height", "=", "int", "(", "math", ".", "ceil", "(", "nimages", "/", "grid_block_width", ")", ")", "\n", "grid_height", "=", "grid_block_height", "*", "(", "pad_height", "+", "caption_height", ")", "\n", "\n", "def", "block_location", "(", "i", ")", ":", "\n", "        ", "row", "=", "header_height", "+", "(", "pad_height", "+", "caption_height", ")", "*", "(", "i", "//", "grid_block_width", ")", "\n", "col", "=", "block_width", "*", "int", "(", "i", "%", "grid_block_width", ")", "\n", "return", "row", ",", "col", "\n", "\n", "", "ar", "=", "np", ".", "zeros", "(", "[", "header_height", "+", "grid_height", ",", "grid_width", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "nimages", ")", ":", "\n", "        ", "row", ",", "col", "=", "block_location", "(", "i", ")", "\n", "\n", "# Blue border around first image (this could correspond to ground truth)", "\n", "ar", "[", "row", ":", "(", "row", "+", "height", "+", "2", ")", ",", "col", ":", "(", "col", "+", "width", "+", "2", ")", ",", "2", "]", "=", "0.8", "\n", "for", "image", "in", "image_blocks", "[", "i", "]", ":", "\n", "            ", "ar", "[", "(", "row", "+", "1", ")", ":", "(", "row", "+", "height", "+", "1", ")", ",", "(", "col", "+", "1", ")", ":", "(", "col", "+", "width", "+", "1", ")", ",", ":", "]", "=", "image", "[", "0", ",", ":", ",", ":", "]", "[", "...", ",", "None", "]", "\n", "col", "+=", "pad_width", "\n", "\n", "", "", "ar", "*=", "255", "\n", "ar", "=", "np", ".", "clip", "(", "ar", ",", "0", ",", "255", ")", "\n", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "ar", ".", "astype", "(", "'uint8'", ")", ",", "mode", "=", "'RGB'", ")", "\n", "\n", "if", "runinfo", "is", "None", ":", "\n", "        ", "return", "img_pil", "\n", "\n", "### Header part", "\n", "", "header_txt", "=", "str", "(", "runinfo", "[", "\"args\"", "]", ")", "\n", "text_width", "=", "160", "\n", "header_txt", "=", "textwrap", ".", "fill", "(", "header_txt", ",", "width", "=", "text_width", ")", "\n", "if", "len", "(", "header_txt", ")", ">", "text_width", "*", "9", ":", "\n", "        ", "header_txt", "=", "header_txt", "[", ":", "text_width", "*", "10", "]", "\n", "\n", "", "try", ":", "\n", "        ", "header_txt", "+=", "f\"\\n Current epoch {runinfo['at_epoch']}\"", "\n", "#pdb.set_trace()", "\n", "dev_losses", "=", "runinfo", "[", "\"dev_losses\"", "]", "\n", "if", "len", "(", "dev_losses", ")", "<", "5", ":", "\n", "            ", "indexes", "=", "range", "(", "len", "(", "dev_losses", ")", ")", "\n", "", "elif", "len", "(", "dev_losses", ")", "<", "25", ":", "\n", "            ", "indexes", "=", "range", "(", "0", ",", "len", "(", "dev_losses", ")", ",", "5", ")", "\n", "", "else", ":", "\n", "            ", "indexes", "=", "range", "(", "0", ",", "len", "(", "dev_losses", ")", ",", "10", ")", "\n", "", "indexes", "=", "list", "(", "indexes", ")", "\n", "\n", "current", "=", "len", "(", "dev_losses", ")", "-", "1", "\n", "if", "indexes", "[", "-", "1", "]", "!=", "current", ":", "\n", "            ", "indexes", ".", "append", "(", "current", ")", "\n", "\n", "", "for", "i", "in", "indexes", ":", "\n", "            ", "dl", "=", "dev_losses", "[", "i", "]", "\n", "caption", "=", "\"\"", "\n", "for", "k", ",", "v", "in", "dl", ".", "items", "(", ")", ":", "\n", "                ", "loss", "=", "v", "\n", "caption", "+=", "f\" {k}: {loss:1.5f}\"", "\n", "", "header_txt", "+=", "f\"\\n Epoch {i:3d} losses | {caption}\"", "\n", "", "", "except", ":", "\n", "### Supports runinfo missing losses by fallback to except", "\n", "        ", "pass", "\n", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "img_pil", ")", "\n", "font", "=", "ImageFont", ".", "load_default", "(", ")", "\n", "draw", ".", "text", "(", "(", "5", ",", "5", ")", ",", "header_txt", ",", "(", "255", ",", "255", ",", "255", ")", ",", "font", "=", "font", ")", "\n", "\n", "# Draw captions", "\n", "if", "losses", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "nimages", ")", ":", "\n", "            ", "row", ",", "col", "=", "block_location", "(", "i", ")", "\n", "caption", "=", "\"\"", "\n", "# if losses is a dict, put all the losses in the caption", "\n", "if", "isinstance", "(", "losses", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "                    ", "loss", "=", "v", "[", "i", "]", "\n", "caption", "+=", "f\" {k}: {loss:1.5f}\"", "\n", "", "", "else", ":", "\n", "                ", "caption", "=", "f\"{losses[i]:1.5f}\"", "\n", "", "draw", ".", "text", "(", "(", "col", "+", "pad_width", "+", "3", ",", "row", "+", "height", "+", "5", ")", ",", "caption", ",", "(", "255", ",", "255", ",", "255", ")", ",", "font", "=", "font", ")", "\n", "\n", "", "", "return", "img_pil", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.__init__": [[36, 51], ["numpy.random.RandomState"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.__call__": [[52, 69], ["subsample.MaskFunc.sample_masks", "torch.max", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MagicMaskFraction.sample_masks"], ["self", ",", "\n", "center_fractions", ":", "Sequence", "[", "float", "]", ",", "\n", "accelerations", ":", "Sequence", "[", "int", "]", ",", "\n", "allow_any_combination", ":", "bool", "=", "False", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask": [[70, 76], ["torch.from_numpy", "torch.from_numpy.reshape().astype", "torch.from_numpy.reshape"], "methods", ["None"], ["\n", "if", "len", "(", "center_fractions", ")", "!=", "len", "(", "accelerations", ")", "and", "not", "allow_any_combination", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of center fractions should match number of accelerations \"", "\n", "\"if allow_any_combination is False.\"", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.center_mask": [[77, 87], ["numpy.zeros", "numpy.zeros.sum"], "methods", ["None"], ["", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "allow_any_combination", "=", "allow_any_combination", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "", "def", "__call__", "(", "\n", "self", ",", "\n", "shape", ":", "Sequence", "[", "int", "]", ",", "\n", "offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.accel_mask": [[88, 94], ["Exception"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.sample_masks": [[95, 101], ["subsample.MaskFunc.choose_acceleration", "subsample.MaskFunc.reshape_mask", "subsample.MaskFunc.reshape_mask", "subsample.MaskFunc.center_mask", "subsample.MaskFunc.accel_mask"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.center_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.RandomMask.accel_mask"], ["\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration": [[102, 109], ["subsample.MaskFunc.rng.seed", "subsample.MaskFunc.rng.randint", "subsample.MaskFunc.rng.randint", "len", "len"], "methods", ["None"], ["            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_mask", ",", "accel_mask", ",", "num_low_frequencies", "=", "self", ".", "sample_mask", "(", "\n", "shape", ",", "offset", "\n", ")", "\n", "\n", "# combine masks together", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.EquiSpacedMask.accel_mask": [[118, 125], ["numpy.zeros", "random.randrange"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MagicMask.accel_mask": [[132, 158], ["numpy.zeros", "numpy.zeros", "numpy.flip", "numpy.concatenate", "numpy.fft.fftshift", "random.randrange"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_low_frequencies", "=", "round", "(", "num_cols", "*", "center_fraction", ")", "\n", "center_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_center_mask", "(", "shape", ",", "num_low_frequencies", ")", ",", "shape", "\n", ")", "\n", "acceleration_mask", "=", "self", ".", "reshape_mask", "(", "\n", "self", ".", "calculate_acceleration_mask", "(", "\n", "num_cols", ",", "acceleration", ",", "offset", ",", "num_low_frequencies", "\n", ")", ",", "\n", "shape", ",", "\n", ")", "\n", "\n", "return", "center_mask", ",", "acceleration_mask", ",", "num_low_frequencies", "\n", "\n", "", "def", "reshape_mask", "(", "self", ",", "mask", ":", "np", ".", "ndarray", ",", "shape", ":", "Sequence", "[", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Reshape mask to desired output shape.\"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MagicMaskFraction.sample_masks": [[160, 168], ["subsample.MagicMaskFraction.choose_acceleration", "int", "subsample.MagicMaskFraction.reshape_mask", "subsample.MagicMaskFraction.reshape_mask", "round", "subsample.MagicMaskFraction.center_mask", "subsample.MagicMaskFraction.accel_mask"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.reshape_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.center_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.RandomMask.accel_mask"], ["acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MagicMaskFraction.accel_mask": [[169, 200], ["numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.around().astype", "numpy.arange", "numpy.around().astype", "numpy.flip", "numpy.concatenate", "numpy.fft.fftshift", "random.randrange", "numpy.around", "numpy.around"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "calculate_center_mask", "(", "\n", "self", ",", "shape", ":", "Sequence", "[", "int", "]", ",", "num_low_freqs", ":", "int", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Build center mask based on number of low frequencies.\n\n        Args:\n            shape: Shape of k-space to mask.\n            num_low_freqs: Number of low-frequency lines to sample.\n\n        Returns:\n            A mask for hte low spatial frequencies of k-space.\n        \"\"\"", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "1", "\n", "assert", "mask", ".", "sum", "(", ")", "==", "num_low_freqs", "\n", "\n", "return", "mask", "\n", "\n", "", "def", "choose_acceleration", "(", "self", ")", ":", "\n", "        ", "\"\"\"Choose acceleration based on class parameters.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.EquiSpacedMaskV2.accel_mask": [[206, 214], ["numpy.zeros", "random.randrange"], "methods", ["None"], ["            ", "choice", "=", "self", ".", "rng", ".", "randint", "(", "len", "(", "self", ".", "center_fractions", ")", ")", "\n", "return", "self", ".", "center_fractions", "[", "choice", "]", ",", "self", ".", "accelerations", "[", "choice", "]", "\n", "\n", "\n", "", "", "", "class", "RandomMaskFunc", "(", "MaskFunc", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MagicMaskV2.accel_mask": [[219, 250], ["numpy.zeros", "numpy.zeros", "numpy.flip", "numpy.concatenate", "numpy.fft.fftshift", "random.randrange"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift"], ["\n", "\n", "def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "prob", "=", "(", "num_cols", "/", "acceleration", "-", "num_low_frequencies", ")", "/", "(", "\n", "num_cols", "-", "num_low_frequencies", "\n", ")", "\n", "\n", "return", "self", ".", "rng", ".", "uniform", "(", "size", "=", "num_cols", ")", "<", "prob", "\n", "\n", "\n", "", "", "class", "EquiSpacedMaskFunc", "(", "MaskFunc", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.RandomMask.accel_mask": [[269, 274], ["subsample.RandomMask.rng.uniform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.RandomMaskFraction.__call__": [[277, 294], ["subsample.RandomMaskFraction.choose_acceleration", "int", "torch.from_numpy", "round", "subsample.RandomMaskFraction.rng.uniform", "torch.from_numpy.reshape().astype", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration"], ["            ", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "high", "=", "round", "(", "acceleration", ")", ")", "\n", "\n", "", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "[", "offset", ":", ":", "acceleration", "]", "=", "1", "\n", "\n", "return", "mask", "\n", "\n", "\n", "", "", "class", "EquispacedMaskFractionFunc", "(", "MaskFunc", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.EquiSpacedMaskFraction.__call__": [[297, 322], ["subsample.EquiSpacedMaskFraction.choose_acceleration", "int", "numpy.zeros", "numpy.arange", "numpy.around().astype", "torch.from_numpy", "round", "random.randrange", "torch.from_numpy.reshape().astype", "round", "numpy.around", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.MaskFunc.choose_acceleration"], ["\n", "\n", "def", "calculate_acceleration_mask", "(", "\n", "self", ",", "\n", "num_cols", ":", "int", ",", "\n", "acceleration", ":", "int", ",", "\n", "offset", ":", "Optional", "[", "int", "]", ",", "\n", "num_low_frequencies", ":", "int", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.mask_factory": [[14, 33], ["subsample.RandomMask", "subsample.RandomMaskFraction", "subsample.EquiSpacedMask", "subsample.MagicMask", "subsample.MagicMaskFraction", "subsample.EquiSpacedMaskV2", "subsample.EquiSpacedMaskFraction", "subsample.MagicMaskV2", "Exception"], "function", ["None"], ["\n", "@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ":", "np", ".", "random", ".", "RandomState", ",", "seed", ":", "Optional", "[", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "]", ")", ":", "\n", "    ", "\"\"\"A context manager for temporarily adjusting the random seed.\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "pass", "\n", "", "", "else", ":", "\n", "        ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "rng", ".", "set_state", "(", "state", ")", "\n", "\n", "\n", "", "", "", "class", "MaskFunc", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__": [[89, 95], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__init__"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__len__": [[96, 98], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.CallbackDataset.__getitem__": [[99, 101], ["utils.CallbackDataset.callback"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.save_reconstructions": [[13, 28], ["out_dir.mkdir", "reconstructions.items", "h5py.File", "f.create_dataset"], "function", ["None"], ["\n", "\n", "def", "save_reconstructions", "(", "reconstructions", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "out_dir", ":", "Path", ")", ":", "\n", "    ", "\"\"\"\n    Save reconstruction images.\n\n    This function writes to h5 files that are appropriate for submission to the\n    leaderboard.\n\n    Args:\n        reconstructions: A dictionary mapping input filenames to corresponding\n            reconstructions.\n        out_dir: Path to the output directory where the reconstructions should\n            be saved.\n    \"\"\"", "\n", "out_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.tensor_to_complex_np": [[30, 41], ["data.numpy.numpy"], "function", ["None"], ["        ", "with", "h5py", ".", "File", "(", "out_dir", "/", "fname", ",", "\"w\"", ")", "as", "hf", ":", "\n", "            ", "hf", ".", "create_dataset", "(", "\"reconstruction\"", ",", "data", "=", "recons", ")", "\n", "\n", "\n", "", "", "", "def", "convert_fnames_to_v2", "(", "path", ":", "Path", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.create_submission_file": [[43, 84], ["dict", "dict", "ValueError", "open", "json.dump"], "function", ["None"], ["\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Path does not exist\"", ")", "\n", "\n", "", "for", "fname", "in", "path", ".", "glob", "(", "\"*.h5\"", ")", ":", "\n", "        ", "if", "not", "fname", ".", "name", "[", "-", "6", ":", "]", "==", "\"_v2.h5\"", ":", "\n", "            ", "fname", ".", "rename", "(", "path", "/", "(", "fname", ".", "stem", "+", "\"_v2.h5\"", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.utils.host_memory_usage_in_gb": [[102, 127], ["gc.collect", "gc.disable", "gc.get_objects", "gc.enable", "tensor.storage().data_ptr", "visited_data.append", "tensor.storage().size", "tensor.storage().element_size", "torch.is_tensor", "tensor.storage", "tensor.storage", "tensor.storage"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.test.test_subsample.test_mask_reuse": [[19, 31], ["pytest.mark.parametrize", "RandomMask", "RandomMask.", "RandomMask.", "RandomMask.", "torch.all", "torch.all", "round", "round", "round"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_low_frequencies, accelerations, batch_size, dim\"", ",", "[", "\n", "(", "[", "round", "(", "0.2", "*", "320", ")", "]", ",", "[", "4", "]", ",", "4", ",", "320", ")", ",", "\n", "(", "[", "round", "(", "0.2", "*", "368", ")", ",", "round", "(", "0.4", "*", "368", ")", "]", ",", "[", "4", ",", "8", "]", ",", "2", ",", "368", ")", ",", "\n", "]", ")", "\n", "def", "test_mask_reuse", "(", "num_low_frequencies", ",", "accelerations", ",", "batch_size", ",", "dim", ")", ":", "\n", "    ", "mask_func", "=", "RandomMask", "(", "num_low_frequencies", ",", "accelerations", ")", "\n", "shape", "=", "(", "batch_size", ",", "dim", ",", "dim", ",", "2", ")", "\n", "mask1", ",", "_", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "mask2", ",", "_", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "mask3", ",", "_", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "assert", "torch", ".", "all", "(", "mask1", "==", "mask2", ")", "\n", "assert", "torch", ".", "all", "(", "mask2", "==", "mask3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.test.test_subsample.test_mask_low_freqs": [[33, 52], ["pytest.mark.parametrize", "RandomMask", "RandomMask.", "list", "numpy.all", "mask[].numpy", "round", "round", "round"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_low_frequencies, accelerations, batch_size, dim\"", ",", "[", "\n", "(", "[", "round", "(", "0.2", "*", "320", ")", "]", ",", "[", "4", "]", ",", "4", ",", "320", ")", ",", "\n", "(", "[", "round", "(", "0.2", "*", "368", ")", ",", "round", "(", "0.4", "*", "368", ")", "]", ",", "[", "4", ",", "8", "]", ",", "2", ",", "368", ")", ",", "\n", "]", ")", "\n", "def", "test_mask_low_freqs", "(", "num_low_frequencies", ",", "accelerations", ",", "batch_size", ",", "dim", ")", ":", "\n", "    ", "mask_func", "=", "RandomMask", "(", "num_low_frequencies", ",", "accelerations", ")", "\n", "shape", "=", "(", "batch_size", ",", "dim", ",", "dim", ",", "2", ")", "\n", "mask", ",", "_", "=", "mask_func", "(", "shape", ",", "seed", "=", "123", ")", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "dim", "\n", "assert", "list", "(", "mask", ".", "shape", ")", "==", "mask_shape", "\n", "\n", "num_low_freqs_matched", "=", "False", "\n", "for", "num_low_freqs", "in", "num_low_frequencies", ":", "\n", "####        num_low_freqs = round(dim * center_frac)", "\n", "        ", "pad", "=", "(", "dim", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "if", "np", ".", "all", "(", "mask", "[", "pad", ":", "(", "pad", "+", "num_low_freqs", ")", "]", ".", "numpy", "(", ")", "==", "1", ")", ":", "\n", "            ", "num_low_freqs_matched", "=", "True", "\n", "", "", "assert", "num_low_freqs_matched", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_fastMRI.test.test_subsample.test_magic_mask": [[53, 99], ["pytest.mark.parametrize", "MagicMask", "MagicMask.accel_mask", "numpy.random.normal", "numpy.fft.ifftshift", "numpy.fft.fft", "numpy.fft.fftshift", "numpy.fft.ifftshift", "numpy.fft.ifft", "numpy.fft.fftshift", "to_tensor", "torch.cat", "range", "range", "cmath.exp", "transforms.complex_scalar_to_tensor", "transforms.complex_mult", "torch.allclose", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.facebookresearch_fastMRI.common.subsample.RandomMask.accel_mask", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.ifftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.fftshift", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_scalar_to_tensor", "home.repos.pwc.inspect_result.facebookresearch_fastMRI.data.transforms.complex_mult"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n\"", ",", "range", "(", "12", ",", "20", ",", "4", ")", ")", "\n", "def", "test_magic_mask", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n        It's hard to test the behavior for widths that are non-multiples of accel.\n    \"\"\"", "\n", "offset", "=", "None", "\n", "accel", "=", "4", "\n", "mask_func", "=", "MagicMask", "(", "[", "0", "]", ",", "[", "4", "]", ")", "\n", "mask", "=", "mask_func", ".", "accel_mask", "(", "n", ",", "accel", ",", "offset", "=", "0", ",", "num_low_frequencies", "=", "0", ")", "\n", "\n", "### Apply mask in fft space to a random image then ifft back", "\n", "\n", "original", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "n", ")", "\n", "#original = np.zeros(n)", "\n", "#original[3] = 1.0", "\n", "\n", "data", "=", "np", ".", "fft", ".", "ifftshift", "(", "original", ")", "\n", "data", "=", "np", ".", "fft", ".", "fft", "(", "data", ",", "norm", "=", "\"ortho\"", ")", "\n", "data", "=", "np", ".", "fft", ".", "fftshift", "(", "data", ")", "\n", "\n", "#pdb.set_trace()", "\n", "data", "=", "data", "*", "mask", "+", "0.0", "\n", "\n", "data", "=", "np", ".", "fft", ".", "ifftshift", "(", "data", ")", "\n", "data", "=", "np", ".", "fft", ".", "ifft", "(", "data", ",", "norm", "=", "\"ortho\"", ")", "\n", "image", "=", "np", ".", "fft", ".", "fftshift", "(", "data", ")", "\n", "\n", "image", "=", "to_tensor", "(", "image", ")", "\n", "### Check", "\n", "image_padded", "=", "torch", ".", "cat", "(", "(", "image", ",", "image", ")", ",", "dim", "=", "0", ")", "\n", "for", "r", "in", "range", "(", "accel", ")", ":", "\n", "        ", "shift", "=", "(", "r", "*", "n", ")", "//", "accel", "\n", "remainder", "=", "(", "r", "*", "n", ")", "%", "accel", "\n", "delta", "=", "remainder", "/", "accel", "\n", "omega", "=", "cmath", ".", "exp", "(", "-", "2j", "*", "cmath", ".", "pi", "*", "r", "/", "accel", ")", "\n", "omega_tensor", "=", "transforms", ".", "complex_scalar_to_tensor", "(", "omega", ")", "\n", "shifted_raw", "=", "image_padded", "[", "shift", ":", "(", "n", "+", "shift", ")", "]", "\n", "# if remainder != 0:", "\n", "#     shifted_raw_next = image_padded[(shift-1):(n+shift-1)]", "\n", "#     shifted_out = (1-delta)*shifted_raw + delta * shifted_raw_next", "\n", "# pdb.set_trace()", "\n", "shifted_mult", "=", "transforms", ".", "complex_mult", "(", "omega_tensor", ",", "shifted_raw", ")", "\n", "if", "n", "%", "accel", "==", "0", ":", "\n", "            ", "assert", "torch", ".", "allclose", "(", "image", ",", "shifted_mult", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-06", ")", "\n", "", "else", ":", "\n", "            ", "assert", "torch", ".", "allclose", "(", "image", ",", "shifted_mult", ",", "rtol", "=", "1e-01", ",", "atol", "=", "1e-02", ")", "\n", "", "", "", ""]]}