{"home.repos.pwc.inspect_result.plrbear_auxskd.VSPP.train.parse_args": [[18, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0,1,2,3'", ",", "help", "=", "'gpu id'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "'/home/amir/chp/pckpt_epoch_18.pth'", ",", "help", "=", "'checkpoint path for pretrained weights of auxSKD'", ")", "\n", "parser", ".", "add_argument", "(", "'--height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'resize height'", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'resize width'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_len'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'64, input clip length'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_sz'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'crop size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'32, batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'total epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_sr'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'largest sampling rate for speed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_segment'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of segments'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_save'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'max save epoch num'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ucf101'", ",", "help", "=", "'ucf101/k400'", ")", "\n", "parser", ".", "add_argument", "(", "'--pf'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'r21d'", ",", "help", "=", "'r21d/r3d, pretrain model'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_list'", ",", "type", "=", "str", ",", "default", "=", "'./list/train_ucf101_split1.list'", ",", "help", "=", "'data list'", ")", "\n", "parser", ".", "add_argument", "(", "'--rgb_prefix'", ",", "type", "=", "str", ",", "default", "=", "'/home/amir/DATA/ucf101/jpegs_256/'", ",", "help", "=", "'dataset dir'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.VSPP.train.train": [[46, 206], ["print", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomApply", "datasets.ucf101.ucf101_pace_pretrain", "print", "torch.utils.data.DataLoader", "torch.load", "nn.DataParallel.state_dict", "nn.DataParallel.load_state_dict", "r3d.R3DNet.state_dict", "nn.DataParallel.state_dict", "r3d.R3DNet.load_state_dict", "torch.nn.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "r3d.R3DNet.to", "nn.CrossEntropyLoss.to", "tensorboardX.SummaryWriter", "r3d.R3DNet.train", "range", "tensorboardX.SummaryWriter.close", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "len", "models.r21d.R2Plus1DNet", "models.r21d.R2Plus1DNet", "torch.cuda.device_count", "print", "torch.nn.DataParallel", "torch.nn.DataParallel", "k.replace", "r3d.R3DNet.parameters", "enumerate", "print", "optim.lr_scheduler.StepLR.step", "train.model_saver", "utils.video_transforms.ClipResize", "utils.video_transforms.RandomCrop", "utils.video_transforms.RandomHorizontalFlip", "models.r3d.R3DNet", "torch.cuda.device_count", "ckpt.items", "pretrained_dict.items", "pre_model.state_dict.items", "rgb_clip.to.to", "labels[].to", "labels[].to", "optim.SGD.zero_grad", "r3d.R3DNet.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "optim.SGD.step", "torch.sum().detach().cpu().numpy().astype", "torch.sum().detach().cpu().numpy().astype", "torch.nn.Softmax", "torch.max", "torch.nn.Softmax", "torch.max", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "print", "torch.sum().detach().cpu().numpy", "torch.sum().detach().cpu().numpy", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach", "torch.sum().detach", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.train", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.makedirs", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.makedirs", "home.repos.pwc.inspect_result.plrbear_auxskd.VSPP.train.model_saver"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "exp_name", "=", "'{}_sr_{}_{}_lr_{}_len_{}_sz_{}'", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "max_sr", ",", "args", ".", "model", ",", "args", ".", "lr", ",", "args", ".", "clip_len", ",", "args", ".", "crop_sz", ")", "\n", "\n", "\n", "print", "(", "exp_name", ")", "\n", "\n", "pretrain_cks_path", "=", "os", ".", "path", ".", "join", "(", "'pretrain_cks'", ",", "exp_name", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "'visual_logs'", ",", "exp_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pretrain_cks_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pretrain_cks_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_path", ")", "\n", "\n", "\n", "\n", "", "transforms_", "=", "transforms", ".", "Compose", "(", "\n", "[", "ClipResize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ")", ",", "# h x w", "\n", "RandomCrop", "(", "args", ".", "crop_sz", ")", ",", "\n", "RandomHorizontalFlip", "(", "0.5", ")", "]", "\n", ")", "\n", "\n", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.8", ",", "contrast", "=", "0.8", ",", "saturation", "=", "0.8", ",", "hue", "=", "0.2", ")", "\n", "color_jitter", "=", "transforms", ".", "RandomApply", "(", "[", "color_jitter", "]", ",", "p", "=", "0.8", ")", "\n", "\n", "train_dataset", "=", "ucf101_pace_pretrain", "(", "args", ".", "data_list", ",", "args", ".", "rgb_prefix", ",", "clip_len", "=", "args", ".", "clip_len", ",", "max_sr", "=", "args", ".", "max_sr", ",", "max_segment", "=", "args", ".", "num_segment", ",", "\n", "transforms_", "=", "transforms_", ",", "color_jitter_", "=", "color_jitter", ")", "\n", "\n", "print", "(", "\"len of training data:\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "bs", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "## 2. init model", "\n", "if", "args", ".", "model", "==", "'r21d'", ":", "\n", "        ", "model", "=", "r21d", ".", "R2Plus1DNet", "(", "num_classes", "=", "args", ".", "max_sr", ",", "num_classes_segment", "=", "args", ".", "num_segment", ")", "\n", "pre_model", "=", "r21d", ".", "R2Plus1DNet", "(", "num_classes", "=", "128", ",", "multi_out", "=", "False", ")", "\n", "", "elif", "args", ".", "model", "==", "'r3d'", ":", "\n", "        ", "model", "=", "r3d", ".", "R3DNet", "(", "num_classes", "=", "args", ".", "max_sr", ",", "num_classes_segment", "=", "args", ".", "num_segment", ")", "\n", "#define a pre_model like what we did for r21d", "\n", "\n", "\n", "\n", "# 4. multi gpu", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "pre_model", "=", "nn", ".", "DataParallel", "(", "pre_model", ")", "\n", "\n", "\n", "\n", "# ######################################################################################", "\n", "\n", "#Here we load auxSKD weights to our base model", "\n", "\n", "", "wts", "=", "torch", ".", "load", "(", "args", ".", "ckpt", ")", "\n", "if", "'state_dict'", "in", "wts", ":", "\n", "        ", "ckpt", "=", "wts", "[", "'state_dict'", "]", "\n", "\n", "\n", "\n", "", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'encoder_q.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "ckpt", ".", "items", "(", ")", "}", "\n", "\n", "pre_model_dict", "=", "pre_model", ".", "state_dict", "(", ")", "\n", "p1", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "pre_model_dict", "}", "\n", "\n", "\n", "\n", "pre_model", ".", "load_state_dict", "(", "p1", ")", "\n", "\n", "\n", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_state", "=", "pre_model", ".", "state_dict", "(", ")", "\n", "\n", "p2", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_state", ".", "items", "(", ")", "if", "k", "in", "model_state", "and", "model_state", "[", "k", "]", ".", "shape", "==", "pretrained_state", "[", "k", "]", ".", "shape", "}", "\n", "\n", "\n", "model", ".", "load_state_dict", "(", "p2", ",", "strict", "=", "False", ")", "\n", "\n", "\n", "################################################################", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.005", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "6", ",", "gamma", "=", "0.1", ")", "\n", "\n", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_path", ")", "\n", "iterations", "=", "1", "\n", "\n", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "total_loss1", "=", "0.0", "\n", "total_loss2", "=", "0.0", "\n", "correct", "=", "0", "\n", "it", "=", "0", "\n", "# start_time = time.time()", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "rgb_clip", ",", "labels", "=", "sample", "\n", "rgb_clip", "=", "rgb_clip", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "label_speed", "=", "labels", "[", ":", ",", "0", "]", ".", "to", "(", "device", ")", "\n", "label_segment", "=", "labels", "[", ":", ",", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out1", ",", "out2", "=", "model", "(", "rgb_clip", ")", "\n", "loss1", "=", "criterion", "(", "out1", ",", "label_speed", ")", "\n", "\n", "\n", "loss2", "=", "criterion", "(", "out2", ",", "label_segment", ")", "\n", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "\n", "\n", "it", "=", "it", "+", "1", ";", "\n", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "probs_segment", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "out2", ")", "\n", "preds_segment", "=", "torch", ".", "max", "(", "probs_segment", ",", "1", ")", "[", "1", "]", "\n", "accuracy_seg", "=", "torch", ".", "sum", "(", "preds_segment", "==", "label_segment", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "# accuracy_seg = accuracy_seg ", "\n", "\n", "probs_speed", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "out1", ")", "\n", "preds_speed", "=", "torch", ".", "max", "(", "probs_speed", ",", "1", ")", "[", "1", "]", "\n", "accuracy_speed", "=", "torch", ".", "sum", "(", "preds_speed", "==", "label_speed", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "# accuracy_speed = accuracy_speed ", "\n", "accuracy", "=", "(", "(", "accuracy_speed", "+", "accuracy_seg", ")", "/", "2", ")", "/", "args", ".", "bs", "\n", "correct", "+=", "(", "(", "accuracy_speed", "+", "accuracy_seg", ")", "/", "2", ")", "/", "args", ".", "bs", "\n", "\n", "iterations", "+=", "1", "\n", "\n", "if", "i", "%", "args", ".", "pf", "==", "0", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'data/train_loss'", ",", "loss", ",", "iterations", ")", "\n", "writer", ".", "add_scalar", "(", "'data/Acc'", ",", "accuracy", ",", "iterations", ")", "\n", "\n", "print", "(", "\"[Epoch{}/{}] Loss: {} Acc: {}  \"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", ",", "loss", ",", "accuracy", ")", ")", "\n", "\n", "# start_time = time.time()", "\n", "\n", "\n", "", "", "print", "(", "'[pre-training] Loss_speed: {:.3f}, Loss_segment: {:.3f}'", ".", "format", "(", "loss1", ",", "loss2", ")", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "model_saver", "(", "model", ",", "optimizer", ",", "epoch", ",", "args", ".", "max_save", ",", "pretrain_cks_path", ")", "\n", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.VSPP.train.model_saver": [[208, 216], ["os.listdir", "os.listdir.sort", "torch.save", "len", "os.remove", "net.state_dict", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "model_saver", "(", "net", ",", "optimizer", ",", "epoch", ",", "max_to_keep", ",", "model_save_path", ")", ":", "\n", "    ", "tmp_dir", "=", "os", ".", "listdir", "(", "model_save_path", ")", "\n", "# print(tmp_dir)", "\n", "tmp_dir", ".", "sort", "(", ")", "\n", "if", "len", "(", "tmp_dir", ")", ">=", "max_to_keep", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "model_save_path", ",", "tmp_dir", "[", "0", "]", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_save_path", ",", "'epoch_segment_self_f-'", "+", "'{:02}'", ".", "format", "(", "epoch", "+", "1", ")", "+", "'.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.RandomHorizontalFlip.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.RandomHorizontalFlip.__call__": [[11, 21], ["random.random", "numpy.flip().copy", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "video_clip", ")", ":", "\n", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "# t x h x w", "\n", "#print(\"flip\")", "\n", "            ", "flip_video_clip", "=", "np", ".", "flip", "(", "video_clip", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "\n", "return", "flip_video_clip", "\n", "\n", "", "return", "video_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.RandomCrop.__init__": [[25, 32], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.RandomCrop.__call__": [[34, 46], ["random.randint", "random.randint"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "video_clip", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "video_clip", ".", "shape", "[", "1", ":", "3", "]", "\n", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "\n", "h_start", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "new_h", ")", "\n", "w_start", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "new_w", ")", "\n", "\n", "rnd_crop_video_clip", "=", "video_clip", "[", ":", ",", "h_start", ":", "h_start", "+", "new_h", ",", "\n", "w_start", ":", "w_start", "+", "new_w", ",", ":", "]", "\n", "\n", "return", "rnd_crop_video_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.CenterCrop.__init__": [[51, 58], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.CenterCrop.__call__": [[59, 72], ["int", "int"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "video_clip", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "video_clip", ".", "shape", "[", "1", ":", "3", "]", "\n", "\n", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "\n", "h_start", "=", "int", "(", "(", "h", "-", "new_h", ")", "/", "2", ")", "\n", "w_start", "=", "int", "(", "(", "w", "-", "new_w", ")", "/", "2", ")", "\n", "\n", "center_crop_video_clip", "=", "video_clip", "[", ":", ",", "h_start", ":", "h_start", "+", "new_h", ",", "\n", "w_start", ":", "w_start", "+", "new_w", ",", ":", "]", "\n", "\n", "return", "center_crop_video_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.ClipResize.__init__": [[76, 83], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.ClipResize.__call__": [[84, 93], ["numpy.array", "cv2.resize", "rsz_video_clip.append"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "video_clip", ")", ":", "\n", "        ", "rsz_video_clip", "=", "[", "]", "\n", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "\n", "for", "frame", "in", "video_clip", ":", "\n", "            ", "rsz_frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "new_w", ",", "new_h", ")", ")", "\n", "rsz_video_clip", ".", "append", "(", "rsz_frame", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "rsz_video_clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.ToTensor.__init__": [[101, 103], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ToTensor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.utils.video_transforms.ToTensor.__call__": [[104, 110], ["numpy.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "video_clip", "=", "sample", "\n", "\n", "video_clip", "=", "np", ".", "transpose", "(", "video_clip", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "\n", "return", "video_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.datasets.ucf101.ucf101_pace_pretrain.__init__": [[12, 22], ["open", "list", "torchvision.transforms.ToPILImage"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "data_list", ",", "rgb_prefix", ",", "clip_len", ",", "max_sr", ",", "max_segment", ",", "transforms_", "=", "None", ",", "color_jitter_", "=", "None", ")", ":", "# yapf: disable:", "\n", "        ", "lines", "=", "open", "(", "data_list", ")", "\n", "self", ".", "rgb_lines", "=", "list", "(", "lines", ")", "*", "10", "\n", "self", ".", "rgb_prefix", "=", "rgb_prefix", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "max_sr", "=", "max_sr", "\n", "self", ".", "toPIL", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "self", ".", "transforms_", "=", "transforms_", "\n", "self", ".", "color_jitter_", "=", "color_jitter_", "\n", "self", ".", "max_segment", "=", "max_segment", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.datasets.ucf101.ucf101_pace_pretrain.__len__": [[23, 25], ["len"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "rgb_lines", ")", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.datasets.ucf101.ucf101_pace_pretrain.__getitem__": [[26, 107], ["ucf101.ucf101_pace_pretrain.rgb_lines[].strip().split", "os.path.join", "random.randint", "random.randint", "int", "int", "int", "int", "random.randint", "random.randint", "random.randint", "random.randint", "ucf101.ucf101_pace_pretrain.loop_load_rgb", "ucf101.ucf101_pace_pretrain.loop_load_rgb", "ucf101.ucf101_pace_pretrain.transforms_", "ucf101.ucf101_pace_pretrain.transforms_", "numpy.array().transpose", "numpy.array().transpose", "int", "random.randint", "random.randint", "ucf101.ucf101_pace_pretrain.toPIL", "ucf101.ucf101_pace_pretrain.color_jitter_", "numpy.array", "numpy.array().transpose.append", "ucf101.ucf101_pace_pretrain.toPIL", "ucf101.ucf101_pace_pretrain.color_jitter_", "numpy.array", "numpy.array().transpose.append", "ucf101.ucf101_pace_pretrain.rgb_lines[].strip", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.datasets.ucf101.ucf101_pace_pretrain.loop_load_rgb", "home.repos.pwc.inspect_result.plrbear_auxskd.datasets.ucf101.ucf101_pace_pretrain.loop_load_rgb"], ["\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "rgb_line", "=", "self", ".", "rgb_lines", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "\n", "sample_name", ",", "action_label", ",", "num_frames", "=", "rgb_line", "[", "0", "]", ",", "int", "(", "rgb_line", "[", "1", "]", ")", ",", "int", "(", "rgb_line", "[", "2", "]", ")", "\n", "#sample_name, num_frames = rgb_line[0], int(rgb_line[1])", "\n", "\n", "rgb_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rgb_prefix", ",", "sample_name", ")", "\n", "sample_rate", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "max_sr", ")", "\n", "\n", "segment", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "max_segment", ")", "\n", "start_frame", "=", "random", ".", "randint", "(", "1", ",", "num_frames", "-", "self", ".", "clip_len", ")", "\n", "# print(\"len {}, start_frame {} \".format(num_frames, start_frame))", "\n", "\n", "\n", "segment_start_frame", "=", "int", "(", "(", "segment", "-", "1", ")", "*", "(", "self", ".", "clip_len", "/", "self", ".", "max_segment", ")", ")", "\n", "segment_last_frame", "=", "int", "(", "(", "segment", ")", "*", "(", "self", ".", "clip_len", "/", "self", ".", "max_segment", ")", ")", "\n", "# print(\"sample_rate {} , segment: {}\".format(sample_rate, segment))", "\n", "# print(\"segment_start_frame {} , segment_last_frame: {}\".format(segment_start_frame, segment_last_frame))", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "rgb_clip", "=", "self", ".", "loop_load_rgb", "(", "rgb_dir", ",", "start_frame", ",", "sample_rate", ",", "\n", "self", ".", "clip_len", ",", "num_frames", ",", "segment_start_frame", ",", "segment_last_frame", ")", "\n", "\n", "label_speed", "=", "sample_rate", "-", "1", "\n", "label_segment", "=", "segment", "-", "1", "\n", "label", "=", "[", "label_speed", ",", "label_segment", "]", "\n", "\n", "trans_clip", "=", "self", ".", "transforms_", "(", "rgb_clip", ")", "\n", "\n", "## apply different color jittering for each frame in the video clip", "\n", "trans_clip_cj", "=", "[", "]", "\n", "for", "frame", "in", "trans_clip", ":", "\n", "            ", "frame", "=", "self", ".", "toPIL", "(", "frame", ")", "# PIL image", "\n", "frame", "=", "self", ".", "color_jitter_", "(", "frame", ")", "# tensor [C x H x W]", "\n", "frame", "=", "np", ".", "array", "(", "frame", ")", "\n", "trans_clip_cj", ".", "append", "(", "frame", ")", "\n", "\n", "", "trans_clip_cj", "=", "np", ".", "array", "(", "trans_clip_cj", ")", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", "\n", "\n", "return", "trans_clip_cj", ",", "np", ".", "array", "(", "label", ")", "\n", "\n", "", "def", "loop_load_rgb", "(", "self", ",", "video_dir", ",", "start_frame", ",", "sample_rate", ",", "clip_len", ",", "\n", "num_frames", ",", "segment_start_frame", ",", "segment_last_frame", ")", ":", "\n", "\n", "        ", "video_clip", "=", "[", "]", "\n", "idx1", "=", "0", "\n", "idx", "=", "0", "\n", "normal_f", "=", "copy", ".", "deepcopy", "(", "start_frame", ")", "\n", "\n", "for", "i", "in", "range", "(", "clip_len", ")", ":", "\n", "            ", "if", "segment_start_frame", "<=", "i", "<=", "segment_last_frame", ":", "\n", "\n", "\n", "                ", "cur_img_path", "=", "os", ".", "path", ".", "join", "(", "\n", "video_dir", ",", "\n", "\"frame\"", "+", "\"{:06}.jpg\"", ".", "format", "(", "start_frame", "+", "idx1", "*", "sample_rate", ")", ")", "\n", "normal_f", "=", "(", "start_frame", "+", "(", "idx1", "*", "sample_rate", ")", ")", "\n", "idx", "=", "1", "\n", "\n", "\n", "# print(cur_img_path)", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "cur_img_path", ")", "\n", "video_clip", ".", "append", "(", "img", ")", "\n", "\n", "if", "(", "start_frame", "+", "(", "idx1", "+", "1", ")", "*", "sample_rate", ")", ">", "num_frames", ":", "\n", "                    ", "start_frame", "=", "1", "\n", "normal_f", "=", "1", "\n", "idx", "=", "0", "\n", "idx1", "=", "0", "\n", "", "else", ":", "\n", "                    ", "idx1", "+=", "1", "\n", "\n", "\n", "\n", "# idx=0", "\n", "", "", "else", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.datasets.ucf101.ucf101_pace_pretrain.loop_load_rgb": [[108, 175], ["copy.deepcopy", "range", "numpy.array", "os.path.join", "cv2.imread", "numpy.array.append", "os.path.join", "cv2.imread", "numpy.array.append"], "methods", ["None"], ["\n", "                ", "cur_img_path", "=", "os", ".", "path", ".", "join", "(", "\n", "video_dir", ",", "\n", "\"frame\"", "+", "\"{:06}.jpg\"", ".", "format", "(", "normal_f", "+", "idx", ")", ")", "\n", "\n", "start_frame", "=", "normal_f", "+", "idx", "\n", "idx1", "=", "1", "\n", "\n", "\n", "# print(cur_img_path)", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "cur_img_path", ")", "\n", "video_clip", ".", "append", "(", "img", ")", "\n", "\n", "if", "(", "normal_f", "+", "(", "idx", "+", "1", ")", ")", ">", "num_frames", ":", "\n", "                    ", "normal_f", "=", "1", "\n", "start_frame", "=", "1", "\n", "idx1", "=", "0", "\n", "idx", "=", "0", "\n", "", "else", ":", "\n", "                    ", "idx", "+=", "1", "\n", "\n", "\n", "\n", "\n", "", "", "", "video_clip", "=", "np", ".", "array", "(", "video_clip", ")", "\n", "\n", "return", "video_clip", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.SpatioTemporalConv.__init__": [[27, 68], ["torch.Module.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "int", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "math.floor"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["# if ints are entered, convert them to iterables, 1 -> [1, 1, 1]", "\n", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "\n", "# decomposing the parameters into spatial and temporal components by", "\n", "# masking out the values with the defaults on the axis that", "\n", "# won't be convolved over. This is necessary to avoid unintentional", "\n", "# behavior such as padding being added twice", "\n", "spatial_kernel_size", "=", "(", "1", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", ")", "\n", "spatial_stride", "=", "(", "1", ",", "stride", "[", "1", "]", ",", "stride", "[", "2", "]", ")", "\n", "spatial_padding", "=", "(", "0", ",", "padding", "[", "1", "]", ",", "padding", "[", "2", "]", ")", "\n", "\n", "temporal_kernel_size", "=", "(", "kernel_size", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "temporal_stride", "=", "(", "stride", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "temporal_padding", "=", "(", "padding", "[", "0", "]", ",", "0", ",", "0", ")", "\n", "\n", "# compute the number of intermediary channels (M) using formula", "\n", "# from the paper section 3.5", "\n", "intermed_channels", "=", "int", "(", "\n", "math", ".", "floor", "(", "(", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "*", "in_channels", "*", "out_channels", ")", "/", "(", "kernel_size", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "*", "in_channels", "+", "kernel_size", "[", "0", "]", "*", "out_channels", ")", ")", ")", "\n", "# print(intermed_channels)", "\n", "\n", "# the spatial conv is effectively a 2D conv due to the", "\n", "# spatial_kernel_size, followed by batch_norm and ReLU", "\n", "self", ".", "spatial_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "intermed_channels", ",", "spatial_kernel_size", ",", "\n", "stride", "=", "spatial_stride", ",", "padding", "=", "spatial_padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "intermed_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# the temporal conv is effectively a 1D conv, but has batch norm", "\n", "# and ReLU added inside the model constructor, not here. This is an", "\n", "# intentional design choice, to allow this module to externally act", "\n", "# identical to a standard Conv3D, so it can be reused easily in any", "\n", "# other codebase", "\n", "self", ".", "temporal_conv", "=", "nn", ".", "Conv3d", "(", "intermed_channels", ",", "out_channels", ",", "temporal_kernel_size", ",", "\n", "stride", "=", "temporal_stride", ",", "padding", "=", "temporal_padding", ",", "bias", "=", "bias", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "spatial_conv", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "temporal_conv", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.SpatioTemporalConv.forward": [[69, 73], ["r21d.SpatioTemporalConv.relu", "r21d.SpatioTemporalConv.temporal_conv", "r21d.SpatioTemporalConv.bn", "r21d.SpatioTemporalConv.spatial_conv"], "methods", ["None"], ["return", "x", "\n", "\n", "\n", "", "", "class", "SpatioTemporalResBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.SpatioTemporalResBlock.__init__": [[85, 115], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r21d.SpatioTemporalConv", "r21d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride =2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.SpatioTemporalResBlock.forward": [[116, 124], ["r21d.SpatioTemporalResBlock.relu1", "r21d.SpatioTemporalResBlock.bn2", "r21d.SpatioTemporalResBlock.outrelu", "r21d.SpatioTemporalResBlock.bn1", "r21d.SpatioTemporalResBlock.conv2", "r21d.SpatioTemporalResBlock.downsamplebn", "r21d.SpatioTemporalResBlock.conv1", "r21d.SpatioTemporalResBlock.downsampleconv"], "methods", ["None"], ["\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n", "\n", "", "", "class", "SpatioTemporalResLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.SpatioTemporalResLayer.__init__": [[138, 151], ["torch.Module.__init__", "block_type", "torch.ModuleList", "torch.ModuleList", "range", "block_type"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["        ", "super", "(", "SpatioTemporalResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# implement the first block", "\n", "self", ".", "block1", "=", "block_type", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", ")", "\n", "\n", "# prepare module list to hold all (layer_size - 1) blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "layer_size", "-", "1", ")", ":", "\n", "# all these blocks are identical, and have downsample = False by default", "\n", "            ", "self", ".", "blocks", "+=", "[", "block_type", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ")", "]", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.SpatioTemporalResLayer.forward": [[152, 158], ["r21d.SpatioTemporalResLayer.block1", "block"], "methods", ["None"], ["            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "R2Plus1DNet", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.R2Plus1DNet.__init__": [[169, 197], ["torch.Module.__init__", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["self", ".", "num_classes_segment", "=", "num_classes_segment", "\n", "self", ".", "multi_out", "=", "multi_out", "\n", "\n", "# first conv, with stride 1x2x2 and kernel size 1x7x7", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "3", ",", "64", ",", "(", "3", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# output of conv2 is same size as of conv1, no downsampling needed. kernel_size 3x3x3", "\n", "self", ".", "conv2", "=", "SpatioTemporalResLayer", "(", "64", ",", "64", ",", "3", ",", "layer_sizes", "[", "0", "]", ",", "block_type", "=", "block_type", ")", "\n", "# each of the final three layers doubles num_channels, while performing downsampling", "\n", "# inside the first block", "\n", "self", ".", "conv3", "=", "SpatioTemporalResLayer", "(", "64", ",", "128", ",", "3", ",", "layer_sizes", "[", "1", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv4", "=", "SpatioTemporalResLayer", "(", "128", ",", "256", ",", "3", ",", "layer_sizes", "[", "2", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv5", "=", "SpatioTemporalResLayer", "(", "256", ",", "512", ",", "3", ",", "layer_sizes", "[", "3", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "\n", "# global average pooling of the output", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes", ")", "\n", "if", "self", ".", "multi_out", ":", "\n", "\n", "            ", "self", ".", "linear_segment", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes_segment", ")", "\n", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.R2Plus1DNet.forward": [[198, 217], ["r21d.R2Plus1DNet.relu1", "r21d.R2Plus1DNet.conv2", "r21d.R2Plus1DNet.conv3", "r21d.R2Plus1DNet.conv4", "r21d.R2Plus1DNet.conv5", "r21d.R2Plus1DNet.pool", "r21d.R2Plus1DNet.view", "r21d.R2Plus1DNet.bn1", "r21d.R2Plus1DNet.feature_pool", "r21d.R2Plus1DNet.view", "r21d.R2Plus1DNet.linear", "r21d.R2Plus1DNet.conv1"], "methods", ["None"], ["x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "if", "self", ".", "multi_out", ":", "\n", "\n", "            ", "x1", "=", "self", ".", "linear", "(", "x", ")", "\n", "x2", "=", "self", ".", "linear_segment", "(", "x", ")", "\n", "\n", "return", "x1", ",", "x2", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "r21d", "=", "R2Plus1DNet", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.SpatioTemporalConv.__init__": [[24, 34], ["torch.Module.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# if ints are entered, convert them to iterables, 1 -> [1, 1, 1]", "\n", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "\n", "self", ".", "temporal_spatial_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.SpatioTemporalConv.forward": [[35, 38], ["r3d.SpatioTemporalConv.temporal_spatial_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "temporal_spatial_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.SpatioTemporalResBlock.__init__": [[50, 80], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r3d.SpatioTemporalConv", "r3d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride = 2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.SpatioTemporalResBlock.forward": [[81, 89], ["r3d.SpatioTemporalResBlock.relu1", "r3d.SpatioTemporalResBlock.bn2", "r3d.SpatioTemporalResBlock.outrelu", "r3d.SpatioTemporalResBlock.bn1", "r3d.SpatioTemporalResBlock.conv2", "r3d.SpatioTemporalResBlock.downsamplebn", "r3d.SpatioTemporalResBlock.conv1", "r3d.SpatioTemporalResBlock.downsampleconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.SpatioTemporalResLayer.__init__": [[103, 116], ["torch.Module.__init__", "block_type", "torch.ModuleList", "torch.ModuleList", "range", "block_type"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "layer_size", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "\n", "downsample", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SpatioTemporalResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# implement the first block", "\n", "self", ".", "block1", "=", "block_type", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", ")", "\n", "\n", "# prepare module list to hold all (layer_size - 1) blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "layer_size", "-", "1", ")", ":", "\n", "# all these blocks are identical, and have downsample = False by default", "\n", "            ", "self", ".", "blocks", "+=", "[", "block_type", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.SpatioTemporalResLayer.forward": [[117, 123], ["r3d.SpatioTemporalResLayer.block1", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.R3DNet.__init__": [[134, 153], ["torch.Module.__init__", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "num_classes", "=", "4", ")", ":", "\n", "        ", "super", "(", "R3DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "# first conv, with stride 1x2x2 and kernel size 3x7x7", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "3", ",", "64", ",", "[", "3", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# output of conv2 is same size as of conv1, no downsampling needed. kernel_size 3x3x3", "\n", "self", ".", "conv2", "=", "SpatioTemporalResLayer", "(", "64", ",", "64", ",", "3", ",", "layer_sizes", "[", "0", "]", ",", "block_type", "=", "block_type", ")", "\n", "# each of the final three layers doubles num_channels, while performing downsampling", "\n", "# inside the first block", "\n", "self", ".", "conv3", "=", "SpatioTemporalResLayer", "(", "64", ",", "128", ",", "3", ",", "layer_sizes", "[", "1", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv4", "=", "SpatioTemporalResLayer", "(", "128", ",", "256", ",", "3", ",", "layer_sizes", "[", "2", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv5", "=", "SpatioTemporalResLayer", "(", "256", ",", "512", ",", "3", ",", "layer_sizes", "[", "3", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "\n", "# global average pooling of the output", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r3d.R3DNet.forward": [[154, 167], ["r3d.R3DNet.relu1", "r3d.R3DNet.conv2", "r3d.R3DNet.conv3", "r3d.R3DNet.conv4", "r3d.R3DNet.conv5", "r3d.R3DNet.pool", "r3d.R3DNet.view", "r3d.R3DNet.linear", "r3d.R3DNet.bn1", "r3d.R3DNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.c3d.C3D.__init__": [[13, 52], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "4", ")", ":", "\n", "        ", "super", "(", "C3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv3a", "=", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn3a", "=", "nn", ".", "BatchNorm3d", "(", "256", ")", "\n", "self", ".", "relu3a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3b", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn3b", "=", "nn", ".", "BatchNorm3d", "(", "256", ")", "\n", "self", ".", "relu3b", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv4a", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4a", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu4a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv4b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4b", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu4b", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv5a", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn5a", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu5a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv5b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn5b", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu5b", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "pool5", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.c3d.C3D.forward": [[53, 93], ["c3d.C3D.conv1", "c3d.C3D.bn1", "c3d.C3D.relu1", "c3d.C3D.pool1", "c3d.C3D.conv2", "c3d.C3D.bn2", "c3d.C3D.relu2", "c3d.C3D.pool2", "c3d.C3D.conv3a", "c3d.C3D.bn3a", "c3d.C3D.relu3a", "c3d.C3D.conv3b", "c3d.C3D.bn3b", "c3d.C3D.relu3b", "c3d.C3D.pool3", "c3d.C3D.conv4a", "c3d.C3D.bn4a", "c3d.C3D.relu4a", "c3d.C3D.conv4b", "c3d.C3D.bn4b", "c3d.C3D.relu4b", "c3d.C3D.pool4", "c3d.C3D.conv5a", "c3d.C3D.bn5a", "c3d.C3D.relu5a", "c3d.C3D.conv5b", "c3d.C3D.bn5b", "c3d.C3D.relu5b", "c3d.C3D.pool5", "c3d.C3D.view", "c3d.C3D.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3b", "(", "x", ")", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4b", "(", "x", ")", "\n", "x", "=", "self", ".", "pool4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5b", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.InceptionBlock.__init__": [[10, 42], ["torch.Module.__init__", "s3d_g.STConv3D", "s3d_g.STConv3D", "s3d_g.STConv3D", "s3d_g.STConv3D", "s3d_g.STConv3D", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "s3d_g.STConv3D", "s3d_g.SelfGating", "s3d_g.SelfGating", "s3d_g.SelfGating", "s3d_g.SelfGating"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "num_outputs_0_0a", ",", "\n", "num_outputs_1_0a", ",", "\n", "num_outputs_1_0b", ",", "\n", "num_outputs_2_0a", ",", "\n", "num_outputs_2_0b", ",", "\n", "num_outputs_3_0b", ",", "\n", "gating", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "InceptionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_b0", "=", "STConv3D", "(", "input_dim", ",", "num_outputs_0_0a", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "conv_b1_a", "=", "STConv3D", "(", "input_dim", ",", "num_outputs_1_0a", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "conv_b1_b", "=", "STConv3D", "(", "\n", "num_outputs_1_0a", ",", "num_outputs_1_0b", ",", "[", "3", ",", "3", ",", "3", "]", ",", "padding", "=", "1", ",", "separable", "=", "True", "\n", ")", "\n", "self", ".", "conv_b2_a", "=", "STConv3D", "(", "input_dim", ",", "num_outputs_2_0a", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "conv_b2_b", "=", "STConv3D", "(", "\n", "num_outputs_2_0a", ",", "num_outputs_2_0b", ",", "[", "3", ",", "3", ",", "3", "]", ",", "padding", "=", "1", ",", "separable", "=", "True", "\n", ")", "\n", "self", ".", "maxpool_b3", "=", "th", ".", "nn", ".", "MaxPool3d", "(", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_b3_b", "=", "STConv3D", "(", "input_dim", ",", "num_outputs_3_0b", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "gating", "=", "gating", "\n", "self", ".", "output_dim", "=", "(", "\n", "num_outputs_0_0a", "+", "num_outputs_1_0b", "+", "num_outputs_2_0b", "+", "num_outputs_3_0b", "\n", ")", "\n", "if", "gating", ":", "\n", "            ", "self", ".", "gating_b0", "=", "SelfGating", "(", "num_outputs_0_0a", ")", "\n", "self", ".", "gating_b1", "=", "SelfGating", "(", "num_outputs_1_0b", ")", "\n", "self", ".", "gating_b2", "=", "SelfGating", "(", "num_outputs_2_0b", ")", "\n", "self", ".", "gating_b3", "=", "SelfGating", "(", "num_outputs_3_0b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.InceptionBlock.forward": [[43, 59], ["s3d_g.InceptionBlock.conv_b0", "s3d_g.InceptionBlock.conv_b1_a", "s3d_g.InceptionBlock.conv_b1_b", "s3d_g.InceptionBlock.conv_b2_a", "s3d_g.InceptionBlock.conv_b2_b", "s3d_g.InceptionBlock.maxpool_b3", "s3d_g.InceptionBlock.conv_b3_b", "torch.cat", "torch.cat", "torch.cat", "s3d_g.InceptionBlock.gating_b0", "s3d_g.InceptionBlock.gating_b1", "s3d_g.InceptionBlock.gating_b2", "s3d_g.InceptionBlock.gating_b3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Inception block\n      \"\"\"", "\n", "b0", "=", "self", ".", "conv_b0", "(", "input", ")", "\n", "b1", "=", "self", ".", "conv_b1_a", "(", "input", ")", "\n", "b1", "=", "self", ".", "conv_b1_b", "(", "b1", ")", "\n", "b2", "=", "self", ".", "conv_b2_a", "(", "input", ")", "\n", "b2", "=", "self", ".", "conv_b2_b", "(", "b2", ")", "\n", "b3", "=", "self", ".", "maxpool_b3", "(", "input", ")", "\n", "b3", "=", "self", ".", "conv_b3_b", "(", "b3", ")", "\n", "if", "self", ".", "gating", ":", "\n", "            ", "b0", "=", "self", ".", "gating_b0", "(", "b0", ")", "\n", "b1", "=", "self", ".", "gating_b1", "(", "b1", ")", "\n", "b2", "=", "self", ".", "gating_b2", "(", "b2", ")", "\n", "b3", "=", "self", ".", "gating_b3", "(", "b3", ")", "\n", "", "return", "th", ".", "cat", "(", "(", "b0", ",", "b1", ",", "b2", ",", "b3", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.SelfGating.__init__": [[62, 65], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "SelfGating", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.SelfGating.forward": [[66, 73], ["torch.mean", "torch.mean", "torch.mean", "s3d_g.SelfGating.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"Feature gating as used in S3D-G.\n      \"\"\"", "\n", "spatiotemporal_average", "=", "th", ".", "mean", "(", "input_tensor", ",", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "weights", "=", "self", ".", "fc", "(", "spatiotemporal_average", ")", "\n", "weights", "=", "th", ".", "sigmoid", "(", "weights", ")", "\n", "return", "weights", "[", ":", ",", ":", ",", "None", ",", "None", ",", "None", "]", "*", "input_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.STConv3D.__init__": [[76, 127], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "separable", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "STConv3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "separable", "=", "separable", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "assert", "len", "(", "kernel_size", ")", "==", "3", "\n", "if", "separable", "and", "kernel_size", "[", "0", "]", "!=", "1", ":", "\n", "            ", "spatial_kernel_size", "=", "[", "1", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", "]", "\n", "temporal_kernel_size", "=", "[", "kernel_size", "[", "0", "]", ",", "1", ",", "1", "]", "\n", "if", "isinstance", "(", "stride", ",", "list", ")", "and", "len", "(", "stride", ")", "==", "3", ":", "\n", "                ", "spatial_stride", "=", "[", "1", ",", "stride", "[", "1", "]", ",", "stride", "[", "2", "]", "]", "\n", "temporal_stride", "=", "[", "stride", "[", "0", "]", ",", "1", ",", "1", "]", "\n", "", "else", ":", "\n", "                ", "spatial_stride", "=", "[", "1", ",", "stride", ",", "stride", "]", "\n", "temporal_stride", "=", "[", "stride", ",", "1", ",", "1", "]", "\n", "", "if", "isinstance", "(", "padding", ",", "list", ")", "and", "len", "(", "padding", ")", "==", "3", ":", "\n", "                ", "spatial_padding", "=", "[", "0", ",", "padding", "[", "1", "]", ",", "padding", "[", "2", "]", "]", "\n", "temporal_padding", "=", "[", "padding", "[", "0", "]", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "spatial_padding", "=", "[", "0", ",", "padding", ",", "padding", "]", "\n", "temporal_padding", "=", "[", "padding", ",", "0", ",", "0", "]", "\n", "", "", "if", "separable", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "kernel_size", "=", "spatial_kernel_size", ",", "\n", "stride", "=", "spatial_stride", ",", "\n", "padding", "=", "spatial_padding", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "output_dim", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "output_dim", ",", "\n", "output_dim", ",", "\n", "kernel_size", "=", "temporal_kernel_size", ",", "\n", "stride", "=", "temporal_stride", ",", "\n", "padding", "=", "temporal_padding", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "output_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.STConv3D.forward": [[128, 133], ["s3d_g.STConv3D.relu", "s3d_g.STConv3D.bn1", "s3d_g.STConv3D.relu", "s3d_g.STConv3D.conv1", "s3d_g.STConv3D.bn2", "s3d_g.STConv3D.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "input", ")", ")", ")", "\n", "if", "self", ".", "separable", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.MaxPool3dTFPadding.__init__": [[136, 143], ["super().__init__", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "s3d_g.MaxPool3dTFPadding._get_padding_shape", "torch.nn.ConstantPad3d", "torch.nn.ConstantPad3d", "torch.nn.ConstantPad3d"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.MaxPool3dTFPadding._get_padding_shape"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", "=", "None", ",", "padding", "=", "\"SAME\"", ")", ":", "\n", "        ", "super", "(", "MaxPool3dTFPadding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "padding", "==", "\"SAME\"", ":", "\n", "            ", "padding_shape", "=", "self", ".", "_get_padding_shape", "(", "kernel_size", ",", "stride", ")", "\n", "self", ".", "padding_shape", "=", "padding_shape", "\n", "self", ".", "pad", "=", "th", ".", "nn", ".", "ConstantPad3d", "(", "padding_shape", ",", "0", ")", "\n", "", "self", ".", "pool", "=", "th", ".", "nn", ".", "MaxPool3d", "(", "kernel_size", ",", "stride", ",", "ceil_mode", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.MaxPool3dTFPadding._get_padding_shape": [[144, 161], ["zip", "padding_shape.pop", "padding_shape.pop", "padding_shape.append", "padding_shape.append", "tuple", "max", "s3d_g.MaxPool3dTFPadding._get_padding_shape._pad_top_bottom"], "methods", ["None"], ["", "def", "_get_padding_shape", "(", "self", ",", "filter_shape", ",", "stride", ")", ":", "\n", "        ", "def", "_pad_top_bottom", "(", "filter_dim", ",", "stride_val", ")", ":", "\n", "            ", "pad_along", "=", "max", "(", "filter_dim", "-", "stride_val", ",", "0", ")", "\n", "pad_top", "=", "pad_along", "//", "2", "\n", "pad_bottom", "=", "pad_along", "-", "pad_top", "\n", "return", "pad_top", ",", "pad_bottom", "\n", "\n", "", "padding_shape", "=", "[", "]", "\n", "for", "filter_dim", ",", "stride_val", "in", "zip", "(", "filter_shape", ",", "stride", ")", ":", "\n", "            ", "pad_top", ",", "pad_bottom", "=", "_pad_top_bottom", "(", "filter_dim", ",", "stride_val", ")", "\n", "padding_shape", ".", "append", "(", "pad_top", ")", "\n", "padding_shape", ".", "append", "(", "pad_bottom", ")", "\n", "", "depth_top", "=", "padding_shape", ".", "pop", "(", "0", ")", "\n", "depth_bottom", "=", "padding_shape", ".", "pop", "(", "0", ")", "\n", "padding_shape", ".", "append", "(", "depth_top", ")", "\n", "padding_shape", ".", "append", "(", "depth_bottom", ")", "\n", "return", "tuple", "(", "padding_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.MaxPool3dTFPadding.forward": [[162, 166], ["s3d_g.MaxPool3dTFPadding.pad", "s3d_g.MaxPool3dTFPadding.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "inp", "=", "self", ".", "pad", "(", "inp", ")", "\n", "out", "=", "self", ".", "pool", "(", "inp", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding.__init__": [[169, 187], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "embd_dim", ",", "\n", "num_embeddings", "=", "66250", ",", "\n", "word_embedding_dim", "=", "300", ",", "\n", "token_to_word_path", "=", "\"dict.npy\"", ",", "\n", "max_words", "=", "16", ",", "\n", "output_dim", "=", "2048", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Sentence_Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embd", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "word_embedding_dim", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "word_embedding_dim", ",", "output_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "output_dim", ",", "embd_dim", ")", "\n", "self", ".", "word_to_token", "=", "{", "}", "\n", "self", ".", "max_words", "=", "max_words", "\n", "token_to_word", "=", "np", ".", "load", "(", "token_to_word_path", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "token_to_word", ")", ":", "\n", "            ", "self", ".", "word_to_token", "[", "t", "]", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._zero_pad_tensor_token": [[188, 194], ["len", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "methods", ["None"], ["", "", "def", "_zero_pad_tensor_token", "(", "self", ",", "tensor", ",", "size", ")", ":", "\n", "        ", "if", "len", "(", "tensor", ")", ">=", "size", ":", "\n", "            ", "return", "tensor", "[", ":", "size", "]", "\n", "", "else", ":", "\n", "            ", "zero", "=", "th", ".", "zeros", "(", "size", "-", "len", "(", "tensor", ")", ")", ".", "long", "(", ")", "\n", "return", "th", ".", "cat", "(", "(", "tensor", ",", "zero", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._split_text": [[195, 198], ["re.findall", "str"], "methods", ["None"], ["", "", "def", "_split_text", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "w", "=", "re", ".", "findall", "(", "r\"[\\w']+\"", ",", "str", "(", "sentence", ")", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._words_to_token": [[199, 208], ["s3d_g.Sentence_Embedding._zero_pad_tensor_token", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._zero_pad_tensor_token"], ["", "def", "_words_to_token", "(", "self", ",", "words", ")", ":", "\n", "        ", "words", "=", "[", "\n", "self", ".", "word_to_token", "[", "word", "]", "for", "word", "in", "words", "if", "word", "in", "self", ".", "word_to_token", "\n", "]", "\n", "if", "words", ":", "\n", "            ", "we", "=", "self", ".", "_zero_pad_tensor_token", "(", "th", ".", "LongTensor", "(", "words", ")", ",", "self", ".", "max_words", ")", "\n", "return", "we", "\n", "", "else", ":", "\n", "            ", "return", "th", ".", "zeros", "(", "self", ".", "max_words", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._words_to_ids": [[209, 212], ["torch.stack", "torch.stack", "torch.stack", "s3d_g.Sentence_Embedding._words_to_token", "s3d_g.Sentence_Embedding._split_text", "sent.lower"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._words_to_token", "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._split_text"], ["", "", "def", "_words_to_ids", "(", "self", ",", "x", ")", ":", "\n", "        ", "split_x", "=", "[", "self", ".", "_words_to_token", "(", "self", ".", "_split_text", "(", "sent", ".", "lower", "(", ")", ")", ")", "for", "sent", "in", "x", "]", "\n", "return", "th", ".", "stack", "(", "split_x", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding.forward": [[213, 220], ["s3d_g.Sentence_Embedding._words_to_ids", "s3d_g.Sentence_Embedding.word_embd", "torch.relu", "torch.relu", "torch.relu", "s3d_g.Sentence_Embedding.fc2", "s3d_g.Sentence_Embedding.fc1", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.Sentence_Embedding._words_to_ids"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_words_to_ids", "(", "x", ")", "\n", "x", "=", "self", ".", "word_embd", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "th", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "{", "'text_embedding'", ":", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.S3D.__init__": [[223, 277], ["torch.Module.__init__", "s3d_g.STConv3D", "s3d_g.STConv3D", "s3d_g.SelfGating", "s3d_g.MaxPool3dTFPadding", "s3d_g.MaxPool3dTFPadding", "s3d_g.InceptionBlock", "s3d_g.InceptionBlock", "s3d_g.MaxPool3dTFPadding", "s3d_g.InceptionBlock", "s3d_g.InceptionBlock", "s3d_g.InceptionBlock", "s3d_g.InceptionBlock", "s3d_g.InceptionBlock", "s3d_g.MaxPool3dTFPadding", "s3d_g.InceptionBlock", "s3d_g.InceptionBlock", "torch.Linear", "torch.Linear", "torch.Linear", "s3d_g.STConv3D", "s3d_g.STConv3D"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "512", ",", "gating", "=", "True", ",", "space_to_depth", "=", "True", ")", ":", "\n", "        ", "super", "(", "S3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "gating", "=", "gating", "\n", "self", ".", "space_to_depth", "=", "space_to_depth", "\n", "if", "space_to_depth", ":", "\n", "            ", "self", ".", "conv1", "=", "STConv3D", "(", "\n", "24", ",", "64", ",", "[", "2", ",", "4", ",", "4", "]", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "2", ",", "2", ")", ",", "separable", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "STConv3D", "(", "\n", "3", ",", "64", ",", "[", "3", ",", "7", ",", "7", "]", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "3", ",", "3", ")", ",", "separable", "=", "False", "\n", ")", "\n", "", "self", ".", "conv_2b", "=", "STConv3D", "(", "64", ",", "64", ",", "[", "1", ",", "1", ",", "1", "]", ",", "separable", "=", "False", ")", "\n", "self", ".", "conv_2c", "=", "STConv3D", "(", "64", ",", "192", ",", "[", "3", ",", "3", ",", "3", "]", ",", "padding", "=", "1", ",", "separable", "=", "True", ")", "\n", "self", ".", "gating", "=", "SelfGating", "(", "192", ")", "\n", "self", ".", "maxpool_2a", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", "\n", ")", "\n", "self", ".", "maxpool_3a", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", "\n", ")", "\n", "self", ".", "mixed_3b", "=", "InceptionBlock", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "mixed_3c", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_3b", ".", "output_dim", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", "\n", ")", "\n", "self", ".", "maxpool_4a", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", "\n", ")", "\n", "self", ".", "mixed_4b", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_3c", ".", "output_dim", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", "\n", ")", "\n", "self", ".", "mixed_4c", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_4b", ".", "output_dim", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", "\n", ")", "\n", "self", ".", "mixed_4d", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_4c", ".", "output_dim", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", "\n", ")", "\n", "self", ".", "mixed_4e", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_4d", ".", "output_dim", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", "\n", ")", "\n", "self", ".", "mixed_4f", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_4e", ".", "output_dim", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "\n", ")", "\n", "self", ".", "maxpool_5a", "=", "self", ".", "maxPool3d_5a_2x2", "=", "MaxPool3dTFPadding", "(", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", "\n", ")", "\n", "self", ".", "mixed_5b", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_4f", ".", "output_dim", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "\n", ")", "\n", "self", ".", "mixed_5c", "=", "InceptionBlock", "(", "\n", "self", ".", "mixed_5b", ".", "output_dim", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "mixed_5c", ".", "output_dim", ",", "num_classes", ")", "\n", "# self.text_module = Sentence_Embedding(num_classes,", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.S3D._space_to_depth": [[280, 288], ["input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.permute", "input.contiguous().view.contiguous().view.contiguous().view", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "_space_to_depth", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"3D space to depth trick for TPU optimization.\n      \"\"\"", "\n", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "view", "(", "B", ",", "C", ",", "T", "//", "2", ",", "2", ",", "H", "//", "2", ",", "2", ",", "W", "//", "2", ",", "2", ")", "\n", "input", "=", "input", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "7", ",", "1", ",", "2", ",", "4", ",", "6", ")", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "8", "*", "C", ",", "T", "//", "2", ",", "H", "//", "2", ",", "W", "//", "2", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.S3D.forward": [[289, 318], ["s3d_g.S3D.conv1", "s3d_g.S3D.maxpool_2a", "s3d_g.S3D.conv_2b", "s3d_g.S3D.conv_2c", "s3d_g.S3D.maxpool_3a", "s3d_g.S3D.mixed_3b", "s3d_g.S3D.mixed_3c", "s3d_g.S3D.maxpool_4a", "s3d_g.S3D.mixed_4b", "s3d_g.S3D.mixed_4c", "s3d_g.S3D.mixed_4d", "s3d_g.S3D.mixed_4e", "s3d_g.S3D.mixed_4f", "s3d_g.S3D.maxpool_5a", "s3d_g.S3D.mixed_5b", "s3d_g.S3D.mixed_5c", "torch.mean", "torch.mean", "torch.mean", "s3d_g.S3D.fc", "s3d_g.S3D._space_to_depth", "s3d_g.S3D.gating"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.models.s3d_g.S3D._space_to_depth"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Defines the S3DG base architecture.\n      \"\"\"", "\n", "if", "self", ".", "space_to_depth", ":", "\n", "            ", "inputs", "=", "self", ".", "_space_to_depth", "(", "inputs", ")", "\n", "", "net", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "if", "self", ".", "space_to_depth", ":", "\n", "# we need to replicate 'SAME' tensorflow padding", "\n", "            ", "net", "=", "net", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", ",", "1", ":", "]", "\n", "", "net", "=", "self", ".", "maxpool_2a", "(", "net", ")", "\n", "net", "=", "self", ".", "conv_2b", "(", "net", ")", "\n", "net", "=", "self", ".", "conv_2c", "(", "net", ")", "\n", "if", "self", ".", "gating", ":", "\n", "            ", "net", "=", "self", ".", "gating", "(", "net", ")", "\n", "", "net", "=", "self", ".", "maxpool_3a", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_3b", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_3c", "(", "net", ")", "\n", "net", "=", "self", ".", "maxpool_4a", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_4b", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_4c", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_4d", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_4e", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_4f", "(", "net", ")", "\n", "net", "=", "self", ".", "maxpool_5a", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_5b", "(", "net", ")", "\n", "net", "=", "self", ".", "mixed_5c", "(", "net", ")", "\n", "net", "=", "th", ".", "mean", "(", "net", ",", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "\n", "return", "self", ".", "fc", "(", "net", ")", "\n", "#return {'video_embedding': self.fc(net), 'mixed_5c': net}", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.params_settings.get_1x_lr_params": [[7, 17], ["model.named_parameters"], "function", ["None"], ["def", "get_1x_lr_params", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    This generator returns all the parameters of weights\n    \"\"\"", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "name", "and", "param", ".", "requires_grad", ":", "\n", "#print (name, param.data)", "\n", "\n", "            ", "yield", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.params_settings.get_2x_lr_params": [[19, 29], ["model.named_parameters"], "function", ["None"], ["", "", "", "def", "get_2x_lr_params", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    This generator returns all the parameters of bias\n    \"\"\"", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'bias'", "in", "name", "and", "param", ".", "requires_grad", ":", "\n", "#print (name, param.data)", "\n", "\n", "            ", "yield", "param", "", "", "", "", ""]], "home.repos.pwc.inspect_result.plrbear_auxskd.models.r21d.R2Plus1DNet.get_feature": [[218, 225], ["r21d.R2Plus1DNet.relu1", "r21d.R2Plus1DNet.conv2", "r21d.R2Plus1DNet.conv3", "r21d.R2Plus1DNet.conv4", "r21d.R2Plus1DNet.conv5", "r21d.R2Plus1DNet.bn1", "r21d.R2Plus1DNet.conv1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.AverageMeter.__init__": [[58, 62], ["tools.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.AverageMeter.reset": [[63, 68], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.AverageMeter.update": [[69, 74], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.AverageMeter.__str__": [[75, 78], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.ProgressMeter.__init__": [[81, 85], ["tools.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.ProgressMeter.display": [[86, 90], ["str", "tools.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "return", "'\\t'", ".", "join", "(", "entries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.ProgressMeter._get_batch_fmtstr": [[91, 95], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.EnsembleNet.forward": [[138, 143], ["torch.stack", "out.mean.mean.mean", "m"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "m", "(", "x", ")", "for", "m", "in", "self", "]", "\n", "out", "=", "torch", ".", "stack", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "out", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.get_logger": [[11, 36], ["logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.info", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "open", "logging.getLogger.info", "logging.getLogger.info", "f.read", "open", "logging.getLogger.info", "package_f.read"], "function", ["None"], ["def", "get_logger", "(", "logpath", ",", "filepath", ",", "package_files", "=", "[", "]", ",", "displaying", "=", "True", ",", "saving", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "", "else", ":", "\n", "        ", "level", "=", "logging", ".", "INFO", "\n", "", "logger", ".", "setLevel", "(", "level", ")", "\n", "if", "saving", ":", "\n", "        ", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "logpath", ",", "mode", "=", "\"a\"", ")", "\n", "info_file_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "", "if", "displaying", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "filepath", ")", "\n", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "logger", ".", "info", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "for", "f", "in", "package_files", ":", "\n", "        ", "logger", ".", "info", "(", "f", ")", "\n", "with", "open", "(", "f", ",", "\"r\"", ")", "as", "package_f", ":", "\n", "            ", "logger", ".", "info", "(", "package_f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.makedirs": [[38, 41], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.makedirs"], ["", "def", "makedirs", "(", "dirname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.save_each_checkpoint": [[43, 46], ["os.path.join", "torch.save"], "function", ["None"], ["", "", "def", "save_each_checkpoint", "(", "state", ",", "epoch", ",", "save_dir", ")", ":", "\n", "    ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'ckpt_%d.pth.tar'", "%", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.save_checkpoint": [[48, 54], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save_dir", ")", ":", "\n", "    ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "ckpt_path", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_ckpt_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "ckpt_path", ",", "best_ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.accuracy": [[97, 112], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.remove_dropout": [[128, 132], ["model.classifier.children", "torch.nn.Sequential", "isinstance", "torch.nn.Sequential"], "function", ["None"], ["def", "remove_dropout", "(", "model", ")", ":", "\n", "    ", "classif", "=", "model", ".", "classifier", ".", "children", "(", ")", "\n", "classif", "=", "[", "nn", ".", "Sequential", "(", ")", "if", "isinstance", "(", "m", ",", "nn", ".", "Dropout", ")", "else", "m", "for", "m", "in", "classif", "]", "\n", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "classif", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.KLD.forward": [[77, 81], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "methods", ["None"], ["print", "(", "\"len of training data:\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "bs", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "## 2. init model", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD.__init__": [[107, 159], ["torch.nn.Module.__init__", "zip", "train.ISD.register_buffer", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "train.ISD.register_buffer", "models.r21d.R2Plus1DNet", "models.r21d.R2Plus1DNet", "R3DNet", "R3DNet", "train.get_mlp", "train.ISD.encoder_q.parameters", "train.ISD.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.get_mlp"], ["\n", "\n", "", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'encoder_q.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "ckpt", ".", "items", "(", ")", "}", "\n", "\n", "pre_model_dict", "=", "pre_model", ".", "state_dict", "(", ")", "\n", "p1", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "pre_model_dict", "}", "\n", "\n", "\n", "\n", "pre_model", ".", "load_state_dict", "(", "p1", ")", "\n", "\n", "\n", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_state", "=", "pre_model", ".", "state_dict", "(", ")", "\n", "\n", "p2", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_state", ".", "items", "(", ")", "if", "k", "in", "model_state", "and", "model_state", "[", "k", "]", ".", "shape", "==", "pretrained_state", "[", "k", "]", ".", "shape", "}", "\n", "\n", "\n", "model", ".", "load_state_dict", "(", "p2", ",", "strict", "=", "False", ")", "\n", "\n", "\n", "################################################################", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.005", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "6", ",", "gamma", "=", "0.1", ")", "\n", "\n", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_path", ")", "\n", "iterations", "=", "1", "\n", "\n", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "total_loss1", "=", "0.0", "\n", "total_loss2", "=", "0.0", "\n", "correct", "=", "0", "\n", "it", "=", "0", "\n", "# start_time = time.time()", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "rgb_clip", ",", "labels", "=", "sample", "\n", "rgb_clip", "=", "rgb_clip", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "label_speed", "=", "labels", "[", ":", ",", "0", "]", ".", "to", "(", "device", ")", "\n", "label_segment", "=", "labels", "[", ":", ",", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD._momentum_update_key_encoder": [[164, 168], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "train.ISD.encoder_q.parameters", "train.ISD.encoder_k.parameters"], "methods", ["None"], ["\n", "loss2", "=", "criterion", "(", "out2", ",", "label_segment", ")", "\n", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD.data_parallel": [[170, 176], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["None"], ["it", "=", "it", "+", "1", ";", "\n", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "probs_segment", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "out2", ")", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD._dequeue_and_enqueue": [[178, 192], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["accuracy_seg", "=", "torch", ".", "sum", "(", "preds_segment", "==", "label_segment", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "# accuracy_seg = accuracy_seg ", "\n", "\n", "probs_speed", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "out1", ")", "\n", "preds_speed", "=", "torch", ".", "max", "(", "probs_speed", ",", "1", ")", "[", "1", "]", "\n", "accuracy_speed", "=", "torch", ".", "sum", "(", "preds_speed", "==", "label_speed", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "# accuracy_speed = accuracy_speed ", "\n", "accuracy", "=", "(", "(", "accuracy_speed", "+", "accuracy_seg", ")", "/", "2", ")", "/", "args", ".", "bs", "\n", "correct", "+=", "(", "(", "accuracy_speed", "+", "accuracy_seg", ")", "/", "2", ")", "/", "args", ".", "bs", "\n", "\n", "iterations", "+=", "1", "\n", "\n", "if", "i", "%", "args", ".", "pf", "==", "0", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'data/train_loss'", ",", "loss", ",", "iterations", ")", "\n", "writer", ".", "add_scalar", "(", "'data/Acc'", ",", "accuracy", ",", "iterations", ")", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD.forward": [[193, 235], ["train.ISD.encoder_q", "train.ISD.predict_q_c", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "train.ISD.queue.clone().detach", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "train.ISD._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.ISD._momentum_update_key_encoder", "train.get_shuffle_ids", "train.ISD.encoder_k", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "train.ISD.t", "train.ISD.t", "train.ISD.queue.clone"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD._dequeue_and_enqueue", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD._momentum_update_key_encoder", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.get_shuffle_ids"], ["\n", "print", "(", "\"[Epoch{}/{}] Loss: {} Acc: {}  \"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", ",", "loss", ",", "accuracy", ")", ")", "\n", "\n", "# start_time = time.time()", "\n", "\n", "\n", "", "", "print", "(", "'[pre-training] Loss_speed: {:.3f}, Loss_segment: {:.3f}'", ".", "format", "(", "loss1", ",", "loss2", ")", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "model_saver", "(", "model", ",", "optimizer", ",", "epoch", ",", "args", ".", "max_save", ",", "pretrain_cks_path", ")", "\n", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "model_saver", "(", "net", ",", "optimizer", ",", "epoch", ",", "max_to_keep", ",", "model_save_path", ")", ":", "\n", "    ", "tmp_dir", "=", "os", ".", "listdir", "(", "model_save_path", ")", "\n", "# print(tmp_dir)", "\n", "tmp_dir", ".", "sort", "(", ")", "\n", "if", "len", "(", "tmp_dir", ")", ">=", "max_to_keep", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "model_save_path", ",", "tmp_dir", "[", "0", "]", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_save_path", ",", "'epoch_segment_self_f-'", "+", "'{:02}'", ".", "format", "(", "epoch", "+", "1", ")", "+", "'.pth.tar'", ")", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "device", ")", "\n", "\n", "train", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.parse_args": [[27, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.parse_args"], ["parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'32, batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'total epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_sr'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'largest sampling rate for speed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_segment'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of segments'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_save'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'max save epoch num'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'ucf101'", ",", "help", "=", "'ucf101/k400'", ")", "\n", "parser", ".", "add_argument", "(", "'--pf'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'r21d'", ",", "help", "=", "'r21d/r3d, pretrain model'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_list'", ",", "type", "=", "str", ",", "default", "=", "'./list/train_ucf101_split1.list'", ",", "help", "=", "'data list'", ")", "\n", "parser", ".", "add_argument", "(", "'--rgb_prefix'", ",", "type", "=", "str", ",", "default", "=", "'/home/amir/DATA/ucf101/jpegs_256/'", ",", "help", "=", "'dataset dir'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n", "\n", "\n", "\n", "", "def", "train", "(", "args", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "exp_name", "=", "'{}_sr_{}_{}_lr_{}_len_{}_sz_{}'", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "max_sr", ",", "args", ".", "model", ",", "args", ".", "lr", ",", "args", ".", "clip_len", ",", "args", ".", "crop_sz", ")", "\n", "\n", "\n", "print", "(", "exp_name", ")", "\n", "\n", "pretrain_cks_path", "=", "os", ".", "path", ".", "join", "(", "'pretrain_cks'", ",", "exp_name", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "'visual_logs'", ",", "exp_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pretrain_cks_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pretrain_cks_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_path", ")", "\n", "\n", "\n", "\n", "", "transforms_", "=", "transforms", ".", "Compose", "(", "\n", "[", "ClipResize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ")", ",", "# h x w", "\n", "RandomCrop", "(", "args", ".", "crop_sz", ")", ",", "\n", "RandomHorizontalFlip", "(", "0.5", ")", "]", "\n", ")", "\n", "\n", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.8", ",", "contrast", "=", "0.8", ",", "saturation", "=", "0.8", ",", "hue", "=", "0.2", ")", "\n", "color_jitter", "=", "transforms", ".", "RandomApply", "(", "[", "color_jitter", "]", ",", "p", "=", "0.8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.get_mlp": [[83, 91], ["torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear"], "function", ["None"], ["        ", "model", "=", "r21d", ".", "R2Plus1DNet", "(", "num_classes", "=", "args", ".", "max_sr", ",", "num_classes_segment", "=", "args", ".", "num_segment", ")", "\n", "pre_model", "=", "r21d", ".", "R2Plus1DNet", "(", "num_classes", "=", "128", ",", "multi_out", "=", "False", ")", "\n", "", "elif", "args", ".", "model", "==", "'r3d'", ":", "\n", "        ", "model", "=", "r3d", ".", "R3DNet", "(", "num_classes", "=", "args", ".", "max_sr", ",", "num_classes_segment", "=", "args", ".", "num_segment", ")", "\n", "#define a pre_model like what we did for r21d", "\n", "\n", "\n", "\n", "# 4. multi gpu", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.get_mlp_s": [[95, 101], ["torch.nn.Sequential", "torch.nn.Linear"], "function", ["None"], ["pre_model", "=", "nn", ".", "DataParallel", "(", "pre_model", ")", "\n", "\n", "\n", "\n", "# ######################################################################################", "\n", "\n", "#Here we load auxSKD weights to our base model", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.concat_all_gather": [[236, 248], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], []], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.get_shuffle_ids": [[249, 256], ["torch.randperm().long().cuda", "torch.randperm().long().cuda", "torch.randperm().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.arange().long().cuda", "torch.zeros().long().cuda.index_copy_", "torch.randperm().long", "torch.randperm().long", "torch.randperm().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.train": [[260, 343], ["print", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomApply", "datasets.ucf101.ucf101_pace_pretrain", "print", "torch.utils.data.DataLoader", "train.ISD", "isd.cuda.data_parallel", "isd.cuda.cuda", "KLD().cuda", "torch.nn.CrossEntropyLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "len", "print", "time.time", "train.train_student", "time.time", "print", "optim.lr_scheduler.StepLR.step", "utils.video_transforms.ClipResize", "utils.video_transforms.RandomCrop", "utils.video_transforms.RandomHorizontalFlip", "train.KLD", "isd.cuda.parameters", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "isd.cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.ISD.data_parallel", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.makedirs", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.tools.makedirs", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.train_student"], []], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.train_student": [[345, 396], ["isd.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "im_q.to.to", "im_k.to.to", "isd", "criterion1", "optimizer.zero_grad", "criterion1.backward", "optimizer.step", "util.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "util.AverageMeter.update", "time.time", "criterion1.item", "im_q.to.size", "print", "sys.stdout.flush", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.train.train", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.update", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.update", "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.update"], []], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.__init__": [[27, 33], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.reset": [[34, 39], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.AverageMeter.update": [[40, 45], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.adjust_learning_rate": [[9, 23], ["hasattr", "print", "numpy.sum", "print", "math.cos", "numpy.asarray"], "function", ["None"], ["def", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", ":", "\n", "    ", "if", "hasattr", "(", "opt", ",", "'cos'", ")", "and", "opt", ".", "cos", ":", "\n", "# NOTE: since epoch starts with 1, we have to subtract 1", "\n", "        ", "new_lr", "=", "opt", ".", "learning_rate", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "epoch", "-", "1", ")", "/", "opt", ".", "epochs", ")", ")", "\n", "print", "(", "'LR: {}'", ".", "format", "(", "new_lr", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "", "else", ":", "\n", "        ", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "asarray", "(", "opt", ".", "lr_decay_epochs", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "            ", "new_lr", "=", "opt", ".", "lr", "*", "(", "opt", ".", "lr_decay_rate", "**", "steps", ")", "\n", "print", "(", "'LR: {}'", ".", "format", "(", "new_lr", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.plrbear_auxskd.auxSKD.util.accuracy": [[47, 62], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]]}