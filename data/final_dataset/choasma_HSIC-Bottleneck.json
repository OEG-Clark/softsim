{"home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_yaml": [[9, 18], ["color.print_highlight", "open", "yaml.load", "print"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["def", "load_yaml", "(", "filepath", ")", ":", "\n", "\n", "    ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "stream", ",", "yaml", ".", "FullLoader", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "            ", "print", "(", "exc", ")", "\n", "", "", "print_highlight", "(", "\"Loaded  [{}]\"", ".", "format", "(", "filepath", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_model": [[19, 24], ["path.attaching_timestamp_filepath", "torch.save", "color.print_highlight", "path.make_symlink", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.attaching_timestamp_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.make_symlink"], ["", "def", "save_model", "(", "model", ",", "filepath", ",", "sympath", ")", ":", "\n", "    ", "timestamp_path", "=", "attaching_timestamp_filepath", "(", "filepath", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "timestamp_path", ")", "\n", "print_highlight", "(", "\"Saved   [{}]\"", ".", "format", "(", "timestamp_path", ")", ")", "\n", "make_symlink", "(", "timestamp_path", ",", "sympath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_model": [[25, 29], ["torch.load", "color.print_highlight"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "load_model", "(", "filepath", ")", ":", "\n", "    ", "model", "=", "torch", ".", "load", "(", "filepath", ")", "\n", "print_highlight", "(", "\"Loaded  [{}]\"", ".", "format", "(", "filepath", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs": [[30, 35], ["path.attaching_timestamp_filepath", "np.save", "path.make_symlink", "color.print_highlight"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.attaching_timestamp_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.make_symlink", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "save_logs", "(", "logs", ",", "filepath", ")", ":", "\n", "    ", "timestamp_path", "=", "attaching_timestamp_filepath", "(", "filepath", ")", "\n", "np", ".", "save", "(", "timestamp_path", ",", "logs", ")", "\n", "make_symlink", "(", "timestamp_path", ",", "filepath", ")", "\n", "print_highlight", "(", "\"Saved   [{}]\"", ".", "format", "(", "timestamp_path", ")", ",", "ctype", "=", "\"blue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs": [[36, 40], ["color.print_highlight", "np.load"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "load_logs", "(", "filepath", ")", ":", "\n", "    ", "logs", "=", "np", ".", "load", "(", "filepath", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "print_highlight", "(", "\"Loaded  [{}]\"", ".", "format", "(", "filepath", ")", ",", "ctype", "=", "\"blue\"", ")", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.__init__": [[5, 7], ["meter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.reset": [[8, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" reset meter\n        \"\"\"", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update": [[16, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\" incremental meter\n        \"\"\"", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_dataset_from_code": [[4, 26], ["dataset.get_mnist_data", "dataset.get_cifar10_data", "os.path.join", "dataset.get_fasionmnist_data", "ValueError", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_mnist_data", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_cifar10_data", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_fasionmnist_data"], ["def", "get_dataset_from_code", "(", "code", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\" interface to get function object\n    Args:\n        code(str): specific data type\n    Returns:\n        (torch.utils.data.DataLoader): train loader \n        (torch.utils.data.DataLoader): test loader\n    \"\"\"", "\n", "dataset_root", "=", "\"./assets/data\"", "\n", "if", "code", "==", "'mnist'", ":", "\n", "        ", "train_loader", ",", "test_loader", "=", "get_mnist_data", "(", "batch_size", "=", "batch_size", ",", "\n", "data_folder_path", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "'mnist-data'", ")", ")", "\n", "", "elif", "code", "==", "'cifar10'", ":", "\n", "        ", "train_loader", ",", "test_loader", "=", "get_cifar10_data", "(", "batch_size", "=", "batch_size", ",", "\n", "data_folder_path", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "'cifar10-data'", ")", ")", "\n", "", "elif", "code", "==", "'fmnist'", ":", "\n", "        ", "train_loader", ",", "test_loader", "=", "get_fasionmnist_data", "(", "batch_size", "=", "batch_size", ",", "\n", "data_folder_path", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "'fasionmnist-data'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown data type : [{}] Impulse Exists\"", ".", "format", "(", "data_name", ")", ")", "\n", "\n", "", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_fasionmnist_data": [[28, 42], ["transforms.Compose", "datasets.FashionMNIST", "torch.utils.data.DataLoader", "datasets.FashionMNIST", "torch.utils.data.DataLoader", "transforms.ToTensor"], "function", ["None"], ["", "def", "get_fasionmnist_data", "(", "data_folder_path", ",", "batch_size", "=", "64", ")", ":", "\n", "# Define a transform to normalize the data", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize((0.2860,), (0.3530,)),", "\n", "]", ")", "\n", "# Download and load the training data", "\n", "trainset", "=", "datasets", ".", "FashionMNIST", "(", "data_folder_path", ",", "download", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "transform", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "# Download and load the test data", "\n", "testset", "=", "datasets", ".", "FashionMNIST", "(", "data_folder_path", ",", "download", "=", "True", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "trainloader", ",", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_mnist_data": [[43, 73], ["datasets.MNIST", "datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "transforms.Compose", "transforms.Compose", "transforms.ToTensor", "transforms.ToTensor"], "function", ["None"], ["", "def", "get_mnist_data", "(", "data_folder_path", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "\"\"\" mnist data\n    Args:\n        train_batch_size(int): training batch size \n        test_batch_size(int): test batch size\n    Returns:\n        (torch.utils.data.DataLoader): train loader \n        (torch.utils.data.DataLoader): test loader\n    \"\"\"", "\n", "train_data", "=", "datasets", ".", "MNIST", "(", "data_folder_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize((0.1307,), (0.3081,))", "\n", "]", ")", "\n", ")", "\n", "\n", "test_data", "=", "datasets", ".", "MNIST", "(", "data_folder_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize((0.1307,), (0.3081,))", "\n", "]", ")", "\n", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_cifar10_data": [[74, 108], ["transforms.Compose", "transforms.Compose", "datasets.CIFAR10", "datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "transforms.ToTensor", "transforms.ToTensor"], "function", ["None"], ["", "def", "get_cifar10_data", "(", "data_folder_path", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "\"\"\" cifar10 data\n    Args:\n        train_batch_size(int): training batch size \n        test_batch_size(int): test batch size\n    Returns:\n        (torch.utils.data.DataLoader): train loader \n        (torch.utils.data.DataLoader): test loader\n    \"\"\"", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "\n", "#transforms.RandomCrop(32, padding=4),", "\n", "#transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize((0.4913, 0.4821, 0.4465), (0.2470, 0.2434, 0.2615)),", "\n", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#transforms.Normalize((0.4913, 0.4821, 0.4465), (0.2470, 0.2434, 0.2615)),", "\n", "]", ")", "\n", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "data_folder_path", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "data_folder_path", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.get_color": [[10, 26], ["None"], "function", ["None"], ["def", "get_color", "(", "ctype", ")", ":", "\n", "\n", "    ", "if", "ctype", "==", "'yellow'", ":", "\n", "        ", "color", "=", "TEXT_YELLOW", "\n", "", "elif", "ctype", "==", "'green'", ":", "\n", "        ", "color", "=", "TEXT_GREEN", "\n", "", "elif", "ctype", "==", "'white'", ":", "\n", "        ", "color", "=", "TEXT_WHITE", "\n", "", "elif", "ctype", "==", "'black'", ":", "\n", "        ", "color", "=", "TEXT_BLACK", "\n", "", "elif", "ctype", "==", "'blue'", ":", "\n", "        ", "color", "=", "TEXT_BLUE", "\n", "", "elif", "ctype", "==", "'red'", ":", "\n", "        ", "color", "=", "TEXT_RED", "\n", "\n", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_emph": [[28, 34], ["print", "print", "print"], "function", ["None"], ["", "def", "print_emph", "(", "msg", ")", ":", "\n", "    ", "bar", "=", "\"# # # # # # # # # # # # # # # # # # # #\"", "\n", "print", "(", "\"{}{}\"", ".", "format", "(", "TEXT_WHITE", ",", "bar", ")", ")", "\n", "print", "(", "\"#     {}\"", ".", "format", "(", "msg", ")", ")", "\n", "print", "(", "\"{}{}\"", ".", "format", "(", "bar", ",", "TEXT_RESET", ")", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight": [[35, 38], ["color.get_color", "print"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.get_color"], ["", "def", "print_highlight", "(", "msg", ",", "ctype", "=", "'yellow'", ")", ":", "\n", "    ", "color", "=", "get_color", "(", "ctype", ")", "\n", "print", "(", "\"{}{}{}\"", ".", "format", "(", "color", ",", "msg", ",", "TEXT_RESET", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.test": [[39, 55], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "print", "(", "\"\\033[0;37;40m Normal text\\n\"", ")", "\n", "print", "(", "\"\\033[2;37;40m Underlined text\\033[0;37;40m \\n\"", ")", "\n", "print", "(", "\"\\033[1;37;40m Bright Colour\\033[0;37;40m \\n\"", ")", "\n", "print", "(", "\"\\033[3;37;40m Negative Colour\\033[0;37;40m \\n\"", ")", "\n", "print", "(", "\"\\033[5;37;40m Negative Colour\\033[0;37;40m\\n\"", ")", "\n", "\n", "print", "(", "\"\\033[1;37;40m \\033[2;37:40m TextColour BlackBackground          TextColour GreyBackground                WhiteText ColouredBackground\\033[0;37;40m\\n\"", ")", "\n", "print", "(", "\"\\033[1;30;40m Dark Gray      \\033[0m 1;30;40m            \\033[0;30;47m Black      \\033[0m 0;30;47m               \\033[0;37;41m Black      \\033[0m 0;37;41m\"", ")", "\n", "print", "(", "\"\\033[1;31;40m Bright Red     \\033[0m 1;31;40m            \\033[0;31;47m Red        \\033[0m 0;31;47m               \\033[0;37;42m Black      \\033[0m 0;37;42m\"", ")", "\n", "print", "(", "\"\\033[1;32;40m Bright Green   \\033[0m 1;32;40m            \\033[0;32;47m Green      \\033[0m 0;32;47m               \\033[0;37;43m Black      \\033[0m 0;37;43m\"", ")", "\n", "print", "(", "\"\\033[1;33;40m Yellow         \\033[0m 1;33;40m            \\033[0;33;47m Brown      \\033[0m 0;33;47m               \\033[0;37;44m Black      \\033[0m 0;37;44m\"", ")", "\n", "print", "(", "\"\\033[1;34;40m Bright Blue    \\033[0m 1;34;40m            \\033[0;34;47m Blue       \\033[0m 0;34;47m               \\033[0;37;45m Black      \\033[0m 0;37;45m\"", ")", "\n", "print", "(", "\"\\033[1;35;40m Bright Magenta \\033[0m 1;35;40m            \\033[0;35;47m Magenta    \\033[0m 0;35;47m               \\033[0;37;46m Black      \\033[0m 0;37;46m\"", ")", "\n", "print", "(", "\"\\033[1;36;40m Bright Cyan    \\033[0m 1;36;40m            \\033[0;36;47m Cyan       \\033[0m 0;36;47m               \\033[0;37;47m Black      \\033[0m 0;37;47m\"", ")", "\n", "print", "(", "\"\\033[1;37;40m White          \\033[0m 1;37;40m            \\033[0;37;40m Light Grey \\033[0m 0;37;40m               \\033[0;37;48m Black      \\033[0m 0;37;48m\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.attaching_timestamp_filepath": [[7, 14], ["os.path.basename", "os.path.dirname", "os.path.splitext", "os.path.join"], "function", ["None"], ["def", "attaching_timestamp_filepath", "(", "filepath", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "basename", "(", "filepath", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "filename", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "filename_time", "=", "\"{}_{}{}\"", ".", "format", "(", "TIMESTAMP_CODE", ",", "filename", ",", "ext", ")", "\n", "timestamp_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'raw'", ",", "filename_time", ")", "\n", "return", "timestamp_path", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.make_symlink": [[15, 20], ["os.path.exists", "os.symlink", "color.print_highlight", "os.remove"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "make_symlink", "(", "src_path", ",", "sym_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "sym_path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "sym_path", ")", "\n", "", "os", ".", "symlink", "(", "src_path", ",", "sym_path", ")", "\n", "print_highlight", "(", "\"Symlink [{}]\"", ".", "format", "(", "sym_path", ")", ",", "ctype", "=", "\"blue\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.code_name": [[21, 27], ["None"], "function", ["None"], ["", "def", "code_name", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", ":", "\n", "    ", "if", "idx", ":", "\n", "        ", "filename", "=", "\"{}-{}-{}-{:04d}.npy\"", ".", "format", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "\"{}-{}-{}.npy\"", ".", "format", "(", "task", ",", "ttype", ",", "dtype", ")", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath": [[28, 31], ["os.getcwd", "path.code_name"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.code_name"], ["", "def", "get_log_filepath", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "\"{}/assets/logs/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "code_name", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_raw_filepath": [[32, 35], ["os.getcwd", "path.code_name"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.code_name"], ["", "def", "get_log_raw_filepath", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "\"{}/assets/raw/logs/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "code_name", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath_": [[37, 39], ["os.getcwd"], "function", ["None"], ["", "def", "get_log_filepath_", "(", "config_dict", ")", ":", "\n", "    ", "return", "\"{}/assets/logs/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_raw_filepath_": [[41, 43], ["os.getcwd"], "function", ["None"], ["", "def", "get_log_raw_filepath_", "(", "filename", ")", ":", "\n", "    ", "return", "\"{}/assets/logs/raw/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename": [[44, 46], ["None"], "function", ["None"], ["", "def", "get_plot_filename", "(", "config_dict", ")", ":", "\n", "    ", "return", "\"{}-{}\"", ".", "format", "(", "config_dict", "[", "'task'", "]", ",", "config_dict", "[", "'data_code'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path": [[47, 49], ["os.getcwd"], "function", ["None"], ["", "def", "get_exp_path", "(", "filename", ")", ":", "\n", "    ", "return", "\"{}/assets/exp/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_raw_path": [[50, 52], ["os.getcwd"], "function", ["None"], ["", "def", "get_exp_raw_path", "(", "filename", ")", ":", "\n", "    ", "return", "\"{}/assets/exp/raw/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path": [[53, 56], ["os.getcwd", "path.code_name"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.code_name"], ["", "def", "get_act_path", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "\"{}/assets/activation/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "code_name", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_raw_path": [[57, 60], ["os.getcwd", "path.code_name"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.code_name"], ["", "def", "get_act_raw_path", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "\"{}/assets/activation/raw/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "code_name", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path_": [[61, 64], ["os.getcwd", "path.code_name"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.code_name"], ["", "def", "get_act_path_", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "\"{}/assets/activation/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "code_name", "(", "task", ",", "ttype", ",", "dtype", ",", "idx", ")", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_raw_path_": [[65, 71], ["os.getcwd"], "function", ["None"], ["", "def", "get_act_raw_path_", "(", "filename", ",", "idx", "=", "''", ")", ":", "\n", "    ", "if", "idx", ":", "\n", "        ", "idx", "=", "\"-{:04d}\"", ".", "format", "(", "idx", ")", "\n", "\n", "", "filepath", "=", "\"{}/assets/activation/raw/{}{}.{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", "[", ":", "-", "4", "]", ",", "idx", ",", "filename", "[", "-", "3", ":", "]", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_path": [[72, 79], ["os.getcwd", "os.getcwd", "os.path.splitext"], "function", ["None"], ["", "def", "get_model_path", "(", "filename", ",", "idx", "=", "None", ")", ":", "\n", "    ", "if", "idx", ":", "\n", "        ", "filepath", "=", "\"{}/assets/models/{}-{:04d}.pt\"", ".", "format", "(", "\n", "os", ".", "getcwd", "(", ")", ",", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "0", "]", ",", "idx", ")", "\n", "", "else", ":", "\n", "        ", "filepath", "=", "\"{}/assets/models/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_raw_path": [[80, 87], ["os.getcwd", "os.getcwd", "os.path.splitext"], "function", ["None"], ["", "def", "get_model_raw_path", "(", "filename", ",", "idx", "=", "None", ")", ":", "\n", "    ", "if", "idx", ":", "\n", "        ", "filepath", "=", "\"{}/assets/models/raw/{}-{:04d}.pt\"", ".", "format", "(", "\n", "os", ".", "getcwd", "(", ")", ",", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "0", "]", ",", "idx", ")", "\n", "", "else", ":", "\n", "        ", "filepath", "=", "\"{}/assets/models/raw/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_tmp_path": [[88, 90], ["os.getcwd"], "function", ["None"], ["", "def", "get_tmp_path", "(", "filename", ")", ":", "\n", "    ", "return", "\"{}/assets/tmp/{}\"", ".", "format", "(", "os", ".", "getcwd", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log": [[17, 81], ["matplotlib.figure", "plt.figure.add_subplot", "len", "numpy.arange().tolist", "numpy.arange().tolist", "enumerate", "fig.add_subplot.set_title", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticks", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.plot", "fig.add_subplot.plot", "max", "min", "max", "min", "abs", "matplotlib.legend", "abs", "numpy.arange", "numpy.arange", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "abs", "matplotlib.legend", "matplotlib.legend", "numpy.arange", "numpy.arange", "numpy.linspace", "numpy.round", "p[].get_color", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.get_color"], ["def", "plot_epoch_log", "(", "curve_list", ",", "ptype", ",", "metadata", ")", ":", "\n", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "n", "=", "len", "(", "curve_list", "[", "0", "]", "[", "ptype", "]", ")", "\n", "xticks_idx", "=", "np", ".", "arange", "(", "n", ")", ".", "tolist", "(", ")", "\n", "xticks_val", "=", "np", ".", "arange", "(", "n", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "n", ">", "10", ":", "\n", "        ", "skip", "=", "n", "/", "10", "\n", "xticks_idx", "=", "xticks_idx", "[", ":", ":", "skip", "]", "+", "[", "xticks_idx", "[", "-", "1", "]", "]", "\n", "xticks_val", "=", "xticks_idx", "\n", "\n", "", "max_y", "=", "-", "1E5", "\n", "min_y", "=", "1E5", "\n", "end_max_y", "=", "-", "1E5", "\n", "end_min_y", "=", "1E5", "\n", "\n", "for", "i", ",", "curve_dict", "in", "enumerate", "(", "curve_list", ")", ":", "\n", "        ", "p", "=", "ax", ".", "plot", "(", "curve_dict", "[", "ptype", "]", ",", "linewidth", "=", "4", ",", "label", "=", "metadata", "[", "'label'", "]", "[", "i", "]", ")", "\n", "ax", ".", "plot", "(", "curve_dict", "[", "ptype", "]", ",", "'*'", ",", "ms", "=", "30", ",", "alpha", "=", ".3", ",", "color", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ")", "\n", "max_y", "=", "max", "(", "max_y", ",", "np", ".", "max", "(", "curve_dict", "[", "ptype", "]", ")", ")", "\n", "min_y", "=", "min", "(", "min_y", ",", "np", ".", "min", "(", "curve_dict", "[", "ptype", "]", ")", ")", "\n", "end_max_y", "=", "max", "(", "end_max_y", ",", "np", ".", "max", "(", "curve_dict", "[", "ptype", "]", "[", "-", "1", "]", ")", ")", "\n", "end_min_y", "=", "min", "(", "end_min_y", ",", "np", ".", "min", "(", "curve_dict", "[", "ptype", "]", "[", "-", "1", "]", ")", ")", "\n", "# WIP: adjusting legend dynamically", "\n", "# if 'acc' in ptype:", "\n", "#     if max_y < 50.:", "\n", "#         plt.legend(fontsize=FONTSIZE_LEDEND, loc='upper right')", "\n", "#     else:", "\n", "#         plt.legend(fontsize=FONTSIZE_LEDEND, loc='lower right')", "\n", "# elif 'loss' in ptype:", "\n", "#     plt.legend(fontsize=FONTSIZE_LEDEND, loc='upper right')", "\n", "# else:", "\n", "#     plt.legend(fontsize=FONTSIZE_LEDEND)", "\n", "\n", "", "if", "abs", "(", "end_max_y", "-", "end_min_y", ")", ">", "abs", "(", "max_y", "-", "min_y", ")", "/", "2.", ":", "\n", "        ", "plt", ".", "legend", "(", "fontsize", "=", "FONTSIZE_LEDEND", ")", "\n", "", "else", ":", "\n", "        ", "if", "curve_list", "[", "0", "]", "[", "ptype", "]", "[", "-", "1", "]", ">", "curve_list", "[", "0", "]", "[", "ptype", "]", "[", "0", "]", ":", "\n", "            ", "plt", ".", "legend", "(", "fontsize", "=", "FONTSIZE_LEDEND", ",", "loc", "=", "'lower right'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "legend", "(", "fontsize", "=", "FONTSIZE_LEDEND", ",", "loc", "=", "'upper right'", ")", "\n", "#plt.legend(fontsize=FONTSIZE_LEDEND)", "\n", "\n", "", "", "margin", "=", "abs", "(", "max_y", "-", "min_y", ")", "/", "2.", "\n", "max_y", "+=", "margin", "\n", "min_y", "-=", "margin", "\n", "if", "'acc'", "in", "ptype", ":", "\n", "        ", "yticks_idx", "=", "np", ".", "arange", "(", "110", ")", "[", ":", ":", "10", "]", "# [0, 10, ..., 100]", "\n", "yticks_val", "=", "np", ".", "arange", "(", "110", ")", "[", ":", ":", "10", "]", "# [0, 10, ..., 100]", "\n", "", "else", ":", "\n", "        ", "yticks_idx", "=", "np", ".", "linspace", "(", "min_y", ",", "max_y", ",", "100", ")", "[", ":", ":", "10", "]", "\n", "yticks_val", "=", "[", "np", ".", "round", "(", "x", ",", "1", ")", "for", "x", "in", "np", ".", "linspace", "(", "min_y", ",", "max_y", ",", "100", ")", "[", ":", ":", "10", "]", "]", "\n", "\n", "", "ax", ".", "set_title", "(", "metadata", "[", "'title'", "]", ",", "fontsize", "=", "FONTSIZE_TITLE", ")", "\n", "ax", ".", "set_xticks", "(", "xticks_idx", ")", "\n", "ax", ".", "set_xticklabels", "(", "xticks_val", ",", "fontsize", "=", "FONTSIZE_LEDEND", ")", "\n", "ax", ".", "set_yticks", "(", "yticks_idx", ")", "\n", "ax", ".", "set_yticklabels", "(", "yticks_val", ",", "fontsize", "=", "FONTSIZE_YTICKS", ")", "\n", "ax", ".", "set_xlabel", "(", "metadata", "[", "'xlabel'", "]", ",", "fontsize", "=", "FONTSIZE_XLABEL", ")", "\n", "ax", ".", "set_ylabel", "(", "metadata", "[", "'ylabel'", "]", ",", "fontsize", "=", "FONTSIZE_YLABEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log": [[83, 164], ["matplotlib.figure", "plt.figure.add_subplot", "len", "numpy.arange().tolist", "numpy.arange().tolist", "len", "enumerate", "matplotlib.legend", "fig.add_subplot.set_title", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticks", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "int", "numpy.zeros_like", "numpy.zeros_like", "range", "fig.add_subplot.plot", "fig.add_subplot.fill_between", "max", "min", "max", "min", "max", "min", "abs", "matplotlib.legend", "matplotlib.legend", "numpy.arange", "numpy.arange", "len", "numpy.max", "numpy.min", "numpy.std", "numpy.mean", "numpy.arange", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.arange", "numpy.arange", "numpy.linspace", "numpy.round", "len", "len", "p[].get_color", "len", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.get_color"], ["", "def", "plot_batches_log", "(", "curve_list", ",", "ptype", ",", "metadata", ")", ":", "\n", "\n", "#assert len(curve_list)>1, \"this is for multiple curve plotting\"", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "\n", "n", "=", "len", "(", "curve_list", "[", "0", "]", "[", "0", "]", "[", "ptype", "]", ")", "\n", "if", "n", "==", "0", ":", "\n", "        ", "n", "=", "1", "\n", "", "xticks_idx", "=", "np", ".", "arange", "(", "0", ",", "n", "*", "(", "len", "(", "curve_list", "[", "0", "]", ")", "+", "1", ")", ",", "n", ")", ".", "tolist", "(", ")", "\n", "xticks_val", "=", "np", ".", "arange", "(", "len", "(", "xticks_idx", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "n", "=", "len", "(", "xticks_idx", ")", "\n", "if", "n", ">", "10", ":", "\n", "        ", "skip", "=", "int", "(", "n", "/", "10", ")", "\n", "xticks_idx", "=", "xticks_idx", "[", ":", ":", "skip", "]", "+", "[", "xticks_idx", "[", "-", "1", "]", "]", "\n", "xticks_val", "=", "xticks_val", "[", ":", ":", "skip", "]", "+", "[", "xticks_val", "[", "-", "1", "]", "]", "\n", "\n", "", "max_y", "=", "-", "1E5", "\n", "min_y", "=", "1E5", "\n", "end_max_y", "=", "-", "1E5", "\n", "end_min_y", "=", "1E5", "\n", "start_max_y", "=", "-", "1E5", "\n", "start_min_y", "=", "1E5", "\n", "\n", "for", "i", ",", "curve_dict", "in", "enumerate", "(", "curve_list", ")", ":", "\n", "\n", "        ", "val", "=", "[", "x", "[", "ptype", "]", "for", "x", "in", "curve_dict", "]", "\n", "val", "=", "[", "y", "for", "x", "in", "val", "for", "y", "in", "x", "]", "\n", "\n", "\n", "e_w", "=", "5", "\n", "e", "=", "np", ".", "zeros_like", "(", "val", ")", "\n", "v", "=", "np", ".", "zeros_like", "(", "val", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "val", ")", ")", ":", "\n", "            ", "i_b", "=", "np", ".", "max", "(", "[", "0", ",", "j", "-", "e_w", "]", ")", "\n", "i_e", "=", "np", ".", "min", "(", "[", "len", "(", "val", ")", ",", "j", "+", "e_w", "]", ")", "\n", "e", "[", "j", "]", "=", "np", ".", "std", "(", "val", "[", "i_b", ":", "i_e", "]", ")", "\n", "v", "[", "j", "]", "=", "np", ".", "mean", "(", "val", "[", "i_b", ":", "i_e", "]", ")", "\n", "", "p", "=", "ax", ".", "plot", "(", "v", ",", "linewidth", "=", "4", ",", "label", "=", "metadata", "[", "'label'", "]", "[", "i", "]", ")", "\n", "\n", "ax", ".", "fill_between", "(", "np", ".", "arange", "(", "len", "(", "val", ")", ")", ",", "v", "-", "e", ",", "v", "+", "e", ",", "color", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ",", "alpha", "=", ".25", ")", "\n", "max_y", "=", "max", "(", "max_y", ",", "np", ".", "max", "(", "val", ")", ")", "\n", "min_y", "=", "min", "(", "min_y", ",", "np", ".", "min", "(", "val", ")", ")", "\n", "end_max_y", "=", "max", "(", "end_max_y", ",", "np", ".", "max", "(", "val", "[", "-", "1", "]", ")", ")", "\n", "end_min_y", "=", "min", "(", "end_min_y", ",", "np", ".", "min", "(", "val", "[", "-", "1", "]", ")", ")", "\n", "start_max_y", "=", "max", "(", "start_max_y", ",", "np", ".", "max", "(", "val", "[", "0", "]", ")", ")", "\n", "start_min_y", "=", "min", "(", "start_min_y", ",", "np", ".", "min", "(", "val", "[", "0", "]", ")", ")", "\n", "\n", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "FONTSIZE_LEDEND", ")", "\n", "\n", "margin", "=", "abs", "(", "max_y", "-", "min_y", ")", "/", "2.", "\n", "if", "(", "end_max_y", "+", "end_min_y", ")", "<", "(", "start_min_y", "+", "start_max_y", ")", ":", "\n", "        ", "max_y", "+=", "margin", "\n", "", "else", ":", "\n", "        ", "min_y", "-=", "margin", "\n", "\n", "", "if", "'acc'", "in", "ptype", ":", "\n", "        ", "yticks_idx", "=", "np", ".", "arange", "(", "110", ")", "[", ":", ":", "10", "]", "# [0, 10, ..., 100]", "\n", "yticks_val", "=", "np", ".", "arange", "(", "110", ")", "[", ":", ":", "10", "]", "# [0, 10, ..., 100]", "\n", "", "else", ":", "\n", "        ", "yticks_idx", "=", "np", ".", "linspace", "(", "min_y", ",", "max_y", ",", "100", ")", "[", ":", ":", "10", "]", "\n", "yticks_val", "=", "[", "np", ".", "round", "(", "x", ",", "1", ")", "for", "x", "in", "np", ".", "linspace", "(", "min_y", ",", "max_y", ",", "100", ")", "[", ":", ":", "10", "]", "]", "\n", "\n", "", "ax", ".", "set_title", "(", "metadata", "[", "'title'", "]", ",", "fontsize", "=", "FONTSIZE_TITLE", ")", "\n", "ax", ".", "set_xticks", "(", "xticks_idx", ")", "\n", "ax", ".", "set_xticklabels", "(", "xticks_val", ",", "fontsize", "=", "FONTSIZE_XTICKS", ")", "\n", "ax", ".", "set_yticks", "(", "yticks_idx", ")", "\n", "ax", ".", "set_yticklabels", "(", "yticks_val", ",", "fontsize", "=", "FONTSIZE_YTICKS", ")", "\n", "ax", ".", "set_xlabel", "(", "metadata", "[", "'xlabel'", "]", ",", "fontsize", "=", "FONTSIZE_XLABEL", ")", "\n", "ax", ".", "set_ylabel", "(", "metadata", "[", "'ylabel'", "]", ",", "fontsize", "=", "FONTSIZE_YLABEL", ")", "\n", "\n", "\n", "val", "=", "[", "x", "[", "ptype", "]", "for", "x", "in", "curve_list", "[", "0", "]", "]", "\n", "if", "val", "[", "-", "1", "]", ">", "val", "[", "0", "]", ":", "\n", "        ", "plt", ".", "legend", "(", "fontsize", "=", "FONTSIZE_LEDEND", ",", "loc", "=", "'lower right'", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "fontsize", "=", "FONTSIZE_LEDEND", ",", "loc", "=", "'upper right'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_activation_distribution": [[166, 224], ["range", "numpy.min", "numpy.max", "matplotlib.subplots", "range", "fig.suptitle", "print", "numpy.load", "numpy.array", "numpy.mean", "float", "numpy.array", "numpy.mean", "float", "numpy.std", "numpy.arange().tolist", "shuffled_list.append", "subplot.plot", "subplot.fill_between", "subplot.set_xticks", "subplot.set_xticklabels", "subplot.set_yticks", "subplot.set_yticklabels", "subplot.set_ylim", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "int", "numpy.arange", "range", "range", "numpy.argmax", "numpy.argmax", "numpy.arange", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "", "def", "plot_activation_distribution", "(", "datapath", ",", "title", ")", ":", "\n", "\n", "\n", "    ", "data", "=", "np", ".", "load", "(", "datapath", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "activation_data", "=", "data", "[", "'activation'", "]", "\n", "label_data", "=", "data", "[", "'label'", "]", "\n", "label_index", "=", "[", "]", "\n", "\n", "# # # calc average acc", "\n", "avg_acc", "=", "0", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "where", "(", "label_data", "==", "i", ")", "[", "0", "]", "\n", "select_item", "=", "activation_data", "[", "indices", "]", "# get all associated classed activation", "\n", "out", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "vec", ")", "for", "vec", "in", "select_item", "]", ")", "\n", "y", "=", "np", ".", "mean", "(", "select_item", ",", "axis", "=", "0", ")", "\n", "num_correct", "=", "np", ".", "where", "(", "out", "==", "np", ".", "argmax", "(", "y", ")", ")", "[", "0", "]", "# comparing how many samples match the maximum of mean", "\n", "accuracy", "=", "float", "(", "num_correct", ".", "shape", "[", "0", "]", "/", "out", ".", "shape", "[", "0", "]", ")", "\n", "avg_acc", "+=", "accuracy", "\n", "", "avg_acc", "/=", "10.", "\n", "ylim_min", "=", "np", ".", "min", "(", "activation_data", ")", "\n", "ylim_max", "=", "np", ".", "max", "(", "activation_data", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "5", ",", "figsize", "=", "(", "30", ",", "10", ")", ")", "\n", "ax", "=", "[", "x", "for", "a", "in", "ax", "for", "x", "in", "a", "]", "\n", "\n", "shuffled_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\n", "        ", "subplot", "=", "ax", "[", "i", "]", "\n", "\n", "indices", "=", "np", ".", "where", "(", "label_data", "==", "i", ")", "[", "0", "]", "\n", "select_item", "=", "activation_data", "[", "indices", "]", "# extract activation associated with label", "\n", "out", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "vec", ")", "for", "vec", "in", "select_item", "]", ")", "# find the maximum arg of activation dist", "\n", "\n", "y", "=", "np", ".", "mean", "(", "select_item", ",", "axis", "=", "0", ")", "\n", "\n", "num_correct", "=", "np", ".", "where", "(", "out", "==", "np", ".", "argmax", "(", "y", ")", ")", "[", "0", "]", "\n", "accuracy", "=", "float", "(", "num_correct", ".", "shape", "[", "0", "]", "/", "out", ".", "shape", "[", "0", "]", ")", "\n", "\n", "e", "=", "np", ".", "std", "(", "select_item", ",", "axis", "=", "0", ")", "\n", "idx", "=", "np", ".", "arange", "(", "10", ")", ".", "tolist", "(", ")", "\n", "shuffled_list", ".", "append", "(", "int", "(", "np", ".", "argmax", "(", "y", ")", ")", ")", "\n", "subplot", ".", "plot", "(", "y", ")", "\n", "subplot", ".", "fill_between", "(", "np", ".", "arange", "(", "10", ")", ",", "y", "-", "e", ",", "y", "+", "e", ",", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#CC4F1B'", ",", "facecolor", "=", "'#FF9848'", ")", "\n", "#subplot.set_title(\"img class/argmax: {}/{}; category acc {:.2f}\".format(i,int(np.argmax(y)), accuracy))", "\n", "subplot", ".", "set_xticks", "(", "idx", ")", "\n", "subplot", ".", "set_xticklabels", "(", "idx", ",", "fontsize", "=", "FONTSIZE_XTICKS", ")", "\n", "subplot", ".", "set_yticks", "(", "range", "(", "-", "1", ",", "4", ")", ")", "\n", "subplot", ".", "set_yticklabels", "(", "range", "(", "-", "1", ",", "4", ")", ",", "fontsize", "=", "FONTSIZE_YTICKS", ")", "\n", "subplot", ".", "set_ylim", "(", "-", "1", ",", "4", ")", "\n", "#subplot.set_xlabel('10 dimension output activation indices')", "\n", "#subplot.set_ylabel('activation value')", "\n", "\n", "# fig.suptitle(\"activations of unformatted training\", fontsize=FONTSIZE_TITLE)", "\n", "", "title", "+=", "\"  class argmax {}\"", ".", "format", "(", "shuffled_list", ")", "\n", "fig", ".", "suptitle", "(", "title", ",", "fontsize", "=", "FONTSIZE_TITLE", ")", "\n", "#fig.text(0.2, 0.05, \"10 dimension output activation indices; shuffled argmax list {}\".format(shuffled_list), fontsize=FONTSIZE_XLABEL)", "\n", "print", "(", "shuffled_list", ")", "\n", "#fig.text(0.1, 0.6, \"activation\", fontsize=FONTSIZE_YLABEL, rotation='vertical')", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_1d_activation_kde": [[226, 264], ["matplotlib.figure", "plt.figure.add_subplot", "numpy.linspace", "range", "numpy.arange", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "numpy.load", "gaussian_kde", "gaussian_kde.", "matplotlib.plot", "len", "list", "list", "numpy.arange", "numpy.where", "numpy.squeeze", "float", "numpy.mean"], "function", ["None"], ["", "def", "plot_1d_activation_kde", "(", "datapath", ")", ":", "\n", "\n", "    ", "data", "=", "np", ".", "load", "(", "datapath", ",", "allow_pickle", "=", "True", ")", "[", "(", ")", "]", "\n", "activation_data", "=", "data", "[", "'activation'", "]", "\n", "label_data", "=", "data", "[", "'label'", "]", "\n", "\n", "from", "scipy", ".", "stats", "import", "gaussian_kde", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "constrained_layout", "=", "True", ",", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "sample_idx", "=", "np", ".", "linspace", "(", "-", "1.3", ",", "1.3", ",", "150", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "where", "(", "label_data", "==", "i", ")", "[", "0", "]", "\n", "select_item", "=", "activation_data", "[", "indices", "]", "# get all associated classed activation", "\n", "\n", "kernel", "=", "gaussian_kde", "(", "np", ".", "squeeze", "(", "select_item", ")", ")", "\n", "\n", "sampling", "=", "kernel", "(", "sample_idx", ")", "\n", "\n", "plt", ".", "plot", "(", "sampling", ",", "linewidth", "=", "3", ",", "label", "=", "\"c:{} m:{:.2f}\"", ".", "format", "(", "i", ",", "float", "(", "np", ".", "mean", "(", "select_item", ")", ")", ")", ")", "\n", "\n", "\n", "", "xticks_idx", "=", "np", ".", "arange", "(", "len", "(", "sample_idx", ")", ")", "\n", "xticks_idx", "=", "list", "(", "xticks_idx", "[", ":", ":", "25", "]", ")", "+", "[", "xticks_idx", "[", "-", "1", "]", "]", "\n", "xticks_val", "=", "list", "(", "sample_idx", "[", ":", ":", "25", "]", ")", "+", "[", "sample_idx", "[", "-", "1", "]", "]", "\n", "xticks_val", "=", "[", "\"{:.1f}\"", ".", "format", "(", "x", ")", "for", "x", "in", "xticks_val", "]", "\n", "\n", "# plt.legend(fontsize=18) ", "\n", "#ax.set_title('class signals of dataset', fontsize=FONTSIZE_TITLE)", "\n", "ax", ".", "set_xticks", "(", "xticks_idx", ")", "\n", "#ax.set_ylim(0, 10)", "\n", "ax", ".", "set_xticklabels", "(", "xticks_val", ",", "fontsize", "=", "FONTSIZE_XTICKS", ")", "\n", "ax", ".", "set_yticklabels", "(", "np", ".", "arange", "(", "10", ")", ",", "fontsize", "=", "FONTSIZE_YTICKS", ")", "\n", "ax", ".", "set_xlabel", "(", "'tanh activation'", ",", "fontsize", "=", "FONTSIZE_XLABEL", ")", "\n", "ax", ".", "set_ylabel", "(", "'KDE density'", ",", "fontsize", "=", "FONTSIZE_YLABEL", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.adding_footnote": [[265, 267], ["fig.text"], "function", ["None"], ["", "def", "adding_footnote", "(", "fig", ",", "text", ")", ":", "\n", "    ", "fig", ".", "text", "(", "0.", ",", "0.", ",", "text", ",", "fontsize", "=", "FONTSIZE_FOOTNOTE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure": [[268, 272], ["matplotlib.savefig", "matplotlib.clf", "color.print_highlight"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "save_figure", "(", "filepath", ")", ":", "\n", "    ", "plt", ".", "savefig", "(", "filepath", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "print_highlight", "(", "\"Saved   [{}]\"", ".", "format", "(", "filepath", ")", ",", "ctype", "=", "'blue'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_current_timestamp": [[3, 5], ["strftime"], "function", ["None"], ["def", "get_current_timestamp", "(", ")", ":", "\n", "    ", "return", "strftime", "(", "\"%y%m%d_%H%M%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_channels": [[6, 17], ["ValueError"], "function", ["None"], ["", "def", "get_in_channels", "(", "data_code", ")", ":", "\n", "    ", "in_ch", "=", "-", "1", "\n", "if", "data_code", "==", "'mnist'", ":", "\n", "        ", "in_ch", "=", "1", "\n", "", "elif", "data_code", "==", "'cifar10'", ":", "\n", "        ", "in_ch", "=", "3", "\n", "", "elif", "data_code", "==", "'fmnist'", ":", "\n", "        ", "in_ch", "=", "1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid or not supported dataset [{}]\"", ".", "format", "(", "data_code", ")", ")", "\n", "", "return", "in_ch", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_dimensions": [[18, 29], ["ValueError"], "function", ["None"], ["", "def", "get_in_dimensions", "(", "data_code", ")", ":", "\n", "    ", "in_dim", "=", "-", "1", "\n", "if", "data_code", "==", "'mnist'", ":", "\n", "        ", "in_dim", "=", "784", "\n", "", "elif", "data_code", "==", "'cifar10'", ":", "\n", "        ", "in_dim", "=", "1024", "\n", "", "elif", "data_code", "==", "'fmnist'", ":", "\n", "        ", "in_dim", "=", "784", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid or not supported dataset [{}]\"", ".", "format", "(", "data_code", ")", ")", "\n", "", "return", "in_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch": [[30, 49], ["torch.nn.CrossEntropyLoss", "model.to.to", "enumerate", "next", "data.to.to", "target.to.to", "model.to.", "loss.append", "acc.append", "np.mean", "np.mean", "model.to.parameters", "torch.nn.CrossEntropyLoss.cpu().detach().numpy", "[].cpu().detach().numpy", "torch.nn.CrossEntropyLoss.cpu().detach", "[].cpu().detach", "torch.nn.CrossEntropyLoss.cpu", "[].cpu", "torch.nn.CrossEntropyLoss.", "misc.get_accuracy"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy"], ["", "def", "get_accuracy_epoch", "(", "model", ",", "dataloader", ")", ":", "\n", "    ", "\"\"\" Computes the precision@k for the specified values of k\n        https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    \"\"\"", "\n", "output_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "acc", "=", "[", "]", "\n", "loss", "=", "[", "]", "\n", "cross_entropy_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "'cuda'", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "output", ",", "hiddens", "=", "model", "(", "data", ")", "\n", "loss", ".", "append", "(", "cross_entropy_loss", "(", "output", ",", "target", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "acc", ".", "append", "(", "get_accuracy", "(", "output", ",", "target", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "acc", ")", ",", "np", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy": [[51, 65], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "get_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\" Computes the precision@k for the specified values of k\n        https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_hsic": [[66, 96], ["enumerate", "np.vstack", "np.vstack", "range", "model", "output.cpu().detach().numpy.cpu().detach().numpy", "target.cpu().detach().numpy().reshape.cpu().detach().numpy().reshape", "output_list.append", "target_list.append", "np.array", "np.mean", "reorder_list.append", "data.to", "np.where", "np.argmax", "np.argmax", "np.where", "float", "float", "output.cpu().detach().numpy.cpu().detach", "target.cpu().detach().numpy().reshape.cpu().detach().numpy", "np.argmax", "next", "np.argmax", "np.argmax", "model.parameters", "output.cpu().detach().numpy.cpu", "target.cpu().detach().numpy().reshape.cpu().detach", "target.cpu().detach().numpy().reshape.cpu"], "function", ["None"], ["", "def", "get_accuracy_hsic", "(", "model", ",", "dataloader", ")", ":", "\n", "    ", "\"\"\" Computes the precision@k for the specified values of k\n        https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    \"\"\"", "\n", "output_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "output", ",", "hiddens", "=", "model", "(", "data", ".", "to", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", ")", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "target_list", ".", "append", "(", "target", ")", "\n", "", "output_arr", "=", "np", ".", "vstack", "(", "output_list", ")", "\n", "target_arr", "=", "np", ".", "vstack", "(", "target_list", ")", "\n", "avg_acc", "=", "0", "\n", "reorder_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "where", "(", "target_arr", "==", "i", ")", "[", "0", "]", "\n", "select_item", "=", "output_arr", "[", "indices", "]", "\n", "out", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "vec", ")", "for", "vec", "in", "select_item", "]", ")", "\n", "y", "=", "np", ".", "mean", "(", "select_item", ",", "axis", "=", "0", ")", "\n", "while", "np", ".", "argmax", "(", "y", ")", "in", "reorder_list", ":", "\n", "            ", "y", "[", "np", ".", "argmax", "(", "y", ")", "]", "=", "0", "\n", "", "reorder_list", ".", "append", "(", "np", ".", "argmax", "(", "y", ")", ")", "\n", "num_correct", "=", "np", ".", "where", "(", "out", "==", "np", ".", "argmax", "(", "y", ")", ")", "[", "0", "]", "\n", "accuracy", "=", "float", "(", "num_correct", ".", "shape", "[", "0", "]", ")", "/", "float", "(", "out", ".", "shape", "[", "0", "]", ")", "\n", "avg_acc", "+=", "accuracy", "\n", "", "avg_acc", "/=", "10.", "\n", "\n", "return", "avg_acc", "*", "100.", ",", "reorder_list", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_layer_parameters": [[97, 107], ["enumerate", "model.named_parameters", "param_out.append", "param_out_name.append"], "function", ["None"], ["", "def", "get_layer_parameters", "(", "model", ",", "idx_range", ")", ":", "\n", "\n", "    ", "param_out", "=", "[", "]", "\n", "param_out_name", "=", "[", "]", "\n", "for", "it", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "if", "it", "in", "idx_range", ":", "\n", "            ", "param_out", ".", "append", "(", "param", ")", "\n", "param_out_name", ".", "append", "(", "name", ")", "\n", "\n", "", "", "return", "param_out", ",", "param_out_name", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.to_categorical": [[109, 112], ["torch.squeeze", "torch.eye"], "function", ["None"], ["", "def", "to_categorical", "(", "y", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\" 1-hot encodes a tensor \"\"\"", "\n", "return", "torch", ".", "squeeze", "(", "torch", ".", "eye", "(", "num_classes", ")", "[", "y", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.say_hello": [[4, 14], ["numpy.random.randint", "welcome.hello_01", "welcome.hello_02", "welcome.hello_03"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.hello_01", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.hello_02", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.hello_03"], ["def", "say_hello", "(", ")", ":", "\n", "\n", "    ", "i", "=", "np", ".", "random", ".", "randint", "(", "3", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "        ", "hello_01", "(", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "        ", "hello_02", "(", ")", "\n", "", "elif", "i", "==", "2", ":", "\n", "        ", "hello_03", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.hello_01": [[15, 23], ["print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "", "def", "hello_01", "(", ")", ":", "\n", "    ", "print", "(", "\"\"", ")", "\n", "print", "(", "\" _   _ ____ ___ ____   ____        _   _   _                      _    \"", ")", "\n", "print", "(", "\"| | | / ___|_ _/ ___| | __ )  ___ | |_| |_| | ___ _ __   ___  ___| | __\"", ")", "\n", "print", "(", "\"| |_| \\___ \\| | |     |  _ \\ / _ \\| __| __| |/ _ \\ '_ \\ / _ \\/ __| |/ /\"", ")", "\n", "print", "(", "\"|  _  |___) | | |___  | |_) | (_) | |_| |_| |  __/ | | |  __/ (__|   < \"", ")", "\n", "print", "(", "\"|_| |_|____/___\\____| |____/ \\___/ \\__|\\__|_|\\___|_| |_|\\___|\\___|_|\\_\\\\\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.hello_02": [[25, 32], ["print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "hello_02", "(", ")", ":", "\n", "    ", "print", "(", "\"\"", ")", "\n", "print", "(", "\"   __ _______________  ___       __  __  __                 __  \"", ")", "\n", "print", "(", "\"  / // / __/  _/ ___/ / _ )___  / /_/ /_/ /__ ___  ___ ____/ /__\"", ")", "\n", "print", "(", "\" / _  /\\ \\_/ // /__  / _  / _ \\/ __/ __/ / -_) _ \\/ -_) __/  '_/\"", ")", "\n", "print", "(", "\"/_//_/___/___/\\___/ /____/\\___/\\__/\\__/_/\\__/_//_/\\__/\\__/_/\\_\\ \"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.welcome.hello_03": [[34, 42], ["print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "hello_03", "(", ")", ":", "\n", "    ", "print", "(", "\"\"", ")", "\n", "print", "(", "\".  .  ,-.  ,  ,-.   ,-.      .   .   .                 ,  \"", ")", "\n", "print", "(", "\"|  | (   ` | /      |  )     |   |   |                 |  \"", ")", "\n", "print", "(", "\"|--|  `-.  | |      |-<  ,-. |-  |-  | ,-. ;-. ,-. ,-. | ,\"", ")", "\n", "print", "(", "\"|  | .   ) | \\      |  ) | | |   |   | |-' | | |-' |   |< \"", ")", "\n", "print", "(", "\"'  '  `-'  '  `-'   `-'  `-' `-' `-' ' `-' ' ' `-' `-' ' `\"", ")", "\n", "print", "(", "\"\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddim.plot_varieddim_result": [[3, 81], ["plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_epoch_log", "plot.save_figure", "get_exp_path", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "print_highlight", "quit", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_plot_filename"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename"], ["def", "plot_varieddim_result", "(", "config_dict", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "out_standard_batch_001", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_005", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_010", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_epoch_001", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_005", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_010", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "input_batch_list", "=", "[", "out_standard_batch_001", ",", "out_standard_batch_005", ",", "out_standard_batch_010", "]", "\n", "input_epoch_list", "=", "[", "out_standard_epoch_001", ",", "out_standard_epoch_005", ",", "out_standard_epoch_010", "]", "\n", "label_list", "=", "[", "'dim-8'", ",", "'dim-32'", ",", "'dim-64'", "]", "\n", "\n", "# metadata = {", "\n", "#     #'title':'HSIC(X, Z_L) of Varied-dim',", "\n", "#     'title':'',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'HSIC(X, Z_L)',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_batch_list, 'batch_hsic_hx', metadata)", "\n", "# plot.save_figure(get_exp_path(\"varied-dim-hsic_xz-{}.{}\".format(", "\n", "#     config_dict['data_code'], config_dict['ext'])))", "\n", "\n", "# metadata = {", "\n", "#     #'title':'HSIC(Y, Z_L) of Varied-dim',", "\n", "#     'title': '',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'HSIC(Y, Z_L)',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_batch_list, 'batch_hsic_hy', metadata)", "\n", "# plot.save_figure(get_exp_path(\"varied-dim-hsic_yz-{}.{}\".format(", "\n", "#     config_dict['data_code'], config_dict['ext'])))", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'format-train of Varied-dim',", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'train acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_batch_list", ",", "'batch_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig6a-varied-dim-acc-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "# metadata = {", "\n", "#     #'title':'format-train of Varied-dim',", "\n", "#     'title': '',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'training loss',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_batch_list, 'batch_loss', metadata)", "\n", "# plot.save_figure(get_exp_path(\"varied-dim-loss-{}.{}\".format(", "\n", "#     config_dict['data_code'], config_dict['ext'])))", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'{} test performance of Varied-dim'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'test acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "input_epoch_list", ",", "'test_acc'", ",", "metadata", ")", "\n", "plot", ".", "save_figure", "(", "get_exp_path", "(", "\"fig6a-{}-epoch-test-acc.{}\"", ".", "format", "(", "\n", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddim.task_varieddim_func": [[83, 90], ["task_assigner", "task_assigner.", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_varieddim_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "model_filename", "=", "config_dict", "[", "'model_file'", "]", "\n", "config_dict", "[", "'model_file'", "]", "=", "\"{}-{:04d}.pt\"", ".", "format", "(", "\n", "os", ".", "path", ".", "splitext", "(", "model_filename", ")", "[", "0", "]", ",", "config_dict", "[", "'exp_index'", "]", ")", "\n", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_needle.plot_needle_result": [[3, 61], ["load_logs", "config_dict.get", "plot.adding_footnote", "save_experiment_fig", "print_highlight", "quit", "get_log_filepath", "get_act_raw_path_", "plot.plot_1d_activation_kde", "plot.plot_1d_activation_kde", "get_experiment_fig_filename", "os.path.basename", "get_act_path", "get_experiment_fig_filename"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.adding_footnote", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_raw_path_", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_1d_activation_kde", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_1d_activation_kde", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.get_experiment_fig_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.get_experiment_fig_filename"], ["def", "plot_needle_result", "(", "config_dict", ")", ":", "\n", "    ", "try", ":", "\n", "\n", "        ", "out", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_HSICTRAIN", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "[", "'batch_log_list'", "]", "\n", "\n", "if", "config_dict", "[", "'plot_task'", "]", "==", "1", ":", "\n", "            ", "if", "config_dict", ".", "get", "(", "'filepath'", ")", ":", "\n", "                ", "config_dict", "[", "'exp_idx'", "]", "=", "''", "\n", "filepath", "=", "get_act_raw_path_", "(", "os", ".", "path", ".", "basename", "(", "config_dict", "[", "'filepath'", "]", ")", ",", "config_dict", "[", "'exp_idx'", "]", ")", "\n", "fig", "=", "plot", ".", "plot_1d_activation_kde", "(", "filepath", ")", "\n", "", "else", ":", "\n", "                ", "fig", "=", "plot", ".", "plot_1d_activation_kde", "(", "get_act_path", "(", "config_dict", "[", "'task'", "]", ",", "config_dict", "[", "'training_type'", "]", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "\n", "\n", "#config_dict['footnote'] += \"; nHSIC(X,Z_L)={:.2f} nHSIC(Y,Z_L)={:.2f}\".format(", "\n", "#    np.mean(out[int(config_dict['exp_idx'])]['batch_hsic_hx']),", "\n", "#    np.mean(out[int(config_dict['exp_idx'])]['batch_hsic_hy']),                ", "\n", "#)", "\n", "", "plot", ".", "adding_footnote", "(", "fig", ",", "config_dict", "[", "'footnote'", "]", ")", "\n", "\n", "if", "config_dict", "[", "'training_type'", "]", "==", "TTYPE_HSICTRAIN", ":", "\n", "                ", "filepath", "=", "get_experiment_fig_filename", "(", "config_dict", ",", "'needle-1'", ",", "config_dict", "[", "'exp_idx'", "]", ")", "\n", "", "elif", "config_dict", "[", "'training_type'", "]", "==", "TTYPE_STANDARD", ":", "\n", "                ", "filepath", "=", "get_experiment_fig_filename", "(", "config_dict", ",", "'needle-2'", ",", "config_dict", "[", "'exp_idx'", "]", ")", "\n", "", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "# input_list = [out]", "\n", "# label_list = ['val']", "\n", "# metadata = {", "\n", "#     #'title':'nHSIC(X, Z_L) of Varied-activation',", "\n", "#     'title': '',", "\n", "#     'xlabel': '',", "\n", "#     'ylabel': 'nHSIC(X, Z_L)',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_list, 'batch_hsic_hx', metadata)", "\n", "# filepath = get_exp_path(\"test_hsicxz.{}\".format(config_dict['ext']))", "\n", "# save_experiment_fig(filepath)", "\n", "\n", "\n", "# out = load_logs(get_log_filepath(", "\n", "#     config_dict['task'], TTYPE_HSICTRAIN, config_dict['data_code']))['batch_log_list']", "\n", "# input_list = [out]", "\n", "# label_list = ['val']", "\n", "# metadata = {", "\n", "#     #'title':'nHSIC(X, Z_L) of Varied-activation',", "\n", "#     'title': '',", "\n", "#     'xlabel': '',", "\n", "#     'ylabel': 'nHSIC(Y, Z_L)',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_list, 'batch_hsic_hy', metadata)", "\n", "# filepath = get_exp_path(\"test_hsicyz.{}\".format(config_dict['ext']))", "\n", "# save_experiment_fig(filepath)", "\n", "\n", "", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_needle.task_needle_func": [[62, 66], ["task_assigner", "task_assigner."], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "", "def", "task_needle_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_general.plot_general_result": [[4, 51], ["plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_epoch_log", "get_exp_path", "save_experiment_fig", "plot.plot_epoch_log", "get_exp_path", "save_experiment_fig", "load_logs", "load_logs", "get_log_filepath", "get_log_filepath", "print_highlight", "quit", "get_plot_filename", "get_plot_filename", "get_plot_filename"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename"], ["def", "plot_general_result", "(", "config_dict", ")", ":", "\n", "\n", "\n", "    ", "try", ":", "\n", "\n", "        ", "log_format", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "\n", "log_backprop", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "\n", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nNo plot produced unless all backprop/format training has been done. (by altering \\'training_type\\' in config)\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "#'title':'{} batch training performance'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "''", ",", "\n", "'ylabel'", ":", "''", ",", "\n", "'label'", ":", "[", "'backprop-train'", ",", "'format-train'", "]", "\n", "}", "\n", "\n", "plot", ".", "plot_batches_log", "(", "[", "log_backprop", "[", "'batch_log_list'", "]", ",", "log_format", "[", "'batch_log_list'", "]", "]", ",", "'batch_acc'", ",", "metadata", ")", "\n", "outpath", "=", "get_exp_path", "(", "\"{}-batch.{}\"", ".", "format", "(", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "outpath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'{} training performance'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "''", ",", "\n", "'ylabel'", ":", "''", ",", "\n", "'label'", ":", "[", "'backprop-train'", ",", "'format-train'", "]", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "[", "log_backprop", "[", "'epoch_log_dict'", "]", ",", "log_format", "[", "'epoch_log_dict'", "]", "]", ",", "'train_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"{}-epoch-train-acc.{}\"", ".", "format", "(", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'{} test performance'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "''", ",", "\n", "'ylabel'", ":", "''", ",", "\n", "'label'", ":", "[", "'backprop-train'", ",", "'format-train'", "]", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "[", "log_backprop", "[", "'epoch_log_dict'", "]", ",", "log_format", "[", "'epoch_log_dict'", "]", "]", ",", "'test_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"{}-epoch-test-acc.{}\"", ".", "format", "(", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_general.task_general_func": [[52, 55], ["task_assigner", "task_assigner."], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_general_func", "(", "config_dict", ")", ":", "\n", "    ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_hsicsolve.plot_hsicsolve_result": [[3, 41], ["plot.plot_epoch_log", "get_exp_path", "save_experiment_fig", "plot.plot_activation_distribution", "get_exp_path", "save_experiment_fig", "get_act_path", "load_logs", "load_logs", "print_highlight", "quit", "get_plot_filename", "get_log_filepath", "get_log_filepath"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_activation_distribution", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath"], ["def", "plot_hsicsolve_result", "(", "config_dict", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "out_epoch", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_hsic_epoch", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_HSICTRAIN", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "#'title':'{} test performance'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'test acc'", ",", "\n", "'label'", ":", "[", "'backprop'", ",", "'unformat'", "]", "\n", "}", "\n", "filename", "=", "\"\"", "\n", "plot", ".", "plot_epoch_log", "(", "[", "out_epoch", ",", "out_hsic_epoch", "]", ",", "'test_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig4-{}-test-acc.{}\"", ".", "format", "(", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'{} test performance'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "''", ",", "\n", "'ylabel'", ":", "''", ",", "\n", "'label'", ":", "[", "'backprop'", ",", "'unformat'", "]", "\n", "}", "\n", "\n", "# plot.plot_epoch_log([out_epoch, out_hsic_epoch], 'train_acc', metadata)", "\n", "# filepath = get_exp_path(\"fig5-{}-train-acc.{}\".format(get_plot_filename(config_dict), config_dict['ext']))", "\n", "# save_experiment_fig(filepath)", "\n", "\n", "plot", ".", "plot_activation_distribution", "(", "get_act_path", "(", "config_dict", "[", "'task'", "]", ",", "config_dict", "[", "'training_type'", "]", ",", "config_dict", "[", "'data_code'", "]", ")", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig3-hsic-solve-actdist-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_hsicsolve.task_hsicsolve_func": [[42, 49], ["task_assigner", "task_assigner."], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_hsicsolve_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "        ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "if", "config_dict", "[", "'training_type'", "]", "==", "TTYPE_HSICTRAIN", ":", "\n", "            ", "config_dict", "[", "'last_hidden_width'", "]", "=", "10", "# since we are using hsic to solve classification            ", "\n", "", "func", "(", "config_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_sigmacomb.plot_sigmacomb_result": [[3, 51], ["plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_epoch_log", "get_exp_path", "save_experiment_fig", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "print_highlight", "quit", "get_plot_filename", "get_plot_filename", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath"], ["def", "plot_sigmacomb_result", "(", "config_dict", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "out_standard_batch_1", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_2", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_3", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_4", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "4", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_epoch_1", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_2", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_3", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_4", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "4", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "input_list", "=", "[", "out_standard_batch_1", ",", "out_standard_batch_2", ",", "out_standard_batch_3", ",", "out_standard_batch_4", "]", "\n", "label_list", "=", "[", "'$\\sigma$=1'", ",", "'$\\sigma$=5'", ",", "'$\\sigma$=10'", ",", "'$\\sigma$-combined'", "]", "\n", "metadata", "=", "{", "\n", "#'title':'{} training perf of sigma-combined net'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'train acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig6b-{}-sigmacomb-train-acc.{}\"", ".", "format", "(", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "input_list", "=", "[", "out_standard_epoch_1", ",", "out_standard_epoch_2", ",", "out_standard_epoch_3", ",", "out_standard_epoch_4", "]", "\n", "label_list", "=", "[", "'$\\sigma$=1'", ",", "'$\\sigma$=5'", ",", "'$\\sigma$=10'", ",", "'$\\sigma$-combined'", "]", "\n", "metadata", "=", "{", "\n", "#'title':'{} test perf of sigma-combined net'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'test acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "input_list", ",", "'test_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig6b-{}-sigmacomb-test-acc.{}\"", ".", "format", "(", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_sigmacomb.task_sigmacomb_func": [[52, 66], ["isinstance", "training_format_combined", "task_assigner", "task_assigner.", "len", "os.path.splitext", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_format_combined", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_sigmacomb_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "model_filename", "=", "config_dict", "[", "'model_file'", "]", "\n", "\n", "if", "isinstance", "(", "config_dict", "[", "'exp_index'", "]", ",", "list", ")", ":", "\n", "        ", "model_list", "=", "[", "\"{}-{:04d}.pt\"", ".", "format", "(", "os", ".", "path", ".", "splitext", "(", "model_filename", ")", "[", "0", "]", ",", "i", ")", "for", "i", "in", "config_dict", "[", "'exp_index'", "]", "]", "\n", "config_dict", "[", "'model_file'", "]", "=", "model_list", "\n", "config_dict", "[", "'exp_index'", "]", "=", "len", "(", "config_dict", "[", "'exp_index'", "]", ")", "+", "1", "\n", "training_format_combined", "(", "config_dict", ")", "\n", "", "else", ":", "\n", "        ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "config_dict", "[", "'model_file'", "]", "=", "\"{}-{:04d}.pt\"", ".", "format", "(", "\n", "os", ".", "path", ".", "splitext", "(", "model_filename", ")", "[", "0", "]", ",", "config_dict", "[", "'exp_index'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedact.plot_variedact_result": [[3, 54], ["plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "load_logs", "load_logs", "load_logs", "load_logs", "print_highlight", "quit", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath"], ["def", "plot_variedact_result", "(", "config_dict", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "out_standard_batch_relu", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_tanh", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_elu", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_sigmoid", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "4", ")", ")", "[", "'batch_log_list'", "]", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "\n", "", "input_list", "=", "[", "out_standard_batch_relu", ",", "out_standard_batch_tanh", ",", "out_standard_batch_elu", ",", "out_standard_batch_sigmoid", "]", "\n", "label_list", "=", "[", "'relu'", ",", "'tanh'", ",", "'elu'", ",", "'sigmoid'", "]", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'nHSIC(X, Z_L) of Varied-activation',", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'nHSIC($\\mathbf{X}$, $\\mathbf{Z}_L$)'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_hsic_hx'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig2a-varied-activation-hsic_xz-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'nHSIC(Y, Z_L) of Varied-activation',", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'nHSIC($\\mathbf{Y}$, $\\mathbf{Z}_L$)'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_hsic_hy'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig2b-varied-activation-hsic_yz-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'performance of Varied-activation',", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'train acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig2c-varied-activation-acc-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedact.task_variedact_func": [[56, 60], ["task_assigner", "task_assigner."], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_variedact_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddepth.plot_varieddepth_result": [[4, 49], ["plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "load_logs", "load_logs", "load_logs", "load_logs", "print_highlight", "quit", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath"], ["def", "plot_varieddepth_result", "(", "config_dict", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "out_standard_batch_05", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_10", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_15", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_20", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", ",", "4", ")", ")", "[", "'batch_log_list'", "]", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "input_list", "=", "[", "out_standard_batch_05", ",", "out_standard_batch_10", ",", "out_standard_batch_15", ",", "out_standard_batch_20", "]", "\n", "label_list", "=", "[", "'depth-05'", ",", "'depth-10'", ",", "'depth-15'", ",", "'depth-20'", "]", "\n", "\n", "metadata", "=", "{", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'HSIC($\\mathbf{X}$, $\\mathbf{Z}_L$)'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_hsic_hx'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig2d-varied-depth-hsic_xz-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "metadata", "=", "{", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'HSIC($\\mathbf{Y}$, $\\mathbf{Z}_L$)'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_hsic_hy'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig2e-varied-depth-hsic_yz-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'train acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_list", ",", "'batch_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig2f-varied-depth-acc-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddepth.task_varieddepth_func": [[51, 55], ["task_assigner", "task_assigner."], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_varieddepth_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner": [[4, 13], ["None"], "function", ["None"], ["def", "task_assigner", "(", "ttype", ")", ":", "\n", "    ", "func", "=", "None", "\n", "if", "ttype", "==", "TTYPE_HSICTRAIN", ":", "\n", "        ", "func", "=", "training_hsic", "\n", "", "elif", "ttype", "==", "TTYPE_STANDARD", ":", "\n", "        ", "func", "=", "training_standard", "\n", "", "elif", "ttype", "==", "TTYPE_FORMAT", ":", "\n", "        ", "func", "=", "training_format", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.get_experiment_fig_filename": [[14, 24], ["get_exp_path", "get_exp_path"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path"], ["", "def", "get_experiment_fig_filename", "(", "config_dict", ",", "etype", ",", "idx", "=", "''", ")", ":", "\n", "    ", "filepath", "=", "''", "\n", "if", "idx", ":", "\n", "        ", "idx", "=", "\"-{:04d}\"", ".", "format", "(", "idx", ")", "\n", "\n", "", "if", "etype", "==", "'needle-1'", ":", "\n", "        ", "filepath", "=", "get_exp_path", "(", "\"fig8b-needle-1d-dist-{}{}.{}\"", ".", "format", "(", "config_dict", "[", "'training_type'", "]", ",", "idx", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "", "elif", "etype", "==", "'needle-2'", ":", "\n", "        ", "filepath", "=", "get_exp_path", "(", "\"fig8a-needle-1d-dist-{}{}.{}\"", ".", "format", "(", "config_dict", "[", "'training_type'", "]", ",", "idx", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig": [[25, 36], ["os.path.basename", "os.path.splitext", "os.path.dirname", "get_exp_raw_path", "os.path.exists", "plot.save_figure", "os.symlink", "print_highlight", "os.remove"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_raw_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "save_experiment_fig", "(", "filepath", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "basename", "(", "filepath", ")", "\n", "filename_noext", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "timestamp_filename", "=", "\"{}-{}{}\"", ".", "format", "(", "TIMESTAMP_CODE", ",", "filename_noext", ",", "ext", ")", "\n", "timestamp_filepath", "=", "get_exp_raw_path", "(", "timestamp_filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "os", ".", "remove", "(", "filepath", ")", "\n", "", "plot", ".", "save_figure", "(", "timestamp_filepath", ")", "\n", "os", ".", "symlink", "(", "timestamp_filepath", ",", "filepath", ")", "\n", "print_highlight", "(", "\"Symlink [{}]\"", ".", "format", "(", "filepath", ")", ",", "'blue'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedep.plot_variedep_result": [[3, 91], ["plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_batches_log", "get_exp_path", "save_experiment_fig", "plot.plot_epoch_log", "plot.save_figure", "plot.plot_epoch_log", "plot.save_figure", "get_exp_path", "get_exp_path", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "print_highlight", "quit", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_plot_filename", "get_plot_filename"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_batches_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename"], ["def", "plot_variedep_result", "(", "config_dict", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "out_standard_batch_001", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_005", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_batch_010", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'batch_log_list'", "]", "\n", "out_standard_epoch_001", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "1", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_005", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "2", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "out_standard_epoch_010", "=", "load_logs", "(", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "3", ")", ")", "[", "'epoch_log_dict'", "]", "\n", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nPlease do training by setting do_training key to True in config. Program quits.\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "input_batch_list", "=", "[", "out_standard_batch_001", ",", "out_standard_batch_005", ",", "out_standard_batch_010", "]", "\n", "input_epoch_list", "=", "[", "out_standard_epoch_001", ",", "out_standard_epoch_005", ",", "out_standard_epoch_010", "]", "\n", "label_list", "=", "[", "'HTep=1'", ",", "'HTep=5'", ",", "'HTep=10'", "]", "\n", "\n", "# metadata = {", "\n", "#     #'title':'HSIC(X, Z_L) of Varied-epoch',", "\n", "#     'title': '',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'HSIC(X, Z_L)',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_batch_list, 'batch_hsic_hx', metadata)", "\n", "# plot.save_figure(get_exp_path(\"varied-epoch-hsic_xz-{}.{}\".format(", "\n", "#     config_dict['data_code'], config_dict['ext'])))", "\n", "\n", "# metadata = {", "\n", "#     #'title':'HSIC(Y, Z_L) of Varied-epoch',", "\n", "#     'title': '',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'HSIC(Y, Z_L)',", "\n", "#     'label': label_list", "\n", "# }", "\n", "# plot.plot_batches_log(input_batch_list, 'batch_hsic_hy', metadata)", "\n", "# plot.save_figure(get_exp_path(\"varied-epoch-hsic_yz-{}.{}\".format(", "\n", "#     config_dict['data_code'], config_dict['ext'])))", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'format-train of Varied-epoch',", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'train acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_batch_list", ",", "'batch_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig5a-varied-epoch-acc-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'format-train of Varied-epoch',", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "''", ",", "\n", "'ylabel'", ":", "''", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_batches_log", "(", "input_batch_list", ",", "'batch_loss'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"fig5b-varied-epoch-loss-{}.{}\"", ".", "format", "(", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'ext'", "]", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'{} test performance of Varied-epoch'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epochs'", ",", "\n", "'ylabel'", ":", "'test acc'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "input_epoch_list", ",", "'test_acc'", ",", "metadata", ")", "\n", "plot", ".", "save_figure", "(", "get_exp_path", "(", "\"fig5a-{}-epoch-test-acc.{}\"", ".", "format", "(", "\n", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", ")", "\n", "\n", "metadata", "=", "{", "\n", "#'title':'{} test performance of Varied-epoc'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epochs'", ",", "\n", "'ylabel'", ":", "'test loss'", ",", "\n", "'label'", ":", "label_list", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "input_epoch_list", ",", "'test_loss'", ",", "metadata", ")", "\n", "plot", ".", "save_figure", "(", "get_exp_path", "(", "\"fig5b-{}-epoch-test-loss.{}\"", ".", "format", "(", "\n", "get_plot_filename", "(", "config_dict", ")", ",", "config_dict", "[", "'ext'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedep.task_variedep_func": [[93, 100], ["task_assigner", "task_assigner.", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_variedep_func", "(", "config_dict", ")", ":", "\n", "\n", "    ", "model_filename", "=", "config_dict", "[", "'model_file'", "]", "\n", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "config_dict", "[", "'model_file'", "]", "=", "\"{}-{:04d}.pt\"", ".", "format", "(", "\n", "os", ".", "path", ".", "splitext", "(", "model_filename", ")", "[", "0", "]", ",", "config_dict", "[", "'exp_index'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.plot_each_resconv_result": [[4, 39], ["plot.plot_epoch_log", "get_exp_path", "save_experiment_fig", "get_plot_filename"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_epoch_log", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_exp_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.save_experiment_fig", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_plot_filename"], ["def", "plot_each_resconv_result", "(", "log_format", ",", "log_backprop", ",", "ext", ",", "fig_prefix", ",", "config_dict", ")", ":", "\n", "\n", "# metadata = {", "\n", "#     #'title':'{} batch training performance'.format(config_dict['data_code']),", "\n", "#     'title': '',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'training batch accurarcy',", "\n", "#     'label': ['stadnard-train', 'format-train']", "\n", "# }", "\n", "\n", "# plot.plot_batches_log([log_backprop['batch_log_list'], log_format['batch_log_list']], 'batch_acc', metadata)", "\n", "# outpath = get_exp_path(\"{}-batch.{}\".format(get_plot_filename(config_dict), ext))", "\n", "# save_experiment_fig(outpath)", "\n", "\n", "# metadata = {", "\n", "#     #'title':'{} training performance'.format(config_dict['data_code']),", "\n", "#     'title': '',", "\n", "#     'xlabel': 'epochs',", "\n", "#     'ylabel': 'training accurarcy',", "\n", "#     'label': ['backprop-train', 'format-train']", "\n", "# }", "\n", "# plot.plot_epoch_log([log_backprop['epoch_log_dict'], log_format['epoch_log_dict']], 'train_acc', metadata)", "\n", "# filepath = get_exp_path(\"{}-epoch-train-acc.{}\".format(get_plot_filename(config_dict), ext))", "\n", "# save_experiment_fig(filepath)", "\n", "\n", "    ", "metadata", "=", "{", "\n", "#'title':'{} test performance'.format(config_dict['data_code']),", "\n", "'title'", ":", "''", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'test acc'", ",", "\n", "'label'", ":", "[", "'backprop'", ",", "'format'", "]", "\n", "}", "\n", "plot", ".", "plot_epoch_log", "(", "[", "log_backprop", "[", "'epoch_log_dict'", "]", ",", "log_format", "[", "'epoch_log_dict'", "]", "]", ",", "'test_acc'", ",", "metadata", ")", "\n", "filepath", "=", "get_exp_path", "(", "\"{}-{}-epoch-test-acc.{}\"", ".", "format", "(", "fig_prefix", ",", "get_plot_filename", "(", "config_dict", ")", ",", "ext", ")", ")", "\n", "save_experiment_fig", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.plot_resconv_result": [[40, 60], ["task_resconv.plot_each_resconv_result", "task_resconv.plot_each_resconv_result", "task_resconv.plot_each_resconv_result", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "load_logs", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "get_log_filepath", "print_highlight", "quit"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.plot_each_resconv_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.plot_each_resconv_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.plot_each_resconv_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight"], ["", "def", "plot_resconv_result", "(", "config_dict", ")", ":", "\n", "\n", "\n", "    ", "try", ":", "\n", "        ", "log_format_mnist", "=", "load_logs", "(", "get_log_filepath", "(", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "'mnist'", ")", ")", "\n", "log_backprop_mnist", "=", "load_logs", "(", "get_log_filepath", "(", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "'mnist'", ")", ")", "\n", "log_format_cifar10", "=", "load_logs", "(", "get_log_filepath", "(", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "'cifar10'", ")", ")", "\n", "log_backprop_cifar10", "=", "load_logs", "(", "get_log_filepath", "(", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "'cifar10'", ")", ")", "\n", "log_format_fmnist", "=", "load_logs", "(", "get_log_filepath", "(", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "'fmnist'", ")", ")", "\n", "log_backprop_fmnist", "=", "load_logs", "(", "get_log_filepath", "(", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "'fmnist'", ")", ")", "\n", "\n", "", "except", "IOError", "as", "e", ":", "\n", "        ", "print_highlight", "(", "\"{}.\\nNo plot produced unless all backprop/format training has been done. (by altering \\'training_type\\' in config)\"", ".", "format", "(", "e", ")", ",", "'red'", ")", "\n", "quit", "(", ")", "\n", "", "config_dict", "[", "'data_code'", "]", "=", "'mnist'", "# sorry, i'm a bad programmer", "\n", "plot_each_resconv_result", "(", "log_format_mnist", ",", "log_backprop_mnist", ",", "config_dict", "[", "'ext'", "]", ",", "'fig7a'", ",", "config_dict", ")", "\n", "config_dict", "[", "'data_code'", "]", "=", "'cifar10'", "\n", "plot_each_resconv_result", "(", "log_format_cifar10", ",", "log_backprop_cifar10", ",", "config_dict", "[", "'ext'", "]", ",", "'fig7b'", ",", "config_dict", ")", "\n", "config_dict", "[", "'data_code'", "]", "=", "'fmnist'", "\n", "plot_each_resconv_result", "(", "log_format_fmnist", ",", "log_backprop_fmnist", ",", "config_dict", "[", "'ext'", "]", ",", "'fig7c'", ",", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.task_resconv_func": [[61, 64], ["task_assigner", "task_assigner."], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.utils.task_assigner"], ["", "def", "task_resconv_func", "(", "config_dict", ")", ":", "\n", "    ", "func", "=", "task_assigner", "(", "config_dict", "[", "'training_type'", "]", ")", "\n", "func", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation": [[5, 18], ["hsic.distmat", "D.detach().cpu().numpy.detach().cpu().numpy", "numpy.tril_indices", "numpy.median", "torch.cat", "numpy.mean", "D.detach().cpu().numpy.detach().cpu", "D.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat"], ["def", "sigma_estimation", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\" sigma from median distance\n    \"\"\"", "\n", "D", "=", "distmat", "(", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ")", ")", "\n", "D", "=", "D", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Itri", "=", "np", ".", "tril_indices", "(", "D", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "Tri", "=", "D", "[", "Itri", "]", "\n", "med", "=", "np", ".", "median", "(", "Tri", ")", "\n", "if", "med", "<=", "0", ":", "\n", "        ", "med", "=", "np", ".", "mean", "(", "Tri", ")", "\n", "", "if", "med", "<", "1E-2", ":", "\n", "        ", "med", "=", "1E-2", "\n", "", "return", "med", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat": [[19, 28], ["torch.sum", "r.view.view", "torch.mm", "torch.abs", "torch.transpose", "torch.transpose().expand_as", "r.view.expand_as", "torch.transpose"], "function", ["None"], ["", "def", "distmat", "(", "X", ")", ":", "\n", "    ", "\"\"\" distance matrix\n    \"\"\"", "\n", "r", "=", "torch", ".", "sum", "(", "X", "*", "X", ",", "1", ")", "\n", "r", "=", "r", ".", "view", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "a", "=", "torch", ".", "mm", "(", "X", ",", "torch", ".", "transpose", "(", "X", ",", "0", ",", "1", ")", ")", "\n", "D", "=", "r", ".", "expand_as", "(", "a", ")", "-", "2", "*", "a", "+", "torch", ".", "transpose", "(", "r", ",", "0", ",", "1", ")", ".", "expand_as", "(", "a", ")", "\n", "D", "=", "torch", ".", "abs", "(", "D", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.kernelmat": [[29, 52], ["int", "hsic.distmat", "torch.mm", "int", "torch.eye", "torch.exp().type", "X.size", "torch.ones", "hsic.sigma_estimation", "torch.exp().type", "X.size", "X.size", "torch.exp", "RuntimeError", "torch.exp", "torch.max", "torch.min"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation"], ["", "def", "kernelmat", "(", "X", ",", "sigma", ")", ":", "\n", "    ", "\"\"\" kernel matrix baker\n    \"\"\"", "\n", "m", "=", "int", "(", "X", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "dim", "=", "int", "(", "X", ".", "size", "(", ")", "[", "1", "]", ")", "*", "1.0", "\n", "H", "=", "torch", ".", "eye", "(", "m", ")", "-", "(", "1.", "/", "m", ")", "*", "torch", ".", "ones", "(", "[", "m", ",", "m", "]", ")", "\n", "Dxx", "=", "distmat", "(", "X", ")", "\n", "\n", "if", "sigma", ":", "\n", "        ", "variance", "=", "2.", "*", "sigma", "*", "sigma", "*", "X", ".", "size", "(", ")", "[", "1", "]", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "variance", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "# kernel matrices        ", "\n", "# print(sigma, torch.mean(Kx), torch.max(Kx), torch.min(Kx))", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "sx", "=", "sigma_estimation", "(", "X", ",", "X", ")", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sx", "*", "sx", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unstable sigma {} with maximum/minimum input ({},{})\"", ".", "format", "(", "\n", "sx", ",", "torch", ".", "max", "(", "X", ")", ",", "torch", ".", "min", "(", "X", ")", ")", ")", "\n", "\n", "", "", "Kxc", "=", "torch", ".", "mm", "(", "Kx", ",", "H", ")", "\n", "\n", "return", "Kxc", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distcorr": [[53, 57], ["hsic.distmat", "torch.exp", "torch.mean"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat"], ["", "def", "distcorr", "(", "X", ",", "sigma", "=", "1.0", ")", ":", "\n", "    ", "X", "=", "distmat", "(", "X", ")", "\n", "X", "=", "torch", ".", "exp", "(", "-", "X", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "return", "torch", ".", "mean", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.compute_kernel": [[58, 68], ["x.unsqueeze.size", "y.unsqueeze.size", "x.unsqueeze.size", "x.unsqueeze.unsqueeze", "y.unsqueeze.unsqueeze", "x.unsqueeze.expand", "y.unsqueeze.expand", "torch.exp", "float"], "function", ["None"], ["", "def", "compute_kernel", "(", "x", ",", "y", ")", ":", "\n", "    ", "x_size", "=", "x", ".", "size", "(", "0", ")", "\n", "y_size", "=", "y", ".", "size", "(", "0", ")", "\n", "dim", "=", "x", ".", "size", "(", "1", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "# (x_size, 1, dim)", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", "# (1, y_size, dim)", "\n", "tiled_x", "=", "x", ".", "expand", "(", "x_size", ",", "y_size", ",", "dim", ")", "\n", "tiled_y", "=", "y", ".", "expand", "(", "x_size", ",", "y_size", ",", "dim", ")", "\n", "kernel_input", "=", "(", "tiled_x", "-", "tiled_y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "2", ")", "/", "float", "(", "dim", ")", "\n", "return", "torch", ".", "exp", "(", "-", "kernel_input", ")", "# (x_size, y_size)", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.mmd": [[69, 95], ["int", "hsic.distmat", "hsic.distmat", "hsic.distmat", "torch.exp", "torch.eye", "torch.exp", "torch.exp", "hsic.sigma_estimation", "hsic.sigma_estimation", "hsic.sigma_estimation", "torch.exp", "torch.exp", "torch.cat", "x.size", "torch.ones", "torch.mean", "torch.mean", "torch.mean", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation"], ["", "def", "mmd", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "False", ")", ":", "\n", "    ", "m", "=", "int", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "H", "=", "torch", ".", "eye", "(", "m", ")", "-", "(", "1.", "/", "m", ")", "*", "torch", ".", "ones", "(", "[", "m", ",", "m", "]", ")", "\n", "# H = Variable(H)", "\n", "Dxx", "=", "distmat", "(", "x", ")", "\n", "Dyy", "=", "distmat", "(", "y", ")", "\n", "\n", "if", "sigma", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "# kernel matrices", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "sxy", "=", "sigma", "\n", "", "else", ":", "\n", "        ", "sx", "=", "sigma_estimation", "(", "x", ",", "x", ")", "\n", "sy", "=", "sigma_estimation", "(", "y", ",", "y", ")", "\n", "sxy", "=", "sigma_estimation", "(", "x", ",", "y", ")", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sx", "*", "sx", ")", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sy", "*", "sy", ")", ")", "\n", "# Kxc = torch.mm(Kx,H)            # centered kernel matrices", "\n", "# Kyc = torch.mm(Ky,H)", "\n", "", "Dxy", "=", "distmat", "(", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ")", ")", "\n", "Dxy", "=", "Dxy", "[", ":", "x", ".", "size", "(", ")", "[", "0", "]", ",", "x", ".", "size", "(", ")", "[", "0", "]", ":", "]", "\n", "Kxy", "=", "torch", ".", "exp", "(", "-", "Dxy", "/", "(", "1.", "*", "sxy", "*", "sxy", ")", ")", "\n", "\n", "mmdval", "=", "torch", ".", "mean", "(", "Kx", ")", "+", "torch", ".", "mean", "(", "Ky", ")", "-", "2", "*", "torch", ".", "mean", "(", "Kxy", ")", "\n", "\n", "return", "mmdval", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.mmd_pxpy_pxy": [[96, 120], ["int", "hsic.distmat", "hsic.distmat", "torch.mean", "torch.mean", "x.cuda.cuda", "y.cuda.cuda", "torch.exp", "torch.exp", "hsic.sigma_estimation", "hsic.sigma_estimation", "hsic.sigma_estimation", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "x.cuda.size", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.distmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.sigma_estimation"], ["", "def", "mmd_pxpy_pxy", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "if", "use_cuda", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "", "m", "=", "int", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "Dxx", "=", "distmat", "(", "x", ")", "\n", "Dyy", "=", "distmat", "(", "y", ")", "\n", "if", "sigma", ":", "\n", "        ", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "# kernel matrices", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "", "else", ":", "\n", "        ", "sx", "=", "sigma_estimation", "(", "x", ",", "x", ")", "\n", "sy", "=", "sigma_estimation", "(", "y", ",", "y", ")", "\n", "sxy", "=", "sigma_estimation", "(", "x", ",", "y", ")", "\n", "Kx", "=", "torch", ".", "exp", "(", "-", "Dxx", "/", "(", "2.", "*", "sx", "*", "sx", ")", ")", "\n", "Ky", "=", "torch", ".", "exp", "(", "-", "Dyy", "/", "(", "2.", "*", "sy", "*", "sy", ")", ")", "\n", "", "A", "=", "torch", ".", "mean", "(", "Kx", "*", "Ky", ")", "\n", "B", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "Kx", ",", "dim", "=", "0", ")", "*", "torch", ".", "mean", "(", "Ky", ",", "dim", "=", "0", ")", ")", "\n", "C", "=", "torch", ".", "mean", "(", "Kx", ")", "*", "torch", ".", "mean", "(", "Ky", ")", "\n", "mmd_pxpy_pxy_val", "=", "A", "-", "2", "*", "B", "+", "C", "\n", "return", "mmd_pxpy_pxy_val", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_regular": [[121, 129], ["hsic.kernelmat", "hsic.kernelmat", "torch.mul", "torch.mean", "kernelmat.t"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.kernelmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.kernelmat"], ["", "def", "hsic_regular", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "Kxc", "=", "kernelmat", "(", "x", ",", "sigma", ")", "\n", "Kyc", "=", "kernelmat", "(", "y", ",", "sigma", ")", "\n", "KtK", "=", "torch", ".", "mul", "(", "Kxc", ",", "Kyc", ".", "t", "(", ")", ")", "\n", "Pxy", "=", "torch", ".", "mean", "(", "KtK", ")", "\n", "return", "Pxy", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_normalized": [[130, 139], ["int", "hsic.hsic_regular", "torch.sqrt", "torch.sqrt", "hsic.hsic_regular", "hsic.hsic_regular", "x.size"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_regular", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_regular", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_regular"], ["", "def", "hsic_normalized", "(", "x", ",", "y", ",", "sigma", "=", "None", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "m", "=", "int", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "Pxy", "=", "hsic_regular", "(", "x", ",", "y", ",", "sigma", ",", "use_cuda", ")", "\n", "Px", "=", "torch", ".", "sqrt", "(", "hsic_regular", "(", "x", ",", "x", ",", "sigma", ",", "use_cuda", ")", ")", "\n", "Py", "=", "torch", ".", "sqrt", "(", "hsic_regular", "(", "y", ",", "y", ",", "sigma", ",", "use_cuda", ")", ")", "\n", "thehsic", "=", "Pxy", "/", "(", "Px", "*", "Py", ")", "\n", "return", "thehsic", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_normalized_cca": [[140, 156], ["int", "hsic.kernelmat", "hsic.kernelmat", "torch.eye", "torch.inverse", "torch.inverse", "kernelmat.mm", "kernelmat.mm", "torch.sum", "torch.mul", "x.size", "Kyc.mm.t"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.kernelmat", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.kernelmat"], ["", "def", "hsic_normalized_cca", "(", "x", ",", "y", ",", "sigma", ",", "use_cuda", "=", "True", ",", "to_numpy", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "m", "=", "int", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "Kxc", "=", "kernelmat", "(", "x", ",", "sigma", "=", "sigma", ")", "\n", "Kyc", "=", "kernelmat", "(", "y", ",", "sigma", "=", "sigma", ")", "\n", "\n", "epsilon", "=", "1E-5", "\n", "K_I", "=", "torch", ".", "eye", "(", "m", ")", "\n", "Kxc_i", "=", "torch", ".", "inverse", "(", "Kxc", "+", "epsilon", "*", "m", "*", "K_I", ")", "\n", "Kyc_i", "=", "torch", ".", "inverse", "(", "Kyc", "+", "epsilon", "*", "m", "*", "K_I", ")", "\n", "Rx", "=", "(", "Kxc", ".", "mm", "(", "Kxc_i", ")", ")", "\n", "Ry", "=", "(", "Kyc", ".", "mm", "(", "Kyc_i", ")", ")", "\n", "Pxy", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "Rx", ",", "Ry", ".", "t", "(", ")", ")", ")", "\n", "\n", "return", "Pxy", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mensemblecomb.ModelEnsembleComb.__init__": [[5, 10], ["nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hsic_models", ",", "vanilla_model", ")", ":", "\n", "        ", "super", "(", "ModelEnsembleComb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.intput_model = intput_model", "\n", "self", ".", "_hsic_models", "=", "hsic_models", "\n", "self", ".", "_vanilla_model", "=", "vanilla_model", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mensemblecomb.ModelEnsembleComb.forward": [[11, 24], ["torch.mean", "nn.BatchNorm1d().to", "nn.BatchNorm1d().to.", "mensemblecomb.ModelEnsembleComb._vanilla_model", "hsic_model", "x_list.append", "torch.cat", "F.log_softmax", "torch.unsqueeze", "nn.BatchNorm1d", "mensemblecomb.ModelEnsembleComb.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x_list", "=", "[", "]", "\n", "for", "hsic_model", "in", "self", ".", "_hsic_models", ":", "\n", "            ", "h", ",", "hiddens", "=", "hsic_model", "(", "x", ")", "\n", "x_list", ".", "append", "(", "torch", ".", "unsqueeze", "(", "h", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "x", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "x_list", ")", ",", "dim", "=", "0", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "(", "x", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "'cuda'", ")", "\n", "x", "=", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "_vanilla_model", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "hiddens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mreslinear.ModelResLinear.__init__": [[7, 32], ["nn.Module.__init__", "get_in_dimensions", "get_in_channels", "range", "block.BasicResidualBlockDense.makeblock_dense", "nn.Sequential", "block.BasicResidualBlockDense.makeblock_dense", "block.BasicResidualBlockDense.BasicResidualBlockDense", "block_list.append"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_dimensions", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_channels", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense"], ["    ", "def", "__init__", "(", "self", ",", "hidden_width", "=", "64", ",", "n_layers", "=", "5", ",", "atype", "=", "'relu'", ",", "\n", "last_hidden_width", "=", "None", ",", "model_type", "=", "'simple-dense'", ",", "data_code", "=", "'mnist'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelResLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_list", "=", "[", "]", "\n", "is_conv", "=", "False", "\n", "\n", "in_dim", "=", "get_in_dimensions", "(", "data_code", ")", "\n", "in_ch", "=", "get_in_channels", "(", "data_code", ")", "\n", "in_width", "=", "in_dim", "*", "in_ch", "\n", "\n", "last_hw", "=", "hidden_width", "\n", "if", "last_hidden_width", ":", "\n", "            ", "last_hw", "=", "last_hidden_width", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "block", "=", "BasicResidualBlockDense", "(", "hidden_width", ",", "hidden_width", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "input_layer", "=", "makeblock_dense", "(", "in_width", ",", "hidden_width", ",", "atype", ")", "\n", "self", ".", "sequence_layer", "=", "nn", ".", "Sequential", "(", "*", "block_list", ")", "\n", "self", ".", "output_layer", "=", "makeblock_dense", "(", "hidden_width", ",", "last_hw", ",", "atype", ")", "\n", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "in_width", "=", "in_width", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mreslinear.ModelResLinear.forward": [[33, 47], ["block.view", "mreslinear.ModelResLinear.input_layer", "output_list.append", "mreslinear.ModelResLinear.output_layer", "output_list.append", "block", "output_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "output_list", "=", "[", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "in_width", ")", "\n", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "for", "block", "in", "self", ".", "sequence_layer", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "return", "x", ",", "output_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mae.ModelAutoEncoder.__init__": [[7, 27], ["nn.Module.__init__", "block.get_primative_block.get_primative_block", "block_list.append", "block.get_primative_block.get_primative_block", "block_list.append", "block.get_primative_block.get_primative_block", "block_list.append", "block.get_primative_block.get_primative_block", "block_list.append", "block.get_primative_block.makeblock_dense", "nn.Sequential", "nn.Linear"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelAutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_list", "=", "[", "]", "\n", "\n", "atype", "=", "'relu'", "\n", "\n", "block", "=", "get_primative_block", "(", "'simple-dense'", ",", "256", ",", "128", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "block", "=", "get_primative_block", "(", "'simple-dense'", ",", "128", ",", "64", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "block", "=", "get_primative_block", "(", "'simple-dense'", ",", "64", ",", "128", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "block", "=", "get_primative_block", "(", "'simple-dense'", ",", "128", ",", "256", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "\n", "\n", "self", ".", "input_layer", "=", "makeblock_dense", "(", "784", ",", "256", ",", "atype", ")", "\n", "self", ".", "sequence_layer", "=", "nn", ".", "Sequential", "(", "*", "block_list", ")", "\n", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "256", ",", "784", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mae.ModelAutoEncoder.forward": [[29, 43], ["block.view", "mae.ModelAutoEncoder.input_layer", "output_list.append", "mae.ModelAutoEncoder.output_layer", "output_list.append", "block", "output_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "output_list", "=", "[", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "784", ")", "\n", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "for", "block", "in", "self", ".", "sequence_layer", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "return", "x", ",", "output_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mensemble.ModelEnsemble.__init__": [[5, 10], ["nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hsic_model", ",", "vanilla_model", ")", ":", "\n", "        ", "super", "(", "ModelEnsemble", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.intput_model = intput_model", "\n", "self", ".", "_hsic_model", "=", "hsic_model", "\n", "self", ".", "_vanilla_model", "=", "vanilla_model", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mensemble.ModelEnsemble.forward": [[11, 16], ["mensemble.ModelEnsemble._hsic_model", "mensemble.ModelEnsemble._vanilla_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", ",", "hiddens", "=", "self", ".", "_hsic_model", "(", "x", ")", "\n", "x", "=", "self", ".", "_vanilla_model", "(", "x", ")", "\n", "return", "x", ",", "hiddens", "", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mneedle.ModelNeedle.__init__": [[7, 31], ["nn.Module.__init__", "get_in_dimensions", "get_in_channels", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "nn.BatchNorm1d", "nn.Linear", "block.get_activation_functional"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_dimensions", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_channels", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation_functional"], ["    ", "def", "__init__", "(", "self", ",", "data_code", "=", "'mnist'", ",", "atype", "=", "'tanh'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelNeedle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "in_dim", "=", "get_in_dimensions", "(", "data_code", ")", "\n", "in_ch", "=", "get_in_channels", "(", "data_code", ")", "\n", "self", ".", "_in_width", "=", "in_dim", "*", "in_ch", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "self", ".", "_in_width", ",", "256", ")", "\n", "self", ".", "b1", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "b2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "f3", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "b3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "f4", "=", "nn", ".", "Linear", "(", "64", ",", "32", ")", "\n", "self", ".", "b4", "=", "nn", ".", "BatchNorm1d", "(", "32", ")", "\n", "self", ".", "f5", "=", "nn", ".", "Linear", "(", "32", ",", "16", ")", "\n", "self", ".", "b5", "=", "nn", ".", "BatchNorm1d", "(", "16", ")", "\n", "self", ".", "f6", "=", "nn", ".", "Linear", "(", "16", ",", "8", ")", "\n", "self", ".", "b6", "=", "nn", ".", "BatchNorm1d", "(", "8", ")", "\n", "self", ".", "f7", "=", "nn", ".", "Linear", "(", "8", ",", "1", ")", "\n", "self", ".", "b7", "=", "nn", ".", "BatchNorm1d", "(", "1", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "1", ",", "10", ")", "\n", "\n", "self", ".", "_f", "=", "get_activation_functional", "(", "atype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mneedle.ModelNeedle.forward": [[33, 63], ["mneedle.ModelNeedle.view", "mneedle.ModelNeedle.b1", "mneedle.ModelNeedle._f", "output_list.append", "mneedle.ModelNeedle.b2", "mneedle.ModelNeedle._f", "output_list.append", "mneedle.ModelNeedle.b3", "mneedle.ModelNeedle._f", "output_list.append", "mneedle.ModelNeedle.b4", "mneedle.ModelNeedle._f", "output_list.append", "mneedle.ModelNeedle.b5", "mneedle.ModelNeedle._f", "output_list.append", "mneedle.ModelNeedle.b6", "mneedle.ModelNeedle._f", "output_list.append", "mneedle.ModelNeedle.b7", "torch.tanh", "output_list.append", "mneedle.ModelNeedle.out", "mneedle.ModelNeedle.f1", "mneedle.ModelNeedle.f2", "mneedle.ModelNeedle.f3", "mneedle.ModelNeedle.f4", "mneedle.ModelNeedle.f5", "mneedle.ModelNeedle.f6", "mneedle.ModelNeedle.f7", "F.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "output_list", "=", "[", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "_in_width", ")", "\n", "\n", "x", "=", "self", ".", "b1", "(", "self", ".", "f1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "_f", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "b2", "(", "self", ".", "f2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "_f", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "b3", "(", "self", ".", "f3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "_f", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "b4", "(", "self", ".", "f4", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "_f", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "b5", "(", "self", ".", "f5", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "_f", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "b6", "(", "self", ".", "f6", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "_f", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "b7", "(", "self", ".", "f7", "(", "x", ")", ")", "\n", "#x = F.hardtanh(x,-2.,2.)", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "output_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicBlockConv.__init__": [[63, 70], ["nn.Module.__init__", "nn.Conv2d", "nn.BatchNorm2d", "block.get_activation_functional"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation_functional"], ["def", "__init__", "(", "self", ",", "in_chs", ",", "out_chs", ",", "atype", ")", ":", "\n", "        ", "super", "(", "BasicBlockConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_chs", ",", "\n", "out_channels", "=", "out_chs", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_chs", ",", "affine", "=", "False", ")", "\n", "self", ".", "nfunc", "=", "get_activation_functional", "(", "atype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicBlockConv.forward": [[71, 74], ["block.BasicBlockConv.nfunc", "block.BasicBlockConv.bn", "block.BasicBlockConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "nfunc", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicBlockDense.__init__": [[77, 83], ["nn.Module.__init__", "nn.Linear", "nn.BatchNorm1d", "block.get_activation_functional"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation_functional"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "atype", ")", ":", "\n", "        ", "super", "(", "BasicBlockDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "nfunc", "=", "get_activation_functional", "(", "atype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicBlockDense.forward": [[84, 87], ["block.BasicBlockDense.nfunc", "block.BasicBlockDense.bn", "block.BasicBlockDense.dense"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "nfunc", "(", "self", ".", "bn", "(", "self", ".", "dense", "(", "x", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicResidualBlockDense.__init__": [[90, 98], ["nn.Module.__init__", "nn.Linear", "nn.BatchNorm1d", "nn.Sequential", "block.get_activation_functional", "nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation_functional"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "atype", ")", ":", "\n", "        ", "super", "(", "BasicResidualBlockDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dense1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ",", "affine", "=", "False", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "nfunc", "=", "get_activation_functional", "(", "atype", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "out_dime", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicResidualBlockDense.forward": [[99, 105], ["block.BasicResidualBlockDense.nfunc", "block.BasicResidualBlockDense.shortcut", "block.BasicResidualBlockDense.bn3", "block.BasicResidualBlockDense.nfunc", "block.BasicResidualBlockDense.bn1", "block.BasicResidualBlockDense.dense1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "nfunc", "(", "self", ".", "bn1", "(", "self", ".", "dense1", "(", "x", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "nfunc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicResidualBlockConv.__init__": [[108, 116], ["nn.Module.__init__", "nn.Conv2d", "nn.BatchNorm2d", "nn.Sequential", "block.get_activation_functional", "nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation_functional"], ["    ", "def", "__init__", "(", "self", ",", "in_chs", ",", "out_chs", ",", "atype", ")", ":", "\n", "        ", "super", "(", "BasicResidualBlockConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_chs", ",", "out_channels", "=", "out_chs", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_chs", ",", "affine", "=", "False", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "nfunc", "=", "get_activation_functional", "(", "atype", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_chs", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.BasicResidualBlockConv.forward": [[117, 125], ["block.BasicResidualBlockConv.nfunc", "block.BasicResidualBlockConv.shortcut", "block.BasicResidualBlockConv.bn3", "block.BasicResidualBlockConv.nfunc", "block.BasicResidualBlockConv.bn1", "block.BasicResidualBlockConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "nfunc", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "nfunc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation": [[4, 16], ["nn.ReLU", "nn.Tanh", "nn.Sigmoid", "nn.ELU"], "function", ["None"], ["def", "get_activation", "(", "atype", ")", ":", "\n", "\n", "    ", "if", "atype", "==", "'relu'", ":", "\n", "        ", "nonlinear", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "atype", "==", "'tanh'", ":", "\n", "        ", "nonlinear", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "atype", "==", "'sigmoid'", ":", "\n", "        ", "nonlinear", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "atype", "==", "'elu'", ":", "\n", "        ", "nonlinear", "=", "nn", ".", "ELU", "(", ")", "\n", "\n", "", "return", "nonlinear", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation_functional": [[17, 29], ["None"], "function", ["None"], ["", "def", "get_activation_functional", "(", "atype", ")", ":", "\n", "\n", "    ", "if", "atype", "==", "'relu'", ":", "\n", "        ", "nonlinear", "=", "torch", ".", "relu", "\n", "", "elif", "atype", "==", "'tanh'", ":", "\n", "        ", "nonlinear", "=", "torch", ".", "tanh", "\n", "", "elif", "atype", "==", "'sigmoid'", ":", "\n", "        ", "nonlinear", "=", "torch", ".", "sigmoid", "\n", "", "elif", "atype", "==", "'elu'", ":", "\n", "        ", "nonlinear", "=", "torch", ".", "elu", "\n", "\n", "", "return", "nonlinear", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block": [[30, 40], ["block.makeblock_dense", "block.makeblock_conv", "block.BasicResidualBlockDense", "block.BasicResidualBlockConv"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_conv"], ["", "def", "get_primative_block", "(", "model_type", ",", "hid_in", ",", "hid_out", ",", "atype", ")", ":", "\n", "    ", "if", "model_type", "==", "'simple-dense'", ":", "\n", "        ", "block", "=", "makeblock_dense", "(", "hid_in", ",", "hid_out", ",", "atype", ")", "\n", "", "elif", "model_type", "==", "'simple-conv'", ":", "\n", "        ", "block", "=", "makeblock_conv", "(", "hid_in", ",", "hid_out", ",", "atype", ")", "\n", "", "elif", "model_type", "==", "'resnet-dense'", ":", "\n", "        ", "block", "=", "BasicResidualBlockDense", "(", "hid_in", ",", "hid_out", ",", "atype", ")", "\n", "", "elif", "model_type", "==", "'resnet-conv'", ":", "\n", "        ", "block", "=", "BasicResidualBlockConv", "(", "hid_in", ",", "hid_out", ",", "atype", ")", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense": [[41, 51], ["nn.Linear", "nn.BatchNorm1d", "nn.Sequential", "block.get_activation", "nn.Sequential"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation"], ["", "def", "makeblock_dense", "(", "in_dim", ",", "out_dim", ",", "atype", ")", ":", "\n", "\n", "    ", "layer", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ",", "affine", "=", "False", ")", "\n", "if", "atype", "==", "'linear'", ":", "\n", "        ", "out", "=", "nn", ".", "Sequential", "(", "*", "[", "layer", ",", "bn", "]", ")", "\n", "", "else", ":", "\n", "        ", "nonlinear", "=", "get_activation", "(", "atype", ")", "\n", "out", "=", "nn", ".", "Sequential", "(", "*", "[", "layer", ",", "bn", ",", "nonlinear", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_conv": [[52, 60], ["nn.Conv2d", "nn.BatchNorm2d", "block.get_activation", "nn.Sequential"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_activation"], ["", "def", "makeblock_conv", "(", "in_chs", ",", "out_chs", ",", "atype", ",", "stride", "=", "1", ")", ":", "\n", "\n", "    ", "layer", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_chs", ",", "\n", "out_channels", "=", "out_chs", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_chs", ",", "affine", "=", "False", ")", "\n", "nonlinear", "=", "get_activation", "(", "atype", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "[", "layer", ",", "bn", ",", "nonlinear", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mresconv.ModelResConv.__init__": [[7, 38], ["nn.Module.__init__", "get_in_channels", "range", "block.BasicResidualBlockConv.makeblock_conv", "nn.Sequential", "nn.MaxPool2d", "block.BasicResidualBlockConv.makeblock_dense", "block.BasicResidualBlockConv.BasicResidualBlockConv", "block_list.append", "int"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_channels", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_conv", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense"], ["    ", "def", "__init__", "(", "self", ",", "in_width", "=", "784", ",", "hidden_width", "=", "64", ",", "n_layers", "=", "5", ",", "atype", "=", "'relu'", ",", "\n", "last_hidden_width", "=", "None", ",", "model_type", "=", "'simple-dense'", ",", "data_code", "=", "'mnist'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelResConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_list", "=", "[", "]", "\n", "is_conv", "=", "False", "\n", "\n", "in_ch", "=", "get_in_channels", "(", "data_code", ")", "\n", "\n", "last_hw", "=", "hidden_width", "\n", "\n", "if", "last_hidden_width", ":", "\n", "            ", "last_hw", "=", "last_hidden_width", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "block", "=", "BasicResidualBlockConv", "(", "hidden_width", ",", "hidden_width", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "input_layer", "=", "makeblock_conv", "(", "in_ch", ",", "hidden_width", ",", "atype", ",", "stride", "=", "2", ")", "\n", "self", ".", "sequence_layer", "=", "nn", ".", "Sequential", "(", "*", "block_list", ")", "\n", "self", ".", "pooling", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "\n", "if", "data_code", "==", "'cifar10'", ":", "\n", "            ", "factor", "=", "196", "\n", "", "else", ":", "\n", "            ", "factor", "=", "144", "\n", "\n", "", "self", ".", "output_layer", "=", "makeblock_dense", "(", "factor", "*", "int", "(", "hidden_width", ")", ",", "last_hidden_width", ",", "atype", ")", "\n", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "in_width", "=", "in_width", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mresconv.ModelResConv.forward": [[39, 57], ["mresconv.ModelResConv.input_layer", "output_list.append", "block.view", "mresconv.ModelResConv.output_layer", "output_list.append", "block", "output_list.append", "np.prod", "block.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "output_list", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "for", "block", "in", "self", ".", "sequence_layer", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "# x = self.pooling(x)", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "np", ".", "prod", "(", "x", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "return", "x", ",", "output_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhlinear.ModelLinear.__init__": [[7, 31], ["nn.Module.__init__", "range", "get_in_dimensions", "get_in_channels", "block.get_primative_block.makeblock_dense", "nn.Sequential", "block.get_primative_block.makeblock_dense", "block.get_primative_block.get_primative_block", "block_list.append"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_dimensions", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_channels", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block"], ["    ", "def", "__init__", "(", "self", ",", "hidden_width", "=", "64", ",", "n_layers", "=", "5", ",", "atype", "=", "'relu'", ",", "\n", "last_hidden_width", "=", "None", ",", "model_type", "=", "'simple-dense'", ",", "data_code", "=", "'mnist'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_list", "=", "[", "]", "\n", "is_conv", "=", "False", "\n", "\n", "last_hw", "=", "hidden_width", "\n", "if", "last_hidden_width", ":", "\n", "            ", "last_hw", "=", "last_hidden_width", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "block", "=", "get_primative_block", "(", "'simple-dense'", ",", "hidden_width", ",", "hidden_width", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "\n", "", "in_width", "=", "get_in_dimensions", "(", "data_code", ")", "\n", "in_ch", "=", "get_in_channels", "(", "data_code", ")", "\n", "\n", "self", ".", "input_layer", "=", "makeblock_dense", "(", "in_width", "*", "in_ch", ",", "hidden_width", ",", "atype", ")", "\n", "self", ".", "sequence_layer", "=", "nn", ".", "Sequential", "(", "*", "block_list", ")", "\n", "self", ".", "output_layer", "=", "makeblock_dense", "(", "hidden_width", ",", "last_hw", ",", "atype", ")", "\n", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "in_width", "=", "in_width", "*", "in_ch", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhlinear.ModelLinear.forward": [[32, 46], ["block.view", "mhlinear.ModelLinear.input_layer", "output_list.append", "mhlinear.ModelLinear.output_layer", "output_list.append", "block", "output_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "output_list", "=", "[", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "in_width", ")", "\n", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "for", "block", "in", "self", ".", "sequence_layer", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "return", "x", ",", "output_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mvanilla.ModelVanilla.__init__": [[5, 11], ["nn.Module.__init__", "nn.Linear"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_width", "=", "64", ",", "last_hidden_width", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelVanilla", ",", "self", ")", ".", "__init__", "(", ")", "\n", "last_dim", "=", "hidden_width", "\n", "if", "last_hidden_width", ":", "\n", "        \t", "last_dim", "=", "last_hidden_width", "\n", "", "self", ".", "output", "=", "nn", ".", "Linear", "(", "last_dim", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mvanilla.ModelVanilla.forward": [[12, 15], ["mvanilla.ModelVanilla.output", "F.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__": [[7, 37], ["nn.Module.__init__", "get_in_channels", "range", "block.get_primative_block.makeblock_conv", "nn.Sequential", "block.get_primative_block.makeblock_dense", "block.get_primative_block.get_primative_block", "block_list.append"], "methods", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.__init__", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_in_channels", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_conv", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.makeblock_dense", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.block.get_primative_block"], ["    ", "def", "__init__", "(", "self", ",", "in_width", "=", "784", ",", "hidden_width", "=", "64", ",", "n_layers", "=", "5", ",", "atype", "=", "'relu'", ",", "\n", "last_hidden_width", "=", "None", ",", "model_type", "=", "'simple-dense'", ",", "data_code", "=", "'mnist'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModelConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_list", "=", "[", "]", "\n", "is_conv", "=", "False", "\n", "\n", "in_ch", "=", "get_in_channels", "(", "data_code", ")", "\n", "\n", "last_hw", "=", "hidden_width", "\n", "if", "last_hidden_width", ":", "\n", "            ", "last_hw", "=", "last_hidden_width", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "block", "=", "get_primative_block", "(", "'simple-conv'", ",", "hidden_width", ",", "hidden_width", ",", "atype", ")", "\n", "block_list", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "input_layer", "=", "makeblock_conv", "(", "in_ch", ",", "hidden_width", ",", "atype", ")", "\n", "self", ".", "sequence_layer", "=", "nn", ".", "Sequential", "(", "*", "block_list", ")", "\n", "if", "data_code", "==", "'mnist'", ":", "\n", "            ", "dim", "=", "128", "\n", "", "elif", "data_code", "==", "'cifar10'", ":", "\n", "            ", "dim", "=", "960", "\n", "", "elif", "data_code", "==", "'fmnist'", ":", "\n", "            ", "dim", "=", "128", "\n", "\n", "", "self", ".", "output_layer", "=", "makeblock_dense", "(", "dim", ",", "last_hw", ",", "atype", ")", "\n", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "in_width", "=", "in_width", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.model.mhconv.ModelConv.forward": [[38, 55], ["mhconv.ModelConv.input_layer", "output_list.append", "block.view", "mhconv.ModelConv.output_layer", "output_list.append", "block", "output_list.append", "np.prod", "block.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "output_list", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "for", "block", "in", "self", ".", "sequence_layer", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "np", ".", "prod", "(", "x", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "output_list", ".", "append", "(", "x", ")", "\n", "\n", "return", "x", ",", "output_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.dispatcher.plot_execution": [[13, 57], ["training_standard", "training_hsic", "training_format", "plot_needle_result", "plot_general_result", "plot_hsicsolve_result", "plot_variedact_result", "plot_sigmacomb_result", "plot_varieddepth_result", "plot_variedep_result", "plot_varieddim_result", "plot_resconv_result", "ValueError"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_standard", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_hsic", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_format", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_needle.plot_needle_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_general.plot_general_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_hsicsolve.plot_hsicsolve_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedact.plot_variedact_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_sigmacomb.plot_sigmacomb_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddepth.plot_varieddepth_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedep.plot_variedep_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddim.plot_varieddim_result", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.plot_resconv_result"], ["def", "plot_execution", "(", "config_dict", ")", ":", "\n", "\n", "    ", "if", "config_dict", "[", "'task'", "]", "==", "'standard-train'", ":", "\n", "        ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "            ", "out_batch", ",", "out_epoch", "=", "training_standard", "(", "config_dict", ")", "\n", "\n", "", "", "elif", "config_dict", "[", "'task'", "]", "==", "'hsic-train'", ":", "\n", "        ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "            ", "out_batch", ",", "out_epoch", "=", "training_hsic", "(", "config_dict", ")", "\n", "\n", "", "", "elif", "config_dict", "[", "'task'", "]", "==", "'format-train'", ":", "\n", "        ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "            ", "out_batch", ",", "out_epoch", "=", "training_format", "(", "config_dict", ")", "\n", "\n", "", "", "elif", "config_dict", "[", "'task'", "]", "==", "'needle'", ":", "\n", "        ", "plot_needle_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'general'", ":", "\n", "        ", "plot_general_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'hsic-solve'", ":", "\n", "        ", "plot_hsicsolve_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-activation'", ":", "\n", "        ", "plot_variedact_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'sigma-combined'", ":", "\n", "        ", "plot_sigmacomb_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-depth'", ":", "\n", "        ", "plot_varieddepth_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-epoch'", ":", "\n", "        ", "plot_variedep_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-dim'", ":", "\n", "        ", "plot_varieddim_result", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'resconv'", ":", "\n", "        ", "plot_resconv_result", "(", "config_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown given task [{}], please check \\\n            hsicbt.dispatcher.job_execution\"", ".", "format", "(", "config_dict", "[", "'task'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.dispatcher.job_execution": [[58, 104], ["torch.cuda.manual_seed", "torch.manual_seed", "training_standard", "training_hsic", "training_format", "task_needle_func", "task_general_func", "task_hsicsolve_func", "task_variedact_func", "task_sigmacomb_func", "task_varieddepth_func", "task_variedep_func", "task_varieddim_func", "task_resconv_func", "ValueError"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_standard", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_hsic", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_format", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_needle.task_needle_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_general.task_general_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_hsicsolve.task_hsicsolve_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedact.task_variedact_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_sigmacomb.task_sigmacomb_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddepth.task_varieddepth_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_variedep.task_variedep_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_varieddim.task_varieddim_func", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.task.task_resconv.task_resconv_func"], ["", "", "def", "job_execution", "(", "config_dict", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "if", "config_dict", "[", "'task'", "]", "==", "'standard-train'", ":", "\n", "        ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "            ", "out_batch", ",", "out_epoch", "=", "training_standard", "(", "config_dict", ")", "\n", "\n", "", "", "elif", "config_dict", "[", "'task'", "]", "==", "'hsic-train'", ":", "\n", "        ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "            ", "out_batch", ",", "out_epoch", "=", "training_hsic", "(", "config_dict", ")", "\n", "\n", "", "", "elif", "config_dict", "[", "'task'", "]", "==", "'format-train'", ":", "\n", "        ", "if", "config_dict", "[", "'do_training'", "]", ":", "\n", "            ", "out_batch", ",", "out_epoch", "=", "training_format", "(", "config_dict", ")", "\n", "\n", "", "", "elif", "config_dict", "[", "'task'", "]", "==", "'needle'", ":", "\n", "        ", "task_needle_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'general'", ":", "\n", "        ", "task_general_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'hsic-solve'", ":", "\n", "        ", "task_hsicsolve_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-activation'", ":", "\n", "        ", "task_variedact_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'sigma-combined'", ":", "\n", "        ", "task_sigmacomb_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-depth'", ":", "\n", "        ", "task_varieddepth_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-epoch'", ":", "\n", "        ", "task_variedep_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'varied-dim'", ":", "\n", "        ", "task_varieddim_func", "(", "config_dict", ")", "\n", "\n", "", "elif", "config_dict", "[", "'task'", "]", "==", "'resconv'", ":", "\n", "        ", "task_resconv_func", "(", "config_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown given task [{}], please check \\\n            hsicbt.dispatcher.job_execution\"", ".", "format", "(", "config_dict", "[", "'task'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_standard": [[10, 80], ["print_emph", "get_dataset_from_code", "torch.manual_seed", "ModelVanilla", "torch.manual_seed", "train_misc.model_distribution", "ModelEnsemble", "optim.SGD", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "range", "print", "print", "filter", "train_standard.standard_train", "batch_log_list.append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "print_highlight", "print_highlight", "save_logs", "json.dumps", "ModelEnsemble.parameters", "train_misc.activations_extraction", "get_act_path", "save_logs", "get_act_path", "save_logs", "get_log_filepath"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_emph", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_dataset_from_code", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.model_distribution", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_standard.standard_train", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.activations_extraction", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath"], ["def", "training_standard", "(", "config_dict", ")", ":", "\n", "\n", "    ", "print_emph", "(", "\"Standard training\"", ")", "\n", "code_name", "=", "[", "config_dict", "[", "'task'", "]", ",", "TTYPE_STANDARD", ",", "config_dict", "[", "'data_code'", "]", "]", "\n", "\n", "train_loader", ",", "test_loader", "=", "get_dataset_from_code", "(", "\n", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'batch_size'", "]", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "\n", "vanilla_model", "=", "ModelVanilla", "(", "**", "config_dict", ")", "\n", "torch", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "hsic_model", "=", "model_distribution", "(", "config_dict", ")", "\n", "model", "=", "ModelEnsemble", "(", "hsic_model", ",", "vanilla_model", ")", "\n", "\n", "if", "config_dict", "[", "'verbose'", "]", ":", "\n", "        ", "print", "(", "model", ")", "\n", "print", "(", "json", ".", "dumps", "(", "config_dict", ",", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "config_dict", "[", "'learning_rate'", "]", ",", "weight_decay", "=", "1E-5", ")", "\n", "\n", "batch_log_list", "=", "[", "]", "\n", "epoch_log_dict", "=", "{", "}", "\n", "epoch_log_dict", "[", "'train_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'train_loss'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_loss'", "]", "=", "[", "]", "\n", "nepoch", "=", "config_dict", "[", "'epochs'", "]", "\n", "\n", "if", "DEBUG_MODE", ":", "\n", "        ", "nepoch", "=", "2", "\n", "\n", "", "train_acc", ",", "train_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "model", ",", "train_loader", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", ")", "\n", "test_acc", ",", "test_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "model", ",", "test_loader", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "epoch_log_dict", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "\n", "\n", "for", "cepoch", "in", "range", "(", "1", ",", "nepoch", "+", "1", ")", ":", "\n", "\n", "        ", "log", "=", "standard_train", "(", "cepoch", ",", "model", ",", "train_loader", ",", "optimizer", ",", "config_dict", ")", "\n", "batch_log_list", ".", "append", "(", "log", ")", "\n", "train_acc", ",", "train_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "model", ",", "train_loader", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", ")", "\n", "test_acc", ",", "test_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "model", ",", "test_loader", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "epoch_log_dict", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Training Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "train_acc", ")", ",", "'green'", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Testing  Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "test_acc", ")", ",", "'green'", ")", "\n", "\n", "if", "config_dict", "[", "'task'", "]", "==", "'needle'", ":", "\n", "            ", "data", "=", "activations_extraction", "(", "model", ",", "train_loader", ",", "1", ")", "\n", "filepath", "=", "get_act_path", "(", "*", "code_name", ",", "idx", "=", "cepoch", ")", "\n", "save_logs", "(", "data", ",", "filepath", ")", "\n", "filepath", "=", "get_act_path", "(", "*", "code_name", ")", "\n", "save_logs", "(", "data", ",", "filepath", ")", "\n", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'batch_log_list'", "]", "=", "batch_log_list", "\n", "log_dict", "[", "'epoch_log_dict'", "]", "=", "epoch_log_dict", "\n", "log_dict", "[", "'config_dict'", "]", "=", "config_dict", "\n", "save_logs", "(", "log_dict", ",", "get_log_filepath", "(", "*", "code_name", ")", ")", "\n", "\n", "\n", "", "return", "batch_log_list", ",", "epoch_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_format_combined": [[81, 148], ["print_emph", "get_dataset_from_code", "torch.manual_seed", "ModelVanilla", "len", "range", "optim.SGD", "ModelEnsembleComb", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "range", "train_misc.model_distribution().to", "load_model", "model_distribution().to.load_state_dict", "hsic_models.append", "filter", "print", "print", "train_standard.standard_train", "batch_log_list.append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "print_highlight", "print_highlight", "save_logs", "get_model_path", "ModelVanilla.parameters", "json.dumps", "get_log_filepath", "train_misc.model_distribution"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_emph", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_dataset_from_code", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_model", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_standard.standard_train", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.model_distribution"], ["", "def", "training_format_combined", "(", "config_dict", ")", ":", "\n", "\n", "    ", "print_emph", "(", "\"Format training\"", ")", "\n", "\n", "train_loader", ",", "test_loader", "=", "get_dataset_from_code", "(", "\n", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'batch_size'", "]", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "vanilla_model", "=", "ModelVanilla", "(", "**", "config_dict", ")", "\n", "num_hsic_model", "=", "len", "(", "config_dict", "[", "'model_file'", "]", ")", "\n", "hsic_models", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_hsic_model", ")", ":", "\n", "        ", "hsic_model", "=", "model_distribution", "(", "config_dict", ")", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "model", "=", "load_model", "(", "get_model_path", "(", "\"{}\"", ".", "format", "(", "config_dict", "[", "'model_file'", "]", "[", "i", "]", ")", ")", ")", "\n", "hsic_model", ".", "load_state_dict", "(", "model", ")", "\n", "# hsic_model.eval()", "\n", "hsic_models", ".", "append", "(", "hsic_model", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "vanilla_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "config_dict", "[", "'learning_rate'", "]", ",", "momentum", "=", ".9", ",", "weight_decay", "=", "0.0001", ")", "\n", "\n", "ensemble_model", "=", "ModelEnsembleComb", "(", "hsic_models", ",", "vanilla_model", ")", "\n", "if", "config_dict", "[", "'verbose'", "]", ":", "\n", "        ", "print", "(", "ensemble_model", ")", "\n", "print", "(", "json", ".", "dumps", "(", "config_dict", ",", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", ")", "\n", "\n", "", "batch_log_list", "=", "[", "]", "\n", "epoch_log_dict", "=", "{", "}", "\n", "epoch_log_dict", "[", "'train_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'train_loss'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_loss'", "]", "=", "[", "]", "\n", "\n", "nepoch", "=", "config_dict", "[", "'epochs'", "]", "\n", "\n", "if", "DEBUG_MODE", ":", "\n", "        ", "nepoch", "=", "2", "\n", "\n", "# WIP: untrained test acc", "\n", "", "test_acc", ",", "test_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "test_loader", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "epoch_log_dict", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "\n", "for", "cepoch", "in", "range", "(", "1", ",", "nepoch", "+", "1", ")", ":", "\n", "        ", "log", "=", "standard_train", "(", "cepoch", ",", "ensemble_model", ",", "train_loader", ",", "optimizer", ",", "config_dict", ")", "\n", "batch_log_list", ".", "append", "(", "log", ")", "\n", "\n", "\n", "train_acc", ",", "train_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "train_loader", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", ")", "\n", "test_acc", ",", "test_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "test_loader", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "epoch_log_dict", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Training Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "train_acc", ")", ",", "'green'", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Testing  Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "test_acc", ")", ",", "'green'", ")", "\n", "\n", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'batch_log_list'", "]", "=", "batch_log_list", "\n", "log_dict", "[", "'epoch_log_dict'", "]", "=", "epoch_log_dict", "\n", "log_dict", "[", "'config_dict'", "]", "=", "config_dict", "\n", "save_logs", "(", "log_dict", ",", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'exp_index'", "]", ")", ")", "\n", "\n", "\n", "", "return", "batch_log_list", ",", "epoch_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_format": [[149, 218], ["print_emph", "get_dataset_from_code", "torch.manual_seed", "ModelVanilla", "torch.manual_seed", "train_misc.model_distribution", "optim.SGD", "load_model", "train_misc.model_distribution.load_state_dict", "train_misc.model_distribution.eval", "ModelEnsemble", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "range", "filter", "get_model_path", "print", "print", "train_standard.standard_train", "batch_log_list.append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "misc.get_accuracy_epoch", "epoch_log_dict[].append", "epoch_log_dict[].append", "print_highlight", "print_highlight", "save_logs", "ModelVanilla.parameters", "json.dumps", "get_log_filepath"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_emph", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_dataset_from_code", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.model_distribution", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_model", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_standard.standard_train", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_epoch", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath"], ["", "def", "training_format", "(", "config_dict", ")", ":", "\n", "\n", "    ", "print_emph", "(", "\"Format training\"", ")", "\n", "\n", "train_loader", ",", "test_loader", "=", "get_dataset_from_code", "(", "\n", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'batch_size'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "vanilla_model", "=", "ModelVanilla", "(", "**", "config_dict", ")", "\n", "torch", ".", "manual_seed", "(", "config_dict", "[", "'seed'", "]", ")", "\n", "hsic_model", "=", "model_distribution", "(", "config_dict", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "vanilla_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "config_dict", "[", "'learning_rate'", "]", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "model", "=", "load_model", "(", "get_model_path", "(", "\"{}\"", ".", "format", "(", "\n", "config_dict", "[", "'model_file'", "]", ")", ")", ")", "\n", "\n", "hsic_model", ".", "load_state_dict", "(", "model", ")", "\n", "hsic_model", ".", "eval", "(", ")", "\n", "\n", "ensemble_model", "=", "ModelEnsemble", "(", "hsic_model", ",", "vanilla_model", ")", "\n", "if", "config_dict", "[", "'verbose'", "]", ":", "\n", "        ", "print", "(", "ensemble_model", ")", "\n", "print", "(", "json", ".", "dumps", "(", "config_dict", ",", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", ")", "\n", "\n", "", "batch_log_list", "=", "[", "]", "\n", "epoch_log_dict", "=", "{", "}", "\n", "epoch_log_dict", "[", "'train_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'train_loss'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_loss'", "]", "=", "[", "]", "\n", "\n", "nepoch", "=", "config_dict", "[", "'epochs'", "]", "\n", "\n", "if", "DEBUG_MODE", ":", "\n", "        ", "nepoch", "=", "2", "\n", "\n", "# WIP: test acc for untrained net", "\n", "", "test_acc", ",", "test_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "test_loader", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "epoch_log_dict", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "train_acc", ",", "train_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "train_loader", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", ")", "\n", "\n", "for", "cepoch", "in", "range", "(", "1", ",", "nepoch", "+", "1", ")", ":", "\n", "        ", "log", "=", "standard_train", "(", "cepoch", ",", "ensemble_model", ",", "train_loader", ",", "optimizer", ",", "config_dict", ")", "\n", "batch_log_list", ".", "append", "(", "log", ")", "\n", "\n", "train_acc", ",", "train_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "train_loader", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", ")", "\n", "test_acc", ",", "test_loss", "=", "misc", ".", "get_accuracy_epoch", "(", "ensemble_model", ",", "test_loader", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "epoch_log_dict", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Training Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "train_acc", ")", ",", "'green'", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Testing  Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "test_acc", ")", ",", "'green'", ")", "\n", "\n", "\n", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'batch_log_list'", "]", "=", "batch_log_list", "\n", "log_dict", "[", "'epoch_log_dict'", "]", "=", "epoch_log_dict", "\n", "log_dict", "[", "'config_dict'", "]", "=", "config_dict", "\n", "save_logs", "(", "log_dict", ",", "get_log_filepath", "(", "\n", "config_dict", "[", "'task'", "]", ",", "TTYPE_FORMAT", ",", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'exp_index'", "]", ")", ")", "\n", "\n", "\n", "", "return", "batch_log_list", ",", "epoch_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.engine.training_hsic": [[219, 320], ["print_emph", "get_dataset_from_code", "train_misc.model_distribution", "range", "Variable", "print", "print", "load_model", "range", "train_misc.model_distribution.load_state_dict", "torch.ones().float().to", "misc.get_accuracy_hsic", "misc.get_accuracy_hsic", "epoch_log_dict[].append", "epoch_log_dict[].append", "train_hsic.hsic_train", "batch_log_list.append", "save_logs", "json.dumps", "get_model_path", "save_model", "misc.get_accuracy_hsic", "misc.get_accuracy_hsic", "print_highlight", "print_highlight", "epoch_log_dict[].append", "epoch_log_dict[].append", "train_misc.activations_extraction", "get_act_path", "save_logs", "train_misc.activations_extraction", "get_act_path", "save_logs", "get_act_path", "save_logs", "get_log_filepath", "torch.ones().float", "os.path.splitext", "get_model_path", "get_model_path", "torch.ones"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_emph", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.dataset.get_dataset_from_code", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.model_distribution", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.load_model", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_hsic", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_hsic", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_hsic.hsic_train", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_model", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_hsic", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy_hsic", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.color.print_highlight", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.activations_extraction", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.activations_extraction", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_act_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.io.save_logs", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_log_filepath", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_path", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.path.get_model_path"], ["", "def", "training_hsic", "(", "config_dict", ")", ":", "\n", "\n", "    ", "print_emph", "(", "\"HSIC-Bottleneck training\"", ")", "\n", "code_name", "=", "[", "config_dict", "[", "'task'", "]", ",", "TTYPE_HSICTRAIN", ",", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'exp_index'", "]", "]", "\n", "\n", "train_loader", ",", "test_loader", "=", "get_dataset_from_code", "(", "\n", "config_dict", "[", "'data_code'", "]", ",", "config_dict", "[", "'batch_size'", "]", ")", "\n", "#torch.manual_seed(config_dict['seed'])", "\n", "model", "=", "model_distribution", "(", "config_dict", ")", "\n", "\n", "if", "config_dict", "[", "'verbose'", "]", ":", "\n", "        ", "print", "(", "model", ")", "\n", "print", "(", "json", ".", "dumps", "(", "config_dict", ",", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", ")", "\n", "\n", "", "nepoch", "=", "config_dict", "[", "'epochs'", "]", "\n", "\n", "if", "DEBUG_MODE", ":", "\n", "        ", "nepoch", "=", "2", "\n", "\n", "", "epoch_range", "=", "range", "(", "1", ",", "nepoch", "+", "1", ")", "\n", "if", "config_dict", "[", "'checkpoint'", "]", ":", "\n", "        ", "model_dict", "=", "load_model", "(", "get_model_path", "(", "\"{}\"", ".", "format", "(", "\n", "config_dict", "[", "'model_file'", "]", ")", ",", "config_dict", "[", "'checkpoint'", "]", ")", ")", "\n", "epoch_range", "=", "range", "(", "config_dict", "[", "'checkpoint'", "]", "+", "1", ",", "\n", "config_dict", "[", "'checkpoint'", "]", "+", "config_dict", "[", "'epochs'", "]", "+", "1", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "batch_log_list", "=", "[", "]", "\n", "epoch_log_dict", "=", "{", "}", "\n", "epoch_log_dict", "[", "'train_acc'", "]", "=", "[", "]", "\n", "epoch_log_dict", "[", "'test_acc'", "]", "=", "[", "]", "\n", "\n", "sigma_tensor", "=", "Variable", "(", "torch", ".", "ones", "(", "14", ")", ".", "float", "(", ")", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "\n", "# # WIP: getting untrained acc", "\n", "if", "config_dict", "[", "'task'", "]", "==", "'hsic-solve'", ":", "\n", "        ", "train_acc", ",", "reordered", "=", "misc", ".", "get_accuracy_hsic", "(", "model", "=", "model", ",", "dataloader", "=", "train_loader", ")", "\n", "test_acc", ",", "reordered", "=", "misc", ".", "get_accuracy_hsic", "(", "model", "=", "model", ",", "dataloader", "=", "test_loader", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "\n", "", "for", "cepoch", "in", "epoch_range", ":", "\n", "\n", "        ", "log", "=", "hsic_train", "(", "cepoch", ",", "model", ",", "train_loader", ",", "config_dict", ")", "\n", "\n", "batch_log_list", ".", "append", "(", "log", ")", "\n", "\n", "if", "config_dict", "[", "'task'", "]", "==", "'hsic-train'", "or", "config_dict", "[", "'task'", "]", "==", "'activation'", "or", "config_dict", "[", "'task'", "]", "==", "'sigma-combined'", "or", "config_dict", "[", "'task'", "]", "==", "'varied-dim'", "or", "config_dict", "[", "'task'", "]", "==", "'resconv'", "or", "config_dict", "[", "'task'", "]", "==", "'varied-epoch'", ":", "\n", "\n", "# save with each indexed", "\n", "            ", "filename", "=", "os", ".", "path", ".", "splitext", "(", "config_dict", "[", "'model_file'", "]", ")", "[", "0", "]", "\n", "filename", "=", "\"{}-{:04d}.pt\"", ".", "format", "(", "filename", ",", "cepoch", ")", "\n", "save_model", "(", "model", ",", "\n", "get_model_path", "(", "\"{}\"", ".", "format", "(", "filename", ")", ")", ",", "\n", "get_model_path", "(", "\"{}\"", ".", "format", "(", "config_dict", "[", "'model_file'", "]", ")", ")", "\n", ")", "\n", "\n", "", "if", "config_dict", "[", "'task'", "]", "==", "'hsic-solve'", ":", "\n", "            ", "train_acc", ",", "reordered", "=", "misc", ".", "get_accuracy_hsic", "(", "model", "=", "model", ",", "dataloader", "=", "train_loader", ")", "\n", "test_acc", ",", "reordered", "=", "misc", ".", "get_accuracy_hsic", "(", "model", "=", "model", ",", "dataloader", "=", "test_loader", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Training Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "train_acc", ")", ",", "'green'", ")", "\n", "print_highlight", "(", "\"Epoch - [{:04d}]: Testing  Acc: {:.2f}\"", ".", "format", "(", "cepoch", ",", "test_acc", ")", ",", "'green'", ")", "\n", "epoch_log_dict", "[", "'train_acc'", "]", ".", "append", "(", "train_acc", ")", "\n", "epoch_log_dict", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "\n", "", "if", "config_dict", "[", "'task'", "]", "==", "'hsic-solve'", ":", "\n", "            ", "data", "=", "activations_extraction", "(", "model", ",", "train_loader", ")", "\n", "filepath", "=", "get_act_path", "(", "*", "code_name", ")", "\n", "save_logs", "(", "data", ",", "filepath", ")", "\n", "\n", "", "if", "config_dict", "[", "'task'", "]", "==", "'needle'", ":", "\n", "            ", "data", "=", "activations_extraction", "(", "model", ",", "train_loader", ",", "out_dim", "=", "1", ")", "\n", "\n", "_code_name", "=", "[", "config_dict", "[", "'task'", "]", ",", "TTYPE_HSICTRAIN", ",", "config_dict", "[", "'data_code'", "]", ",", "cepoch", "]", "\n", "filepath", "=", "get_act_path", "(", "*", "_code_name", ")", "\n", "save_logs", "(", "data", ",", "filepath", ")", "\n", "_code_name", "=", "[", "config_dict", "[", "'task'", "]", ",", "TTYPE_HSICTRAIN", ",", "config_dict", "[", "'data_code'", "]", ",", "None", "]", "\n", "filepath", "=", "get_act_path", "(", "*", "_code_name", ")", "\n", "save_logs", "(", "data", ",", "filepath", ")", "\n", "\n", "# out_list = [64, 32, 16, 8, 4, 2, 1]", "\n", "# for i, h in enumerate(out_list):", "\n", "#     data = activations_extraction(model, train_loader, out_dim=h, hid_idx=i)", "\n", "#     _code_name = [config_dict['task'], TTYPE_HSICTRAIN, config_dict['data_code'], (cepoch-1)*len(out_list)+i]", "\n", "#     filepath = get_act_path(*_code_name)", "\n", "#     save_logs(data, filepath)", "\n", "\n", "", "log_dict", "=", "{", "}", "\n", "log_dict", "[", "'batch_log_list'", "]", "=", "batch_log_list", "\n", "log_dict", "[", "'epoch_log_dict'", "]", "=", "epoch_log_dict", "\n", "log_dict", "[", "'config_dict'", "]", "=", "config_dict", "\n", "save_logs", "(", "log_dict", ",", "get_log_filepath", "(", "*", "code_name", ")", ")", "\n", "\n", "", "return", "batch_log_list", ",", "epoch_log_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_hsic.hsic_train": [[6, 114], ["torch.nn.CrossEntropyLoss", "meter.AverageMeter", "meter.AverageMeter", "meter.AverageMeter", "meter.AverageMeter", "model.to.to", "tqdm", "len", "enumerate", "data.to.to", "target.to.to", "model.to.", "target.to.view", "misc.to_categorical().float", "data.to.view", "range", "range", "meter.AverageMeter.update", "meter.AverageMeter.update", "meter.AverageMeter.update", "meter.AverageMeter.update", "tqdm.set_description", "os.environ.get", "np.prod", "len", "idx_range.append", "len", "model.to.", "misc.get_layer_parameters", "optim.SGD", "optim.SGD.zero_grad", "train_misc.hsic_objective", "loss.backward", "optim.SGD.step", "hx_l.cpu().detach().numpy", "hy_l.cpu().detach().numpy", "batch_log[].append", "batch_log[].append", "batch_log[].append", "batch_log[].append", "misc.to_categorical", "np.arange().tolist", "len", "hiddens[].view", "target.to.view().float", "int", "data.to.size", "hiddens[].size", "np.prod", "target.view().float.float", "hx_l.cpu().detach", "hy_l.cpu().detach", "np.arange", "len", "target.to.view", "hiddens[].size", "hx_l.cpu", "hy_l.cpu"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_layer_parameters", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.hsic_objective", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.to_categorical"], ["def", "hsic_train", "(", "cepoch", ",", "model", ",", "data_loader", ",", "config_dict", ")", ":", "\n", "\n", "    ", "cross_entropy_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "prec1", "=", "total_loss", "=", "hx_l", "=", "hy_l", "=", "-", "1", "\n", "\n", "batch_acc", "=", "meter", ".", "AverageMeter", "(", ")", "\n", "batch_loss", "=", "meter", ".", "AverageMeter", "(", ")", "\n", "batch_hischx", "=", "meter", ".", "AverageMeter", "(", ")", "\n", "batch_hischy", "=", "meter", ".", "AverageMeter", "(", ")", "\n", "\n", "batch_log", "=", "{", "}", "\n", "batch_log", "[", "'batch_acc'", "]", "=", "[", "]", "\n", "batch_log", "[", "'batch_loss'", "]", "=", "[", "]", "\n", "batch_log", "[", "'batch_hsic_hx'", "]", "=", "[", "]", "\n", "batch_log", "[", "'batch_hsic_hy'", "]", "=", "[", "]", "\n", "\n", "model", "=", "model", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "\n", "n_data", "=", "config_dict", "[", "'batch_size'", "]", "*", "len", "(", "data_loader", ")", "\n", "\n", "# sigma_optimizer = optim.SGD([sigma_tensor], lr=1E-5)", "\n", "\n", "# for batch_idx, (data, target) in enumerate(data_loader):", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "data_loader", ")", ",", "total", "=", "n_data", "/", "config_dict", "[", "'batch_size'", "]", ",", "ncols", "=", "120", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "pbar", ":", "\n", "\n", "        ", "if", "os", ".", "environ", ".", "get", "(", "'HSICBT_DEBUG'", ")", "==", "'4'", ":", "\n", "            ", "if", "batch_idx", ">", "5", ":", "\n", "                ", "break", "\n", "\n", "", "", "data", "=", "data", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "target", "=", "target", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "output", ",", "hiddens", "=", "model", "(", "data", ")", "\n", "\n", "h_target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "h_target", "=", "misc", ".", "to_categorical", "(", "h_target", ",", "num_classes", "=", "10", ")", ".", "float", "(", ")", "\n", "h_data", "=", "data", ".", "view", "(", "-", "1", ",", "np", ".", "prod", "(", "data", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "\n", "idx_range", "=", "[", "]", "\n", "it", "=", "0", "\n", "\n", "# So the batchnorm is not learnable, making only @,b at layer", "\n", "for", "i", "in", "range", "(", "len", "(", "hiddens", ")", ")", ":", "\n", "            ", "idx_range", ".", "append", "(", "np", ".", "arange", "(", "it", ",", "it", "+", "2", ")", ".", "tolist", "(", ")", ")", "\n", "it", "+=", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "hiddens", ")", ")", ":", "\n", "\n", "            ", "output", ",", "hiddens", "=", "model", "(", "data", ")", "\n", "params", ",", "param_names", "=", "misc", ".", "get_layer_parameters", "(", "model", "=", "model", ",", "idx_range", "=", "idx_range", "[", "i", "]", ")", "# so we only optimize one layer at a time", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "config_dict", "[", "'learning_rate'", "]", ",", "momentum", "=", ".9", ",", "weight_decay", "=", "0.001", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# sigma_optimizer.zero_grad()", "\n", "if", "len", "(", "hiddens", "[", "i", "]", ".", "size", "(", ")", ")", ">", "2", ":", "\n", "                ", "hiddens", "[", "i", "]", "=", "hiddens", "[", "i", "]", ".", "view", "(", "-", "1", ",", "np", ".", "prod", "(", "hiddens", "[", "i", "]", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "# WIP: special case for needle", "\n", "", "if", "config_dict", "[", "'task'", "]", "==", "'needle'", "and", "i", "==", "len", "(", "hiddens", ")", "-", "1", ":", "\n", "                ", "h_target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "#h_target =  h_target/9.", "\n", "\n", "\n", "", "hx_l", ",", "hy_l", "=", "hsic_objective", "(", "\n", "hiddens", "[", "i", "]", ",", "\n", "h_target", "=", "h_target", ".", "float", "(", ")", ",", "\n", "h_data", "=", "h_data", ",", "\n", "sigma", "=", "config_dict", "[", "'sigma'", "]", ",", "\n", ")", "\n", "#print(torch.max(hiddens[i]).cpu().detach().numpy(), torch.min(hiddens[i]).cpu().detach().numpy(), torch.std(hiddens[i]).cpu().detach().numpy())", "\n", "loss", "=", "hx_l", "-", "config_dict", "[", "'lambda_y'", "]", "*", "hy_l", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# sigma_optimizer.step()", "\n", "# if config_dict['hsic_solve']:", "\n", "#     prec1, reorder_list = misc.get_accuracy_hsic(model, data_loader)", "\n", "", "batch_acc", ".", "update", "(", "prec1", ")", "\n", "batch_loss", ".", "update", "(", "total_loss", ")", "\n", "batch_hischx", ".", "update", "(", "hx_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "batch_hischy", ".", "update", "(", "hy_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# # # preparation log information and print progress # # #", "\n", "\n", "msg", "=", "'Train Epoch: {cepoch} [ {cidx:5d}/{tolidx:5d} ({perc:2d}%)] H_hx:{H_hx:.4f} H_hy:{H_hy:.4f}'", ".", "format", "(", "\n", "cepoch", "=", "cepoch", ",", "\n", "cidx", "=", "(", "batch_idx", "+", "1", ")", "*", "config_dict", "[", "'batch_size'", "]", ",", "\n", "tolidx", "=", "n_data", ",", "\n", "perc", "=", "int", "(", "100.", "*", "(", "batch_idx", "+", "1", ")", "*", "config_dict", "[", "'batch_size'", "]", "/", "n_data", ")", ",", "\n", "H_hx", "=", "batch_hischx", ".", "avg", ",", "\n", "H_hy", "=", "batch_hischy", ".", "avg", ",", "\n", ")", "\n", "\n", "if", "(", "(", "batch_idx", "+", "1", ")", "%", "config_dict", "[", "'log_batch_interval'", "]", "==", "0", ")", ":", "\n", "\n", "            ", "batch_log", "[", "'batch_acc'", "]", ".", "append", "(", "batch_loss", ".", "avg", ")", "\n", "batch_log", "[", "'batch_loss'", "]", ".", "append", "(", "batch_acc", ".", "avg", ")", "\n", "batch_log", "[", "'batch_hsic_hx'", "]", ".", "append", "(", "batch_hischx", ".", "avg", ")", "\n", "batch_log", "[", "'batch_hsic_hy'", "]", ".", "append", "(", "batch_hischy", ".", "avg", ")", "\n", "\n", "", "pbar", ".", "set_description", "(", "msg", ")", "\n", "\n", "# if cepoch==1:", "\n", "#     data = activations_extraction(model, data_loader)", "\n", "#     _code_name = [config_dict['task'], TTYPE_HSICTRAIN, config_dict['data_code']+\"_batch\", batch_idx]", "\n", "#     filepath = get_act_path(*_code_name)", "\n", "#     save_logs(data, filepath)", "\n", "\n", "", "return", "batch_log", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_standard.standard_train": [[11, 90], ["torch.nn.CrossEntropyLoss", "model.to.to", "tqdm", "len", "enumerate", "data.to.to", "target.to.to", "model.to.", "target.to.view", "misc.to_categorical().float", "data.to.view", "optimizer.zero_grad", "torch.nn.CrossEntropyLoss.", "float.backward", "optimizer.step", "float", "misc.get_accuracy", "float", "batch_acc.update", "batch_loss.update", "batch_hischx.update", "batch_hischy.update", "tqdm.set_description", "os.environ.get", "np.prod", "train_misc.hsic_objective", "hx_l.cpu().detach().numpy.cpu().detach().numpy", "hy_l.cpu().detach().numpy.cpu().detach().numpy", "float.detach().cpu().numpy", "float.cpu().numpy", "batch_log[].append", "batch_log[].append", "batch_log[].append", "batch_log[].append", "misc.to_categorical", "int", "data.to.size", "misc.to_categorical().float.float", "hx_l.cpu().detach().numpy.cpu().detach", "hy_l.cpu().detach().numpy.cpu().detach", "float.detach().cpu", "float.cpu", "hx_l.cpu().detach().numpy.cpu", "hy_l.cpu().detach().numpy.cpu", "float.detach"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.get_accuracy", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.hsic_objective", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.misc.to_categorical"], ["def", "standard_train", "(", "cepoch", ",", "model", ",", "data_loader", ",", "optimizer", ",", "config_dict", ")", ":", "\n", "\n", "    ", "cross_entropy_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "prec1", "=", "total_loss", "=", "hx_l", "=", "hy_l", "=", "-", "1", "\n", "\n", "batch_log", "=", "{", "}", "\n", "batch_log", "[", "'batch_acc'", "]", "=", "[", "]", "\n", "batch_log", "[", "'batch_loss'", "]", "=", "[", "]", "\n", "batch_log", "[", "'batch_hsic_hx'", "]", "=", "[", "]", "\n", "batch_log", "[", "'batch_hsic_hy'", "]", "=", "[", "]", "\n", "\n", "model", "=", "model", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "\n", "n_data", "=", "config_dict", "[", "'batch_size'", "]", "*", "len", "(", "data_loader", ")", "\n", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "data_loader", ")", ",", "total", "=", "n_data", "/", "config_dict", "[", "'batch_size'", "]", ",", "ncols", "=", "150", ")", "\n", "# for batch_idx, (data, target) in enumerate(data_loader):", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "pbar", ":", "\n", "\n", "        ", "if", "os", ".", "environ", ".", "get", "(", "'HSICBT_DEBUG'", ")", "==", "'4'", ":", "\n", "            ", "if", "batch_idx", ">", "5", ":", "\n", "                ", "break", "\n", "\n", "", "", "data", "=", "data", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "target", "=", "target", ".", "to", "(", "config_dict", "[", "'device'", "]", ")", "\n", "output", ",", "hiddens", "=", "model", "(", "data", ")", "\n", "\n", "h_target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "h_target", "=", "misc", ".", "to_categorical", "(", "h_target", ",", "num_classes", "=", "10", ")", ".", "float", "(", ")", "\n", "\n", "h_data", "=", "data", ".", "view", "(", "-", "1", ",", "np", ".", "prod", "(", "data", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "# # # if want to monitor hsic", "\n", "if", "config_dict", "[", "'task'", "]", "==", "'varied-activation'", "or", "config_dict", "[", "'task'", "]", "==", "'varied-depth'", ":", "\n", "            ", "hx_l", ",", "hy_l", "=", "hsic_objective", "(", "\n", "hiddens", "[", "-", "1", "]", ",", "\n", "h_target", "=", "h_target", ".", "float", "(", ")", ",", "\n", "h_data", "=", "h_data", ",", "\n", "sigma", "=", "config_dict", "[", "'sigma'", "]", "\n", ")", "\n", "hx_l", "=", "hx_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "hy_l", "=", "hy_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "cross_entropy_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "loss", "=", "float", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "prec1", ",", "prec5", "=", "misc", ".", "get_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "prec1", "=", "float", "(", "prec1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "batch_acc", ".", "update", "(", "prec1", ")", "\n", "batch_loss", ".", "update", "(", "loss", ")", "\n", "batch_hischx", ".", "update", "(", "hx_l", ")", "\n", "batch_hischy", ".", "update", "(", "hy_l", ")", "\n", "\n", "msg", "=", "'Train Epoch: {cepoch} [ {cidx:5d}/{tolidx:5d} ({perc:2d}%)] Loss:{loss:.4f} Acc:{acc:.4f} hsic_xz:{hsic_zx:.4f} hsic_yz:{hsic_zy:.4f}'", ".", "format", "(", "\n", "cepoch", "=", "cepoch", ",", "\n", "cidx", "=", "(", "batch_idx", "+", "1", ")", "*", "config_dict", "[", "'batch_size'", "]", ",", "\n", "tolidx", "=", "n_data", ",", "\n", "perc", "=", "int", "(", "100.", "*", "(", "batch_idx", "+", "1", ")", "*", "config_dict", "[", "'batch_size'", "]", "/", "n_data", ")", ",", "\n", "loss", "=", "batch_loss", ".", "avg", ",", "\n", "acc", "=", "batch_acc", ".", "avg", ",", "\n", "hsic_zx", "=", "batch_hischx", ".", "avg", ",", "\n", "hsic_zy", "=", "batch_hischy", ".", "avg", ",", "\n", ")", "\n", "\n", "# # # preparation log information and print progress # # #", "\n", "if", "(", "(", "batch_idx", ")", "%", "config_dict", "[", "'log_batch_interval'", "]", "==", "0", ")", ":", "\n", "            ", "batch_log", "[", "'batch_acc'", "]", ".", "append", "(", "batch_acc", ".", "val", ")", "\n", "batch_log", "[", "'batch_loss'", "]", ".", "append", "(", "batch_loss", ".", "val", ")", "\n", "batch_log", "[", "'batch_hsic_hx'", "]", ".", "append", "(", "batch_hischx", ".", "val", ")", "\n", "batch_log", "[", "'batch_hsic_hy'", "]", ".", "append", "(", "batch_hischy", ".", "val", ")", "\n", "\n", "", "pbar", ".", "set_description", "(", "msg", ")", "\n", "\n", "", "return", "batch_log", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.activations_extraction": [[4, 24], ["np.zeros", "np.zeros", "enumerate", "next", "data.to.to", "model", "hiddens[].detach().cpu().numpy", "target.detach().cpu().numpy", "model.parameters", "len", "len", "len", "hiddens[].detach().cpu", "target.detach().cpu", "hiddens[].detach", "target.detach"], "function", ["None"], ["def", "activations_extraction", "(", "model", ",", "data_loader", ",", "out_dim", "=", "10", ",", "hid_idx", "=", "-", "1", ",", ")", ":", "\n", "\n", "    ", "out_activation", "=", "np", ".", "zeros", "(", "[", "len", "(", "data_loader", ")", "*", "data_loader", ".", "batch_size", ",", "out_dim", "]", ")", "\n", "out_label", "=", "np", ".", "zeros", "(", "[", "len", "(", "data_loader", ")", "*", "data_loader", ".", "batch_size", ",", "]", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "if", "len", "(", "data", ")", "<", "data_loader", ".", "batch_size", ":", "\n", "            ", "break", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "output", ",", "hiddens", "=", "model", "(", "data", ")", "\n", "\n", "begin", "=", "batch_idx", "*", "data_loader", ".", "batch_size", "\n", "end", "=", "(", "batch_idx", "+", "1", ")", "*", "data_loader", ".", "batch_size", "\n", "out_activation", "[", "begin", ":", "end", "]", "=", "hiddens", "[", "hid_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_label", "[", "begin", ":", "end", "]", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "{", "\"activation\"", ":", "out_activation", ",", "\"label\"", ":", "out_label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.hsic_objective": [[26, 34], ["hsic_normalized_cca", "hsic_normalized_cca"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_normalized_cca", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.math.hsic.hsic_normalized_cca"], ["", "def", "hsic_objective", "(", "hidden", ",", "h_target", ",", "h_data", ",", "sigma", ")", ":", "\n", "\n", "\n", "    ", "hsic_hy_val", "=", "hsic_normalized_cca", "(", "hidden", ",", "h_target", ",", "sigma", "=", "sigma", ")", "\n", "hsic_hx_val", "=", "hsic_normalized_cca", "(", "hidden", ",", "h_data", ",", "sigma", "=", "sigma", ")", "\n", "\n", "\n", "return", "hsic_hx_val", ",", "hsic_hy_val", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.core.train_misc.model_distribution": [[35, 51], ["ModelNeedle", "ModelConv", "ModelLinear", "ModelResLinear", "ModelResConv", "ValueError"], "function", ["None"], ["", "def", "model_distribution", "(", "config_dict", ")", ":", "\n", "\n", "    ", "if", "config_dict", "[", "'model'", "]", "==", "'needle'", ":", "\n", "        ", "model", "=", "ModelNeedle", "(", "**", "config_dict", ")", "\n", "", "elif", "config_dict", "[", "'model'", "]", "==", "'conv'", ":", "\n", "        ", "model", "=", "ModelConv", "(", "**", "config_dict", ")", "\n", "", "elif", "config_dict", "[", "'model'", "]", "==", "'linear'", ":", "\n", "        ", "model", "=", "ModelLinear", "(", "**", "config_dict", ")", "\n", "", "elif", "config_dict", "[", "'model'", "]", "==", "'resnet-linear'", ":", "\n", "        ", "model", "=", "ModelResLinear", "(", "**", "config_dict", ")", "\n", "", "elif", "config_dict", "[", "'model'", "]", "==", "'resnet-conv'", ":", "\n", "        ", "model", "=", "ModelResConv", "(", "**", "config_dict", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown model name or not support [{}]\"", ".", "format", "(", "config_dict", "[", "'model'", "]", ")", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.tests.plot-result-dynamic.plot_needle_distribution": [[10, 17], ["sorted", "enumerate", "glob.glob", "hsicbt.utils.plot.plot_1d_activation_kde", "matplotlib.title", "hsicbt.utils.plot.save_figure"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_1d_activation_kde", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure"], ["def", "plot_needle_distribution", "(", ")", ":", "\n", "    ", "regex", "=", "\"./assets/activation/raw/070820_152112_needle-hsictrain-mnist-*.npy\"", "\n", "filepaths", "=", "sorted", "(", "glob", ".", "glob", "(", "regex", ")", ")", "\n", "for", "idx", ",", "filepath", "in", "enumerate", "(", "filepaths", ")", ":", "\n", "        ", "plot", ".", "plot_1d_activation_kde", "(", "filepath", ")", "\n", "plt", ".", "title", "(", "\"Epoch {}\"", ".", "format", "(", "idx", ")", ",", "fontsize", "=", "30", ")", "\n", "plot", ".", "save_figure", "(", "filepath", "[", ":", "-", "3", "]", "+", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.tests.plot-result-dynamic.plot_batch_hsicsolve": [[18, 26], ["enumerate", "sorted", "hsicbt.utils.plot.plot_activation_distribution", "hsicbt.utils.plot.save_figure", "glob.glob"], "function", ["home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.plot_activation_distribution", "home.repos.pwc.inspect_result.choasma_HSIC-Bottleneck.utils.plot.save_figure"], ["", "", "def", "plot_batch_hsicsolve", "(", ")", ":", "\n", "    ", "regex", "=", "\"./assets/activation/raw/200807_180226_hsic-solve-hsictrain-mnist_batch-*.npy\"", "\n", "filepaths", "=", "sorted", "(", "glob", ".", "glob", "(", "regex", ")", ")", "[", ":", ":", "2", "]", "\n", "for", "idx", ",", "filepath", "in", "enumerate", "(", "filepaths", ")", ":", "\n", "        ", "title", "=", "\"Iteration {} @Epoch 1\"", ".", "format", "(", "idx", "*", "2", ")", "\n", "plot", ".", "plot_activation_distribution", "(", "filepath", ",", "title", ")", "\n", "out_path", "=", "filepath", "[", ":", "-", "8", "]", "+", "\"{:04d}.png\"", ".", "format", "(", "idx", ")", "\n", "plot", ".", "save_figure", "(", "out_path", ")", "\n", "\n"]]}