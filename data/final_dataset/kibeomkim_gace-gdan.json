{"home.repos.pwc.inspect_result.kibeomkim_gace-gdan.None.main.main": [[22, 54], ["params.log_params", "torch.set_start_method", "torch.Value", "torch.Lock", "GACE_GDAN.models.GDAN", "shared_model.share_memory.share_memory", "utils.shared_optim.SharedAdam", "utils.shared_optim.SharedAdam.share_memory", "multiprocessing.managers.BaseManager.register", "multiprocessing.managers.BaseManager", "multiprocessing.managers.BaseManager.start", "multiprocessing.managers.BaseManager.goal_storage", "range", "range", "shared_model.share_memory.parameters", "torch.Process", "mp.Process.start", "processes.append", "torch.Process", "mp.Process.start", "processes.append", "mp.Process.join"], "function", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.None.params.log_params", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.share_memory", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.share_memory"], ["def", "main", "(", ")", ":", "\n", "    ", "log_params", "(", ")", "\n", "\n", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "count", "=", "mp", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "lock", "=", "mp", ".", "Lock", "(", ")", "\n", "\n", "shared_model", "=", "GDAN", "(", ")", "\n", "shared_model", "=", "shared_model", ".", "share_memory", "(", ")", "\n", "\n", "shared_optimizer", "=", "SharedAdam", "(", "shared_model", ".", "parameters", "(", ")", ",", "lr", "=", "params", ".", "lr", ",", "amsgrad", "=", "params", ".", "amsgrad", ",", "\n", "weight_decay", "=", "params", ".", "weight_decay", ")", "\n", "shared_optimizer", ".", "share_memory", "(", ")", "\n", "\n", "BaseManager", ".", "register", "(", "'goal_storage'", ",", "goal_storage", ")", "\n", "manager", "=", "BaseManager", "(", ")", "\n", "manager", ".", "start", "(", ")", "\n", "shared_storage", "=", "manager", ".", "goal_storage", "(", ")", "\n", "\n", "processes", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "params", ".", "num_train_processes", ")", ":", "\n", "        ", "p", "=", "mp", ".", "Process", "(", "target", "=", "run_sim", ",", "args", "=", "(", "rank", ",", "shared_model", ",", "shared_optimizer", ",", "count", ",", "lock", ",", "shared_storage", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "rank", "in", "range", "(", "params", ".", "num_test_processes", ")", ":", "\n", "        ", "p", "=", "mp", ".", "Process", "(", "target", "=", "test", ",", "args", "=", "(", "rank", ",", "shared_model", ",", "shared_optimizer", ",", "count", ",", "lock", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.None.params.Params.__init__": [[7, 60], ["len", "random.randint", "datetime.datetime.now", "datetime.datetime.now.strftime", "os.path.exists", "os.mkdir", "ValueError"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "map", "=", "'exp1'", "# one of 'exp1' 'exp2' 'exp3' 'exp4'", "\n", "\n", "# Configs for running trains/test", "\n", "self", ".", "num_train_processes", "=", "20", "\n", "if", "self", ".", "map", "in", "[", "'exp1'", ",", "'exp3'", "]", ":", "\n", "            ", "self", ".", "train_maps", "=", "[", "f'multitarget-visnav-{self.map}-v1'", "]", "*", "self", ".", "num_train_processes", "\n", "", "elif", "self", ".", "map", "in", "[", "'exp2'", ",", "'exp4'", "]", ":", "\n", "            ", "self", ".", "train_maps", "=", "[", "f'multitarget-visnav-{self.map}-seen-v1'", "]", "*", "self", ".", "num_train_processes", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'self.map must be provided as exp{1,2,3,4}.'", ")", "\n", "\n", "", "if", "self", ".", "map", "in", "[", "'exp1'", ",", "'exp3'", "]", ":", "\n", "            ", "self", ".", "eval_maps", "=", "[", "f'multitarget-visnav-{self.map}-v1'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval_maps", "=", "[", "f'multitarget-visnav-{self.map}-seen-v1'", ",", "\n", "f'multitarget-visnav-{self.map}-unseen-v1'", "]", "\n", "\n", "", "self", ".", "num_test_processes", "=", "len", "(", "self", ".", "eval_maps", ")", "\n", "\n", "self", ".", "n_eval", "=", "500", "\n", "self", ".", "gpu_ids_train", "=", "[", "0", ",", "1", "]", "\n", "self", ".", "gpu_ids_test", "=", "[", "0", ",", "1", "]", "\n", "self", ".", "seed", "=", "random", ".", "randint", "(", "0", ",", "10000", ")", "\n", "\n", "# Model/optimizer hyperparameters", "\n", "self", ".", "gamma", "=", "0.99", "\n", "self", ".", "entropy_coef", "=", "0.01", "\n", "self", ".", "lr", "=", "7e-5", "\n", "self", ".", "tau", "=", "1.0", "\n", "self", ".", "clip_grad_norm", "=", "10.0", "\n", "self", ".", "value_loss_coef", "=", "0.5", "\n", "self", ".", "amsgrad", "=", "True", "\n", "self", ".", "goal_coef", "=", "0.5", "\n", "self", ".", "goal_batch_size", "=", "50", "\n", "self", ".", "minimum_warmup", "=", "self", ".", "num_train_processes", "*", "100", "\n", "self", ".", "weight_decay", "=", "0", "\n", "\n", "# Gym environment settings", "\n", "self", ".", "scaled_resolution", "=", "(", "42", ",", "42", ")", "\n", "self", ".", "living_reward", "=", "-", "0.0025", "# 4-frame stack, so living reward is quadrupled", "\n", "self", ".", "goal_reward", "=", "10.0", "\n", "self", ".", "non_goal_penalty", "=", "1.0", "\n", "self", ".", "non_goal_break", "=", "True", "\n", "self", ".", "timeout_penalty", "=", "0.1", "\n", "\n", "# Logging-related", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "nowDate", "=", "now", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "self", ".", "log_file", "=", "nowDate", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./wgt'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./wgt'", ")", "\n", "", "self", ".", "weight_dir", "=", "'./wgt/{}_wgt/'", ".", "format", "(", "nowDate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.None.params.log_params": [[64, 80], ["str", "params_dict.keys", "os.path.isdir", "os.mkdir", "open", "file.write", "time.strftime", "str"], "function", ["None"], ["def", "log_params", "(", ")", ":", "\n", "    ", "path", "=", "'./log/{}'", ".", "format", "(", "params", ".", "log_file", ")", "\n", "\n", "msg", "=", "str", "(", "'start time\\t{}\\n'", ".", "format", "(", "time", ".", "strftime", "(", "'%X %x %Z'", ")", ")", ")", "\n", "\n", "params_dict", "=", "params", ".", "__dict__", "\n", "for", "key", "in", "params_dict", ".", "keys", "(", ")", ":", "\n", "        ", "msg", "+=", "'{}\\t{}\\n'", ".", "format", "(", "key", ",", "str", "(", "params_dict", "[", "key", "]", ")", ")", "\n", "\n", "", "msg", "+=", "'\\n'", "+", "'\\t'", ".", "join", "(", "[", "'time'", ",", "'numUpdates'", ",", "'mapId'", ",", "'saveModelIdx'", ",", "'avgReward'", ",", "'avgLength'", ",", "'successRate'", ",", "'bestRate'", "]", ")", "+", "'\\n'", "\n", "csv_path", "=", "path", "+", "'.csv'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./log'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./log'", ")", "\n", "\n", "", "with", "open", "(", "csv_path", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedRMSprop.__init__": [[16, 41], ["collections.defaultdict", "torch.Optimizer.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new", "p.data.new", "p.data.new"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "7e-4", ",", "\n", "alpha", "=", "0.99", ",", "\n", "eps", "=", "0.1", ",", "\n", "weight_decay", "=", "0", ",", "\n", "momentum", "=", "0", ",", "\n", "centered", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "defaultdict", "(", "\n", "lr", "=", "lr", ",", "\n", "alpha", "=", "alpha", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "momentum", ",", "\n", "centered", "=", "centered", ")", "\n", "super", "(", "SharedRMSprop", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "state", "[", "'grad_avg'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'square_avg'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'momentum_buffer'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "\n", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedRMSprop.share_memory": [[42, 50], ["state[].share_memory_", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_"], "methods", ["None"], ["", "", "", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'square_avg'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'step'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'grad_avg'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'momentum_buffer'", "]", ".", "share_memory_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedRMSprop.step": [[51, 98], ["closure", "square_avg.mul_().addcmul_", "RuntimeError", "grad.add.add.add", "grad_avg.mul_().add_", "square_avg.addcmul().sqrt().add_", "square_avg.sqrt().add_", "buf.mul_().addcdiv_", "p.data.add_", "p.data.addcdiv_", "square_avg.mul_", "grad_avg.mul_", "square_avg.addcmul().sqrt", "square_avg.sqrt", "buf.mul_", "square_avg.addcmul"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'RMSprop does not support sparse gradients'", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "square_avg", "=", "state", "[", "'square_avg'", "]", "\n", "alpha", "=", "group", "[", "'alpha'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "square_avg", ".", "mul_", "(", "alpha", ")", ".", "addcmul_", "(", "1", "-", "alpha", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "group", "[", "'centered'", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "'grad_avg'", "]", "\n", "grad_avg", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "grad", ")", "\n", "avg", "=", "square_avg", ".", "addcmul", "(", "-", "1", ",", "grad_avg", ",", "\n", "grad_avg", ")", ".", "sqrt", "(", ")", ".", "add_", "(", "\n", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "avg", "=", "square_avg", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "if", "group", "[", "'momentum'", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "group", "[", "'momentum'", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "buf", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "'lr'", "]", ",", "grad", ",", "avg", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.__init__": [[104, 127], ["collections.defaultdict", "torch.Optimizer.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new", "p.data.new", "p.data.new"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__"], ["def", "__init__", "(", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-3", ",", "\n", "weight_decay", "=", "0", ",", "\n", "amsgrad", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "defaultdict", "(", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "SharedAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "state", "[", "'exp_avg'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'max_exp_avg_sq'", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "\n", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.share_memory": [[128, 136], ["state[].share_memory_", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_"], "methods", ["None"], ["", "", "", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'exp_avg'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'exp_avg_sq'", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "'max_exp_avg_sq'", "]", ".", "share_memory_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.step": [[137, 191], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "grad.add.add.add", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "exp_avg.mul_", "exp_avg_sq.mul_", "state[].item", "state[].item", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", "\n", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till", "\n", "# now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ".", "item", "(", ")", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", ".", "item", "(", ")", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.utils.norm_col_init": [[5, 9], ["torch.randn", "weights.size", "torch.sqrt"], "function", ["None"], ["def", "norm_col_init", "(", "weights", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "weights", ".", "size", "(", ")", ")", "\n", "x", "*=", "std", "/", "torch", ".", "sqrt", "(", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.utils.ensure_shared_grads": [[10, 19], ["zip", "model.parameters", "shared_model.parameters", "param.grad.cpu"], "function", ["None"], ["", "def", "ensure_shared_grads", "(", "model", ",", "shared_model", ",", "gpu", "=", "False", ")", ":", "\n", "    ", "for", "param", ",", "shared_param", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "\n", "shared_model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "shared_param", ".", "grad", "is", "not", "None", "and", "not", "gpu", ":", "\n", "            ", "return", "\n", "", "elif", "not", "gpu", ":", "\n", "            ", "shared_param", ".", "_grad", "=", "param", ".", "grad", "\n", "", "else", ":", "\n", "            ", "shared_param", ".", "_grad", "=", "param", ".", "grad", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.utils.weights_init": [[20, 36], ["classname.find", "list", "numpy.prod", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size", "numpy.prod", "classname.find", "list", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size"], "function", ["None"], ["", "", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "np", ".", "prod", "(", "weight_shape", "[", "1", ":", "4", "]", ")", "\n", "fan_out", "=", "np", ".", "prod", "(", "weight_shape", "[", "2", ":", "4", "]", ")", "*", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "weight_shape", "[", "1", "]", "\n", "fan_out", "=", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.Feature_Extractor.__init__": [[7, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Feature_Extractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "batchnorm1", "=", "nn", ".", "BatchNorm2d", "(", "32", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "batchnorm2", "=", "nn", ".", "BatchNorm2d", "(", "32", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "batchnorm3", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "batchnorm4", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "3", "*", "3", ",", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.Feature_Extractor.forward": [[20, 33], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "models.Feature_Extractor.batchnorm1", "models.Feature_Extractor.batchnorm2", "models.Feature_Extractor.batchnorm3", "models.Feature_Extractor.batchnorm4", "x.view.view.size", "models.Feature_Extractor.fc", "models.Feature_Extractor.conv1", "models.Feature_Extractor.conv2", "models.Feature_Extractor.conv3", "models.Feature_Extractor.conv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "x", "=", "state", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "batchnorm1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "batchnorm2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "batchnorm3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "batchnorm4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "img_feat", "=", "F", ".", "relu", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "\n", "return", "img_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.Actor_Critic.__init__": [[36, 56], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Actor_Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "4", ",", "25", ")", "\n", "self", ".", "target_att_linear", "=", "nn", ".", "Linear", "(", "25", ",", "256", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "512", ",", "256", ")", "\n", "\n", "self", ".", "layer_query", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "layer_key", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "\n", "self", ".", "before_attn", "=", "nn", ".", "Linear", "(", "512", ",", "512", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "\n", "self", ".", "mlp_policy1", "=", "nn", ".", "Linear", "(", "256", ",", "128", ")", "\n", "self", ".", "mlp_policy2", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "policy", "=", "nn", ".", "Linear", "(", "64", ",", "3", ")", "\n", "\n", "self", ".", "mlp_value1", "=", "nn", ".", "Linear", "(", "256", ",", "64", ")", "\n", "self", ".", "mlp_value2", "=", "nn", ".", "Linear", "(", "64", ",", "32", ")", "# 64", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.Actor_Critic.forward": [[57, 90], ["models.Actor_Critic.embedding", "models.Actor_Critic.view", "models.Actor_Critic.target_att_linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Actor_Critic.lstm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Actor_Critic.size", "models.Actor_Critic.before_attn", "models.Actor_Critic.layer_query", "models.Actor_Critic.layer_key", "models.Actor_Critic.attn", "models.Actor_Critic.mlp_policy1", "models.Actor_Critic.mlp_policy2", "models.Actor_Critic.mlp_value1", "models.Actor_Critic.mlp_value2", "models.Actor_Critic.value", "models.Actor_Critic.policy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_feat", ",", "instruction_idx", ",", "_hx", ",", "_cx", ",", "query", ")", ":", "\n", "        ", "word_embedding", "=", "self", ".", "embedding", "(", "instruction_idx", ")", "\n", "word_embedding", "=", "word_embedding", ".", "view", "(", "word_embedding", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "word_embedding", "=", "self", ".", "target_att_linear", "(", "word_embedding", ")", "\n", "gated_att", "=", "torch", ".", "sigmoid", "(", "word_embedding", ")", "# gated_att", "\n", "\n", "# apply gated attention", "\n", "gated_fusion", "=", "torch", ".", "mul", "(", "img_feat", ",", "gated_att", ")", "\n", "lstm_input", "=", "torch", ".", "cat", "(", "[", "gated_fusion", ",", "gated_att", "]", ",", "1", ")", "\n", "\n", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "lstm_input", ",", "(", "_hx", ",", "_cx", ")", ")", "\n", "\n", "mlp_input", "=", "torch", ".", "cat", "(", "[", "gated_fusion", ",", "hx", "]", ",", "1", ")", "\n", "\n", "mlp_attn", "=", "F", ".", "relu", "(", "self", ".", "before_attn", "(", "mlp_input", ")", ")", "\n", "key", ",", "value", "=", "torch", ".", "chunk", "(", "mlp_attn", ",", "2", ",", "dim", "=", "1", ")", "\n", "\n", "w_q", "=", "F", ".", "relu", "(", "self", ".", "layer_query", "(", "query", ")", ")", "\n", "w_k", "=", "F", ".", "relu", "(", "self", ".", "layer_key", "(", "key", ")", ")", "\n", "u_t", "=", "torch", ".", "tanh", "(", "w_q", "+", "w_k", ")", "\n", "attention_vector", "=", "torch", ".", "mul", "(", "u_t", ",", "value", ")", "\n", "\n", "attn_weight", "=", "torch", ".", "cat", "(", "[", "attention_vector", ",", "hx", "]", ",", "1", ")", "\n", "attn_weight", "=", "F", ".", "relu", "(", "self", ".", "attn", "(", "attn_weight", ")", ")", "\n", "\n", "policy", "=", "F", ".", "relu", "(", "self", ".", "mlp_policy1", "(", "attn_weight", ")", ")", "\n", "policy", "=", "F", ".", "relu", "(", "self", ".", "mlp_policy2", "(", "policy", ")", ")", "\n", "\n", "value", "=", "F", ".", "relu", "(", "self", ".", "mlp_value1", "(", "attn_weight", ")", ")", "\n", "value", "=", "F", ".", "relu", "(", "self", ".", "mlp_value2", "(", "value", ")", ")", "\n", "\n", "return", "self", ".", "value", "(", "value", ")", ",", "self", ".", "policy", "(", "policy", ")", ",", "hx", ",", "cx", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.Goal_discriminator.__init__": [[93, 98], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Goal_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "256", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.Goal_discriminator.forward": [[99, 104], ["torch.relu", "torch.relu", "torch.relu", "models.Goal_discriminator.linear2", "models.Goal_discriminator.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_feat", ")", ":", "\n", "        ", "query", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "img_feat", ")", ")", "\n", "x", "=", "self", ".", "linear2", "(", "query", ")", "\n", "\n", "return", "x", ",", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.GDAN.__init__": [[107, 114], ["torch.Module.__init__", "models.Feature_Extractor", "models.Goal_discriminator", "models.Actor_Critic"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GDAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "Feature_Extractor", "(", ")", "\n", "\n", "self", ".", "d", "=", "Goal_discriminator", "(", ")", "\n", "\n", "self", ".", "f", "=", "Actor_Critic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.models.GDAN.forward": [[115, 126], ["models.GDAN.sigma", "models.GDAN.d", "models.GDAN.f"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "instruction", ",", "_hx", ",", "_cx", ",", "use_ActorCritic", "=", "True", ")", ":", "\n", "        ", "preds", ",", "value", ",", "policy", ",", "hx", ",", "cx", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "e_t", "=", "self", ".", "sigma", "(", "state", ")", "\n", "preds", ",", "query", "=", "self", ".", "d", "(", "e_t", ")", "\n", "\n", "if", "use_ActorCritic", ":", "\n", "            ", "value", ",", "policy", ",", "hx", ",", "cx", "=", "self", ".", "f", "(", "e_t", ",", "instruction", ",", "_hx", ",", "_cx", ",", "query", ")", "\n", "\n", "\n", "", "return", "preds", ",", "value", ",", "policy", ",", "hx", ",", "cx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.eval.test": [[21, 74], ["setproctitle.setproctitle", "torch.manual_seed", "gym.make", "GACE_GDAN.models.GDAN", "GACE_GDAN.agent.run_agent", "datetime.datetime.now", "datetime.datetime.now.strftime", "torch.utils.tensorboard.SummaryWriter", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "print", "torch.cuda.manual_seed", "torch.cuda.device", "model.cuda.cuda", "time.time", "eval.testing", "torch.cuda.device", "GACE_GDAN.agent.run_agent.model.load_state_dict", "len", "len", "shared_model.state_dict"], "function", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.eval.testing", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["def", "test", "(", "rank", ",", "shared_model", ",", "shared_optimizer", ",", "count", ",", "lock", ")", ":", "\n", "# Set up logging", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "params", ".", "weight_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./'", "+", "params", ".", "weight_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./log'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./log'", ")", "\n", "\n", "# Change process title", "\n", "", "ptitle", "(", "'Testing {}'", ".", "format", "(", "rank", ")", ")", "\n", "\n", "# Set GPU for current instance/process", "\n", "gpu_id", "=", "params", ".", "gpu_ids_test", "[", "rank", "%", "len", "(", "params", ".", "gpu_ids_test", ")", "]", "\n", "\n", "if", "shared_optimizer", "is", "None", ":", "\n", "        ", "print", "(", "\"\\nshared_optimizer is None\\n\"", ")", "\n", "\n", "# Set seed", "\n", "", "torch", ".", "manual_seed", "(", "params", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", ".", "seed", "+", "rank", ")", "\n", "\n", "# Load Vizdoom environment", "\n", "", "map_id", "=", "params", ".", "eval_maps", "[", "rank", "%", "len", "(", "params", ".", "train_maps", ")", "]", "\n", "env", "=", "gym", ".", "make", "(", "map_id", ",", "scaled_resolution", "=", "params", ".", "scaled_resolution", ",", "\n", "living_reward", "=", "params", ".", "living_reward", ",", "\n", "goal_reward", "=", "params", ".", "goal_reward", ",", "\n", "non_goal_penalty", "=", "params", ".", "non_goal_penalty", ",", "\n", "timeout_penalty", "=", "params", ".", "timeout_penalty", ",", "\n", "non_goal_break", "=", "params", ".", "non_goal_break", ")", "\n", "\n", "# Initialize model", "\n", "model", "=", "GDAN", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Initialize agent", "\n", "", "agent", "=", "run_agent", "(", "model", ",", "gpu_id", ")", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "nowDate", "=", "now", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "writer", "=", "SummaryWriter", "(", "'runs/GDAN_{}_{}'", ".", "format", "(", "params", ".", "map", ",", "map_id", ",", "nowDate", ")", ")", "\n", "\n", "best_rate", "=", "0.0", "\n", "save_model_index", "=", "0", "\n", "\n", "while", "True", ":", "\n", "        ", "with", "lock", ":", "\n", "            ", "n_update", "=", "count", ".", "value", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "agent", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "best_rate", ",", "save_model_index", "=", "testing", "(", "rank", ",", "env", ",", "map_id", ",", "gpu_id", ",", "agent", ",", "n_update", ",", "best_rate", ",", "\n", "save_model_index", ",", "start_time", ",", "writer", ",", "shared_optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.eval.testing": [[76, 149], ["agent.model.eval", "range", "env.reset", "env.get_goal_idx", "torch.from_numpy().view", "evals.append", "len", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cuda.device", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "agent.action_test", "env.step", "print", "sum", "len", "sum", "len", "torch.from_numpy", "torch.zeros().cuda", "torch.zeros().cuda", "len", "len", "torch.cuda.device", "torch.save", "numpy.array", "torch.autograd.Variable", "str", "agent.model.state_dict", "optimizer.state_dict", "time.strftime", "len", "torch.LongTensor", "torch.zeros", "torch.zeros", "str", "time.gmtime", "time.time"], "function", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.action_test", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.step", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["", "", "def", "testing", "(", "rank", ",", "env", ",", "map_id", ",", "gpu_id", ",", "agent", ",", "n_update", ",", "best_rate", ",", "save_model_index", ",", "start_time", ",", "\n", "writer", ",", "optimizer", ")", ":", "\n", "    ", "evals", "=", "[", "]", "\n", "agent", ".", "model", ".", "eval", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "params", ".", "n_eval", ")", ":", "\n", "        ", "next_obs", "=", "env", ".", "reset", "(", ")", "\n", "instruction", "=", "env", ".", "get_goal_idx", "(", ")", "\n", "\n", "instruction", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "instruction", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "instruction", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "instruction", ")", ")", ".", "cuda", "(", ")", "\n", "agent", ".", "cx", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "agent", ".", "hx", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "", "agent", ".", "eps_len", "=", "0", "\n", "\n", "step", ",", "total_rew", ",", "good", "=", "0", ",", "0", ",", "0", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", ":", "\n", "            ", "obs", "=", "next_obs", "\n", "act", "=", "agent", ".", "action_test", "(", "obs", ",", "instruction", ")", "\n", "\n", "next_obs", ",", "rew", ",", "done", ",", "info", "=", "env", ".", "step", "(", "act", "[", "0", "]", ")", "\n", "total_rew", "+=", "rew", "\n", "\n", "if", "rew", ">=", "1.0", ":", "# success", "\n", "                ", "good", "=", "1", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "evals", ".", "append", "(", "(", "step", ",", "total_rew", ",", "good", ")", ")", "\n", "\n", "", "if", "len", "(", "evals", ")", ">", "0", ":", "\n", "        ", "success", "=", "[", "e", "for", "e", "in", "evals", "if", "e", "[", "2", "]", ">", "0", "]", "\n", "success_rate", "=", "(", "len", "(", "success", ")", "/", "len", "(", "evals", ")", ")", "*", "100", "\n", "\n", "if", "success_rate", ">=", "best_rate", ":", "\n", "            ", "best_rate", "=", "success_rate", "\n", "print", "(", "\"***test rank {}, save {}\"", ".", "format", "(", "rank", ",", "str", "(", "n_update", ")", ")", ")", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "                ", "save_dict", "=", "{", "\n", "'n_update'", ":", "n_update", ",", "\n", "'model_state_dict'", ":", "agent", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'success_rate'", ":", "success_rate", ",", "\n", "}", "\n", "save_path", "=", "params", ".", "weight_dir", "+", "'model'", "+", "str", "(", "n_update", ")", "+", "'.ckpt'", "\n", "torch", ".", "save", "(", "save_dict", ",", "save_path", ")", "\n", "", "save_model_index", "+=", "1", "\n", "\n", "", "avg_reward", "=", "sum", "(", "[", "e", "[", "1", "]", "for", "e", "in", "evals", "]", ")", "/", "len", "(", "evals", ")", "\n", "avg_length", "=", "sum", "(", "[", "e", "[", "0", "]", "for", "e", "in", "evals", "]", ")", "/", "len", "(", "evals", ")", "\n", "msg", "=", "' '", ".", "join", "(", "[", "\n", "\"++++++++++ Task Stats +++++++++++\\n\"", ",", "\n", "\"Time {}\\n\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%dd %Hh %Mm %Ss\"", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", ",", "\n", "\"Episode Played: {:d}\\n\"", ".", "format", "(", "len", "(", "evals", ")", ")", ",", "\n", "\"N_Update = {:d}\\n\"", ".", "format", "(", "n_update", ")", ",", "\n", "\"Map id: {}\\n\"", ".", "format", "(", "map_id", ")", ",", "\n", "\"Avg Reward = {:5.3f}\\n\"", ".", "format", "(", "avg_reward", ")", ",", "\n", "\"Avg Length = {:.3f}\\n\"", ".", "format", "(", "avg_length", ")", ",", "\n", "\"Best rate {:3.2f}, Success rate {:3.2f}%\"", ".", "format", "(", "best_rate", ",", "success_rate", ")", "\n", "]", ")", "\n", "writer", ".", "add_scalar", "(", "'successRate/map {}'", ".", "format", "(", "map_id", ")", ",", "success_rate", "/", "100.", ",", "n_update", ")", "\n", "writer", ".", "add_scalar", "(", "'avgReward/map {}'", ".", "format", "(", "map_id", ")", ",", "avg_reward", ",", "n_update", ")", "\n", "writer", ".", "add_scalar", "(", "'avgLength/map {}'", ".", "format", "(", "map_id", ")", ",", "avg_length", ",", "n_update", ")", "\n", "# print(msg)", "\n", "\n", "", "return", "best_rate", ",", "save_model_index", "\n", "", ""]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.__init__": [[35, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "gpu_id", ",", "goal_storage", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "self", ".", "goal_storage", "=", "goal_storage", "\n", "self", ".", "hx", ",", "self", ".", "cx", "=", "None", ",", "None", "\n", "self", ".", "eps_len", "=", "0", "\n", "self", ".", "values", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "entropies", "=", "[", "]", "\n", "self", ".", "done", "=", "False", "\n", "self", ".", "n_update", "=", "0", "\n", "self", ".", "instruction", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.action_train": [[49, 58], ["agent.preprocess", "agent.run_agent.model", "agent.postprocess", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.preprocess", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.postprocess"], ["", "def", "action_train", "(", "self", ",", "obs", ",", "instruction", ")", ":", "\n", "        ", "state", "=", "preprocess", "(", "obs", ",", "self", ".", "gpu_id", ")", "\n", "\n", "target_preds", ",", "value", ",", "logit", ",", "self", ".", "hx", ",", "self", ".", "cx", "=", "self", ".", "model", "(", "state", ",", "instruction", ",", "self", ".", "hx", ",", "self", ".", "cx", ")", "\n", "\n", "action", ",", "entropy", ",", "log_prob", "=", "postprocess", "(", "logit", ")", "\n", "\n", "self", ".", "eps_len", "+=", "1", "\n", "return", "np", ".", "squeeze", "(", "action", ",", "axis", "=", "0", ")", ",", "entropy", ",", "value", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.action_test": [[59, 70], ["torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "agent.preprocess", "agent.run_agent.model", "torch.softmax", "torch.softmax", "[].data.cpu().numpy", "[].data.cpu", "torch.softmax.max"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.preprocess"], ["", "def", "action_test", "(", "self", ",", "observation", ",", "instruction", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "state", "=", "preprocess", "(", "observation", ",", "self", ".", "gpu_id", ")", "\n", "target_preds", ",", "value", ",", "logit", ",", "self", ".", "hx", ",", "self", ".", "cx", "=", "self", ".", "model", "(", "state", ",", "instruction", ",", "self", ".", "hx", ",", "self", ".", "cx", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "action", "=", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "self", ".", "eps_len", "+=", "1", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.synchronize": [[71, 79], ["torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "agent.run_agent.model.load_state_dict", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "shared_model.state_dict", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "synchronize", "(", "self", ",", "shared_model", ",", "instruction", ")", ":", "\n", "        ", "self", ".", "instruction", "=", "instruction", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "cx", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "hx", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "256", ")", ".", "cuda", "(", ")", ")", "\n", "", "self", ".", "eps_len", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.put_reward": [[80, 85], ["agent.run_agent.rewards.append", "agent.run_agent.entropies.append", "agent.run_agent.values.append", "agent.run_agent.log_probs.append"], "methods", ["None"], ["", "def", "put_reward", "(", "self", ",", "reward", ",", "entropy", ",", "value", ",", "log_prob", ")", ":", "\n", "        ", "self", ".", "rewards", ".", "append", "(", "reward", ")", "\n", "self", ".", "entropies", ".", "append", "(", "entropy", ")", "\n", "self", ".", "values", ".", "append", "(", "value", ")", "\n", "self", ".", "log_probs", ".", "append", "(", "log_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.clear_actions": [[86, 91], ["agent.run_agent.values.clear", "agent.run_agent.log_probs.clear", "agent.run_agent.rewards.clear", "agent.run_agent.entropies.clear"], "methods", ["None"], ["", "def", "clear_actions", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", ".", "clear", "(", ")", "\n", "self", ".", "log_probs", ".", "clear", "(", ")", "\n", "self", ".", "rewards", ".", "clear", "(", ")", "\n", "self", ".", "entropies", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.get_reward_len": [[92, 94], ["len"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["", "def", "get_reward_len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.training_goal_discriminator": [[95, 113], ["agent.run_agent.goal_storage.sample", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "agent.run_agent.model", "target_preds.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cross_entropy", "torch.cross_entropy", "numpy.array", "numpy.array", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "label.cuda.cuda.cuda", "label.cuda.cuda.long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "indices.squeeze"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.sample"], ["", "def", "training_goal_discriminator", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "goal_storage", ".", "sample", "(", "params", ".", "goal_batch_size", ")", "\n", "batch_state", ",", "label", "=", "np", ".", "array", "(", "batch", ".", "goal", ")", ",", "np", ".", "array", "(", "batch", ".", "label", ")", "\n", "\n", "batch_state", "=", "torch", ".", "from_numpy", "(", "batch_state", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "            ", "batch_state", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "batch_state", ")", ")", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "", "target_preds", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "model", "(", "batch_state", ",", "self", ".", "instruction", ",", "self", ".", "hx", ",", "self", ".", "cx", ",", "use_ActorCritic", "=", "False", ")", "\n", "\n", "values", ",", "indices", "=", "target_preds", ".", "max", "(", "1", ")", "\n", "accuracy", "=", "torch", ".", "mean", "(", "(", "indices", ".", "squeeze", "(", ")", "==", "label", ")", ".", "float", "(", ")", ")", "\n", "crossentropy_loss", "=", "F", ".", "cross_entropy", "(", "target_preds", ",", "label", ".", "long", "(", ")", ")", "\n", "\n", "return", "crossentropy_loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.training": [[114, 167], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "agent.run_agent.values.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "reversed", "agent.run_agent.training_goal_discriminator", "shared_optimizer.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.utils.ensure_shared_grads", "shared_optimizer.step", "agent.run_agent.clear_actions", "agent.preprocess", "agent.run_agent.model", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "R.cuda.cuda.cuda", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "gae.cuda.cuda.cuda", "range", "agent.run_agent.model.parameters", "print", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "agent.run_agent.model.load_state_dict", "len", "advantage.pow", "shared_model.state_dict", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.training_goal_discriminator", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.utils.ensure_shared_grads", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.step", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.clear_actions", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.preprocess", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["", "def", "training", "(", "self", ",", "next_obs", ",", "shared_model", ",", "shared_optimizer", ",", "rank", ")", ":", "\n", "        ", "self", ".", "n_update", "+=", "1", "\n", "self", ".", "cx", "=", "Variable", "(", "self", ".", "cx", ".", "data", ")", "\n", "self", ".", "hx", "=", "Variable", "(", "self", ".", "hx", ".", "data", ")", "\n", "\n", "R", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "if", "not", "self", ".", "done", ":", "\n", "            ", "state", "=", "preprocess", "(", "next_obs", ",", "self", ".", "gpu_id", ")", "\n", "target_preds", ",", "value", ",", "logit", ",", "self", ".", "hx", ",", "self", ".", "cx", "=", "self", ".", "model", "(", "state", ",", "self", ".", "instruction", ",", "self", ".", "hx", ",", "self", ".", "cx", ")", "\n", "\n", "R", "=", "value", ".", "data", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "            ", "R", "=", "R", ".", "cuda", "(", ")", "\n", "", "R", "=", "Variable", "(", "R", ")", "\n", "self", ".", "values", ".", "append", "(", "R", ")", "\n", "\n", "policy_loss", "=", "0", "\n", "value_loss", "=", "0", "\n", "gae", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "            ", "gae", "=", "gae", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "self", ".", "rewards", ")", ")", ")", ":", "\n", "            ", "R", "=", "params", ".", "gamma", "*", "R", "+", "self", ".", "rewards", "[", "i", "]", "\n", "advantage", "=", "R", "-", "self", ".", "values", "[", "i", "]", "\n", "value_loss", "=", "value_loss", "+", "advantage", ".", "pow", "(", "2", ")", "# 0.5 *", "\n", "\n", "# Generalized Advantage Estimation", "\n", "delta_t", "=", "params", ".", "gamma", "*", "self", ".", "values", "[", "i", "+", "1", "]", ".", "data", "-", "self", ".", "values", "[", "i", "]", ".", "data", "+", "self", ".", "rewards", "[", "i", "]", "\n", "\n", "gae", "=", "gae", "*", "params", ".", "gamma", "*", "params", ".", "tau", "+", "delta_t", "\n", "\n", "policy_loss", "=", "policy_loss", "-", "self", ".", "log_probs", "[", "i", "]", "*", "Variable", "(", "gae", ")", "-", "params", ".", "entropy_coef", "*", "self", ".", "entropies", "[", "i", "]", "\n", "\n", "", "crossentropy_loss", ",", "accuracy", "=", "self", ".", "training_goal_discriminator", "(", ")", "\n", "\n", "shared_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "policy_loss", "+", "params", ".", "value_loss_coef", "*", "value_loss", "+", "params", ".", "goal_coef", "*", "crossentropy_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "params", ".", "clip_grad_norm", ")", "\n", "ensure_shared_grads", "(", "self", ".", "model", ",", "shared_model", ",", "gpu", "=", "self", ".", "gpu_id", ">=", "0", ")", "\n", "\n", "shared_optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "n_update", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"rank: {}, tr_loss: {}, accuracy: {}\"", ".", "format", "(", "rank", ",", "crossentropy_loss", ".", "data", ",", "accuracy", ")", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "self", ".", "clear_actions", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.preprocess": [[11, 19], ["torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "numpy.concatenate", "torch.cuda.device", "torch.cuda.device", "state.cuda.cuda", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "preprocess", "(", "obs", ",", "gpu_id", ")", ":", "\n", "    ", "state", "=", "np", ".", "concatenate", "(", "[", "obs", "[", "0", "]", ",", "obs", "[", "1", "]", ",", "obs", "[", "2", "]", ",", "obs", "[", "3", "]", "]", ")", "/", "255.", "\n", "state", "=", "torch", ".", "from_numpy", "(", "state", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "state", "=", "state", ".", "cuda", "(", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.postprocess": [[21, 32], ["torch.softmax", "torch.log_softmax", "log_prob.gather.gather", "action.cpu().numpy.cpu().numpy", "F.softmax.multinomial", "torch.autograd.Variable", "action.cpu().numpy.cpu"], "function", ["None"], ["", "def", "postprocess", "(", "logit", ")", ":", "\n", "    ", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "log_prob", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "entropy", "=", "-", "(", "log_prob", "*", "prob", ")", ".", "sum", "(", "1", ")", "\n", "\n", "action", "=", "prob", ".", "multinomial", "(", "1", ")", ".", "data", "\n", "\n", "log_prob", "=", "log_prob", ".", "gather", "(", "1", ",", "Variable", "(", "action", ")", ")", "\n", "action", "=", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "action", ",", "entropy", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.train.run_sim": [[19, 63], ["setproctitle.setproctitle", "torch.manual_seed", "gym.make", "GACE_GDAN.models.GDAN", "GACE_GDAN.agent.run_agent", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "print", "torch.cuda.manual_seed", "torch.cuda.device", "model.cuda.cuda", "train.training", "len", "len"], "function", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.train.training", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["def", "run_sim", "(", "rank", ",", "shared_model", ",", "shared_optimizer", ",", "count", ",", "lock", ",", "goal_storage", ")", ":", "\n", "# Set up logging", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "params", ".", "weight_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./'", "+", "params", ".", "weight_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./log'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./log'", ")", "\n", "\n", "# Change process title", "\n", "", "ptitle", "(", "'Training {}'", ".", "format", "(", "rank", ")", ")", "\n", "\n", "# Set GPU for current instance/process", "\n", "gpu_id", "=", "params", ".", "gpu_ids_train", "[", "rank", "%", "len", "(", "params", ".", "gpu_ids_train", ")", "]", "\n", "\n", "if", "shared_optimizer", "is", "None", ":", "\n", "        ", "print", "(", "\"\\nshared_optimizer is None\\n\"", ")", "\n", "\n", "# Set seed", "\n", "", "torch", ".", "manual_seed", "(", "params", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", ".", "seed", "+", "rank", ")", "\n", "\n", "# Load Vizdoom environment", "\n", "", "map_id", "=", "params", ".", "train_maps", "[", "rank", "%", "len", "(", "params", ".", "train_maps", ")", "]", "\n", "env", "=", "gym", ".", "make", "(", "map_id", ",", "scaled_resolution", "=", "params", ".", "scaled_resolution", ",", "\n", "living_reward", "=", "params", ".", "living_reward", ",", "\n", "goal_reward", "=", "params", ".", "goal_reward", ",", "\n", "non_goal_penalty", "=", "params", ".", "non_goal_penalty", ",", "\n", "timeout_penalty", "=", "params", ".", "timeout_penalty", ",", "\n", "non_goal_break", "=", "params", ".", "non_goal_break", ")", "\n", "\n", "# Initialize model", "\n", "model", "=", "GDAN", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Initialize agent", "\n", "", "agent", "=", "run_agent", "(", "model", ",", "gpu_id", ",", "goal_storage", ")", "\n", "\n", "warmup", "=", "True", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "\n", "        ", "i", "+=", "1", "\n", "warmup", "=", "training", "(", "env", ",", "gpu_id", ",", "shared_model", ",", "agent", ",", "shared_optimizer", ",", "lock", ",", "count", ",", "warmup", ",", "rank", ",", "goal_storage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.train.training": [[65, 115], ["env.reset", "env.get_goal_idx", "torch.from_numpy().view", "agent.synchronize", "agent.model.train", "torch.cuda.device", "torch.autograd.Variable().cuda", "env.step", "torch.from_numpy", "agent.action_train", "agent.put_reward", "numpy.array", "torch.autograd.Variable", "random.randint", "goal_storage.put", "torch.LongTensor", "goal_storage.len", "agent.get_reward_len", "agent.training", "agent.clear_actions"], "function", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.synchronize", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.utils.shared_optim.SharedAdam.step", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.action_train", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.put_reward", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.put", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.get_reward_len", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.train.training", "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.agent.run_agent.clear_actions"], ["", "", "def", "training", "(", "env", ",", "gpu_id", ",", "shared_model", ",", "agent", ",", "optimizer", ",", "lock", ",", "count", ",", "warmup", ",", "rank", ",", "goal_storage", ")", ":", "\n", "\n", "    ", "next_obs", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "next_obs", "\n", "instruction_idx", "=", "env", ".", "get_goal_idx", "(", ")", "# env.get_instruction()", "\n", "instruction", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "instruction_idx", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "        ", "instruction", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "instruction", ")", ")", ".", "cuda", "(", ")", "\n", "", "agent", ".", "synchronize", "(", "shared_model", ",", "instruction", ")", "\n", "agent", ".", "model", ".", "train", "(", ")", "\n", "\n", "num_steps", "=", "0", "\n", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", ":", "\n", "        ", "num_steps", "+=", "1", "\n", "before_obs", "=", "obs", "\n", "obs", "=", "next_obs", "\n", "\n", "if", "warmup", ":", "\n", "            ", "act", "=", "[", "random", ".", "randint", "(", "0", ",", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "act", ",", "entropy", ",", "value", ",", "log_prob", "=", "agent", ".", "action_train", "(", "obs", ",", "instruction", ")", "\n", "\n", "", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "act", "[", "0", "]", ")", "\n", "\n", "if", "not", "warmup", ":", "\n", "            ", "agent", ".", "put_reward", "(", "reward", ",", "entropy", ",", "value", ",", "log_prob", ")", "\n", "\n", "", "if", "done", ":", "\n", "            ", "agent", ".", "done", "=", "True", "\n", "\n", "if", "reward", ">=", "1.0", "and", "num_steps", ">", "1", ":", "# when before_obs is not the same with obs", "\n", "                ", "goal_storage", ".", "put", "(", "before_obs", ",", "instruction_idx", ")", "\n", "\n", "", "if", "warmup", ":", "\n", "                ", "if", "goal_storage", ".", "len", "(", ")", ">", "params", ".", "minimum_warmup", ":", "\n", "                    ", "warmup", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "agent", ".", "get_reward_len", "(", ")", ">", "1", ":", "# Avoid cases of success as soon as start", "\n", "                    ", "with", "lock", ":", "\n", "                        ", "count", ".", "value", "+=", "1", "\n", "", "agent", ".", "training", "(", "next_obs", ",", "shared_model", ",", "optimizer", ",", "rank", ")", "\n", "", "else", ":", "\n", "                    ", "agent", ".", "clear_actions", "(", ")", "\n", "", "break", "\n", "\n", "", "", "", "return", "warmup", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__init__": [[11, 15], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", "=", "100000", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "deque", "(", "maxlen", "=", "self", ".", "capacity", ")", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.put": [[16, 20], ["goal_storage.goal_storage.memory.append", "numpy.concatenate", "Transition"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "state", ",", "label", ")", ":", "\n", "        ", "goal", "=", "np", ".", "concatenate", "(", "[", "state", "[", "0", "]", ",", "state", "[", "1", "]", ",", "state", "[", "2", "]", ",", "state", "[", "3", "]", "]", ")", "/", "255.", "\n", "self", ".", "memory", ".", "append", "(", "Transition", "(", "goal", ",", "label", ")", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.sample": [[21, 24], ["random.sample", "Transition", "zip"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "transitions", "=", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "return", "Transition", "(", "*", "(", "zip", "(", "*", "transitions", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.__len__": [[25, 27], ["goal_storage.goal_storage.len"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len": [[28, 30], ["goal_storage.goal_storage.len"], "methods", ["home.repos.pwc.inspect_result.kibeomkim_gace-gdan.GACE_GDAN.goal_storage.goal_storage.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "", "", ""]]}