{"home.repos.pwc.inspect_result.anasuamitra_ssdcm.None.main.parse_args": [[15, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SS-DCMultiplex'", ")", "\n", "parser", ".", "add_argument", "(", "'--embedder'", ",", "nargs", "=", "'?'", ",", "default", "=", "'SS-DCMultiplex'", ",", "help", "=", "'Which algorithm to use to embed'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'imdbc'", ",", "help", "=", "'Dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--metapaths'", ",", "nargs", "=", "'?'", ",", "help", "=", "'Relational aspects'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--nb_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'Number of iterations for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "35", ",", "help", "=", "'Patience iterations for stopping training'", ")", "\n", "parser", ".", "add_argument", "(", "'--full_run'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Check test performance iteratively during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--hid_units'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Number of hidden units for node representation learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--sc'", ",", "type", "=", "float", ",", "default", "=", "3.0", ",", "help", "=", "'GCN self connection weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of hidden layers for node representation learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--nheads'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of attention heads for layer aggregation'", ")", "\n", "parser", ".", "add_argument", "(", "'--c_hid_units'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Number of hidden units for cluster representation learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--clusters'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Number of clusters; -1 if #Labels else otherwise'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation'", ",", "nargs", "=", "'?'", ",", "default", "=", "'prelu'", ",", "help", "=", "'Activation function for node representation learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--c_activation'", ",", "nargs", "=", "'?'", ",", "default", "=", "'softmax'", ",", "help", "=", "'Activation function for cluster membership learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_prob'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'Dropout probability'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--incl_attr'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'(0/1) Attributed or non-attributed network?'", ")", "\n", "parser", ".", "add_argument", "(", "'--cons'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'(0/1) Learn consensus embeddings or not?'", ")", "\n", "parser", ".", "add_argument", "(", "'--isBias'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'(0/1) Include bias component?'", ")", "\n", "parser", ".", "add_argument", "(", "'--isAttn'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'(0/1) Include attention-based node/cluster representation aggregation?'", ")", "\n", "parser", ".", "add_argument", "(", "'--isSemi'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'(0/1) Include supervision component?'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--reg_coef'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'Regularization co-efficient for discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--sup_coef'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'Semi-Supervision co-efficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--c_assign_coef'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Cluster assignment co-efficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--c_learn_coef'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Cluster learning co-efficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_cross_nw_coef'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Node cross-network regularization co-efficient'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_coef'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'L2 regularization co-efficient'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_num'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Which gpu (#id) to use? -1 if cpu'", ")", "\n", "\n", "return", "parser", ".", "parse_known_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.None.main.printConfig": [[52, 61], ["vars", "print", "print", "args_names.append", "args_vals.append", "getattr"], "function", ["None"], ["", "def", "printConfig", "(", "args", ")", ":", "\n", "    ", "''' Printing command-line arguments '''", "\n", "args_names", "=", "[", "]", "\n", "args_vals", "=", "[", "]", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "args_names", ".", "append", "(", "arg", ")", "\n", "args_vals", ".", "append", "(", "getattr", "(", "args", ",", "arg", ")", ")", "\n", "", "print", "(", "args_names", ")", "\n", "print", "(", "args_vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.None.main.main": [[62, 71], ["main.parse_args", "main.printConfig", "ssdcm", "ssdcm.training"], "function", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.None.main.parse_args", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.None.main.printConfig", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.ssdcm.ssdcm.training"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", ",", "unknown", "=", "parse_args", "(", ")", "\n", "args", ".", "metapaths", "=", "meta_path_dict", "[", "args", ".", "dataset", "]", "\n", "printConfig", "(", "args", ")", "\n", "\n", "from", "models", ".", "ssdcm", "import", "ssdcm", "\n", "model", "=", "ssdcm", "(", "args", ")", "\n", "\n", "model", ".", "training", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.load_data": [[7, 42], ["pickle.load", "[].ravel", "[].ravel", "[].ravel", "list", "range", "open", "data[].astype", "scipy.lil_matrix", "scipy.csr_matrix", "range", "len", "row.extend", "col.extend", "pkl.load.extend", "torch.LongTensor", "list.append", "len", "truefeatures_list.append", "list", "list", "list", "len", "len", "len", "numpy.vstack", "numpy.eye", "rownetworks[].tocoo", "rownetworks[].tocoo", "rownetworks[].tocoo", "numpy.array", "numpy.array"], "function", ["None"], ["def", "load_data", "(", "args", ")", ":", "\n", "    ", "dataset", "=", "args", ".", "dataset", "\n", "metapaths", "=", "args", ".", "metapaths", "\n", "sc", "=", "args", ".", "sc", "\n", "data", "=", "pkl", ".", "load", "(", "open", "(", "'data/{}.pkl'", ".", "format", "(", "dataset", ")", ",", "\"rb\"", ")", ")", "\n", "\n", "label", "=", "data", "[", "'labels'", "]", "\n", "N", "=", "label", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "incl_attr", "==", "1", ":", "\n", "        ", "truefeatures", "=", "data", "[", "'features'", "]", ".", "astype", "(", "float", ")", "\n", "truefeatures", "=", "sp", ".", "lil_matrix", "(", "truefeatures", ")", "\n", "", "rownetworks", "=", "[", "data", "[", "\"layers\"", "]", "[", "metapath", "]", "+", "np", ".", "eye", "(", "N", ")", "*", "sc", "for", "metapath", "in", "metapaths", "]", "\n", "rownetworks", "=", "[", "sp", ".", "csr_matrix", "(", "rownetwork", ")", "for", "rownetwork", "in", "rownetworks", "]", "\n", "idx_train", "=", "data", "[", "\"splits\"", "]", "[", "\"-1\"", "]", "[", "'train_idx'", "]", ".", "ravel", "(", ")", "\n", "idx_val", "=", "data", "[", "\"splits\"", "]", "[", "\"-1\"", "]", "[", "'val_idx'", "]", ".", "ravel", "(", ")", "\n", "idx_test", "=", "data", "[", "\"splits\"", "]", "[", "\"-1\"", "]", "[", "'test_idx'", "]", ".", "ravel", "(", ")", "\n", "\n", "truefeatures_list", "=", "[", "]", "\n", "if", "args", ".", "incl_attr", ":", "\n", "        ", "for", "_", "in", "range", "(", "len", "(", "rownetworks", ")", ")", ":", "\n", "            ", "truefeatures_list", ".", "append", "(", "truefeatures", ")", "\n", "", "", "elif", "not", "args", ".", "incl_attr", ":", "\n", "        ", "truefeatures_list", "=", "rownetworks", "\n", "\n", "", "adj_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rownetworks", ")", ")", ":", "\n", "        ", "row", ",", "col", ",", "data", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "row", ".", "extend", "(", "rownetworks", "[", "i", "]", ".", "tocoo", "(", ")", ".", "row", ")", "\n", "col", ".", "extend", "(", "rownetworks", "[", "i", "]", ".", "tocoo", "(", ")", ".", "col", ")", "\n", "data", ".", "extend", "(", "rownetworks", "[", "i", "]", ".", "tocoo", "(", ")", ".", "data", ")", "\n", "assert", "len", "(", "row", ")", "==", "len", "(", "col", ")", "==", "len", "(", "data", ")", "\n", "c", "=", "torch", ".", "LongTensor", "(", "np", ".", "vstack", "(", "(", "np", ".", "array", "(", "row", ")", ",", "np", ".", "array", "(", "col", ")", ")", ")", ")", "\n", "adj_list", ".", "append", "(", "c", ")", "\n", "\n", "", "return", "rownetworks", ",", "adj_list", ",", "truefeatures_list", ",", "label", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.get_cluster_kernel": [[45, 53], ["list", "scipy.lil_matrix", "sp.lil_matrix.dot", "list.append", "numpy.zeros", "sp.lil_matrix.transpose", "torch.FloatTensor", "WY.dot.todense"], "function", ["None"], ["def", "get_cluster_kernel", "(", "nb_nodes", ",", "nb_classes", ",", "idx_train", ",", "labels", ")", ":", "\n", "    ", "A", "=", "list", "(", ")", "# List of SS-Cluster Kernels for each relation", "\n", "WY", "=", "sp", ".", "lil_matrix", "(", "np", ".", "zeros", "(", "(", "nb_nodes", ",", "nb_classes", ")", ")", ")", "# W is a penalty matrix", "\n", "WY", "[", "idx_train", ",", ":", "]", "=", "labels", "[", "idx_train", ",", ":", "]", "# Filtering out test-label information", "\n", "WYW", "=", "WY", ".", "dot", "(", "WY", ".", "transpose", "(", ")", ")", "# Label similarity kernel based on train-points", "\n", "A", ".", "append", "(", "torch", ".", "FloatTensor", "(", "WYW", ".", "todense", "(", ")", ")", ")", "\n", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.preprocess_features": [[57, 67], ["numpy.array", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.todense", "r_mat_inv.dot.sum", "numpy.errstate", "numpy.power().flatten", "numpy.power", "numpy.isinf", "numpy.isnan"], "function", ["None"], ["", "def", "preprocess_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "        ", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_inv", "[", "np", ".", "isnan", "(", "r_inv", ")", "]", "=", "0.", "\n", "", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "return", "features", ".", "todense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.normalize_adj": [[69, 82], ["scipy.coo_matrix", "numpy.array", "scipy.diags", "sp.coo_matrix.dot", "sp.diags.dot", "d_mat_inv_sqrt.dot.tocoo", "sp.coo_matrix.sum", "numpy.errstate", "numpy.power().flatten", "numpy.power", "numpy.isinf", "numpy.isnan"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ")", ":", "\n", "        ", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_inv_sqrt", "[", "np", ".", "isnan", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "# a = adj.dot(d_mat_inv_sqrt).transpose().dot(d_mat_inv_sqrt)", "\n", "a", "=", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", "\n", "a", "=", "d_mat_inv_sqrt", ".", "dot", "(", "a", ")", "\n", "return", "a", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.sparse_mx_to_torch_sparse_tensor": [[84, 92], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.discriminator.Discriminator.__init__": [[8, 14], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear", "discriminator.Discriminator.modules", "discriminator.Discriminator.weights_init"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "n_h", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f_k", "=", "nn", ".", "Bilinear", "(", "n_h", ",", "n_h", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.discriminator.Discriminator.weights_init": [[15, 20], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Bilinear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.discriminator.Discriminator.forward": [[21, 35], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "discriminator.Discriminator.f_k", "discriminator.Discriminator.f_k"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "c", ",", "h_pl", ",", "h_mi", ",", "s_bias1", "=", "None", ",", "s_bias2", "=", "None", ")", ":", "\n", "        ", "''' We use node specific cluster-based global summary representation with positive and negative local patches,\n         for learning consensus based representation via discriminator based on InfoMax Principle. '''", "\n", "sc_1", "=", "torch", ".", "squeeze", "(", "self", ".", "f_k", "(", "h_pl", ",", "c", ")", ",", "2", ")", "# Positive local + global patch consensus: [(3550 x 64), (64 x 64) x (64 x 3550)]", "\n", "sc_2", "=", "torch", ".", "squeeze", "(", "self", ".", "f_k", "(", "h_mi", ",", "c", ")", ",", "2", ")", "# Negative local + global patch consensus: [(3550 x 64), (64 x 64) x (64 x 3550)]", "\n", "\n", "if", "s_bias1", "is", "not", "None", ":", "\n", "            ", "sc_1", "+=", "s_bias1", "\n", "", "if", "s_bias2", "is", "not", "None", ":", "\n", "            ", "sc_2", "+=", "s_bias2", "\n", "\n", "", "logits", "=", "torch", ".", "cat", "(", "(", "sc_1", ",", "sc_2", ")", ",", "1", ")", "# Concatenation of positive & negative logits", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.avg_discriminator.Discriminator.__init__": [[10, 16], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear", "avg_discriminator.Discriminator.modules", "avg_discriminator.Discriminator.weights_init"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "n_h", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f_k_bilinear", "=", "nn", ".", "Bilinear", "(", "n_h", ",", "n_h", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.avg_discriminator.Discriminator.weights_init": [[17, 22], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Bilinear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.avg_discriminator.Discriminator.forward": [[23, 37], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "c_x.expand_as.expand_as.expand_as", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "avg_discriminator.Discriminator.f_k_bilinear", "avg_discriminator.Discriminator.f_k_bilinear"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "c", ",", "h_pl", ",", "h_mi", ",", "s_bias1", "=", "None", ",", "s_bias2", "=", "None", ")", ":", "\n", "        ", "c_x", "=", "torch", ".", "unsqueeze", "(", "c", ",", "1", ")", "# c: summary vector, h_pl: positive, h_mi: negative", "\n", "c_x", "=", "c_x", ".", "expand_as", "(", "h_pl", ")", "\n", "\n", "sc_1", "=", "torch", ".", "squeeze", "(", "self", ".", "f_k_bilinear", "(", "h_pl", ",", "c_x", ")", ",", "2", ")", "# sc_1 = 1 x nb_nodes", "\n", "sc_2", "=", "torch", ".", "squeeze", "(", "self", ".", "f_k_bilinear", "(", "h_mi", ",", "c_x", ")", ",", "2", ")", "# sc_2 = 1 x nb_nodes", "\n", "\n", "if", "s_bias1", "is", "not", "None", ":", "\n", "            ", "sc_1", "+=", "s_bias1", "\n", "", "if", "s_bias2", "is", "not", "None", ":", "\n", "            ", "sc_2", "+=", "s_bias2", "\n", "", "logits", "=", "torch", ".", "cat", "(", "(", "sc_1", ",", "sc_2", ")", ",", "1", ")", "\n", "\n", "return", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.clustering_layer.CLayer.__init__": [[15, 36], ["torch.Module.__init__", "clustering_layer.CLayer.modules", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "torch.Parameter", "clustering_layer.CLayer.bias_1.data.fill_", "clustering_layer.CLayer.register_parameter", "clustering_layer.CLayer.weights_init", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "out_ft", ",", "c_out_ft", ",", "nb_clus", ",", "act", "=", "'softmax'", ",", "drop_prob", "=", "0.5", ",", "isBias", "=", "False", ")", ":", "\n", "        ", "super", "(", "CLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "act", "==", "'softmax'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "None", "\n", "\n", "# self.fc_3 = nn.Linear(c_out_ft, nb_clus)", "\n", "\n", "", "if", "isBias", ":", "\n", "            ", "self", ".", "bias_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "c_out_ft", ")", ")", "\n", "self", ".", "bias_1", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n", "", "self", ".", "isBias", "=", "isBias", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "# self.reset_parameters()", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.clustering_layer.CLayer.reset_parameters": [[39, 45], ["clustering_layer.CLayer.fc_1.weight.data.uniform_", "math.sqrt", "clustering_layer.CLayer.bias_1.data.uniform_", "clustering_layer.CLayer.fc_1.weight.data.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "fc_1", ".", "weight", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "fc_1", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias_1", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.clustering_layer.CLayer.weights_init": [[46, 51], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.clustering_layer.CLayer.forward": [[52, 62], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "c_rprs.t", "clustering_layer.CLayer.act", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ",", "c_rprs", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "if", "sparse", ":", "\n", "            ", "seq", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "spmm", "(", "torch", ".", "squeeze", "(", "seq", ",", "0", ")", ",", "torch", ".", "squeeze", "(", "c_rprs", ",", "0", ")", ".", "t", "(", ")", ")", ",", "0", ")", "# [1, 3550, 20] = [1, 3550, 64] x [1, 64, 20]", "\n", "", "else", ":", "\n", "            ", "seq", "=", "torch", ".", "bmm", "(", "seq", ",", "c_rprs", ".", "t", "(", ")", ")", "# [1, 3550, 20] = [1, 3550, 64] x [1, 64, 3]", "\n", "\n", "", "if", "self", ".", "isBias", ":", "\n", "            ", "seq", "+=", "self", ".", "bias_1", "\n", "\n", "", "return", "torch", ".", "unsqueeze", "(", "self", ".", "act", "(", "torch", ".", "squeeze", "(", "seq", ",", "0", ")", ")", ",", "0", ")", ",", "c_rprs", "# [1, 3550, 3], [1, 3, 64]", "", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn_res.GCNLayer.__init__": [[14, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "gcn_res.GCNLayer.weights_init", "torch.Parameter", "torch.Parameter", "torch.Parameter", "gcn_res.GCNLayer.bias_1.data.fill_", "gcn_res.GCNLayer.register_parameter", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "in_ft", ",", "out_ft", ",", "act", "=", "'prelu'", ",", "drop_prob", "=", "0.5", ",", "isBias", "=", "False", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_ft", ",", "out_ft", ",", "bias", "=", "False", ")", "\n", "if", "isBias", ":", "\n", "            ", "self", ".", "bias_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_ft", ")", ")", "\n", "self", ".", "bias_1", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "isBias", "=", "isBias", "\n", "if", "act", "==", "'prelu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "None", "\n", "", "self", ".", "residual", "=", "residual", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "self", ".", "res_fc", "=", "nn", ".", "Linear", "(", "in_ft", ",", "out_ft", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "res_fc", "=", "None", "\n", "", "self", ".", "weights_init", "(", ")", "\n", "# self.reset_parameters()", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn_res.GCNLayer.weights_init": [[36, 41], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "gcn_res.GCNLayer.fc.bias.data.fill_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "if", "self", ".", "fc", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "res_fc", ".", "weight", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn_res.GCNLayer.reset_parameters": [[42, 48], ["gcn_res.GCNLayer.fc_1.weight.data.uniform_", "math.sqrt", "gcn_res.GCNLayer.bias_1.data.uniform_", "gcn_res.GCNLayer.fc_1.weight.data.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "fc_1", ".", "weight", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "fc_1", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias_1", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn_res.GCNLayer.forward": [[49, 69], ["torch.dropout", "torch.dropout", "torch.dropout", "gcn_res.GCNLayer.fc", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "gcn_res.GCNLayer.act", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "gcn_res.GCNLayer.res_fc", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "seq", ",", "adj", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "feat", "=", "seq", "\n", "seq", "=", "F", ".", "dropout", "(", "seq", ",", "self", ".", "drop_prob", ",", "training", "=", "self", ".", "training", ")", "\n", "seq", "=", "self", ".", "fc", "(", "seq", ")", "\n", "if", "sparse", ":", "\n", "            ", "seq", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "spmm", "(", "adj", ",", "torch", ".", "squeeze", "(", "seq", ",", "0", ")", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "seq", "=", "torch", ".", "bmm", "(", "adj", ",", "seq", ")", "\n", "", "if", "self", ".", "isBias", ":", "\n", "            ", "seq", "+=", "self", ".", "bias_1", "\n", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "if", "self", ".", "res_fc", "is", "not", "None", ":", "\n", "                ", "resval", "=", "self", ".", "res_fc", "(", "feat", ")", "\n", "seq", "=", "0.2", "*", "resval", "+", "0.8", "*", "seq", "\n", "\n", "", "", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "act", "(", "seq", ")", "\n", "\n", "", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn_res.GCN.__init__": [[71, 83], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gcn_res.GCN.layers.append", "range", "gcn_res.GCN.layers.append", "gcn_res.GCNLayer", "gcn_res.GCN.layers.append", "gcn_res.GCNLayer", "gcn_res.GCNLayer"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ft", ",", "out_ft", ",", "n_layers", "=", "3", ",", "act", "=", "'prelu'", ",", "drop_prob", "=", "0.5", ",", "isBias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "n_layers", ">=", "2", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# input layer self, in_ft, out_ft, act='prelu', drop_prob=0.5, isBias=False", "\n", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "in_ft", ",", "out_ft", ",", "act", ",", "drop_prob", ",", "isBias", ")", ")", "\n", "# hidden layers", "\n", "for", "l", "in", "range", "(", "n_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "out_ft", ",", "out_ft", ",", "act", ",", "drop_prob", ",", "isBias", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "out_ft", ",", "out_ft", ",", "act", "=", "'prelu'", ",", "drop_prob", "=", "0.5", ",", "isBias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn_res.GCN.forward": [[84, 89], ["layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seq", ",", "adj", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "seq", "=", "layer", "(", "seq", ",", "adj", ",", "sparse", ")", "\n", "\n", "", "return", "seq", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn.GCN.__init__": [[14, 34], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "gcn.GCN.modules", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Parameter", "torch.Parameter", "torch.Parameter", "gcn.GCN.bias_1.data.fill_", "gcn.GCN.register_parameter", "gcn.GCN.weights_init", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "in_ft", ",", "out_ft", ",", "n_layers", "=", "1", ",", "act", "=", "'prelu'", ",", "drop_prob", "=", "0.5", ",", "isBias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_1", "=", "nn", ".", "Linear", "(", "in_ft", ",", "out_ft", ",", "bias", "=", "False", ")", "\n", "\n", "if", "act", "==", "'prelu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "None", "\n", "\n", "", "if", "isBias", ":", "\n", "            ", "self", ".", "bias_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_ft", ")", ")", "\n", "self", ".", "bias_1", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n", "", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "isBias", "=", "isBias", "\n", "# self.reset_parameters()", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn.GCN.reset_parameters": [[36, 42], ["gcn.GCN.fc_1.weight.data.uniform_", "math.sqrt", "gcn.GCN.bias_1.data.uniform_", "gcn.GCN.fc_1.weight.data.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# pdb.set_trace()", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "fc_1", ".", "weight", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "fc_1", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias_1", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias_1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn.GCN.weights_init": [[43, 48], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.gcn.GCN.forward": [[49, 65], ["torch.dropout", "torch.dropout", "torch.dropout", "gcn.GCN.fc_1", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "gcn.GCN.act", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ",", "adj", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "seq", "=", "F", ".", "dropout", "(", "seq", ",", "self", ".", "drop_prob", ",", "training", "=", "self", ".", "training", ")", "# Shape of seq: (batch, nodes, features) = (([1, 3550, 2000]))", "\n", "seq", "=", "self", ".", "fc_1", "(", "seq", ")", "# Shape of seq: (batch, nodes, features) = (([1, 3550, 64]))", "\n", "\n", "if", "sparse", ":", "\n", "            ", "seq", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "spmm", "(", "adj", ",", "torch", ".", "squeeze", "(", "seq", ",", "0", ")", ")", ",", "0", ")", "# (1 x [3550, 3550] x [3550, 64] = [1, 3550, 64])", "\n", "", "else", ":", "\n", "            ", "seq", "=", "torch", ".", "bmm", "(", "adj", ",", "seq", ")", "\n", "\n", "", "if", "self", ".", "isBias", ":", "\n", "            ", "seq", "+=", "self", ".", "bias_1", "\n", "\n", "", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "act", "(", "seq", ")", "\n", "\n", "", "return", "seq", "# ([1, 3550, 64])", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.readout.AvgReadout.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AvgReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.readout.AvgReadout.forward": [[12, 14], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seq", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "seq", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.__init__": [[8, 13], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "attention.Attention.weight_init", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.weight_init"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "A", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "hid_units", ",", "1", ")", "for", "_", "in", "range", "(", "args", ".", "nb_graphs", ")", "]", ")", "\n", "self", ".", "weight_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.weight_init": [[14, 18], ["range", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "attention.Attention.A[].bias.data.fill_"], "methods", ["None"], ["", "def", "weight_init", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "A", "[", "i", "]", ".", "weight", ")", "\n", "self", ".", "A", "[", "i", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.forward": [[19, 23], ["attention.Attention.attn_feature", "attention.Attention.attn_feature"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.attn_feature", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.attn_feature"], ["", "", "def", "forward", "(", "self", ",", "feat_pos", ",", "feat_neg", ")", ":", "\n", "        ", "feat_pos", ",", "feat_pos_attn", "=", "self", ".", "attn_feature", "(", "feat_pos", ")", "\n", "feat_neg", ",", "feat_neg_attn", "=", "self", ".", "attn_feature", "(", "feat_neg", ")", "\n", "return", "feat_pos", ",", "feat_neg", ",", "feat_pos_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.attention.Attention.attn_feature": [[24, 34], ["range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.softmax.transpose().contiguous().view", "features.view().sum().unsqueeze.view().sum().unsqueeze.view().sum().unsqueeze", "torch.softmax.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.softmax.transpose().contiguous().view.expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax.transpose().contiguous", "features.view().sum().unsqueeze.view().sum().unsqueeze.view().sum", "features[].squeeze", "torch.softmax.transpose", "features.view().sum().unsqueeze.view().sum().unsqueeze.view"], "methods", ["None"], ["", "def", "attn_feature", "(", "self", ",", "features", ")", ":", "\n", "        ", "features_attn", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "features_attn", ".", "append", "(", "(", "self", ".", "A", "[", "i", "]", "(", "features", "[", "i", "]", ".", "squeeze", "(", ")", ")", ")", ")", "\n", "", "features_attn", "=", "F", ".", "softmax", "(", "torch", ".", "cat", "(", "features_attn", ",", "1", ")", ",", "-", "1", ")", "\n", "features", "=", "torch", ".", "cat", "(", "features", ",", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "features_attn_reshaped", "=", "features_attn", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "features", "=", "features", "*", "features_attn_reshaped", ".", "expand_as", "(", "features", ")", "\n", "features", "=", "features", ".", "view", "(", "self", ".", "args", ".", "nb_graphs", ",", "self", ".", "args", ".", "nb_nodes", ",", "self", ".", "args", ".", "hid_units", ")", ".", "sum", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "features", ",", "features_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.__init__": [[13, 19], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "logreg.LogReg.modules", "logreg.LogReg.weights_init"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "ft_in", ",", "nb_classes", ")", ":", "\n", "        ", "super", "(", "LogReg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "ft_in", ",", "nb_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.weights_init": [[20, 25], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.layers.logreg.LogReg.forward": [[26, 29], ["logreg.LogReg.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ")", ":", "\n", "        ", "ret", "=", "self", ".", "fc", "(", "seq", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.modeler.modeler.__init__": [[18, 44], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "layers.discriminator.Discriminator", "torch.ParameterList", "torch.ParameterList", "range", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "layers.logreg.LogReg().to", "torch.LogSigmoid", "torch.LogSigmoid", "modeler.modeler.init_weight", "modeler.modeler.Z.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "GCN", "layers.clustering_layer.CLayer", "torch.Parameter", "torch.Parameter", "layers.attention.Attention", "layers.logreg.LogReg", "range", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.modeler.modeler.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "modeler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "args", ".", "n_layers", ">=", "2", ":", "\n", "            ", "from", "layers", ".", "gcn_res", "import", "GCN", "\n", "", "else", ":", "\n", "            ", "from", "layers", ".", "gcn", "import", "GCN", "\n", "", "self", ".", "gcn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "GCN", "(", "args", ".", "ft_size", ",", "args", ".", "hid_units", ",", "args", ".", "n_layers", ",", "args", ".", "activation", ",", "args", ".", "drop_prob", ",", "args", ".", "isBias", ")", "for", "_", "in", "range", "(", "args", ".", "nb_graphs", ")", "]", ")", "\n", "\n", "self", ".", "clayer", "=", "nn", ".", "ModuleList", "(", "[", "CLayer", "(", "args", ".", "hid_units", ",", "args", ".", "c_hid_units", ",", "args", ".", "nb_graphs", ",", "args", ".", "c_activation", ",", "args", ".", "drop_prob", ",", "args", ".", "isBias", ")", "for", "_", "in", "range", "(", "args", ".", "nb_graphs", ")", "]", ")", "\n", "\n", "self", ".", "disc", "=", "Discriminator", "(", "args", ".", "hid_units", ")", "\n", "\n", "self", ".", "H", "=", "[", "None", "]", "*", "args", ".", "nb_graphs", "\n", "self", ".", "Z", "=", "nn", ".", "ParameterList", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "self", ".", "Z", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "args", ".", "batch_size", ",", "args", ".", "clusters", ",", "args", ".", "hid_units", ")", ")", ")", "\n", "", "self", ".", "U", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "args", ".", "batch_size", ",", "args", ".", "nb_nodes", ",", "args", ".", "hid_units", ")", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "ModuleList", "(", "[", "Attention", "(", "args", ")", "for", "_", "in", "range", "(", "args", ".", "nheads", ")", "]", ")", "\n", "self", ".", "logistic", "=", "LogReg", "(", "args", ".", "hid_units", ",", "args", ".", "nb_classes", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "self", ".", "act", "=", "nn", ".", "LogSigmoid", "(", ")", "\n", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.modeler.modeler.init_weight": [[45, 49], ["torch.init.xavier_normal_", "torch.init.xavier_normal_", "range", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "U", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "Z", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.modeler.modeler.forward": [[50, 131], ["range", "collections.OrderedDict", "adj[].to", "feature[].to", "shuf[].to", "modeler.modeler.act", "modeler.modeler.disc", "u_1_all.append", "u_2_all.append", "logits.append", "torch.diagflat", "torch.diagflat", "torch.diagflat", "torch.diagflat", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "range", "range", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "modeler.modeler.logistic().squeeze", "sum", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "modeler.modeler.act().mean", "range", "u_1_all_lst.append", "u_2_all_lst.append", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "modeler.modeler.logistic", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze().t", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "modeler.modeler.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "feature", ",", "adj", ",", "shuf", ",", "A", ",", "I", ",", "sparse", ",", "epoch", ",", "msk", ",", "samp_bias1", ",", "samp_bias2", ")", ":", "\n", "        ", "u_1_all", "=", "[", "]", ";", "u_2_all", "=", "[", "]", ";", "h_1_all", "=", "[", "]", ";", "c_1_all", "=", "[", "]", "\n", "logits", "=", "[", "]", ";", "result", "=", "{", "}", ";", "cross_reg_loss", "=", "0.0", "\n", "h1_a_loss", ",", "h1_l_loss", ",", "h1_o_loss", ",", "c1_loss", ",", "u1_loss", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "a", "=", "adj", "[", "i", "]", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "f", "=", "feature", "[", "i", "]", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "sh", "=", "shuf", "[", "i", "]", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "''' Node representation learning. '''", "\n", "u_1", "=", "self", ".", "gcn", "[", "i", "]", "(", "f", ",", "a", ",", "sparse", ")", "\n", "u_2", "=", "self", ".", "gcn", "[", "i", "]", "(", "sh", ",", "a", ",", "sparse", ")", "\n", "''' Cluster representation learning. '''", "\n", "self", ".", "H", "[", "i", "]", ",", "self", ".", "Z", "[", "i", "]", "=", "self", ".", "clayer", "[", "i", "]", "(", "u_1", ",", "self", ".", "Z", "[", "i", "]", ",", "sparse", ")", "\n", "''' Cluster-aware graph summary generation & Pooling. '''", "\n", "s", "=", "self", ".", "act", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "spmm", "(", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "i", "]", ",", "0", ")", ",", "torch", ".", "squeeze", "(", "self", ".", "Z", "[", "i", "]", ",", "0", ")", ")", ",", "0", ")", ")", "\n", "''' Discriminator learning. '''", "\n", "logit", "=", "self", ".", "disc", "(", "s", ",", "u_1", ",", "u_2", ",", "samp_bias1", ",", "samp_bias2", ")", "\n", "\n", "u_1_all", ".", "append", "(", "u_1", ")", ";", "u_2_all", ".", "append", "(", "u_2", ")", "\n", "logits", ".", "append", "(", "logit", ")", "\n", "\n", "D", "=", "torch", ".", "diagflat", "(", "torch", ".", "sum", "(", "A", "[", "0", "]", ",", "dim", "=", "1", ")", ")", "\n", "t_X", "=", "(", "D", "-", "A", "[", "0", "]", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "h1_l_loss", "+=", "torch", ".", "trace", "(", "torch", ".", "spmm", "(", "torch", ".", "spmm", "(", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "i", "]", ",", "0", ")", ".", "t", "(", ")", ",", "t_X", ")", ",", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "i", "]", ",", "0", ")", ")", ")", "\n", "cluster_loss", "=", "(", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "i", "]", ",", "0", ")", "*", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "i", "]", ",", "0", ")", ")", ".", "sum", "(", "1", ")", "# inner product", "\n", "h1_o_loss", "+=", "-", "self", ".", "act", "(", "cluster_loss", ")", ".", "mean", "(", ")", "\n", "# HTH = torch.unsqueeze(torch.spmm(torch.squeeze(self.H[i], 0).t(), torch.squeeze(self.H[i], 0)), 0)", "\n", "# h1_o_loss += ((HTH - I) ** 2).sum()", "\n", "\n", "", "result", "[", "'logits'", "]", "=", "logits", "\n", "result", "[", "'rel_clus_learning_loss'", "]", "=", "h1_l_loss", "\n", "result", "[", "'rel_clus_assignment_loss'", "]", "=", "h1_o_loss", "\n", "\n", "''' Cross-graph node and cluster regularization '''", "\n", "if", "self", ".", "args", ".", "n_cross_nw_coef", "!=", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "                    ", "if", "(", "i", "!=", "j", ")", ":", "\n", "                        ", "cross_reg_loss", "+=", "self", ".", "args", ".", "n_cross_nw_coef", "*", "(", "(", "torch", ".", "squeeze", "(", "u_1_all", "[", "i", "]", ",", "0", ")", "-", "1.0", "*", "torch", ".", "squeeze", "(", "u_1_all", "[", "j", "]", ",", "0", ")", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "cross_reg_loss", "+=", "self", ".", "args", ".", "n_cross_nw_coef", "*", "(", "(", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "i", "]", ",", "0", ")", "-", "1.0", "*", "torch", ".", "squeeze", "(", "self", ".", "H", "[", "j", "]", ",", "0", ")", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "", "", "", "result", "[", "'cross_reg_loss'", "]", "=", "cross_reg_loss", "\n", "\n", "", "if", "self", ".", "args", ".", "isAttn", ":", "\n", "            ", "u_1_all_lst", "=", "[", "]", ";", "u_2_all_lst", "=", "[", "]", "\n", "for", "h_idx", "in", "range", "(", "self", ".", "args", ".", "nheads", ")", ":", "\n", "                ", "u_1_all_", ",", "u_2_all_", ",", "n_attn", "=", "self", ".", "attn", "[", "h_idx", "]", "(", "u_1_all", ",", "u_2_all", ")", "\n", "u_1_all_lst", ".", "append", "(", "u_1_all_", ")", ";", "u_2_all_lst", ".", "append", "(", "u_2_all_", ")", "\n", "", "u_1_comb", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "u_1_all_lst", ",", "0", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "u_2_comb", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "u_2_all_lst", ",", "0", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "u_1_comb", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "u_1_all", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "u_2_comb", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "u_2_all", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "''' Consensus regularization '''", "\n", "if", "self", ".", "args", ".", "cons", ":", "\n", "            ", "pos_reg_loss", "=", "(", "(", "self", ".", "U", "-", "u_1_comb", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "neg_reg_loss", "=", "(", "(", "self", ".", "U", "-", "u_2_comb", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "reg_loss", "=", "pos_reg_loss", "-", "neg_reg_loss", "\n", "result", "[", "'reg_loss'", "]", "=", "reg_loss", "\n", "", "else", ":", "\n", "            ", "pos_reg_loss", "=", "(", "(", "self", ".", "U", "-", "u_1_comb", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "result", "[", "'reg_loss'", "]", "=", "pos_reg_loss", "\n", "\n", "", "''' Incorporating supervision information '''", "\n", "if", "self", ".", "args", ".", "isSemi", ":", "\n", "            ", "semi", "=", "self", ".", "logistic", "(", "self", ".", "U", ")", ".", "squeeze", "(", "0", ")", "\n", "result", "[", "'semi'", "]", "=", "semi", "\n", "\n", "", "''' Logging related information '''", "\n", "loss_dict", "=", "OrderedDict", "(", ")", "\n", "loss_dict", "[", "'rel_clus_assignment_loss'", "]", "=", "result", "[", "'rel_clus_assignment_loss'", "]", "\n", "loss_dict", "[", "'rel_clus_learning_loss'", "]", "=", "result", "[", "'rel_clus_learning_loss'", "]", "\n", "loss_dict", "[", "'logits'", "]", "=", "sum", "(", "result", "[", "'logits'", "]", ")", "/", "self", ".", "args", ".", "nb_graphs", "\n", "loss_dict", "[", "'reg_loss'", "]", "=", "result", "[", "'reg_loss'", "]", "\n", "if", "self", ".", "args", ".", "n_cross_nw_coef", "!=", "0", ":", "\n", "            ", "loss_dict", "[", "'cross_reg_loss'", "]", "=", "result", "[", "'cross_reg_loss'", "]", "\n", "", "if", "self", ".", "args", ".", "isSemi", ":", "\n", "            ", "loss_dict", "[", "'semi'", "]", "=", "result", "[", "'semi'", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.ssdcm.ssdcm.__init__": [[17, 21], ["models.embedder.embedder.__init__"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "''' Initializing class and fetching dataset, model-specific arguments. '''", "\n", "embedder", ".", "__init__", "(", "self", ",", "args", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.ssdcm.ssdcm.writetofile_fn": [[22, 57], ["range", "pandas.DataFrame", "collections.OrderedDict", "range", "results_df.append.append.append", "open", "results_df.append.append.to_csv", "str", "str", "file.tell"], "methods", ["None"], ["", "def", "writetofile_fn", "(", "self", ",", "results", ")", ":", "\n", "        ", "''' Script to dump algorithm performance in results/ folder '''", "\n", "columns", "=", "[", "\"Algorithm\"", ",", "\"Dataset\"", ",", "\"incl_attr\"", ",", "\"cons\"", ",", "\"reg_coef\"", ",", "\"sup_coef\"", ",", "\"c_assign_coef\"", ",", "\n", "\"n_cross_nw_coef\"", ",", "\"l2_coef\"", ",", "\"lr\"", ",", "\"n_layers\"", ",", "\"nheads\"", ",", "\"isSemi\"", ",", "\"isAttn\"", ",", "\"clusters\"", "]", "\n", "result_keys", "=", "[", "\"micro_f1\"", ",", "\"macro_f1\"", ",", "\"nmi\"", ",", "\"nmi_h\"", ",", "\"S@5\"", ",", "\"S@10\"", ",", "\"S@20\"", ",", "\"S@50\"", ",", "\"S@100\"", "]", "\n", "for", "i", "in", "result_keys", ":", "\n", "            ", "columns", "+=", "[", "i", "]", "\n", "", "for", "r", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "name", "=", "\"nmi_h\"", "+", "str", "(", "r", ")", "\n", "columns", "+=", "[", "name", "]", "\n", "", "results_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "columns", ")", "\n", "temp", "=", "OrderedDict", "(", ")", "\n", "temp", "[", "\"Algorithm\"", "]", "=", "self", ".", "args", ".", "embedder", "\n", "temp", "[", "\"Dataset\"", "]", "=", "self", ".", "args", ".", "dataset", "\n", "temp", "[", "\"incl_attr\"", "]", "=", "self", ".", "args", ".", "incl_attr", "\n", "temp", "[", "\"cons\"", "]", "=", "self", ".", "args", ".", "cons", "\n", "temp", "[", "\"reg_coef\"", "]", "=", "self", ".", "args", ".", "reg_coef", "\n", "temp", "[", "\"sup_coef\"", "]", "=", "self", ".", "args", ".", "sup_coef", "\n", "temp", "[", "\"c_assign_coef\"", "]", "=", "self", ".", "args", ".", "c_assign_coef", "\n", "temp", "[", "\"n_cross_nw_coef\"", "]", "=", "self", ".", "args", ".", "n_cross_nw_coef", "\n", "temp", "[", "\"l2_coef\"", "]", "=", "self", ".", "args", ".", "l2_coef", "\n", "temp", "[", "\"lr\"", "]", "=", "self", ".", "args", ".", "lr", "\n", "temp", "[", "\"n_layers\"", "]", "=", "self", ".", "args", ".", "n_layers", "\n", "temp", "[", "\"nheads\"", "]", "=", "self", ".", "args", ".", "nheads", "\n", "temp", "[", "\"isSemi\"", "]", "=", "self", ".", "args", ".", "isSemi", "\n", "temp", "[", "\"isAttn\"", "]", "=", "self", ".", "args", ".", "isAttn", "\n", "temp", "[", "\"clusters\"", "]", "=", "self", ".", "args", ".", "clusters", "\n", "for", "i", "in", "result_keys", ":", "\n", "            ", "temp", "[", "i", "]", "=", "results", "[", "i", "]", "\n", "", "for", "r", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "name", "=", "\"nmi_h\"", "+", "str", "(", "r", ")", "\n", "temp", "[", "name", "]", "=", "results", "[", "name", "]", "\n", "", "results_df", "=", "results_df", ".", "append", "(", "temp", ",", "ignore_index", "=", "True", ")", "\n", "with", "open", "(", "\"results/\"", "+", "self", ".", "args", ".", "embedder", "+", "\"_\"", "+", "self", ".", "args", ".", "dataset", "+", "\".csv\"", ",", "'a'", ")", "as", "file", ":", "\n", "            ", "results_df", ".", "to_csv", "(", "file", ",", "index", "=", "False", ",", "header", "=", "file", ".", "tell", "(", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.ssdcm.ssdcm.training": [[58, 194], ["models.modeler.modeler", "torch.load.to", "torch.load.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.BCEWithLogitsLoss().to", "torch.BCEWithLogitsLoss().to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "dict", "range", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.eval", "torch.load.eval", "print", "range", "torch.load.U.data.detach", "torch.load.U.data.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "evaluate", "print", "ssdcm.ssdcm.writetofile_fn", "torch.load.parameters", "torch.load.parameters", "torch.load.train", "torch.load.train", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "numpy.random.permutation", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.load.", "torch.load.", "enumerate", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "loss.detach", "h_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss().to.", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "print", "torch.load.H[].data.detach", "torch.load.H[].data.detach", "max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.BCEWithLogitsLoss().to.", "torch.BCEWithLogitsLoss().to.", "torch.load.eval", "torch.load.eval", "tmp_best.items", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.load.U.data.detach", "torch.load.U.data.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "evaluate", "torch.load.train", "torch.load.train", "h_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "evaluate", "torch.load.train", "torch.load.train", "torch.load.H[].data.detach", "torch.load.H[].data.detach", "max", "tmp_best.items"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.evaluate", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.ssdcm.ssdcm.writetofile_fn", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.evaluate", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.evaluate"], ["", "", "def", "training", "(", "self", ")", ":", "\n", "        ", "''' Build all the components of the architecture and initialize its parameters. '''", "\n", "model", "=", "modeler", "(", "self", ".", "args", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "''' Printing all the valid parameters of the constructed architecture. '''", "\n", "# for name, param in model.named_parameters():", "\n", "#     if param.requires_grad:", "\n", "#         print(name, param.data, param.data.shape, param.device)", "\n", "\n", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "weight_decay", "=", "self", ".", "args", ".", "l2_coef", ")", "# Initialize training method", "\n", "cnt_wait", "=", "0", ";", "best", "=", "1e14", "# Train stopping criteria", "\n", "b_xent", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "# Discriminator Loss", "\n", "xent", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "# SSL Loss", "\n", "best_results", "=", "dict", "(", ")", ";", "best_count", "=", "0", ";", "best_sup", "=", "None", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "nb_epochs", ")", ":", "\n", "            ", "xent_loss", "=", "None", "\n", "model", ".", "train", "(", ")", "# Tell PyTorch that we are training through model object.", "\n", "optimiser", ".", "zero_grad", "(", ")", "# Reset gradients.", "\n", "\n", "''' SHuffling attributes to generate negative local patches. '''", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "args", ".", "nb_nodes", ")", "\n", "shuf", "=", "[", "feature", "[", ":", ",", "idx", ",", ":", "]", "for", "feature", "in", "self", ".", "features", "]", "\n", "\n", "lbl_1", "=", "torch", ".", "ones", "(", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "nb_nodes", ")", "# Positive labels for samples", "\n", "lbl_2", "=", "torch", ".", "zeros", "(", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "nb_nodes", ")", "# Negative labels for samples", "\n", "lbl", "=", "torch", ".", "cat", "(", "(", "lbl_1", ",", "lbl_2", ")", ",", "1", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "result", "=", "model", "(", "self", ".", "features", ",", "self", ".", "adj", ",", "shuf", ",", "self", ".", "A", ",", "self", ".", "I", ",", "self", ".", "args", ".", "sparse", ",", "epoch", ",", "None", ",", "None", ",", "None", ")", "\n", "\n", "logits", "=", "result", "[", "'logits'", "]", "\n", "for", "view_idx", ",", "logit", "in", "enumerate", "(", "logits", ")", ":", "\n", "                ", "if", "xent_loss", "is", "None", ":", "\n", "                    ", "xent_loss", "=", "b_xent", "(", "logit", ",", "lbl", ")", "\n", "", "else", ":", "\n", "                    ", "xent_loss", "+=", "b_xent", "(", "logit", ",", "lbl", ")", "\n", "", "", "''' Discriminator based loss. '''", "\n", "loss", "=", "xent_loss", "\n", "''' Consensus regularization loss. '''", "\n", "reg_loss", "=", "result", "[", "'reg_loss'", "]", "\n", "loss", "+=", "self", ".", "args", ".", "reg_coef", "*", "reg_loss", "\n", "\n", "''' Relation specific clustering loss. '''", "\n", "rel_clus_loss", ",", "rel_learn_loss", "=", "result", "[", "'rel_clus_assignment_loss'", "]", ",", "result", "[", "'rel_clus_learning_loss'", "]", "\n", "loss", "+=", "self", ".", "args", ".", "c_assign_coef", "*", "(", "rel_clus_loss", ")", "+", "self", ".", "args", ".", "c_learn_coef", "*", "rel_learn_loss", "\n", "if", "self", ".", "args", ".", "n_cross_nw_coef", "!=", "0", ":", "\n", "                ", "cross_reg_loss", "=", "result", "[", "'cross_reg_loss'", "]", "\n", "loss", "+=", "cross_reg_loss", "\n", "\n", "", "''' Supervision loss. '''", "\n", "if", "self", ".", "args", ".", "isSemi", ":", "\n", "                ", "sup", "=", "result", "[", "'semi'", "]", "\n", "semi_loss", "=", "xent", "(", "sup", "[", "self", ".", "idx_train", "]", ",", "self", ".", "train_lbls", ")", "\n", "loss", "=", "loss", "+", "self", ".", "args", ".", "sup_coef", "*", "semi_loss", "\n", "\n", "", "''' Minimum loss based on near-perfect reconstruction. '''", "\n", "if", "loss", "<", "best", ":", "\n", "                ", "best", "=", "loss", "\n", "cnt_wait", "=", "0", "\n", "best_sup", "=", "sup", "\n", "torch", ".", "save", "(", "model", ",", "'saved_model/best_{}_{}_{}_{}_{}_{}_{}_{}.pkl'", ".", "format", "(", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "embedder", ",", "\n", "self", ".", "args", ".", "reg_coef", ",", "self", ".", "args", ".", "sup_coef", ",", "\n", "self", ".", "args", ".", "c_assign_coef", ",", "self", ".", "args", ".", "lr", ",", "\n", "self", ".", "args", ".", "l2_coef", ",", "self", ".", "args", ".", "clusters", ")", ")", "\n", "if", "self", ".", "args", ".", "full_run", ":", "\n", "# print(epoch)", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "h_list", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "                            ", "h_list", ".", "append", "(", "model", ".", "H", "[", "r", "]", ".", "data", ".", "detach", "(", ")", ")", "\n", "", "u", "=", "model", ".", "U", ".", "data", ".", "detach", "(", ")", "\n", "h", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "h_list", ")", ",", "0", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "dataset", "in", "[", "'imdbl'", "]", ":", "\n", "                        ", "from", "evaluation", ".", "evaluate_ml", "import", "evaluate", "# evaluation multi-label", "\n", "", "else", ":", "\n", "                        ", "from", "evaluation", ".", "evaluate_mc", "import", "evaluate", "# evaluation multi-class", "\n", "\n", "", "if", "epoch", "==", "0", ":", "\n", "                        ", "results", "=", "evaluate", "(", "u", ",", "h", ",", "h_list", ",", "best_sup", ",", "self", ".", "idx_train", ",", "self", ".", "idx_val", ",", "self", ".", "idx_test", ",", "self", ".", "labels", ",", "\n", "self", ".", "args", ".", "clusters", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "embedder", ",", "self", ".", "args", ".", "device", ")", "\n", "best_results", "=", "results", "\n", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "                        ", "if", "(", "best_count", ")", "%", "5", "==", "0", ":", "\n", "                            ", "tmp_best", "=", "best_results", "\n", "results", "=", "evaluate", "(", "u", ",", "h", ",", "h_list", ",", "best_sup", ",", "self", ".", "idx_train", ",", "self", ".", "idx_val", ",", "self", ".", "idx_test", ",", "self", ".", "labels", ",", "\n", "self", ".", "args", ".", "clusters", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "embedder", ",", "self", ".", "args", ".", "device", ")", "\n", "best_results", "=", "{", "key", ":", "max", "(", "value", ",", "results", "[", "key", "]", ")", "for", "key", ",", "value", "in", "tmp_best", ".", "items", "(", ")", "}", "\n", "model", ".", "train", "(", ")", "\n", "", "", "best_count", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "cnt_wait", "+=", "1", "\n", "\n", "", "if", "(", "epoch", ")", "%", "125", "==", "0", ":", "\n", "                ", "print", "(", "\"-----------------------------------------------------------------------\"", ")", "\n", "print", "(", "\"Epoch: \"", ",", "epoch", ",", "\"\\tResult: \"", ",", "best_results", ")", "\n", "print", "(", "\"-----------------------------------------------------------------------\"", ")", "\n", "\n", "", "''' Stopping criteria for train iterations. '''", "\n", "if", "cnt_wait", "==", "self", ".", "args", ".", "patience", ":", "\n", "                ", "break", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "loss", ".", "detach", "(", ")", "\n", "\n", "", "model", "=", "torch", ".", "load", "(", "'saved_model/best_{}_{}_{}_{}_{}_{}_{}_{}.pkl'", ".", "format", "(", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "embedder", ",", "\n", "self", ".", "args", ".", "reg_coef", ",", "self", ".", "args", ".", "sup_coef", ",", "self", ".", "args", ".", "c_assign_coef", ",", "self", ".", "args", ".", "lr", ",", "self", ".", "args", ".", "l2_coef", ",", "self", ".", "args", ".", "clusters", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "dataset", "in", "[", "'imdbl'", "]", ":", "\n", "            ", "from", "evaluation", ".", "evaluate_ml", "import", "evaluate", "# evaluation multi-label", "\n", "", "else", ":", "\n", "            ", "from", "evaluation", ".", "evaluate_mc", "import", "evaluate", "# evaluation multi-class", "\n", "\n", "", "print", "(", "\"Completed\"", ")", "\n", "\n", "h_list", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "self", ".", "args", ".", "nb_graphs", ")", ":", "\n", "            ", "h_list", ".", "append", "(", "model", ".", "H", "[", "r", "]", ".", "data", ".", "detach", "(", ")", ")", "\n", "", "u", "=", "model", ".", "U", ".", "data", ".", "detach", "(", ")", "\n", "h", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "h_list", ")", ",", "0", ")", "\n", "results", "=", "evaluate", "(", "u", ",", "h", ",", "h_list", ",", "best_sup", ",", "self", ".", "idx_train", ",", "self", ".", "idx_val", ",", "\n", "self", ".", "idx_test", ",", "self", ".", "labels", ",", "\n", "self", ".", "args", ".", "clusters", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "embedder", ",", "self", ".", "args", ".", "device", ")", "\n", "\n", "if", "self", ".", "args", ".", "full_run", ":", "\n", "            ", "tmp_best", "=", "best_results", "\n", "best_results", "=", "{", "key", ":", "max", "(", "value", ",", "results", "[", "key", "]", ")", "for", "key", ",", "value", "in", "tmp_best", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "best_results", "=", "results", "\n", "\n", "", "print", "(", "best_results", ")", "\n", "self", ".", "writetofile_fn", "(", "best_results", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.models.embedder.embedder.__init__": [[15, 51], ["args.metapaths.split", "utils.data_utils.load_data", "range", "len", "utils.data_utils.get_cluster_kernel", "torch.eye().reshape().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.device", "utils.data_utils.preprocess_features", "utils.data_utils.normalize_adj", "len", "adj_list[].to", "utils.data_utils.sparse_mx_to_torch_sparse_tensor", "torch.FloatTensor", "torch.eye().reshape", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cuda.is_available", "str", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.load_data", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.get_cluster_kernel", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.preprocess_features", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.normalize_adj", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.utils.data_utils.sparse_mx_to_torch_sparse_tensor"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "args", ".", "batch_size", "=", "1", "\n", "args", ".", "sparse", "=", "True", "\n", "args", ".", "metapaths", "=", "args", ".", "metapaths", ".", "split", "(", "\",\"", ")", "\n", "if", "args", ".", "gpu_num", "==", "-", "1", ":", "\n", "            ", "args", ".", "device", "=", "'cpu'", "\n", "", "else", ":", "\n", "            ", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu_num", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "", "adj", ",", "adj_list", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "data_utils", ".", "load_data", "(", "args", ")", "\n", "features", "=", "[", "data_utils", ".", "preprocess_features", "(", "feature", ")", "for", "feature", "in", "features", "]", "\n", "adj", "=", "[", "data_utils", ".", "normalize_adj", "(", "adj_", ")", "for", "adj_", "in", "adj", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "adj", ")", ")", ":", "\n", "            ", "adj_list", "[", "i", "]", "=", "adj_list", "[", "i", "]", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "", "args", ".", "nb_nodes", "=", "features", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "args", ".", "ft_size", "=", "features", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "args", ".", "nb_classes", "=", "labels", ".", "shape", "[", "1", "]", "\n", "args", ".", "nb_graphs", "=", "len", "(", "adj", ")", "\n", "if", "args", ".", "clusters", "==", "-", "1", ":", "\n", "            ", "args", ".", "clusters", "=", "args", ".", "labels", "\n", "", "''' Get cluster kernel and identity(k) matrix. '''", "\n", "self", ".", "A", "=", "data_utils", ".", "get_cluster_kernel", "(", "args", ".", "nb_nodes", ",", "args", ".", "nb_classes", ",", "idx_train", ",", "labels", ")", "\n", "self", ".", "I", "=", "torch", ".", "eye", "(", "args", ".", "clusters", ")", ".", "reshape", "(", "(", "1", ",", "args", ".", "clusters", ",", "args", ".", "clusters", ")", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "self", ".", "adj", "=", "[", "data_utils", ".", "sparse_mx_to_torch_sparse_tensor", "(", "adj_", ")", "for", "adj_", "in", "adj", "]", "# Shape: (batch, nodes, nodes) = (([1, 3550, 3550]))", "\n", "self", ".", "features", "=", "[", "torch", ".", "FloatTensor", "(", "feature", "[", "np", ".", "newaxis", "]", ")", "for", "feature", "in", "features", "]", "# Shape: (batch, nodes, features) = (([1, 3550, 2000]))", "\n", "self", ".", "labels", "=", "torch", ".", "FloatTensor", "(", "labels", "[", "np", ".", "newaxis", "]", ")", ".", "to", "(", "args", ".", "device", ")", "# Shape: (batch, nodes, labels) = (([1, 3550, 3]))", "\n", "self", ".", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "self", ".", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "self", ".", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "self", ".", "train_lbls", "=", "torch", ".", "argmax", "(", "self", ".", "labels", "[", "0", ",", "self", ".", "idx_train", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "val_lbls", "=", "torch", ".", "argmax", "(", "self", ".", "labels", "[", "0", ",", "self", ".", "idx_val", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "test_lbls", "=", "torch", ".", "argmax", "(", "self", ".", "labels", "[", "0", ",", "self", ".", "idx_test", "]", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "args", "=", "args", "", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.purity_score": [[24, 34], ["numpy.zeros", "numpy.unique", "numpy.concatenate", "numpy.unique", "sklearn.metrics.accuracy_score", "numpy.histogram", "numpy.argmax", "numpy.max"], "function", ["None"], ["def", "purity_score", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_labeled_voted", "=", "np", ".", "zeros", "(", "y_true", ".", "shape", ")", "\n", "labels", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "bins", "=", "np", ".", "concatenate", "(", "(", "labels", ",", "[", "np", ".", "max", "(", "labels", ")", "+", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "for", "cluster", "in", "np", ".", "unique", "(", "y_pred", ")", ":", "\n", "        ", "hist", ",", "_", "=", "np", ".", "histogram", "(", "y_true", "[", "y_pred", "==", "cluster", "]", ",", "bins", "=", "bins", ")", "\n", "winner", "=", "np", ".", "argmax", "(", "hist", ")", "\n", "y_labeled_voted", "[", "y_pred", "==", "cluster", "]", "=", "winner", "\n", "", "return", "accuracy_score", "(", "y_true", ",", "y_labeled_voted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.construct_indicator": [[35, 44], ["numpy.sum", "numpy.fliplr", "numpy.zeros_like", "range", "numpy.argsort", "range"], "function", ["None"], ["", "def", "construct_indicator", "(", "y_score", ",", "y", ")", ":", "\n", "# rank the labels by the scores directly", "\n", "    ", "num_label", "=", "np", ".", "sum", "(", "y", ",", "axis", "=", "1", ",", "dtype", "=", "np", ".", "int", ")", "\n", "y_sort", "=", "np", ".", "fliplr", "(", "np", ".", "argsort", "(", "y_score", ",", "axis", "=", "1", ")", ")", "\n", "y_pred", "=", "np", ".", "zeros_like", "(", "y", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_label", "[", "i", "]", ")", ":", "\n", "            ", "y_pred", "[", "i", ",", "y_sort", "[", "i", ",", "j", "]", "]", "=", "1", "\n", "", "", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.evaluate": [[45, 143], ["collections.OrderedDict", "torch.BCEWithLogitsLoss", "val_lbls.detach().cpu().numpy.detach().cpu().numpy", "np.array.detach().cpu().numpy", "test_cluster_probs.detach().cpu().numpy.reshape", "test_cluster_probs.detach().cpu().numpy.detach().cpu().numpy", "range", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.array", "numpy.array", "evaluate_ml.run_cmeans", "evaluate_ml.run_cmeans_h", "range", "evaluate_ml.run_similarity_search", "range", "len", "tmp_cluster_probs.reshape.reshape", "tmp_cluster_probs.reshape.detach().cpu().numpy", "range", "val_accs.index", "accs.append", "val_macro_f1s.index", "macro_f1s.append", "macro_f1s_val.append", "val_micro_f1s.index", "micro_f1s.append", "np.array.cpu", "len", "evaluate_ml.run_cmeans_h", "len", "val_lbls.detach().cpu().numpy.detach().cpu", "np.array.detach().cpu", "test_cluster_probs.detach().cpu().numpy.detach().cpu", "range", "max", "max", "max", "str", "tmp_cluster_probs.reshape.detach().cpu", "evaluate_ml.construct_indicator", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "val_accs.append", "val_macro_f1s.append", "val_micro_f1s.append", "evaluate_ml.construct_indicator", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "test_accs.append", "test_macro_f1s.append", "test_micro_f1s.append", "val_lbls.detach().cpu().numpy.detach", "np.array.detach", "test_cluster_probs.detach().cpu().numpy.detach", "logits.detach().cpu().numpy", "val_acc.item", "logits.detach().cpu().numpy", "numpy.sum", "test_acc.item", "tmp_cluster_probs.reshape.detach", "numpy.sum", "logits.detach().cpu", "logits.detach().cpu", "logits.detach", "logits.detach"], "function", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.run_cmeans", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.run_cmeans_h", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_similarity_search", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.run_cmeans_h", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.construct_indicator", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.construct_indicator"], ["", "def", "evaluate", "(", "embeds", ",", "cluster_probs", ",", "cluster_prob_list", ",", "sup", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "labels", ",", "clusters", ",", "dataset", ",", "algorithm", ",", "device", ",", "isTest", "=", "True", ")", ":", "\n", "    ", "results", "=", "OrderedDict", "(", ")", "\n", "hid_units", "=", "embeds", ".", "shape", "[", "2", "]", "\n", "nb_classes", "=", "labels", ".", "shape", "[", "2", "]", "\n", "xent", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "train_embs", "=", "embeds", "[", "0", ",", "idx_train", "]", "\n", "val_embs", "=", "embeds", "[", "0", ",", "idx_val", "]", "\n", "test_embs", "=", "embeds", "[", "0", ",", "idx_test", "]", "\n", "\n", "train_lbls", "=", "labels", "[", "0", ",", "idx_train", "]", "\n", "val_lbls", "=", "labels", "[", "0", ",", "idx_val", "]", "\n", "test_lbls", "=", "labels", "[", "0", ",", "idx_test", "]", "\n", "val_lbls", "=", "val_lbls", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_lbls", "=", "test_lbls", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_cluster_probs", "=", "cluster_probs", "[", "0", ",", "idx_test", "]", "\n", "test_cluster_probs", "=", "test_cluster_probs", ".", "reshape", "(", "(", "test_cluster_probs", ".", "shape", "[", "0", "]", ",", "clusters", ")", ")", "\n", "test_cluster_probs", "=", "test_cluster_probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "r", "in", "range", "(", "len", "(", "cluster_prob_list", ")", ")", ":", "\n", "        ", "tmp_cluster_probs", "=", "cluster_prob_list", "[", "r", "]", "[", "0", ",", "idx_test", "]", "\n", "tmp_cluster_probs", "=", "tmp_cluster_probs", ".", "reshape", "(", "(", "tmp_cluster_probs", ".", "shape", "[", "0", "]", ",", "clusters", ")", ")", "\n", "cluster_prob_list", "[", "r", "]", "=", "tmp_cluster_probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "accs", "=", "[", "]", "\n", "micro_f1s", "=", "[", "]", "\n", "macro_f1s", "=", "[", "]", "\n", "macro_f1s_val", "=", "[", "]", "##", "\n", "if", "sup", "is", "not", "None", ":", "\n", "        ", "for", "_", "in", "range", "(", "1", ")", ":", "\n", "#log = LogReg(hid_units, nb_classes)", "\n", "#opt = torch.optim.Adam(log.parameters(), lr=0.01, weight_decay=0.0)", "\n", "#log.to(device)", "\n", "\n", "            ", "val_accs", "=", "[", "]", ";", "test_accs", "=", "[", "]", "\n", "val_micro_f1s", "=", "[", "]", ";", "test_micro_f1s", "=", "[", "]", "\n", "val_macro_f1s", "=", "[", "]", ";", "test_macro_f1s", "=", "[", "]", "\n", "for", "iter_", "in", "range", "(", "1", ")", ":", "\n", "# train", "\n", "#log.train()", "\n", "#opt.zero_grad()", "\n", "\n", "#logits = log(train_embs)", "\n", "#loss = xent(logits, train_lbls)", "\n", "\n", "#loss.backward()", "\n", "#opt.step()", "\n", "\n", "# val", "\n", "                ", "logits", "=", "sup", "[", "idx_val", "]", "# log(val_embs)", "\n", "preds", "=", "construct_indicator", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "val_lbls", ")", "\n", "val_acc", "=", "np", ".", "sum", "(", "preds", "==", "val_lbls", ")", "*", "1.0", "/", "val_lbls", ".", "shape", "[", "0", "]", "\n", "val_f1_macro", "=", "f1_score", "(", "val_lbls", ",", "preds", ",", "average", "=", "'macro'", ")", "\n", "val_f1_micro", "=", "f1_score", "(", "val_lbls", ",", "preds", ",", "average", "=", "'micro'", ")", "\n", "\n", "val_accs", ".", "append", "(", "val_acc", ".", "item", "(", ")", ")", "\n", "val_macro_f1s", ".", "append", "(", "val_f1_macro", ")", "\n", "val_micro_f1s", ".", "append", "(", "val_f1_micro", ")", "\n", "\n", "# test", "\n", "logits", "=", "sup", "[", "idx_test", "]", "#log(test_embs)", "\n", "preds", "=", "construct_indicator", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "test_lbls", ")", "\n", "\n", "test_acc", "=", "np", ".", "sum", "(", "preds", "==", "test_lbls", ")", "/", "test_lbls", ".", "shape", "[", "0", "]", "\n", "test_f1_macro", "=", "f1_score", "(", "test_lbls", ",", "preds", ",", "average", "=", "'macro'", ")", "\n", "test_f1_micro", "=", "f1_score", "(", "test_lbls", ",", "preds", ",", "average", "=", "'micro'", ")", "\n", "\n", "test_accs", ".", "append", "(", "test_acc", ".", "item", "(", ")", ")", "\n", "test_macro_f1s", ".", "append", "(", "test_f1_macro", ")", "\n", "test_micro_f1s", ".", "append", "(", "test_f1_micro", ")", "\n", "\n", "\n", "", "", "max_iter", "=", "val_accs", ".", "index", "(", "max", "(", "val_accs", ")", ")", "\n", "accs", ".", "append", "(", "test_accs", "[", "max_iter", "]", ")", "\n", "\n", "max_iter", "=", "val_macro_f1s", ".", "index", "(", "max", "(", "val_macro_f1s", ")", ")", "\n", "macro_f1s", ".", "append", "(", "test_macro_f1s", "[", "max_iter", "]", ")", "\n", "macro_f1s_val", ".", "append", "(", "val_macro_f1s", "[", "max_iter", "]", ")", "###", "\n", "\n", "max_iter", "=", "val_micro_f1s", ".", "index", "(", "max", "(", "val_micro_f1s", ")", ")", "\n", "micro_f1s", ".", "append", "(", "test_micro_f1s", "[", "max_iter", "]", ")", "\n", "\n", "", "results", "[", "\"micro_f1\"", "]", "=", "np", ".", "mean", "(", "micro_f1s", ")", "\n", "results", "[", "\"micro_f1_std\"", "]", "=", "np", ".", "std", "(", "micro_f1s", ")", "\n", "results", "[", "\"macro_f1\"", "]", "=", "np", ".", "mean", "(", "macro_f1s", ")", "\n", "results", "[", "\"macro_f1_std\"", "]", "=", "np", ".", "std", "(", "macro_f1s", ")", "\n", "\n", "test_embs", "=", "np", ".", "array", "(", "test_embs", ".", "cpu", "(", ")", ")", "\n", "test_lbls", "=", "np", ".", "array", "(", "test_lbls", ")", "\n", "results", "[", "\"nmi\"", "]", "=", "run_cmeans", "(", "test_embs", ",", "test_lbls", ",", "clusters", ",", "nb_classes", ",", "dataset", ",", "algorithm", ")", "\n", "results", "[", "\"nmi_h\"", "]", "=", "run_cmeans_h", "(", "test_cluster_probs", ",", "test_lbls", ",", "clusters", ",", "nb_classes", ",", "dataset", ",", "algorithm", ")", "\n", "for", "r", "in", "range", "(", "len", "(", "cluster_prob_list", ")", ")", ":", "\n", "        ", "name", "=", "\"nmi_h\"", "+", "str", "(", "r", ")", "\n", "results", "[", "name", "]", "=", "run_cmeans_h", "(", "cluster_prob_list", "[", "r", "]", ",", "test_lbls", ",", "clusters", ",", "nb_classes", ",", "dataset", ",", "algorithm", ")", "\n", "", "st", "=", "run_similarity_search", "(", "test_embs", ",", "test_lbls", ")", "\n", "cols", "=", "[", "\"S@5\"", ",", "\"S@10\"", ",", "\"S@20\"", ",", "\"S@50\"", ",", "\"S@100\"", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cols", ")", ")", ":", "\n", "        ", "results", "[", "cols", "[", "i", "]", "]", "=", "st", "[", "i", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.run_similarity_search": [[144, 161], ["sklearn.metrics.pairwise.cosine_similarity", "numpy.eye", "list", "range", "st.append", "numpy.argsort", "range", "list.append", "str", "scipy.spatial.distance.jaccard", "numpy.round", "numpy.mean"], "function", ["None"], ["", "def", "run_similarity_search", "(", "test_embs", ",", "test_lbls", ")", ":", "\n", "    ", "numRows", "=", "test_embs", ".", "shape", "[", "0", "]", "\n", "cos_sim_array", "=", "pairwise", ".", "cosine_similarity", "(", "test_embs", ")", "-", "np", ".", "eye", "(", "numRows", ")", "\n", "st", "=", "[", "]", "\n", "for", "N", "in", "[", "5", ",", "10", ",", "20", ",", "50", ",", "100", "]", ":", "\n", "        ", "indices", "=", "np", ".", "argsort", "(", "cos_sim_array", ",", "axis", "=", "1", ")", "[", ":", ",", "-", "N", ":", "]", "\n", "tmp", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "numRows", ")", ":", "\n", "            ", "sim", "=", "0", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                ", "selected_label", "=", "test_lbls", "[", "indices", "[", "i", "]", "[", "j", "]", "]", "\n", "original_label", "=", "test_lbls", "[", "i", "]", "\n", "sim", "+=", "distance", ".", "jaccard", "(", "selected_label", ",", "original_label", ")", "\n", "", "sim", "=", "sim", "*", "1.0", "/", "N", "\n", "tmp", ".", "append", "(", "sim", ")", "\n", "", "st", ".", "append", "(", "str", "(", "np", ".", "round", "(", "1.0", "-", "np", ".", "mean", "(", "tmp", ")", ",", "4", ")", ")", ")", "\n", "", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.run_cmeans": [[162, 223], ["fcmeans.FCM", "list", "list", "open", "open.close", "range", "list", "list.append", "open.write", "fcmeans.FCM.fit", "numpy.array", "range", "open", "open.close", "subprocess.Popen", "subprocess.Popen.wait", "time.sleep", "result.split", "NMI_list.append", "sum", "len", "open.write", "numpy.zeros", "heapq.nlargest", "list", "list.append", "open.write", "subprocess.Popen.communicate", "item.decode", "float", "numpy.where", "len", "range", "open.write", "float.replace", "[].tolist", "len", "numpy.where", "result.split.index", "numpy.where"], "function", ["None"], ["", "def", "run_cmeans", "(", "x", ",", "y", ",", "k", ",", "c", ",", "dataset", ",", "algorithm", ")", ":", "\n", "# n_labels = c", "\n", "# if k > n_labels:", "\n", "#     pca = PCA(n_components=n_labels)", "\n", "#     x = pca.fit_transform(x)", "\n", "# elif k <  n_labels:", "\n", "#     scaler = MinMaxScaler()", "\n", "#     x = scaler.fit_transform(x)", "\n", "#     nmf = NMF(n_components=n_labels, init='random', random_state=0)", "\n", "#     x = nmf.fit_transform(x)", "\n", "\n", "    ", "fcm", "=", "FCM", "(", "n_clusters", "=", "c", ")", "\n", "original_labels", "=", "y", ".", "T", "\n", "original_labels_list", "=", "list", "(", ")", "\n", "predicted_labels_list", "=", "list", "(", ")", "\n", "\n", "f", "=", "open", "(", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_orig.txt'", ",", "'w'", ")", "\n", "for", "j", "in", "original_labels", ":", "\n", "        ", "tmp", "=", "list", "(", "np", ".", "where", "(", "j", "==", "1", ")", "[", "0", "]", ")", "\n", "original_labels_list", ".", "append", "(", "tmp", ")", "\n", "for", "item", "in", "tmp", ":", "\n", "            ", "f", ".", "write", "(", "'%d\\t'", "%", "item", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "NMI_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "fcm", ".", "fit", "(", "x", ")", "\n", "fcm_centers", "=", "fcm", ".", "centers", "\n", "fcm_labels", "=", "fcm", ".", "u", "\n", "\n", "preds", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "fcm_labels", ".", "shape", "[", "0", "]", ",", "c", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "fcm_labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cluster_indices", "=", "heapq", ".", "nlargest", "(", "len", "(", "np", ".", "where", "(", "y", "[", "i", "]", "==", "1", ")", "[", "0", "]", ".", "tolist", "(", ")", ")", ",", "range", "(", "len", "(", "fcm_labels", "[", "i", "]", ")", ")", ",", "fcm_labels", "[", "i", "]", ".", "take", ")", "\n", "preds", "[", "i", "]", "[", "cluster_indices", "]", "=", "1", "\n", "", "predicted_labels", "=", "preds", ".", "T", "\n", "f", "=", "open", "(", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_pred.txt'", ",", "'w'", ")", "\n", "for", "j", "in", "predicted_labels", ":", "\n", "            ", "tmp", "=", "list", "(", "np", ".", "where", "(", "j", "==", "1", ")", "[", "0", "]", ")", "\n", "predicted_labels_list", ".", "append", "(", "tmp", ")", "\n", "for", "item", "in", "tmp", ":", "\n", "                ", "f", ".", "write", "(", "'%d\\t'", "%", "item", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "s", "=", "'./onmi -a'", "+", "' '", "+", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_orig.txt'", "+", "' '", "+", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_pred.txt'", "\n", "p", "=", "subprocess", ".", "Popen", "(", "s", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "p", ".", "wait", "(", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "result", "=", "p", ".", "communicate", "(", ")", "[", "0", "]", "\n", "res", "=", "result", ".", "split", "(", ")", "\n", "res", "=", "[", "item", ".", "decode", "(", "\"utf-8\"", ")", "for", "item", "in", "res", "]", "\n", "# res = [item.translate(str.maketrans('', '', string.punctuation)) for item in res]", "\n", "if", "'NMImax:'", "in", "res", ":", "\n", "            ", "val", "=", "res", "[", "res", ".", "index", "(", "'NMImax:'", ")", "+", "1", "]", "\n", "val", "=", "float", "(", "val", ".", "replace", "(", "','", ",", "''", ")", ")", "\n", "", "NMI_list", ".", "append", "(", "val", ")", "\n", "", "s1", "=", "sum", "(", "NMI_list", ")", "/", "len", "(", "NMI_list", ")", "\n", "# print('\\t[Clustering] NMI: {:.4f}'.format(s1))", "\n", "\n", "return", "s1", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_ml.run_cmeans_h": [[224, 283], ["list", "list", "open", "open.close", "range", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "list", "list.append", "open.write", "numpy.array", "range", "open", "open.close", "subprocess.Popen", "subprocess.Popen.wait", "time.sleep", "result.split", "NMI_list.append", "sum", "len", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.decomposition.NMF", "sklearn.decomposition.NMF.fit_transform", "open.write", "numpy.zeros", "heapq.nlargest", "list", "list.append", "open.write", "subprocess.Popen.communicate", "item.decode", "float", "numpy.where", "len", "range", "open.write", "float.replace", "[].tolist", "len", "numpy.where", "result.split.index", "numpy.where"], "function", ["None"], ["", "def", "run_cmeans_h", "(", "q", ",", "y", ",", "k", ",", "c", ",", "dataset", ",", "algorithm", ")", ":", "\n", "    ", "val", "=", "0.0", "\n", "n_labels", "=", "c", "\n", "if", "k", ">", "n_labels", ":", "\n", "        ", "pca", "=", "PCA", "(", "n_components", "=", "n_labels", ")", "\n", "x", "=", "pca", ".", "fit_transform", "(", "q", ")", "\n", "", "elif", "k", "<", "n_labels", ":", "\n", "        ", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "q", "=", "scaler", ".", "fit_transform", "(", "q", ")", "\n", "nmf", "=", "NMF", "(", "n_components", "=", "n_labels", ",", "init", "=", "'random'", ",", "random_state", "=", "0", ")", "\n", "x", "=", "nmf", ".", "fit_transform", "(", "q", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "q", "\n", "# fcm = FCM(n_clusters=n_labels)", "\n", "", "original_labels", "=", "y", ".", "T", "\n", "original_labels_list", "=", "list", "(", ")", "\n", "predicted_labels_list", "=", "list", "(", ")", "\n", "\n", "f", "=", "open", "(", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_orig.txt'", ",", "'w'", ")", "\n", "for", "j", "in", "original_labels", ":", "\n", "        ", "tmp", "=", "list", "(", "np", ".", "where", "(", "j", "==", "1", ")", "[", "0", "]", ")", "\n", "original_labels_list", ".", "append", "(", "tmp", ")", "\n", "for", "item", "in", "tmp", ":", "\n", "            ", "f", ".", "write", "(", "'%d\\t'", "%", "item", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "NMI_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "# counts can be increased", "\n", "        ", "preds", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "y", ".", "shape", "[", "0", "]", ",", "n_labels", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cluster_indices", "=", "heapq", ".", "nlargest", "(", "len", "(", "np", ".", "where", "(", "y", "[", "i", "]", "==", "1", ")", "[", "0", "]", ".", "tolist", "(", ")", ")", ",", "range", "(", "len", "(", "x", "[", "i", "]", ")", ")", ",", "x", "[", "i", "]", ".", "take", ")", "\n", "preds", "[", "i", "]", "[", "cluster_indices", "]", "=", "1", "\n", "", "predicted_labels", "=", "preds", ".", "T", "\n", "f", "=", "open", "(", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_pred.txt'", ",", "'w'", ")", "\n", "for", "j", "in", "predicted_labels", ":", "\n", "            ", "tmp", "=", "list", "(", "np", ".", "where", "(", "j", "==", "1", ")", "[", "0", "]", ")", "\n", "predicted_labels_list", ".", "append", "(", "tmp", ")", "\n", "for", "item", "in", "tmp", ":", "\n", "                ", "f", ".", "write", "(", "'%d\\t'", "%", "item", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "s", "=", "'./onmi -a'", "+", "' '", "+", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_orig.txt'", "+", "' '", "+", "'results/'", "+", "dataset", "+", "'_'", "+", "algorithm", "+", "'_pred.txt'", "\n", "p", "=", "subprocess", ".", "Popen", "(", "s", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "p", ".", "wait", "(", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "result", "=", "p", ".", "communicate", "(", ")", "[", "0", "]", "\n", "res", "=", "result", ".", "split", "(", ")", "\n", "res", "=", "[", "item", ".", "decode", "(", "\"utf-8\"", ")", "for", "item", "in", "res", "]", "\n", "# res = [item.translate(str.maketrans('', '', string.punctuation)) for item in res]", "\n", "if", "'NMImax:'", "in", "res", ":", "\n", "            ", "val", "=", "res", "[", "res", ".", "index", "(", "'NMImax:'", ")", "+", "1", "]", "\n", "val", "=", "float", "(", "val", ".", "replace", "(", "','", ",", "''", ")", ")", "\n", "", "NMI_list", ".", "append", "(", "val", ")", "\n", "", "s1", "=", "sum", "(", "NMI_list", ")", "/", "len", "(", "NMI_list", ")", "\n", "# print('\\t[Clustering] NMI: {:.4f}'.format(s1))", "\n", "\n", "return", "s1", "", "", ""]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.evaluate": [[18, 125], ["collections.OrderedDict", "torch.CrossEntropyLoss", "test_cluster_probs.detach().cpu().numpy.reshape", "test_cluster_probs.detach().cpu().numpy.detach().cpu().numpy", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.array", "numpy.array", "evaluate_mc.run_kmeans", "evaluate_mc.run_kmeans_h", "range", "evaluate_mc.run_similarity_search", "range", "len", "tmp_cluster_probs.reshape.reshape", "tmp_cluster_probs.reshape.detach().cpu().numpy", "range", "val_accs.index", "accs.append", "val_macro_f1s.index", "macro_f1s.append", "macro_f1s_val.append", "val_micro_f1s.index", "micro_f1s.append", "np.array.cpu", "np.array.cpu", "len", "evaluate_mc.run_kmeans_h", "len", "test_cluster_probs.detach().cpu().numpy.detach().cpu", "range", "max", "max", "max", "str", "tmp_cluster_probs.reshape.detach().cpu", "torch.argmax", "torch.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "val_accs.append", "val_macro_f1s.append", "val_micro_f1s.append", "torch.argmax", "torch.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "test_accs.append", "test_macro_f1s.append", "test_micro_f1s.append", "test_cluster_probs.detach().cpu().numpy.detach", "torch.sum().float", "torch.sum().float", "torch.argmax.cpu", "torch.argmax.cpu", "torch.argmax.cpu", "torch.argmax.cpu", "val_acc.item", "torch.sum().float", "torch.sum().float", "np.array.cpu", "torch.argmax.cpu", "np.array.cpu", "torch.argmax.cpu", "test_acc.item", "tmp_cluster_probs.reshape.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_kmeans", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_kmeans_h", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_similarity_search", "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_kmeans_h"], ["def", "evaluate", "(", "embeds", ",", "cluster_probs", ",", "cluster_prob_list", ",", "sup", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "labels", ",", "clusters", ",", "dataset", ",", "algorithm", ",", "device", ",", "isTest", "=", "True", ")", ":", "\n", "    ", "results", "=", "OrderedDict", "(", ")", "\n", "hid_units", "=", "embeds", ".", "shape", "[", "2", "]", "\n", "nb_classes", "=", "labels", ".", "shape", "[", "2", "]", "\n", "xent", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "train_embs", "=", "embeds", "[", "0", ",", "idx_train", "]", "\n", "val_embs", "=", "embeds", "[", "0", ",", "idx_val", "]", "\n", "test_embs", "=", "embeds", "[", "0", ",", "idx_test", "]", "\n", "test_cluster_probs", "=", "cluster_probs", "[", "0", ",", "idx_test", "]", "\n", "test_cluster_probs", "=", "test_cluster_probs", ".", "reshape", "(", "(", "test_cluster_probs", ".", "shape", "[", "0", "]", ",", "clusters", ")", ")", "\n", "test_cluster_probs", "=", "test_cluster_probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "r", "in", "range", "(", "len", "(", "cluster_prob_list", ")", ")", ":", "\n", "        ", "tmp_cluster_probs", "=", "cluster_prob_list", "[", "r", "]", "[", "0", ",", "idx_test", "]", "\n", "tmp_cluster_probs", "=", "tmp_cluster_probs", ".", "reshape", "(", "(", "tmp_cluster_probs", ".", "shape", "[", "0", "]", ",", "clusters", ")", ")", "\n", "cluster_prob_list", "[", "r", "]", "=", "tmp_cluster_probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# print(test_cluster_probs.shape) # torch.Size([2950, 3])", "\n", "", "train_lbls", "=", "torch", ".", "argmax", "(", "labels", "[", "0", ",", "idx_train", "]", ",", "dim", "=", "1", ")", "\n", "val_lbls", "=", "torch", ".", "argmax", "(", "labels", "[", "0", ",", "idx_val", "]", ",", "dim", "=", "1", ")", "\n", "test_lbls", "=", "torch", ".", "argmax", "(", "labels", "[", "0", ",", "idx_test", "]", ",", "dim", "=", "1", ")", "\n", "\n", "accs", "=", "[", "]", "\n", "micro_f1s", "=", "[", "]", "\n", "macro_f1s", "=", "[", "]", "\n", "macro_f1s_val", "=", "[", "]", "##", "\n", "if", "sup", "is", "not", "None", ":", "\n", "        ", "for", "_", "in", "range", "(", "1", ")", ":", "\n", "# log = LogReg(hid_units, nb_classes)", "\n", "# opt = torch.optim.Adam(log.parameters(), lr=0.01, weight_decay=0.0)", "\n", "# log.to(device)", "\n", "\n", "            ", "val_accs", "=", "[", "]", ";", "test_accs", "=", "[", "]", "\n", "val_micro_f1s", "=", "[", "]", ";", "test_micro_f1s", "=", "[", "]", "\n", "val_macro_f1s", "=", "[", "]", ";", "test_macro_f1s", "=", "[", "]", "\n", "for", "iter_", "in", "range", "(", "1", ")", ":", "\n", "# train", "\n", "# log.train()", "\n", "# opt.zero_grad()", "\n", "#", "\n", "# logits = log(train_embs)", "\n", "# loss = xent(logits, train_lbls)", "\n", "#", "\n", "# loss.backward()", "\n", "# opt.step()", "\n", "\n", "# val", "\n", "# logits = log(val_embs)", "\n", "                ", "logits", "=", "sup", "[", "idx_val", "]", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "val_acc", "=", "torch", ".", "sum", "(", "preds", "==", "val_lbls", ")", ".", "float", "(", ")", "/", "val_lbls", ".", "shape", "[", "0", "]", "\n", "val_f1_macro", "=", "f1_score", "(", "val_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "val_f1_micro", "=", "f1_score", "(", "val_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "val_accs", ".", "append", "(", "val_acc", ".", "item", "(", ")", ")", "\n", "val_macro_f1s", ".", "append", "(", "val_f1_macro", ")", "\n", "val_micro_f1s", ".", "append", "(", "val_f1_micro", ")", "\n", "\n", "# test", "\n", "logits", "=", "sup", "[", "idx_test", "]", "#log(test_embs)", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "test_acc", "=", "torch", ".", "sum", "(", "preds", "==", "test_lbls", ")", ".", "float", "(", ")", "/", "test_lbls", ".", "shape", "[", "0", "]", "\n", "test_f1_macro", "=", "f1_score", "(", "test_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "test_f1_micro", "=", "f1_score", "(", "test_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "test_accs", ".", "append", "(", "test_acc", ".", "item", "(", ")", ")", "\n", "test_macro_f1s", ".", "append", "(", "test_f1_macro", ")", "\n", "test_micro_f1s", ".", "append", "(", "test_f1_micro", ")", "\n", "\n", "\n", "", "", "max_iter", "=", "val_accs", ".", "index", "(", "max", "(", "val_accs", ")", ")", "\n", "accs", ".", "append", "(", "test_accs", "[", "max_iter", "]", ")", "\n", "\n", "max_iter", "=", "val_macro_f1s", ".", "index", "(", "max", "(", "val_macro_f1s", ")", ")", "\n", "macro_f1s", ".", "append", "(", "test_macro_f1s", "[", "max_iter", "]", ")", "\n", "macro_f1s_val", ".", "append", "(", "val_macro_f1s", "[", "max_iter", "]", ")", "###", "\n", "\n", "max_iter", "=", "val_micro_f1s", ".", "index", "(", "max", "(", "val_micro_f1s", ")", ")", "\n", "micro_f1s", ".", "append", "(", "test_micro_f1s", "[", "max_iter", "]", ")", "\n", "\n", "# if isTest:", "\n", "#     print(\"\\t[Classification] Macro-F1: {:.4f} ({:.4f}) | Micro-F1: {:.4f} ({:.4f})\".format(np.mean(macro_f1s),", "\n", "#                                                                                             np.std(macro_f1s),", "\n", "#                                                                                             np.mean(micro_f1s),", "\n", "#                                                                                             np.std(micro_f1s)))", "\n", "# else:", "\n", "#     return np.mean(macro_f1s_val), np.mean(macro_f1s)", "\n", "\n", "", "results", "[", "\"micro_f1\"", "]", "=", "np", ".", "mean", "(", "micro_f1s", ")", "\n", "results", "[", "\"micro_f1_std\"", "]", "=", "np", ".", "std", "(", "micro_f1s", ")", "\n", "results", "[", "\"macro_f1\"", "]", "=", "np", ".", "mean", "(", "macro_f1s", ")", "\n", "results", "[", "\"macro_f1_std\"", "]", "=", "np", ".", "std", "(", "macro_f1s", ")", "\n", "\n", "test_embs", "=", "np", ".", "array", "(", "test_embs", ".", "cpu", "(", ")", ")", "\n", "test_lbls", "=", "np", ".", "array", "(", "test_lbls", ".", "cpu", "(", ")", ")", "\n", "\n", "results", "[", "\"nmi\"", "]", "=", "run_kmeans", "(", "test_embs", ",", "test_lbls", ",", "clusters", ",", "nb_classes", ")", "\n", "results", "[", "\"nmi_h\"", "]", "=", "run_kmeans_h", "(", "test_cluster_probs", ",", "test_lbls", ",", "clusters", ",", "nb_classes", ")", "\n", "for", "r", "in", "range", "(", "len", "(", "cluster_prob_list", ")", ")", ":", "\n", "        ", "name", "=", "\"nmi_h\"", "+", "str", "(", "r", ")", "\n", "results", "[", "name", "]", "=", "run_kmeans_h", "(", "cluster_prob_list", "[", "r", "]", ",", "test_lbls", ",", "clusters", ",", "nb_classes", ")", "\n", "", "st", "=", "run_similarity_search", "(", "test_embs", ",", "test_lbls", ")", "\n", "cols", "=", "[", "\"S@5\"", ",", "\"S@10\"", ",", "\"S@20\"", ",", "\"S@50\"", ",", "\"S@100\"", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cols", ")", ")", ":", "\n", "        ", "results", "[", "cols", "[", "i", "]", "]", "=", "st", "[", "i", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_similarity_search": [[126, 142], ["sklearn.metrics.pairwise.cosine_similarity", "numpy.eye", "numpy.tile", "tmp[].reshape", "numpy.repeat().reshape", "st.append", "numpy.argsort", "str", "numpy.repeat", "numpy.round", "numpy.mean", "numpy.repeat", "indices.ravel", "numpy.sum", "numpy.arange"], "function", ["None"], ["", "def", "run_similarity_search", "(", "test_embs", ",", "test_lbls", ")", ":", "\n", "    ", "numRows", "=", "test_embs", ".", "shape", "[", "0", "]", "\n", "\n", "cos_sim_array", "=", "pairwise", ".", "cosine_similarity", "(", "test_embs", ")", "-", "np", ".", "eye", "(", "numRows", ")", "\n", "st", "=", "[", "]", "\n", "for", "N", "in", "[", "5", ",", "10", ",", "20", ",", "50", ",", "100", "]", ":", "\n", "        ", "indices", "=", "np", ".", "argsort", "(", "cos_sim_array", ",", "axis", "=", "1", ")", "[", ":", ",", "-", "N", ":", "]", "\n", "tmp", "=", "np", ".", "tile", "(", "test_lbls", ",", "(", "numRows", ",", "1", ")", ")", "\n", "selected_label", "=", "tmp", "[", "np", ".", "repeat", "(", "np", ".", "arange", "(", "numRows", ")", ",", "N", ")", ",", "indices", ".", "ravel", "(", ")", "]", ".", "reshape", "(", "numRows", ",", "N", ")", "\n", "original_label", "=", "np", ".", "repeat", "(", "test_lbls", ",", "N", ")", ".", "reshape", "(", "numRows", ",", "N", ")", "\n", "st", ".", "append", "(", "str", "(", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "(", "selected_label", "==", "original_label", ")", ",", "1", ")", "/", "N", ")", ",", "4", ")", ")", ")", "\n", "\n", "# st = ','.join(st)", "\n", "# print(\"\\t[Similarity] [5,10,20,50,100] : [{}]\".format(st))", "\n", "\n", "", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_kmeans": [[143, 157], ["sklearn.cluster.KMeans", "range", "sklearn.cluster.KMeans.fit", "sklearn.cluster.KMeans.predict", "sklearn.metrics.normalized_mutual_info_score", "NMI_list.append", "sum", "len"], "function", ["None"], ["", "def", "run_kmeans", "(", "x", ",", "y", ",", "k", ",", "c", ")", ":", "\n", "    ", "estimator", "=", "KMeans", "(", "n_clusters", "=", "c", ")", "\n", "\n", "NMI_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "estimator", ".", "fit", "(", "x", ")", "\n", "y_pred", "=", "estimator", ".", "predict", "(", "x", ")", "\n", "s1", "=", "normalized_mutual_info_score", "(", "y", ",", "y_pred", ",", "average_method", "=", "'arithmetic'", ")", "\n", "NMI_list", ".", "append", "(", "s1", ")", "\n", "\n", "", "s1", "=", "sum", "(", "NMI_list", ")", "/", "len", "(", "NMI_list", ")", "\n", "# print('\\t[Clustering] NMI: {:.4f}'.format(s1))", "\n", "\n", "return", "s1", "\n", "\n"]], "home.repos.pwc.inspect_result.anasuamitra_ssdcm.evaluation.evaluate_mc.run_kmeans_h": [[158, 179], ["nmf.fit_transform.argmax", "sklearn.metrics.normalized_mutual_info_score", "scaler.fit_transform.argmax", "sklearn.metrics.normalized_mutual_info_score", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.decomposition.NMF", "sklearn.decomposition.NMF.fit_transform"], "function", ["None"], ["", "def", "run_kmeans_h", "(", "q", ",", "y", ",", "k", ",", "c", ")", ":", "\n", "    ", "n_labels", "=", "c", "\n", "y_list", "=", "y", "\n", "if", "k", "==", "n_labels", ":", "\n", "        ", "y_pred", "=", "q", ".", "argmax", "(", "1", ")", "\n", "s1", "=", "normalized_mutual_info_score", "(", "y_list", ",", "y_pred", ",", "average_method", "=", "'arithmetic'", ")", "\n", "# print('\\t[Clustering] NMI: {:.4f}'.format(s1))", "\n", "return", "s1", "\n", "", "elif", "k", ">", "n_labels", ":", "\n", "        ", "pca", "=", "PCA", "(", "n_components", "=", "n_labels", ")", "\n", "x", "=", "pca", ".", "fit_transform", "(", "q", ")", "\n", "", "elif", "k", "<", "n_labels", ":", "\n", "        ", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "q", "=", "scaler", ".", "fit_transform", "(", "q", ")", "\n", "nmf", "=", "NMF", "(", "n_components", "=", "n_labels", ",", "init", "=", "'random'", ",", "random_state", "=", "0", ")", "\n", "x", "=", "nmf", ".", "fit_transform", "(", "q", ")", "\n", "", "y_pred_list", "=", "x", ".", "argmax", "(", "1", ")", "\n", "s1", "=", "normalized_mutual_info_score", "(", "y_list", ",", "y_pred_list", ",", "average_method", "=", "'arithmetic'", ")", "\n", "# print('\\t[Clustering] NMI: {:.4f}'.format(s1))", "\n", "\n", "return", "s1", "", "", ""]]}