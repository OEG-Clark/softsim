{"home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_eigen": [[6, 35], ["print", "networkx.cycle_graph", "numpy.random.randn", "numpy.random.randint", "numpy.random.randn", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "strat_models.StratifiedModel.predict", "print", "print", "strat_models.losses.sum_squares_loss", "strat_models.regularizers.sum_squares_reg", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["def", "test_eigen", "(", ")", ":", "\n", "\t", "\"\"\"Example: solve ||X\\theta - Y||^2 + ||\\theta||^2\"\"\"", "\n", "\n", "print", "(", "\"ridge regression test...\"", ")", "\n", "K", "=", "100", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "n", "=", "10", "\n", "m", "=", "2", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "n", ")", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "500", ")", "\n", "Y", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "m", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "\n", "loss", "=", "strat_models", ".", "losses", ".", "sum_squares_loss", "(", "intercept", "=", "False", ")", ",", "\n", "reg", "=", "strat_models", ".", "regularizers", ".", "sum_squares_reg", "(", "lambd", "=", "1", ")", ")", "\n", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "\n", "data", "=", "dict", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-6", ",", "maxiter", "=", "500", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "num_eigen", "=", "30", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "predictions", "=", "sm", ".", "predict", "(", "data", "=", "data", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data", ")", ")", ")", "\n", "\n", "print", "(", "\"eigen-stratified ridge regression done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_nonparametric_discrete": [[36, 69], ["print", "networkx.cycle_graph", "strat_models.utils.set_edge_weight", "numpy.eye", "numpy.random.randint", "numpy.random.randint", "print", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "dict", "print", "print", "strat_models.losses.nonparametric_discrete_loss", "strat_models.regularizers.sum_squares_reg", "numpy.random.randint", "numpy.random.randint", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.set_edge_weight", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "test_nonparametric_discrete", "(", ")", ":", "\n", "\t", "print", "(", "\"Non-parametric discrete distibution test...\"", ")", "\n", "\n", "K", "=", "100", "\n", "num_classes", "=", "10", "\n", "SIZE", "=", "100", "\n", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "strat_models", ".", "utils", ".", "set_edge_weight", "(", "G", ",", "10", ")", "\n", "\n", "K_eye", "=", "np", ".", "eye", "(", "K", ")", "\n", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "SIZE", ")", "\n", "Y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "SIZE", ")", "\n", "\n", "print", "(", "Z", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "loss", "=", "strat_models", ".", "losses", ".", "nonparametric_discrete_loss", "(", ")", ",", "\n", "reg", "=", "strat_models", ".", "regularizers", ".", "sum_squares_reg", "(", "lambd", "=", "0.4", ")", ")", "\n", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "\n", "data", "=", "dict", "(", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-6", ",", "maxiter", "=", "500", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "data_test", "=", "dict", "(", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "SIZE", ")", ",", "Y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "SIZE", ")", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data_test", ")", ")", ")", "\n", "\n", "print", "(", "\"Non-parametric discrete loss done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_poisson": [[70, 95], ["print", "networkx.cycle_graph", "numpy.random.randint", "numpy.random.randint", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "dict", "strat_models.StratifiedModel.sample", "print", "print", "strat_models.losses.poisson_loss", "strat_models.regularizers.min_threshold_reg_one_elem", "numpy.random.randint", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.sample", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "test_poisson", "(", ")", ":", "\n", "\t", "print", "(", "\"Poisson test...\"", ")", "\n", "\n", "K", "=", "1000", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "10000", ")", "\n", "Y", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "10", ",", "size", "=", "10000", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "loss", "=", "strat_models", ".", "losses", ".", "poisson_loss", "(", "min_theta", "=", "1e-3", ")", ",", "\n", "reg", "=", "strat_models", ".", "regularizers", ".", "min_threshold_reg_one_elem", "(", "lambd", "=", "1e-3", ")", ")", "\n", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "\n", "data", "=", "dict", "(", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-6", ",", "maxiter", "=", "500", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "data_sample", "=", "dict", "(", "Z", "=", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "100", ")", ")", "\n", "samples", "=", "sm", ".", "sample", "(", "data", "=", "data_sample", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data", ")", ")", ")", "\n", "\n", "print", "(", "\"Poisson done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_ridge_regression": [[96, 125], ["print", "networkx.cycle_graph", "numpy.random.randn", "numpy.random.randint", "numpy.random.randn", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "strat_models.StratifiedModel.predict", "print", "print", "strat_models.losses.sum_squares_loss", "strat_models.regularizers.sum_squares_reg", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "test_ridge_regression", "(", ")", ":", "\n", "\t", "\"\"\"Example: solve ||X\\theta - Y||^2 + ||\\theta||^2\"\"\"", "\n", "\n", "print", "(", "\"ridge regression test...\"", ")", "\n", "K", "=", "100", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "n", "=", "10", "\n", "m", "=", "2", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "n", ")", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "500", ")", "\n", "Y", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "m", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "\n", "loss", "=", "strat_models", ".", "losses", ".", "sum_squares_loss", "(", "intercept", "=", "False", ")", ",", "\n", "reg", "=", "strat_models", ".", "regularizers", ".", "sum_squares_reg", "(", "lambd", "=", "1", ")", ")", "\n", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "\n", "data", "=", "dict", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-6", ",", "maxiter", "=", "500", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "predictions", "=", "sm", ".", "predict", "(", "data", "=", "data", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data", ")", ")", ")", "\n", "\n", "print", "(", "\"ridge regression done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_lasso": [[126, 155], ["print", "networkx.cycle_graph", "numpy.random.randn", "numpy.random.randint", "numpy.random.randn", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "strat_models.StratifiedModel.predict", "print", "print", "strat_models.losses.sum_squares_loss", "strat_models.regularizers.L1_reg", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "test_lasso", "(", ")", ":", "\n", "\t", "\"\"\"Example: solve ||X\\theta - Y||^2 + ||\\theta||^2\"\"\"", "\n", "\n", "print", "(", "\"lasso test...\"", ")", "\n", "K", "=", "100", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "n", "=", "10", "\n", "m", "=", "2", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "n", ")", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "500", ")", "\n", "Y", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "m", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "\n", "loss", "=", "strat_models", ".", "losses", ".", "sum_squares_loss", "(", "intercept", "=", "True", ")", ",", "\n", "reg", "=", "strat_models", ".", "regularizers", ".", "L1_reg", "(", "lambd", "=", "1", ")", ")", "\n", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "\n", "data", "=", "dict", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-6", ",", "maxiter", "=", "500", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "predictions", "=", "sm", ".", "predict", "(", "data", "=", "data", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data", ")", ")", ")", "\n", "\n", "print", "(", "\"lasso done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_log_reg": [[156, 179], ["print", "networkx.cycle_graph", "numpy.random.randn", "numpy.random.randint", "numpy.random.randint", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "dict", "strat_models.StratifiedModel.predict", "print", "print", "strat_models.losses.logistic_loss", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "test_log_reg", "(", ")", ":", "\n", "\t", "print", "(", "\"Logistic regression test...\"", ")", "\n", "K", "=", "30", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "n", "=", "10", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "1000", ",", "n", ")", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "1000", ")", "\n", "Y", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "10", ",", "size", "=", "1000", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "loss", "=", "strat_models", ".", "losses", ".", "logistic_loss", "(", "intercept", "=", "True", ")", ")", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "data", "=", "dict", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-6", ",", "maxiter", "=", "500", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "data_predict", "=", "dict", "(", "X", "=", "X", "[", ":", "20", ",", ":", "]", ",", "Z", "=", "Z", "[", ":", "20", "]", ")", "\n", "predictions", "=", "sm", ".", "predict", "(", "data", "=", "data_predict", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data", ")", ")", ")", "\n", "\n", "print", "(", "\"logreg done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.None.test.test_bernoulli": [[180, 210], ["print", "networkx.cycle_graph", "numpy.random.randint", "numpy.random.randint", "strat_models.BaseModel", "strat_models.StratifiedModel", "dict", "dict", "strat_models.StratifiedModel.fit", "dict", "strat_models.StratifiedModel.sample", "print", "print", "strat_models.losses.bernoulli_loss", "strat_models.regularizers.clip_reg", "numpy.random.randint", "strat_models.StratifiedModel.anll"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.sample", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "test_bernoulli", "(", ")", ":", "\n", "\t", "print", "(", "\"Bernoulli test...\"", ")", "\n", "\n", "K", "=", "2", "\n", "G", "=", "nx", ".", "cycle_graph", "(", "K", ")", "\n", "Z", "=", "np", ".", "random", ".", "randint", "(", "K", ",", "size", "=", "1000", ")", "\n", "Y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "1000", ")", "\n", "# p = strat_strat_models.Bernoulli()", "\n", "# p.fit(Y, Z, G, inplace=True, verbose=True, n_jobs=12)", "\n", "\n", "# anll = p.anll(Y, Z)", "\n", "# sample = p.sample(Z)", "\n", "# print(sample)", "\n", "# print(anll)", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "loss", "=", "strat_models", ".", "losses", ".", "bernoulli_loss", "(", "1e-5", ",", "1", "-", "1e-5", ")", ",", "\n", "reg", "=", "strat_models", ".", "regularizers", ".", "clip_reg", "(", "(", "1e-5", ",", "1", "-", "1e-5", ")", ")", ")", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "data", "=", "dict", "(", "Y", "=", "Y", ",", "Z", "=", "Z", ")", "\n", "kwargs", "=", "dict", "(", "verbose", "=", "True", ",", "abs_tol", "=", "1e-4", ",", "maxiter", "=", "500", ",", "n_jobs", "=", "2", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data", ",", "**", "kwargs", ")", "\n", "assert", "info", "[", "\"optimal\"", "]", "\n", "\n", "data_sample", "=", "dict", "(", "Z", "=", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "100", ")", ")", "\n", "samples", "=", "sm", ".", "sample", "(", "data", "=", "data_sample", ")", "\n", "\n", "print", "(", "\"ANLL is {}\"", ".", "format", "(", "sm", ".", "anll", "(", "data", ")", ")", ")", "\n", "\n", "print", "(", "\"Bernoulli done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.examples.mesothelioma.prediction_error": [[23, 25], ["numpy.mean", "model.predict"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict"], ["def", "prediction_error", "(", "data", ",", "model", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "model", ".", "predict", "(", "data", ")", "!=", "data", "[", "\"Y\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.examples.crime.df_to_data": [[71, 92], ["G.nodes", "df.iterrows", "G.nodes", "int", "int", "int", "int", "int", "Y.append", "Z.append"], "function", ["None"], ["def", "df_to_data", "(", "df", ")", ":", "\n", "    ", "events", "=", "{", "}", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "events", "[", "node", "]", "=", "0", "\n", "\n", "", "for", "_", ",", "r", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "lat", "=", "int", "(", "r", ".", "lat_bin", ")", "\n", "lon", "=", "int", "(", "r", ".", "lon_bin", ")", "\n", "week", "=", "int", "(", "r", ".", "Week", "-", "1", ")", "\n", "day", "=", "int", "(", "r", ".", "Dayofweek", ")", "\n", "hour", "=", "int", "(", "r", ".", "Hour", ")", "\n", "key", "=", "(", "lat", ",", "lon", ",", "week", ",", "day", ",", "hour", ")", "\n", "events", "[", "key", "]", "+=", "1", "\n", "\n", "", "Y", "=", "[", "]", "\n", "Z", "=", "[", "]", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "Y", ".", "append", "(", "events", "[", "node", "]", ")", "\n", "Z", ".", "append", "(", "node", ")", "\n", "\n", "", "return", "Y", ",", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.examples.house.get_data": [[46, 63], ["G.nodes", "df.query", "numpy.array", "numpy.array", "Zs.extend", "numpy.concatenate", "df.query.drop", "numpy.concatenate"], "function", ["None"], ["def", "get_data", "(", "df", ")", ":", "\n", "    ", "Xs", "=", "[", "]", "\n", "Ys", "=", "[", "]", "\n", "Zs", "=", "[", "]", "\n", "for", "node", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "latbin", ",", "longbin", "=", "node", "\n", "df_node", "=", "df", ".", "query", "(", "'lat_bin == %d & long_bin == %d'", "%", "\n", "(", "latbin", ",", "longbin", ")", ")", "\n", "X_node", "=", "np", ".", "array", "(", "df_node", ".", "drop", "(", "\n", "[", "'log_price'", ",", "'lat'", ",", "'long'", ",", "'lat_bin'", ",", "'long_bin'", "]", ",", "axis", "=", "1", ")", ")", "\n", "Y_node", "=", "np", ".", "array", "(", "df_node", "[", "'log_price'", "]", ")", "\n", "N", "=", "X_node", ".", "shape", "[", "0", "]", "\n", "Xs", "+=", "[", "X_node", "]", "\n", "Ys", "+=", "[", "Y_node", "]", "\n", "Zs", ".", "extend", "(", "[", "node", "]", "*", "N", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "Xs", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "Ys", ",", "axis", "=", "0", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "Zs", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.examples.house.rms": [[80, 82], ["numpy.sqrt", "numpy.mean", "numpy.square"], "function", ["None"], ["def", "rms", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.examples.utils.latexify": [[5, 43], ["matplotlib.rcParams.update", "numpy.sqrt"], "function", ["None"], ["def", "latexify", "(", "fig_width", "=", "None", ",", "fig_height", "=", "None", ",", "columns", "=", "1", ",", "fontsize", "=", "12", ")", ":", "\n", "    ", "\"\"\"Set up matplotlib's RC params for LaTeX plotting.\n    Call this before plotting a figure.\n\n    Parameters\n    ----------\n    fig_width : float, optional, inches\n    fig_height : float,  optional, inches\n    \"\"\"", "\n", "\n", "# code adapted from http://www.scipy.org/Cookbook/Matplotlib/LaTeX_Examples", "\n", "\n", "# Width and max height in inches for IEEE journals taken from", "\n", "# computer.org/cms/Computer.org/Journal%20templates/transactions_art_guide.pdf", "\n", "\n", "assert", "(", "columns", "in", "[", "1", ",", "2", "]", ")", "\n", "\n", "if", "fig_width", "is", "None", ":", "\n", "        ", "fig_width", "=", "3.39", "if", "columns", "==", "1", "else", "6.9", "# width in inches", "\n", "\n", "", "if", "fig_height", "is", "None", ":", "\n", "        ", "golden_mean", "=", "(", "np", ".", "sqrt", "(", "5", ")", "-", "1.0", ")", "/", "2.0", "# Aesthetic ratio", "\n", "fig_height", "=", "fig_width", "*", "golden_mean", "# height in inches", "\n", "\n", "", "params", "=", "{", "'backend'", ":", "'ps'", ",", "\n", "'text.latex.preamble'", ":", "[", "'\\\\usepackage{gensymb}'", "]", ",", "\n", "# fontsize for x and y labels (was 10)", "\n", "'axes.labelsize'", ":", "fontsize", ",", "\n", "'axes.titlesize'", ":", "fontsize", ",", "\n", "'legend.fontsize'", ":", "fontsize", ",", "# was 10", "\n", "'xtick.labelsize'", ":", "fontsize", ",", "\n", "'ytick.labelsize'", ":", "fontsize", ",", "\n", "'text.usetex'", ":", "True", ",", "\n", "'figure.figsize'", ":", "[", "fig_width", ",", "fig_height", "]", ",", "\n", "# 'font.sans-serif': 'DejaVu Sans'", "\n", "}", "\n", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.examples.elections.extract_data": [[37, 48], ["data.district.unique", "Y.append", "Z.append", "data_dist.candidatevotes.idxmax"], "function", ["None"], ["def", "extract_data", "(", "df", ")", ":", "\n", "    ", "Y", "=", "[", "]", "\n", "Z", "=", "[", "]", "\n", "for", "state", "in", "states", ":", "\n", "        ", "for", "year", "in", "years", ":", "\n", "            ", "data", "=", "df", "[", "(", "raw_data", ".", "year", "==", "year", ")", "&", "(", "df", ".", "state_po", "==", "state", ")", "]", "\n", "for", "district", "in", "data", ".", "district", ".", "unique", "(", ")", ":", "\n", "                ", "data_dist", "=", "data", "[", "df", ".", "district", "==", "district", "]", "\n", "Y", ".", "append", "(", "data_dist", ".", "democrat", "[", "data_dist", ".", "candidatevotes", ".", "idxmax", "(", ")", "]", ")", "\n", "Z", ".", "append", "(", "(", "state", ",", "year", ")", ")", "\n", "", "", "", "return", "Y", ",", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.eigen_stratified_models.weather.train_strat_model": [[64, 89], ["strat_models.nonparametric_discrete_loss", "strat_models.scaled_plus_sum_squares_reg", "strat_models.BaseModel", "networkx.cycle_graph", "networkx.cycle_graph", "strat_models.set_edge_weight", "strat_models.set_edge_weight", "strat_models.cartesian_product", "strat_models.StratifiedModel", "strat_models.StratifiedModel.fit", "strat_models.StratifiedModel.anll", "strat_models.StratifiedModel.anll", "strat_models.StratifiedModel.anll", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.set_edge_weight", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.set_edge_weight", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.cartesian_product", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "train_strat_model", "(", "weights", ",", "data_train", ",", "data_val", ",", "data_test", ",", "lambd", ")", ":", "\n", "\n", "    ", "loss", "=", "strat_models", ".", "nonparametric_discrete_loss", "(", ")", "\n", "reg", "=", "strat_models", ".", "scaled_plus_sum_squares_reg", "(", "A", "=", "D", ",", "lambd", "=", "lambd", ")", "\n", "\n", "bm", "=", "strat_models", ".", "BaseModel", "(", "loss", "=", "loss", ",", "reg", "=", "reg", ")", "\n", "\n", "G_week", "=", "nx", ".", "cycle_graph", "(", "53", ")", "\n", "G_hr", "=", "nx", ".", "cycle_graph", "(", "24", ")", "\n", "strat_models", ".", "set_edge_weight", "(", "G_week", ",", "weights", "[", "0", "]", ")", "\n", "strat_models", ".", "set_edge_weight", "(", "G_hr", ",", "weights", "[", "1", "]", ")", "\n", "G", "=", "strat_models", ".", "cartesian_product", "(", "[", "G_week", ",", "G_hr", "]", ")", "\n", "\n", "sm", "=", "strat_models", ".", "StratifiedModel", "(", "bm", ",", "graph", "=", "G", ")", "\n", "\n", "info", "=", "sm", ".", "fit", "(", "data_train", ",", "**", "kwargs", ")", "\n", "anll_train", "=", "sm", ".", "anll", "(", "data_train", ")", "\n", "anll_val", "=", "sm", ".", "anll", "(", "data_val", ")", "\n", "anll_test", "=", "sm", ".", "anll", "(", "data_test", ")", "\n", "\n", "print", "(", "\"Stratified model with (weights, lambd) =\"", ",", "(", "weights", ",", "lambd", ")", ")", "\n", "print", "(", "\"\\t\"", ",", "info", ")", "\n", "print", "(", "\"\\t\"", ",", "anll_train", ",", "anll_val", ",", "anll_test", ")", "\n", "\n", "return", "anll_train", ",", "anll_val", ",", "anll_test", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.eigen_stratified_models.cardio.create_sex_graph": [[53, 60], ["networkx.Graph", "nx.Graph.add_nodes_from", "nx.Graph.add_edge", "nx.Graph.edges"], "function", ["None"], ["def", "create_sex_graph", "(", "weight", "=", "0", ")", ":", "\n", "    ", "G_sex", "=", "nx", ".", "Graph", "(", ")", "\n", "G_sex", ".", "add_nodes_from", "(", "[", "\"Male\"", ",", "\"Female\"", "]", ")", "\n", "G_sex", ".", "add_edge", "(", "\"Male\"", ",", "\"Female\"", ")", "\n", "for", "_", ",", "_", ",", "e", "in", "G_sex", ".", "edges", "(", "data", "=", "True", ")", ":", "\n", "        ", "e", "[", "\"weight\"", "]", "=", "weight", "\n", "", "return", "G_sex", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.eigen_stratified_models.cardio.create_age_graph": [[65, 71], ["networkx.path_graph", "networkx.relabel_nodes", "nx.relabel_nodes.edges"], "function", ["None"], ["def", "create_age_graph", "(", "weight", "=", "0", ")", ":", "\n", "    ", "G_age", "=", "nx", ".", "path_graph", "(", "num_ages", ")", "\n", "G_age", "=", "nx", ".", "relabel_nodes", "(", "G_age", ",", "index_to_age", ")", "\n", "for", "_", ",", "_", ",", "e", "in", "G_age", ".", "edges", "(", "data", "=", "True", ")", ":", "\n", "        ", "e", "[", "\"weight\"", "]", "=", "weight", "\n", "", "return", "G_age", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.fit.fit_stratified_model": [[10, 165], ["dict", "numpy.prod", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "multiprocessing.Pool", "time.perf_counter", "range", "mp.Pool.close", "mp.Pool.join", "G_data[].copy", "numpy.zeros", "G_data[].copy", "l_prox.copy", "G_data[].copy", "l_prox.copy", "G_data[].copy", "numpy.zeros", "G_data[].copy", "numpy.zeros", "print", "time.perf_counter", "l_prox", "time.perf_counter", "r_prox", "time.perf_counter", "scipy.diags", "numpy.ndindex", "enumerate", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.clip", "time.perf_counter", "print", "time.perf_counter", "time.perf_counter", "time.perf_counter", "numpy.append", "numpy.append", "print", "print", "print", "scipy.eye", "sys.diagonal", "scipy.cg", "numpy.sqrt", "max", "numpy.sqrt", "numpy.linalg.norm", "numpy.prod", "numpy.prod", "numpy.append"], "function", ["None"], ["def", "fit_stratified_model", "(", "L", ",", "shape", ",", "l_prox", ",", "r_prox", ",", "G_data", "=", "dict", "(", ")", ",", "abs_tol", "=", "1e-3", ",", "rel_tol", "=", "1e-3", ",", "\n", "rho", "=", "1", ",", "mu", "=", "10", ",", "tau_incr", "=", "2", ",", "tau_decr", "=", "2", ",", "max_rho", "=", "1e1", ",", "min_rho", "=", "1e-1", ",", "\n", "maxiter", "=", "100", ",", "verbose", "=", "False", ",", "n_jobs", "=", "1", ",", "max_cg_iterations", "=", "10", ")", ":", "\n", "    ", "\"\"\"Fits a stratified model using ADMM, as described in the paper\n    `A Distributed Method for Fitting Laplacian Regularized Stratified Models`.\n    Args:\n        - L: Laplacian matrix, represented as scipy sparse matrix.\n        - shape: shape of an individual theta.\n        - l_prox: Applies l proximal operator in batch.\n        - r_prox: Applies r proximal operator in batch.\n        - G_data (optional): dictionary of warm starting values. (default=dict())\n        - abs_tol (optional): Absolute tolerance. (default=1e-3)\n        - rel_tol (optional): Relative tolerance. (default=1e-3)\n        - rho (optional): Initial penalty parameter. (default=1.0)\n        - mu/tau_incr/tau_decr/max_rho/min_rho (optional): Adaptive penalty parameters.\n        - maxiter (optional): Maximum number of ADMM iterations. (default=100)\n        - verbose (optional): True to print status messages, False to be silent. (default=False)\n        - n_jobs (optional): number of jobs to spawn. (default=1)\n        - max_cg_iterations (optional): Max number of CG iterations per ADMM iteration. (defulat=10)\n    Returns:\n        - result: Dictionary with the solution vectors.\n        - info: Information about the algorithm's performance.\n    \"\"\"", "\n", "K", "=", "L", ".", "shape", "[", "0", "]", "\n", "n", "=", "np", ".", "prod", "(", "shape", ")", "\n", "\n", "# Initialization", "\n", "if", "'theta_init'", "in", "G_data", ":", "\n", "        ", "theta", "=", "G_data", "[", "'theta_init'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "theta", "=", "np", ".", "zeros", "(", "(", "K", ",", ")", "+", "shape", ")", "\n", "", "if", "'theta_tilde'", "in", "G_data", ":", "\n", "        ", "theta_tilde", "=", "G_data", "[", "'theta_tilde'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "theta_tilde", "=", "theta", ".", "copy", "(", ")", "\n", "", "if", "'theta_hat'", "in", "G_data", ":", "\n", "        ", "theta_hat", "=", "G_data", "[", "'theta_hat'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "theta_hat", "=", "theta", ".", "copy", "(", ")", "\n", "", "if", "'u'", "in", "G_data", ":", "\n", "        ", "u", "=", "G_data", "[", "'u'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "u", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "", "if", "'u_tilde'", "in", "G_data", ":", "\n", "        ", "u_tilde", "=", "G_data", "[", "'u_tilde'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "u_tilde", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "\n", "", "res_pri", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "res_pri_tilde", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "res_dual", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "res_dual_tilde", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "\n", "optimal", "=", "False", "\n", "n_jobs", "=", "n_jobs", "if", "K", ">", "n_jobs", "else", "K", "\n", "prox_pool", "=", "mp", ".", "Pool", "(", "n_jobs", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"%3s | %10s %10s %10s %10s %6s %6s %6s %6s\"", "%", "\n", "(", "\"it\"", ",", "\"s_norm\"", ",", "\"r_norm\"", ",", "\"eps_pri\"", ",", "\"eps_dual\"", ",", "\"rho\"", ",", "\"time1\"", ",", "\"time2\"", ",", "\"time3\"", ")", ")", "\n", "\n", "# Main ADMM loop", "\n", "", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "maxiter", "+", "1", ")", ":", "\n", "\n", "# theta update", "\n", "        ", "start_time_1", "=", "time", ".", "perf_counter", "(", ")", "\n", "theta", "=", "l_prox", "(", "1.", "/", "rho", ",", "theta_hat", "-", "u", ",", "theta", ",", "prox_pool", ")", "\n", "time_1", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time_1", "\n", "\n", "# theta_tilde update", "\n", "start_time_2", "=", "time", ".", "perf_counter", "(", ")", "\n", "theta_tilde", "=", "r_prox", "(", "1.", "/", "rho", ",", "theta_hat", "-", "\n", "u_tilde", ",", "theta_tilde", ",", "prox_pool", ")", "\n", "time_2", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time_2", "\n", "\n", "# theta_hat update", "\n", "start_time_3", "=", "time", ".", "perf_counter", "(", ")", "\n", "sys", "=", "L", "+", "2", "*", "rho", "*", "sparse", ".", "eye", "(", "K", ")", "\n", "M", "=", "sparse", ".", "diags", "(", "1.", "/", "sys", ".", "diagonal", "(", ")", ")", "\n", "indices", "=", "np", ".", "ndindex", "(", "shape", ")", "\n", "rhs", "=", "rho", "*", "(", "theta", ".", "T", "+", "u", ".", "T", "+", "theta_tilde", ".", "T", "+", "u_tilde", ".", "T", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "indices", ")", ":", "\n", "            ", "index", "=", "ind", "[", ":", ":", "-", "1", "]", "\n", "sol", "=", "splinalg", ".", "cg", "(", "sys", ",", "rhs", "[", "index", "]", ",", "M", "=", "M", ",", "\n", "x0", "=", "theta_hat", ".", "T", "[", "index", "]", ",", "maxiter", "=", "max_cg_iterations", ")", "[", "0", "]", "\n", "res_dual", ".", "T", "[", "index", "]", "=", "-", "rho", "*", "(", "sol", "-", "theta_hat", ".", "T", "[", "index", "]", ")", "\n", "res_dual_tilde", ".", "T", "[", "index", "]", "=", "res_dual", ".", "T", "[", "index", "]", "\n", "theta_hat", ".", "T", "[", "index", "]", "=", "sol", "\n", "", "time_3", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time_3", "\n", "\n", "# u and u_tilde update", "\n", "res_pri", "=", "theta", "-", "theta_hat", "\n", "res_pri_tilde", "=", "theta_tilde", "-", "theta_hat", "\n", "u", "+=", "theta", "-", "theta_hat", "\n", "u_tilde", "+=", "theta_tilde", "-", "theta_hat", "\n", "\n", "# calculate residual norms", "\n", "res_pri_norm", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "append", "(", "res_pri", ",", "res_pri_tilde", ")", ")", "\n", "res_dual_norm", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "append", "(", "res_dual", ",", "res_dual_tilde", ")", ")", "\n", "\n", "eps_pri", "=", "np", ".", "sqrt", "(", "2", "*", "K", "*", "np", ".", "prod", "(", "shape", ")", ")", "*", "abs_tol", "+", "rel_tol", "*", "max", "(", "res_pri_norm", ",", "res_dual_norm", ")", "\n", "eps_dual", "=", "np", ".", "sqrt", "(", "2", "*", "K", "*", "np", ".", "prod", "(", "shape", ")", ")", "*", "abs_tol", "+", "rel_tol", "*", "np", ".", "linalg", ".", "norm", "(", "rho", "*", "np", ".", "append", "(", "u", ",", "u_tilde", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"%3d | %8.4e %8.4e %8.4e %8.4e %4.3f %4.3f %4.3f %4.3f\"", "%", "\n", "(", "t", ",", "res_pri_norm", ",", "res_dual_norm", ",", "eps_pri", ",", "eps_dual", ",", "rho", ",", "\n", "time_1", "*", "1000", ",", "time_2", "*", "1000", ",", "time_3", "*", "1000", ")", ")", "\n", "\n", "# check stopping condition", "\n", "", "if", "res_pri_norm", "<=", "eps_pri", "and", "res_dual_norm", "<=", "eps_dual", ":", "\n", "            ", "optimal", "=", "True", "\n", "break", "\n", "\n", "# penalty parameter update", "\n", "", "new_rho", "=", "rho", "\n", "if", "res_pri_norm", ">", "mu", "*", "res_dual_norm", ":", "\n", "            ", "new_rho", "=", "tau_incr", "*", "rho", "\n", "", "elif", "res_dual_norm", ">", "mu", "*", "res_pri_norm", ":", "\n", "            ", "new_rho", "=", "rho", "/", "tau_decr", "\n", "", "new_rho", "=", "np", ".", "clip", "(", "new_rho", ",", "min_rho", ",", "max_rho", ")", "\n", "u", "*=", "rho", "/", "new_rho", "\n", "u_tilde", "*=", "rho", "/", "new_rho", "\n", "rho", "=", "new_rho", "\n", "", "main_loop_time", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "\n", "# clean up the multiprocessing pool", "\n", "prox_pool", ".", "close", "(", ")", "\n", "prox_pool", ".", "join", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "if", "optimal", ":", "\n", "            ", "print", "(", "f\"Terminated (optimal) in {t} iterations.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Terminated (reached max iterations).\"", ")", "\n", "", "print", "(", "\"run time: %8.4e seconds\"", "%", "main_loop_time", ")", "\n", "\n", "# construct result", "\n", "", "result", "=", "{", "\n", "'theta'", ":", "theta", ",", "\n", "'theta_tilde'", ":", "theta_tilde", ",", "\n", "'theta_hat'", ":", "theta_hat", ",", "\n", "'u'", ":", "u", ",", "\n", "'u_tilde'", ":", "u_tilde", "\n", "}", "\n", "\n", "info", "=", "{", "\n", "'time'", ":", "main_loop_time", ",", "\n", "'iterations'", ":", "t", ",", "\n", "'optimal'", ":", "optimal", "\n", "}", "\n", "\n", "return", "result", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.fit.fit_eigen_stratified_model": [[166, 318], ["dict", "numpy.prod", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "multiprocessing.Pool", "time.perf_counter", "range", "mp.Pool.close", "mp.Pool.join", "G_data[].copy", "numpy.zeros", "G_data[].copy", "l_prox.copy", "G_data[].copy", "numpy.zeros", "G_data[].copy", "numpy.zeros", "G_data[].copy", "numpy.zeros", "print", "time.perf_counter", "l_prox", "time.perf_counter", "time.perf_counter", "r_prox", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.clip", "time.perf_counter", "print", "time.perf_counter", "time.perf_counter", "time.perf_counter", "numpy.append", "numpy.append", "print", "print", "print", "numpy.sqrt", "max", "numpy.sqrt", "numpy.linalg.norm", "numpy.prod", "numpy.prod", "numpy.append"], "function", ["None"], ["", "def", "fit_eigen_stratified_model", "(", "Q_tilde", ",", "eigvals", ",", "shape", ",", "l_prox", ",", "r_prox", ",", "G_data", "=", "dict", "(", ")", ",", "abs_tol", "=", "1e-3", ",", "rel_tol", "=", "1e-3", ",", "\n", "rho", "=", "1", ",", "mu", "=", "10", ",", "tau_incr", "=", "2", ",", "tau_decr", "=", "2", ",", "max_rho", "=", "1e1", ",", "min_rho", "=", "1e-1", ",", "\n", "maxiter", "=", "100", ",", "verbose", "=", "False", ",", "n_jobs", "=", "1", ",", "max_cg_iterations", "=", "10", ",", "\n", "num_eigenvectors", "=", "None", ")", ":", "\n", "    ", "\"\"\"Fits a stratified model using ADMM, as described in the paper\n    `A Distributed Method for Fitting Laplacian Regularized Stratified Models`.\n    Args:\n        - L: Laplacian matrix, represented as scipy sparse matrix.\n        - shape: shape of an individual theta.\n        - l_prox: Applies l proximal operator in batch.\n        - r_prox: Applies r proximal operator in batch.\n        - G_data (optional): dictionary of warm starting values. (default=dict())\n        - abs_tol (optional): Absolute tolerance. (default=1e-3)\n        - rel_tol (optional): Relative tolerance. (default=1e-3)\n        - rho (optional): Initial penalty parameter. (default=1.0)\n        - mu/tau_incr/tau_decr/max_rho/min_rho (optional): Adaptive penalty parameters.\n        - maxiter (optional): Maximum number of ADMM iterations. (default=100)\n        - verbose (optional): True to print status messages, False to be silent. (default=False)\n        - n_jobs (optional): number of jobs to spawn. (default=1)\n        - max_cg_iterations (optional): Max number of CG iterations per ADMM iteration. (default=10)\n        - num_eigenvectors (optional): Number of eigenvectors to estimate model params (default=None=use all of them)\n    Returns:\n        - result: Dictionary with the solution vectors.\n        - info: Information about the algorithm's performance.\n    \"\"\"", "\n", "K", "=", "Q_tilde", ".", "shape", "[", "0", "]", "\n", "n", "=", "np", ".", "prod", "(", "shape", ")", "\n", "\n", "# Initialization", "\n", "if", "'theta_init'", "in", "G_data", ":", "\n", "        ", "theta", "=", "G_data", "[", "'theta_init'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "np", ".", "zeros", "(", "(", "K", ",", ")", "+", "shape", ")", "\n", "", "if", "'theta_tilde'", "in", "G_data", ":", "\n", "        ", "theta_tilde", "=", "G_data", "[", "'theta_tilde'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "theta_tilde", "=", "theta", ".", "copy", "(", ")", "\n", "", "if", "'Z_init'", "in", "G_data", ":", "\n", "        ", "Z", "=", "G_data", "[", "'Z_init'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "Z", "=", "np", ".", "zeros", "(", "shape", "+", "(", "num_eigenvectors", ",", ")", ")", "\n", "", "if", "'u'", "in", "G_data", ":", "\n", "        ", "u", "=", "G_data", "[", "'u'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "u", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "", "if", "'u_tilde'", "in", "G_data", ":", "\n", "        ", "u_tilde", "=", "G_data", "[", "'u_tilde'", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "u_tilde", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "\n", "", "res_pri", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "res_pri_tilde", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "res_dual", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "res_dual_tilde", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "\n", "optimal", "=", "False", "\n", "n_jobs", "=", "n_jobs", "if", "K", ">", "n_jobs", "else", "K", "\n", "prox_pool", "=", "mp", ".", "Pool", "(", "n_jobs", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"%3s | %10s %10s %10s %10s %6s %6s %6s %6s\"", "%", "\n", "(", "\"it\"", ",", "\"s_norm\"", ",", "\"r_norm\"", ",", "\"eps_pri\"", ",", "\"eps_dual\"", ",", "\"rho\"", ",", "\"time1\"", ",", "\"time2\"", ",", "\"time3\"", ")", ")", "\n", "\n", "# Main ADMM loop", "\n", "", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "maxiter", "+", "1", ")", ":", "\n", "\n", "# theta update", "\n", "        ", "start_time_1", "=", "time", ".", "perf_counter", "(", ")", "\n", "theta", "=", "l_prox", "(", "1.", "/", "rho", ",", "theta_tilde", "-", "u", ",", "theta", ",", "prox_pool", ")", "\n", "time_1", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time_1", "\n", "\n", "#Z update", "\n", "start_time_2", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "Z", "=", "rho", "*", "(", "u", ".", "T", "+", "theta_tilde", ".", "T", ")", "@", "Q_tilde", "*", "(", "1", "/", "(", "eigvals", "+", "rho", ")", ")", "\n", "time_2", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time_2", "\n", "\n", "# theta_tilde update", "\n", "start_time_3", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "ZQ_tilde_T", "=", "(", "Z", "@", "Q_tilde", ".", "T", ")", ".", "T", "\n", "\n", "theta_tilde", "=", "r_prox", "(", "1.", "/", "rho", ",", "ZQ_tilde_T", "-", "\n", "u_tilde", ",", "theta_tilde", ",", "prox_pool", ")", "\n", "time_3", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time_3", "\n", "\n", "# u and u_tilde update", "\n", "res_pri", "=", "theta", "-", "theta_tilde", "\n", "res_pri_tilde", "=", "theta_tilde", "-", "ZQ_tilde_T", "\n", "u", "+=", "theta", "-", "theta_tilde", "\n", "u_tilde", "+=", "theta_tilde", "-", "ZQ_tilde_T", "\n", "\n", "# calculate residual norms", "\n", "res_pri_norm", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "append", "(", "res_pri", ",", "res_pri_tilde", ")", ")", "\n", "res_dual_norm", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "append", "(", "res_dual", ",", "res_dual_tilde", ")", ")", "\n", "\n", "eps_pri", "=", "np", ".", "sqrt", "(", "2", "*", "K", "*", "np", ".", "prod", "(", "shape", ")", ")", "*", "abs_tol", "+", "rel_tol", "*", "max", "(", "res_pri_norm", ",", "res_dual_norm", ")", "\n", "eps_dual", "=", "np", ".", "sqrt", "(", "2", "*", "K", "*", "np", ".", "prod", "(", "shape", ")", ")", "*", "abs_tol", "+", "rel_tol", "*", "np", ".", "linalg", ".", "norm", "(", "rho", "*", "np", ".", "append", "(", "u", ",", "u_tilde", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"%3d | %8.4e %8.4e %8.4e %8.4e %4.3f %4.3f %4.3f %4.3f\"", "%", "\n", "(", "t", ",", "res_pri_norm", ",", "res_dual_norm", ",", "eps_pri", ",", "eps_dual", ",", "rho", ",", "\n", "time_1", "*", "1000", ",", "time_2", "*", "1000", ",", "time_3", "*", "1000", ")", ")", "\n", "\n", "# check stopping condition", "\n", "", "if", "res_pri_norm", "<=", "eps_pri", "and", "res_dual_norm", "<=", "eps_dual", ":", "\n", "            ", "optimal", "=", "True", "\n", "break", "\n", "\n", "# penalty parameter update", "\n", "", "new_rho", "=", "rho", "\n", "if", "res_pri_norm", ">", "mu", "*", "res_dual_norm", ":", "\n", "            ", "new_rho", "=", "tau_incr", "*", "rho", "\n", "", "elif", "res_dual_norm", ">", "mu", "*", "res_pri_norm", ":", "\n", "            ", "new_rho", "=", "rho", "/", "tau_decr", "\n", "", "new_rho", "=", "np", ".", "clip", "(", "new_rho", ",", "min_rho", ",", "max_rho", ")", "\n", "u", "*=", "rho", "/", "new_rho", "\n", "u_tilde", "*=", "rho", "/", "new_rho", "\n", "rho", "=", "new_rho", "\n", "", "main_loop_time", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "\n", "# clean up the multiprocessing pool", "\n", "prox_pool", ".", "close", "(", ")", "\n", "prox_pool", ".", "join", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "if", "optimal", ":", "\n", "            ", "print", "(", "f\"Terminated (optimal) in {t} iterations.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Terminated (reached max iterations).\"", ")", "\n", "", "print", "(", "\"run time: %8.4e seconds\"", "%", "main_loop_time", ")", "\n", "\n", "# construct result", "\n", "", "result", "=", "{", "\n", "'theta'", ":", "theta", ",", "\n", "'theta_tilde'", ":", "theta_tilde", ",", "\n", "'Z'", ":", "Z", ",", "\n", "'u'", ":", "u", ",", "\n", "'u_tilde'", ":", "u_tilde", ",", "\n", "'Q_tilde'", ":", "Q_tilde", "\n", "}", "\n", "\n", "info", "=", "{", "\n", "'time'", ":", "main_loop_time", ",", "\n", "'iterations'", ":", "t", ",", "\n", "'optimal'", ":", "optimal", "\n", "}", "\n", "\n", "return", "result", ",", "info", "", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.BaseModel.__init__": [[118, 121], ["strat_models.zero_reg", "strat_models.zero_reg"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "loss", ",", "reg", "=", "regularizers", ".", "zero_reg", "(", ")", ")", ":", "\n", "\t\t", "self", ".", "loss", "=", "loss", "\n", "self", ".", "local_reg", "=", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.__init__": [[123, 126], ["models.StratifiedModel.change_base_model"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.change_base_model"], ["\t", "def", "__init__", "(", "self", ",", "BaseModel", ":", "BaseModel", ",", "graph", ")", ":", "\n", "\t\t", "self", ".", "change_base_model", "(", "BaseModel", ")", "\n", "self", ".", "G", "=", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.change_base_model": [[127, 139], ["None"], "methods", ["None"], ["", "def", "change_base_model", "(", "self", ",", "base_model", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tAlters/edits the Basemodel inside the StratifiedModel\n\t\tand updates all relevant attributes.\n\t\t\"\"\"", "\n", "self", ".", "base_model", "=", "base_model", "\n", "\n", "self", ".", "loss", "=", "base_model", ".", "loss", "\n", "self", ".", "isDistribution", "=", "base_model", ".", "loss", ".", "isDistribution", "\n", "\n", "self", ".", "local_reg", "=", "base_model", ".", "local_reg", "\n", "self", ".", "lambd", "=", "base_model", ".", "local_reg", ".", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.compute_graph_data": [[140, 159], ["networkx.laplacian_matrix", "models.StratifiedModel.G.nodes", "numpy.linalg.eigh", "models.StratifiedModel.G.nodes", "len", "networkx.laplacian_matrix().toarray", "models.StratifiedModel.G.nodes", "networkx.laplacian_matrix"], "methods", ["None"], ["", "def", "compute_graph_data", "(", "self", ",", "num_eigen", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tComputes all necessary graph data:\n\t\t\tL: Laplacian mtx\n\t\t\tnodelist: node set of G\n\t\t\tK: number of classes\n\t\t\"\"\"", "\n", "L", "=", "nx", ".", "laplacian_matrix", "(", "self", ".", "G", ")", "\n", "if", "num_eigen", "is", "None", "or", "num_eigen", "<=", "0", "or", "num_eigen", ">=", "len", "(", "self", ".", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "self", ".", "nodelist", "=", "self", ".", "G", ".", "nodes", "(", ")", "\n", "self", ".", "K", "=", "L", ".", "shape", "[", "0", "]", "\n", "return", "L", "\n", "", "else", ":", "\n", "\t\t\t", "eigvals", ",", "Q_tilde", "=", "np", ".", "linalg", ".", "eigh", "(", "nx", ".", "laplacian_matrix", "(", "self", ".", "G", ")", ".", "toarray", "(", ")", ")", "\n", "eigvals", "=", "eigvals", "[", ":", "num_eigen", "]", "\n", "Q_tilde", "=", "Q_tilde", "[", ":", ",", ":", "num_eigen", "]", "\n", "self", ".", "nodelist", "=", "self", ".", "G", ".", "nodes", "(", ")", "\n", "self", ".", "K", "=", "L", ".", "shape", "[", "0", "]", "\n", "return", "eigvals", ",", "Q_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.fit": [[160, 189], ["models.StratifiedModel.loss.setup", "models.StratifiedModel.compute_graph_data", "models.StratifiedModel.compute_graph_data", "models.StratifiedModel.loss.prox", "models.G_to_data", "strat_models.fit.fit_stratified_model", "strat_models.fit.fit_stratified_model", "models.transfer_result_to_G", "models.G_to_data_eigen", "strat_models.fit.fit_eigen_stratified_model", "strat_models.fit.fit_eigen_stratified_model", "models.transfer_result_to_G_eigen", "len", "len", "models.StratifiedModel.G.nodes", "models.StratifiedModel.G.nodes"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.setup", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.compute_graph_data", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.compute_graph_data", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.prox", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.G_to_data", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.fit.fit_stratified_model", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.fit.fit_stratified_model", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.transfer_result_to_G", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.G_to_data_eigen", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.fit.fit_eigen_stratified_model", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.fit.fit_eigen_stratified_model", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.transfer_result_to_G_eigen"], ["", "", "def", "fit", "(", "self", ",", "data", ",", "num_eigen", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "#calculate Laplacian matrix", "\n", "\t\t", "if", "num_eigen", "is", "None", "or", "num_eigen", "<=", "0", "or", "num_eigen", ">=", "len", "(", "self", ".", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "L", "=", "self", ".", "compute_graph_data", "(", "num_eigen", ")", "\n", "", "else", ":", "\n", "\t\t\t", "eigvals", ",", "Q_tilde", "=", "self", ".", "compute_graph_data", "(", "num_eigen", ")", "\n", "\n", "", "cache", "=", "self", ".", "loss", ".", "setup", "(", "data", ",", "self", ".", "G", ")", "\n", "\n", "#proximals", "\n", "def", "l_prox", "(", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t\t", "return", "self", ".", "loss", ".", "prox", "(", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", "\n", "\n", "", "r_prox", "=", "self", ".", "local_reg", ".", "prox", "\n", "\n", "#G_data", "\n", "if", "num_eigen", "is", "None", "or", "num_eigen", "<=", "0", "or", "num_eigen", ">=", "len", "(", "self", ".", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "G_data", "=", "G_to_data", "(", "self", ".", "G", ",", "cache", "[", "'theta_shape'", "]", ")", "\n", "result", ",", "info", "=", "fit_stratified_model", "(", "\n", "L", ",", "cache", "[", "'shape'", "]", ",", "l_prox", ",", "r_prox", ",", "G_data", "=", "G_data", ",", "**", "kwargs", ")", "\n", "transfer_result_to_G", "(", "result", ",", "self", ".", "G", ")", "\n", "", "else", ":", "\n", "\t\t\t", "G_data", "=", "G_to_data_eigen", "(", "self", ".", "G", ",", "cache", "[", "'shape'", "]", ",", "cache", "[", "'theta_shape'", "]", ",", "num_eigen", ")", "\n", "result", ",", "info", "=", "fit_eigen_stratified_model", "(", "\n", "Q_tilde", ",", "eigvals", ",", "cache", "[", "'shape'", "]", ",", "l_prox", ",", "r_prox", ",", "G_data", "=", "G_data", ",", "**", "kwargs", ")", "\n", "transfer_result_to_G_eigen", "(", "result", ",", "self", ".", "G", ")", "\n", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.scores": [[190, 192], ["models.StratifiedModel.base_model.loss.scores"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.scores"], ["", "def", "scores", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "return", "self", ".", "base_model", ".", "loss", ".", "scores", "(", "data", ",", "self", ".", "G", ")", "\n", "", "def", "anll", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.anll": [[192, 194], ["models.StratifiedModel.base_model.loss.anll"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll"], ["", "def", "anll", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "return", "self", ".", "base_model", ".", "loss", ".", "anll", "(", "data", ",", "self", ".", "G", ")", "\n", "", "def", "predict", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.predict": [[194, 196], ["models.StratifiedModel.base_model.loss.predict"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "return", "self", ".", "base_model", ".", "loss", ".", "predict", "(", "data", ",", "self", ".", "G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.StratifiedModel.sample": [[197, 203], ["NotImplementedError", "models.StratifiedModel.base_model.loss.sample"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.sample"], ["", "def", "sample", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "isDistribution", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "\"This model is not a distribution.\"", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "base_model", ".", "loss", ".", "sample", "(", "data", ",", "self", ".", "G", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.G_to_data": [[12, 41], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "G.nodes"], "function", ["None"], ["def", "G_to_data", "(", "G", ",", "shape", ")", ":", "\n", "\t", "\"\"\"Vectorizes the variables in G and returns a dictionary.\"\"\"", "\n", "theta_init", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "theta_tilde_init", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "theta_hat_init", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "u_init", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "u_tilde_init", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'theta'", "in", "vertex", ":", "\n", "\t\t\t", "theta_init", "[", "i", "]", "=", "vertex", "[", "'theta'", "]", "\n", "", "if", "'theta_tilde'", "in", "vertex", ":", "\n", "\t\t\t", "theta_tilde_init", "[", "i", "]", "=", "vertex", "[", "'theta_tilde'", "]", "\n", "", "if", "'theta_hat'", "in", "vertex", ":", "\n", "\t\t\t", "theta_hat_init", "[", "i", "]", "=", "vertex", "[", "'theta_hat'", "]", "\n", "", "if", "'u'", "in", "vertex", ":", "\n", "\t\t\t", "u_init", "[", "i", "]", "=", "vertex", "[", "'u'", "]", "\n", "", "if", "'u_tilde'", "in", "vertex", ":", "\n", "\t\t\t", "u_tilde_init", "[", "i", "]", "=", "vertex", "[", "'u_tilde'", "]", "\n", "\n", "", "", "data", "=", "{", "\n", "'theta_init'", ":", "theta_init", ",", "\n", "'theta_tilde_init'", ":", "theta_tilde_init", ",", "\n", "'theta_hat_init'", ":", "theta_hat_init", ",", "\n", "'u_init'", ":", "u_init", ",", "\n", "'u_tilde_init'", ":", "u_tilde_init", ",", "\n", "}", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.transfer_result_to_G": [[42, 57], ["enumerate", "G.nodes"], "function", ["None"], ["", "def", "transfer_result_to_G", "(", "result", ",", "G", ")", ":", "\n", "\t", "\"\"\"Puts solution vectors into a graph G\"\"\"", "\n", "theta", "=", "result", "[", "'theta'", "]", "\n", "theta_tilde", "=", "result", "[", "'theta_tilde'", "]", "\n", "theta_hat", "=", "result", "[", "'theta_hat'", "]", "\n", "u", "=", "result", "[", "'u'", "]", "\n", "u_tilde", "=", "result", "[", "'u_tilde'", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "vertex", "[", "'theta'", "]", "=", "theta", "[", "i", "]", "\n", "vertex", "[", "'theta_tilde'", "]", "=", "theta_tilde", "[", "i", "]", "\n", "vertex", "[", "'theta_hat'", "]", "=", "theta_hat", "[", "i", "]", "\n", "vertex", "[", "'u'", "]", "=", "u", "[", "i", "]", "\n", "vertex", "[", "'u_tilde'", "]", "=", "u_tilde", "[", "i", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.G_to_data_eigen": [[58, 87], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "G.nodes"], "function", ["None"], ["", "def", "G_to_data_eigen", "(", "G", ",", "shape", ",", "theta_shape", ",", "num_eigen", ")", ":", "\n", "\t", "\"\"\"Vectorizes the variables in G and returns a dictionary.\"\"\"", "\n", "theta_init", "=", "np", ".", "zeros", "(", "theta_shape", ")", "\n", "theta_tilde_init", "=", "np", ".", "zeros", "(", "theta_shape", ")", "\n", "Z_init", "=", "np", ".", "zeros", "(", "shape", "+", "(", "num_eigen", ",", ")", ")", "\n", "u_init", "=", "np", ".", "zeros", "(", "theta_shape", ")", "\n", "u_tilde_init", "=", "np", ".", "zeros", "(", "theta_shape", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'theta'", "in", "vertex", ":", "\n", "\t\t\t", "theta_init", "[", "i", "]", "=", "vertex", "[", "'theta'", "]", "\n", "", "if", "'theta_tilde'", "in", "vertex", ":", "\n", "\t\t\t", "theta_tilde_init", "[", "i", "]", "=", "vertex", "[", "'theta_tilde'", "]", "\n", "", "if", "'Z'", "in", "vertex", ":", "\n", "\t\t\t", "Z_init", "[", "i", "]", "=", "vertex", "[", "'Z'", "]", "\n", "", "if", "'u'", "in", "vertex", ":", "\n", "\t\t\t", "u_init", "[", "i", "]", "=", "vertex", "[", "'u'", "]", "\n", "", "if", "'u_tilde'", "in", "vertex", ":", "\n", "\t\t\t", "u_tilde_init", "[", "i", "]", "=", "vertex", "[", "'u_tilde'", "]", "\n", "\n", "", "", "data", "=", "{", "\n", "'theta_init'", ":", "theta_init", ",", "\n", "'theta_tilde_init'", ":", "theta_tilde_init", ",", "\n", "'Z_init'", ":", "Z_init", ",", "\n", "'u_init'", ":", "u_init", ",", "\n", "'u_tilde_init'", ":", "u_tilde_init", ",", "\n", "}", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.transfer_result_to_G_eigen": [[88, 107], ["enumerate", "G.nodes"], "function", ["None"], ["", "def", "transfer_result_to_G_eigen", "(", "result", ",", "G", ")", ":", "\n", "\t", "\"\"\"Puts solution vectors into a graph G\"\"\"", "\n", "theta", "=", "result", "[", "'theta'", "]", "\n", "theta_tilde", "=", "result", "[", "'theta_tilde'", "]", "\n", "Z", "=", "result", "[", "'Z'", "]", "\n", "u", "=", "result", "[", "'u'", "]", "\n", "u_tilde", "=", "result", "[", "'u_tilde'", "]", "\n", "Q_tilde", "=", "result", "[", "'Q_tilde'", "]", "\n", "G", ".", "Q_tilde", "=", "Q_tilde", "\n", "G", ".", "Z", "=", "Z", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "vertex", "[", "'theta'", "]", "=", "theta", "[", "i", "]", "\n", "vertex", "[", "'theta_tilde'", "]", "=", "theta_tilde", "[", "i", "]", "\n", "vertex", "[", "'u'", "]", "=", "u", "[", "i", "]", "\n", "vertex", "[", "'u_tilde'", "]", "=", "u_tilde", "[", "i", "]", "\n", "vertex", "[", "'Z'", "]", "=", "Z", "\n", "vertex", "[", "\"Q_tilde\"", "]", "=", "Q_tilde", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.models.turn_into_iterable": [[108, 115], ["iter"], "function", ["None"], ["", "def", "turn_into_iterable", "(", "x", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "iter", "(", "x", ")", "\n", "", "except", "TypeError", ":", "\n", "\t\t", "return", "[", "x", "]", "\n", "", "else", ":", "\n", "\t\t", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.Regularizer.__init__": [[14, 19], ["ValueError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "if", "type", "(", "lambd", ")", "in", "[", "int", ",", "float", "]", "and", "lambd", "<", "0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"Regularization coefficient must be a nonnegative scalar.\"", ")", "\n", "\n", "", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.Regularizer.evaluate": [[20, 22], ["NotImplementedError"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "\"This method is not implemented for the parent class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.Regularizer.prox": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "\"This method is not implemented for the parent class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.zero_reg.__init__": [[28, 31], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "0", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.zero_reg.evaluate": [[32, 34], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.zero_reg.prox": [[35, 37], ["None"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "return", "nu", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.sum_squares_reg.__init__": [[39, 42], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.sum_squares_reg.evaluate": [[43, 45], ["sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "return", "(", "self", ".", "lambd", "/", "2", ")", "*", "sum", "(", "theta", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.sum_squares_reg.prox": [[46, 50], ["None"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "if", "self", ".", "lambd", "==", "0", ":", "\n", "\t\t\t", "return", "nu", "\n", "", "return", "nu", "/", "(", "1", "+", "t", "*", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.trace_reg.__init__": [[52, 55], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.trace_reg.evaluate": [[56, 58], ["numpy.trace"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "return", "np", ".", "trace", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.trace_reg.prox": [[59, 65], ["numpy.zeros", "range", "numpy.eye"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "#nu of shape K, n, n", "\n", "\t\t", "res", "=", "np", ".", "zeros", "(", "nu", ".", "shape", ")", "\n", "for", "k", "in", "range", "(", "nu", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "res", "[", "k", ",", ":", ",", ":", "]", "=", "nu", "[", "k", ",", ":", ",", ":", "]", "-", "self", ".", "lambd", "*", "t", "*", "np", ".", "eye", "(", "nu", ".", "shape", "[", "1", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.mtx_scaled_sum_squares_reg.__init__": [[70, 75], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "A", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "A", "=", "A", "\n", "self", ".", "AtA", "=", "A", ".", "T", "@", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.mtx_scaled_sum_squares_reg.evaluate": [[76, 80], ["AssertionError", "sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "if", "self", ".", "A", ".", "shape", "[", "1", "]", "!=", "theta", ".", "shape", "[", "0", "]", ":", "\n", "\t\t\t", "raise", "AssertionError", "(", "\"Dimension of scaling matrix is incompatible with dimension of vector\"", ")", "\n", "", "return", "(", "self", ".", "lambd", "/", "2", ")", "*", "sum", "(", "(", "self", ".", "A", "@", "theta", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.mtx_scaled_sum_squares_reg.prox": [[81, 90], ["numpy.linalg.inv", "numpy.eye"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "if", "self", ".", "lambd", "==", "0", ":", "\n", "\t\t\t", "return", "nu", "\n", "\n", "", "K", ",", "n", "=", "nu", ".", "shape", "\n", "\n", "inv_mtx", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "eye", "(", "n", ")", "+", "t", "*", "self", ".", "lambd", "*", "self", ".", "AtA", ")", "\n", "\n", "return", "nu", "@", "inv_mtx", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.mtx_scaled_plus_sum_squares_reg.__init__": [[95, 100], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "A", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "A", "=", "A", "\n", "self", ".", "AtA", "=", "A", ".", "T", "@", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.mtx_scaled_plus_sum_squares_reg.evaluate": [[101, 105], ["AssertionError", "sum", "sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "if", "self", ".", "A", ".", "shape", "[", "1", "]", "!=", "theta", ".", "shape", "[", "0", "]", ":", "\n", "\t\t\t", "raise", "AssertionError", "(", "\"Dimension of scaling matrix is incompatible with dimension of vector\"", ")", "\n", "", "return", "(", "self", ".", "lambd", "/", "2", ")", "*", "(", "sum", "(", "(", "self", ".", "A", "@", "theta", ")", "**", "2", ")", "+", "sum", "(", "theta", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.mtx_scaled_plus_sum_squares_reg.prox": [[106, 115], ["numpy.linalg.inv", "numpy.eye"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "if", "self", ".", "lambd", "==", "0", ":", "\n", "\t\t\t", "return", "nu", "\n", "\n", "", "K", ",", "n", "=", "nu", ".", "shape", "\n", "\n", "inv_mtx", "=", "np", ".", "linalg", ".", "inv", "(", "(", "1", "+", "t", "*", "self", ".", "lambd", ")", "*", "np", ".", "eye", "(", "n", ")", "+", "t", "*", "self", ".", "lambd", "*", "self", ".", "AtA", ")", "\n", "\n", "return", "nu", "@", "inv_mtx", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.scaled_plus_sum_squares_reg.__init__": [[120, 125], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "A", ",", "lambd", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "A", "=", "A", "\n", "self", ".", "AtA", "=", "A", ".", "T", "@", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.scaled_plus_sum_squares_reg.evaluate": [[126, 130], ["AssertionError", "sum", "sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "if", "self", ".", "A", ".", "shape", "[", "1", "]", "!=", "theta", ".", "shape", "[", "0", "]", ":", "\n", "\t\t\t", "raise", "AssertionError", "(", "\"Dimension of scaling matrix is incompatible with dimension of vector\"", ")", "\n", "", "return", "(", "self", ".", "lambd", "[", "0", "]", "/", "2", ")", "*", "sum", "(", "(", "self", ".", "A", "@", "theta", ")", "**", "2", ")", "+", "(", "self", ".", "lambd", "[", "1", "]", "/", "2", ")", "*", "sum", "(", "theta", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.scaled_plus_sum_squares_reg.prox": [[131, 140], ["numpy.linalg.inv", "numpy.eye"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "if", "self", ".", "lambd", "==", "0", ":", "\n", "\t\t\t", "return", "nu", "\n", "\n", "", "K", ",", "n", "=", "nu", ".", "shape", "\n", "\n", "inv_mtx", "=", "np", ".", "linalg", ".", "inv", "(", "(", "1", "+", "t", "*", "self", ".", "lambd", "[", "1", "]", ")", "*", "np", ".", "eye", "(", "n", ")", "+", "t", "*", "self", ".", "lambd", "[", "0", "]", "*", "self", ".", "AtA", ")", "\n", "\n", "return", "nu", "@", "inv_mtx", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.L1_reg.__init__": [[142, 144], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.L1_reg.evaluate": [[145, 147], ["sum", "abs"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "return", "self", ".", "lambd", "*", "sum", "(", "abs", "(", "theta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.L1_reg.prox": [[148, 150], ["numpy.maximum", "numpy.maximum"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "return", "np", ".", "maximum", "(", "nu", "-", "t", "*", "self", ".", "lambd", ",", "0", ")", "-", "np", ".", "maximum", "(", "-", "nu", "-", "t", "*", "self", ".", "lambd", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.L2_reg.__init__": [[152, 154], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.L2_reg.evaluate": [[155, 157], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "return", "self", ".", "lambd", "*", "np", ".", "linalg", ".", "norm", "(", "theta", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.L2_reg.prox": [[158, 163], ["range", "numpy.rollaxis", "numpy.dstack", "numpy.maximum", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "nus", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nu", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "nus", "+=", "[", "nu", "[", "i", "]", "*", "np", ".", "maximum", "(", "1", "-", "t", "*", "self", ".", "lambd", "/", "np", ".", "linalg", ".", "norm", "(", "nu", "[", "i", "]", ",", "2", ")", ",", "0", ")", "]", "\n", "", "return", "np", ".", "rollaxis", "(", "np", ".", "dstack", "(", "nus", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.elastic_net_reg.__init__": [[165, 167], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.elastic_net_reg.evaluate": [[168, 170], ["sum", "abs", "sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "return", "sum", "(", "abs", "(", "theta", ")", ")", "+", "(", "self", ".", "lambd", "/", "2", ")", "*", "sum", "(", "theta", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.elastic_net_reg.prox": [[171, 173], ["numpy.maximum", "numpy.maximum"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "return", "(", "1", "/", "(", "1", "+", "t", "*", "self", ".", "lambd", ")", ")", "*", "np", ".", "maximum", "(", "nu", "-", "t", ",", "0", ")", "-", "np", ".", "maximum", "(", "-", "nu", "-", "t", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.neg_log_reg.__init__": [[175, 177], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.neg_log_reg.evaluate": [[178, 184], ["numpy.log"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\n", "\t\t", "if", "theta", "<", "0", ":", "\n", "\t\t\t", "return", "np", ".", "inf", "\n", "\n", "", "return", "-", "self", ".", "lambd", "*", "np", ".", "log", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.neg_log_reg.prox": [[185, 187], ["numpy.sqrt"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "return", "(", "nu", "+", "np", ".", "sqrt", "(", "nu", "**", "2", "+", "4", "*", "t", "*", "self", ".", "lambd", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.nonnegative_reg.__init__": [[189, 191], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.nonnegative_reg.evaluate": [[192, 197], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "for", "theta_i", "in", "theta", ":", "\n", "\t\t\t", "if", "theta_i", "<", "0", ":", "\n", "\t\t\t\t", "return", "np", ".", "inf", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.nonnegative_reg.prox": [[198, 201], ["None"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "nu", "[", "nu", "<", "0", "]", "=", "0", "\n", "return", "nu", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.simplex_reg.__init__": [[203, 205], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.simplex_reg.evaluate": [[206, 211], ["abs", "sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "if", "theta", ">=", "0", ":", "\n", "\t\t\t", "if", "abs", "(", "sum", "(", "theta", ")", "-", "1", ")", "<=", "1e-4", ":", "\n", "\t\t\t\t", "return", "0", "\n", "", "", "return", "np", ".", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.simplex_reg.prox": [[212, 217], ["numpy.zeros", "range", "regularizers.project_onto_simplex"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.project_onto_simplex"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "new_nu", "=", "np", ".", "zeros", "(", "nu", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "nu", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "new_nu", "[", "i", ",", ":", "]", "=", "project_onto_simplex", "(", "nu", "[", "i", ",", ":", "]", ")", "\n", "", "return", "new_nu", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.min_threshold_reg_one_elem.__init__": [[219, 221], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "1e-5", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.min_threshold_reg_one_elem.evaluate": [[222, 226], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "if", "theta", "<", "self", ".", "lambd", ":", "\n", "\t\t\t", "return", "np", ".", "inf", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.min_threshold_reg_one_elem.prox": [[227, 229], ["numpy.maximum"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "return", "np", ".", "maximum", "(", "nu", ",", "self", ".", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.clip_reg.__init__": [[231, 233], ["regularizers.Regularizer.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "lambd", "=", "(", "1e-5", ",", "1", "-", "1e-5", ")", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.clip_reg.evaluate": [[234, 238], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "if", "theta", ">", "self", ".", "lambd", "[", "1", "]", "or", "theta", "<", "self", ".", "lambd", "[", "0", "]", ":", "\n", "\t\t\t", "return", "np", ".", "inf", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.clip_reg.prox": [[239, 241], ["numpy.clip"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "return", "np", ".", "clip", "(", "nu", ",", "self", ".", "lambd", "[", "0", "]", ",", "self", ".", "lambd", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.trace_offdiagL1Norm.__init__": [[246, 248], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.trace_offdiagL1Norm.evaluate": [[249, 253], ["numpy.where", "numpy.eye", "numpy.trace", "numpy.norm"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "        ", "od_idx", "=", "np", ".", "where", "(", "~", "np", ".", "eye", "(", "theta", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", ")", "\n", "\n", "return", "self", ".", "lambd", "[", "0", "]", "*", "np", ".", "trace", "(", "theta", ")", "+", "self", ".", "lambd", "[", "1", "]", "*", "np", ".", "norm", "(", "theta", "[", "od_idx", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.trace_offdiagL1Norm.prox": [[254, 271], ["numpy.where", "numpy.where", "numpy.zeros", "range", "numpy.eye", "numpy.eye", "numpy.maximum", "numpy.maximum"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ")", ":", "\n", "        ", "if", "self", ".", "lambd", "==", "(", "0", ",", "0", ")", ":", "\n", "            ", "return", "nu", "\n", "\n", "", "K", "=", "nu", ".", "shape", "[", "0", "]", "\n", "n", "=", "nu", ".", "shape", "[", "1", "]", "\n", "\n", "diag_idx", "=", "np", ".", "where", "(", "np", ".", "eye", "(", "n", ",", "dtype", "=", "bool", ")", ")", "\n", "od_idx", "=", "np", ".", "where", "(", "~", "np", ".", "eye", "(", "n", ",", "dtype", "=", "bool", ")", ")", "\n", "\n", "T", "=", "np", ".", "zeros", "(", "(", "K", ",", "n", ",", "n", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "            ", "T", "[", "k", "]", "[", "diag_idx", "]", "=", "nu", "[", "k", "]", "[", "diag_idx", "]", "-", "self", ".", "lambd", "[", "0", "]", "*", "t", "\n", "T", "[", "k", "]", "[", "od_idx", "]", "=", "np", ".", "maximum", "(", "nu", "[", "k", "]", "[", "od_idx", "]", "-", "self", ".", "lambd", "[", "1", "]", "*", "t", ",", "0", ")", "-", "np", ".", "maximum", "(", "-", "nu", "[", "k", "]", "[", "od_idx", "]", "-", "self", ".", "lambd", "[", "1", "]", "*", "t", ",", "0", ")", "\n", "\n", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.regularizers.project_onto_simplex": [[275, 311], ["numpy.ones", "numpy.argsort", "len", "regularizers.project_onto_simplex.bisectsearch"], "function", ["None"], ["", "", "def", "project_onto_simplex", "(", "y", ")", ":", "\n", "\n", "\t", "a", "=", "np", ".", "ones", "(", "len", "(", "y", ")", ")", "\n", "l", "=", "y", "\n", "idx", "=", "np", ".", "argsort", "(", "l", ")", "\n", "d", "=", "len", "(", "l", ")", "\n", "\n", "evalpL", "=", "lambda", "k", ":", "np", ".", "sum", "(", "a", "[", "idx", "[", "k", ":", "]", "]", "*", "(", "y", "[", "idx", "[", "k", ":", "]", "]", "-", "l", "[", "idx", "[", "k", "]", "]", "*", "a", "[", "idx", "[", "k", ":", "]", "]", ")", ")", "-", "1", "\n", "\n", "\n", "def", "bisectsearch", "(", ")", ":", "\n", "\t\t", "idxL", ",", "idxH", "=", "0", ",", "d", "-", "1", "\n", "L", "=", "evalpL", "(", "idxL", ")", "\n", "H", "=", "evalpL", "(", "idxH", ")", "\n", "\n", "if", "L", "<", "0", ":", "\n", "\t\t\t", "return", "idxL", "\n", "\n", "", "while", "(", "idxH", "-", "idxL", ")", ">", "1", ":", "\n", "\t\t\t", "iMid", "=", "int", "(", "(", "idxL", "+", "idxH", ")", "/", "2", ")", "\n", "M", "=", "evalpL", "(", "iMid", ")", "\n", "\n", "if", "M", ">", "0", ":", "\n", "\t\t\t\t", "idxL", ",", "L", "=", "iMid", ",", "M", "\n", "", "else", ":", "\n", "\t\t\t\t", "idxH", ",", "H", "=", "iMid", ",", "M", "\n", "\n", "", "", "return", "idxH", "\n", "\n", "", "k", "=", "bisectsearch", "(", ")", "\n", "lam", "=", "(", "np", ".", "sum", "(", "a", "[", "idx", "[", "k", ":", "]", "]", "*", "y", "[", "idx", "[", "k", ":", "]", "]", ")", "-", "1", ")", "/", "np", ".", "sum", "(", "a", "[", "idx", "[", "k", ":", "]", "]", ")", "\n", "\n", "small_eps", "=", "1e-6", "#small amount so that prob can never be 0", "\n", "x", "=", "np", ".", "maximum", "(", "0", "+", "small_eps", ",", "y", "-", "lam", ")", "\n", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.set_edge_weight": [[3, 7], ["G.edges"], "function", ["None"], ["\n", "\n", "def", "latexify", "(", "fig_width", "=", "None", ",", "fig_height", "=", "None", ",", "columns", "=", "1", ",", "fontsize", "=", "12", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.cartesian_product": [[9, 18], ["networkx.cartesian_product", "range", "nx.cartesian_product.nodes", "networkx.relabel_nodes", "len", "networkx.cartesian_product", "tuple", "utils.flatten"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.cartesian_product", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.cartesian_product", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.flatten"], ["\n", "\n", "# code adapted from http://www.scipy.org/Cookbook/Matplotlib/LaTeX_Examples", "\n", "\n", "# Width and max height in inches for IEEE journals taken from", "\n", "# computer.org/cms/Computer.org/Journal%20templates/transactions_art_guide.pdf", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.flatten": [[20, 27], ["isinstance", "utils.flatten"], "function", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.utils.flatten"], ["assert", "(", "columns", "in", "[", "1", ",", "2", "]", ")", "\n", "\n", "if", "fig_width", "is", "None", ":", "\n", "        ", "fig_width", "=", "3.39", "if", "columns", "==", "1", "else", "6.9", "# width in inches", "\n", "\n", "", "if", "fig_height", "is", "None", ":", "\n", "        ", "golden_mean", "=", "(", "np", ".", "sqrt", "(", "5", ")", "-", "1.0", ")", "/", "2.0", "# Aesthetic ratio", "\n", "fig_height", "=", "fig_width", "*", "golden_mean", "# height in inches", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.__init__": [[22, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.evaluate": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "\"This method is not implemented for the parent class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.setup": [[28, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "K", ")", ":", "\n", "\t\t", "\"\"\"This function has any important setup required for the problem.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"This method is not implemented for the parent class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.prox": [[32, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "data", ",", "warm_start", ",", "pool", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "(", "\"This method is not implemented for the parent class.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.Loss.anll": [[35, 37], ["numpy.mean", "losses.Loss.logprob"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.logprob"], ["", "def", "anll", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "return", "-", "np", ".", "mean", "(", "self", ".", "logprob", "(", "data", ",", "G", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.__init__": [[111, 115], ["losses.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "intercept", "=", "False", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isDistribution", "=", "False", "\n", "self", ".", "intercept", "=", "intercept", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.evaluate": [[116, 119], ["sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ",", "data", ")", ":", "\n", "\t\t", "assert", "'X'", "in", "data", "and", "'Y'", "in", "data", "\n", "return", "sum", "(", "(", "theta", "@", "data", "[", "'X'", "]", "-", "data", "[", "'Y'", "]", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.setup": [[120, 167], ["len", "zip", "torch.zeros().double", "torch.zeros().double", "enumerate", "torch.cat.reshape", "G.nodes", "G.nodes", "torch.zeros", "torch.zeros", "torch.tensor().double", "torch.tensor().double", "torch.cat", "torch.cat.t", "torch.cat.t", "torch.tensor", "torch.tensor", "torch.ones_like().unsqueeze", "torch.ones_like"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "X", "=", "data", "[", "'X'", "]", "\n", "Y", "=", "data", "[", "'Y'", "]", "\n", "Z", "=", "data", "[", "'Z'", "]", "\n", "\n", "if", "X", ".", "ndim", "==", "1", ":", "\n", "\t\t\t", "X", "=", "X", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "N", ",", "n", "=", "X", ".", "shape", "\n", "_", ",", "m", "=", "Y", ".", "shape", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "\t\t\t", "n", "=", "n", "+", "1", "\n", "\n", "", "K", "=", "len", "(", "G", ".", "nodes", "(", ")", ")", "\n", "\n", "shape", "=", "(", "n", ",", "m", ")", "\n", "theta_shape", "=", "(", "K", ",", ")", "+", "shape", "\n", "\n", "for", "x", ",", "y", ",", "z", "in", "zip", "(", "X", ",", "Y", ",", "Z", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "z", "]", "\n", "if", "'X'", "in", "vertex", ":", "\n", "\t\t\t\t", "vertex", "[", "'X'", "]", "+=", "[", "x", "]", "\n", "vertex", "[", "'Y'", "]", "+=", "[", "y", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "vertex", "[", "'X'", "]", "=", "[", "x", "]", "\n", "vertex", "[", "'Y'", "]", "=", "[", "y", "]", "\n", "\n", "", "", "XtX", "=", "torch", ".", "zeros", "(", "K", ",", "n", ",", "n", ")", ".", "double", "(", ")", "\n", "XtY", "=", "torch", ".", "zeros", "(", "K", ",", "n", ",", "m", ")", ".", "double", "(", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'Y'", "in", "vertex", ":", "\n", "\t\t\t\t", "X", "=", "torch", ".", "tensor", "(", "vertex", "[", "'X'", "]", ")", ".", "double", "(", ")", "\n", "Y", "=", "torch", ".", "tensor", "(", "vertex", "[", "'Y'", "]", ")", ".", "double", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "\t\t\t\t\t", "X", "=", "torch", ".", "cat", "(", "\n", "[", "X", ",", "torch", ".", "ones_like", "(", "X", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "\n", "", "XtX", "[", "i", "]", "=", "X", ".", "t", "(", ")", "@", "X", "\n", "XtY", "[", "i", "]", "=", "X", ".", "t", "(", ")", "@", "Y", "\n", "del", "vertex", "[", "'X'", "]", "\n", "del", "vertex", "[", "'Y'", "]", "\n", "\n", "", "", "cache", "=", "{", "'XtX'", ":", "XtX", ",", "'XtY'", ":", "XtY", ",", "'n'", ":", "n", ",", "'theta_shape'", ":", "theta_shape", ",", "'shape'", ":", "shape", "}", "\n", "return", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.prox": [[169, 182], ["torch.lu", "torch.lu_solve", "torch.lu_solve.numpy", "torch.from_numpy", "torch.eye().unsqueeze().double", "torch.eye().unsqueeze", "torch.eye"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", ":", "\n", "# raise NotImplementedError(\"This method is not yet done!!!\")", "\n", "\n", "\t\t", "XtX", "=", "cache", "[", "'XtX'", "]", "\n", "XtY", "=", "cache", "[", "'XtY'", "]", "\n", "n", "=", "cache", "[", "'n'", "]", "\n", "\n", "A_LU", "=", "torch", ".", "lu", "(", "\n", "XtX", "+", "1.", "/", "(", "2", "*", "t", ")", "*", "torch", ".", "eye", "(", "n", ")", ".", "unsqueeze", "(", "0", ")", ".", "double", "(", ")", ")", "\n", "b", "=", "XtY", "+", "1.", "/", "(", "2", "*", "t", ")", "*", "torch", ".", "from_numpy", "(", "nu", ")", "\n", "x", "=", "torch", ".", "lu_solve", "(", "b", ",", "*", "A_LU", ")", "\n", "\n", "return", "x", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.predict": [[183, 191], ["torch.from_numpy", "torch.tensor", "torch.cat", "torch.ones_like().unsqueeze", "torch.ones_like", "torch.cat.unsqueeze"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "X", "=", "torch", ".", "from_numpy", "(", "data", "[", "\"X\"", "]", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "\t\t\t", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "torch", ".", "ones_like", "(", "X", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "\n", "", "theta", "=", "torch", ".", "tensor", "(", "(", "[", "G", ".", "_node", "[", "z", "]", "[", "'theta_tilde'", "]", "for", "z", "in", "data", "[", "\"Z\"", "]", "]", ")", ")", "\n", "return", "(", "X", ".", "unsqueeze", "(", "-", "1", ")", "*", "theta", ")", ".", "sum", "(", "1", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.scores": [[192, 195], ["losses.sum_squares_loss.predict", "numpy.sqrt", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict"], ["", "def", "scores", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "predictions", "=", "self", ".", "predict", "(", "data", ",", "G", ")", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "data", "[", "\"Y\"", "]", "-", "predictions", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.sum_squares_loss.logprob": [[196, 198], ["losses.sum_squares_loss.scores"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.scores"], ["", "def", "logprob", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "return", "self", ".", "scores", "(", "data", ",", "G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.__init__": [[203, 207], ["losses.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "intercept", "=", "False", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isDistribution", "=", "False", "\n", "self", ".", "intercept", "=", "intercept", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.evaluate": [[208, 211], ["sum", "numpy.log", "numpy.exp"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ",", "data", ")", ":", "\n", "\t\t", "assert", "\"X\"", "in", "data", "and", "\"Y\"", "in", "data", "\n", "return", "sum", "(", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "-", "data", "[", "\"Y\"", "]", "*", "theta", "@", "data", "[", "\"X\"", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.setup": [[212, 253], ["sklearn.preprocessing.LabelEncoder", "losses.logistic_loss.le.fit_transform().copy", "len", "len", "zip", "enumerate", "G.nodes", "G.nodes", "losses.logistic_loss.le.fit_transform", "torch.cat", "torch.tensor", "torch.tensor", "torch.ones_like().unsqueeze", "torch.ones_like"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "X", "=", "data", "[", "\"X\"", "]", "\n", "Y", "=", "data", "[", "\"Y\"", "]", "\n", "Z", "=", "data", "[", "\"Z\"", "]", "\n", "\n", "self", ".", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "Y", "=", "self", ".", "le", ".", "fit_transform", "(", "Y", ")", ".", "copy", "(", ")", "\n", "num_classes", "=", "len", "(", "self", ".", "le", ".", "classes_", ")", "\n", "\n", "K", "=", "len", "(", "G", ".", "nodes", "(", ")", ")", "\n", "n", "=", "X", ".", "shape", "[", "1", "]", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "\t\t\t", "n", "=", "n", "+", "1", "\n", "\n", "", "shape", "=", "(", "n", ",", "num_classes", ")", "\n", "theta_shape", "=", "(", "K", ",", ")", "+", "shape", "\n", "\n", "for", "x", ",", "y", ",", "z", "in", "zip", "(", "X", ",", "Y", ",", "Z", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "z", "]", "\n", "if", "'X'", "in", "vertex", ":", "\n", "\t\t\t\t", "vertex", "[", "'X'", "]", "+=", "[", "x", "]", "\n", "vertex", "[", "'Y'", "]", "+=", "[", "y", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "vertex", "[", "'X'", "]", "=", "[", "x", "]", "\n", "vertex", "[", "'Y'", "]", "=", "[", "y", "]", "\n", "\n", "", "", "XY_data", "=", "[", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'Y'", "in", "vertex", ":", "\n", "\t\t\t\t", "X", ",", "Y", "=", "torch", ".", "tensor", "(", "vertex", "[", "'X'", "]", ")", ",", "torch", ".", "tensor", "(", "vertex", "[", "'Y'", "]", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "torch", ".", "ones_like", "(", "X", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "XY_data", "+=", "[", "(", "X", ",", "Y", ")", "]", "\n", "del", "vertex", "[", "'X'", "]", "\n", "del", "vertex", "[", "'Y'", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "XY_data", "+=", "[", "None", "]", "\n", "\n", "", "", "cache", "=", "{", "\"XY\"", ":", "XY_data", ",", "'n'", ":", "n", ",", "'theta_shape'", ":", "theta_shape", ",", "'shape'", ":", "shape", ",", "'K'", ":", "K", "}", "\n", "return", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.prox": [[254, 257], ["pool.starmap", "numpy.array", "zip", "numpy.ones"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", ":", "\n", "\t\t", "res", "=", "pool", ".", "starmap", "(", "log_reg_prox", ",", "zip", "(", "cache", "[", "\"XY\"", "]", ",", "nu", ",", "warm_start", ",", "t", "*", "np", ".", "ones", "(", "cache", "[", "\"K\"", "]", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.logprob": [[258, 264], ["torch.from_numpy", "losses.logistic_loss.scores", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "losses.logistic_loss.le.transform", "torch.nn.CrossEntropyLoss.numpy"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.scores"], ["", "def", "logprob", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "torch", ".", "from_numpy", "(", "self", ".", "le", ".", "transform", "(", "data", "[", "\"Y\"", "]", ")", ")", "\n", "scores", "=", "self", ".", "scores", "(", "data", ",", "G", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "l", "=", "loss", "(", "scores", ",", "Y", ")", "\n", "return", "-", "l", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.scores": [[265, 271], ["torch.from_numpy", "torch.cat", "torch.tensor", "torch.ones_like().unsqueeze", "torch.cat.unsqueeze", "torch.ones_like"], "methods", ["None"], ["", "def", "scores", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "X", "=", "torch", ".", "from_numpy", "(", "data", "[", "\"X\"", "]", ")", "\n", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "torch", ".", "ones_like", "(", "X", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "theta", "=", "torch", ".", "tensor", "(", "(", "[", "G", ".", "_node", "[", "z", "]", "[", "'theta_tilde'", "]", "for", "z", "in", "data", "[", "\"Z\"", "]", "]", ")", ")", "\n", "scores", "=", "(", "X", ".", "unsqueeze", "(", "-", "1", ")", "*", "theta", ")", ".", "sum", "(", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.predict": [[272, 279], ["losses.logistic_loss.scores", "losses.logistic_loss.le.inverse_transform", "torch.argmax().numpy", "torch.nn.Softmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.logistic_loss.scores"], ["", "def", "predict", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "probs", "=", "False", "\n", "scores", "=", "self", ".", "scores", "(", "data", ",", "G", ")", "\n", "if", "probs", ":", "\n", "\t\t\t", "return", "torch", ".", "nn", ".", "Softmax", "(", "1", ")", "(", "scores", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "le", ".", "inverse_transform", "(", "torch", ".", "argmax", "(", "scores", ",", "1", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.covariance_max_likelihood_loss.__init__": [[284, 287], ["losses.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isDistribution", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.covariance_max_likelihood_loss.evaluate": [[288, 291], ["numpy.trace", "numpy.linalg.slogdet"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ",", "data", ")", ":", "\n", "        ", "assert", "\"Y\"", "in", "data", "\n", "return", "np", ".", "trace", "(", "theta", "@", "data", "[", "\"Y\"", "]", ")", "-", "np", ".", "linalg", ".", "slogdet", "(", "theta", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.covariance_max_likelihood_loss.setup": [[292, 321], ["len", "zip", "enumerate", "G.nodes", "G.nodes"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "        ", "Y", "=", "data", "[", "\"Y\"", "]", "\n", "Z", "=", "data", "[", "\"Z\"", "]", "\n", "\n", "K", "=", "len", "(", "G", ".", "nodes", "(", ")", ")", "\n", "\n", "shape", "=", "(", "data", "[", "\"n\"", "]", ",", "data", "[", "\"n\"", "]", ")", "\n", "theta_shape", "=", "(", "K", ",", ")", "+", "shape", "\n", "\n", "#preprocess data", "\n", "for", "y", ",", "z", "in", "zip", "(", "Y", ",", "Z", ")", ":", "\n", "            ", "vertex", "=", "G", ".", "_node", "[", "z", "]", "\n", "if", "\"Y\"", "in", "vertex", ":", "\n", "                ", "vertex", "[", "\"Y\"", "]", "+=", "[", "y", "]", "\n", "", "else", ":", "\n", "                ", "vertex", "[", "\"Y\"", "]", "=", "[", "y", "]", "\n", "\n", "", "", "Y_data", "=", "[", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "            ", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'Y'", "in", "vertex", ":", "\n", "                ", "Y", "=", "vertex", "[", "'Y'", "]", "\n", "Y_data", "+=", "[", "Y", "]", "\n", "del", "vertex", "[", "'Y'", "]", "\n", "", "else", ":", "\n", "                ", "Y_data", "+=", "[", "None", "]", "\n", "\n", "", "", "cache", "=", "{", "\"Y\"", ":", "Y_data", ",", "\"n\"", ":", "data", "[", "\"n\"", "]", ",", "\"theta_shape\"", ":", "theta_shape", ",", "\"shape\"", ":", "shape", ",", "\"K\"", ":", "K", "}", "\n", "return", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.covariance_max_likelihood_loss.prox": [[322, 328], ["pool.starmap", "numpy.array", "zip", "numpy.ones"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", ":", "\n", "        ", "\"\"\"\n        Proximal operator for joint covariance estimation\n        \"\"\"", "\n", "res", "=", "pool", ".", "starmap", "(", "joint_cov_prox", ",", "zip", "(", "cache", "[", "\"Y\"", "]", ",", "nu", ",", "warm_start", ",", "t", "*", "np", ".", "ones", "(", "cache", "[", "\"K\"", "]", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.covariance_max_likelihood_loss.logprob": [[329, 344], ["zip", "numpy.trace", "numpy.zeros", "numpy.linalg.slogdet"], "methods", ["None"], ["", "def", "logprob", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\n", "        ", "logprobs", "=", "[", "]", "\n", "\n", "for", "y", ",", "z", "in", "zip", "(", "data", "[", "\"Y\"", "]", ",", "data", "[", "\"Z\"", "]", ")", ":", "\n", "            ", "n", ",", "nk", "=", "y", ".", "shape", "\n", "Y", "=", "(", "y", "@", "y", ".", "T", ")", "/", "nk", "\n", "\n", "if", "(", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "==", "Y", ")", ".", "all", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "theta", "=", "G", ".", "_node", "[", "z", "]", "[", "\"theta_tilde\"", "]", "\n", "logprobs", "+=", "[", "np", ".", "linalg", ".", "slogdet", "(", "theta", ")", "[", "1", "]", "-", "np", ".", "trace", "(", "Y", "@", "theta", ")", "]", "\n", "\n", "", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.covariance_max_likelihood_loss.sample": [[345, 351], ["losses.turn_into_iterable", "numpy.linalg.inv", "numpy.random.multivariate_normal", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "sample", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "        ", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "sigmas", "=", "[", "np", ".", "linalg", ".", "inv", "(", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", ")", "for", "z", "in", "Z", "]", "\n", "\n", "n", "=", "sigmas", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "return", "[", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "n", ")", ",", "sigma", ")", "for", "sigma", "in", "sigmas", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_loss.__init__": [[353, 356], ["losses.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isDistribution", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_loss.evaluate": [[357, 359], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ",", "data", ")", ":", "\n", "\t\t", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_loss.setup": [[360, 391], ["sklearn.preprocessing.LabelEncoder", "losses.nonparametric_discrete_loss.le.fit_transform().copy", "len", "len", "zip", "numpy.zeros", "enumerate", "G.nodes", "G.nodes", "losses.nonparametric_discrete_loss.le.fit_transform", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "data", "[", "\"Y\"", "]", "\n", "Z", "=", "data", "[", "\"Z\"", "]", "\n", "\n", "self", ".", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "Y", "=", "self", ".", "le", ".", "fit_transform", "(", "Y", ")", ".", "copy", "(", ")", "\n", "num_classes", "=", "len", "(", "self", ".", "le", ".", "classes_", ")", "\n", "\n", "K", "=", "len", "(", "G", ".", "nodes", "(", ")", ")", "\n", "\n", "shape", "=", "(", "num_classes", ",", ")", "\n", "theta_shape", "=", "(", "K", ",", ")", "+", "shape", "\n", "\n", "for", "y", ",", "z", "in", "zip", "(", "Y", ",", "Z", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "z", "]", "\n", "if", "\"Y\"", "not", "in", "vertex", ":", "\n", "\t\t\t\t", "vertex", "[", "'Y'", "]", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "", "vertex", "[", "'Y'", "]", "[", "y", "]", "+=", "1", "\n", "\n", "", "Y_data", "=", "[", "]", "\n", "counts", "=", "np", ".", "zeros", "(", "(", "K", ",", "num_classes", ")", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'Y'", "in", "vertex", ":", "\n", "\t\t\t\t", "Y_data", "+=", "[", "vertex", "[", "'Y'", "]", "]", "\n", "del", "vertex", "[", "'Y'", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "Y_data", "+=", "[", "np", ".", "zeros", "(", "num_classes", ")", "]", "\n", "\n", "", "", "cache", "=", "{", "\"Y\"", ":", "Y_data", ",", "'num_classes'", ":", "num_classes", ",", "'theta_shape'", ":", "theta_shape", ",", "'shape'", ":", "shape", ",", "'K'", ":", "K", "}", "\n", "return", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_loss.prox": [[392, 395], ["pool.starmap", "numpy.array", "zip", "numpy.ones"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", ":", "\n", "\t\t", "res", "=", "pool", ".", "starmap", "(", "nonparametric_discrete_prox", ",", "zip", "(", "cache", "[", "\"Y\"", "]", ",", "nu", ",", "warm_start", ",", "t", "*", "np", ".", "ones", "(", "cache", "[", "\"K\"", "]", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_loss.logprob": [[396, 415], ["losses.turn_into_iterable", "losses.turn_into_iterable", "zip", "int", "nodes.keys", "losses.nonparametric_discrete_loss.le.transform", "torch.from_numpy", "torch.from_numpy().type", "nodes.keys", "numpy.zeros", "torch.from_numpy", "torch.log", "torch.sum", "torch.sum", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "logprob", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "turn_into_iterable", "(", "self", ".", "le", ".", "transform", "(", "data", "[", "\"Y\"", "]", ")", ")", "\n", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "\n", "nodes", "=", "{", "}", "\n", "for", "y", ",", "z", "in", "zip", "(", "Y", ",", "Z", ")", ":", "\n", "\t\t\t", "if", "z", "not", "in", "nodes", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "nodes", "[", "z", "]", "=", "np", ".", "zeros", "(", "(", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", ")", ".", "shape", ")", "\n", "", "nodes", "[", "z", "]", "[", "y", "]", "+=", "1", "\n", "\n", "", "dim", "=", "int", "(", "(", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", ")", ".", "shape", "[", "0", "]", ")", "\n", "\n", "logprobs", "=", "[", "]", "\n", "for", "z", "in", "nodes", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "theta", "=", "torch", ".", "from_numpy", "(", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", ")", "\n", "Y_tch", "=", "torch", ".", "from_numpy", "(", "nodes", "[", "z", "]", ")", ".", "type", "(", "torch", ".", "float64", ")", "\n", "loss", "=", "(", "Y_tch", "@", "theta", "-", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "theta", ")", ")", ")", "*", "torch", ".", "sum", "(", "Y_tch", ")", ")", ".", "numpy", "(", ")", "\n", "logprobs", "+=", "[", "loss", "/", "dim", "]", "\n", "", "return", "logprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_loss.sample": [[416, 420], ["losses.turn_into_iterable", "scipy.stats.multinomial.rvs"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "sample", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "parameter", "=", "[", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", "for", "z", "in", "Z", "]", "\n", "return", "multinomial", ".", "rvs", "(", "n", "=", "1", ",", "p", "=", "parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.poisson_loss.__init__": [[426, 432], ["losses.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "min_theta", "=", "1e-5", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isDistribution", "=", "True", "\n", "\n", "#cannot allow theta to be exactly equal to 0 for rounding errors", "\n", "self", ".", "min_theta", "=", "min_theta", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.poisson_loss.evaluate": [[433, 437], ["len", "float", "numpy.log", "sum"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ",", "data", ")", ":", "\n", "\t\t", "y", "=", "data", "[", "\"Y\"", "]", "\n", "N", "=", "len", "(", "data", "[", "\"Y\"", "]", ")", "\n", "return", "float", "(", "N", "*", "theta", "-", "np", ".", "log", "(", "theta", ")", "*", "sum", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.poisson_loss.setup": [[438, 466], ["len", "zip", "numpy.zeros", "numpy.zeros", "enumerate", "G.nodes", "G.nodes", "numpy.sum", "len"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "data", "[", "\"Y\"", "]", "\n", "Z", "=", "data", "[", "\"Z\"", "]", "\n", "\n", "K", "=", "len", "(", "G", ".", "nodes", "(", ")", ")", "\n", "\n", "shape", "=", "(", "1", ",", ")", "\n", "theta_shape", "=", "(", "K", ",", ")", "+", "shape", "\n", "\n", "#preprocess data", "\n", "for", "y", ",", "z", "in", "zip", "(", "Y", ",", "Z", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "z", "]", "\n", "if", "\"Y\"", "in", "vertex", ":", "\n", "\t\t\t\t", "vertex", "[", "\"Y\"", "]", "+=", "[", "y", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "vertex", "[", "\"Y\"", "]", "=", "[", "y", "]", "\n", "\n", "", "", "S", "=", "np", ".", "zeros", "(", "(", "K", ",", "1", ")", ")", "\n", "N", "=", "np", ".", "zeros", "(", "(", "K", ",", "1", ")", ")", "\n", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "\"Y\"", "in", "vertex", ":", "\n", "\t\t\t\t", "S", "[", "i", "]", "=", "np", ".", "sum", "(", "vertex", "[", "\"Y\"", "]", ")", "\n", "N", "[", "i", "]", "=", "len", "(", "vertex", "[", "\"Y\"", "]", ")", "\n", "\n", "", "", "cache", "=", "{", "\"S\"", ":", "S", ",", "\"N\"", ":", "N", ",", "\"theta_shape\"", ":", "theta_shape", ",", "\"shape\"", ":", "shape", ",", "\"K\"", ":", "K", "}", "\n", "return", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.poisson_loss.prox": [[467, 476], ["numpy.maximum", "numpy.sqrt"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", ":", "\n", "\t\t", "S", "=", "cache", "[", "\"S\"", "]", "\n", "N", "=", "cache", "[", "\"N\"", "]", "\n", "b", "=", "t", "*", "N", "-", "nu", "\n", "c", "=", "-", "t", "*", "S", "\n", "\n", "theta", "=", "(", "-", "b", "+", "np", ".", "sqrt", "(", "b", "**", "2", "-", "4", "*", "c", ")", ")", "/", "2.", "\n", "\n", "return", "np", ".", "maximum", "(", "theta", ",", "self", ".", "min_theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.poisson_loss.logprob": [[477, 482], ["losses.turn_into_iterable", "losses.turn_into_iterable", "scipy.stats.poisson.logpmf"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "logprob", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "turn_into_iterable", "(", "data", "[", "\"Y\"", "]", ")", "\n", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "parameter", "=", "[", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", "[", "0", "]", "for", "z", "in", "Z", "]", "\n", "return", "poisson", ".", "logpmf", "(", "Y", ",", "mu", "=", "parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.poisson_loss.sample": [[483, 487], ["losses.turn_into_iterable", "scipy.stats.poisson.rvs"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "sample", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "parameter", "=", "[", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", "[", "0", "]", "for", "z", "in", "Z", "]", "\n", "return", "poisson", ".", "rvs", "(", "mu", "=", "parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__": [[494, 499], ["losses.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.__init__"], ["def", "__init__", "(", "self", ",", "min_theta", "=", "1e-5", ",", "max_theta", "=", "1", "-", "1e-5", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isDistribution", "=", "True", "\n", "self", ".", "min_theta", "=", "min_theta", "\n", "self", ".", "max_theta", "=", "max_theta", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.evaluate": [[500, 502], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "theta", ",", "data", ")", ":", "\n", "\t\t", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.setup": [[503, 532], ["len", "zip", "numpy.zeros", "numpy.zeros", "enumerate", "G.nodes", "G.nodes", "numpy.sum", "len"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "data", "[", "\"Y\"", "]", "\n", "Z", "=", "data", "[", "\"Z\"", "]", "\n", "\n", "K", "=", "len", "(", "G", ".", "nodes", "(", ")", ")", "\n", "\n", "shape", "=", "(", "1", ",", ")", "\n", "theta_shape", "=", "(", "K", ",", ")", "+", "shape", "\n", "\n", "#preprocess data", "\n", "for", "y", ",", "z", "in", "zip", "(", "Y", ",", "Z", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "z", "]", "\n", "if", "\"Y\"", "in", "vertex", ":", "\n", "\t\t\t\t", "vertex", "[", "\"Y\"", "]", "+=", "[", "y", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "vertex", "[", "\"Y\"", "]", "=", "[", "y", "]", "\n", "\n", "", "", "S", "=", "np", ".", "zeros", "(", "(", "K", ",", "1", ")", ")", "\n", "N", "=", "np", ".", "zeros", "(", "(", "K", ",", "1", ")", ")", "\n", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t", "vertex", "=", "G", ".", "_node", "[", "node", "]", "\n", "if", "'Y'", "in", "vertex", ":", "\n", "\t\t\t\t", "S", "[", "i", "]", "=", "np", ".", "sum", "(", "vertex", "[", "'Y'", "]", ")", "\n", "N", "[", "i", "]", "=", "len", "(", "vertex", "[", "'Y'", "]", ")", "\n", "del", "vertex", "[", "'Y'", "]", "\n", "\n", "", "", "cache", "=", "{", "\"S\"", ":", "S", ",", "\"N\"", ":", "N", ",", "\"theta_shape\"", ":", "theta_shape", ",", "\"shape\"", ":", "shape", ",", "\"K\"", ":", "K", "}", "\n", "return", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.prox": [[533, 546], ["numpy.hstack", "numpy.clip", "numpy.ones", "numpy.array", "pool.map"], "methods", ["None"], ["", "def", "prox", "(", "self", ",", "t", ",", "nu", ",", "warm_start", ",", "pool", ",", "cache", ")", ":", "\n", "\t\t", "S", "=", "cache", "[", "\"S\"", "]", "\n", "N", "=", "cache", "[", "\"N\"", "]", "\n", "\n", "a", "=", "-", "1", "*", "np", ".", "ones", "(", "nu", ".", "shape", ")", "\n", "b", "=", "(", "1", "+", "nu", ")", "\n", "c", "=", "t", "*", "N", "-", "nu", "\n", "d", "=", "-", "t", "*", "S", "\n", "\n", "coefs", "=", "np", ".", "hstack", "(", "[", "a", ",", "b", ",", "c", ",", "d", "]", ")", "\n", "theta", "=", "np", ".", "array", "(", "pool", ".", "map", "(", "find_solution", ",", "coefs", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "np", ".", "clip", "(", "theta", ",", "self", ".", "min_theta", ",", "self", ".", "max_theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.logprob": [[547, 552], ["losses.turn_into_iterable", "losses.turn_into_iterable", "scipy.stats.bernoulli.logpmf"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable", "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "logprob", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Y", "=", "turn_into_iterable", "(", "data", "[", "\"Y\"", "]", ")", "\n", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "parameter", "=", "[", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", "[", "0", "]", "for", "z", "in", "Z", "]", "\n", "return", "bernoulli", ".", "logpmf", "(", "Y", ",", "p", "=", "parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.bernoulli_loss.sample": [[553, 557], ["losses.turn_into_iterable", "scipy.stats.bernoulli.rvs"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable"], ["", "def", "sample", "(", "self", ",", "data", ",", "G", ")", ":", "\n", "\t\t", "Z", "=", "turn_into_iterable", "(", "data", "[", "\"Z\"", "]", ")", "\n", "parameter", "=", "[", "G", ".", "_node", "[", "z", "]", "[", "\"theta\"", "]", "[", "0", "]", "for", "z", "in", "Z", "]", "\n", "return", "bernoulli", ".", "rvs", "(", "p", "=", "parameter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.turn_into_iterable": [[38, 45], ["iter"], "function", ["None"], ["", "", "def", "turn_into_iterable", "(", "x", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "iter", "(", "x", ")", "\n", "", "except", "TypeError", ":", "\n", "\t\t", "return", "[", "x", "]", "\n", "", "else", ":", "\n", "\t\t", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.find_solution": [[46, 53], ["numpy.roots", "numpy.isreal", "numpy.real"], "function", ["None"], ["", "", "def", "find_solution", "(", "x", ")", ":", "\n", "\t", "\"\"\"Finds the real solution to ax^3 + bx^2 + cx + d = 0.\"\"\"", "\n", "roots", "=", "np", ".", "roots", "(", "x", ")", "\n", "for", "root", "in", "roots", ":", "\n", "\t\t", "if", "np", ".", "isreal", "(", "root", ")", "and", "root", ">=", "1e-4", "and", "root", "<=", "1", "-", "1e-4", ":", "\n", "\t\t\t", "return", "np", ".", "real", "(", "root", ")", "\n", "", "", "return", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.joint_cov_prox": [[54, 67], ["numpy.linalg.eigh", "numpy.sqrt", "numpy.diag"], "function", ["None"], ["", "def", "joint_cov_prox", "(", "Y", ",", "nu", ",", "theta", ",", "t", ")", ":", "\n", "    ", "\"\"\"\n    Proximal operator for joint covariance estimation\n    \"\"\"", "\n", "if", "Y", "is", "None", ":", "\n", "        ", "return", "nu", "\n", "\n", "", "n", ",", "nk", "=", "Y", "[", "0", "]", ".", "shape", "\n", "Yemp", "=", "Y", "[", "0", "]", "@", "Y", "[", "0", "]", ".", "T", "/", "nk", "\n", "\n", "s", ",", "Q", "=", "np", ".", "linalg", ".", "eigh", "(", "nu", "/", "(", "t", "*", "nk", ")", "-", "Yemp", ")", "\n", "w", "=", "(", "(", "t", "*", "nk", ")", "*", "s", "+", "np", ".", "sqrt", "(", "(", "(", "t", "*", "nk", ")", "*", "s", ")", "**", "2", "+", "4", "*", "(", "t", "*", "nk", ")", ")", ")", "/", "2", "\n", "return", "Q", "@", "np", ".", "diag", "(", "w", ")", "@", "Q", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.log_reg_prox": [[68, 87], ["torch.from_numpy", "torch.from_numpy().requires_grad_", "torch.nn.CrossEntropyLoss", "torch.optim.LBFGS", "torch.optim.LBFGS.step", "torch.from_numpy().requires_grad_.data.numpy", "torch.optim.LBFGS.zero_grad", "l.backward", "torch.from_numpy", "torch.nn.CrossEntropyLoss.", "torch.sum"], "function", ["None"], ["", "def", "log_reg_prox", "(", "XY", ",", "nu", ",", "theta", ",", "t", ")", ":", "\n", "\t", "if", "XY", "is", "None", ":", "\n", "\t\t", "return", "nu", "\n", "\n", "", "X", ",", "Y", "=", "XY", "\n", "\n", "nu_tch", "=", "torch", ".", "from_numpy", "(", "nu", ")", "\n", "theta_i", "=", "torch", ".", "from_numpy", "(", "theta", ")", ".", "requires_grad_", "(", "True", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "LBFGS", "(", "[", "theta_i", "]", ",", "lr", "=", "1", ",", "max_iter", "=", "50", ")", "\n", "\n", "def", "closure", "(", ")", ":", "\n", "\t\t", "optim", ".", "zero_grad", "(", ")", "\n", "l", "=", "t", "*", "loss", "(", "X", "@", "theta_i", ",", "Y", ")", "+", "0.5", "*", "torch", ".", "sum", "(", "(", "theta_i", "-", "nu_tch", ")", "**", "2", ")", "\n", "l", ".", "backward", "(", ")", "\n", "return", "l", "\n", "\n", "", "optim", ".", "step", "(", "closure", ")", "\n", "return", "theta_i", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_strat_models.strat_models.losses.nonparametric_discrete_prox": [[88, 105], ["torch.from_numpy", "torch.from_numpy().requires_grad_", "torch.from_numpy().type", "torch.optim.LBFGS", "torch.optim.LBFGS.step", "torch.from_numpy().requires_grad_.data.numpy", "torch.optim.LBFGS.zero_grad", "loss.backward", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.log", "torch.sum", "torch.sum", "torch.exp"], "function", ["None"], ["", "def", "nonparametric_discrete_prox", "(", "Y", ",", "nu", ",", "theta", ",", "t", ")", ":", "\n", "\t", "if", "Y", "is", "None", ":", "\n", "\t\t", "return", "nu", "\n", "", "nu_tch", "=", "torch", ".", "from_numpy", "(", "nu", ")", "\n", "theta_i", "=", "torch", ".", "from_numpy", "(", "theta", ")", ".", "requires_grad_", "(", "True", ")", "\n", "Y_tch", "=", "torch", ".", "from_numpy", "(", "Y", ")", ".", "type", "(", "torch", ".", "float64", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "LBFGS", "(", "[", "theta_i", "]", ",", "lr", "=", "1", ",", "max_iter", "=", "60", ")", "\n", "\n", "def", "closure", "(", ")", ":", "\n", "\t\t", "optim", ".", "zero_grad", "(", ")", "\n", "loss", "=", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "theta_i", ")", ")", ")", "*", "torch", ".", "sum", "(", "Y_tch", ")", "-", "Y_tch", "@", "theta_i", "\n", "loss", "+=", "torch", ".", "sum", "(", "(", "theta_i", "-", "nu_tch", ")", "**", "2", ")", "/", "(", "2", "*", "t", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "\n", "", "optim", ".", "step", "(", "closure", ")", "\n", "return", "theta_i", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]]}