{"home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.ConvBlock.__init__": [[6, 11], ["torch.Sequential.__init__", "models.ConvBlock.add_module", "models.ConvBlock.add_module", "models.ConvBlock.add_module", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "ker_size", ",", "padd", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "ker_size", ",", "stride", "=", "stride", ",", "padding", "=", "padd", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'LeakyRelu'", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.WDiscriminator.__init__": [[23, 34], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "int", "models.ConvBlock", "torch.Sequential", "torch.Sequential", "range", "torch.Conv2d", "torch.Conv2d", "int", "models.ConvBlock", "models.WDiscriminator.body.add_module", "max", "max", "max", "pow"], "methods", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "WDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "N", "=", "int", "(", "opt", ".", "nfc", ")", "\n", "self", ".", "head", "=", "ConvBlock", "(", "opt", ".", "nc_im", ",", "N", ",", "opt", ".", "ker_size", ",", "opt", ".", "padd_size", ",", "1", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_layer", "-", "2", ")", ":", "\n", "            ", "N", "=", "int", "(", "opt", ".", "nfc", "/", "pow", "(", "2", ",", "(", "i", "+", "1", ")", ")", ")", "\n", "block", "=", "ConvBlock", "(", "max", "(", "2", "*", "N", ",", "opt", ".", "min_nfc", ")", ",", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "opt", ".", "ker_size", ",", "opt", ".", "padd_size", ",", "1", ")", "\n", "self", ".", "body", ".", "add_module", "(", "'block%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "", "self", ".", "tail", "=", "nn", ".", "Conv2d", "(", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "1", ",", "kernel_size", "=", "opt", ".", "ker_size", ",", "stride", "=", "1", ",", "padding", "=", "opt", ".", "padd_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.WDiscriminator.forward": [[35, 40], ["models.WDiscriminator.head", "models.WDiscriminator.body", "models.WDiscriminator.tail"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.GeneratorConcatSkip2CleanAdd.__init__": [[43, 57], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models.ConvBlock", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "int", "models.ConvBlock", "models.GeneratorConcatSkip2CleanAdd.body.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "max", "max", "max", "pow"], "methods", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "GeneratorConcatSkip2CleanAdd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "N", "=", "opt", ".", "nfc", "\n", "self", ".", "head", "=", "ConvBlock", "(", "opt", ".", "nc_im", ",", "N", ",", "opt", ".", "ker_size", ",", "opt", ".", "padd_size", ",", "\n", "1", ")", "# GenConvTransBlock(opt.nc_z,N,opt.ker_size,opt.padd_size,opt.stride)", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_layer", "-", "2", ")", ":", "\n", "            ", "N", "=", "int", "(", "opt", ".", "nfc", "/", "pow", "(", "2", ",", "(", "i", "+", "1", ")", ")", ")", "\n", "block", "=", "ConvBlock", "(", "max", "(", "2", "*", "N", ",", "opt", ".", "min_nfc", ")", ",", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "opt", ".", "ker_size", ",", "opt", ".", "padd_size", ",", "1", ")", "\n", "self", ".", "body", ".", "add_module", "(", "'block%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "opt", ".", "nc_im", ",", "kernel_size", "=", "opt", ".", "ker_size", ",", "stride", "=", "1", ",", "padding", "=", "opt", ".", "padd_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.GeneratorConcatSkip2CleanAdd.forward": [[59, 66], ["models.GeneratorConcatSkip2CleanAdd.head", "models.GeneratorConcatSkip2CleanAdd.body", "models.GeneratorConcatSkip2CleanAdd.tail", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "ind", "=", "int", "(", "(", "y", ".", "shape", "[", "2", "]", "-", "x", ".", "shape", "[", "2", "]", ")", "/", "2", ")", "\n", "y", "=", "y", "[", ":", ",", ":", ",", "ind", ":", "(", "y", ".", "shape", "[", "2", "]", "-", "ind", ")", ",", "ind", ":", "(", "y", ".", "shape", "[", "3", "]", "-", "ind", ")", "]", "\n", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.Generator.__init__": [[69, 82], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models.ConvBlock", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "int", "models.ConvBlock", "models.Generator.body.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "max", "max", "max", "pow"], "methods", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "N", "=", "opt", ".", "nfc", "\n", "self", ".", "head", "=", "ConvBlock", "(", "opt", ".", "nc_im", ",", "N", ",", "ker_size", "=", "3", ",", "padd", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_layer", "-", "2", ")", ":", "\n", "            ", "N", "=", "int", "(", "opt", ".", "nfc", "/", "pow", "(", "2", ",", "(", "i", "+", "1", ")", ")", ")", "\n", "block", "=", "ConvBlock", "(", "max", "(", "2", "*", "N", ",", "opt", ".", "min_nfc", ")", ",", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "ker_size", "=", "3", ",", "padd", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "body", ".", "add_module", "(", "'block%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "opt", ".", "nc_im", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.Generator.forward": [[84, 91], ["models.Generator.head", "models.Generator.body", "models.Generator.tail", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "ind", "=", "int", "(", "(", "y", ".", "shape", "[", "2", "]", "-", "x", ".", "shape", "[", "2", "]", ")", "/", "2", ")", "\n", "y", "=", "y", "[", ":", ",", ":", ",", "ind", ":", "(", "y", ".", "shape", "[", "2", "]", "-", "ind", ")", ",", "ind", ":", "(", "y", ".", "shape", "[", "3", "]", "-", "ind", ")", "]", "\n", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.Generator_no_res.__init__": [[93, 106], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models.ConvBlock", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "int", "models.ConvBlock", "models.Generator_no_res.body.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "max", "max", "max", "pow"], "methods", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Generator_no_res", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "N", "=", "opt", ".", "nfc", "\n", "self", ".", "head", "=", "ConvBlock", "(", "opt", ".", "nc_im", ",", "N", ",", "ker_size", "=", "3", ",", "padd", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_layer", "-", "2", ")", ":", "\n", "            ", "N", "=", "int", "(", "opt", ".", "nfc", "/", "pow", "(", "2", ",", "(", "i", "+", "1", ")", ")", ")", "\n", "block", "=", "ConvBlock", "(", "max", "(", "2", "*", "N", ",", "opt", ".", "min_nfc", ")", ",", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "ker_size", "=", "3", ",", "padd", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "body", ".", "add_module", "(", "'block%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "max", "(", "N", ",", "opt", ".", "min_nfc", ")", ",", "opt", ".", "nc_im", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.Generator_no_res.forward": [[108, 113], ["models.Generator_no_res.head", "models.Generator_no_res.body", "models.Generator_no_res.tail"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.models.weights_init": [[13, 20], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Norm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.Video_dataset.__init__": [[96, 121], ["range", "math.pow", "math.ceil", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "train_video.Video_dataset.data[].append", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "str", "PIL.Image.open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "size", ",", "ext", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "ext", "=", "ext", "\n", "\n", "self", ".", "data", "=", "{", "}", "\n", "\n", "for", "ii", "in", "range", "(", "0", ",", "opt", ".", "stop_scale", "+", "1", ",", "1", ")", ":", "\n", "            ", "scale", "=", "math", ".", "pow", "(", "opt", ".", "scale_factor", ",", "opt", ".", "stop_scale", "-", "ii", ")", "\n", "\n", "s_size", "=", "math", ".", "ceil", "(", "scale", "*", "opt", ".", "img_size", ")", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "(", "s_size", ",", "s_size", ")", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "                ", "if", "j", "not", "in", "self", ".", "data", ":", "\n", "                    ", "self", ".", "data", "[", "j", "]", "=", "[", "]", "\n", "\n", "", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "str", "(", "j", ")", "+", "self", ".", "ext", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "sample", "=", "transform", "(", "image", ")", "\n", "self", ".", "data", "[", "j", "]", ".", "append", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.Video_dataset.__len__": [[122, 124], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.Video_dataset.__getitem__": [[125, 127], ["tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "data", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.draw_concat": [[21, 58], ["len", "zip", "zip", "imresize.imresize2", "imresize.imresize2", "utils.generate_noise2", "utils.generate_noise2", "G", "G", "G.detach", "list", "utils.generate_noise2", "G", "G", "G.detach", "z_in.detach", "z_in.detach", "real_curr.size"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2"], ["def", "draw_concat", "(", "Gs", ",", "reals", ",", "NoiseAmp", ",", "in_s", ",", "mode", ",", "opt", ")", ":", "\n", "    ", "if", "len", "(", "Gs", ")", ">", "0", ":", "\n", "        ", "if", "mode", "==", "'rand'", ":", "\n", "            ", "count", "=", "0", "\n", "for", "G", ",", "real_curr", ",", "real_next", ",", "noise_amp", "in", "zip", "(", "Gs", ",", "reals", ",", "reals", "[", "1", ":", "]", ",", "NoiseAmp", ")", ":", "\n", "                ", "if", "count", "==", "0", ":", "\n", "                    ", "z", "=", "generate_noise2", "(", "[", "1", ",", "3", ",", "real_curr", ".", "shape", "[", "2", "]", ",", "real_curr", ".", "shape", "[", "3", "]", "]", ",", "device", "=", "opt", ".", "device", ")", "\n", "G_z", "=", "in_s", "\n", "", "else", ":", "\n", "                    ", "z", "=", "generate_noise2", "(", "[", "1", ",", "opt", ".", "nc_z", ",", "real_curr", ".", "shape", "[", "2", "]", ",", "real_curr", ".", "shape", "[", "3", "]", "]", ",", "device", "=", "opt", ".", "device", ")", "\n", "\n", "", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_curr", ".", "shape", "[", "2", "]", ",", "0", ":", "real_curr", ".", "shape", "[", "3", "]", "]", "\n", "z_in", "=", "noise_amp", "*", "z", "+", "G_z", "\n", "if", "count", ">", "opt", ".", "switch_scale", ":", "\n", "                    ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ",", "G_z", ")", "\n", "", "G_z", "=", "imresize2", "(", "G_z", ".", "detach", "(", ")", ",", "1", "/", "opt", ".", "scale_factor", ",", "opt", ")", "\n", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_next", ".", "shape", "[", "2", "]", ",", "0", ":", "real_next", ".", "shape", "[", "3", "]", "]", "\n", "count", "+=", "1", "\n", "\n", "", "", "if", "mode", "==", "'rec'", ":", "\n", "            ", "count", "=", "0", "\n", "for", "G", ",", "real_curr", ",", "real_next", ",", "noise_amp", "in", "zip", "(", "Gs", ",", "reals", ",", "reals", "[", "1", ":", "]", ",", "NoiseAmp", ")", ":", "\n", "                ", "if", "count", "==", "0", ":", "\n", "                    ", "size", "=", "list", "(", "real_curr", ".", "size", "(", ")", ")", "\n", "#print(size)", "\n", "G_z", "=", "generate_noise2", "(", "size", ",", "device", "=", "opt", ".", "device", ")", "\n", "", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_curr", ".", "shape", "[", "2", "]", ",", "0", ":", "real_curr", ".", "shape", "[", "3", "]", "]", "\n", "if", "count", ">", "opt", ".", "switch_scale", ":", "\n", "                    ", "G_z", "=", "G", "(", "G_z", ")", "\n", "", "else", ":", "\n", "                    ", "G_z", "=", "G", "(", "G_z", ",", "G_z", ")", "\n", "", "G_z", "=", "imresize2", "(", "G_z", ".", "detach", "(", ")", ",", "1", "/", "opt", ".", "scale_factor", ",", "opt", ")", "\n", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_next", ".", "shape", "[", "2", "]", ",", "0", ":", "real_next", ".", "shape", "[", "3", "]", "]", "\n", "count", "+=", "1", "\n", "", "", "", "return", "G_z", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.init_models": [[60, 75], ["models.Generator_no_res().to", "models.Generator_no_res().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator_no_res().to.load_state_dict", "models.WDiscriminator().to.load_state_dict", "models.Generator_no_res", "torch.load", "torch.load", "torch.load", "torch.load", "models.WDiscriminator", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "init_models", "(", "opt", ")", ":", "\n", "\n", "#generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator_no_res", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netG", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG", ")", ")", "\n", "\n", "#discriminator initialization:", "\n", "", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netD", "!=", "''", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netD", ")", ")", "\n", "\n", "", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.init_models_res": [[77, 91], ["models.Generator().to", "models.Generator().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator().to.load_state_dict", "models.WDiscriminator().to.load_state_dict", "models.Generator", "torch.load", "torch.load", "torch.load", "torch.load", "models.WDiscriminator", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "init_models_res", "(", "opt", ")", ":", "\n", "# generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netG", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG", ")", ")", "\n", "\n", "# discriminator initialization:", "\n", "", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netD", "!=", "''", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netD", ")", ")", "\n", "\n", "", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train_video.transform_input": [[129, 148], ["PIL.Image.open().convert", "range", "math.pow", "math.ceil", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "res.append", "PIL.Image.open", "transform.unsqueeze", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "transform_input", "(", "img_path", ",", "opt", ")", ":", "\n", "\n", "    ", "res", "=", "[", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "opt", ".", "stop_scale", "+", "1", ",", "1", ")", ":", "\n", "        ", "scale", "=", "math", ".", "pow", "(", "opt", ".", "scale_factor", ",", "opt", ".", "stop_scale", "-", "ii", ")", "\n", "\n", "s_size", "=", "math", ".", "ceil", "(", "scale", "*", "opt", ".", "img_size", ")", "\n", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "(", "s_size", ",", "s_size", ")", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "]", ")", "\n", "\n", "sample", "=", "transform", "(", "image", ")", "\n", "res", ".", "append", "(", "sample", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.eval.draw_concat": [[19, 44], ["len", "zip", "imresize.imresize2", "utils.generate_noise2", "utils.generate_noise2", "G", "G", "G.detach", "real_curr.cuda", "z_in.detach", "z_in.detach"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2"], ["def", "draw_concat", "(", "Gs", ",", "reals", ",", "NoiseAmp", ",", "in_s", ",", "mode", ",", "inject_level", ",", "opt", ")", ":", "\n", "    ", "if", "len", "(", "Gs", ")", ">", "0", ":", "\n", "        ", "if", "mode", "==", "'rand'", ":", "\n", "            ", "count", "=", "0", "\n", "for", "G", ",", "real_curr", ",", "real_next", ",", "noise_amp", "in", "zip", "(", "Gs", ",", "reals", ",", "reals", "[", "1", ":", "]", ",", "NoiseAmp", ")", ":", "\n", "                ", "if", "count", "==", "0", ":", "\n", "                    ", "z", "=", "generate_noise2", "(", "[", "1", ",", "3", ",", "real_curr", ".", "shape", "[", "2", "]", ",", "real_curr", ".", "shape", "[", "3", "]", "]", ",", "device", "=", "opt", ".", "device", ")", "\n", "G_z", "=", "in_s", "\n", "", "else", ":", "\n", "                    ", "z", "=", "generate_noise2", "(", "[", "1", ",", "opt", ".", "nc_z", ",", "real_curr", ".", "shape", "[", "2", "]", ",", "real_curr", ".", "shape", "[", "3", "]", "]", ",", "device", "=", "opt", ".", "device", ")", "\n", "\n", "", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_curr", ".", "shape", "[", "2", "]", ",", "0", ":", "real_curr", ".", "shape", "[", "3", "]", "]", "\n", "if", "count", "==", "inject_level", ":", "\n", "                    ", "z_in", "=", "noise_amp", "*", "z", "+", "real_curr", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "z_in", "=", "noise_amp", "*", "z", "+", "G_z", "\n", "", "if", "count", ">", "opt", ".", "switch_scale", ":", "\n", "                    ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ",", "G_z", ")", "\n", "", "G_z", "=", "imresize2", "(", "G_z", ".", "detach", "(", ")", ",", "1", "/", "opt", ".", "scale_factor", ",", "opt", ")", "\n", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_next", ".", "shape", "[", "2", "]", ",", "0", ":", "real_next", ".", "shape", "[", "3", "]", "]", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "return", "G_z", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.eval.init_models": [[45, 60], ["models.Generator_no_res().to", "models.Generator_no_res().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator_no_res().to.load_state_dict", "models.WDiscriminator().to.load_state_dict", "models.Generator_no_res", "torch.load", "models.WDiscriminator", "torch.load"], "function", ["None"], ["", "def", "init_models", "(", "opt", ")", ":", "\n", "\n", "#generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator_no_res", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netG", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG", ")", ")", "\n", "\n", "#discriminator initialization:", "\n", "", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netD", "!=", "''", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netD", ")", ")", "\n", "\n", "", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.eval.init_models_res": [[62, 76], ["models.Generator().to", "models.Generator().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator().to.load_state_dict", "models.WDiscriminator().to.load_state_dict", "models.Generator", "torch.load", "models.WDiscriminator", "torch.load"], "function", ["None"], ["", "def", "init_models_res", "(", "opt", ")", ":", "\n", "# generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netG", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG", ")", ")", "\n", "\n", "# discriminator initialization:", "\n", "", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netD", "!=", "''", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netD", ")", ")", "\n", "\n", "", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.eval.transform_input": [[77, 96], ["PIL.Image.open().convert", "range", "math.pow", "math.ceil", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "res.append", "PIL.Image.open", "transform.unsqueeze", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "transform_input", "(", "img_path", ",", "opt", ")", ":", "\n", "\n", "    ", "res", "=", "[", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "opt", ".", "stop_scale", "+", "1", ",", "1", ")", ":", "\n", "        ", "scale", "=", "math", ".", "pow", "(", "opt", ".", "scale_factor", ",", "opt", ".", "stop_scale", "-", "ii", ")", "\n", "\n", "s_size", "=", "math", ".", "ceil", "(", "scale", "*", "opt", ".", "img_size", ")", "\n", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "(", "s_size", ",", "s_size", ")", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "]", ")", "\n", "\n", "sample", "=", "transform", "(", "image", ")", "\n", "res", ".", "append", "(", "sample", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train.draw_concat": [[20, 59], ["len", "zip", "zip", "G.cuda.cuda", "imresize.imresize2", "G.cuda.cuda", "imresize.imresize2", "utils.generate_noise2", "utils.generate_noise2", "G.cuda.", "G.cuda.", "G.detach", "list", "utils.generate_noise2", "G.cuda.", "G.cuda.", "G.detach", "z_in.detach", "z_in.detach", "real_curr.size"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2"], ["def", "draw_concat", "(", "Gs", ",", "reals", ",", "NoiseAmp", ",", "in_s", ",", "mode", ",", "opt", ")", ":", "\n", "    ", "if", "len", "(", "Gs", ")", ">", "0", ":", "\n", "        ", "if", "mode", "==", "'rand'", ":", "\n", "            ", "count", "=", "0", "\n", "for", "G", ",", "real_curr", ",", "real_next", ",", "noise_amp", "in", "zip", "(", "Gs", ",", "reals", ",", "reals", "[", "1", ":", "]", ",", "NoiseAmp", ")", ":", "\n", "                ", "G", "=", "G", ".", "cuda", "(", ")", "\n", "if", "count", "==", "0", ":", "\n", "                    ", "z", "=", "generate_noise2", "(", "[", "1", ",", "3", ",", "real_curr", ".", "shape", "[", "2", "]", ",", "real_curr", ".", "shape", "[", "3", "]", "]", ",", "device", "=", "opt", ".", "device", ")", "\n", "G_z", "=", "in_s", "\n", "", "else", ":", "\n", "                    ", "z", "=", "generate_noise2", "(", "[", "1", ",", "opt", ".", "nc_z", ",", "real_curr", ".", "shape", "[", "2", "]", ",", "real_curr", ".", "shape", "[", "3", "]", "]", ",", "device", "=", "opt", ".", "device", ")", "\n", "\n", "", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_curr", ".", "shape", "[", "2", "]", ",", "0", ":", "real_curr", ".", "shape", "[", "3", "]", "]", "\n", "z_in", "=", "noise_amp", "*", "z", "+", "G_z", "\n", "if", "count", ">", "opt", ".", "switch_scale", ":", "\n", "                    ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ",", "G_z", ")", "\n", "", "G_z", "=", "imresize2", "(", "G_z", ".", "detach", "(", ")", ",", "1", "/", "opt", ".", "scale_factor", ",", "opt", ")", "\n", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_next", ".", "shape", "[", "2", "]", ",", "0", ":", "real_next", ".", "shape", "[", "3", "]", "]", "\n", "count", "+=", "1", "\n", "\n", "", "", "if", "mode", "==", "'rec'", ":", "\n", "            ", "count", "=", "0", "\n", "for", "G", ",", "real_curr", ",", "real_next", ",", "noise_amp", "in", "zip", "(", "Gs", ",", "reals", ",", "reals", "[", "1", ":", "]", ",", "NoiseAmp", ")", ":", "\n", "                ", "G", "=", "G", ".", "cuda", "(", ")", "\n", "if", "count", "==", "0", ":", "\n", "                    ", "size", "=", "list", "(", "real_curr", ".", "size", "(", ")", ")", "\n", "#print(size)", "\n", "G_z", "=", "generate_noise2", "(", "size", ",", "device", "=", "opt", ".", "device", ")", "\n", "", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_curr", ".", "shape", "[", "2", "]", ",", "0", ":", "real_curr", ".", "shape", "[", "3", "]", "]", "\n", "if", "count", ">", "opt", ".", "switch_scale", ":", "\n", "                    ", "G_z", "=", "G", "(", "G_z", ")", "\n", "", "else", ":", "\n", "                    ", "G_z", "=", "G", "(", "G_z", ",", "G_z", ")", "\n", "", "G_z", "=", "imresize2", "(", "G_z", ".", "detach", "(", ")", ",", "1", "/", "opt", ".", "scale_factor", ",", "opt", ")", "\n", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_next", ".", "shape", "[", "2", "]", ",", "0", ":", "real_next", ".", "shape", "[", "3", "]", "]", "\n", "count", "+=", "1", "\n", "", "", "", "return", "G_z", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train.init_models": [[61, 72], ["models.Generator_no_res().to", "models.Generator_no_res().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator_no_res", "models.WDiscriminator"], "function", ["None"], ["", "def", "init_models", "(", "opt", ")", ":", "\n", "\n", "#generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator_no_res", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "\n", "#discriminator initialization:", "\n", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "\n", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train.init_models_res": [[74, 84], ["models.Generator().to", "models.Generator().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator", "models.WDiscriminator"], "function", ["None"], ["", "def", "init_models_res", "(", "opt", ")", ":", "\n", "# generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "\n", "# discriminator initialization:", "\n", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "\n", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.train.transform_input": [[86, 105], ["PIL.Image.open().convert", "range", "math.pow", "math.ceil", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "res.append", "PIL.Image.open", "transform.unsqueeze", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "transform_input", "(", "img_path", ",", "opt", ")", ":", "\n", "\n", "    ", "res", "=", "[", "]", "\n", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "opt", ".", "stop_scale", "+", "1", ",", "1", ")", ":", "\n", "        ", "scale", "=", "math", ".", "pow", "(", "opt", ".", "scale_factor", ",", "opt", ".", "stop_scale", "-", "ii", ")", "\n", "\n", "s_size", "=", "math", ".", "ceil", "(", "scale", "*", "opt", ".", "img_size", ")", "\n", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "(", "s_size", ",", "s_size", ")", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "]", ")", "\n", "\n", "sample", "=", "transform", "(", "image", ")", "\n", "res", ".", "append", "(", "sample", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.denorm": [[9, 12], ["out.clamp"], "function", ["None"], ["def", "denorm", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.norm": [[13, 16], ["out.clamp"], "function", ["None"], ["", "def", "norm", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "-", "0.5", ")", "*", "2", "\n", "return", "out", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.move_to_gpu": [[17, 21], ["torch.cuda.is_available", "t.to.to", "torch.device", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "move_to_gpu", "(", "t", ")", ":", "\n", "    ", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ":", "\n", "        ", "t", "=", "t", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.np2torch": [[23, 33], ["torch.from_numpy", "imresize.norm", "move_to_gpu.transpose", "imresize.move_to_gpu", "move_to_gpu.type", "move_to_gpu.type"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.norm", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.move_to_gpu"], ["", "def", "np2torch", "(", "x", ",", "opt", ")", ":", "\n", "    ", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "x", "=", "x", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "/", "255", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "if", "not", "(", "opt", ".", "not_cuda", ")", ":", "\n", "        ", "x", "=", "move_to_gpu", "(", "x", ")", "\n", "", "x", "=", "x", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "if", "not", "(", "opt", ".", "not_cuda", ")", "else", "x", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "#x = x.type(torch.cuda.FloatTensor)", "\n", "x", "=", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.np2torch_old": [[34, 49], ["torch.from_numpy", "imresize.norm", "skimage.color.rgb2gray", "move_to_gpu.transpose", "imresize.move_to_gpu", "move_to_gpu.type", "move_to_gpu.type", "move_to_gpu.transpose"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.norm", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.move_to_gpu"], ["", "def", "np2torch_old", "(", "x", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "nc_im", "==", "3", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "x", "=", "x", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "/", "255", "\n", "", "else", ":", "\n", "        ", "x", "=", "color", ".", "rgb2gray", "(", "x", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "x", "=", "x", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "if", "not", "(", "opt", ".", "not_cuda", ")", ":", "\n", "        ", "x", "=", "move_to_gpu", "(", "x", ")", "\n", "", "x", "=", "x", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "if", "not", "(", "opt", ".", "not_cuda", ")", "else", "x", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "#x = x.type(torch.cuda.FloatTensor)", "\n", "x", "=", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.torch2uint8": [[50, 59], ["x.astype.permute", "x.astype.cpu().numpy", "x.astype.astype", "imresize.denorm", "x.astype.cpu"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.denorm"], ["", "def", "torch2uint8", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "x", "=", "x", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "x", "=", "255", "*", "denorm", "(", "x", ")", "\n", "x", "=", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "#print(\"torch2uint8\")", "\n", "#print(x.shape)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2": [[61, 76], ["im.size", "range", "torch.stack", "imgs.append", "imresize().squeeze", "imresize.imresize", "im[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize"], ["", "def", "imresize2", "(", "im", ",", "scale", ",", "opt", ")", ":", "\n", "#s = im.shape", "\n", "#print(\"!!!!!\")", "\n", "#print(im.size())", "\n", "\n", "    ", "size", "=", "im", ".", "size", "(", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", "[", "0", "]", ")", ":", "\n", "        ", "imgs", ".", "append", "(", "imresize", "(", "im", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "scale", ",", "opt", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "", "res", "=", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", "\n", "\n", "#print(res.size())", "\n", "#im = im[:, :, 0:int(scale * s[2]), 0:int(scale * s[3])]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize": [[77, 88], ["imresize.torch2uint8", "imresize.imresize_in", "imresize.np2torch"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.torch2uint8", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize_in", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.np2torch"], ["", "def", "imresize", "(", "im", ",", "scale", ",", "opt", ")", ":", "\n", "#s = im.shape", "\n", "#print(\"------\")", "\n", "#print(im.size())", "\n", "    ", "im", "=", "torch2uint8", "(", "im", ")", "\n", "im", "=", "imresize_in", "(", "im", ",", "scale_factor", "=", "scale", ")", "\n", "#print(im.shape)", "\n", "im", "=", "np2torch", "(", "im", ",", "opt", ")", "\n", "#print(im.size())", "\n", "#im = im[:, :, 0:int(scale * s[2]), 0:int(scale * s[3])]", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize_arr": [[89, 97], ["imresize.torch2uint8", "imresize.imresize_in", "imresize.np2torch", "res.append"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.torch2uint8", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize_in", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.np2torch"], ["", "def", "imresize_arr", "(", "arr", ",", "scale", ",", "opt", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "im", "in", "arr", ":", "\n", "        ", "im", "=", "torch2uint8", "(", "im", ")", "\n", "im", "=", "imresize_in", "(", "im", ",", "scale_factor", "=", "scale", ")", "\n", "im", "=", "np2torch", "(", "im", ",", "opt", ")", "\n", "res", ".", "append", "(", "im", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize_to_shape": [[98, 105], ["imresize.torch2uint8", "imresize.imresize_in", "imresize.np2torch"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.torch2uint8", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize_in", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.np2torch"], ["", "def", "imresize_to_shape", "(", "im", ",", "output_shape", ",", "opt", ")", ":", "\n", "#s = im.shape", "\n", "    ", "im", "=", "torch2uint8", "(", "im", ")", "\n", "im", "=", "imresize_in", "(", "im", ",", "output_shape", "=", "output_shape", ")", "\n", "im", "=", "np2torch", "(", "im", ",", "opt", ")", "\n", "#im = im[:, :, 0:int(scale * s[2]), 0:int(scale * s[3])]", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize_in": [[107, 147], ["imresize.fix_scale_and_size", "numpy.argsort().tolist", "numpy.copy", "imresize.numeric_kernel", "imresize.contributions", "imresize.resize_along_dim", "type", "numpy.argsort", "numpy.array"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.fix_scale_and_size", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.numeric_kernel", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.contributions", "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.resize_along_dim"], ["", "def", "imresize_in", "(", "im", ",", "scale_factor", "=", "None", ",", "output_shape", "=", "None", ",", "kernel", "=", "None", ",", "antialiasing", "=", "True", ",", "kernel_shift_flag", "=", "False", ")", ":", "\n", "# First standardize values and fill missing arguments (if needed) by deriving scale from output shape or vice versa", "\n", "    ", "scale_factor", ",", "output_shape", "=", "fix_scale_and_size", "(", "im", ".", "shape", ",", "output_shape", ",", "scale_factor", ")", "\n", "\n", "# For a given numeric kernel case, just do convolution and sub-sampling (downscaling only)", "\n", "if", "type", "(", "kernel", ")", "==", "np", ".", "ndarray", "and", "scale_factor", "[", "0", "]", "<=", "1", ":", "\n", "        ", "return", "numeric_kernel", "(", "im", ",", "kernel", ",", "scale_factor", ",", "output_shape", ",", "kernel_shift_flag", ")", "\n", "\n", "# Choose interpolation method, each method has the matching kernel size", "\n", "", "method", ",", "kernel_width", "=", "{", "\n", "\"cubic\"", ":", "(", "cubic", ",", "4.0", ")", ",", "\n", "\"lanczos2\"", ":", "(", "lanczos2", ",", "4.0", ")", ",", "\n", "\"lanczos3\"", ":", "(", "lanczos3", ",", "6.0", ")", ",", "\n", "\"box\"", ":", "(", "box", ",", "1.0", ")", ",", "\n", "\"linear\"", ":", "(", "linear", ",", "2.0", ")", ",", "\n", "None", ":", "(", "cubic", ",", "4.0", ")", "# set default interpolation method as cubic", "\n", "}", ".", "get", "(", "kernel", ")", "\n", "\n", "# Antialiasing is only used when downscaling", "\n", "antialiasing", "*=", "(", "scale_factor", "[", "0", "]", "<", "1", ")", "\n", "\n", "# Sort indices of dimensions according to scale of each dimension. since we are going dim by dim this is efficient", "\n", "sorted_dims", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "scale_factor", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# Iterate over dimensions to calculate local weights for resizing and resize each time in one direction", "\n", "out_im", "=", "np", ".", "copy", "(", "im", ")", "\n", "for", "dim", "in", "sorted_dims", ":", "\n", "# No point doing calculations for scale-factor 1. nothing will happen anyway", "\n", "        ", "if", "scale_factor", "[", "dim", "]", "==", "1.0", ":", "\n", "            ", "continue", "\n", "\n", "# for each coordinate (along 1 dim), calculate which coordinates in the input image affect its result and the", "\n", "# weights that multiply the values there to get its result.", "\n", "", "weights", ",", "field_of_view", "=", "contributions", "(", "im", ".", "shape", "[", "dim", "]", ",", "output_shape", "[", "dim", "]", ",", "scale_factor", "[", "dim", "]", ",", "\n", "method", ",", "kernel_width", ",", "antialiasing", ")", "\n", "\n", "# Use the affecting position values and the set of weights to calculate the result of resizing along this 1 dim", "\n", "out_im", "=", "resize_along_dim", "(", "out_im", ",", "dim", ",", "weights", ",", "field_of_view", ")", "\n", "\n", "", "return", "out_im", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.fix_scale_and_size": [[149, 176], ["numpy.isscalar", "list", "list.extend", "numpy.uint", "list", "list", "numpy.array", "numpy.ceil", "numpy.uint", "numpy.array", "len", "len", "numpy.array", "numpy.array", "numpy.array", "len"], "function", ["None"], ["", "def", "fix_scale_and_size", "(", "input_shape", ",", "output_shape", ",", "scale_factor", ")", ":", "\n", "# First fixing the scale-factor (if given) to be standardized the function expects (a list of scale factors in the", "\n", "# same size as the number of input dimensions)", "\n", "    ", "if", "scale_factor", "is", "not", "None", ":", "\n", "# By default, if scale-factor is a scalar we assume 2d resizing and duplicate it.", "\n", "        ", "if", "np", ".", "isscalar", "(", "scale_factor", ")", ":", "\n", "            ", "scale_factor", "=", "[", "scale_factor", ",", "scale_factor", "]", "\n", "\n", "# We extend the size of scale-factor list to the size of the input by assigning 1 to all the unspecified scales", "\n", "", "scale_factor", "=", "list", "(", "scale_factor", ")", "\n", "scale_factor", ".", "extend", "(", "[", "1", "]", "*", "(", "len", "(", "input_shape", ")", "-", "len", "(", "scale_factor", ")", ")", ")", "\n", "\n", "# Fixing output-shape (if given): extending it to the size of the input-shape, by assigning the original input-size", "\n", "# to all the unspecified dimensions", "\n", "", "if", "output_shape", "is", "not", "None", ":", "\n", "        ", "output_shape", "=", "list", "(", "np", ".", "uint", "(", "np", ".", "array", "(", "output_shape", ")", ")", ")", "+", "list", "(", "input_shape", "[", "len", "(", "output_shape", ")", ":", "]", ")", "\n", "\n", "# Dealing with the case of non-give scale-factor, calculating according to output-shape. note that this is", "\n", "# sub-optimal, because there can be different scales to the same output-shape.", "\n", "", "if", "scale_factor", "is", "None", ":", "\n", "        ", "scale_factor", "=", "1.0", "*", "np", ".", "array", "(", "output_shape", ")", "/", "np", ".", "array", "(", "input_shape", ")", "\n", "\n", "# Dealing with missing output-shape. calculating according to scale-factor", "\n", "", "if", "output_shape", "is", "None", ":", "\n", "        ", "output_shape", "=", "np", ".", "uint", "(", "np", ".", "ceil", "(", "np", ".", "array", "(", "input_shape", ")", "*", "np", ".", "array", "(", "scale_factor", ")", ")", ")", "\n", "\n", "", "return", "scale_factor", ",", "output_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.contributions": [[178, 236], ["numpy.arange", "numpy.floor", "numpy.squeeze", "fixed_kernel", "numpy.sum", "numpy.uint", "numpy.nonzero", "numpy.squeeze", "numpy.squeeze", "numpy.ceil", "numpy.uint", "numpy.expand_dims", "numpy.concatenate", "numpy.any", "numpy.mod", "kernel", "numpy.arange", "numpy.arange", "numpy.expand_dims", "numpy.arange", "numpy.expand_dims"], "function", ["None"], ["", "def", "contributions", "(", "in_length", ",", "out_length", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "# This function calculates a set of 'filters' and a set of field_of_view that will later on be applied", "\n", "# such that each position from the field_of_view will be multiplied with a matching filter from the", "\n", "# 'weights' based on the interpolation method and the distance of the sub-pixel location from the pixel centers", "\n", "# around it. This is only done for one dimension of the image.", "\n", "\n", "# When anti-aliasing is activated (default and only for downscaling) the receptive field is stretched to size of", "\n", "# 1/sf. this means filtering is more 'low-pass filter'.", "\n", "    ", "fixed_kernel", "=", "(", "lambda", "arg", ":", "scale", "*", "kernel", "(", "scale", "*", "arg", ")", ")", "if", "antialiasing", "else", "kernel", "\n", "kernel_width", "*=", "1.0", "/", "scale", "if", "antialiasing", "else", "1.0", "\n", "\n", "# These are the coordinates of the output image", "\n", "out_coordinates", "=", "np", ".", "arange", "(", "1", ",", "out_length", "+", "1", ")", "\n", "\n", "# These are the matching positions of the output-coordinates on the input image coordinates.", "\n", "# Best explained by example: say we have 4 horizontal pixels for HR and we downscale by SF=2 and get 2 pixels:", "\n", "# [1,2,3,4] -> [1,2]. Remember each pixel number is the middle of the pixel.", "\n", "# The scaling is done between the distances and not pixel numbers (the right boundary of pixel 4 is transformed to", "\n", "# the right boundary of pixel 2. pixel 1 in the small image matches the boundary between pixels 1 and 2 in the big", "\n", "# one and not to pixel 2. This means the position is not just multiplication of the old pos by scale-factor).", "\n", "# So if we measure distance from the left border, middle of pixel 1 is at distance d=0.5, border between 1 and 2 is", "\n", "# at d=1, and so on (d = p - 0.5).  we calculate (d_new = d_old / sf) which means:", "\n", "# (p_new-0.5 = (p_old-0.5) / sf)     ->          p_new = p_old/sf + 0.5 * (1-1/sf)", "\n", "match_coordinates", "=", "1.0", "*", "out_coordinates", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1.0", "/", "scale", ")", "\n", "\n", "# This is the left boundary to start multiplying the filter from, it depends on the size of the filter", "\n", "left_boundary", "=", "np", ".", "floor", "(", "match_coordinates", "-", "kernel_width", "/", "2", ")", "\n", "\n", "# Kernel width needs to be enlarged because when covering has sub-pixel borders, it must 'see' the pixel centers", "\n", "# of the pixels it only covered a part from. So we add one pixel at each side to consider (weights can zeroize them)", "\n", "expanded_kernel_width", "=", "np", ".", "ceil", "(", "kernel_width", ")", "+", "2", "\n", "\n", "# Determine a set of field_of_view for each each output position, these are the pixels in the input image", "\n", "# that the pixel in the output image 'sees'. We get a matrix whos horizontal dim is the output pixels (big) and the", "\n", "# vertical dim is the pixels it 'sees' (kernel_size + 2)", "\n", "field_of_view", "=", "np", ".", "squeeze", "(", "np", ".", "uint", "(", "np", ".", "expand_dims", "(", "left_boundary", ",", "axis", "=", "1", ")", "+", "np", ".", "arange", "(", "expanded_kernel_width", ")", "-", "1", ")", ")", "\n", "\n", "# Assign weight to each pixel in the field of view. A matrix whos horizontal dim is the output pixels and the", "\n", "# vertical dim is a list of weights matching to the pixel in the field of view (that are specified in", "\n", "# 'field_of_view')", "\n", "weights", "=", "fixed_kernel", "(", "1.0", "*", "np", ".", "expand_dims", "(", "match_coordinates", ",", "axis", "=", "1", ")", "-", "field_of_view", "-", "1", ")", "\n", "\n", "# Normalize weights to sum up to 1. be careful from dividing by 0", "\n", "sum_weights", "=", "np", ".", "sum", "(", "weights", ",", "axis", "=", "1", ")", "\n", "sum_weights", "[", "sum_weights", "==", "0", "]", "=", "1.0", "\n", "weights", "=", "1.0", "*", "weights", "/", "np", ".", "expand_dims", "(", "sum_weights", ",", "axis", "=", "1", ")", "\n", "\n", "# We use this mirror structure as a trick for reflection padding at the boundaries", "\n", "mirror", "=", "np", ".", "uint", "(", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "in_length", ")", ",", "np", ".", "arange", "(", "in_length", "-", "1", ",", "-", "1", ",", "step", "=", "-", "1", ")", ")", ")", ")", "\n", "field_of_view", "=", "mirror", "[", "np", ".", "mod", "(", "field_of_view", ",", "mirror", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "# Get rid of  weights and pixel positions that are of zero weight", "\n", "non_zero_out_pixels", "=", "np", ".", "nonzero", "(", "np", ".", "any", "(", "weights", ",", "axis", "=", "0", ")", ")", "\n", "weights", "=", "np", ".", "squeeze", "(", "weights", "[", ":", ",", "non_zero_out_pixels", "]", ")", "\n", "field_of_view", "=", "np", ".", "squeeze", "(", "field_of_view", "[", ":", ",", "non_zero_out_pixels", "]", ")", "\n", "\n", "# Final products are the relative positions and the matching weights, both are output_size X fixed_kernel_size", "\n", "return", "weights", ",", "field_of_view", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.resize_along_dim": [[238, 256], ["numpy.swapaxes", "numpy.reshape", "numpy.sum", "numpy.swapaxes", "list", "numpy.ndim"], "function", ["None"], ["", "def", "resize_along_dim", "(", "im", ",", "dim", ",", "weights", ",", "field_of_view", ")", ":", "\n", "# To be able to act on each dim, we swap so that dim 0 is the wanted dim to resize", "\n", "    ", "tmp_im", "=", "np", ".", "swapaxes", "(", "im", ",", "dim", ",", "0", ")", "\n", "\n", "# We add singleton dimensions to the weight matrix so we can multiply it with the big tensor we get for", "\n", "# tmp_im[field_of_view.T], (bsxfun style)", "\n", "weights", "=", "np", ".", "reshape", "(", "weights", ".", "T", ",", "list", "(", "weights", ".", "T", ".", "shape", ")", "+", "(", "np", ".", "ndim", "(", "im", ")", "-", "1", ")", "*", "[", "1", "]", ")", "\n", "\n", "# This is a bit of a complicated multiplication: tmp_im[field_of_view.T] is a tensor of order image_dims+1.", "\n", "# for each pixel in the output-image it matches the positions the influence it from the input image (along 1 dim", "\n", "# only, this is why it only adds 1 dim to the shape). We then multiply, for each pixel, its set of positions with", "\n", "# the matching set of weights. we do this by this big tensor element-wise multiplication (MATLAB bsxfun style:", "\n", "# matching dims are multiplied element-wise while singletons mean that the matching dim is all multiplied by the", "\n", "# same number", "\n", "tmp_out_im", "=", "np", ".", "sum", "(", "tmp_im", "[", "field_of_view", ".", "T", "]", "*", "weights", ",", "axis", "=", "0", ")", "\n", "\n", "# Finally we swap back the axes to the original order", "\n", "return", "np", ".", "swapaxes", "(", "tmp_out_im", ",", "dim", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.numeric_kernel": [[258, 271], ["numpy.zeros_like", "range", "imresize.kernel_shift", "numpy.ndim", "scipy.ndimage.filters.correlate", "numpy.round().astype", "numpy.round().astype", "numpy.round", "numpy.round", "numpy.linspace", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.kernel_shift"], ["", "def", "numeric_kernel", "(", "im", ",", "kernel", ",", "scale_factor", ",", "output_shape", ",", "kernel_shift_flag", ")", ":", "\n", "# See kernel_shift function to understand what this is", "\n", "    ", "if", "kernel_shift_flag", ":", "\n", "        ", "kernel", "=", "kernel_shift", "(", "kernel", ",", "scale_factor", ")", "\n", "\n", "# First run a correlation (convolution with flipped kernel)", "\n", "", "out_im", "=", "np", ".", "zeros_like", "(", "im", ")", "\n", "for", "channel", "in", "range", "(", "np", ".", "ndim", "(", "im", ")", ")", ":", "\n", "        ", "out_im", "[", ":", ",", ":", ",", "channel", "]", "=", "filters", ".", "correlate", "(", "im", "[", ":", ",", ":", ",", "channel", "]", ",", "kernel", ")", "\n", "\n", "# Then subsample and return", "\n", "", "return", "out_im", "[", "np", ".", "round", "(", "np", ".", "linspace", "(", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", "/", "scale_factor", "[", "0", "]", ",", "output_shape", "[", "0", "]", ")", ")", ".", "astype", "(", "int", ")", "[", ":", ",", "None", "]", ",", "\n", "np", ".", "round", "(", "np", ".", "linspace", "(", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", "/", "scale_factor", "[", "1", "]", ",", "output_shape", "[", "1", "]", ")", ")", ".", "astype", "(", "int", ")", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.kernel_shift": [[273, 298], ["scipy.ndimage.measurements.center_of_mass", "numpy.pad", "scipy.ndimage.interpolation.shift", "numpy.array", "numpy.int", "numpy.ceil", "numpy.max"], "function", ["None"], ["", "def", "kernel_shift", "(", "kernel", ",", "sf", ")", ":", "\n", "# There are two reasons for shifting the kernel:", "\n", "# 1. Center of mass is not in the center of the kernel which creates ambiguity. There is no possible way to know", "\n", "#    the degradation process included shifting so we always assume center of mass is center of the kernel.", "\n", "# 2. We further shift kernel center so that top left result pixel corresponds to the middle of the sfXsf first", "\n", "#    pixels. Default is for odd size to be in the middle of the first pixel and for even sized kernel to be at the", "\n", "#    top left corner of the first pixel. that is why different shift size needed between od and even size.", "\n", "# Given that these two conditions are fulfilled, we are happy and aligned, the way to test it is as follows:", "\n", "# The input image, when interpolated (regular bicubic) is exactly aligned with ground truth.", "\n", "\n", "# First calculate the current center of mass for the kernel", "\n", "    ", "current_center_of_mass", "=", "measurements", ".", "center_of_mass", "(", "kernel", ")", "\n", "\n", "# The second (\"+ 0.5 * ....\") is for applying condition 2 from the comments above", "\n", "wanted_center_of_mass", "=", "np", ".", "array", "(", "kernel", ".", "shape", ")", "/", "2", "+", "0.5", "*", "(", "sf", "-", "(", "kernel", ".", "shape", "[", "0", "]", "%", "2", ")", ")", "\n", "\n", "# Define the shift vector for the kernel shifting (x,y)", "\n", "shift_vec", "=", "wanted_center_of_mass", "-", "current_center_of_mass", "\n", "\n", "# Before applying the shift, we first pad the kernel so that nothing is lost due to the shift", "\n", "# (biggest shift among dims + 1 for safety)", "\n", "kernel", "=", "np", ".", "pad", "(", "kernel", ",", "np", ".", "int", "(", "np", ".", "ceil", "(", "np", ".", "max", "(", "shift_vec", ")", ")", ")", "+", "1", ",", "'constant'", ")", "\n", "\n", "# Finally shift the kernel and return", "\n", "return", "interpolation", ".", "shift", "(", "kernel", ",", "shift_vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.cubic": [[303, 309], ["numpy.abs"], "function", ["None"], ["", "def", "cubic", "(", "x", ")", ":", "\n", "    ", "absx", "=", "np", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "absx", "**", "2", "\n", "absx3", "=", "absx", "**", "3", "\n", "return", "(", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", "*", "(", "absx", "<=", "1", ")", "+", "\n", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", "*", "(", "(", "1", "<", "absx", ")", "&", "(", "absx", "<=", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.lanczos2": [[311, 315], ["abs", "numpy.sin", "numpy.sin", "numpy.finfo", "numpy.finfo"], "function", ["None"], ["", "def", "lanczos2", "(", "x", ")", ":", "\n", "    ", "return", "(", "(", "(", "np", ".", "sin", "(", "pi", "*", "x", ")", "*", "np", ".", "sin", "(", "pi", "*", "x", "/", "2", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "/", "\n", "(", "(", "pi", "**", "2", "*", "x", "**", "2", "/", "2", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", ")", "\n", "*", "(", "abs", "(", "x", ")", "<", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.box": [[317, 319], ["None"], "function", ["None"], ["", "def", "box", "(", "x", ")", ":", "\n", "    ", "return", "(", "(", "-", "0.5", "<=", "x", ")", "&", "(", "x", "<", "0.5", ")", ")", "*", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.lanczos3": [[321, 325], ["abs", "numpy.sin", "numpy.sin", "numpy.finfo", "numpy.finfo"], "function", ["None"], ["", "def", "lanczos3", "(", "x", ")", ":", "\n", "    ", "return", "(", "(", "(", "np", ".", "sin", "(", "pi", "*", "x", ")", "*", "np", ".", "sin", "(", "pi", "*", "x", "/", "3", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "/", "\n", "(", "(", "pi", "**", "2", "*", "x", "**", "2", "/", "3", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", ")", "\n", "*", "(", "abs", "(", "x", ")", "<", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.linear": [[327, 329], ["None"], "function", ["None"], ["", "def", "linear", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "+", "1", ")", "*", "(", "(", "-", "1", "<=", "x", ")", "&", "(", "x", "<", "0", ")", ")", "+", "(", "1", "-", "x", ")", "*", "(", "(", "0", "<=", "x", ")", "&", "(", "x", "<=", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.adjust_scales2image": [[10, 19], ["math.ceil", "min", "math.pow", "math.ceil", "math.ceil", "math.log", "math.log", "math.log", "math.pow", "min", "min"], "function", ["None"], ["def", "adjust_scales2image", "(", "size", ",", "opt", ")", ":", "\n", "    ", "opt", ".", "num_scales", "=", "math", ".", "ceil", "(", "(", "math", ".", "log", "(", "math", ".", "pow", "(", "opt", ".", "min_size", "/", "size", ",", "1", ")", ",", "opt", ".", "scale_factor_init", ")", ")", ")", "+", "1", "\n", "scale2stop", "=", "math", ".", "ceil", "(", "math", ".", "log", "(", "min", "(", "[", "opt", ".", "max_size", ",", "size", "]", ")", "/", "size", ",", "opt", ".", "scale_factor_init", ")", ")", "\n", "opt", ".", "stop_scale", "=", "opt", ".", "num_scales", "-", "scale2stop", "\n", "opt", ".", "scale1", "=", "min", "(", "opt", ".", "max_size", "/", "size", ",", "1", ")", "\n", "opt", ".", "scale_factor", "=", "math", ".", "pow", "(", "opt", ".", "min_size", "/", "size", ",", "1", "/", "opt", ".", "stop_scale", ")", "\n", "scale2stop", "=", "math", ".", "ceil", "(", "math", ".", "log", "(", "min", "(", "[", "opt", ".", "max_size", ",", "size", "]", ")", "/", "size", ",", "opt", ".", "scale_factor_init", ")", ")", "\n", "opt", ".", "stop_scale", "=", "opt", ".", "num_scales", "-", "scale2stop", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise": [[20, 31], ["torch.randn", "torch.randn", "utils.upsampling", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "round", "round", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.upsampling"], ["", "def", "generate_noise", "(", "size", ",", "num_samp", "=", "1", ",", "device", "=", "'cuda'", ",", "type", "=", "'gaussian'", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "type", "==", "'gaussian'", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "num_samp", ",", "size", "[", "0", "]", ",", "round", "(", "size", "[", "1", "]", "/", "scale", ")", ",", "round", "(", "size", "[", "2", "]", "/", "scale", ")", ",", "device", "=", "device", ")", "\n", "noise", "=", "upsampling", "(", "noise", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", "\n", "", "if", "type", "==", "'gaussian_mixture'", ":", "\n", "        ", "noise1", "=", "torch", ".", "randn", "(", "num_samp", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "device", "=", "device", ")", "+", "5", "\n", "noise2", "=", "torch", ".", "randn", "(", "num_samp", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "device", "=", "device", ")", "\n", "noise", "=", "noise1", "+", "noise2", "\n", "", "if", "type", "==", "'uniform'", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "num_samp", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "device", "=", "device", ")", "\n", "", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise2": [[32, 40], ["range", "torch.stack", "torch.stack", "noise.append", "generate_noise().squeeze", "utils.generate_noise"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.generate_noise"], ["", "def", "generate_noise2", "(", "size", ",", "num_samp", "=", "1", ",", "device", "=", "'cuda'", ",", "type", "=", "'gaussian'", ",", "scale", "=", "1", ")", ":", "\n", "    ", "noise", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", "[", "0", "]", ")", ":", "\n", "        ", "noise", ".", "append", "(", "generate_noise", "(", "size", "[", "1", ":", "]", ",", "num_samp", "=", "1", ",", "device", "=", "'cuda'", ",", "type", "=", "'gaussian'", ",", "scale", "=", "1", ")", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "", "res", "=", "torch", ".", "stack", "(", "noise", ",", "dim", "=", "0", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.upsampling": [[42, 45], ["torch.Upsample", "nn.Upsample.", "round", "round"], "function", ["None"], ["", "def", "upsampling", "(", "im", ",", "sx", ",", "sy", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "round", "(", "sx", ")", ",", "round", "(", "sy", ")", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "m", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.calc_gradient_penalty": [[46, 66], ["torch.rand", "torch.rand", "alpha.to.expand", "alpha.to.to", "torch.autograd.Variable.to", "torch.autograd.Variable", "torch.autograd.Variable", "netD", "real_data.size", "torch.autograd.grad", "torch.autograd.grad", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "gradients.norm", "netD.size"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.norm"], ["", "def", "calc_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "LAMBDA", ",", "device", ")", ":", "\n", "    ", "alpha", "=", "torch", ".", "rand", "(", "1", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "size", "(", ")", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "#cuda() #gpu) #if use_cuda else alpha", "\n", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "\n", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "#.cuda()", "\n", "interpolates", "=", "torch", ".", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "\n", "disc_interpolates", "=", "netD", "(", "interpolates", ")", "\n", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "#.cuda(), #if use_cuda else torch.ones(", "\n", "#disc_interpolates.size()),", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "#LAMBDA = 1", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "LAMBDA", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.load_trained_pyramid": [[67, 79], ["os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print"], "function", ["None"], ["", "def", "load_trained_pyramid", "(", "opt", ",", "mode_", "=", "'train'", ")", ":", "\n", "    ", "mode", "=", "opt", ".", "mode", "\n", "opt", ".", "mode", "=", "'train'", "\n", "if", "(", "os", ".", "path", ".", "exists", "(", "opt", ".", "load", ")", ")", ":", "\n", "        ", "Gs", "=", "torch", ".", "load", "(", "'%s/Gs.pth'", "%", "opt", ".", "load", ",", "map_location", "=", "opt", ".", "device", ")", "\n", "Zs", "=", "torch", ".", "load", "(", "'%s/Zs.pth'", "%", "opt", ".", "load", ")", "\n", "reals", "=", "torch", ".", "load", "(", "'%s/reals.pth'", "%", "opt", ".", "load", ")", "\n", "NoiseAmp", "=", "torch", ".", "load", "(", "'%s/NoiseAmp.pth'", "%", "opt", ".", "load", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no appropriate trained model is exist, please train first'", ")", "\n", "", "opt", ".", "mode", "=", "mode", "\n", "return", "Gs", ",", "Zs", ",", "reals", ",", "NoiseAmp", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.None.utils.load_trained_pyramid_mix": [[80, 99], ["os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "sys.exit"], "function", ["None"], ["", "def", "load_trained_pyramid_mix", "(", "opt", ",", "mode_", "=", "'train'", ")", ":", "\n", "    ", "mode", "=", "opt", ".", "mode", "\n", "opt", ".", "mode", "=", "'train'", "\n", "if", "(", "os", ".", "path", ".", "exists", "(", "opt", ".", "load", ")", ")", ":", "\n", "        ", "Gs_a", "=", "torch", ".", "load", "(", "'%s/Gs_a.pth'", "%", "opt", ".", "load", ",", "map_location", "=", "opt", ".", "device", ")", "\n", "Zs_a", "=", "torch", ".", "load", "(", "'%s/Zs_a.pth'", "%", "opt", ".", "load", ")", "\n", "reals_a", "=", "torch", ".", "load", "(", "'%s/reals_a.pth'", "%", "opt", ".", "load", ")", "\n", "NoiseAmp_a", "=", "torch", ".", "load", "(", "'%s/NoiseAmp_a.pth'", "%", "opt", ".", "load", ",", "map_location", "=", "opt", ".", "device", ")", "\n", "\n", "Gs_b", "=", "torch", ".", "load", "(", "'%s/Gs_b.pth'", "%", "opt", ".", "load", ",", "map_location", "=", "opt", ".", "device", ")", "\n", "Zs_b", "=", "torch", ".", "load", "(", "'%s/Zs_b.pth'", "%", "opt", ".", "load", ")", "\n", "reals_b", "=", "torch", ".", "load", "(", "'%s/reals_b.pth'", "%", "opt", ".", "load", ")", "\n", "NoiseAmp_b", "=", "torch", ".", "load", "(", "'%s/NoiseAmp_b.pth'", "%", "opt", ".", "load", ",", "map_location", "=", "opt", ".", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no appropriate trained model is exist, please train first'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "opt", ".", "mode", "=", "mode", "\n", "return", "Gs_a", ",", "Zs_a", ",", "reals_a", ",", "NoiseAmp_a", ",", "Gs_b", ",", "Zs_b", ",", "reals_b", ",", "NoiseAmp_b", "", "", ""]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.video2imgs.main": [[9, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "cv2.VideoCapture", "print", "cv2.VideoCapture.read", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "cv2.imwrite", "cv2.VideoCapture.read", "print", "os.join"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "default", "=", "'video.avi'", ")", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "default", "=", "'./data/'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out", ")", "\n", "\n", "", "print", "(", "\"start\"", ")", "\n", "vidcap", "=", "cv2", ".", "VideoCapture", "(", "args", ".", "input", ")", "\n", "\n", "print", "(", "\"video capture is done\"", ")", "\n", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "=", "0", "\n", "while", "success", ":", "\n", "      ", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "args", ".", "out", ",", "\"%d.jpg\"", "%", "count", ")", ",", "image", ")", "# save frame as JPEG file", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "print", "(", "'Read a new frame: '", ",", "success", ")", "\n", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.imgs2video.convert_frames_to_video": [[8, 41], ["range", "print", "range", "cv2.VideoWriter", "range", "cv2.VideoWriter.release", "len", "cv2.imread", "print", "frame_array.append", "cv2.VideoWriter_fourcc", "len", "cv2.VideoWriter.write", "files.append", "files.append", "files.append", "str", "str", "str"], "function", ["None"], ["def", "convert_frames_to_video", "(", "args", ")", ":", "\n", "    ", "frame_array", "=", "[", "]", "\n", "#files = [f for f in os.listdir(args.input) if isfile(join(args.input, f))]", "\n", "files", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "frames", ")", ":", "\n", "        ", "if", "args", ".", "const", ":", "\n", "            ", "files", ".", "append", "(", "str", "(", "args", ".", "start_cnt", ")", "+", "args", ".", "ext", ")", "\n", "", "elif", "not", "args", ".", "reverse", ":", "\n", "            ", "files", ".", "append", "(", "str", "(", "args", ".", "start_cnt", "+", "i", ")", "+", "args", ".", "ext", ")", "\n", "", "else", ":", "\n", "            ", "files", ".", "append", "(", "str", "(", "args", ".", "start_cnt", "+", "args", ".", "frames", "-", "i", "-", "1", ")", "+", "args", ".", "ext", ")", "\n", "\n", "", "", "print", "(", "files", ")", "\n", "\n", "# for sorting the file names properly", "\n", "#files.sort(key=lambda x: int(x[5:-4]))", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "files", ")", ")", ":", "\n", "        ", "filename", "=", "args", ".", "input", "+", "files", "[", "i", "]", "\n", "# reading each files", "\n", "img", "=", "cv2", ".", "imread", "(", "filename", ")", "\n", "height", ",", "width", ",", "layers", "=", "img", ".", "shape", "\n", "size", "=", "(", "width", ",", "height", ")", "\n", "print", "(", "filename", ")", "\n", "# inserting the frames into an image array", "\n", "frame_array", ".", "append", "(", "img", ")", "\n", "\n", "", "out", "=", "cv2", ".", "VideoWriter", "(", "args", ".", "out", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'DIVX'", ")", ",", "args", ".", "fps", ",", "size", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "frame_array", ")", ")", ":", "\n", "# writing to a image array", "\n", "        ", "out", ".", "write", "(", "frame_array", "[", "i", "]", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.imgs2video.main": [[43, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "imgs2video.convert_frames_to_video"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.video.imgs2video.convert_frames_to_video"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "default", "=", "'video.avi'", ")", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "default", "=", "'./data/'", ")", "\n", "parser", ".", "add_argument", "(", "'--ext'", ",", "default", "=", "'.png'", ")", "\n", "parser", ".", "add_argument", "(", "'--fps'", ",", "type", "=", "float", ",", "default", "=", "15.0", ")", "\n", "parser", ".", "add_argument", "(", "'--start_cnt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--frames'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--reverse'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--const'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "#convert_frames_to_video(pathIn, pathOut, fps)", "\n", "convert_frames_to_video", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__init__": [[84, 109], ["range", "math.pow", "math.ceil", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open().convert", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "eval_video.Video_dataset.data[].append", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "str", "PIL.Image.open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "size", ",", "ext", ",", "opt", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "ext", "=", "ext", "\n", "\n", "self", ".", "data", "=", "{", "}", "\n", "\n", "for", "ii", "in", "range", "(", "0", ",", "opt", ".", "stop_scale", "+", "1", ",", "1", ")", ":", "\n", "            ", "scale", "=", "math", ".", "pow", "(", "opt", ".", "scale_factor", ",", "opt", ".", "stop_scale", "-", "ii", ")", "\n", "\n", "s_size", "=", "math", ".", "ceil", "(", "scale", "*", "opt", ".", "img_size", ")", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "(", "s_size", ",", "s_size", ")", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "                ", "if", "j", "not", "in", "self", ".", "data", ":", "\n", "                    ", "self", ".", "data", "[", "j", "]", "=", "[", "]", "\n", "\n", "", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "str", "(", "j", ")", "+", "self", ".", "ext", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "sample", "=", "transform", "(", "image", ")", "\n", "self", ".", "data", "[", "j", "]", ".", "append", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__len__": [[110, 112], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.Video_dataset.__getitem__": [[113, 115], ["tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "data", "[", "idx", "]", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.draw_concat": [[21, 46], ["len", "zip", "imresize.imresize2", "real_curr.cuda", "G", "G", "G.detach", "real_curr.cuda", "z_in.detach", "z_in.detach"], "function", ["home.repos.pwc.inspect_result.rmokady_structural-analogy.None.imresize.imresize2"], ["def", "draw_concat", "(", "Gs", ",", "reals", ",", "NoiseAmp", ",", "in_s", ",", "mode", ",", "fixed_noise", ",", "opt", ")", ":", "\n", "    ", "if", "len", "(", "Gs", ")", ">", "0", ":", "\n", "        ", "if", "mode", "==", "'rand'", ":", "\n", "            ", "count", "=", "0", "\n", "for", "G", ",", "real_curr", ",", "real_next", ",", "noise_amp", "in", "zip", "(", "Gs", ",", "reals", ",", "reals", "[", "1", ":", "]", ",", "NoiseAmp", ")", ":", "\n", "                ", "if", "not", "opt", ".", "add_inject", "or", "count", ">=", "opt", ".", "inject_level", ":", "\n", "                    ", "if", "count", "==", "0", ":", "\n", "                        ", "G_z", "=", "in_s", "\n", "", "z", "=", "fixed_noise", "[", "count", "]", "\n", "\n", "if", "count", "==", "opt", ".", "inject_level", "and", "opt", ".", "add_inject", ":", "\n", "                        ", "z_in", "=", "noise_amp", "*", "z", "+", "real_curr", ".", "cuda", "(", ")", "\n", "G_z", "=", "real_curr", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                        ", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_curr", ".", "shape", "[", "2", "]", ",", "0", ":", "real_curr", ".", "shape", "[", "3", "]", "]", "\n", "z_in", "=", "noise_amp", "*", "z", "+", "G_z", "\n", "", "if", "count", ">", "opt", ".", "switch_scale", ":", "\n", "                        ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "G_z", "=", "G", "(", "z_in", ".", "detach", "(", ")", ",", "G_z", ")", "\n", "", "G_z", "=", "imresize2", "(", "G_z", ".", "detach", "(", ")", ",", "1", "/", "opt", ".", "scale_factor", ",", "opt", ")", "\n", "G_z", "=", "G_z", "[", ":", ",", ":", ",", "0", ":", "real_next", ".", "shape", "[", "2", "]", ",", "0", ":", "real_next", ".", "shape", "[", "3", "]", "]", "\n", "", "count", "+=", "1", "\n", "\n", "", "", "", "return", "G_z", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.init_models": [[48, 63], ["models.Generator_no_res().to", "models.Generator_no_res().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator_no_res().to.load_state_dict", "models.WDiscriminator().to.load_state_dict", "models.Generator_no_res", "torch.load", "torch.load", "torch.load", "torch.load", "models.WDiscriminator", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "init_models", "(", "opt", ")", ":", "\n", "\n", "#generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator_no_res", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netG", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG", ")", ")", "\n", "\n", "#discriminator initialization:", "\n", "", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netD", "!=", "''", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netD", ")", ")", "\n", "\n", "", "return", "netD", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.rmokady_structural-analogy.video.eval_video.init_models_res": [[65, 79], ["models.Generator().to", "models.Generator().to.apply", "models.WDiscriminator().to", "models.WDiscriminator().to.apply", "models.Generator().to.load_state_dict", "models.WDiscriminator().to.load_state_dict", "models.Generator", "torch.load", "torch.load", "torch.load", "torch.load", "models.WDiscriminator", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "init_models_res", "(", "opt", ")", ":", "\n", "# generator initialization:", "\n", "    ", "netG", "=", "models", ".", "Generator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netG", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netG", "!=", "''", ":", "\n", "        ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netG", ")", ")", "\n", "\n", "# discriminator initialization:", "\n", "", "netD", "=", "models", ".", "WDiscriminator", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "netD", ".", "apply", "(", "models", ".", "weights_init", ")", "\n", "if", "opt", ".", "netD", "!=", "''", ":", "\n", "        ", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "netD", ")", ")", "\n", "\n", "", "return", "netD", ",", "netG", "\n", "\n"]]}