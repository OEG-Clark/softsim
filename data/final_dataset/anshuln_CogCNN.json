{"home.repos.pwc.inspect_result.anshuln_CogCNN.None.download_open_images.generate_pandas": [[16, 24], ["pandas.read_csv().drop", "pandas.read_csv().drop", "[].tolist", "ims.merge.merge", "pandas.read_csv", "pandas.read_csv", "ims.merge.LabelName.isin", "pandas.read_csv", "ims.merge.MaskPath.isin"], "function", ["None"], ["def", "generate_pandas", "(", "names", ",", "seg_file", ",", "im_file", ",", "label_file", ")", ":", "\n", "    ", "segs", "=", "pd", ".", "read_csv", "(", "seg_file", ")", ".", "drop", "(", "[", "'BoxID'", ",", "'BoxXMin'", ",", "'BoxXMax'", ",", "'BoxYMin'", ",", "'BoxYMax'", ",", "'PredictedIoU'", ",", "'Clicks'", "]", ",", "axis", "=", "1", ")", "\n", "ims", "=", "pd", ".", "read_csv", "(", "im_file", ")", ".", "drop", "(", "[", "'OriginalLandingURL'", ",", "'License'", ",", "'AuthorProfileURL'", ",", "'Author'", ",", "'Title'", ",", "'OriginalSize'", ",", "'OriginalMD5'", ",", "'Thumbnail300KURL'", ",", "'Rotation'", "]", ",", "axis", "=", "1", ")", "\n", "labels", "=", "pd", ".", "read_csv", "(", "label_file", ")", "[", "\"LabelHex\"", "]", ".", "tolist", "(", ")", "\n", "ims", "=", "ims", ".", "merge", "(", "segs", ",", "on", "=", "'ImageID'", ")", "\n", "ims", "=", "ims", ".", "loc", "[", "ims", ".", "MaskPath", ".", "isin", "(", "names", ")", ",", ":", "]", "\n", "ims", "=", "ims", ".", "loc", "[", "ims", ".", "LabelName", ".", "isin", "(", "labels", ")", "]", "\n", "return", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.download_open_images.download_images": [[25, 50], ["set", "dict", "tqdm.tqdm", "img_df[].tolist", "os.makedirs", "dict.keys", "urllib.request.urlretrieve", "l.replace", "[].replace", "print"], "function", ["None"], ["", "def", "download_images", "(", "img_df", ",", "train_dir", ",", "counter", "=", "10000000000", ")", ":", "\n", "#Step 1 - create folders having labels", "\n", "    ", "labels", "=", "set", "(", "img_df", "[", "'LabelName'", "]", ".", "tolist", "(", ")", ")", "\n", "labels_counts", "=", "dict", "(", "[", "(", "x", ",", "0", ")", "for", "x", "in", "labels", "]", ")", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "os", ".", "makedirs", "(", "'{}/{}'", ".", "format", "(", "train_dir", ",", "l", ".", "replace", "(", "'/'", ",", "'#'", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "#Step 2 - download images", "\n", "", "index", "=", "0", "\n", "for", "ind", "in", "tqdm", "(", "img_df", ".", "index", ")", ":", "\n", "        ", "lab", "=", "True", "\n", "for", "l", "in", "labels_counts", ".", "keys", "(", ")", ":", "\n", "            ", "lab", "=", "lab", "&", "(", "labels_counts", "[", "l", "]", ">", "counter", ")", "\n", "", "if", "lab", ":", "\n", "            ", "break", "\n", "", "if", "labels_counts", "[", "img_df", "[", "'LabelName'", "]", "[", "ind", "]", "]", ">", "counter", ":", "\n", "            ", "continue", "\n", "# if ind<50:", "\n", "", "try", ":", "\n", "            ", "url", "=", "img_df", "[", "'OriginalURL'", "]", "[", "ind", "]", "\n", "path", "=", "'{}/{}/{}.jpg'", ".", "format", "(", "train_dir", ",", "img_df", "[", "'LabelName'", "]", "[", "ind", "]", ".", "replace", "(", "'/'", ",", "'#'", ")", ",", "img_df", "[", "'ImageID'", "]", "[", "ind", "]", ")", "#All images are jpg", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "path", ")", "\n", "labels_counts", "[", "img_df", "[", "'LabelName'", "]", "[", "ind", "]", "]", "+=", "1", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"HTTP Error URL doesn't exist\"", ")", "\n", "", "", "", "def", "bbox", "(", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.download_open_images.bbox": [[50, 57], ["numpy.any", "numpy.any", "numpy.where", "numpy.where"], "function", ["None"], ["", "", "", "def", "bbox", "(", "img", ")", ":", "\n", "    ", "rows", "=", "np", ".", "any", "(", "img", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "img", ",", "axis", "=", "0", ")", "\n", "rmin", ",", "rmax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "cmin", ",", "cmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "\n", "return", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.download_open_images.segment_images": [[58, 79], ["cv2.imread", "download_open_images.bbox", "cv2.imwrite", "print", "[].replace", "print", "cv2.resize", "[].replace", "print", "cv2.imread"], "function", ["home.repos.pwc.inspect_result.anshuln_CogCNN.None.download_open_images.bbox"], ["", "def", "segment_images", "(", "img_df", ",", "train_dir", ",", "train_segmentation_dir", ")", ":", "\n", "    ", "for", "ind", "in", "img_df", ".", "index", ":", "\n", "# if ind<50:", "\n", "        ", "try", ":", "\n", "            ", "impath", "=", "'{}/{}/{}.jpg'", ".", "format", "(", "train_dir", ",", "img_df", "[", "'LabelName'", "]", "[", "ind", "]", ".", "replace", "(", "'/'", ",", "'#'", ")", ",", "img_df", "[", "'ImageID'", "]", "[", "ind", "]", ")", "#All images are jpg", "\n", "seg_path", "=", "\"{}/{}\"", ".", "format", "(", "train_segmentation_dir", ",", "img_df", "[", "'MaskPath'", "]", "[", "ind", "]", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "impath", ")", "#/255.0", "\n", "if", "image", "is", "None", ":", "\n", "                ", "print", "(", "\"File doesn't exist\"", ")", "\n", "continue", "\n", "", "image", "=", "image", "/", "255.0", "\n", "imshape", "=", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "segmask", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "seg_path", ")", ",", "imshape", ")", "/", "255.0", "\n", "image", "=", "image", "*", "segmask", "\n", "rmin", ",", "rmax", ",", "cmin", ",", "cmax", "=", "bbox", "(", "image", ")", "\n", "image", "=", "image", "[", "rmin", ":", "rmax", ",", "cmin", ":", "cmax", ",", ":", "]", "\n", "impath", "=", "'{}/{}/{}$segmented.jpg'", ".", "format", "(", "train_dir", ",", "img_df", "[", "'LabelName'", "]", "[", "ind", "]", ".", "replace", "(", "'/'", ",", "'#'", ")", ",", "img_df", "[", "'ImageID'", "]", "[", "ind", "]", ")", "\n", "cv2", ".", "imwrite", "(", "impath", ",", "(", "image", ")", "*", "255.0", ")", "\n", "print", "(", "\"Wrote file into {}\"", ".", "format", "(", "impath", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "print", "(", "\"File doesn't exist\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.train.TrainingDataset.__init__": [[20, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_of_paths", ",", "stream_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            text_file(string): path to text file\n            root_dir(string): directory with all train images\n        \"\"\"", "\n", "self", ".", "file_paths", "=", "list_of_paths", "\n", "self", ".", "stream_dict", "=", "stream_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.train.TrainingDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.train.TrainingDataset.__getitem__": [[32, 61], ["file_path.split", "np.expand_dims", "np.moveaxis", "np.array", "paths_to_read.append", "cv2.resize", "np.moveaxis", "np.concatenate", "cv2.resize", "labels_list.index", "torch.tensor", "torch.tensor", "torch.tensor", "cv2.imread", "cv2.resize", "len", "np.expand_dims", "np.expand_dims", "cv2.imread", "cv2.imread", "np.moveaxis", "np.expand_dims"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "file_path", "=", "self", ".", "file_paths", "[", "idx", "]", "\n", "paths_to_read", "=", "[", "]", "\n", "curr_path", "=", "file_path", ".", "split", "(", "'/'", ")", "\n", "for", "p", "in", "self", ".", "stream_dict", ":", "\n", "            ", "path", "=", "[", "x", "for", "x", "in", "curr_path", "]", "\n", "path", "[", "-", "1", "]", "=", "p", "[", "1", "]", "+", "curr_path", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "path", "[", "6", "]", "=", "p", "[", "0", "]", "\n", "paths_to_read", ".", "append", "(", "'/'", ".", "join", "(", "path", ")", ")", "\n", "", "label_path", "=", "[", "x", "for", "x", "in", "curr_path", "]", "\n", "label_path", "[", "-", "1", "]", "=", "'m'", "+", "label_path", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "label_path", "[", "6", "]", "=", "'fruit_main'", "\n", "label_path", "=", "'/'", ".", "join", "(", "label_path", ")", "\n", "\n", "vect", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "paths_to_read", "[", "0", "]", ")", ",", "(", "64", ",", "64", ")", ")", "/", "255.0", "\n", "vect", "=", "np", ".", "expand_dims", "(", "np", ".", "moveaxis", "(", "vect", ",", "2", ",", "0", ")", ",", "0", ")", "\n", "for", "path", "in", "paths_to_read", "[", "1", ":", "]", ":", "\n", "            ", "img", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "path", ")", ",", "(", "64", ",", "64", ")", ")", "/", "255.0", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "np", ".", "moveaxis", "(", "img", ",", "2", ",", "0", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "#             print(img.shape)", "\n", "", "vect", "=", "np", ".", "concatenate", "(", "[", "vect", ",", "img", "]", ",", "0", ")", "\n", "", "label_img", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "label_path", ")", ",", "(", "64", ",", "64", ")", ")", "/", "255.0", "\n", "label_img", "=", "np", ".", "moveaxis", "(", "label_img", ",", "2", ",", "0", ")", "\n", "label", "=", "np", ".", "array", "(", "labels_list", ".", "index", "(", "curr_path", "[", "7", "]", ")", ")", "#convert to one hot", "\n", "sample", "=", "{", "'image'", ":", "torch", ".", "tensor", "(", "vect", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "'label_img'", ":", "torch", ".", "tensor", "(", "label_img", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "'label'", ":", "torch", ".", "tensor", "(", "label", ")", "}", "\n", "return", "sample", "\n", "# mnistmTrainSet = mnistmTrainingDataset(text_file ='Downloads/mnist_m/mnist_m_train_labels.txt',", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.layers.Flatten.forward": [[5, 8], ["x.view.view.view", "x.view.view.size"], "methods", ["None"], ["\t", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.layers.CompleteAttention.__init__": [[10, 14], ["torch.nn.Module.__init__", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "layers", ",", "num_streams", ")", ":", "\n", "\t\t", "super", "(", "CompleteAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "num_streams", "=", "num_streams", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.layers.CompleteAttention.forward": [[15, 20], ["layers.CompleteAttention.get_attention_map"], "methods", ["home.repos.pwc.inspect_result.anshuln_CogCNN.None.layers.CompleteAttention.get_attention_map"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "attention_map", ",", "means", ",", "meansum", "=", "self", ".", "get_attention_map", "(", "x", ")", "\n", "\n", "#         print(x.size(),attention_map.size())", "\n", "return", "x", "*", "attention_map", ",", "means", ",", "meansum", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.layers.CompleteAttention.get_attention_map": [[21, 33], ["layers.CompleteAttention.model", "list", "range", "range", "layers.CompleteAttention.size", "means.append", "torch.mean"], "methods", ["None"], ["", "def", "get_attention_map", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "attention_map", "=", "self", ".", "model", "(", "x", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "list", "(", "attention_map", ".", "size", "(", ")", ")", "\n", "means", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_streams", ")", ":", "\n", "\t\t\t", "means", ".", "append", "(", "torch", ".", "mean", "(", "attention_map", "[", ":", ",", "i", "*", "(", "c", "//", "self", ".", "num_streams", ")", ":", "(", "i", "+", "1", ")", "*", "(", "c", "//", "self", ".", "num_streams", ")", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "meansum", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_streams", ")", ":", "\n", "\t\t\t", "meansum", "+=", "means", "[", "i", "]", "\n", "\n", "", "return", "attention_map", ",", "means", ",", "meansum", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.layers.CompleteAttention.set_train_false": [[34, 37], ["layers.CompleteAttention.model.parameters"], "methods", ["None"], ["", "def", "set_train_false", "(", "self", ")", ":", "\n", "\t\t", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "p", ".", "requires_grads", "=", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.model.MultiTaskModel.__init__": [[5, 22], ["torch.nn.Module.__init__", "range", "CompleteAttention", "CompleteAttention", "torch.nn.Sequential", "torch.nn.Sequential", "model.MultiTaskModel.segnets.append", "Flatten", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "Flatten", "torch.nn.Linear", "SegNet().cuda", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "SegNet"], "methods", ["home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_shape", ",", "num_labels", ",", "num_inputs", "=", "4", ")", ":", "\n", "        ", "super", "(", "MultiTaskModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "\n", "self", ".", "segnets", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_inputs", ")", ":", "\n", "            ", "self", ".", "segnets", ".", "append", "(", "SegNet", "(", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "self", ".", "attention_gates_rec", "=", "CompleteAttention", "(", "[", "nn", ".", "Conv2d", "(", "512", "*", "num_inputs", ",", "128", ",", "3", ",", "padding", "=", "2", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "128", ",", "512", "*", "num_inputs", ",", "3", ",", "padding", "=", "0", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", ",", "4", ")", "\n", "self", ".", "attention_gates_pred", "=", "CompleteAttention", "(", "[", "nn", ".", "Conv2d", "(", "512", "*", "num_inputs", ",", "128", ",", "3", ",", "padding", "=", "2", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "128", ",", "512", "*", "num_inputs", ",", "3", ",", "padding", "=", "0", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", ",", "4", ")", "\n", "\n", "self", ".", "reconstruct_image", "=", "nn", ".", "Sequential", "(", "Flatten", "(", ")", ",", "nn", ".", "BatchNorm1d", "(", "512", "*", "4", "*", "16", ")", ",", "nn", ".", "Linear", "(", "512", "*", "4", "*", "16", ",", "1024", ")", ",", "nn", ".", "Linear", "(", "1024", ",", "image_shape", "[", "0", "]", "*", "image_shape", "[", "1", "]", "*", "image_shape", "[", "2", "]", ",", "nn", ".", "Sigmoid", "(", ")", ")", ")", "#Add sigmoid", "\n", "\n", "self", ".", "predict_label", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", "*", "num_inputs", ",", "128", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "2", ")", ",", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_labels", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.model.MultiTaskModel.forward": [[23, 41], ["list", "torch.cat.unsqueeze", "range", "model.MultiTaskModel.attention_gates_rec", "model.MultiTaskModel.attention_gates_pred", "model.MultiTaskModel.reconstruct_image().view", "model.MultiTaskModel.predict_label", "x.size", "torch.cat", "torch.cat", "model.MultiTaskModel.reconstruct_image", "rec1.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         print(x.size())", "\n", "        ", "batch", ",", "num_ip", ",", "c", ",", "h", ",", "w", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "results", "=", "[", "]", "\n", "encoded_reps", ",", "rec", "=", "self", ".", "segnets", "[", "0", "]", "(", "x", "[", ":", ",", "0", "]", ")", "#Assuming x is a batch,num_ip,c,h,w tensor", "\n", "rec", "=", "rec", ".", "unsqueeze", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_inputs", ")", ":", "\n", "            ", "enc", ",", "rec1", "=", "self", ".", "segnets", "[", "i", "]", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "encoded_reps", "=", "torch", ".", "cat", "(", "(", "encoded_reps", ",", "enc", ")", ",", "1", ")", "#nchw", "\n", "rec", "=", "torch", ".", "cat", "(", "(", "rec", ",", "rec1", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "encoded_reps_rec", ",", "meansr", ",", "meansumr", "=", "self", ".", "attention_gates_rec", "(", "encoded_reps", ")", "\n", "encoded_reps_pred", ",", "meansp", ",", "meansump", "=", "self", ".", "attention_gates_pred", "(", "encoded_reps", ")", "\n", "\n", "rec_im", "=", "self", ".", "reconstruct_image", "(", "encoded_reps_rec", ")", ".", "view", "(", "batch", ",", "c", ",", "h", ",", "w", ")", "#get batch etc", "\n", "pred_im", "=", "self", ".", "predict_label", "(", "encoded_reps_pred", ")", "\n", "\n", "return", "(", "rec", ",", "rec_im", ",", "pred_im", ",", "meansr", ",", "meansumr", ",", "meansp", ",", "meansump", ")", "\n", "", "def", "get_attention_stats", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.model.MultiTaskModel.get_attention_stats": [[41, 55], ["list", "torch.cat.unsqueeze", "range", "model.MultiTaskModel.attention_gates_rec", "model.MultiTaskModel.attention_gates_pred", "x.size", "torch.cat", "torch.cat", "rec1.unsqueeze"], "methods", ["None"], ["", "def", "get_attention_stats", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "num_ip", ",", "c", ",", "h", ",", "w", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "results", "=", "[", "]", "\n", "encoded_reps", ",", "rec", "=", "self", ".", "segnets", "[", "0", "]", "(", "x", "[", ":", ",", "0", "]", ")", "#Assuming x is a batch,num_ip,c,h,w tensor", "\n", "rec", "=", "rec", ".", "unsqueeze", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_inputs", ")", ":", "\n", "            ", "enc", ",", "rec1", "=", "self", ".", "segnets", "[", "i", "]", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "encoded_reps", "=", "torch", ".", "cat", "(", "(", "encoded_reps", ",", "enc", ")", ",", "1", ")", "#nchw", "\n", "rec", "=", "torch", ".", "cat", "(", "(", "rec", ",", "rec1", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "encoded_reps_rec", ",", "meansr", ",", "meansumr", "=", "self", ".", "attention_gates_rec", "(", "encoded_reps", ")", "\n", "encoded_reps_pred", ",", "meansp", ",", "meansump", "=", "self", ".", "attention_gates_pred", "(", "encoded_reps", ")", "\n", "\n", "return", "meansr", ",", "meansp", ",", "meansumr", ",", "meansump", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.__init__": [[11, 59], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "segnet.SegNet.modules", "segnet.SegNet.encoder_block.append", "segnet.SegNet.decoder_block.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_block_enc.append", "segnet.SegNet.conv_block_dec.append", "segnet.SegNet.conv_block_enc.append", "segnet.SegNet.conv_block_dec.append", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "segnet.SegNet.conv_layer", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.__init__", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initialise network parameters", "\n", "#         if opt.type == 'wide':", "\n", "#             filter = [64, 128, 256, 512, 1024]", "\n", "#         else:", "\n", "filter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "class_nb", "=", "13", "\n", "\n", "# define encoder decoder layers", "\n", "self", ".", "encoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "3", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "decoder_block", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "encoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "decoder_block", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "\n", "# define convolution layer", "\n", "", "self", ".", "conv_block_enc", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "filter", "[", "0", "]", "]", ")", "]", ")", "\n", "self", ".", "conv_block_dec", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "conv_layer", "(", "[", "filter", "[", "0", "]", ",", "3", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_block_enc", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "+", "1", "]", ",", "filter", "[", "i", "+", "1", "]", "]", ")", ")", ")", "\n", "self", ".", "conv_block_dec", ".", "append", "(", "nn", ".", "Sequential", "(", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ",", "\n", "self", ".", "conv_layer", "(", "[", "filter", "[", "i", "]", ",", "filter", "[", "i", "]", "]", ")", ")", ")", "\n", "\n", "# define task specific layers", "\n", "\n", "# define pooling and unpooling functions", "\n", "", "", "self", ".", "down_sampling", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "return_indices", "=", "True", ")", "\n", "self", ".", "up_sampling", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "logsigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "-", "0.5", ",", "-", "0.5", ",", "-", "0.5", "]", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.conv_layer": [[61, 78], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "", "def", "conv_layer", "(", "self", ",", "channel", ")", ":", "\n", "#         if opt.type == 'deep':", "\n", "#             conv_block = nn.Sequential(", "\n", "#                 nn.Conv2d(in_channels=channel[0], out_channels=channel[1], kernel_size=3, padding=1),", "\n", "#                 nn.BatchNorm2d(num_features=channel[1]),", "\n", "#                 nn.ReLU(inplace=True),", "\n", "#                 nn.Conv2d(in_channels=channel[1], out_channels=channel[1], kernel_size=3, padding=1),", "\n", "#                 nn.BatchNorm2d(num_features=channel[1]),", "\n", "#                 nn.ReLU(inplace=True),", "\n", "#             )", "\n", "#         else:", "\n", "        ", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "[", "0", "]", ",", "out_channels", "=", "channel", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channel", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "conv_block", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.forward": [[79, 108], ["range", "range", "range", "range", "segnet.SegNet.down_sampling", "segnet.SegNet.down_sampling", "segnet.SegNet.up_sampling", "segnet.SegNet.up_sampling", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "g_encoder", ",", "g_decoder", ",", "g_maxpool", ",", "g_upsampl", ",", "indices", "=", "(", "[", "0", "]", "*", "5", "for", "_", "in", "range", "(", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "g_encoder", "[", "i", "]", ",", "g_decoder", "[", "-", "i", "-", "1", "]", "=", "(", "[", "0", "]", "*", "2", "for", "_", "in", "range", "(", "2", ")", ")", "\n", "\n", "# global shared encoder-decoder network", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "x", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_encoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "encoder_block", "[", "i", "]", "(", "g_maxpool", "[", "i", "-", "1", "]", ")", "\n", "g_encoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_enc", "[", "i", "]", "(", "g_encoder", "[", "i", "]", "[", "0", "]", ")", "\n", "g_maxpool", "[", "i", "]", ",", "indices", "[", "i", "]", "=", "self", ".", "down_sampling", "(", "g_encoder", "[", "i", "]", "[", "1", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_maxpool", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "g_upsampl", "[", "i", "]", "=", "self", ".", "up_sampling", "(", "g_decoder", "[", "i", "-", "1", "]", "[", "-", "1", "]", ",", "indices", "[", "-", "i", "-", "1", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "0", "]", "=", "self", ".", "decoder_block", "[", "-", "i", "-", "1", "]", "(", "g_upsampl", "[", "i", "]", ")", "\n", "g_decoder", "[", "i", "]", "[", "1", "]", "=", "self", ".", "conv_block_dec", "[", "-", "i", "-", "1", "]", "(", "g_decoder", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "# define task prediction layers", "\n", "\n", "", "", "return", "g_encoder", "[", "i", "]", "[", "1", "]", ",", "g_decoder", "[", "i", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.segnet.SegNet.set_train_false": [[109, 113], ["segnet.SegNet.modules", "m.parameters"], "methods", ["None"], ["", "def", "set_train_false", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grads", "=", "False", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.generate_dataset.get_labels": [[8, 14], ["os.walk", "list", "set"], "function", ["None"], ["def", "get_labels", "(", "folder", ")", ":", "\n", "#Returns all labels in the training set", "\n", "    ", "labels", "=", "[", "]", "\n", "for", "_", ",", "f", ",", "_", "in", "os", ".", "walk", "(", "folder", ")", ":", "\n", "        ", "labels", "+=", "(", "f", ")", "\n", "", "return", "list", "(", "set", "(", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.generate_dataset.one_hot": [[15, 19], ["None"], "function", ["None"], ["", "def", "one_hot", "(", "label_index", ",", "len_labels", ")", ":", "\n", "    ", "one_hot", "=", "[", "0", "]", "*", "len_labels", "\n", "one_hot", "[", "label_index", "]", "=", "1", "\n", "return", "one_hot", "\n", "", "def", "generate_npy_files", "(", "train_file_dir_list", "=", "[", "'amazon_silhouette'", ",", "'amazon_texture/images'", ",", "'edges'", ",", "'greyscale'", "]", ",", "test_file_dir", "=", "'images'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.generate_dataset.generate_npy_files": [[19, 72], ["generate_dataset.get_labels", "random.shuffle", "print", "list", "os.listdir", "range", "labels_images_batch.append", "labels_batch.append", "range", "file.endswith", "len", "img_batch[].append", "cv2.resize", "generate_dataset.one_hot", "print", "numpy.save", "numpy.save", "numpy.save", "len", "image_paths.append", "cv2.resize", "get_labels.index", "len", "numpy.array", "numpy.array", "numpy.array", "list", "cv2.imread", "range", "cv2.imread", "path.split", "len"], "function", ["home.repos.pwc.inspect_result.anshuln_CogCNN.None.generate_dataset.get_labels", "home.repos.pwc.inspect_result.anshuln_CogCNN.None.generate_dataset.one_hot"], ["", "def", "generate_npy_files", "(", "train_file_dir_list", "=", "[", "'amazon_silhouette'", ",", "'amazon_texture/images'", ",", "'edges'", ",", "'greyscale'", "]", ",", "test_file_dir", "=", "'images'", ")", ":", "\n", "    ", "base_dir", "=", "train_file_dir_list", "[", "0", "]", "\n", "labels", "=", "get_labels", "(", "test_file_dir", ")", "\n", "idx_img", "=", "0", "\n", "idx_h5", "=", "0", "\n", "img_batch", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "len", "(", "train_file_dir_list", ")", ")", "]", "# TODO shuffle training data", "\n", "labels_batch", "=", "[", "]", "\n", "labels_images_batch", "=", "[", "]", "\n", "batch_size", "=", "16", "\n", "img_size", "=", "(", "64", ",", "64", ")", "\n", "image_paths", "=", "[", "]", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "dir", "=", "\"{}/{}\"", ".", "format", "(", "base_dir", ",", "l", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "dir", ")", ":", "\n", "            ", "if", "file", ".", "endswith", "(", "\".jpg\"", ")", ":", "\n", "                ", "image_paths", ".", "append", "(", "\"{}/{}\"", ".", "format", "(", "l", ",", "file", ")", ")", "\n", "", "", "", "shuffle", "(", "image_paths", ")", "\n", "print", "(", "labels", ")", "\n", "for", "path", "in", "image_paths", ":", "\n", "        ", "for", "dir_idx", "in", "range", "(", "len", "(", "train_file_dir_list", ")", ")", ":", "\n", "            ", "dire", "=", "train_file_dir_list", "[", "dir_idx", "]", "\n", "img_batch", "[", "dir_idx", "]", ".", "append", "(", "cv2", ".", "resize", "(", "(", "cv2", ".", "imread", "(", "\"{}/{}\"", ".", "format", "(", "dire", ",", "path", ")", ")", "/", "255.0", ")", ",", "img_size", ")", ")", "\n", "#print(len(img_batch),len(img_batch[0]),len(img_batch[1]))", "\n", "#print(dir_idx,\"{}/{}\".format(dire,path))", "\n", "", "labels_images_batch", ".", "append", "(", "cv2", ".", "resize", "(", "(", "cv2", ".", "imread", "(", "\"{}/{}\"", ".", "format", "(", "test_file_dir", ",", "path", ")", ")", "/", "255.0", ")", ",", "img_size", ")", ")", "\n", "labels_batch", ".", "append", "(", "one_hot", "(", "labels", ".", "index", "(", "path", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", ",", "len", "(", "labels", ")", ")", ")", "\n", "idx_img", "+=", "1", "\n", "if", "(", "(", "idx_img", "+", "1", ")", "%", "batch_size", "==", "0", ")", ":", "# or idx_img == len(images) - 1:", "\n", "#TODO save h5 files", "\n", "# if idx_h5 > 45:", "\n", "#   return", "\n", "            ", "if", "idx_h5", "<", "10", ":", "\n", "                ", "filename_h5_data", "=", "'data/'", "+", "'%dv.npy'", "%", "(", "idx_h5", ")", "\n", "filename_h5_label", "=", "'label/labels/'", "+", "'%dv.npy'", "%", "(", "idx_h5", ")", "\n", "filename_h5_label_images", "=", "'label/images/'", "+", "'%dv.npy'", "%", "(", "idx_h5", ")", "\n", "", "else", ":", "\n", "                ", "filename_h5_data", "=", "'data/'", "+", "'%d.npy'", "%", "(", "idx_h5", ")", "\n", "filename_h5_label", "=", "'label/labels/'", "+", "'%d.npy'", "%", "(", "idx_h5", ")", "\n", "filename_h5_label_images", "=", "'label/images/'", "+", "'%d.npy'", "%", "(", "idx_h5", ")", "\n", "\n", "", "print", "(", "'Saving {}.npy...'", ".", "format", "(", "idx_h5", ")", ")", "\n", "# filelist_h5.write('./%d.h5\\n' % (idx_h5))", "\n", "np", ".", "save", "(", "filename_h5_data", ",", "np", ".", "array", "(", "img_batch", ")", ")", "\n", "np", ".", "save", "(", "filename_h5_label", ",", "np", ".", "array", "(", "labels_batch", ")", ")", "\n", "np", ".", "save", "(", "filename_h5_label_images", ",", "np", ".", "array", "(", "labels_images_batch", ")", ")", "\n", "# file = h5py.File(filename_h5, 'w')", "\n", "# file.create_dataset('data', data=np.concatenate(img_batch,axis=0))", "\n", "# file.create_dataset('label', data=np.concatenate(labels_batch,axis=0))", "\n", "# file.close()", "\n", "img_batch", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "len", "(", "train_file_dir_list", ")", ")", "]", "# TODO shuffle training data", "\n", "labels_batch", "=", "[", "]", "\n", "labels_images_batch", "=", "[", "]", "\n", "idx_h5", "=", "idx_h5", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anshuln_CogCNN.None.generate_dataset.process_path": [[103, 127], ["file_path.split", "paths.keys", "tf.io.read_file", "decode_img", "tf.expand_dims", "tf.io.read_file", "decode_img", "paths_to_read.append", "tf.io.read_file", "decode_img", "tf.concat", "tf.expand_dims"], "function", ["None"], ["", "", "", "def", "process_path", "(", "file_path", ")", ":", "\n", "    ", "paths", "=", "{", "'fruit_texture'", ":", "'t'", ",", "'fruit_shape'", ":", "'s'", ",", "'fruit_edge'", ":", "'e'", ",", "'fruit_greyscale'", ":", "'g'", "}", "\n", "paths_to_read", "=", "[", "]", "\n", "curr_path", "=", "file_path", ".", "split", "(", "'/'", ")", "\n", "for", "p", "in", "paths", ".", "keys", "(", ")", ":", "\n", "        ", "path", "=", "[", "x", "for", "x", "in", "curr_path", "]", "\n", "path", "[", "-", "1", "]", "=", "paths", "[", "p", "]", "+", "path", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "path", "[", "5", "]", "=", "p", "\n", "paths_to_read", ".", "append", "(", "'/'", ".", "join", "(", "path", ")", ")", "\n", "", "label_path", "=", "[", "x", "for", "x", "in", "curr_path", "]", "\n", "label_path", "[", "-", "1", "]", "=", "'m'", "+", "label_path", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "label_path", "[", "5", "]", "=", "'fruit_main'", "\n", "\n", "# load the raw data from the file as a string", "\n", "vect", "=", "tf", ".", "io", ".", "read_file", "(", "paths_to_read", "[", "0", "]", ")", "\n", "vect", "=", "decode_img", "(", "vect", ")", "\n", "vect", "=", "tf", ".", "expand_dims", "(", "vect", ",", "0", ")", "\n", "for", "path", "in", "paths_to_read", "[", "1", ":", "]", ":", "\n", "        ", "img", "=", "tf", ".", "io", ".", "read_file", "(", "path", ")", "\n", "img", "=", "decode_img", "(", "img", ")", "\n", "vect", "=", "tf", ".", "concat", "(", "[", "vect", ",", "tf", ".", "expand_dims", "(", "img", ",", "0", ")", "]", ",", "0", ")", "\n", "", "label", "=", "tf", ".", "io", ".", "read_file", "(", "label_path", ")", "\n", "label", "=", "decode_img", "(", "label_path", ")", "\n", "return", "vect", ",", "label", "\n", "", ""]]}