{"home.repos.pwc.inspect_result.dvornikita_SUR.None.test_extractor.main": [[24, 72], ["data.meta_dataset_reader.MetaDatasetEpisodeReader", "models.model_helpers.get_model", "models.model_utils.CheckPointer", "models.model_utils.CheckPointer.restore_model", "models.model_helpers.get_model.eval", "dict", "tensorflow.compat.v1.ConfigProto", "tabulate.tabulate", "print", "print", "tensorflow.compat.v1.Session", "rows.append", "print", "tqdm.tqdm", "acc.mean", "row.append", "range", "[].append", "numpy.array", "numpy.sqrt", "torch.no_grad", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task", "models.model_helpers.get_model.embed", "models.model_helpers.get_model.embed", "models.losses.prototype_loss", "acc.std", "len"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_model", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.restore_model", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.eval", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss"], ["def", "main", "(", ")", ":", "\n", "    ", "TEST_SIZE", "=", "600", "\n", "\n", "# Setting up datasets", "\n", "trainsets", ",", "valsets", ",", "testsets", "=", "args", "[", "'data.train'", "]", ",", "args", "[", "'data.val'", "]", ",", "args", "[", "'data.test'", "]", "\n", "test_loader", "=", "MetaDatasetEpisodeReader", "(", "'test'", ",", "trainsets", ",", "valsets", ",", "testsets", ")", "\n", "model", "=", "get_model", "(", "None", ",", "args", ")", "\n", "checkpointer", "=", "CheckPointer", "(", "args", ",", "model", ",", "optimizer", "=", "None", ")", "\n", "checkpointer", ".", "restore_model", "(", "ckpt", "=", "'best'", ",", "strict", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "accs_names", "=", "[", "'NCC'", "]", "\n", "var_accs", "=", "dict", "(", ")", "\n", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "as", "session", ":", "\n", "# go over each test domain", "\n", "        ", "for", "dataset", "in", "testsets", ":", "\n", "            ", "print", "(", "dataset", ")", "\n", "var_accs", "[", "dataset", "]", "=", "{", "name", ":", "[", "]", "for", "name", "in", "accs_names", "}", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "TEST_SIZE", ")", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "sample", "=", "test_loader", ".", "get_test_task", "(", "session", ",", "dataset", ")", "\n", "context_features", "=", "model", ".", "embed", "(", "sample", "[", "'context_images'", "]", ")", "\n", "target_features", "=", "model", ".", "embed", "(", "sample", "[", "'target_images'", "]", ")", "\n", "context_labels", "=", "sample", "[", "'context_labels'", "]", "\n", "target_labels", "=", "sample", "[", "'target_labels'", "]", "\n", "_", ",", "stats_dict", ",", "_", "=", "prototype_loss", "(", "\n", "context_features", ",", "context_labels", ",", "\n", "target_features", ",", "target_labels", ")", "\n", "", "var_accs", "[", "dataset", "]", "[", "'NCC'", "]", ".", "append", "(", "stats_dict", "[", "'acc'", "]", ")", "\n", "\n", "# Print nice results table", "\n", "", "", "", "rows", "=", "[", "]", "\n", "for", "dataset_name", "in", "testsets", ":", "\n", "        ", "row", "=", "[", "dataset_name", "]", "\n", "for", "model_name", "in", "accs_names", ":", "\n", "            ", "acc", "=", "np", ".", "array", "(", "var_accs", "[", "dataset_name", "]", "[", "model_name", "]", ")", "*", "100", "\n", "mean_acc", "=", "acc", ".", "mean", "(", ")", "\n", "conf", "=", "(", "1.96", "*", "acc", ".", "std", "(", ")", ")", "/", "np", ".", "sqrt", "(", "len", "(", "acc", ")", ")", "\n", "row", ".", "append", "(", "f\"{mean_acc:0.2f} +- {conf:0.2f}\"", ")", "\n", "", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "table", "=", "tabulate", "(", "rows", ",", "headers", "=", "[", "'model \\\\ data'", "]", "+", "accs_names", ",", "floatfmt", "=", "\".2f\"", ")", "\n", "print", "(", "table", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.train_pnf.train": [[21, 141], ["data.meta_dataset_reader.MetaDatasetBatchReader", "data.meta_dataset_reader.MetaDatasetEpisodeReader", "sum", "models.model_helpers.get_model", "models.model_helpers.get_optimizer", "models.model_utils.CheckPointer", "torch.utils.tensorboard.SummaryWriter", "tensorflow.compat.v1.ConfigProto", "torch.utils.tensorboard.SummaryWriter.close", "list", "os.path.isfile", "models.model_utils.CheckPointer.restore_model", "print", "models.model_utils.UniformStepLR", "tensorflow.compat.v1.Session", "tqdm.tqdm", "print", "print", "data.meta_dataset_reader.MetaDatasetBatchReader.dataset_to_n_cats.values", "models.model_helpers.get_model.get_parameters", "models.model_utils.ExpDecayLR", "range", "models.model_helpers.get_optimizer.zero_grad", "data.meta_dataset_reader.MetaDatasetBatchReader.get_train_batch", "[].detach().cpu().item", "models.model_helpers.get_model.forward", "models.losses.cross_entropy_loss", "epoch_loss[].append", "epoch_acc[].append", "batch_loss.backward", "models.model_helpers.get_optimizer.step", "models.model_utils.CosineAnnealRestartLR.step", "models.model_utils.CosineAnnealRestartLR", "torch.utils.tensorboard.SummaryWriter.add_scalar", "models.model_helpers.get_model.eval", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "models.model_utils.CheckPointer.save_checkpoint", "models.model_helpers.get_model.train", "print", "[].detach().cpu", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "tqdm.tqdm", "dataset_accs.append", "dataset_losses.append", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "numpy.mean", "numpy.mean", "print", "numpy.mean", "numpy.mean", "range", "val_losses.append", "val_accs.append", "numpy.mean", "models.model_helpers.get_model.get_state_dict", "[].detach", "torch.no_grad", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task", "models.model_helpers.get_model.embed", "models.model_helpers.get_model.embed", "models.losses.prototype_loss", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_model", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_optimizer", "home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.close", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.restore_model", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_parameters", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader.get_train_batch", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.AdaptiveCosineNCC.forward", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.cross_entropy_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.eval", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.save_checkpoint", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.train", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_state_dict", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["def", "train", "(", ")", ":", "\n", "# initialize datasets and loaders", "\n", "    ", "trainsets", ",", "valsets", ",", "testsets", "=", "args", "[", "'data.train'", "]", ",", "args", "[", "'data.val'", "]", ",", "args", "[", "'data.test'", "]", "\n", "train_loader", "=", "MetaDatasetBatchReader", "(", "'train'", ",", "trainsets", ",", "valsets", ",", "testsets", ",", "\n", "batch_size", "=", "args", "[", "'train.batch_size'", "]", ")", "\n", "val_loader", "=", "MetaDatasetEpisodeReader", "(", "'val'", ",", "trainsets", ",", "valsets", ",", "testsets", ")", "\n", "\n", "# initialize model and optimizer", "\n", "num_train_classes", "=", "sum", "(", "list", "(", "train_loader", ".", "dataset_to_n_cats", ".", "values", "(", ")", ")", ")", "\n", "model", "=", "get_model", "(", "num_train_classes", ",", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ",", "params", "=", "model", ".", "get_parameters", "(", ")", ")", "\n", "\n", "# Restoring the last checkpoint", "\n", "checkpointer", "=", "CheckPointer", "(", "args", ",", "model", ",", "optimizer", "=", "optimizer", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpointer", ".", "last_ckpt", ")", "and", "args", "[", "'train.resume'", "]", ":", "\n", "        ", "start_iter", ",", "best_val_loss", ",", "best_val_acc", "=", "checkpointer", ".", "restore_model", "(", "ckpt", "=", "'last'", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No checkpoint restoration'", ")", "\n", "best_val_loss", "=", "999999999", "\n", "best_val_acc", "=", "start_iter", "=", "0", "\n", "\n", "# define learning rate policy", "\n", "", "if", "args", "[", "'train.lr_policy'", "]", "==", "\"step\"", ":", "\n", "        ", "lr_manager", "=", "UniformStepLR", "(", "optimizer", ",", "args", ",", "start_iter", ")", "\n", "", "elif", "\"exp_decay\"", "in", "args", "[", "'train.lr_policy'", "]", ":", "\n", "        ", "lr_manager", "=", "ExpDecayLR", "(", "optimizer", ",", "args", ",", "start_iter", ")", "\n", "", "elif", "\"cosine\"", "in", "args", "[", "'train.lr_policy'", "]", ":", "\n", "        ", "lr_manager", "=", "CosineAnnealRestartLR", "(", "optimizer", ",", "args", ",", "start_iter", ")", "\n", "\n", "# defining the summary writer", "\n", "", "writer", "=", "SummaryWriter", "(", "checkpointer", ".", "model_path", ")", "\n", "\n", "# Training loop", "\n", "max_iter", "=", "args", "[", "'train.max_iter'", "]", "\n", "epoch_loss", "=", "{", "name", ":", "[", "]", "for", "name", "in", "trainsets", "}", "\n", "epoch_acc", "=", "{", "name", ":", "[", "]", "for", "name", "in", "trainsets", "}", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "as", "session", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "max_iter", ")", ")", ":", "\n", "            ", "if", "i", "<", "start_iter", ":", "\n", "                ", "continue", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "sample", "=", "train_loader", ".", "get_train_batch", "(", "session", ")", "\n", "batch_dataset", "=", "sample", "[", "'dataset_name'", "]", "\n", "dataset_id", "=", "sample", "[", "'dataset_ids'", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "logits", "=", "model", ".", "forward", "(", "sample", "[", "'images'", "]", ")", "\n", "labels", "=", "sample", "[", "'labels'", "]", "\n", "batch_loss", ",", "stats_dict", ",", "_", "=", "cross_entropy_loss", "(", "logits", ",", "labels", ")", "\n", "epoch_loss", "[", "batch_dataset", "]", ".", "append", "(", "stats_dict", "[", "'loss'", "]", ")", "\n", "epoch_acc", "[", "batch_dataset", "]", ".", "append", "(", "stats_dict", "[", "'acc'", "]", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_manager", ".", "step", "(", "i", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "200", "==", "0", ":", "\n", "                ", "for", "dataset_name", "in", "trainsets", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "f\"loss/{dataset_name}-train_acc\"", ",", "\n", "np", ".", "mean", "(", "epoch_loss", "[", "dataset_name", "]", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "f\"accuracy/{dataset_name}-train_acc\"", ",", "\n", "np", ".", "mean", "(", "epoch_acc", "[", "dataset_name", "]", ")", ",", "i", ")", "\n", "epoch_loss", "[", "dataset_name", "]", ",", "epoch_acc", "[", "dataset_name", "]", "=", "[", "]", ",", "[", "]", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "i", ")", "\n", "\n", "# Evaluation inside the training loop", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", "[", "'train.eval_freq'", "]", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "dataset_accs", ",", "dataset_losses", "=", "[", "]", ",", "[", "]", "\n", "for", "valset", "in", "valsets", ":", "\n", "                    ", "dataset_id", "=", "train_loader", ".", "dataset_name_to_dataset_id", "[", "valset", "]", "\n", "val_losses", ",", "val_accs", "=", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "args", "[", "'train.eval_size'", "]", ")", ")", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "sample", "=", "val_loader", ".", "get_validation_task", "(", "session", ",", "valset", ")", "\n", "context_features", "=", "model", ".", "embed", "(", "sample", "[", "'context_images'", "]", ")", "\n", "target_features", "=", "model", ".", "embed", "(", "sample", "[", "'target_images'", "]", ")", "\n", "context_labels", "=", "sample", "[", "'context_labels'", "]", "\n", "target_labels", "=", "sample", "[", "'target_labels'", "]", "\n", "_", ",", "stats_dict", ",", "_", "=", "prototype_loss", "(", "context_features", ",", "context_labels", ",", "\n", "target_features", ",", "target_labels", ")", "\n", "", "val_losses", ".", "append", "(", "stats_dict", "[", "'loss'", "]", ")", "\n", "val_accs", ".", "append", "(", "stats_dict", "[", "'acc'", "]", ")", "\n", "\n", "# write summaries per validation set", "\n", "", "dataset_acc", ",", "dataset_loss", "=", "np", ".", "mean", "(", "val_accs", ")", "*", "100", ",", "np", ".", "mean", "(", "val_losses", ")", "\n", "dataset_accs", ".", "append", "(", "dataset_acc", ")", "\n", "dataset_losses", ".", "append", "(", "dataset_loss", ")", "\n", "writer", ".", "add_scalar", "(", "f\"loss/{valset}/val_loss\"", ",", "dataset_loss", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "f\"accuracy/{valset}/val_acc\"", ",", "dataset_acc", ",", "i", ")", "\n", "print", "(", "f\"{valset}: val_acc {dataset_acc:.2f}%, val_loss {dataset_loss:.3f}\"", ")", "\n", "\n", "# write summaries averaged over datasets", "\n", "", "avg_val_loss", ",", "avg_val_acc", "=", "np", ".", "mean", "(", "dataset_losses", ")", ",", "np", ".", "mean", "(", "dataset_accs", ")", "\n", "writer", ".", "add_scalar", "(", "f\"loss/avg_val_loss\"", ",", "avg_val_loss", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "f\"accuracy/avg_val_acc\"", ",", "avg_val_acc", ",", "i", ")", "\n", "\n", "# saving checkpoints", "\n", "if", "avg_val_acc", ">", "best_val_acc", ":", "\n", "                    ", "best_val_loss", ",", "best_val_acc", "=", "avg_val_loss", ",", "avg_val_acc", "\n", "is_best", "=", "True", "\n", "print", "(", "'Best model so far!'", ")", "\n", "", "else", ":", "\n", "                    ", "is_best", "=", "False", "\n", "", "checkpointer", ".", "save_checkpoint", "(", "i", ",", "best_val_acc", ",", "best_val_loss", ",", "\n", "is_best", ",", "optimizer", "=", "optimizer", ",", "\n", "state_dict", "=", "model", ".", "get_state_dict", "(", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "print", "(", "f\"Trained and evaluated at {i}\"", ")", "\n", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "if", "start_iter", "<", "max_iter", ":", "\n", "        ", "print", "(", "f\"\"\"Done training with best_mean_val_loss: {best_val_loss:.3f}, best_avg_val_acc: {best_val_acc:.2f}%\"\"\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"\"\"No training happened. Loaded checkpoint at {start_iter}, while max_iter was {max_iter}\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.test.main": [[22, 79], ["tensorflow.compat.v1.ConfigProto", "data.meta_dataset_reader.MetaDatasetEpisodeReader", "models.model_helpers.get_domain_extractors", "dict", "tabulate.tabulate", "print", "print", "print", "rows.append", "tensorflow.compat.v1.Session", "tqdm.tqdm", "acc.mean", "row.append", "range", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task", "models.model_helpers.get_domain_extractors.", "models.model_helpers.get_domain_extractors.", "sample[].to", "sample[].to", "models.sur.sur", "models.sur.apply_selection", "models.sur.apply_selection", "[].append", "numpy.array", "numpy.sqrt", "acc.std", "len", "models.losses.prototype_loss"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_domain_extractors", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task", "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.sur", "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.apply_selection", "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.apply_selection", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss"], ["def", "main", "(", ")", ":", "\n", "    ", "LIMITER", "=", "600", "# has to be 600 for the testing under MetaDataset protocol", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "# Setting up datasets", "\n", "extractor_domains", "=", "TRAIN_METADATASET_NAMES", "\n", "all_test_datasets", "=", "ALL_METADATASET_NAMES", "\n", "loader", "=", "MetaDatasetEpisodeReader", "(", "'test'", ",", "\n", "train_set", "=", "extractor_domains", ",", "\n", "validation_set", "=", "extractor_domains", ",", "\n", "test_set", "=", "all_test_datasets", ")", "\n", "\n", "# define the embedding method", "\n", "dataset_models", "=", "DATASET_MODELS_DICT", "[", "args", "[", "'model.backbone'", "]", "]", "\n", "embed_many", "=", "get_domain_extractors", "(", "extractor_domains", ",", "dataset_models", ",", "args", ")", "\n", "\n", "accs_names", "=", "[", "'SUR'", "]", "\n", "\n", "all_accs", "=", "dict", "(", ")", "\n", "# Go over all test datasets", "\n", "for", "test_dataset", "in", "all_test_datasets", ":", "\n", "        ", "print", "(", "test_dataset", ")", "\n", "all_accs", "[", "test_dataset", "]", "=", "{", "name", ":", "[", "]", "for", "name", "in", "accs_names", "}", "\n", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "as", "session", ":", "\n", "            ", "for", "idx", "in", "tqdm", "(", "range", "(", "LIMITER", ")", ")", ":", "\n", "# extract image features and labels", "\n", "                ", "sample", "=", "loader", ".", "get_test_task", "(", "session", ",", "test_dataset", ")", "\n", "context_features_dict", "=", "embed_many", "(", "sample", "[", "'context_images'", "]", ")", "\n", "target_features_dict", "=", "embed_many", "(", "sample", "[", "'target_images'", "]", ")", "\n", "context_labels", "=", "sample", "[", "'context_labels'", "]", ".", "to", "(", "device", ")", "\n", "target_labels", "=", "sample", "[", "'target_labels'", "]", ".", "to", "(", "device", ")", "\n", "\n", "# optimize selection parameters and perform feature selection", "\n", "selection_params", "=", "sur", "(", "context_features_dict", ",", "context_labels", ",", "max_iter", "=", "40", ")", "\n", "selected_context", "=", "apply_selection", "(", "context_features_dict", ",", "selection_params", ")", "\n", "selected_target", "=", "apply_selection", "(", "target_features_dict", ",", "selection_params", ")", "\n", "\n", "final_acc", "=", "prototype_loss", "(", "selected_context", ",", "context_labels", ",", "\n", "selected_target", ",", "target_labels", ")", "[", "1", "]", "[", "'acc'", "]", "\n", "all_accs", "[", "test_dataset", "]", "[", "'SUR'", "]", ".", "append", "(", "final_acc", ")", "\n", "\n", "# Make a nice accuracy table", "\n", "", "", "", "rows", "=", "[", "]", "\n", "for", "dataset_name", "in", "all_test_datasets", ":", "\n", "        ", "row", "=", "[", "dataset_name", "]", "\n", "for", "model_name", "in", "accs_names", ":", "\n", "            ", "acc", "=", "np", ".", "array", "(", "all_accs", "[", "dataset_name", "]", "[", "model_name", "]", ")", "*", "100", "\n", "mean_acc", "=", "acc", ".", "mean", "(", ")", "\n", "conf", "=", "(", "1.96", "*", "acc", ".", "std", "(", ")", ")", "/", "np", ".", "sqrt", "(", "len", "(", "acc", ")", ")", "\n", "row", ".", "append", "(", "f\"{mean_acc:0.2f} +- {conf:0.2f}\"", ")", "\n", "", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "table", "=", "tabulate", "(", "rows", ",", "headers", "=", "[", "'model \\\\ data'", "]", "+", "accs_names", ",", "floatfmt", "=", "\".2f\"", ")", "\n", "print", "(", "table", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.test_offline.main": [[20, 72], ["data.lmdb_dataset.LMDBDataset", "models.model_helpers.get_domain_extractors", "dict", "tabulate.tabulate", "print", "print", "print", "data.lmdb_dataset.LMDBDataset.set_sampling_dataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "rows.append", "sample[].to", "sample[].to", "models.sur.sur", "models.sur.apply_selection", "models.sur.apply_selection", "[].append", "acc.mean", "row.append", "v.to", "v.to", "numpy.array", "numpy.sqrt", "sample[].items", "sample[].items", "models.losses.prototype_loss", "acc.std", "len"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_domain_extractors", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.set_sampling_dataset", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.sur", "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.apply_selection", "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.apply_selection", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss"], ["def", "main", "(", ")", ":", "\n", "    ", "LIMITER", "=", "600", "\n", "\n", "# Setting up datasets", "\n", "extractor_domains", "=", "TRAIN_METADATASET_NAMES", "\n", "all_test_datasets", "=", "ALL_METADATASET_NAMES", "\n", "dump_name", "=", "args", "[", "'dump.name'", "]", "if", "args", "[", "'dump.name'", "]", "else", "'test_dump'", "\n", "testset", "=", "LMDBDataset", "(", "extractor_domains", ",", "all_test_datasets", ",", "\n", "args", "[", "'model.backbone'", "]", ",", "'test'", ",", "dump_name", ",", "LIMITER", ")", "\n", "\n", "# define the embedding method", "\n", "dataset_models", "=", "DATASET_MODELS_DICT", "[", "args", "[", "'model.backbone'", "]", "]", "\n", "embed_many", "=", "get_domain_extractors", "(", "extractor_domains", ",", "dataset_models", ",", "args", ")", "\n", "\n", "accs_names", "=", "[", "'SUR'", "]", "\n", "all_accs", "=", "dict", "(", ")", "\n", "# Go over all test datasets", "\n", "for", "test_dataset", "in", "all_test_datasets", ":", "\n", "        ", "print", "(", "test_dataset", ")", "\n", "testset", ".", "set_sampling_dataset", "(", "test_dataset", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "None", ",", "batch_sampler", "=", "None", ",", "num_workers", "=", "16", ")", "\n", "all_accs", "[", "test_dataset", "]", "=", "{", "name", ":", "[", "]", "for", "name", "in", "accs_names", "}", "\n", "\n", "for", "sample", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "            ", "context_labels", "=", "sample", "[", "'context_labels'", "]", ".", "to", "(", "device", ")", "\n", "target_labels", "=", "sample", "[", "'target_labels'", "]", ".", "to", "(", "device", ")", "\n", "context_features_dict", "=", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "sample", "[", "'context_feature_dict'", "]", ".", "items", "(", ")", "}", "\n", "target_features_dict", "=", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "sample", "[", "'target_feature_dict'", "]", ".", "items", "(", ")", "}", "\n", "\n", "# optimize selection parameters and perform feature selection", "\n", "selection_params", "=", "sur", "(", "context_features_dict", ",", "context_labels", ",", "max_iter", "=", "40", ")", "\n", "selected_context", "=", "apply_selection", "(", "context_features_dict", ",", "selection_params", ")", "\n", "selected_target", "=", "apply_selection", "(", "target_features_dict", ",", "selection_params", ")", "\n", "\n", "final_acc", "=", "prototype_loss", "(", "selected_context", ",", "context_labels", ",", "\n", "selected_target", ",", "target_labels", ")", "[", "1", "]", "[", "'acc'", "]", "\n", "all_accs", "[", "test_dataset", "]", "[", "'SUR'", "]", ".", "append", "(", "final_acc", ")", "\n", "\n", "# Make a nice accuracy table", "\n", "", "", "rows", "=", "[", "]", "\n", "for", "dataset_name", "in", "all_test_datasets", ":", "\n", "        ", "row", "=", "[", "dataset_name", "]", "\n", "for", "model_name", "in", "accs_names", ":", "\n", "            ", "acc", "=", "np", ".", "array", "(", "all_accs", "[", "dataset_name", "]", "[", "model_name", "]", ")", "*", "100", "\n", "mean_acc", "=", "acc", ".", "mean", "(", ")", "\n", "conf", "=", "(", "1.96", "*", "acc", ".", "std", "(", ")", ")", "/", "np", ".", "sqrt", "(", "len", "(", "acc", ")", ")", "\n", "row", ".", "append", "(", "f\"{mean_acc:0.2f} +- {conf:0.2f}\"", ")", "\n", "", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "table", "=", "tabulate", "(", "rows", ",", "headers", "=", "[", "'model \\\\ data'", "]", "+", "accs_names", ",", "floatfmt", "=", "\".2f\"", ")", "\n", "print", "(", "table", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.ConfusionMatrix.__init__": [[11, 14], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "mat", "=", "np", ".", "zeros", "(", "[", "n_classes", ",", "n_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.ConfusionMatrix.update_mat": [[15, 20], ["numpy.array"], "methods", ["None"], ["", "def", "update_mat", "(", "self", ",", "preds", ",", "labels", ",", "idxs", ")", ":", "\n", "        ", "idxs", "=", "np", ".", "array", "(", "idxs", ")", "\n", "real_pred", "=", "idxs", "[", "preds", "]", "\n", "real_labels", "=", "idxs", "[", "labels", "]", "\n", "self", ".", "mat", "[", "real_pred", ",", "real_labels", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.ConfusionMatrix.get_mat": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_mat", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.__init__": [[26, 29], ["numpy.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_size", "=", "2000", ")", ":", "\n", "        ", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "ac", "=", "np", ".", "empty", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append": [[30, 32], ["numpy.append"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append"], ["", "def", "append", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "ac", "=", "np", ".", "append", "(", "self", ".", "ac", "[", "-", "self", ".", "max_size", ":", "]", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.reset": [[33, 35], ["numpy.empty"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "ac", "=", "np", ".", "empty", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean": [[36, 39], ["utils.Accumulator.ac[].mean"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["", "def", "mean", "(", "self", ",", "last", "=", "None", ")", ":", "\n", "        ", "last", "=", "last", "if", "last", "else", "self", ".", "max_size", "\n", "return", "self", ".", "ac", "[", "-", "last", ":", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.IterBeat.__init__": [[42, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "freq", ",", "length", "=", "None", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "self", ".", "freq", "=", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.IterBeat.step": [[46, 57], ["time.time.time", "time.time.time", "print"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "self", ".", "t", "=", "time", "(", ")", "\n", "self", ".", "lastcall", "=", "0", "\n", "", "else", ":", "\n", "            ", "if", "(", "(", "i", "%", "self", ".", "freq", ")", "==", "0", ")", "or", "(", "(", "i", "+", "1", ")", "==", "self", ".", "length", ")", ":", "\n", "                ", "t", "=", "time", "(", ")", "\n", "print", "(", "'{0} / {1} ---- {2:.2f} it/sec'", ".", "format", "(", "\n", "i", ",", "self", ".", "length", ",", "(", "i", "-", "self", ".", "lastcall", ")", "/", "(", "t", "-", "self", ".", "t", ")", ")", ")", "\n", "self", ".", "lastcall", "=", "i", "\n", "self", ".", "t", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.__init__": [[60, 64], ["array.tobytes"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "array", ")", ":", "\n", "        ", "self", ".", "shape", "=", "array", ".", "shape", "\n", "self", ".", "data", "=", "array", ".", "tobytes", "(", ")", "\n", "self", ".", "dtype", "=", "array", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get": [[65, 68], ["numpy.frombuffer", "numpy.reshape"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "array", "=", "np", ".", "frombuffer", "(", "self", ".", "data", ",", "self", ".", "dtype", ")", "\n", "return", "np", ".", "reshape", "(", "array", ",", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.print_res": [[70, 80], ["print", "numpy.array", "numpy.mean", "numpy.std", "numpy.sqrt", "len", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["", "", "def", "print_res", "(", "array", ",", "name", ",", "file", "=", "None", ",", "prec", "=", "4", ",", "mult", "=", "1", ")", ":", "\n", "    ", "array", "=", "np", ".", "array", "(", "array", ")", "*", "mult", "\n", "mean", ",", "std", "=", "np", ".", "mean", "(", "array", ")", ",", "np", ".", "std", "(", "array", ")", "\n", "conf", "=", "1.96", "*", "std", "/", "np", ".", "sqrt", "(", "len", "(", "array", ")", ")", "\n", "stat_string", "=", "(", "\"test {:s}: {:0.%df} +/- {:0.%df}\"", "\n", "%", "(", "prec", ",", "prec", ")", ")", ".", "format", "(", "name", ",", "mean", ",", "conf", ")", "\n", "print", "(", "stat_string", ")", "\n", "if", "file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "stat_string", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.process_copies": [[82, 88], ["embeddings.view().mean", "embeddings.view"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["", "", "", "def", "process_copies", "(", "embeddings", ",", "labels", ",", "args", ")", ":", "\n", "    ", "n_copy", "=", "args", "[", "'test.n_copy'", "]", "\n", "test_embeddings", "=", "embeddings", ".", "view", "(", "\n", "args", "[", "'data.test_query'", "]", "*", "args", "[", "'data.test_way'", "]", ",", "\n", "n_copy", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "test_embeddings", ",", "labels", "[", "0", ":", ":", "n_copy", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.set_determ": [[90, 96], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_determ", "(", "seed", "=", "1234", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.merge_dicts": [[98, 116], ["dicts[].keys", "isinstance", "torch.stack", "isinstance", "new_dict[].append", "utils.merge_dicts.stack_fn"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append"], ["", "def", "merge_dicts", "(", "dicts", ",", "torch_stack", "=", "True", ")", ":", "\n", "    ", "def", "stack_fn", "(", "l", ")", ":", "\n", "        ", "if", "isinstance", "(", "l", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "l", ")", "\n", "", "elif", "isinstance", "(", "l", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "return", "l", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "l", ")", "\n", "\n", "", "", "keys", "=", "dicts", "[", "0", "]", ".", "keys", "(", ")", "\n", "new_dict", "=", "{", "key", ":", "[", "]", "for", "key", "in", "keys", "}", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "for", "d", "in", "dicts", ":", "\n", "            ", "new_dict", "[", "key", "]", ".", "append", "(", "d", "[", "key", "]", ")", "\n", "", "", "if", "torch_stack", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "stack_fn", "(", "new_dict", "[", "key", "]", ")", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.voting": [[118, 130], ["len", "len", "range", "numpy.unique", "final_preds.append", "final_preds.append", "range", "max", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append"], ["", "def", "voting", "(", "preds", ",", "pref_ind", "=", "0", ")", ":", "\n", "    ", "n_models", "=", "len", "(", "preds", ")", "\n", "n_test", "=", "len", "(", "preds", "[", "0", "]", ")", "\n", "final_preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_test", ")", ":", "\n", "        ", "cur_preds", "=", "[", "preds", "[", "k", "]", "[", "i", "]", "for", "k", "in", "range", "(", "n_models", ")", "]", "\n", "classes", ",", "counts", "=", "np", ".", "unique", "(", "cur_preds", ",", "return_counts", "=", "True", ")", "\n", "if", "(", "counts", "==", "max", "(", "counts", ")", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "final_preds", ".", "append", "(", "preds", "[", "pref_ind", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "final_preds", ".", "append", "(", "classes", "[", "np", ".", "argmax", "(", "counts", ")", "]", ")", "\n", "", "", "return", "final_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.agreement": [[132, 140], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "agreement", "(", "preds", ")", ":", "\n", "    ", "n_preds", "=", "preds", ".", "shape", "[", "0", "]", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "n_preds", ",", "n_preds", ")", ")", "\n", "for", "i", "in", "range", "(", "n_preds", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "n_preds", ")", ":", "\n", "            ", "mat", "[", "i", ",", "j", "]", "=", "mat", "[", "j", ",", "i", "]", "=", "(", "\n", "preds", "[", "i", "]", "==", "preds", "[", "j", "]", ")", ".", "astype", "(", "'float'", ")", ".", "mean", "(", ")", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.read_textfile": [[142, 148], ["open", "f.read().split", "f.read"], "function", ["None"], ["", "def", "read_textfile", "(", "filename", ",", "skip_last_line", "=", "True", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "container", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "if", "skip_last_line", ":", "\n", "            ", "container", "=", "container", "[", ":", "-", "1", "]", "\n", "", "", "return", "container", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.check_dir": [[150, 162], ["os.makedirs", "print", "print"], "function", ["None"], ["", "def", "check_dir", "(", "dirname", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"This function creates a directory\n    in case it doesn't exist\"\"\"", "\n", "try", ":", "\n", "# Create target Directory", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Directory \"", ",", "dirname", ",", "\" was created\"", ")", "\n", "", "", "except", "FileExistsError", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Directory \"", ",", "dirname", ",", "\" already exists\"", ")", "\n", "", "", "return", "dirname", "\n", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.None.train_net.train": [[23, 141], ["data.meta_dataset_reader.MetaDatasetBatchReader", "data.meta_dataset_reader.MetaDatasetEpisodeReader", "data.meta_dataset_reader.MetaDatasetBatchReader.num_classes", "models.model_helpers.get_model", "models.model_helpers.get_optimizer", "models.model_utils.CheckPointer", "torch.utils.tensorboard.SummaryWriter", "tensorflow.compat.v1.ConfigProto", "torch.utils.tensorboard.SummaryWriter.close", "os.path.isfile", "models.model_utils.CheckPointer.restore_model", "print", "models.model_utils.UniformStepLR", "tensorflow.compat.v1.Session", "tqdm.tqdm", "print", "print", "models.model_helpers.get_model.get_parameters", "models.model_utils.ExpDecayLR", "range", "models.model_helpers.get_optimizer.zero_grad", "data.meta_dataset_reader.MetaDatasetBatchReader.get_train_batch", "models.model_helpers.get_model.forward", "models.losses.cross_entropy_loss", "epoch_loss[].append", "epoch_acc[].append", "batch_loss.backward", "models.model_helpers.get_optimizer.step", "models.model_utils.CosineAnnealRestartLR.step", "models.model_utils.CosineAnnealRestartLR", "torch.utils.tensorboard.SummaryWriter.add_scalar", "models.model_helpers.get_model.eval", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "models.model_utils.CheckPointer.save_checkpoint", "models.model_helpers.get_model.train", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "tqdm.tqdm", "dataset_accs.append", "dataset_losses.append", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "numpy.mean", "numpy.mean", "print", "numpy.mean", "numpy.mean", "range", "val_losses.append", "val_accs.append", "numpy.mean", "models.model_helpers.get_model.get_state_dict", "torch.no_grad", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task", "models.model_helpers.get_model.embed", "models.model_helpers.get_model.embed", "models.losses.prototype_loss", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader.num_classes", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_model", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_optimizer", "home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.close", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.restore_model", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_parameters", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader.get_train_batch", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.AdaptiveCosineNCC.forward", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.cross_entropy_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.eval", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.save_checkpoint", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.train", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_state_dict", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["def", "train", "(", ")", ":", "\n", "# initialize datasets and loaders", "\n", "    ", "trainsets", ",", "valsets", ",", "testsets", "=", "args", "[", "'data.train'", "]", ",", "args", "[", "'data.val'", "]", ",", "args", "[", "'data.test'", "]", "\n", "train_loader", "=", "MetaDatasetBatchReader", "(", "'train'", ",", "trainsets", ",", "valsets", ",", "testsets", ",", "\n", "batch_size", "=", "args", "[", "'train.batch_size'", "]", ")", "\n", "val_loader", "=", "MetaDatasetEpisodeReader", "(", "'val'", ",", "trainsets", ",", "valsets", ",", "testsets", ")", "\n", "\n", "# initialize model and optimizer", "\n", "num_train_classes", "=", "train_loader", ".", "num_classes", "(", "'train'", ")", "\n", "model", "=", "get_model", "(", "num_train_classes", ",", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ",", "params", "=", "model", ".", "get_parameters", "(", ")", ")", "\n", "\n", "# restoring the last checkpoint", "\n", "checkpointer", "=", "CheckPointer", "(", "args", ",", "model", ",", "optimizer", "=", "optimizer", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpointer", ".", "last_ckpt", ")", "and", "args", "[", "'train.resume'", "]", ":", "\n", "        ", "start_iter", ",", "best_val_loss", ",", "best_val_acc", "=", "checkpointer", ".", "restore_model", "(", "ckpt", "=", "'last'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No checkpoint restoration'", ")", "\n", "best_val_loss", "=", "999999999", "\n", "best_val_acc", "=", "start_iter", "=", "0", "\n", "\n", "# define learning rate policy", "\n", "", "if", "args", "[", "'train.lr_policy'", "]", "==", "\"step\"", ":", "\n", "        ", "lr_manager", "=", "UniformStepLR", "(", "optimizer", ",", "args", ",", "start_iter", ")", "\n", "", "elif", "\"exp_decay\"", "in", "args", "[", "'train.lr_policy'", "]", ":", "\n", "        ", "lr_manager", "=", "ExpDecayLR", "(", "optimizer", ",", "args", ",", "start_iter", ")", "\n", "", "elif", "\"cosine\"", "in", "args", "[", "'train.lr_policy'", "]", ":", "\n", "        ", "lr_manager", "=", "CosineAnnealRestartLR", "(", "optimizer", ",", "args", ",", "start_iter", ")", "\n", "\n", "# defining the summary writer", "\n", "", "writer", "=", "SummaryWriter", "(", "checkpointer", ".", "model_path", ")", "\n", "\n", "# Training loop", "\n", "max_iter", "=", "args", "[", "'train.max_iter'", "]", "\n", "epoch_loss", "=", "{", "name", ":", "[", "]", "for", "name", "in", "trainsets", "}", "\n", "epoch_acc", "=", "{", "name", ":", "[", "]", "for", "name", "in", "trainsets", "}", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "as", "session", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "max_iter", ")", ")", ":", "\n", "            ", "if", "i", "<", "start_iter", ":", "\n", "                ", "continue", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "sample", "=", "train_loader", ".", "get_train_batch", "(", "session", ")", "\n", "logits", "=", "model", ".", "forward", "(", "sample", "[", "'images'", "]", ")", "\n", "batch_loss", ",", "stats_dict", ",", "_", "=", "cross_entropy_loss", "(", "logits", ",", "sample", "[", "'labels'", "]", ")", "\n", "batch_dataset", "=", "sample", "[", "'dataset_name'", "]", "\n", "epoch_loss", "[", "batch_dataset", "]", ".", "append", "(", "stats_dict", "[", "'loss'", "]", ")", "\n", "epoch_acc", "[", "batch_dataset", "]", ".", "append", "(", "stats_dict", "[", "'acc'", "]", ")", "\n", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "lr_manager", ".", "step", "(", "i", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "200", "==", "0", ":", "\n", "                ", "for", "dataset_name", "in", "trainsets", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "f\"loss/{dataset_name}-train_acc\"", ",", "\n", "np", ".", "mean", "(", "epoch_loss", "[", "dataset_name", "]", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "f\"accuracy/{dataset_name}-train_acc\"", ",", "\n", "np", ".", "mean", "(", "epoch_acc", "[", "dataset_name", "]", ")", ",", "i", ")", "\n", "epoch_loss", "[", "dataset_name", "]", ",", "epoch_acc", "[", "dataset_name", "]", "=", "[", "]", ",", "[", "]", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "i", ")", "\n", "\n", "# Evaluation inside the training loop", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", "[", "'train.eval_freq'", "]", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "dataset_accs", ",", "dataset_losses", "=", "[", "]", ",", "[", "]", "\n", "for", "valset", "in", "valsets", ":", "\n", "                    ", "val_losses", ",", "val_accs", "=", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "args", "[", "'train.eval_size'", "]", ")", ")", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "sample", "=", "val_loader", ".", "get_validation_task", "(", "session", ",", "valset", ")", "\n", "context_features", "=", "model", ".", "embed", "(", "sample", "[", "'context_images'", "]", ")", "\n", "target_features", "=", "model", ".", "embed", "(", "sample", "[", "'target_images'", "]", ")", "\n", "context_labels", "=", "sample", "[", "'context_labels'", "]", "\n", "target_labels", "=", "sample", "[", "'target_labels'", "]", "\n", "_", ",", "stats_dict", ",", "_", "=", "prototype_loss", "(", "context_features", ",", "context_labels", ",", "\n", "target_features", ",", "target_labels", ")", "\n", "", "val_losses", ".", "append", "(", "stats_dict", "[", "'loss'", "]", ")", "\n", "val_accs", ".", "append", "(", "stats_dict", "[", "'acc'", "]", ")", "\n", "\n", "# write summaries per validation set", "\n", "", "dataset_acc", ",", "dataset_loss", "=", "np", ".", "mean", "(", "val_accs", ")", "*", "100", ",", "np", ".", "mean", "(", "val_losses", ")", "\n", "dataset_accs", ".", "append", "(", "dataset_acc", ")", "\n", "dataset_losses", ".", "append", "(", "dataset_loss", ")", "\n", "writer", ".", "add_scalar", "(", "f\"loss/{valset}/val_loss\"", ",", "dataset_loss", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "f\"accuracy/{valset}/val_acc\"", ",", "dataset_acc", ",", "i", ")", "\n", "print", "(", "f\"{valset}: val_acc {dataset_acc:.2f}%, val_loss {dataset_loss:.3f}\"", ")", "\n", "\n", "# write summaries averaged over datasets", "\n", "", "avg_val_loss", ",", "avg_val_acc", "=", "np", ".", "mean", "(", "dataset_losses", ")", ",", "np", ".", "mean", "(", "dataset_accs", ")", "\n", "writer", ".", "add_scalar", "(", "f\"loss/avg_val_loss\"", ",", "avg_val_loss", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "f\"accuracy/avg_val_acc\"", ",", "avg_val_acc", ",", "i", ")", "\n", "\n", "# saving checkpoints", "\n", "if", "avg_val_acc", ">", "best_val_acc", ":", "\n", "                    ", "best_val_loss", ",", "best_val_acc", "=", "avg_val_loss", ",", "avg_val_acc", "\n", "is_best", "=", "True", "\n", "print", "(", "'Best model so far!'", ")", "\n", "", "else", ":", "\n", "                    ", "is_best", "=", "False", "\n", "", "checkpointer", ".", "save_checkpoint", "(", "i", ",", "best_val_acc", ",", "best_val_loss", ",", "\n", "is_best", ",", "optimizer", "=", "optimizer", ",", "\n", "state_dict", "=", "model", ".", "get_state_dict", "(", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "print", "(", "f\"Trained and evaluated at {i}\"", ")", "\n", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "if", "start_iter", "<", "max_iter", ":", "\n", "        ", "print", "(", "f\"\"\"Done training with best_mean_val_loss: {best_val_loss:.3f}, best_avg_val_acc: {best_val_acc:.2f}%\"\"\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"\"\"No training happened. Loaded checkpoint at {start_iter}, while max_iter was {max_iter}\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineClassifier.__init__": [[24, 31], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.FloatTensor().normal_", "torch.nn.Parameter", "torch.tensor", "numpy.sqrt", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_feat", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "CosineClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "10.0", ")", ",", "requires_grad", "=", "True", ")", "\n", "weight", "=", "torch", ".", "FloatTensor", "(", "n_feat", ",", "num_classes", ")", ".", "normal_", "(", "\n", "0.0", ",", "np", ".", "sqrt", "(", "2.0", "/", "num_classes", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineClassifier.forward": [[32, 38], ["torch.nn.functional.normalize", "torch.nn.functional.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "weight", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "weight", ",", "p", "=", "2", ",", "dim", "=", "0", ",", "eps", "=", "1e-12", ")", "\n", "cos_dist", "=", "x_norm", "@", "weight", "\n", "scores", "=", "self", ".", "scale", "*", "cos_dist", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineClassifier.extra_repr": [[39, 43], ["model_utils.CosineClassifier.scale.item"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "'CosineClassifier: input_channels={}, num_classes={}; learned_scale: {}'", ".", "format", "(", "\n", "self", ".", "weight", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "1", "]", ",", "self", ".", "scale", ".", "item", "(", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineConv.__init__": [[46, 52], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.FloatTensor().normal_", "torch.nn.Parameter", "torch.tensor", "numpy.sqrt", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_feat", ",", "num_classes", ",", "kernel_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "CosineConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "10.0", ")", ",", "requires_grad", "=", "True", ")", "\n", "weight", "=", "torch", ".", "FloatTensor", "(", "num_classes", ",", "n_feat", ",", "1", ",", "1", ")", ".", "normal_", "(", "\n", "0.0", ",", "np", ".", "sqrt", "(", "2.0", "/", "num_classes", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineConv.forward": [[53, 62], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_normalized", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "\n", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "eps", "=", "1e-12", ")", "\n", "weight", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "\n", "self", ".", "weight", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "cos_dist", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "x_normalized", ",", "weight", ")", "\n", "scores", "=", "self", ".", "scale", "*", "cos_dist", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineConv.extra_repr": [[63, 67], ["model_utils.CosineConv.scale.item"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "'CosineConv: num_inputs={}, num_classes={}, kernel_size=1; scale_value: {}'", ".", "format", "(", "\n", "self", ".", "weight", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "1", "]", ",", "self", ".", "scale", ".", "item", "(", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.__init__": [[70, 77], ["os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", "=", "None", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "PROJECT_ROOT", ",", "'weights'", ",", "args", "[", "'model.name'", "]", ")", "\n", "self", ".", "last_ckpt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "'checkpoint.pth.tar'", ")", "\n", "self", ".", "best_ckpt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.restore_model": [[78, 97], ["os.path.join", "os.path.join", "os.path.isfile", "os.path.exists", "print", "torch.load", "torch.load.get", "torch.load.get", "torch.load.get", "model_utils.CheckPointer.model.load_state_dict", "model_utils.CheckPointer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get"], ["", "def", "restore_model", "(", "self", ",", "ckpt", "=", "'last'", ",", "model", "=", "True", ",", "\n", "optimizer", "=", "True", ",", "strict", "=", "True", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_path", ")", ":", "\n", "            ", "assert", "False", ",", "\"Model is not found at {}\"", ".", "format", "(", "self", ".", "model_path", ")", "\n", "", "self", ".", "last_ckpt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "'checkpoint.pth.tar'", ")", "\n", "self", ".", "best_ckpt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "'model_best.pth.tar'", ")", "\n", "ckpt_path", "=", "self", ".", "last_ckpt", "if", "ckpt", "==", "'last'", "else", "self", ".", "best_ckpt", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_path", ")", ":", "\n", "            ", "print", "(", "\"=> loading {} checkpoint '{}'\"", ".", "format", "(", "ckpt", ",", "ckpt_path", ")", ")", "\n", "ch", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "device", ")", "\n", "if", "self", ".", "model", "is", "not", "None", "and", "model", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "ch", "[", "'state_dict'", "]", ",", "strict", "=", "strict", ")", "\n", "", "if", "self", ".", "optimizer", "is", "not", "None", "and", "optimizer", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "ch", "[", "'optimizer'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"No checkpoint! %s\"", "%", "ckpt_path", "\n", "\n", "", "return", "ch", ".", "get", "(", "'epoch'", ",", "None", ")", ",", "ch", ".", "get", "(", "'best_val_loss'", ",", "None", ")", ",", "ch", ".", "get", "(", "'best_val_acc'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.save_checkpoint": [[98, 118], ["utils.check_dir", "torch.save", "model_utils.CheckPointer.model.state_dict", "state.update", "optimizer.state_dict", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.check_dir"], ["", "def", "save_checkpoint", "(", "self", ",", "epoch", ",", "best_val_acc", ",", "best_val_loss", ",", "\n", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "\n", "optimizer", "=", "None", ",", "state_dict", "=", "None", ",", "extra", "=", "None", ")", ":", "\n", "        ", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "if", "state_dict", "is", "None", "else", "state_dict", "\n", "state", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'best_val_acc'", ":", "best_val_acc", ",", "\n", "'best_val_loss'", ":", "best_val_loss", "}", "\n", "\n", "if", "extra", "is", "not", "None", ":", "\n", "            ", "state", ".", "update", "(", "extra", ")", "\n", "", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "state", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "\n", "", "model_path", "=", "check_dir", "(", "self", ".", "model_path", ",", "True", ",", "False", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "model_path", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "filename", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_path", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.UniformStepLR.__init__": [[121, 128], ["model_utils.UniformStepLR.compute_milestones", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.UniformStepLR.compute_milestones"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "start_iter", ")", ":", "\n", "        ", "self", ".", "iter", "=", "start_iter", "\n", "self", ".", "max_iter", "=", "args", "[", "'train.max_iter'", "]", "\n", "step_iters", "=", "self", ".", "compute_milestones", "(", "args", ")", "\n", "self", ".", "lr_scheduler", "=", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "step_iters", ",", "last_epoch", "=", "start_iter", "-", "1", ",", "\n", "gamma", "=", "args", "[", "'train.step_decay_gamma'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.UniformStepLR.step": [[129, 134], ["model_utils.UniformStepLR.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step"], ["", "def", "step", "(", "self", ",", "_iter", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "stop_training", "=", "self", ".", "iter", ">=", "self", ".", "max_iter", "\n", "return", "stop_training", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.UniformStepLR.compute_milestones": [[135, 142], ["step_iters.append"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append"], ["", "def", "compute_milestones", "(", "self", ",", "args", ")", ":", "\n", "        ", "max_iter", "=", "args", "[", "'train.max_iter'", "]", "\n", "step_size", "=", "max_iter", "/", "args", "[", "'train.decay_step_freq'", "]", "\n", "step_iters", "=", "[", "0", "]", "\n", "while", "step_iters", "[", "-", "1", "]", "<", "max_iter", ":", "\n", "            ", "step_iters", ".", "append", "(", "step_iters", "[", "-", "1", "]", "+", "step_size", ")", "\n", "", "return", "self", ".", "step_iters", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.ExpDecayLR.__init__": [[145, 153], ["model_utils.ExpDecayLR.compute_gamma", "torch.optim.lr_scheduler.ExponentialLR", "max"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.ExpDecayLR.compute_gamma"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "start_iter", ")", ":", "\n", "        ", "self", ".", "iter", "=", "start_iter", "\n", "self", ".", "max_iter", "=", "args", "[", "'train.max_iter'", "]", "\n", "self", ".", "start_decay_iter", "=", "args", "[", "'train.exp_decay_start_iter'", "]", "\n", "gamma", "=", "self", ".", "compute_gamma", "(", "args", ")", "\n", "schedule_start", "=", "max", "(", "start_iter", "-", "self", ".", "start_decay_iter", ",", "0", ")", "-", "1", "\n", "self", ".", "lr_scheduler", "=", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "gamma", ",", "\n", "last_epoch", "=", "schedule_start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.ExpDecayLR.step": [[154, 160], ["model_utils.ExpDecayLR.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step"], ["", "def", "step", "(", "self", ",", "_iter", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "if", "_iter", ">", "self", ".", "start_decay_iter", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "", "stop_training", "=", "self", ".", "iter", ">=", "self", ".", "max_iter", "\n", "return", "stop_training", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.ExpDecayLR.compute_gamma": [[161, 165], ["numpy.power"], "methods", ["None"], ["", "def", "compute_gamma", "(", "self", ",", "args", ")", ":", "\n", "        ", "last_iter", ",", "start_iter", "=", "args", "[", "'train.max_iter'", "]", ",", "args", "[", "'train.exp_decay_start_iter'", "]", "\n", "start_lr", ",", "last_lr", "=", "args", "[", "'train.learning_rate'", "]", ",", "args", "[", "'train.exp_decay_final_lr'", "]", "\n", "return", "np", ".", "power", "(", "last_lr", "/", "start_lr", ",", "1", "/", "(", "last_iter", "-", "start_iter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.__init__": [[168, 173], ["torch.optim.lr_scheduler.CosineAnnealingWarmRestarts"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "args", ",", "start_iter", ")", ":", "\n", "        ", "self", ".", "iter", "=", "start_iter", "\n", "self", ".", "max_iter", "=", "args", "[", "'train.max_iter'", "]", "\n", "self", ".", "lr_scheduler", "=", "CosineAnnealingWarmRestarts", "(", "\n", "optimizer", ",", "args", "[", "'train.cosine_anneal_freq'", "]", ",", "last_epoch", "=", "start_iter", "-", "1", ")", "\n", "# self.lr_scheduler = CosineAnnealingLR(", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step": [[176, 181], ["model_utils.CosineAnnealRestartLR.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step"], ["", "def", "step", "(", "self", ",", "_iter", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "self", ".", "lr_scheduler", ".", "step", "(", "_iter", ")", "\n", "stop_training", "=", "self", ".", "iter", ">=", "self", ".", "max_iter", "\n", "return", "stop_training", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.cosine_sim": [[16, 20], ["prots.unsqueeze.unsqueeze", "embeds.unsqueeze.unsqueeze", "F.cosine_similarity"], "function", ["None"], ["def", "cosine_sim", "(", "embeds", ",", "prots", ")", ":", "\n", "    ", "prots", "=", "prots", ".", "unsqueeze", "(", "0", ")", "\n", "embeds", "=", "embeds", ".", "unsqueeze", "(", "1", ")", "\n", "return", "F", ".", "cosine_similarity", "(", "embeds", ",", "prots", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.CatFilm.__init__": [[21, 25], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__"], ["def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "CatFilm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "planes", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.CatFilm.forward": [[26, 30], ["resnet18_pnf.CatFilm.gamma.view", "resnet18_pnf.CatFilm.beta.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "gamma", "=", "self", ".", "gamma", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "beta", "=", "self", ".", "beta", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "gamma", "*", "x", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.BasicBlockFilm.__init__": [[35, 46], ["torch.Module.__init__", "resnet18_pnf.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet18_pnf.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet18_pnf.CatFilm", "resnet18_pnf.CatFilm"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv3x3", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlockFilm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "film1", "=", "CatFilm", "(", "planes", ")", "\n", "self", ".", "film2", "=", "CatFilm", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.BasicBlockFilm.forward": [[47, 66], ["resnet18_pnf.BasicBlockFilm.conv1", "resnet18_pnf.BasicBlockFilm.bn1", "resnet18_pnf.BasicBlockFilm.film1", "resnet18_pnf.BasicBlockFilm.relu", "resnet18_pnf.BasicBlockFilm.conv2", "resnet18_pnf.BasicBlockFilm.bn2", "resnet18_pnf.BasicBlockFilm.film2", "resnet18_pnf.BasicBlockFilm.relu", "resnet18_pnf.BasicBlockFilm.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "film1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "film2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.ResNet.__init__": [[69, 103], ["torch.Module.__init__", "resnet18_pnf.CatFilm", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet18_pnf.ResNet._make_layer", "resnet18_pnf.ResNet._make_layer", "resnet18_pnf.ResNet._make_layer", "resnet18_pnf.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "resnet18_pnf.ResNet.modules", "isinstance", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "models.model_utils.CosineClassifier", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "classifier", "=", "None", ",", "num_classes", "=", "None", ",", "\n", "dropout", "=", "0.0", ",", "global_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "initial_pool", "=", "False", "\n", "self", ".", "film_normalize", "=", "CatFilm", "(", "3", ")", "\n", "inplanes", "=", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "outplanes", "=", "512", "\n", "\n", "# handle classifier creation", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "classifier", "==", "'linear'", ":", "\n", "                ", "self", ".", "cls_fn", "=", "nn", ".", "Linear", "(", "self", ".", "outplanes", ",", "num_classes", ")", "\n", "", "elif", "classifier", "==", "'cosine'", ":", "\n", "                ", "self", ".", "cls_fn", "=", "CosineClassifier", "(", "self", ".", "outplanes", ",", "num_classes", ")", "\n", "\n", "# initialize everything", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.ResNet._make_layer": [[104, 118], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet18_pnf.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.ResNet.forward": [[119, 123], ["resnet18_pnf.ResNet.embed", "resnet18_pnf.ResNet.cls_fn"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "self", ".", "cls_fn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.ResNet.embed": [[124, 140], ["resnet18_pnf.ResNet.film_normalize", "resnet18_pnf.ResNet.conv1", "resnet18_pnf.ResNet.bn1", "resnet18_pnf.ResNet.relu", "resnet18_pnf.ResNet.layer1", "resnet18_pnf.ResNet.layer2", "resnet18_pnf.ResNet.layer3", "resnet18_pnf.ResNet.layer4", "resnet18_pnf.ResNet.avgpool", "resnet18_pnf.ResNet.squeeze", "resnet18_pnf.ResNet.maxpool"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "x", ",", "squeeze", "=", "True", ",", "param_dict", "=", "None", ")", ":", "\n", "        ", "\"\"\"Computing the features\"\"\"", "\n", "x", "=", "self", ".", "film_normalize", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "initial_pool", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.ResNet.get_state_dict": [[141, 145], ["resnet18_pnf.ResNet.state_dict().items", "resnet18_pnf.ResNet.state_dict"], "methods", ["None"], ["", "def", "get_state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Outputs the state elements that are domain-specific\"\"\"", "\n", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "state_dict", "(", ")", ".", "items", "(", ")", "\n", "if", "'film'", "in", "k", "or", "'cls'", "in", "k", "or", "'running'", "in", "k", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.ResNet.get_parameters": [[146, 150], ["resnet18_pnf.ResNet.named_parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Outputs only the parameters that are domain-specific\"\"\"", "\n", "return", "[", "v", "for", "k", ",", "v", "in", "self", ".", "named_parameters", "(", ")", "\n", "if", "'film'", "in", "k", "or", "'cls'", "in", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.conv3x3": [[8, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.conv1x1": [[14, 17], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18_pnf.resnet18": [[152, 166], ["resnet18_pnf.ResNet", "ResNet.load_state_dict", "print", "torch.load", "torch.load", "resnet18_pnf.ResNet.get_parameters", "ckpt_dict.items"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_parameters"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "pretrained_model_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n        Constructs a FiLM adapted ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlockFilm", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n", "# loading shared convolutional weights", "\n", "if", "pretrained_model_path", "is", "not", "None", ":", "\n", "        ", "device", "=", "model", ".", "get_parameters", "(", ")", "[", "0", "]", ".", "device", "\n", "ckpt_dict", "=", "torch", ".", "load", "(", "pretrained_model_path", ",", "map_location", "=", "device", ")", "[", "'state_dict'", "]", "\n", "shared_state", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "ckpt_dict", ".", "items", "(", ")", "if", "'cls'", "not", "in", "k", "}", "\n", "model", ".", "load_state_dict", "(", "shared_state", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Loaded shared weights from {}'", ".", "format", "(", "pretrained_model_path", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.apply_selection": [[9, 21], ["models.model_utils.sigmoid", "list", "torch.stack", "features_dict.values"], "function", ["None"], ["def", "apply_selection", "(", "features_dict", ",", "lambdas", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Performs masking of features via pointwise multiplying by lambda\n    \"\"\"", "\n", "lambdas_01", "=", "sigmoid", "(", "lambdas", ")", "\n", "features_list", "=", "list", "(", "features_dict", ".", "values", "(", ")", ")", "\n", "if", "normalize", ":", "\n", "        ", "features_list", "=", "[", "f", "/", "(", "f", "**", "2", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "for", "f", "in", "features_list", "]", "\n", "", "n_cont", "=", "features_list", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "concat_feat", "=", "torch", ".", "stack", "(", "features_list", ",", "-", "1", ")", "\n", "return", "(", "concat_feat", "*", "lambdas_01", ")", ".", "reshape", "(", "[", "n_cont", ",", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.sur": [[23, 41], ["torch.zeros().to", "torch.zeros().to.requires_grad_", "len", "torch.optim.Adadelta", "range", "numpy.unique", "torch.optim.Adadelta.zero_grad", "sur.apply_selection", "models.losses.prototype_loss", "loss.backward", "torch.optim.Adadelta.step", "torch.zeros", "context_labels.cpu().numpy", "len", "context_labels.cpu"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.sur.apply_selection", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CosineAnnealRestartLR.step"], ["", "def", "sur", "(", "context_features_dict", ",", "context_labels", ",", "max_iter", "=", "40", ")", ":", "\n", "    ", "\"\"\"\n    SUR method: optimizes selection parameters lambda\n    \"\"\"", "\n", "lambdas", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "len", "(", "context_features_dict", ")", "]", ")", ".", "to", "(", "device", ")", "\n", "lambdas", ".", "requires_grad_", "(", "True", ")", "\n", "n_classes", "=", "len", "(", "np", ".", "unique", "(", "context_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adadelta", "(", "[", "lambdas", "]", ",", "lr", "=", "(", "3e+3", "/", "n_classes", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "selected_features", "=", "apply_selection", "(", "context_features_dict", ",", "lambdas", ")", "\n", "loss", ",", "stat", ",", "_", "=", "prototype_loss", "(", "selected_features", ",", "context_labels", ",", "\n", "selected_features", ",", "context_labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "lambdas", "\n", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.BasicBlock.__init__": [[21, 30], ["torch.Module.__init__", "resnet18.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet18.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv3x3", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.BasicBlock.forward": [[31, 48], ["resnet18.BasicBlock.conv1", "resnet18.BasicBlock.bn1", "resnet18.BasicBlock.relu", "resnet18.BasicBlock.conv2", "resnet18.BasicBlock.bn2", "resnet18.BasicBlock.relu", "resnet18.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.__init__": [[52, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet18.ResNet._make_layer", "resnet18.ResNet._make_layer", "resnet18.ResNet._make_layer", "resnet18.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "resnet18.ResNet.modules", "isinstance", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "models.model_utils.CosineClassifier", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "classifier", "=", "None", ",", "num_classes", "=", "64", ",", "\n", "dropout", "=", "0.0", ",", "global_pool", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "initial_pool", "=", "False", "\n", "inplanes", "=", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "outplanes", "=", "512", "\n", "\n", "# handle classifier creation", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "classifier", "==", "'linear'", ":", "\n", "                ", "self", ".", "cls_fn", "=", "nn", ".", "Linear", "(", "self", ".", "outplanes", ",", "num_classes", ")", "\n", "", "elif", "classifier", "==", "'cosine'", ":", "\n", "                ", "self", ".", "cls_fn", "=", "CosineClassifier", "(", "self", ".", "outplanes", ",", "num_classes", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet._make_layer": [[84, 99], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet18.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.forward": [[100, 105], ["resnet18.ResNet.embed", "resnet18.ResNet.dropout", "resnet18.ResNet.cls_fn"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "cls_fn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed": [[106, 120], ["resnet18.ResNet.conv1", "resnet18.ResNet.bn1", "resnet18.ResNet.relu", "resnet18.ResNet.layer1", "resnet18.ResNet.layer2", "resnet18.ResNet.layer3", "resnet18.ResNet.layer4", "resnet18.ResNet.avgpool", "resnet18.ResNet.squeeze", "resnet18.ResNet.maxpool"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "x", ",", "param_dict", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "initial_pool", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_state_dict": [[121, 124], ["resnet18.ResNet.state_dict"], "methods", ["None"], ["", "def", "get_state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Outputs all the state elements\"\"\"", "\n", "return", "self", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_parameters": [[125, 128], ["resnet18.ResNet.named_parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Outputs all the parameters\"\"\"", "\n", "return", "[", "v", "for", "k", ",", "v", "in", "self", ".", "named_parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.conv1x1": [[13, 16], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.resnet18": [[130, 141], ["resnet18.ResNet", "torch.load", "torch.load", "ResNet.load_parameters", "print", "resnet18.ResNet.get_state_dict"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_state_dict"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "pretrained_model_path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n        Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "device", "=", "model", ".", "get_state_dict", "(", ")", "[", "0", "]", ".", "device", "\n", "ckpt_dict", "=", "torch", ".", "load", "(", "pretrained_model_path", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_parameters", "(", "ckpt_dict", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Loaded shared weights from {}'", ".", "format", "(", "pretrained_model_path", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.AdaptiveCosineNCC.__init__": [[46, 49], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AdaptiveCosineNCC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "10.0", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.AdaptiveCosineNCC.forward": [[50, 62], ["len", "compute_prototypes().unsqueeze", "query_embeddings.unsqueeze", "losses.cross_entropy_loss", "query_labels.unique", "torch.cosine_similarity", "torch.cosine_similarity", "losses.compute_prototypes"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.cross_entropy_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.compute_prototypes"], ["", "def", "forward", "(", "self", ",", "support_embeddings", ",", "support_labels", ",", "\n", "query_embeddings", ",", "query_labels", ",", "return_logits", "=", "False", ")", ":", "\n", "        ", "n_way", "=", "len", "(", "query_labels", ".", "unique", "(", ")", ")", "\n", "\n", "prots", "=", "compute_prototypes", "(", "support_embeddings", ",", "support_labels", ",", "n_way", ")", ".", "unsqueeze", "(", "0", ")", "\n", "embeds", "=", "query_embeddings", ".", "unsqueeze", "(", "1", ")", "\n", "logits", "=", "F", ".", "cosine_similarity", "(", "embeds", ",", "prots", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-30", ")", "*", "self", ".", "scale", "\n", "\n", "if", "return_logits", ":", "\n", "            ", "return", "logits", "\n", "\n", "", "return", "cross_entropy_loss", "(", "logits", ",", "query_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.cross_entropy_loss": [[9, 18], ["torch.log_softmax", "F.log_softmax.argmax", "targets.type", "torch.nll_loss", "torch.eq().float().mean", "torch.eq().float().mean", "F.nll_loss.item", "torch.eq().float().mean.item", "log_p_y.argmax.cpu().numpy", "targets.type.cpu().numpy", "torch.eq().float", "torch.eq().float", "log_p_y.argmax.cpu", "targets.type.cpu", "torch.eq", "torch.eq"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["def", "cross_entropy_loss", "(", "logits", ",", "targets", ")", ":", "\n", "    ", "log_p_y", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "preds", "=", "log_p_y", ".", "argmax", "(", "1", ")", "\n", "labels", "=", "targets", ".", "type", "(", "torch", ".", "long", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "log_p_y", ",", "labels", ",", "reduction", "=", "'mean'", ")", "\n", "acc", "=", "torch", ".", "eq", "(", "preds", ",", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "stats_dict", "=", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'acc'", ":", "acc", ".", "item", "(", ")", "}", "\n", "pred_dict", "=", "{", "'preds'", ":", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'labels'", ":", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "return", "loss", ",", "stats_dict", ",", "pred_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.prototype_loss": [[20, 35], ["len", "compute_prototypes().unsqueeze", "query_embeddings.unsqueeze", "losses.cross_entropy_loss", "query_labels.unique", "losses.compute_prototypes", "torch.pow().sum", "torch.pow().sum", "torch.cosine_similarity", "torch.einsum", "torch.einsum", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.cross_entropy_loss", "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.compute_prototypes"], ["", "def", "prototype_loss", "(", "support_embeddings", ",", "support_labels", ",", "\n", "query_embeddings", ",", "query_labels", ",", "distance", "=", "'cos'", ")", ":", "\n", "    ", "n_way", "=", "len", "(", "query_labels", ".", "unique", "(", ")", ")", "\n", "\n", "prots", "=", "compute_prototypes", "(", "support_embeddings", ",", "support_labels", ",", "n_way", ")", ".", "unsqueeze", "(", "0", ")", "\n", "embeds", "=", "query_embeddings", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "distance", "==", "'l2'", ":", "\n", "        ", "logits", "=", "-", "torch", ".", "pow", "(", "embeds", "-", "prots", ",", "2", ")", ".", "sum", "(", "-", "1", ")", "# shape [n_query, n_way]", "\n", "", "elif", "distance", "==", "'cos'", ":", "\n", "        ", "logits", "=", "F", ".", "cosine_similarity", "(", "embeds", ",", "prots", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-30", ")", "*", "10", "\n", "", "elif", "distance", "==", "'lin'", ":", "\n", "        ", "logits", "=", "torch", ".", "einsum", "(", "'izd,zjd->ij'", ",", "embeds", ",", "prots", ")", "\n", "\n", "", "return", "cross_entropy_loss", "(", "logits", ",", "query_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.losses.compute_prototypes": [[37, 43], ["torch.zeros().type().to", "torch.zeros().type().to", "range", "embeddings[].mean", "torch.zeros().type", "torch.zeros().type", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.mean"], ["", "def", "compute_prototypes", "(", "embeddings", ",", "labels", ",", "n_way", ")", ":", "\n", "    ", "prots", "=", "torch", ".", "zeros", "(", "n_way", ",", "embeddings", ".", "shape", "[", "-", "1", "]", ")", ".", "type", "(", "\n", "embeddings", ".", "dtype", ")", ".", "to", "(", "embeddings", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "n_way", ")", ":", "\n", "        ", "prots", "[", "i", "]", "=", "embeddings", "[", "(", "labels", "==", "i", ")", ".", "nonzero", "(", ")", ",", ":", "]", ".", "mean", "(", "0", ")", "\n", "", "return", "prots", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_model": [[12, 33], ["args.get", "functools.partial.", "model_fn.to", "os.path.join", "functools.partial", "functools.partial"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get"], ["def", "get_model", "(", "num_classes", ",", "args", ")", ":", "\n", "    ", "train_classifier", "=", "args", "[", "'model.classifier'", "]", "\n", "model_name", "=", "args", "[", "'model.backbone'", "]", "\n", "dropout_rate", "=", "args", ".", "get", "(", "'model.dropout'", ",", "0", ")", "\n", "\n", "if", "'pnf'", "in", "model_name", ":", "\n", "        ", "from", "models", ".", "resnet18_pnf", "import", "resnet18", "\n", "\n", "base_network_name", "=", "DATASET_MODELS_RESNET18", "[", "'ilsvrc_2012'", "]", "\n", "base_network_path", "=", "os", ".", "path", ".", "join", "(", "PROJECT_ROOT", ",", "'weights'", ",", "base_network_name", ",", "'model_best.pth.tar'", ")", "\n", "model_fn", "=", "partial", "(", "resnet18", ",", "dropout", "=", "dropout_rate", ",", "\n", "pretrained_model_path", "=", "base_network_path", ")", "\n", "", "else", ":", "\n", "        ", "from", "models", ".", "resnet18", "import", "resnet18", "\n", "model_fn", "=", "partial", "(", "resnet18", ",", "dropout", "=", "dropout_rate", ")", "\n", "\n", "", "model", "=", "model_fn", "(", "classifier", "=", "train_classifier", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "global_pool", "=", "False", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_optimizer": [[35, 52], ["model.parameters", "torch.optim.Adam", "torch.optim.SGD"], "function", ["None"], ["", "def", "get_optimizer", "(", "model", ",", "args", ",", "params", "=", "None", ")", ":", "\n", "    ", "learning_rate", "=", "args", "[", "'train.learning_rate'", "]", "\n", "weight_decay", "=", "args", "[", "'train.weight_decay'", "]", "\n", "optimizer", "=", "args", "[", "'train.optimizer'", "]", "\n", "params", "=", "model", ".", "parameters", "(", ")", "if", "params", "is", "None", "else", "params", "\n", "if", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "\n", "lr", "=", "learning_rate", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "optimizer", "==", "'momentum'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "\n", "lr", "=", "learning_rate", ",", "\n", "momentum", "=", "0.9", ",", "nesterov", "=", "args", "[", "'train.nesterov_momentum'", "]", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'No such optimizer'", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_domain_extractors": [[54, 59], ["model_helpers.get_pnf_extractor", "model_helpers.get_multinet_extractor"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_pnf_extractor", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_multinet_extractor"], ["", "def", "get_domain_extractors", "(", "trainset", ",", "dataset_models", ",", "args", ")", ":", "\n", "    ", "if", "'pnf'", "in", "args", "[", "'model.backbone'", "]", ":", "\n", "        ", "return", "get_pnf_extractor", "(", "trainset", ",", "dataset_models", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "return", "get_multinet_extractor", "(", "trainset", ",", "dataset_models", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_multinet_extractor": [[61, 83], ["dict", "model_helpers.get_model", "models.model_utils.CheckPointer", "get_model.eval", "models.model_utils.CheckPointer.restore_model", "torch.no_grad", "dict", "dict.items", "list", "get_model.embed", "dict.values"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_model", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.eval", "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_utils.CheckPointer.restore_model", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed"], ["", "", "def", "get_multinet_extractor", "(", "trainsets", ",", "dataset_models", ",", "args", ")", ":", "\n", "    ", "extractors", "=", "dict", "(", ")", "\n", "for", "dataset_name", "in", "trainsets", ":", "\n", "        ", "if", "dataset_name", "not", "in", "dataset_models", ":", "\n", "            ", "continue", "\n", "", "args", "[", "'model.name'", "]", "=", "dataset_models", "[", "dataset_name", "]", "\n", "extractor", "=", "get_model", "(", "None", ",", "args", ")", "\n", "checkpointer", "=", "CheckPointer", "(", "args", ",", "extractor", ",", "optimizer", "=", "None", ")", "\n", "extractor", ".", "eval", "(", ")", "\n", "checkpointer", ".", "restore_model", "(", "ckpt", "=", "'best'", ",", "strict", "=", "False", ")", "\n", "extractors", "[", "dataset_name", "]", "=", "extractor", "\n", "\n", "", "def", "embed_many", "(", "images", ",", "return_type", "=", "'dict'", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "all_features", "=", "dict", "(", ")", "\n", "for", "name", ",", "extractor", "in", "extractors", ".", "items", "(", ")", ":", "\n", "                ", "all_features", "[", "name", "]", "=", "extractor", ".", "embed", "(", "images", ")", "\n", "", "", "if", "return_type", "==", "'list'", ":", "\n", "            ", "return", "list", "(", "all_features", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "all_features", "\n", "", "", "return", "embed_many", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_pnf_extractor": [[85, 122], ["dict", "model_helpers.get_model", "get_model.eval", "os.path.join", "print", "v.clone", "torch.load", "get_model.get_state_dict().items", "base_layers.items", "torch.no_grad", "dict", "list", "state_dict.items", "base_layers.keys", "get_model.embed", "dict.values", "get_model.get_state_dict", "base_layers[].data.copy_"], "function", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_model", "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.eval", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.embed", "home.repos.pwc.inspect_result.dvornikita_SUR.models.resnet18.ResNet.get_state_dict"], ["", "def", "get_pnf_extractor", "(", "trainsets", ",", "dataset_models", ",", "args", ")", ":", "\n", "    ", "film_layers", "=", "dict", "(", ")", "\n", "for", "dataset_name", "in", "trainsets", ":", "\n", "        ", "if", "dataset_name", "not", "in", "dataset_models", "or", "'ilsvrc'", "in", "dataset_name", ":", "\n", "            ", "continue", "\n", "", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "PROJECT_ROOT", ",", "'weights'", ",", "dataset_models", "[", "dataset_name", "]", ",", "\n", "'model_best.pth.tar'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "device", ")", "[", "'state_dict'", "]", "\n", "film_layers", "[", "dataset_name", "]", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "\n", "if", "'cls'", "not", "in", "k", "}", "\n", "print", "(", "'Loaded FiLM layers from {}'", ".", "format", "(", "ckpt_path", ")", ")", "\n", "\n", "# define the base extractor", "\n", "", "base_extractor", "=", "get_model", "(", "None", ",", "args", ")", "\n", "base_extractor", ".", "eval", "(", ")", "\n", "base_layers", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "base_extractor", ".", "get_state_dict", "(", ")", ".", "items", "(", ")", "if", "'cls'", "not", "in", "k", "}", "\n", "\n", "# initialize film layers of base extractor to identity", "\n", "film_layers", "[", "'ilsvrc_2012'", "]", "=", "{", "k", ":", "v", ".", "clone", "(", ")", "for", "k", ",", "v", "in", "base_layers", ".", "items", "(", ")", "}", "\n", "\n", "def", "embed_many", "(", "images", ",", "return_type", "=", "'dict'", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "all_features", "=", "dict", "(", ")", "\n", "\n", "for", "domain_name", "in", "trainsets", ":", "\n", "# setting up domain-specific film layers", "\n", "                ", "domain_layers", "=", "film_layers", "[", "domain_name", "]", "\n", "for", "layer_name", "in", "base_layers", ".", "keys", "(", ")", ":", "\n", "                    ", "base_layers", "[", "layer_name", "]", ".", "data", ".", "copy_", "(", "domain_layers", "[", "layer_name", "]", ".", "data", ")", "\n", "\n", "# inference", "\n", "", "all_features", "[", "domain_name", "]", "=", "base_extractor", ".", "embed", "(", "images", ")", "\n", "", "", "if", "return_type", "==", "'list'", ":", "\n", "            ", "return", "list", "(", "all_features", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "all_features", "\n", "", "", "return", "embed_many", "\n", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader.__init__": [[30, 39], ["gin.parse_config_file"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "train_set", ",", "validation_set", ",", "test_set", ")", ":", "\n", "        ", "assert", "(", "train_set", "is", "not", "None", "or", "validation_set", "is", "not", "None", "or", "test_set", "is", "not", "None", ")", "\n", "\n", "self", ".", "data_path", "=", "META_RECORDS_ROOT", "\n", "self", ".", "train_dataset_next_task", "=", "None", "\n", "self", ".", "validation_set_dict", "=", "{", "}", "\n", "self", ".", "test_set_dict", "=", "{", "}", "\n", "self", ".", "specs_dict", "=", "{", "}", "\n", "gin", ".", "parse_config_file", "(", "f\"{PROJECT_ROOT}/data/meta_dataset_config.gin\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._get_dataset_spec": [[40, 53], ["isinstance", "os.path.join", "meta_dataset.data.dataset_spec.load_dataset_spec", "os.path.join", "meta_dataset.data.dataset_spec.load_dataset_spec", "dataset_specs.append"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append"], ["", "def", "_get_dataset_spec", "(", "self", ",", "items", ")", ":", "\n", "        ", "if", "isinstance", "(", "items", ",", "list", ")", ":", "\n", "            ", "dataset_specs", "=", "[", "]", "\n", "for", "dataset_name", "in", "items", ":", "\n", "                ", "dataset_records_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "dataset_name", ")", "\n", "dataset_spec", "=", "dataset_spec_lib", ".", "load_dataset_spec", "(", "dataset_records_path", ")", "\n", "dataset_specs", ".", "append", "(", "dataset_spec", ")", "\n", "", "return", "dataset_specs", "\n", "", "else", ":", "\n", "            ", "dataset_name", "=", "items", "\n", "dataset_records_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "dataset_name", ")", "\n", "dataset_spec", "=", "dataset_spec_lib", ".", "load_dataset_spec", "(", "dataset_records_path", ")", "\n", "return", "dataset_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._to_torch": [[54, 65], ["sample.items", "isinstance", "torch.from_numpy", "val.long.long.to", "val.long.long.permute", "val.long.long.long"], "methods", ["None"], ["", "", "def", "_to_torch", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "str", ")", ":", "\n", "                ", "continue", "\n", "", "val", "=", "torch", ".", "from_numpy", "(", "val", ")", "\n", "if", "'image'", "in", "key", ":", "\n", "                ", "val", "=", "val", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "val", "=", "val", ".", "long", "(", ")", "\n", "", "sample", "[", "key", "]", "=", "val", ".", "to", "(", "device", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader.num_classes": [[66, 77], ["isinstance", "len", "specs.get_classes"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ",", "split_name", ")", ":", "\n", "        ", "split", "=", "SPLIT_NAME_TO_SPLIT", "[", "split_name", "]", "\n", "all_split_specs", "=", "self", ".", "specs_dict", "[", "SPLIT_NAME_TO_SPLIT", "[", "'train'", "]", "]", "\n", "\n", "if", "not", "isinstance", "(", "all_split_specs", ",", "list", ")", ":", "\n", "            ", "all_split_specs", "=", "[", "all_split_specs", "]", "\n", "\n", "", "total_n_classes", "=", "0", "\n", "for", "specs", "in", "all_split_specs", ":", "\n", "            ", "total_n_classes", "+=", "len", "(", "specs", ".", "get_classes", "(", "split", ")", ")", "\n", "", "return", "total_n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader.build_class_to_identity": [[78, 100], ["dict", "dict", "dict", "enumerate", "isinstance", "len", "range", "specs.get_classes", "meta_dataset_reader.MetaDatasetReader.dataset_id_to_dataset_name.items"], "methods", ["None"], ["", "def", "build_class_to_identity", "(", "self", ")", ":", "\n", "        ", "split", "=", "SPLIT_NAME_TO_SPLIT", "[", "'train'", "]", "\n", "all_split_specs", "=", "self", ".", "specs_dict", "[", "SPLIT_NAME_TO_SPLIT", "[", "'train'", "]", "]", "\n", "\n", "if", "not", "isinstance", "(", "all_split_specs", ",", "list", ")", ":", "\n", "            ", "all_split_specs", "=", "[", "all_split_specs", "]", "\n", "\n", "", "self", ".", "cls_to_identity", "=", "dict", "(", ")", "\n", "self", ".", "dataset_id_to_dataset_name", "=", "dict", "(", ")", "\n", "self", ".", "dataset_to_n_cats", "=", "dict", "(", ")", "\n", "offset", "=", "0", "\n", "for", "dataset_id", ",", "specs", "in", "enumerate", "(", "all_split_specs", ")", ":", "\n", "            ", "dataset_name", "=", "specs", ".", "name", "\n", "self", ".", "dataset_id_to_dataset_name", "[", "dataset_id", "]", "=", "dataset_name", "\n", "n_cats", "=", "len", "(", "specs", ".", "get_classes", "(", "split", ")", ")", "\n", "self", ".", "dataset_to_n_cats", "[", "dataset_name", "]", "=", "n_cats", "\n", "for", "cat", "in", "range", "(", "n_cats", ")", ":", "\n", "                ", "self", ".", "cls_to_identity", "[", "offset", "+", "cat", "]", "=", "(", "cat", ",", "dataset_id", ")", "\n", "", "offset", "+=", "n_cats", "\n", "\n", "", "self", ".", "dataset_name_to_dataset_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "\n", "self", ".", "dataset_id_to_dataset_name", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.__init__": [[106, 127], ["meta_dataset_reader.MetaDatasetReader.__init__", "meta_dataset.data.config.EpisodeDescriptionConfig", "meta_dataset_reader.MetaDatasetEpisodeReader._init_multi_source_dataset", "meta_dataset.data.config.EpisodeDescriptionConfig", "meta_dataset.data.config.EpisodeDescriptionConfig", "meta_dataset_reader.MetaDatasetEpisodeReader._init_single_source_dataset", "meta_dataset_reader.MetaDatasetEpisodeReader._init_single_source_dataset"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_multi_source_dataset", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset"], ["def", "__init__", "(", "self", ",", "mode", ",", "train_set", "=", "None", ",", "validation_set", "=", "None", ",", "test_set", "=", "None", ")", ":", "\n", "        ", "super", "(", "MetaDatasetEpisodeReader", ",", "self", ")", ".", "__init__", "(", "mode", ",", "train_set", ",", "validation_set", ",", "test_set", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "train_episode_desscription", "=", "config", ".", "EpisodeDescriptionConfig", "(", "None", ",", "None", ",", "None", ")", "\n", "self", ".", "train_dataset_next_task", "=", "self", ".", "_init_multi_source_dataset", "(", "\n", "train_set", ",", "SPLIT_NAME_TO_SPLIT", "[", "'train'", "]", ",", "train_episode_desscription", ")", "\n", "\n", "", "if", "mode", "==", "'val'", ":", "\n", "            ", "test_episode_desscription", "=", "config", ".", "EpisodeDescriptionConfig", "(", "None", ",", "None", ",", "None", ")", "\n", "for", "item", "in", "validation_set", ":", "\n", "                ", "next_task", "=", "self", ".", "_init_single_source_dataset", "(", "\n", "item", ",", "SPLIT_NAME_TO_SPLIT", "[", "'val'", "]", ",", "test_episode_desscription", ")", "\n", "self", ".", "validation_set_dict", "[", "item", "]", "=", "next_task", "\n", "\n", "", "", "if", "mode", "==", "'test'", ":", "\n", "            ", "test_episode_desscription", "=", "config", ".", "EpisodeDescriptionConfig", "(", "None", ",", "None", ",", "None", ")", "\n", "for", "item", "in", "test_set", ":", "\n", "                ", "next_task", "=", "self", ".", "_init_single_source_dataset", "(", "\n", "item", ",", "SPLIT_NAME_TO_SPLIT", "[", "'test'", "]", ",", "test_episode_desscription", ")", "\n", "self", ".", "test_set_dict", "[", "item", "]", "=", "next_task", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader._init_multi_source_dataset": [[128, 151], ["meta_dataset_reader.MetaDatasetEpisodeReader._get_dataset_spec", "meta_dataset.data.pipeline.make_multisource_episode_pipeline", "meta_dataset.data.pipeline.make_multisource_episode_pipeline.make_one_shot_iterator", "pipeline.make_multisource_episode_pipeline.make_one_shot_iterator.get_next", "len", "len", "items.index", "items.index"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._get_dataset_spec"], ["", "", "", "def", "_init_multi_source_dataset", "(", "self", ",", "items", ",", "split", ",", "episode_description", ")", ":", "\n", "        ", "dataset_specs", "=", "self", ".", "_get_dataset_spec", "(", "items", ")", "\n", "self", ".", "specs_dict", "[", "split", "]", "=", "dataset_specs", "\n", "\n", "use_bilevel_ontology_list", "=", "[", "False", "]", "*", "len", "(", "items", ")", "\n", "use_dag_ontology_list", "=", "[", "False", "]", "*", "len", "(", "items", ")", "\n", "# Enable ontology aware sampling for Omniglot and ImageNet.", "\n", "if", "'omniglot'", "in", "items", ":", "\n", "            ", "use_bilevel_ontology_list", "[", "items", ".", "index", "(", "'omniglot'", ")", "]", "=", "True", "\n", "", "if", "'ilsvrc_2012'", "in", "items", ":", "\n", "            ", "use_dag_ontology_list", "[", "items", ".", "index", "(", "'ilsvrc_2012'", ")", "]", "=", "True", "\n", "\n", "", "multi_source_pipeline", "=", "pipeline", ".", "make_multisource_episode_pipeline", "(", "\n", "dataset_spec_list", "=", "dataset_specs", ",", "\n", "use_dag_ontology_list", "=", "use_dag_ontology_list", ",", "\n", "use_bilevel_ontology_list", "=", "use_bilevel_ontology_list", ",", "\n", "split", "=", "split", ",", "\n", "episode_descr_config", "=", "episode_description", ",", "\n", "image_size", "=", "84", ",", "\n", "shuffle_buffer_size", "=", "1000", ")", "\n", "\n", "iterator", "=", "multi_source_pipeline", ".", "make_one_shot_iterator", "(", ")", "\n", "return", "iterator", ".", "get_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader._init_single_source_dataset": [[152, 176], ["meta_dataset_reader.MetaDatasetEpisodeReader._get_dataset_spec", "meta_dataset.data.pipeline.make_one_source_episode_pipeline", "meta_dataset.data.pipeline.make_one_source_episode_pipeline.make_one_shot_iterator", "pipeline.make_one_source_episode_pipeline.make_one_shot_iterator.get_next"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._get_dataset_spec"], ["", "def", "_init_single_source_dataset", "(", "self", ",", "dataset_name", ",", "split", ",", "episode_description", ")", ":", "\n", "        ", "dataset_spec", "=", "self", ".", "_get_dataset_spec", "(", "dataset_name", ")", "\n", "self", ".", "specs_dict", "[", "split", "]", "=", "dataset_spec", "\n", "\n", "# Enable ontology aware sampling for Omniglot and ImageNet.", "\n", "use_bilevel_ontology", "=", "False", "\n", "if", "'omniglot'", "in", "dataset_name", ":", "\n", "            ", "use_bilevel_ontology", "=", "True", "\n", "\n", "", "use_dag_ontology", "=", "False", "\n", "if", "'ilsvrc_2012'", "in", "dataset_name", ":", "\n", "            ", "use_dag_ontology", "=", "True", "\n", "\n", "", "single_source_pipeline", "=", "pipeline", ".", "make_one_source_episode_pipeline", "(", "\n", "dataset_spec", "=", "dataset_spec", ",", "\n", "use_dag_ontology", "=", "use_dag_ontology", ",", "\n", "use_bilevel_ontology", "=", "use_bilevel_ontology", ",", "\n", "split", "=", "split", ",", "\n", "episode_descr_config", "=", "episode_description", ",", "\n", "image_size", "=", "84", ",", "\n", "shuffle_buffer_size", "=", "1000", ")", "\n", "\n", "iterator", "=", "single_source_pipeline", ".", "make_one_shot_iterator", "(", ")", "\n", "return", "iterator", ".", "get_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader._get_task": [[177, 186], ["meta_dataset_reader.MetaDatasetEpisodeReader._to_torch", "session.run"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._to_torch"], ["", "def", "_get_task", "(", "self", ",", "next_task", ",", "session", ")", ":", "\n", "        ", "episode", "=", "session", ".", "run", "(", "next_task", ")", "[", "0", "]", "\n", "task_dict", "=", "{", "\n", "'context_images'", ":", "episode", "[", "0", "]", ",", "\n", "'context_labels'", ":", "episode", "[", "1", "]", ",", "\n", "'target_images'", ":", "episode", "[", "3", "]", ",", "\n", "'target_labels'", ":", "episode", "[", "4", "]", "\n", "}", "\n", "return", "self", ".", "_to_torch", "(", "task_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_train_task": [[187, 189], ["meta_dataset_reader.MetaDatasetEpisodeReader._get_task"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader._get_task"], ["", "def", "get_train_task", "(", "self", ",", "session", ")", ":", "\n", "        ", "return", "self", ".", "_get_task", "(", "self", ".", "train_dataset_next_task", ",", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task": [[190, 193], ["meta_dataset_reader.MetaDatasetEpisodeReader._get_task", "list", "meta_dataset_reader.MetaDatasetEpisodeReader.validation_set_dict.keys"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader._get_task"], ["", "def", "get_validation_task", "(", "self", ",", "session", ",", "item", "=", "None", ")", ":", "\n", "        ", "item", "=", "item", "if", "item", "else", "list", "(", "self", ".", "validation_set_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "return", "self", ".", "_get_task", "(", "self", ".", "validation_set_dict", "[", "item", "]", ",", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task": [[194, 197], ["meta_dataset_reader.MetaDatasetEpisodeReader._get_task", "list", "meta_dataset_reader.MetaDatasetEpisodeReader.test_set_dict.keys"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader._get_task"], ["", "def", "get_test_task", "(", "self", ",", "session", ",", "item", "=", "None", ")", ":", "\n", "        ", "item", "=", "item", "if", "item", "else", "list", "(", "self", ".", "test_set_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "return", "self", ".", "_get_task", "(", "self", ".", "test_set_dict", "[", "item", "]", ",", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader.__init__": [[203, 224], ["meta_dataset_reader.MetaDatasetReader.__init__", "meta_dataset_reader.MetaDatasetBatchReader.build_class_to_identity", "meta_dataset_reader.MetaDatasetBatchReader._init_multi_source_dataset", "meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset", "meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader.build_class_to_identity", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_multi_source_dataset", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset"], ["def", "__init__", "(", "self", ",", "mode", ",", "train_set", ",", "validation_set", ",", "test_set", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "MetaDatasetBatchReader", ",", "self", ")", ".", "__init__", "(", "mode", ",", "train_set", ",", "validation_set", ",", "test_set", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "train_dataset_next_task", "=", "self", ".", "_init_multi_source_dataset", "(", "\n", "train_set", ",", "SPLIT_NAME_TO_SPLIT", "[", "'train'", "]", ")", "\n", "\n", "", "if", "mode", "==", "'val'", ":", "\n", "            ", "for", "item", "in", "validation_set", ":", "\n", "                ", "next_task", "=", "self", ".", "validation_dataset", "=", "self", ".", "_init_single_source_dataset", "(", "\n", "item", ",", "SPLIT_NAME_TO_SPLIT", "[", "'val'", "]", ")", "\n", "self", ".", "validation_set_dict", "[", "item", "]", "=", "next_task", "\n", "\n", "", "", "if", "mode", "==", "'test'", ":", "\n", "            ", "for", "item", "in", "test_set", ":", "\n", "                ", "next_task", "=", "self", ".", "_init_single_source_dataset", "(", "\n", "item", ",", "SPLIT_NAME_TO_SPLIT", "[", "'test'", "]", ")", "\n", "self", ".", "test_set_dict", "[", "item", "]", "=", "next_task", "\n", "\n", "", "", "self", ".", "build_class_to_identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_multi_source_dataset": [[225, 234], ["meta_dataset_reader.MetaDatasetBatchReader._get_dataset_spec", "meta_dataset.data.pipeline.make_multisource_batch_pipeline", "meta_dataset.data.pipeline.make_multisource_batch_pipeline.make_one_shot_iterator", "pipeline.make_multisource_batch_pipeline.make_one_shot_iterator.get_next"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._get_dataset_spec"], ["", "def", "_init_multi_source_dataset", "(", "self", ",", "items", ",", "split", ")", ":", "\n", "        ", "dataset_specs", "=", "self", ".", "_get_dataset_spec", "(", "items", ")", "\n", "self", ".", "specs_dict", "[", "split", "]", "=", "dataset_specs", "\n", "multi_source_pipeline", "=", "pipeline", ".", "make_multisource_batch_pipeline", "(", "\n", "dataset_spec_list", "=", "dataset_specs", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "split", "=", "split", ",", "image_size", "=", "84", ",", "add_dataset_offset", "=", "True", ",", "shuffle_buffer_size", "=", "1000", ")", "\n", "\n", "iterator", "=", "multi_source_pipeline", ".", "make_one_shot_iterator", "(", ")", "\n", "return", "iterator", ".", "get_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._init_single_source_dataset": [[235, 244], ["meta_dataset_reader.MetaDatasetBatchReader._get_dataset_spec", "meta_dataset.data.pipeline.make_one_source_batch_pipeline", "meta_dataset.data.pipeline.make_one_source_batch_pipeline.make_one_shot_iterator", "pipeline.make_one_source_batch_pipeline.make_one_shot_iterator.get_next"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._get_dataset_spec"], ["", "def", "_init_single_source_dataset", "(", "self", ",", "dataset_name", ",", "split", ")", ":", "\n", "        ", "dataset_specs", "=", "self", ".", "_get_dataset_spec", "(", "dataset_name", ")", "\n", "self", ".", "specs_dict", "[", "split", "]", "=", "dataset_specs", "\n", "multi_source_pipeline", "=", "pipeline", ".", "make_one_source_batch_pipeline", "(", "\n", "dataset_spec", "=", "dataset_specs", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "split", "=", "split", ",", "image_size", "=", "84", ")", "\n", "\n", "iterator", "=", "multi_source_pipeline", ".", "make_one_shot_iterator", "(", ")", "\n", "return", "iterator", ".", "get_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._get_batch": [[245, 261], ["meta_dataset_reader.MetaDatasetBatchReader._to_torch", "session.run", "local_classes.append", "dataset_ids.append", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetReader._to_torch", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.Accumulator.append"], ["", "def", "_get_batch", "(", "self", ",", "next_task", ",", "session", ")", ":", "\n", "        ", "episode", "=", "session", ".", "run", "(", "next_task", ")", "[", "0", "]", "\n", "images", ",", "labels", "=", "episode", "[", "0", "]", ",", "episode", "[", "1", "]", "\n", "local_classes", ",", "dataset_ids", "=", "[", "]", ",", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "local_class", ",", "dataset_id", "=", "self", ".", "cls_to_identity", "[", "label", "]", "\n", "local_classes", ".", "append", "(", "local_class", ")", "\n", "dataset_ids", ".", "append", "(", "dataset_id", ")", "\n", "", "task_dict", "=", "{", "\n", "'images'", ":", "images", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'local_classes'", ":", "np", ".", "array", "(", "local_classes", ")", ",", "\n", "'dataset_ids'", ":", "np", ".", "array", "(", "dataset_ids", ")", ",", "\n", "'dataset_name'", ":", "self", ".", "dataset_id_to_dataset_name", "[", "dataset_ids", "[", "-", "1", "]", "]", "\n", "}", "\n", "return", "self", ".", "_to_torch", "(", "task_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader.get_train_batch": [[262, 264], ["meta_dataset_reader.MetaDatasetBatchReader._get_batch"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._get_batch"], ["", "def", "get_train_batch", "(", "self", ",", "session", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "self", ".", "train_dataset_next_task", ",", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader.get_validation_batch": [[265, 267], ["meta_dataset_reader.MetaDatasetBatchReader._get_batch"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._get_batch"], ["", "def", "get_validation_batch", "(", "self", ",", "item", ",", "session", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "self", ".", "validation_set_dict", "[", "item", "]", ",", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader.get_test_batch": [[268, 270], ["meta_dataset_reader.MetaDatasetBatchReader._get_batch"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetBatchReader._get_batch"], ["", "def", "get_test_batch", "(", "self", ",", "item", ",", "session", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "self", ".", "test_set_dict", "[", "item", "]", ",", "session", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.__init__": [[17, 33], ["dict", "sum", "os.listdir", "min", "os.path.join", "lmdb_dataset.DatasetReader", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "extractor_domains", ",", "datasets", ",", "backbone", ",", "mode", ",", "dump_name", ",", "limit_len", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "datasets", "=", "datasets", "\n", "\n", "# opening lmdbs", "\n", "self", ".", "dataset_readers", "=", "dict", "(", ")", "\n", "for", "evalset", "in", "datasets", ":", "\n", "            ", "all_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "META_DATA_ROOT", ",", "'Dumps'", ",", "\n", "backbone", ",", "mode", ",", "evalset", ")", ")", "\n", "self", ".", "dataset_readers", "[", "evalset", "]", "=", "[", "\n", "DatasetReader", "(", "extractor_domains", ",", "evalset", ",", "backbone", ",", "mode", ",", "name", ")", "\n", "for", "name", "in", "all_names", "if", "dump_name", "in", "name", "]", "\n", "", "self", ".", "_current_sampling_dataset", "=", "datasets", "[", "0", "]", "\n", "self", ".", "full_len", "=", "sum", "(", "[", "len", "(", "ds", ")", "for", "ds", "in", "self", ".", "dataset_readers", "[", "self", ".", "_current_sampling_dataset", "]", "]", ")", "\n", "if", "limit_len", "is", "not", "None", ":", "\n", "            ", "self", ".", "full_len", "=", "min", "(", "self", ".", "full_len", ",", "limit_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.__len__": [[34, 36], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "full_len", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.__getitem__": [[37, 55], ["sample.items", "isinstance", "random.sample", "random.sample", "torch.from_numpy().long", "range", "sample[].items", "len", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "random_lmdb_subset", "=", "random", ".", "sample", "(", "self", ".", "dataset_readers", "[", "self", ".", "_current_sampling_dataset", "]", ",", "1", ")", "[", "0", "]", "\n", "idx", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "random_lmdb_subset", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "sample", "=", "random_lmdb_subset", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "dataset_readers", "[", "self", ".", "_current_sampling_dataset", "]", "[", "0", "]", "[", "idx", "]", "\n", "\n", "", "for", "key", ",", "val", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "str", ")", ":", "\n", "                ", "pass", "\n", "", "if", "'label'", "in", "key", ":", "\n", "                ", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "val", ")", ".", "long", "(", ")", "\n", "", "elif", "'feature_dict'", "in", "key", ":", "\n", "                ", "for", "fkey", ",", "fval", "in", "sample", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                    ", "sample", "[", "key", "]", "[", "fkey", "]", "=", "torch", ".", "from_numpy", "(", "fval", ")", "\n", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.set_sampling_dataset": [[56, 58], ["None"], "methods", ["None"], ["", "def", "set_sampling_dataset", "(", "self", ",", "sampling_dataset", ")", ":", "\n", "        ", "self", ".", "_current_sampling_dataset", "=", "sampling_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset._load_db": [[61, 87], ["lmdb.open", "lmdb_dataset.LMDBDataset._env.begin", "os.path.join", "os.path.isfile", "ValueError", "pickle.load", "print", "pickle.dump", "str().encode", "open", "lmdb_dataset.LMDBDataset._env.begin", "open", "key.decode", "str", "tqdm.tqdm.tqdm", "str", "txn.cursor"], "methods", ["None"], ["", "def", "_load_db", "(", "self", ",", "info", ",", "class_id", ")", ":", "\n", "        ", "path", "=", "self", ".", "_path", "\n", "\n", "self", ".", "_env", "=", "lmdb", ".", "open", "(", "\n", "self", ".", "_path", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "self", ".", "_txn", "=", "self", ".", "_env", ".", "begin", "(", "write", "=", "False", ")", "\n", "\n", "if", "class_id", "is", "None", ":", "\n", "            ", "cache_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'keys'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "                ", "self", ".", "keys", "=", "pkl", ".", "load", "(", "open", "(", "cache_file", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Loading dataset keys...'", ")", "\n", "with", "self", ".", "_env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "                    ", "self", ".", "keys", "=", "[", "key", ".", "decode", "(", "'ascii'", ")", "\n", "for", "key", ",", "_", "in", "tqdm", "(", "txn", ".", "cursor", "(", ")", ")", "]", "\n", "", "pkl", ".", "dump", "(", "self", ".", "keys", ",", "open", "(", "cache_file", ",", "'wb'", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "keys", "=", "[", "str", "(", "k", ")", ".", "encode", "(", ")", "for", "k", "in", "info", "[", "'labels2keys'", "]", "[", "str", "(", "class_id", ")", "]", "]", "\n", "\n", "", "if", "not", "self", ".", "keys", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty dataset.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.eval": [[88, 90], ["None"], "methods", ["None"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'eval'", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.train": [[91, 93], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.LMDBDataset.transform": [[94, 101], ["lmdb_dataset.LMDBDataset.train_transform", "lmdb_dataset.LMDBDataset.test_transform"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "out", "=", "self", ".", "train_transform", "(", "x", ")", "if", "self", ".", "train_transform", "else", "x", "\n", "return", "out", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "test_transform", "(", "x", ")", "if", "self", ".", "test_transform", "else", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.DatasetReader.__init__": [[108, 119], ["os.path.join", "lmdb_dataset.DatasetReader._load_db"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.DatasetReader._load_db"], ["def", "__init__", "(", "self", ",", "extractor_domains", ",", "evalset", ",", "backbone", ",", "mode", ",", "name", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_env", "=", "None", "\n", "self", ".", "_txn", "=", "None", "\n", "self", ".", "keys", "=", "None", "\n", "\n", "self", ".", "trainsets", "=", "extractor_domains", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "META_DATA_ROOT", ",", "'Dumps'", ",", "backbone", ",", "mode", ",", "evalset", ",", "name", ")", "\n", "self", ".", "_path", "=", "path", "\n", "\n", "self", ".", "_load_db", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.DatasetReader.__len__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "full_len", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.DatasetReader._load_db": [[123, 144], ["lmdb.open", "lmdb_dataset.DatasetReader._env.begin", "os.path.join", "os.path.isfile", "pickle.load", "print", "pickle.dump", "len", "open", "lmdb_dataset.DatasetReader._env.begin", "open", "key.decode", "tqdm.tqdm.tqdm", "txn.cursor"], "methods", ["None"], ["", "def", "_load_db", "(", "self", ")", ":", "\n", "        ", "path", "=", "self", ".", "_path", "\n", "\n", "self", ".", "_env", "=", "lmdb", ".", "open", "(", "\n", "self", ".", "_path", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "self", ".", "_txn", "=", "self", ".", "_env", ".", "begin", "(", "write", "=", "False", ")", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'keys'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "self", ".", "keys", "=", "pkl", ".", "load", "(", "open", "(", "cache_file", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading dataset keys...'", ")", "\n", "with", "self", ".", "_env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "                ", "self", ".", "keys", "=", "[", "key", ".", "decode", "(", "'ascii'", ")", "\n", "for", "key", ",", "_", "in", "tqdm", "(", "txn", ".", "cursor", "(", ")", ")", "]", "\n", "", "pkl", ".", "dump", "(", "self", ".", "keys", ",", "open", "(", "cache_file", ",", "'wb'", ")", ")", "\n", "", "self", ".", "full_len", "=", "len", "(", "self", ".", "keys", ")", "//", "18", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.lmdb_dataset.DatasetReader.__getitem__": [[145, 160], ["dict", "pickle.loads", "pickle.loads", "pickle.loads.get", "pickle.loads.get", "dict", "dict", "lmdb_dataset.DatasetReader._txn.get", "lmdb_dataset.DatasetReader._txn.get", "pickle.loads", "pickle.loads", "pickle.loads.get", "pickle.loads.get", "lmdb_dataset.DatasetReader._txn.get", "lmdb_dataset.DatasetReader._txn.get"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get", "home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.SerializableArray.get"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "dict", "(", ")", "\n", "support_labels", "=", "pkl", ".", "loads", "(", "self", ".", "_txn", ".", "get", "(", "f\"{idx}_labels_support\"", ".", "encode", "(", "\"ascii\"", ")", ")", ")", "\n", "query_labels", "=", "pkl", ".", "loads", "(", "self", ".", "_txn", ".", "get", "(", "f\"{idx}_labels_query\"", ".", "encode", "(", "\"ascii\"", ")", ")", ")", "\n", "sample", "[", "'context_labels'", "]", "=", "support_labels", ".", "get", "(", ")", "\n", "sample", "[", "'target_labels'", "]", "=", "query_labels", ".", "get", "(", ")", "\n", "\n", "sample", "[", "'context_feature_dict'", "]", "=", "dict", "(", ")", "\n", "sample", "[", "'target_feature_dict'", "]", "=", "dict", "(", ")", "\n", "for", "dataset", "in", "self", ".", "trainsets", ":", "\n", "            ", "support_batch", "=", "pkl", ".", "loads", "(", "self", ".", "_txn", ".", "get", "(", "f\"{idx}_{dataset}_support\"", ".", "encode", "(", "\"ascii\"", ")", ")", ")", "\n", "query_batch", "=", "pkl", ".", "loads", "(", "self", ".", "_txn", ".", "get", "(", "f\"{idx}_{dataset}_query\"", ".", "encode", "(", "\"ascii\"", ")", ")", ")", "\n", "sample", "[", "'context_feature_dict'", "]", "[", "dataset", "]", "=", "support_batch", ".", "get", "(", ")", "\n", "sample", "[", "'target_feature_dict'", "]", "[", "dataset", "]", "=", "query_batch", ".", "get", "(", ")", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_processing.DataAugmentation.__init__": [[9, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "enable_jitter", ",", "jitter_amount", ",", "enable_gaussian_noise", ",", "\n", "gaussian_noise_std", ",", "enable_random_flip", ",", "\n", "enable_random_brightness", ",", "random_brightness_delta", ",", "\n", "enable_random_contrast", ",", "random_contrast_delta", ",", "\n", "enable_random_hue", ",", "random_hue_delta", ",", "enable_random_saturation", ",", "\n", "random_saturation_delta", ")", ":", "\n", "    ", "\"\"\"Initialize a DataAugmentation.\n\n    Args:\n      enable_jitter: bool whether to use image jitter (pad each image using\n        reflection along x and y axes and then random crop).\n      jitter_amount: amount (in pixels) to pad on all sides of the image.\n      enable_gaussian_noise: bool whether to use additive Gaussian noise.\n      gaussian_noise_std: Standard deviation of the Gaussian distribution.\n    \"\"\"", "\n", "self", ".", "enable_jitter", "=", "enable_jitter", "\n", "self", ".", "jitter_amount", "=", "jitter_amount", "\n", "self", ".", "enable_gaussian_noise", "=", "enable_gaussian_noise", "\n", "self", ".", "gaussian_noise_std", "=", "gaussian_noise_std", "\n", "self", ".", "enable_random_flip", "=", "enable_random_flip", "\n", "self", ".", "enable_random_brightness", "=", "enable_random_brightness", "\n", "self", ".", "random_brightness_delta", "=", "random_brightness_delta", "\n", "self", ".", "enable_random_contrast", "=", "enable_random_contrast", "\n", "self", ".", "random_contrast_delta", "=", "random_contrast_delta", "\n", "self", ".", "enable_random_hue", "=", "enable_random_hue", "\n", "self", ".", "random_hue_delta", "=", "random_hue_delta", "\n", "self", ".", "enable_random_saturation", "=", "enable_random_saturation", "\n", "self", ".", "random_saturation_delta", "=", "random_saturation_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_processing.ImageDecoder.__init__": [[43, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image_size", "=", "None", ",", "data_augmentation", "=", "None", ")", ":", "\n", "    ", "\"\"\"Class constructor.\n\n    Args:\n      image_size: int, desired image size. The extracted image will be resized\n        to `[image_size, image_size]`.\n      data_augmentation: A DataAugmentation object with parameters for\n        perturbing the images.\n    \"\"\"", "\n", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "data_augmentation", "=", "data_augmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_processing.ImageDecoder.__call__": [[56, 119], ["tensorflow.image.decode_image", "tensorflow.image.decode_image.set_shape", "tensorflow.image.resize_images", "tensorflow.cast", "tensorflow.parse_single_example", "tensorflow.image.random_brightness", "tensorflow.image.random_saturation", "tensorflow.image.random_contrast", "tensorflow.image.random_hue", "tensorflow.image.random_flip_left_right", "tensorflow.constant", "tensorflow.pad", "tensorflow.image.random_crop", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.random_normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "example_string", ")", ":", "\n", "    ", "\"\"\"Processes a single example string.\n\n    Extracts and processes the image, and ignores the label. We assume that the\n    image has three channels.\n\n    Args:\n      example_string: str, an Example protocol buffer.\n\n    Returns:\n      image_rescaled: the image, resized to `image_size x image_size` and\n      rescaled to [-1, 1]. Note that Gaussian data augmentation may cause values\n      to go beyond this range.\n    \"\"\"", "\n", "image_string", "=", "tf", ".", "parse_single_example", "(", "\n", "example_string", ",", "\n", "features", "=", "{", "\n", "'image'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "}", ")", "[", "'image'", "]", "\n", "image_decoded", "=", "tf", ".", "image", ".", "decode_image", "(", "image_string", ",", "channels", "=", "3", ")", "\n", "image_decoded", ".", "set_shape", "(", "[", "None", ",", "None", ",", "3", "]", ")", "\n", "image_resized", "=", "tf", ".", "image", ".", "resize_images", "(", "\n", "image_decoded", ",", "[", "self", ".", "image_size", ",", "self", ".", "image_size", "]", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "True", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image_resized", ",", "tf", ".", "float32", ")", "\n", "\n", "if", "self", ".", "data_augmentation", "is", "not", "None", ":", "\n", "      ", "if", "self", ".", "data_augmentation", ".", "enable_random_brightness", ":", "\n", "        ", "delta", "=", "self", ".", "data_augmentation", ".", "random_brightness_delta", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "delta", ")", "\n", "\n", "", "if", "self", ".", "data_augmentation", ".", "enable_random_saturation", ":", "\n", "        ", "delta", "=", "self", ".", "data_augmentation", ".", "random_saturation_delta", "\n", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "1", "-", "delta", ",", "1", "+", "delta", ")", "\n", "\n", "", "if", "self", ".", "data_augmentation", ".", "enable_random_contrast", ":", "\n", "        ", "delta", "=", "self", ".", "data_augmentation", ".", "random_contrast_delta", "\n", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "1", "-", "delta", ",", "1", "+", "delta", ")", "\n", "\n", "", "if", "self", ".", "data_augmentation", ".", "enable_random_hue", ":", "\n", "        ", "delta", "=", "self", ".", "data_augmentation", ".", "random_hue_delta", "\n", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "delta", ")", "\n", "\n", "", "if", "self", ".", "data_augmentation", ".", "enable_random_flip", ":", "\n", "        ", "image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ")", "\n", "\n", "", "", "image", "=", "2", "*", "(", "image", "/", "255.0", "-", "0.5", ")", "# Rescale to [-1, 1].", "\n", "\n", "if", "self", ".", "data_augmentation", "is", "not", "None", ":", "\n", "      ", "if", "self", ".", "data_augmentation", ".", "enable_gaussian_noise", ":", "\n", "        ", "image", "=", "image", "+", "tf", ".", "random_normal", "(", "\n", "tf", ".", "shape", "(", "image", ")", ")", "*", "self", ".", "data_augmentation", ".", "gaussian_noise_std", "\n", "\n", "", "if", "self", ".", "data_augmentation", ".", "enable_jitter", ":", "\n", "        ", "j", "=", "self", ".", "data_augmentation", ".", "jitter_amount", "\n", "paddings", "=", "tf", ".", "constant", "(", "[", "[", "j", ",", "j", "]", ",", "[", "j", ",", "j", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "image", "=", "tf", ".", "pad", "(", "image", ",", "paddings", ",", "'REFLECT'", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_crop", "(", "image", ",", "\n", "[", "self", ".", "image_size", ",", "self", ".", "image_size", ",", "3", "]", ")", "\n", "\n", "", "", "return", "image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.__init__": [[25, 58], ["print", "data.meta_dataset_reader.MetaDatasetEpisodeReader", "utils.check_dir", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "os.path.exists", "NameError", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_train_task", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task", "data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.None.utils.check_dir", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_train_task", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_test_task", "home.repos.pwc.inspect_result.dvornikita_SUR.data.meta_dataset_reader.MetaDatasetEpisodeReader.get_validation_task"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "rewrite", "=", "True", ",", "write_frequency", "=", "10", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "args", "[", "'dump.mode'", "]", "\n", "self", ".", "_write_frequency", "=", "write_frequency", "\n", "self", ".", "_db", "=", "None", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dataset_models", "=", "DATASET_MODELS_DICT", "[", "args", "[", "'model.backbone'", "]", "]", "\n", "print", "(", "self", ".", "dataset_models", ")", "\n", "\n", "trainsets", ",", "valsets", ",", "testsets", "=", "args", "[", "'data.train'", "]", ",", "args", "[", "'data.val'", "]", ",", "args", "[", "'data.test'", "]", "\n", "loader", "=", "MetaDatasetEpisodeReader", "(", "self", ".", "_mode", ",", "trainsets", ",", "valsets", ",", "testsets", ")", "\n", "self", ".", "_map_size", "=", "50000", "*", "100", "**", "2", "*", "512", "*", "8", "\n", "self", ".", "trainsets", "=", "trainsets", "\n", "\n", "if", "self", ".", "_mode", "==", "'train'", ":", "\n", "            ", "evalset", "=", "\"allcat\"", "\n", "self", ".", "load_sample", "=", "lambda", "sess", ":", "loader", ".", "get_train_task", "(", "sess", ")", "\n", "", "elif", "self", ".", "_mode", "==", "'test'", ":", "\n", "            ", "evalset", "=", "testsets", "[", "0", "]", "\n", "self", ".", "load_sample", "=", "lambda", "sess", ":", "loader", ".", "get_test_task", "(", "sess", ",", "evalset", ")", "\n", "", "elif", "self", ".", "_mode", "==", "'val'", ":", "\n", "            ", "evalset", "=", "valsets", "[", "0", "]", "\n", "self", ".", "load_sample", "=", "lambda", "sess", ":", "loader", ".", "get_validation_task", "(", "sess", ",", "evalset", ")", "\n", "\n", "", "dump_name", "=", "self", ".", "_mode", "+", "'_dump'", "if", "not", "args", "[", "'dump.name'", "]", "else", "args", "[", "'dump.name'", "]", "\n", "path", "=", "check_dir", "(", "os", ".", "path", ".", "join", "(", "META_DATA_ROOT", ",", "'Dumps'", ",", "self", ".", "args", "[", "'model.backbone'", "]", ",", "\n", "self", ".", "_mode", ",", "evalset", ",", "dump_name", ")", ")", "\n", "self", ".", "_path", "=", "path", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "self", ".", "_keys_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'keys'", ")", "\n", "self", ".", "_keys", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", "and", "not", "rewrite", ":", "\n", "            ", "raise", "NameError", "(", "\"Dataset {} already exists.\"", ".", "format", "(", "self", ".", "_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.init": [[60, 63], ["lmdb.open", "models.model_helpers.get_domain_extractors"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.models.model_helpers.get_domain_extractors"], ["", "", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_db", "=", "lmdb", ".", "open", "(", "self", ".", "_path", ",", "map_size", "=", "self", ".", "_map_size", ",", "map_async", "=", "True", ")", "\n", "self", ".", "embed_many", "=", "get_domain_extractors", "(", "self", ".", "trainsets", ",", "self", ".", "dataset_models", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.close": [[64, 72], ["tuple", "pickle.dump", "open", "create_features_db.DatasetWriter._db.sync", "create_features_db.DatasetWriter._db.close"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "keys", "=", "tuple", "(", "self", ".", "_keys", ")", "\n", "pkl", ".", "dump", "(", "keys", ",", "open", "(", "self", ".", "_keys_file", ",", "'wb'", ")", ")", "\n", "\n", "if", "self", ".", "_db", "is", "not", "None", ":", "\n", "            ", "self", ".", "_db", ".", "sync", "(", ")", "\n", "self", ".", "_db", ".", "close", "(", ")", "\n", "self", ".", "_db", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.encode_dataset": [[73, 112], ["create_features_db.DatasetWriter._db.begin", "tensorflow.compat.v1.ConfigProto", "create_features_db.DatasetWriter.init", "tensorflow.compat.v1.Session", "tqdm.tqdm.tqdm", "create_features_db.DatasetWriter.commit", "range", "create_features_db.DatasetWriter.load_sample", "create_features_db.DatasetWriter.embed_many", "create_features_db.DatasetWriter.embed_many", "utils.SerializableArray", "utils.SerializableArray", "create_features_db.DatasetWriter.keys", "create_features_db.DatasetWriter.put", "create_features_db.DatasetWriter.put", "create_features_db.DatasetWriter._keys.extend", "sample[].detach().cpu().numpy", "sample[].detach().cpu().numpy", "utils.SerializableArray", "utils.SerializableArray", "create_features_db.DatasetWriter.put", "create_features_db.DatasetWriter.put", "create_features_db.DatasetWriter._keys.extend", "pickle.dumps", "pickle.dumps", "create_features_db.DatasetWriter.commit", "create_features_db.DatasetWriter._db.begin", "support_embed_dict[].detach().cpu().numpy", "query_embed_dict[].detach().cpu().numpy", "pickle.dumps", "pickle.dumps", "sample[].detach().cpu", "sample[].detach().cpu", "support_embed_dict[].detach().cpu", "query_embed_dict[].detach().cpu", "sample[].detach", "sample[].detach", "support_embed_dict[].detach", "query_embed_dict[].detach"], "methods", ["home.repos.pwc.inspect_result.dvornikita_SUR.data.create_features_db.DatasetWriter.init"], ["", "", "def", "encode_dataset", "(", "self", ",", "n_tasks", "=", "1000", ")", ":", "\n", "        ", "if", "self", ".", "_db", "is", "None", ":", "\n", "            ", "self", ".", "init", "(", ")", "\n", "\n", "", "txn", "=", "self", ".", "_db", ".", "begin", "(", "write", "=", "True", ")", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "as", "session", ":", "\n", "# Sampling task idxs", "\n", "            ", "for", "idx", "in", "tqdm", "(", "range", "(", "n_tasks", ")", ")", ":", "\n", "# compressing image", "\n", "                ", "sample", "=", "self", ".", "load_sample", "(", "session", ")", "\n", "# Embedding task images with my network", "\n", "support_embed_dict", "=", "self", ".", "embed_many", "(", "sample", "[", "'context_images'", "]", ")", "\n", "query_embed_dict", "=", "self", ".", "embed_many", "(", "sample", "[", "'target_images'", "]", ")", "\n", "# Putting the data into containers", "\n", "support_labels", "=", "SerializableArray", "(", "sample", "[", "'context_labels'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "query_labels", "=", "SerializableArray", "(", "sample", "[", "'target_labels'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "SerializableArray", ".", "__module__", "=", "'utils'", "\n", "\n", "# writing", "\n", "for", "dataset", "in", "support_embed_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "support_batch", "=", "SerializableArray", "(", "\n", "support_embed_dict", "[", "dataset", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "query_batch", "=", "SerializableArray", "(", "\n", "query_embed_dict", "[", "dataset", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "SerializableArray", ".", "__module__", "=", "'utils'", "\n", "txn", ".", "put", "(", "f\"{idx}_{dataset}_support\"", ".", "encode", "(", "\"ascii\"", ")", ",", "pkl", ".", "dumps", "(", "support_batch", ")", ")", "\n", "txn", ".", "put", "(", "f\"{idx}_{dataset}_query\"", ".", "encode", "(", "\"ascii\"", ")", ",", "pkl", ".", "dumps", "(", "query_batch", ")", ")", "\n", "self", ".", "_keys", ".", "extend", "(", "[", "f\"{idx}_{dataset}_support\"", ",", "f\"{idx}_{dataset}_query\"", "]", ")", "\n", "", "txn", ".", "put", "(", "f\"{idx}_labels_support\"", ".", "encode", "(", "\"ascii\"", ")", ",", "pkl", ".", "dumps", "(", "support_labels", ")", ")", "\n", "txn", ".", "put", "(", "f\"{idx}_labels_query\"", ".", "encode", "(", "\"ascii\"", ")", ",", "pkl", ".", "dumps", "(", "query_labels", ")", ")", "\n", "self", ".", "_keys", ".", "extend", "(", "[", "f\"{idx}_labels_support\"", ",", "f\"{idx}_labels_query\"", "]", ")", "\n", "\n", "# flushing into lmdb (on the disk)", "\n", "if", "idx", ">", "0", "and", "idx", "%", "self", ".", "_write_frequency", "==", "0", ":", "\n", "                    ", "txn", ".", "commit", "(", ")", "\n", "txn", "=", "self", ".", "_db", ".", "begin", "(", "write", "=", "True", ")", "\n", "", "", "txn", ".", "commit", "(", ")", "\n", "\n"]]}