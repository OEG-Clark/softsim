{"home.repos.pwc.inspect_result.fastnlp_TENER.None.train_tener_en.load_data": [[59, 99], ["fastNLP.cache_results", "fastNLP.embeddings.StaticEmbedding", "OntoNotesNERPipe().process_from_file.rename_field", "modules.pipe.Conll2003NERPipe().process_from_file", "fastNLP.embeddings.CNNCharEmbedding", "fastNLP.embeddings.StackEmbedding", "fastNLP.io.pipe.conll.OntoNotesNERPipe().process_from_file", "modules.TransformerEmbedding.TransformerCharEmbed", "OntoNotesNERPipe().process_from_file.get_vocab", "modules.pipe.Conll2003NERPipe", "OntoNotesNERPipe().process_from_file.get_vocab", "fastNLP.embeddings.LSTMCharEmbedding", "fastNLP.io.pipe.conll.OntoNotesNERPipe", "OntoNotesNERPipe().process_from_file.get_vocab", "OntoNotesNERPipe().process_from_file.get_vocab"], "function", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process_from_file", "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process_from_file"], ["@", "cache_results", "(", "name", ",", "_refresh", "=", "False", ")", "\n", "def", "load_data", "(", ")", ":", "\n", "# \u66ff\u6362\u8def\u5f84", "\n", "    ", "if", "dataset", "==", "'conll2003'", ":", "\n", "# conll2003\u7684lr\u4e0d\u80fd\u8d85\u8fc70.002", "\n", "        ", "paths", "=", "{", "'test'", ":", "\"../data/conll2003/test.txt\"", ",", "\n", "'train'", ":", "\"../data/conll2003/train.txt\"", ",", "\n", "'dev'", ":", "\"../data/conll2003/dev.txt\"", "}", "\n", "data", "=", "Conll2003NERPipe", "(", "encoding_type", "=", "encoding_type", ")", ".", "process_from_file", "(", "paths", ")", "\n", "", "elif", "dataset", "==", "'en-ontonotes'", ":", "\n", "# \u4f1a\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684train.txt, test.txt, dev.txt\u7b49\u6587\u4ef6", "\n", "        ", "paths", "=", "'../data/en-ontonotes/english'", "\n", "data", "=", "OntoNotesNERPipe", "(", "encoding_type", "=", "encoding_type", ")", ".", "process_from_file", "(", "paths", ")", "\n", "", "char_embed", "=", "None", "\n", "if", "char_type", "==", "'cnn'", ":", "\n", "        ", "char_embed", "=", "CNNCharEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "embed_size", "=", "30", ",", "char_emb_size", "=", "30", ",", "filter_nums", "=", "[", "30", "]", ",", "\n", "kernel_sizes", "=", "[", "3", "]", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0.3", ",", "pool_method", "=", "'max'", "\n", ",", "include_word_start_end", "=", "False", ",", "min_char_freq", "=", "2", ")", "\n", "", "elif", "char_type", "in", "[", "'adatrans'", ",", "'naive'", "]", ":", "\n", "        ", "char_embed", "=", "TransformerCharEmbed", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "embed_size", "=", "30", ",", "char_emb_size", "=", "30", ",", "word_dropout", "=", "0", ",", "\n", "dropout", "=", "0.3", ",", "pool_method", "=", "'max'", ",", "activation", "=", "'relu'", ",", "\n", "min_char_freq", "=", "2", ",", "requires_grad", "=", "True", ",", "include_word_start_end", "=", "False", ",", "\n", "char_attn_type", "=", "char_type", ",", "char_n_head", "=", "3", ",", "char_dim_ffn", "=", "60", ",", "char_scale", "=", "char_type", "==", "'naive'", ",", "\n", "char_dropout", "=", "0.15", ",", "char_after_norm", "=", "True", ")", "\n", "", "elif", "char_type", "==", "'lstm'", ":", "\n", "        ", "char_embed", "=", "LSTMCharEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "embed_size", "=", "30", ",", "char_emb_size", "=", "30", ",", "word_dropout", "=", "0", ",", "\n", "dropout", "=", "0.3", ",", "hidden_size", "=", "100", ",", "pool_method", "=", "'max'", ",", "activation", "=", "'relu'", ",", "\n", "min_char_freq", "=", "2", ",", "bidirectional", "=", "True", ",", "requires_grad", "=", "True", ",", "include_word_start_end", "=", "False", ")", "\n", "", "word_embed", "=", "StaticEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "\n", "model_dir_or_name", "=", "'en-glove-6b-100d'", ",", "\n", "requires_grad", "=", "True", ",", "lower", "=", "True", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0.5", ",", "\n", "only_norm_found_vector", "=", "normalize_embed", ")", "\n", "if", "char_embed", "is", "not", "None", ":", "\n", "        ", "embed", "=", "StackEmbedding", "(", "[", "word_embed", ",", "char_embed", "]", ",", "dropout", "=", "0", ",", "word_dropout", "=", "0.02", ")", "\n", "", "else", ":", "\n", "        ", "word_embed", ".", "word_drop", "=", "0.02", "\n", "embed", "=", "word_embed", "\n", "\n", "", "data", ".", "rename_field", "(", "'words'", ",", "'chars'", ")", "\n", "return", "data", ",", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.None.train_elmo_en.load_data": [[65, 105], ["fastNLP.cache_results", "fastNLP.embeddings.StaticEmbedding", "OntoNotesNERPipe().process_from_file.rename_field", "fastNLP.embeddings.ElmoEmbedding", "fastNLP.embeddings.StackEmbedding.set_mix_weights_requires_grad", "fastNLP.embeddings.StackEmbedding", "modules.pipe.Conll2003NERPipe().process_from_file", "fastNLP.embeddings.CNNCharEmbedding", "fastNLP.io.pipe.conll.OntoNotesNERPipe().process_from_file", "modules.TransformerEmbedding.TransformerCharEmbed", "OntoNotesNERPipe().process_from_file.get_vocab", "OntoNotesNERPipe().process_from_file.get_vocab", "modules.pipe.Conll2003NERPipe", "OntoNotesNERPipe().process_from_file.get_vocab", "fastNLP.embeddings.LSTMCharEmbedding", "fastNLP.io.pipe.conll.OntoNotesNERPipe", "OntoNotesNERPipe().process_from_file.get_vocab", "OntoNotesNERPipe().process_from_file.get_vocab"], "function", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process_from_file", "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process_from_file"], ["@", "cache_results", "(", "name", ",", "_refresh", "=", "False", ")", "\n", "def", "load_data", "(", ")", ":", "\n", "# \u66ff\u6362\u8def\u5f84", "\n", "    ", "if", "dataset", "==", "'conll2003'", ":", "\n", "# conll2003\u7684lr\u4e0d\u80fd\u8d85\u8fc70.002", "\n", "        ", "paths", "=", "{", "'test'", ":", "\"../data/conll2003/test.txt\"", ",", "\n", "'train'", ":", "\"../data/conll2003/train.txt\"", ",", "\n", "'dev'", ":", "\"../data/conll2003/dev.txt\"", "}", "\n", "data", "=", "Conll2003NERPipe", "(", "encoding_type", "=", "encoding_type", ")", ".", "process_from_file", "(", "paths", ")", "\n", "", "elif", "dataset", "==", "'en-ontonotes'", ":", "\n", "        ", "paths", "=", "'../data/en-ontonotes/english'", "\n", "data", "=", "OntoNotesNERPipe", "(", "encoding_type", "=", "encoding_type", ")", ".", "process_from_file", "(", "paths", ")", "\n", "", "char_embed", "=", "None", "\n", "if", "char_type", "==", "'cnn'", ":", "\n", "        ", "char_embed", "=", "CNNCharEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "embed_size", "=", "30", ",", "char_emb_size", "=", "30", ",", "filter_nums", "=", "[", "30", "]", ",", "\n", "kernel_sizes", "=", "[", "3", "]", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0.3", ",", "pool_method", "=", "'max'", "\n", ",", "include_word_start_end", "=", "False", ",", "min_char_freq", "=", "2", ")", "\n", "", "elif", "char_type", "in", "[", "'adatrans'", ",", "'naive'", "]", ":", "\n", "        ", "char_embed", "=", "TransformerCharEmbed", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "embed_size", "=", "30", ",", "char_emb_size", "=", "30", ",", "word_dropout", "=", "0", ",", "\n", "dropout", "=", "0.3", ",", "pool_method", "=", "'max'", ",", "activation", "=", "'relu'", ",", "\n", "min_char_freq", "=", "2", ",", "requires_grad", "=", "True", ",", "include_word_start_end", "=", "False", ",", "\n", "char_attn_type", "=", "char_type", ",", "char_n_head", "=", "3", ",", "char_dim_ffn", "=", "60", ",", "char_scale", "=", "char_type", "==", "'naive'", ",", "\n", "char_dropout", "=", "0.15", ",", "char_after_norm", "=", "True", ")", "\n", "", "elif", "char_type", "==", "'lstm'", ":", "\n", "        ", "char_embed", "=", "LSTMCharEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "embed_size", "=", "30", ",", "char_emb_size", "=", "30", ",", "word_dropout", "=", "0", ",", "\n", "dropout", "=", "0.3", ",", "hidden_size", "=", "100", ",", "pool_method", "=", "'max'", ",", "activation", "=", "'relu'", ",", "\n", "min_char_freq", "=", "2", ",", "bidirectional", "=", "True", ",", "requires_grad", "=", "True", ",", "include_word_start_end", "=", "False", ")", "\n", "", "word_embed", "=", "StaticEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'words'", ")", ",", "\n", "model_dir_or_name", "=", "'en-glove-6b-100d'", ",", "\n", "requires_grad", "=", "True", ",", "lower", "=", "True", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0.5", ",", "\n", "only_norm_found_vector", "=", "normalize_embed", ")", "\n", "data", ".", "rename_field", "(", "'words'", ",", "'chars'", ")", "\n", "\n", "embed", "=", "ElmoEmbedding", "(", "vocab", "=", "data", ".", "get_vocab", "(", "'chars'", ")", ",", "model_dir_or_name", "=", "'en-original'", ",", "layers", "=", "'mix'", ",", "requires_grad", "=", "False", ",", "\n", "word_dropout", "=", "0.0", ",", "dropout", "=", "0.5", ",", "cache_word_reprs", "=", "False", ")", "\n", "embed", ".", "set_mix_weights_requires_grad", "(", ")", "\n", "\n", "embed", "=", "StackEmbedding", "(", "[", "embed", ",", "word_embed", ",", "char_embed", "]", ",", "dropout", "=", "0", ",", "word_dropout", "=", "0.02", ")", "\n", "\n", "return", "data", ",", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.None.train_tener_cn.load_data": [[66, 100], ["fastNLP.cache_results", "modules.pipe.CNNERPipe().process_from_file", "fastNLP.embeddings.StaticEmbedding", "fastNLP.embeddings.StaticEmbedding", "CNNERPipe().process_from_file.get_vocab", "CNNERPipe().process_from_file.get_vocab", "modules.pipe.CNNERPipe"], "function", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process_from_file"], ["@", "cache_results", "(", "name", ",", "_refresh", "=", "False", ")", "\n", "def", "load_data", "(", ")", ":", "\n", "# \u66ff\u6362\u8def\u5f84", "\n", "    ", "if", "dataset", "==", "'ontonotes'", ":", "\n", "        ", "paths", "=", "{", "'train'", ":", "'../data/OntoNote4NER/train.char.bmes'", ",", "\n", "\"dev\"", ":", "'../data/OntoNote4NER/dev.char.bmes'", ",", "\n", "\"test\"", ":", "'../data/OntoNote4NER/test.char.bmes'", "}", "\n", "min_freq", "=", "2", "\n", "", "elif", "dataset", "==", "'weibo'", ":", "\n", "        ", "paths", "=", "{", "'train'", ":", "'../data/WeiboNER/train.all.bmes'", ",", "\n", "'dev'", ":", "'../data/WeiboNER/dev.all.bmes'", ",", "\n", "'test'", ":", "'../data/WeiboNER/test.all.bmes'", "}", "\n", "min_freq", "=", "1", "\n", "", "elif", "dataset", "==", "'resume'", ":", "\n", "        ", "paths", "=", "{", "'train'", ":", "'../data/ResumeNER/train.char.bmes'", ",", "\n", "'dev'", ":", "'../data/ResumeNER/dev.char.bmes'", ",", "\n", "'test'", ":", "'../data/ResumeNER/test.char.bmes'", "}", "\n", "min_freq", "=", "1", "\n", "", "elif", "dataset", "==", "'msra'", ":", "\n", "        ", "paths", "=", "{", "'train'", ":", "'../data/MSRANER/train_dev.char.bmes'", ",", "\n", "'dev'", ":", "'../data/MSRANER/test.char.bmes'", ",", "\n", "'test'", ":", "'../data/MSRANER/test.char.bmes'", "}", "\n", "min_freq", "=", "2", "\n", "", "data_bundle", "=", "CNNERPipe", "(", "bigrams", "=", "True", ",", "encoding_type", "=", "encoding_type", ")", ".", "process_from_file", "(", "paths", ")", "\n", "embed", "=", "StaticEmbedding", "(", "data_bundle", ".", "get_vocab", "(", "'chars'", ")", ",", "\n", "model_dir_or_name", "=", "'../data/gigaword_chn.all.a2b.uni.ite50.vec'", ",", "\n", "min_freq", "=", "1", ",", "only_norm_found_vector", "=", "normalize_embed", ",", "word_dropout", "=", "0.01", ",", "dropout", "=", "0.3", ")", "\n", "\n", "bi_embed", "=", "StaticEmbedding", "(", "data_bundle", ".", "get_vocab", "(", "'bigrams'", ")", ",", "\n", "model_dir_or_name", "=", "'../data/gigaword_chn.all.a2b.bi.ite50.vec'", ",", "\n", "word_dropout", "=", "0.02", ",", "dropout", "=", "0.3", ",", "min_freq", "=", "min_freq", ",", "\n", "only_norm_found_vector", "=", "normalize_embed", ",", "only_train_min_freq", "=", "True", ")", "\n", "\n", "return", "data_bundle", ",", "embed", ",", "bi_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeEmbedding.forward": [[8, 28], ["input.size", "relative_transformer.RelativeEmbedding.weights.index_select().detach", "relative_transformer.RelativeEmbedding.get_embedding", "weights.to.to.to", "relative_transformer.RelativeEmbedding.register_buffer", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "weights.to.to.size", "relative_transformer.RelativeEmbedding.weights.index_select", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "positions.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.get_embedding"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\n        \"\"\"", "\n", "bsz", ",", "seq_len", "=", "input", ".", "size", "(", ")", "\n", "max_pos", "=", "self", ".", "padding_idx", "+", "seq_len", "\n", "if", "max_pos", ">", "self", ".", "origin_shift", ":", "\n", "# recompute/expand embeddings if needed", "\n", "            ", "weights", "=", "self", ".", "get_embedding", "(", "\n", "max_pos", "*", "2", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", ")", "\n", "weights", "=", "weights", ".", "to", "(", "self", ".", "_float_tensor", ")", "\n", "del", "self", ".", "weights", "\n", "self", ".", "origin_shift", "=", "weights", ".", "size", "(", "0", ")", "//", "2", "\n", "self", ".", "register_buffer", "(", "'weights'", ",", "weights", ")", "\n", "\n", "", "positions", "=", "torch", ".", "arange", "(", "-", "seq_len", ",", "seq_len", ")", ".", "to", "(", "input", ".", "device", ")", ".", "long", "(", ")", "+", "self", ".", "origin_shift", "# 2*seq_len", "\n", "embed", "=", "self", ".", "weights", ".", "index_select", "(", "0", ",", "positions", ".", "long", "(", ")", ")", ".", "detach", "(", ")", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeSinusoidalPositionalEmbedding.__init__": [[35, 53], ["torch.nn.Module.__init__", "relative_transformer.RelativeSinusoidalPositionalEmbedding.get_embedding", "relative_transformer.RelativeSinusoidalPositionalEmbedding.register_buffer", "relative_transformer.RelativeSinusoidalPositionalEmbedding.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__", "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.get_embedding"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "padding_idx", ",", "init_size", "=", "1568", ")", ":", "\n", "        ", "\"\"\"\n\n        :param embedding_dim: \u6bcf\u4e2a\u4f4d\u7f6e\u7684dimension\n        :param padding_idx:\n        :param init_size:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "assert", "init_size", "%", "2", "==", "0", "\n", "weights", "=", "self", ".", "get_embedding", "(", "\n", "init_size", "+", "1", ",", "\n", "embedding_dim", ",", "\n", "padding_idx", ",", "\n", ")", "\n", "self", ".", "register_buffer", "(", "'weights'", ",", "weights", ")", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeSinusoidalPositionalEmbedding.get_embedding": [[54, 71], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "math.log", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build sinusoidal embeddings.\n        This matches the implementation in tensor2tensor, but differs slightly\n        from the description in Section 3.5 of \"Attention Is All You Need\".\n        \"\"\"", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "emb", "=", "math", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "dtype", "=", "torch", ".", "float", ")", "*", "-", "emb", ")", "\n", "emb", "=", "torch", ".", "arange", "(", "-", "num_embeddings", "//", "2", ",", "num_embeddings", "//", "2", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "*", "emb", ".", "unsqueeze", "(", "0", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "emb", ")", ",", "torch", ".", "cos", "(", "emb", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "num_embeddings", ",", "-", "1", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "\n", "# zero pad", "\n", "            ", "emb", "=", "torch", ".", "cat", "(", "[", "emb", ",", "torch", ".", "zeros", "(", "num_embeddings", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "emb", "[", "padding_idx", ",", ":", "]", "=", "0", "\n", "", "self", ".", "origin_shift", "=", "num_embeddings", "//", "2", "+", "1", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeMultiHeadAttn.__init__": [[74, 104], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "relative_transformer.RelativeSinusoidalPositionalEmbedding", "math.sqrt", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "n_head", ",", "dropout", ",", "r_w_bias", "=", "None", ",", "r_r_bias", "=", "None", ",", "scale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param int d_model:\n        :param int n_head:\n        :param dropout: \u5bf9attention map\u7684dropout\n        :param r_w_bias: n_head x head_dim or None, \u5982\u679c\u4e3adim\n        :param r_r_bias: n_head x head_dim or None,\n        :param scale:\n        :param rel_pos_embed:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "qkv_linear", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "head_dim", "=", "d_model", "//", "n_head", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "pos_embed", "=", "RelativeSinusoidalPositionalEmbedding", "(", "d_model", "//", "n_head", ",", "0", ",", "1200", ")", "\n", "\n", "if", "scale", ":", "\n", "            ", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "d_model", "//", "n_head", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "1", "\n", "\n", "", "if", "r_r_bias", "is", "None", "or", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "zeros", "(", "n_head", ",", "d_model", "//", "n_head", ")", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_normal_", "(", "torch", ".", "zeros", "(", "n_head", ",", "d_model", "//", "n_head", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "# r_r_bias\u5c31\u662fv", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "# r_w_bias\u5c31\u662fu", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeMultiHeadAttn.forward": [[105, 141], ["x.size", "relative_transformer.RelativeMultiHeadAttn.pos_embed", "relative_transformer.RelativeMultiHeadAttn.qkv_linear", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "q.view().transpose.view().transpose.view().transpose", "k.view().transpose.view().transpose.view().transpose", "torch.matmul().transpose().reshape.view().transpose", "torch.matmul().transpose().reshape.view().transpose", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "relative_transformer.RelativeMultiHeadAttn.masked_fill", "torch.softmax", "torch.softmax", "relative_transformer.RelativeMultiHeadAttn.dropout_layer", "torch.matmul().transpose().reshape", "torch.matmul().transpose().reshape", "torch.matmul().transpose().reshape", "torch.matmul().transpose().reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "relative_transformer.RelativeMultiHeadAttn._shift", "relative_transformer.RelativeMultiHeadAttn._transpose_shift", "mask[].eq", "float", "q.view().transpose.view().transpose.view", "k.view().transpose.view().transpose.view", "torch.matmul().transpose().reshape.view", "torch.matmul().transpose().reshape.view", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeMultiHeadAttn._shift", "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeMultiHeadAttn._transpose_shift"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n\n        :param x: batch_size x max_len x d_model\n        :param mask: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "\n", "batch_size", ",", "max_len", ",", "d_model", "=", "x", ".", "size", "(", ")", "\n", "pos_embed", "=", "self", ".", "pos_embed", "(", "mask", ")", "# l x head_dim", "\n", "\n", "qkv", "=", "self", ".", "qkv_linear", "(", "x", ")", "# batch_size x max_len x d_model3", "\n", "q", ",", "k", ",", "v", "=", "torch", ".", "chunk", "(", "qkv", ",", "chunks", "=", "3", ",", "dim", "=", "-", "1", ")", "\n", "q", "=", "q", ".", "view", "(", "batch_size", ",", "max_len", ",", "self", ".", "n_head", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "k", "=", "k", ".", "view", "(", "batch_size", ",", "max_len", ",", "self", ".", "n_head", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "v", "=", "v", ".", "view", "(", "batch_size", ",", "max_len", ",", "self", ".", "n_head", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# b x n x l x d", "\n", "\n", "rw_head_q", "=", "q", "+", "self", ".", "r_r_bias", "[", ":", ",", "None", "]", "\n", "AC", "=", "torch", ".", "einsum", "(", "'bnqd,bnkd->bnqk'", ",", "[", "rw_head_q", ",", "k", "]", ")", "# b x n x l x d, n\u662fhead", "\n", "\n", "D_", "=", "torch", ".", "einsum", "(", "'nd,ld->nl'", ",", "self", ".", "r_w_bias", ",", "pos_embed", ")", "[", "None", ",", ":", ",", "None", "]", "# head x 2max_len, \u6bcf\u4e2ahead\u5bf9\u4f4d\u7f6e\u7684bias", "\n", "B_", "=", "torch", ".", "einsum", "(", "'bnqd,ld->bnql'", ",", "q", ",", "pos_embed", ")", "# bsz x head  x max_len x 2max_len\uff0c\u6bcf\u4e2aquery\u5bf9\u6bcf\u4e2ashift\u7684\u504f\u79fb", "\n", "E_", "=", "torch", ".", "einsum", "(", "'bnqd,ld->bnql'", ",", "k", ",", "pos_embed", ")", "# bsz x head x max_len x 2max_len, key\u5bf9relative\u7684bias", "\n", "BD", "=", "B_", "+", "D_", "# bsz x head x max_len x 2max_len, \u8981\u8f6c\u6362\u4e3absz x head x max_len x max_len", "\n", "BDE", "=", "self", ".", "_shift", "(", "BD", ")", "+", "self", ".", "_transpose_shift", "(", "E_", ")", "\n", "attn", "=", "AC", "+", "BDE", "\n", "\n", "attn", "=", "attn", "/", "self", ".", "scale", "\n", "\n", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ".", "eq", "(", "0", ")", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "attn", "=", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "dropout_layer", "(", "attn", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "batch_size", ",", "max_len", ",", "d_model", ")", "# b x n x l x d", "\n", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeMultiHeadAttn._shift": [[142, 163], ["BD[].view.size", "BD[].view.new_zeros", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "BD[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_shift", "(", "self", ",", "BD", ")", ":", "\n", "        ", "\"\"\"\n        \u7c7b\u4f3c\n        -3 -2 -1 0 1 2\n        -3 -2 -1 0 1 2\n        -3 -2 -1 0 1 2\n\n        \u8f6c\u6362\u4e3a\n        0   1  2\n        -1  0  1\n        -2 -1  0\n\n        :param BD: batch_size x n_head x max_len x 2max_len\n        :return: batch_size x n_head x max_len x max_len\n        \"\"\"", "\n", "bsz", ",", "n_head", ",", "max_len", ",", "_", "=", "BD", ".", "size", "(", ")", "\n", "zero_pad", "=", "BD", ".", "new_zeros", "(", "bsz", ",", "n_head", ",", "max_len", ",", "1", ")", "\n", "BD", "=", "torch", ".", "cat", "(", "[", "BD", ",", "zero_pad", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "bsz", ",", "n_head", ",", "-", "1", ",", "max_len", ")", "# bsz x n_head x (2max_len+1) x max_len", "\n", "BD", "=", "BD", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "view", "(", "bsz", ",", "n_head", ",", "max_len", ",", "-", "1", ")", "# bsz x n_head x 2max_len x max_len", "\n", "BD", "=", "BD", "[", ":", ",", ":", ",", ":", ",", "max_len", ":", "]", "\n", "return", "BD", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.relative_transformer.RelativeMultiHeadAttn._transpose_shift": [[164, 188], ["E.index_select().transpose.index_select().transpose.size", "E.index_select().transpose.index_select().transpose.new_zeros", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "E.index_select().transpose.index_select().transpose.index_select().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "E.index_select().transpose.index_select().transpose.index_select", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "_transpose_shift", "(", "self", ",", "E", ")", ":", "\n", "        ", "\"\"\"\n        \u7c7b\u4f3c\n          -3   -2   -1   0   1   2\n         -30  -20  -10  00  10  20\n        -300 -200 -100 000 100 200\n\n        \u8f6c\u6362\u4e3a\n          0  -10   -200\n          1   00   -100\n          2   10    000\n\n\n        :param E: batch_size x n_head x max_len x 2max_len\n        :return: batch_size x n_head x max_len x max_len\n        \"\"\"", "\n", "bsz", ",", "n_head", ",", "max_len", ",", "_", "=", "E", ".", "size", "(", ")", "\n", "zero_pad", "=", "E", ".", "new_zeros", "(", "bsz", ",", "n_head", ",", "max_len", ",", "1", ")", "\n", "# bsz x n_head x -1 x (max_len+1)", "\n", "E", "=", "torch", ".", "cat", "(", "[", "E", ",", "zero_pad", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "bsz", ",", "n_head", ",", "-", "1", ",", "max_len", ")", "\n", "indice", "=", "(", "torch", ".", "arange", "(", "max_len", ")", "*", "2", "+", "1", ")", ".", "to", "(", "E", ".", "device", ")", "\n", "E", "=", "E", ".", "index_select", "(", "index", "=", "indice", ",", "dim", "=", "-", "2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "# bsz x n_head x max_len x max_len", "\n", "\n", "return", "E", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.TransformerEmbedding.TransformerCharEmbed.__init__": [[14, 90], ["fastNLP.embeddings.TokenEmbedding.__init__", "isinstance", "fastNLP.logger.info", "fastNLP.embeddings.utils._construct_char_vocab_from_vocab", "fastNLP.logger.info", "max", "TransformerEmbedding.TransformerCharEmbed.register_buffer", "TransformerEmbedding.TransformerCharEmbed.register_buffer", "fastNLP.embeddings.utils.get_embeddings", "transformer.TransformerEncoder", "torch.nn.Linear", "torch.nn.Linear", "map", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "activation.lower", "callable", "len", "activation.lower", "Exception", "len", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "TransformerEmbedding.TransformerCharEmbed.char_vocab.to_index", "activation.lower", "len", "list", "len"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "embed_size", ":", "int", "=", "30", ",", "char_emb_size", ":", "int", "=", "30", ",", "word_dropout", ":", "float", "=", "0", ",", "\n", "dropout", ":", "float", "=", "0", ",", "pool_method", ":", "str", "=", "'max'", ",", "activation", "=", "'relu'", ",", "\n", "min_char_freq", ":", "int", "=", "2", ",", "requires_grad", "=", "True", ",", "include_word_start_end", "=", "True", ",", "\n", "char_attn_type", "=", "'adatrans'", ",", "char_n_head", "=", "3", ",", "char_dim_ffn", "=", "60", ",", "char_scale", "=", "False", ",", "char_pos_embed", "=", "None", ",", "\n", "char_dropout", "=", "0.15", ",", "char_after_norm", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab: \u8bcd\u8868\n        :param embed_size: TransformerCharEmbed\u7684\u8f93\u51fa\u7ef4\u5ea6\u3002\u9ed8\u8ba4\u503c\u4e3a50.\n        :param char_emb_size: character\u7684embedding\u7684\u7ef4\u5ea6\u3002\u9ed8\u8ba4\u503c\u4e3a50. \u540c\u65f6\u4e5f\u662fTransformer\u7684d_model\u5927\u5c0f\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param dropout: \u4ee5\u591a\u5927\u6982\u7387drop character embedding\u7684\u8f93\u51fa\u4ee5\u53ca\u6700\u7ec8\u7684word\u7684\u8f93\u51fa\u3002\n        :param pool_method: \u652f\u6301'max', 'avg'\u3002\n        :param activation: \u6fc0\u6d3b\u51fd\u6570\uff0c\u652f\u6301'relu', 'sigmoid', 'tanh', \u6216\u8005\u81ea\u5b9a\u4e49\u51fd\u6570.\n        :param min_char_freq: character\u7684\u6700\u5c0f\u51fa\u73b0\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a2.\n        :param requires_grad:\n        :param include_word_start_end: \u662f\u5426\u4f7f\u7528\u7279\u6b8a\u7684tag\u6807\u8bb0word\u7684\u5f00\u59cb\u4e0e\u7ed3\u675f\n        :param char_attn_type: adatrans or naive.\n        :param char_n_head: \u591a\u5c11\u4e2ahead\n        :param char_dim_ffn: transformer\u4e2dffn\u4e2d\u95f4\u5c42\u7684\u5927\u5c0f\n        :param char_scale: \u662f\u5426\u4f7f\u7528scale\n        :param char_pos_embed: None, 'fix', 'sin'. What kind of position embedding. When char_attn_type=relative, None is\n            ok\n        :param char_dropout: Dropout in Transformer encoder\n        :param char_after_norm: the normalization place.\n        \"\"\"", "\n", "super", "(", "TransformerCharEmbed", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n", "assert", "char_emb_size", "%", "char_n_head", "==", "0", ",", "\"d_model should divide n_head.\"", "\n", "\n", "assert", "pool_method", "in", "(", "'max'", ",", "'avg'", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "# activation function", "\n", "if", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "            ", "if", "activation", ".", "lower", "(", ")", "==", "'relu'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "relu", "\n", "", "elif", "activation", ".", "lower", "(", ")", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "sigmoid", "\n", "", "elif", "activation", ".", "lower", "(", ")", "==", "'tanh'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "tanh", "\n", "", "", "elif", "activation", "is", "None", ":", "\n", "            ", "self", ".", "activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "callable", "(", "activation", ")", ":", "\n", "            ", "self", ".", "activation", "=", "activation", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Undefined activation function: choose from: [relu, tanh, sigmoid, or a callable function]\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Start constructing character vocabulary.\"", ")", "\n", "# \u5efa\u7acbchar\u7684\u8bcd\u8868", "\n", "self", ".", "char_vocab", "=", "_construct_char_vocab_from_vocab", "(", "vocab", ",", "min_freq", "=", "min_char_freq", ",", "\n", "include_word_start_end", "=", "include_word_start_end", ")", "\n", "self", ".", "char_pad_index", "=", "self", ".", "char_vocab", ".", "padding_idx", "\n", "logger", ".", "info", "(", "f\"In total, there are {len(self.char_vocab)} distinct characters.\"", ")", "\n", "# \u5bf9vocab\u8fdb\u884cindex", "\n", "max_word_len", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "vocab", ")", ")", "\n", "if", "include_word_start_end", ":", "\n", "            ", "max_word_len", "+=", "2", "\n", "", "self", ".", "register_buffer", "(", "'words_to_chars_embedding'", ",", "torch", ".", "full", "(", "(", "len", "(", "vocab", ")", ",", "max_word_len", ")", ",", "\n", "fill_value", "=", "self", ".", "char_pad_index", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "self", ".", "register_buffer", "(", "'word_lengths'", ",", "torch", ".", "zeros", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "# if index!=vocab.padding_idx:  # \u5982\u679c\u662fpad\u7684\u8bdd\uff0c\u76f4\u63a5\u5c31\u4e3apad_value\u4e86. \u4fee\u6539\u4e3a\u4e0d\u533a\u5206pad\u4e0e\u5426", "\n", "            ", "if", "include_word_start_end", ":", "\n", "                ", "word", "=", "[", "'<bow>'", "]", "+", "list", "(", "word", ")", "+", "[", "'<eow>'", "]", "\n", "", "self", ".", "words_to_chars_embedding", "[", "index", ",", ":", "len", "(", "word", ")", "]", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "char_vocab", ".", "to_index", "(", "c", ")", "for", "c", "in", "word", "]", ")", "\n", "self", ".", "word_lengths", "[", "index", "]", "=", "len", "(", "word", ")", "\n", "\n", "", "self", ".", "char_embedding", "=", "get_embeddings", "(", "(", "len", "(", "self", ".", "char_vocab", ")", ",", "char_emb_size", ")", ")", "\n", "self", ".", "transformer", "=", "TransformerEncoder", "(", "1", ",", "char_emb_size", ",", "char_n_head", ",", "char_dim_ffn", ",", "dropout", "=", "char_dropout", ",", "after_norm", "=", "char_after_norm", ",", "\n", "attn_type", "=", "char_attn_type", ",", "pos_embed", "=", "char_pos_embed", ",", "scale", "=", "char_scale", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "char_emb_size", ",", "embed_size", ")", "\n", "\n", "self", ".", "_embed_size", "=", "embed_size", "\n", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.TransformerEmbedding.TransformerCharEmbed.forward": [[91, 123], ["TransformerEmbedding.TransformerCharEmbed.drop_word", "TransformerEmbedding.TransformerCharEmbed.size", "word_lengths.max", "TransformerEmbedding.TransformerCharEmbed.eq", "TransformerEmbedding.TransformerCharEmbed.char_embedding", "TransformerEmbedding.TransformerCharEmbed.dropout", "TransformerEmbedding.TransformerCharEmbed.reshape", "TransformerEmbedding.TransformerCharEmbed.transformer", "trans_chars.masked_fill.masked_fill.reshape", "TransformerEmbedding.TransformerCharEmbed.activation", "TransformerEmbedding.TransformerCharEmbed.fc", "TransformerEmbedding.TransformerCharEmbed.dropout", "TransformerEmbedding.TransformerCharEmbed.eq.eq().reshape", "trans_chars.masked_fill.masked_fill.masked_fill", "torch.max", "torch.max", "torch.max", "torch.max", "trans_chars.masked_fill.masked_fill.masked_fill", "TransformerEmbedding.TransformerCharEmbed.eq.unsqueeze", "float", "TransformerEmbedding.TransformerCharEmbed.eq.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "TransformerEmbedding.TransformerCharEmbed.eq.eq().sum().float", "TransformerEmbedding.TransformerCharEmbed.eq.eq", "TransformerEmbedding.TransformerCharEmbed.eq.eq().sum", "TransformerEmbedding.TransformerCharEmbed.eq.eq"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"\n        \u8f93\u5165words\u7684index\u540e\uff0c\u751f\u6210\u5bf9\u5e94\u7684words\u7684\u8868\u793a\u3002\n\n        :param words: [batch_size, max_len]\n        :return: [batch_size, max_len, embed_size]\n        \"\"\"", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "batch_size", ",", "max_len", "=", "words", ".", "size", "(", ")", "\n", "chars", "=", "self", ".", "words_to_chars_embedding", "[", "words", "]", "# batch_size x max_len x max_word_len", "\n", "word_lengths", "=", "self", ".", "word_lengths", "[", "words", "]", "# batch_size x max_len", "\n", "max_word_len", "=", "word_lengths", ".", "max", "(", ")", "\n", "chars", "=", "chars", "[", ":", ",", ":", ",", ":", "max_word_len", "]", "\n", "# \u4e3amask\u7684\u5730\u65b9\u4e3a1", "\n", "chars_masks", "=", "chars", ".", "eq", "(", "self", ".", "char_pad_index", ")", "# batch_size x max_len x max_word_len \u5982\u679c\u4e3a0, \u8bf4\u660e\u662fpadding\u7684\u4f4d\u7f6e\u4e86", "\n", "char_embeds", "=", "self", ".", "char_embedding", "(", "chars", ")", "# batch_size x max_len x max_word_len x embed_size", "\n", "char_embeds", "=", "self", ".", "dropout", "(", "char_embeds", ")", "\n", "reshaped_chars", "=", "char_embeds", ".", "reshape", "(", "batch_size", "*", "max_len", ",", "max_word_len", ",", "-", "1", ")", "\n", "\n", "trans_chars", "=", "self", ".", "transformer", "(", "reshaped_chars", ",", "chars_masks", ".", "eq", "(", "0", ")", ".", "reshape", "(", "-", "1", ",", "max_word_len", ")", ")", "\n", "trans_chars", "=", "trans_chars", ".", "reshape", "(", "batch_size", ",", "max_len", ",", "max_word_len", ",", "-", "1", ")", "\n", "trans_chars", "=", "self", ".", "activation", "(", "trans_chars", ")", "\n", "if", "self", ".", "pool_method", "==", "'max'", ":", "\n", "            ", "trans_chars", "=", "trans_chars", ".", "masked_fill", "(", "chars_masks", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "'-inf'", ")", ")", "\n", "chars", ",", "_", "=", "torch", ".", "max", "(", "trans_chars", ",", "dim", "=", "-", "2", ")", "# batch_size x max_len x H", "\n", "", "else", ":", "\n", "            ", "trans_chars", "=", "trans_chars", ".", "masked_fill", "(", "chars_masks", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "chars", "=", "torch", ".", "sum", "(", "trans_chars", ",", "dim", "=", "-", "2", ")", "/", "chars_masks", ".", "eq", "(", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "", "chars", "=", "self", ".", "fc", "(", "chars", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "chars", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.Conll2003NERPipe.__init__": [[61, 76], ["ValueError", "fastNLP.io.pipe.utils.iob2bioes", "fastNLP.io.pipe.utils.iob2"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "encoding_type", ":", "str", "=", "'bio'", ",", "lower", ":", "bool", "=", "False", ",", "word_shape", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param: str encoding_type: target\u5217\u4f7f\u7528\u4ec0\u4e48\u7c7b\u578b\u7684encoding\u65b9\u5f0f\uff0c\u652f\u6301bioes, bio\u4e24\u79cd\u3002\n        :param bool lower: \u662f\u5426\u5c06words\u5c0f\u5199\u5316\u540e\u518d\u5efa\u7acb\u8bcd\u8868\uff0c\u7edd\u5927\u591a\u6570\u60c5\u51b5\u90fd\u4e0d\u9700\u8981\u8bbe\u7f6e\u4e3aTrue\u3002\n        :param boll word_shape: \u662f\u5426\u65b0\u589e\u4e00\u5217word shape\uff0c5\u7ef4\n        \"\"\"", "\n", "if", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "iob2", "\n", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "lambda", "words", ":", "iob2bioes", "(", "iob2", "(", "words", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "", "self", ".", "lower", "=", "lower", "\n", "self", ".", "word_shape", "=", "word_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.Conll2003NERPipe.process": [[77, 118], ["data_bundle.datasets.items", "fastNLP.io.pipe.utils._add_words_field", "data_bundle.apply_field", "fastNLP.io.pipe.utils._indexize", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "dataset.apply_field", "data_bundle.apply_field", "data_bundle.set_input", "dataset.add_seq_len", "c.isdigit"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "\"\"\"\n        \u652f\u6301\u7684DataSet\u7684field\u4e3a\n\n        .. csv-table::\n           :header: \"raw_words\", \"target\"\n\n           \"[Nadim, Ladki]\", \"[B-PER, I-PER]\"\n           \"[AL-AIN, United, Arab, ...]\", \"[B-LOC, B-LOC, I-LOC, ...]\"\n           \"[...]\", \"[...]\"\n\n        :param ~fastNLP.DataBundle data_bundle: \u4f20\u5165\u7684DataBundle\u4e2d\u7684DataSet\u5fc5\u987b\u5305\u542braw_words\u548cner\u4e24\u4e2afield\uff0c\u4e14\u4e24\u4e2afield\u7684\u5185\u5bb9\u5747\u4e3aList[str]\u5728\u4f20\u5165DataBundle\u57fa\u7840\u4e0a\u539f\u4f4d\u4fee\u6539\u3002\n        :return DataBundle:\n        \"\"\"", "\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "convert_tag", ",", "field_name", "=", "Const", ".", "TARGET", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "\n", "if", "self", ".", "word_shape", ":", "\n", "            ", "data_bundle", ".", "apply_field", "(", "word_shape", ",", "field_name", "=", "'raw_words'", ",", "new_field_name", "=", "'word_shapes'", ")", "\n", "data_bundle", ".", "set_input", "(", "'word_shapes'", ")", "\n", "\n", "# \u5c06\u6240\u6709digit\u8f6c\u4e3a0", "\n", "", "data_bundle", ".", "apply_field", "(", "lambda", "chars", ":", "[", "''", ".", "join", "(", "[", "'0'", "if", "c", ".", "isdigit", "(", ")", "else", "c", "for", "c", "in", "char", "]", ")", "for", "char", "in", "chars", "]", ",", "\n", "field_name", "=", "Const", ".", "INPUT", ",", "new_field_name", "=", "Const", ".", "INPUT", ")", "\n", "\n", "# index", "\n", "_indexize", "(", "data_bundle", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.Conll2003NERPipe.process_from_file": [[119, 130], ["fastNLP.io.Conll2003NERLoader().load", "pipe.Conll2003NERPipe.process", "fastNLP.io.Conll2003NERLoader"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", "->", "DataBundle", ":", "\n", "        ", "\"\"\"\n\n        :param paths: \u652f\u6301\u8def\u5f84\u7c7b\u578b\u53c2\u89c1 :class:`fastNLP.io.loader.ConllLoader` \u7684load\u51fd\u6570\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "# \u8bfb\u53d6\u6570\u636e", "\n", "data_bundle", "=", "Conll2003NERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.OntoNotesNERPipe.__init__": [[160, 175], ["ValueError", "fastNLP.io.pipe.utils.iob2bioes", "fastNLP.io.pipe.utils.iob2"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "encoding_type", ":", "str", "=", "'bio'", ",", "lower", ":", "bool", "=", "False", ",", "word_shape", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param: str encoding_type: target\u5217\u4f7f\u7528\u4ec0\u4e48\u7c7b\u578b\u7684encoding\u65b9\u5f0f\uff0c\u652f\u6301bioes, bio\u4e24\u79cd\u3002\n        :param bool lower: \u662f\u5426\u5c06words\u5c0f\u5199\u5316\u540e\u518d\u5efa\u7acb\u8bcd\u8868\uff0c\u7edd\u5927\u591a\u6570\u60c5\u51b5\u90fd\u4e0d\u9700\u8981\u8bbe\u7f6e\u4e3aTrue\u3002\n        :param boll word_shape: \u662f\u5426\u65b0\u589e\u4e00\u5217word shape\uff0c5\u7ef4\n        \"\"\"", "\n", "if", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "iob2", "\n", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "lambda", "words", ":", "iob2bioes", "(", "iob2", "(", "words", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "", "self", ".", "lower", "=", "lower", "\n", "self", ".", "word_shape", "=", "word_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.OntoNotesNERPipe.process": [[176, 217], ["data_bundle.datasets.items", "fastNLP.io.pipe.utils._add_words_field", "data_bundle.apply_field", "fastNLP.io.pipe.utils._indexize", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "dataset.apply_field", "data_bundle.apply_field", "data_bundle.set_input", "dataset.add_seq_len", "c.isdigit"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "\"\"\"\n        \u652f\u6301\u7684DataSet\u7684field\u4e3a\n\n        .. csv-table::\n           :header: \"raw_words\", \"target\"\n\n           \"[Nadim, Ladki]\", \"[B-PER, I-PER]\"\n           \"[AL-AIN, United, Arab, ...]\", \"[B-LOC, B-LOC, I-LOC, ...]\"\n           \"[...]\", \"[...]\"\n\n        :param ~fastNLP.DataBundle data_bundle: \u4f20\u5165\u7684DataBundle\u4e2d\u7684DataSet\u5fc5\u987b\u5305\u542braw_words\u548cner\u4e24\u4e2afield\uff0c\u4e14\u4e24\u4e2afield\u7684\u5185\u5bb9\u5747\u4e3aList[str]\u5728\u4f20\u5165DataBundle\u57fa\u7840\u4e0a\u539f\u4f4d\u4fee\u6539\u3002\n        :return DataBundle:\n        \"\"\"", "\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "convert_tag", ",", "field_name", "=", "Const", ".", "TARGET", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "\n", "if", "self", ".", "word_shape", ":", "\n", "            ", "data_bundle", ".", "apply_field", "(", "word_shape", ",", "field_name", "=", "'raw_words'", ",", "new_field_name", "=", "'word_shapes'", ")", "\n", "data_bundle", ".", "set_input", "(", "'word_shapes'", ")", "\n", "\n", "# \u5c06\u6240\u6709digit\u8f6c\u4e3a0", "\n", "", "data_bundle", ".", "apply_field", "(", "lambda", "chars", ":", "[", "''", ".", "join", "(", "[", "'0'", "if", "c", ".", "isdigit", "(", ")", "else", "c", "for", "c", "in", "char", "]", ")", "for", "char", "in", "chars", "]", ",", "\n", "field_name", "=", "Const", ".", "INPUT", ",", "new_field_name", "=", "Const", ".", "INPUT", ")", "\n", "\n", "# index", "\n", "_indexize", "(", "data_bundle", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.OntoNotesNERPipe.process_from_file": [[218, 221], ["fastNLP.io.OntoNotesNERLoader().load", "pipe.OntoNotesNERPipe.process", "fastNLP.io.OntoNotesNERLoader"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "data_bundle", "=", "OntoNotesNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.__init__": [[246, 257], ["fastNLP.io.Pipe.__init__", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bigrams", "=", "False", ",", "encoding_type", "=", "'bmeso'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bigrams", "=", "bigrams", "\n", "if", "encoding_type", "==", "'bmeso'", ":", "\n", "            ", "self", ".", "encoding_func", "=", "lambda", "x", ":", "x", "\n", "", "elif", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "encoding_func", "=", "bmeso2bio", "\n", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "encoding_func", "=", "bmeso2bioes", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Only support bio, bmeso, bioes\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process": [[258, 287], ["fastNLP.io.pipe.utils._add_chars_field", "data_bundle.apply_field", "data_bundle.apply_field", "fastNLP.io.pipe.utils._indexize", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "data_bundle.apply_field", "input_field_names.append", "dataset.add_seq_len", "zip", "c.isdigit"], "methods", ["None"], ["", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "_add_chars_field", "(", "data_bundle", ",", "lower", "=", "False", ")", "\n", "\n", "data_bundle", ".", "apply_field", "(", "self", ".", "encoding_func", ",", "field_name", "=", "Const", ".", "TARGET", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "# \u5c06\u6240\u6709digit\u8f6c\u4e3a0", "\n", "data_bundle", ".", "apply_field", "(", "lambda", "chars", ":", "[", "''", ".", "join", "(", "[", "'0'", "if", "c", ".", "isdigit", "(", ")", "else", "c", "for", "c", "in", "char", "]", ")", "for", "char", "in", "chars", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "#", "\n", "input_field_names", "=", "[", "Const", ".", "CHAR_INPUT", "]", "\n", "if", "self", ".", "bigrams", ":", "\n", "            ", "data_bundle", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'bigrams'", ")", "\n", "input_field_names", ".", "append", "(", "'bigrams'", ")", "\n", "\n", "# index", "\n", "", "_indexize", "(", "data_bundle", ",", "input_field_names", "=", "input_field_names", ",", "target_field_names", "=", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process_from_file": [[288, 293], ["fastNLP.io.utils.check_loader_paths", "fastNLP.io.ConllLoader", "fastNLP.io.ConllLoader.load", "pipe.CNNERPipe.process"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.CNNERPipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "paths", "=", "check_loader_paths", "(", "paths", ")", "\n", "loader", "=", "ConllLoader", "(", "headers", "=", "[", "'raw_chars'", ",", "'target'", "]", ")", "\n", "data_bundle", "=", "loader", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.word_shape": [[12, 29], ["all", "caps.append", "shapes.append", "char.isupper", "any", "shapes.append", "shapes.append", "any", "shapes.append", "shapes.append"], "function", ["None"], ["def", "word_shape", "(", "words", ")", ":", "\n", "    ", "shapes", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "        ", "caps", "=", "[", "]", "\n", "for", "char", "in", "word", ":", "\n", "            ", "caps", ".", "append", "(", "char", ".", "isupper", "(", ")", ")", "\n", "", "if", "all", "(", "caps", ")", ":", "\n", "            ", "shapes", ".", "append", "(", "0", ")", "\n", "", "elif", "any", "(", "caps", ")", "is", "False", ":", "\n", "            ", "shapes", ".", "append", "(", "1", ")", "\n", "", "elif", "caps", "[", "0", "]", ":", "\n", "            ", "shapes", ".", "append", "(", "2", ")", "\n", "", "elif", "any", "(", "caps", ")", ":", "\n", "            ", "shapes", ".", "append", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "shapes", ".", "append", "(", "4", ")", "\n", "", "", "return", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.bmeso2bio": [[223, 233], ["tag.lower.lower", "tag.lower.startswith", "new_tags.append", "tag.lower.startswith", "tag.lower.startswith"], "function", ["None"], ["", "", "def", "bmeso2bio", "(", "tags", ")", ":", "\n", "    ", "new_tags", "=", "[", "]", "\n", "for", "tag", "in", "tags", ":", "\n", "        ", "tag", "=", "tag", ".", "lower", "(", ")", "\n", "if", "tag", ".", "startswith", "(", "'m'", ")", "or", "tag", ".", "startswith", "(", "'e'", ")", ":", "\n", "            ", "tag", "=", "'i'", "+", "tag", "[", "1", ":", "]", "\n", "", "if", "tag", ".", "startswith", "(", "'s'", ")", ":", "\n", "            ", "tag", "=", "'b'", "+", "tag", "[", "1", ":", "]", "\n", "", "new_tags", ".", "append", "(", "tag", ")", "\n", "", "return", "new_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.pipe.bmeso2bioes": [[235, 243], ["tag.lower", "tag.lower.startswith", "new_tags.append"], "function", ["None"], ["", "def", "bmeso2bioes", "(", "tags", ")", ":", "\n", "    ", "new_tags", "=", "[", "]", "\n", "for", "tag", "in", "tags", ":", "\n", "        ", "lowered_tag", "=", "tag", ".", "lower", "(", ")", "\n", "if", "lowered_tag", ".", "startswith", "(", "'m'", ")", ":", "\n", "            ", "tag", "=", "'i'", "+", "tag", "[", "1", ":", "]", "\n", "", "new_tags", ".", "append", "(", "tag", ")", "\n", "", "return", "new_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.MultiHeadAttn.__init__": [[14, 33], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "n_head", ",", "dropout", "=", "0.1", ",", "scale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param d_model:\n        :param n_head:\n        :param scale: \u662f\u5426scale\u8f93\u51fa\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "n_head", "==", "0", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "qkv_linear", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "d_model", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "if", "scale", ":", "\n", "            ", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "d_model", "//", "n_head", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.MultiHeadAttn.forward": [[34, 59], ["transformer.MultiHeadAttn.size", "transformer.MultiHeadAttn.qkv_linear", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "q.view().transpose.view().transpose.view().transpose", "k.view().permute.view().permute.view().permute", "transformer.MultiHeadAttn.view().transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "transformer.MultiHeadAttn.masked_fill_", "torch.softmax", "torch.softmax", "transformer.MultiHeadAttn.dropout_layer", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "transformer.MultiHeadAttn.transpose().reshape", "transformer.MultiHeadAttn.fc", "q.view().transpose.view().transpose.view", "k.view().permute.view().permute.view", "transformer.MultiHeadAttn.view", "mask[].eq", "float", "transformer.MultiHeadAttn.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n\n        :param x: bsz x max_len x d_model\n        :param mask: bsz x max_len\n        :return:\n        \"\"\"", "\n", "batch_size", ",", "max_len", ",", "d_model", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "qkv_linear", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "torch", ".", "chunk", "(", "x", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "q", "=", "q", ".", "view", "(", "batch_size", ",", "max_len", ",", "self", ".", "n_head", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "k", "=", "k", ".", "view", "(", "batch_size", ",", "max_len", ",", "self", ".", "n_head", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "v", "=", "v", ".", "view", "(", "batch_size", ",", "max_len", ",", "self", ".", "n_head", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "attn", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "# batch_size x n_head x max_len x max_len", "\n", "attn", "=", "attn", "/", "self", ".", "scale", "\n", "attn", ".", "masked_fill_", "(", "mask", "=", "mask", "[", ":", ",", "None", ",", "None", "]", ".", "eq", "(", "0", ")", ",", "value", "=", "float", "(", "'-inf'", ")", ")", "\n", "\n", "attn", "=", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", "# batch_size x n_head x max_len x max_len", "\n", "attn", "=", "self", ".", "dropout_layer", "(", "attn", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "# batch_size x n_head x max_len x d_model//n_head", "\n", "v", "=", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "batch_size", ",", "max_len", ",", "-", "1", ")", "\n", "v", "=", "self", ".", "fc", "(", "v", ")", "\n", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.TransformerLayer.__init__": [[62, 86], ["torch.nn.Module.__init__", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "self_attn", ",", "feedforward_dim", ",", "after_norm", ",", "dropout", ")", ":", "\n", "        ", "\"\"\"\n\n        :param int d_model: \u4e00\u822c512\u4e4b\u7c7b\u7684\n        :param self_attn: self attention\u6a21\u5757\uff0c\u8f93\u5165\u4e3ax:batch_size x max_len x d_model, mask:batch_size x max_len, \u8f93\u51fa\u4e3a\n            batch_size x max_len x d_model\n        :param int feedforward_dim: FFN\u4e2d\u95f4\u5c42\u7684dimension\u7684\u5927\u5c0f\n        :param bool after_norm: norm\u7684\u4f4d\u7f6e\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u4e3aFalse\uff0c\u5219embedding\u53ef\u4ee5\u76f4\u63a5\u8fde\u5230\u8f93\u51fa\n        :param float dropout: \u4e00\u5171\u4e09\u4e2a\u4f4d\u7f6e\u7684dropout\u7684\u5927\u5c0f\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "\n", "self", ".", "after_norm", "=", "after_norm", "\n", "\n", "self", ".", "ffn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "d_model", ",", "feedforward_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "feedforward_dim", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.TransformerLayer.forward": [[87, 110], ["transformer.TransformerLayer.self_attn", "transformer.TransformerLayer.ffn", "transformer.TransformerLayer.norm1", "transformer.TransformerLayer.norm1", "transformer.TransformerLayer.norm2", "transformer.TransformerLayer.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n\n        :param x: batch_size x max_len x hidden_size\n        :param mask: batch_size x max_len, \u4e3a0\u7684\u5730\u65b9\u4e3apad\n        :return: batch_size x max_len x hidden_size\n        \"\"\"", "\n", "residual", "=", "x", "\n", "if", "not", "self", ".", "after_norm", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "self_attn", "(", "x", ",", "mask", ")", "\n", "x", "=", "x", "+", "residual", "\n", "if", "self", ".", "after_norm", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "residual", "=", "x", "\n", "if", "not", "self", ".", "after_norm", ":", "\n", "            ", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "ffn", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "if", "self", ".", "after_norm", ":", "\n", "            ", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.TransformerEncoder.__init__": [[113, 134], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "transformer.MultiHeadAttn", "transformer.SinusoidalPositionalEmbedding", "relative_transformer.RelativeMultiHeadAttn", "transformer.TransformerLayer", "transformer.LearnedPositionalEmbedding", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "d_model", ",", "n_head", ",", "feedforward_dim", ",", "dropout", ",", "after_norm", "=", "True", ",", "attn_type", "=", "'naive'", ",", "\n", "scale", "=", "False", ",", "dropout_attn", "=", "None", ",", "pos_embed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "dropout_attn", "is", "None", ":", "\n", "            ", "dropout_attn", "=", "dropout", "\n", "", "self", ".", "d_model", "=", "d_model", "\n", "\n", "if", "pos_embed", "is", "None", ":", "\n", "            ", "self", ".", "pos_embed", "=", "None", "\n", "", "elif", "pos_embed", "==", "'sin'", ":", "\n", "            ", "self", ".", "pos_embed", "=", "SinusoidalPositionalEmbedding", "(", "d_model", ",", "0", ",", "init_size", "=", "1024", ")", "\n", "", "elif", "pos_embed", "==", "'fix'", ":", "\n", "            ", "self", ".", "pos_embed", "=", "LearnedPositionalEmbedding", "(", "1024", ",", "d_model", ",", "0", ")", "\n", "\n", "", "if", "attn_type", "==", "'transformer'", ":", "\n", "            ", "self_attn", "=", "MultiHeadAttn", "(", "d_model", ",", "n_head", ",", "dropout_attn", ",", "scale", "=", "scale", ")", "\n", "", "elif", "attn_type", "==", "'adatrans'", ":", "\n", "            ", "self_attn", "=", "RelativeMultiHeadAttn", "(", "d_model", ",", "n_head", ",", "dropout_attn", ",", "scale", "=", "scale", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "TransformerLayer", "(", "d_model", ",", "deepcopy", "(", "self_attn", ")", ",", "feedforward_dim", ",", "after_norm", ",", "dropout", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.TransformerEncoder.forward": [[135, 148], ["layer", "transformer.TransformerEncoder.pos_embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n\n        :param x: batch_size x max_len\n        :param mask: batch_size x max_len. \u6709value\u7684\u5730\u65b9\u4e3a1\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "pos_embed", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "pos_embed", "(", "mask", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.__init__": [[169, 179], ["torch.nn.Module.__init__", "transformer.SinusoidalPositionalEmbedding.get_embedding", "transformer.SinusoidalPositionalEmbedding.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__", "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.get_embedding"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "padding_idx", ",", "init_size", "=", "1568", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "self", ".", "weights", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "init_size", ",", "\n", "embedding_dim", ",", "\n", "padding_idx", ",", "\n", ")", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.get_embedding": [[180, 197], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "math.log", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build sinusoidal embeddings.\n        This matches the implementation in tensor2tensor, but differs slightly\n        from the description in Section 3.5 of \"Attention Is All You Need\".\n        \"\"\"", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "emb", "=", "math", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "dtype", "=", "torch", ".", "float", ")", "*", "-", "emb", ")", "\n", "emb", "=", "torch", ".", "arange", "(", "num_embeddings", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "*", "emb", ".", "unsqueeze", "(", "0", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "emb", ")", ",", "torch", ".", "cos", "(", "emb", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "num_embeddings", ",", "-", "1", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "\n", "# zero pad", "\n", "            ", "emb", "=", "torch", ".", "cat", "(", "[", "emb", ",", "torch", ".", "zeros", "(", "num_embeddings", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "emb", "[", "padding_idx", ",", ":", "]", "=", "0", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.forward": [[198, 213], ["input.size", "transformer.SinusoidalPositionalEmbedding.weights.to", "transformer.make_positions", "transformer.SinusoidalPositionalEmbedding.weights.index_select().view().detach", "transformer.SinusoidalPositionalEmbedding.weights.size", "transformer.SinusoidalPositionalEmbedding.get_embedding", "transformer.SinusoidalPositionalEmbedding.weights.index_select().view", "transformer.SinusoidalPositionalEmbedding.weights.index_select", "make_positions.view"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.make_positions", "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.get_embedding"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\"\"\"", "\n", "bsz", ",", "seq_len", "=", "input", ".", "size", "(", ")", "\n", "max_pos", "=", "self", ".", "padding_idx", "+", "1", "+", "seq_len", "\n", "if", "max_pos", ">", "self", ".", "weights", ".", "size", "(", "0", ")", ":", "\n", "# recompute/expand embeddings if needed", "\n", "            ", "self", ".", "weights", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "max_pos", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", ")", "\n", "", "self", ".", "weights", "=", "self", ".", "weights", ".", "to", "(", "self", ".", "_float_tensor", ")", "\n", "\n", "positions", "=", "make_positions", "(", "input", ",", "self", ".", "padding_idx", ")", "\n", "return", "self", ".", "weights", ".", "index_select", "(", "0", ",", "positions", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "bsz", ",", "seq_len", ",", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.SinusoidalPositionalEmbedding.max_positions": [[214, 217], ["int"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum number of supported positions.\"\"\"", "\n", "return", "int", "(", "1e5", ")", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.LearnedPositionalEmbedding.__init__": [[227, 234], ["torch.nn.Embedding.__init__"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_embeddings", ":", "int", ",", "\n", "embedding_dim", ":", "int", ",", "\n", "padding_idx", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.LearnedPositionalEmbedding.forward": [[235, 239], ["transformer.make_positions", "super().forward"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.make_positions", "home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# positions: batch_size x max_len, \u628awords\u7684index\u8f93\u5165\u5c31\u597d\u4e86", "\n", "        ", "positions", "=", "make_positions", "(", "input", ",", "self", ".", "padding_idx", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "positions", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.transformer.make_positions": [[150, 162], ["tensor.ne().int", "tensor.ne", "torch.cumsum().type_as", "torch.cumsum().type_as", "torch.cumsum", "torch.cumsum"], "function", ["None"], ["", "", "def", "make_positions", "(", "tensor", ",", "padding_idx", ")", ":", "\n", "    ", "\"\"\"Replace non-padding symbols with their position numbers.\n    Position numbers begin at padding_idx+1. Padding symbols are ignored.\n    \"\"\"", "\n", "# The series of casts and type-conversions here are carefully", "\n", "# balanced to both work with ONNX export and XLA. In particular XLA", "\n", "# prefers ints, cumsum defaults to output longs, and ONNX doesn't know", "\n", "# how to handle the dtype kwarg in cumsum.", "\n", "mask", "=", "tensor", ".", "ne", "(", "padding_idx", ")", ".", "int", "(", ")", "\n", "return", "(", "\n", "torch", ".", "cumsum", "(", "mask", ",", "dim", "=", "1", ")", ".", "type_as", "(", "mask", ")", "*", "mask", "\n", ")", ".", "long", "(", ")", "+", "padding_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.callbacks.EvaluateCallback.__init__": [[11, 46], ["fastNLP.Callback.__init__", "isinstance", "isinstance", "isinstance", "callbacks.EvaluateCallback.testers.values", "data.items", "data.items", "isinstance", "tester.items", "setattr", "isinstance", "TypeError", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "tester", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param ~fastNLP.DataSet,Dict[~fastNLP.DataSet] data: \u4f20\u5165DataSet\u5bf9\u8c61\uff0c\u4f1a\u4f7f\u7528Trainer\u4e2d\u7684metric\u5bf9\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u9700\u8981\u4f20\u5165\u591a\u4e2a\n            DataSet\u8bf7\u901a\u8fc7dict\u7684\u65b9\u5f0f\u4f20\u5165\u3002\n        :param ~fastNLP.Tester,Dict[~fastNLP.DataSet] tester: Tester\u5bf9\u8c61, \u901a\u8fc7\u4f7f\u7528Tester\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u5f97\u9a8c\u8bc1\u7684metric\u4e0eTrainer\u4e2d\n            \u7684metric\u4e0d\u4e00\u6837\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "self", ".", "testers", "=", "{", "}", "\n", "self", ".", "best_test_metric_sofar", "=", "0", "\n", "self", ".", "best_test_sofar", "=", "None", "\n", "self", ".", "best_test_epoch", "=", "0", "\n", "self", ".", "best_dev_test", "=", "None", "\n", "self", ".", "best_dev_epoch", "=", "0", "\n", "if", "tester", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "tester", ",", "dict", ")", ":", "\n", "                ", "for", "name", ",", "test", "in", "tester", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "isinstance", "(", "test", ",", "Tester", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "f\"{name} in tester is not a valid fastNLP.Tester.\"", ")", "\n", "", "self", ".", "testers", "[", "'tester-'", "+", "name", "]", "=", "test", "\n", "", "", "if", "isinstance", "(", "tester", ",", "Tester", ")", ":", "\n", "                ", "self", ".", "testers", "[", "'tester-test'", "]", "=", "tester", "\n", "", "for", "tester", "in", "self", ".", "testers", ".", "values", "(", ")", ":", "\n", "                ", "setattr", "(", "tester", ",", "'verbose'", ",", "0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "DataSet", ")", ",", "f\"Only DataSet object is allowed, not {type(value)}.\"", "\n", "", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "datasets", "[", "'data-'", "+", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "data", ",", "DataSet", ")", ":", "\n", "            ", "self", ".", "datasets", "[", "'data-test'", "]", "=", "data", "\n", "", "elif", "data", "is", "not", "None", ":", "\n", "            ", "raise", "TypeError", "(", "\"data receives dict[DataSet] or DataSet object.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.callbacks.EvaluateCallback.on_train_begin": [[47, 58], ["RuntimeError", "len", "callbacks.EvaluateCallback.datasets.items", "len", "fastNLP.Tester", "callbacks.EvaluateCallback.trainer.kwargs.get"], "methods", ["None"], ["", "", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "datasets", ")", ">", "0", "and", "self", ".", "trainer", ".", "dev_data", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Trainer has no dev data, you cannot pass extra DataSet to do evaluation.\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "datasets", ")", ">", "0", ":", "\n", "            ", "for", "key", ",", "data", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "tester", "=", "Tester", "(", "data", "=", "data", ",", "model", "=", "self", ".", "model", ",", "\n", "batch_size", "=", "self", ".", "trainer", ".", "kwargs", ".", "get", "(", "'dev_batch_size'", ",", "self", ".", "batch_size", ")", ",", "\n", "metrics", "=", "self", ".", "trainer", ".", "metrics", ",", "verbose", "=", "0", ",", "\n", "use_tqdm", "=", "self", ".", "trainer", ".", "test_use_tqdm", ")", "\n", "self", ".", "testers", "[", "key", "]", "=", "tester", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.callbacks.EvaluateCallback.on_valid_end": [[59, 78], ["len", "enumerate", "callbacks.EvaluateCallback.testers.items", "tester.test", "callbacks.EvaluateCallback.logger.info", "callbacks.EvaluateCallback.logger.info", "callbacks._check_eval_results", "tester._format_eval_results", "callbacks.EvaluateCallback.logger.error"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.modules.callbacks._check_eval_results"], ["", "", "", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "better_result", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "testers", ")", ">", "0", ":", "\n", "            ", "for", "idx", ",", "(", "key", ",", "tester", ")", "in", "enumerate", "(", "self", ".", "testers", ".", "items", "(", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "eval_result", "=", "tester", ".", "test", "(", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                        ", "indicator", ",", "indicator_val", "=", "_check_eval_results", "(", "eval_result", ")", "\n", "if", "indicator_val", ">", "self", ".", "best_test_metric_sofar", ":", "\n", "                            ", "self", ".", "best_test_metric_sofar", "=", "indicator_val", "\n", "self", ".", "best_test_epoch", "=", "self", ".", "epoch", "\n", "self", ".", "best_test_sofar", "=", "eval_result", "\n", "", "", "if", "better_result", ":", "\n", "                        ", "self", ".", "best_dev_test", "=", "eval_result", "\n", "self", ".", "best_dev_epoch", "=", "self", ".", "epoch", "\n", "", "self", ".", "logger", ".", "info", "(", "\"EvaluateCallback evaluation on {}:\"", ".", "format", "(", "key", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "tester", ".", "_format_eval_results", "(", "eval_result", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "logger", ".", "error", "(", "\"Exception happens when evaluate on DataSet named `{}`.\"", ".", "format", "(", "key", ")", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.callbacks.EvaluateCallback.on_train_end": [[79, 84], ["callbacks.EvaluateCallback.logger.info", "callbacks.EvaluateCallback.logger.info"], "methods", ["None"], ["", "", "", "", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "best_test_sofar", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Best test performance(may not correspond to the best dev performance):{} achieved at Epoch:{}.\"", ".", "format", "(", "self", ".", "best_test_sofar", ",", "self", ".", "best_test_epoch", ")", ")", "\n", "", "if", "self", ".", "best_dev_test", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Best test performance(correspond to the best dev performance):{} achieved at Epoch:{}.\"", ".", "format", "(", "self", ".", "best_dev_test", ",", "self", ".", "best_dev_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.callbacks._check_eval_results": [[86, 106], ["isinstance", "isinstance", "RuntimeError", "list", "metrics.values", "RuntimeError", "type", "list", "list", "metric_dict.values", "metric_dict.keys"], "function", ["None"], ["", "", "", "def", "_check_eval_results", "(", "metrics", ",", "metric_key", "=", "None", ")", ":", "\n", "# metrics: tester\u8fd4\u56de\u7684\u7ed3\u679c", "\n", "# metric_key: \u4e00\u4e2a\u7528\u6765\u505a\u7b5b\u9009\u7684\u6307\u6807\uff0c\u6765\u81eaTrainer\u7684\u521d\u59cb\u5316", "\n", "    ", "if", "isinstance", "(", "metrics", ",", "tuple", ")", ":", "\n", "        ", "loss", ",", "metrics", "=", "metrics", "\n", "\n", "", "if", "isinstance", "(", "metrics", ",", "dict", ")", ":", "\n", "        ", "metric_dict", "=", "list", "(", "metrics", ".", "values", "(", ")", ")", "[", "0", "]", "# \u53d6\u7b2c\u4e00\u4e2ametric", "\n", "\n", "if", "metric_key", "is", "None", ":", "\n", "            ", "indicator_val", ",", "indicator", "=", "list", "(", "metric_dict", ".", "values", "(", ")", ")", "[", "0", "]", ",", "list", "(", "metric_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# metric_key is set", "\n", "            ", "if", "metric_key", "not", "in", "metric_dict", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"metric key {metric_key} not found in {metric_dict}\"", ")", "\n", "", "indicator_val", "=", "metric_dict", "[", "metric_key", "]", "\n", "indicator", "=", "metric_key", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Invalid metrics type. Expect {}, got {}\"", ".", "format", "(", "(", "tuple", ",", "dict", ")", ",", "type", "(", "metrics", ")", ")", ")", "\n", "", "return", "indicator", ",", "indicator_val", "", "", ""]], "home.repos.pwc.inspect_result.fastnlp_TENER.modules.utils.set_rng_seed": [[4, 37], ["int", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "time.time"], "function", ["None"], ["def", "set_rng_seed", "(", "rng_seed", ":", "int", "=", "None", ",", "random", ":", "bool", "=", "True", ",", "numpy", ":", "bool", "=", "True", ",", "\n", "pytorch", ":", "bool", "=", "True", ",", "deterministic", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    \u8bbe\u7f6e\u6a21\u5757\u7684\u968f\u673a\u6570\u79cd\u5b50\u3002\u7531\u4e8epytorch\u8fd8\u5b58\u5728cudnn\u5bfc\u81f4\u7684\u975edeterministic\u7684\u8fd0\u884c\uff0c\u6240\u4ee5\u4e00\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u5373\u4f7fseed\u4e00\u6837\uff0c\u7ed3\u679c\u4e5f\u4e0d\u4e00\u81f4\n        \u9700\u8981\u5728fitlog.commit()\u6216fitlog.set_log_dir()\u4e4b\u540e\u8fd0\u884c\u624d\u4f1a\u8bb0\u5f55\u8be5rng_seed\u5230log\u4e2d\n    :param int rng_seed: \u5c06\u8fd9\u4e9b\u6a21\u5757\u7684\u968f\u673a\u6570\u8bbe\u7f6e\u5230\u591a\u5c11\uff0c\u9ed8\u8ba4\u4e3a\u968f\u673a\u751f\u6210\u4e00\u4e2a\u3002\n    :param bool, random: \u662f\u5426\u5c06python\u81ea\u5e26\u7684random\u6a21\u5757\u7684seed\u8bbe\u7f6e\u4e3arng_seed.\n    :param bool, numpy: \u662f\u5426\u5c06numpy\u7684seed\u8bbe\u7f6e\u4e3arng_seed.\n    :param bool, pytorch: \u662f\u5426\u5c06pytorch\u7684seed\u8bbe\u7f6e\u4e3arng_seed(\u8bbe\u7f6etorch.manual_seed\u548ctorch.cuda.manual_seed_all).\n    :param bool, deterministic: \u662f\u5426\u5c06pytorch\u7684torch.backends.cudnn.deterministic\u8bbe\u7f6e\u4e3aTrue\n    \"\"\"", "\n", "if", "rng_seed", "is", "None", ":", "\n", "        ", "import", "time", "\n", "rng_seed", "=", "int", "(", "time", ".", "time", "(", ")", "%", "1000000", ")", "\n", "", "if", "random", ":", "\n", "        ", "import", "random", "\n", "random", ".", "seed", "(", "rng_seed", ")", "\n", "", "if", "numpy", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "numpy", "\n", "numpy", ".", "random", ".", "seed", "(", "rng_seed", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "if", "pytorch", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "torch", "\n", "torch", ".", "manual_seed", "(", "rng_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rng_seed", ")", "\n", "if", "deterministic", ":", "\n", "                ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "return", "rng_seed", "", "", ""]], "home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__": [[12, 50], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "modules.transformer.TransformerEncoder", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "fastNLP.modules.allowed_transitions", "fastNLP.modules.ConditionalRandomField", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tag_vocab", ",", "embed", ",", "num_layers", ",", "d_model", ",", "n_head", ",", "feedforward_dim", ",", "dropout", ",", "\n", "after_norm", "=", "True", ",", "attn_type", "=", "'adatrans'", ",", "bi_embed", "=", "None", ",", "\n", "fc_dropout", "=", "0.3", ",", "pos_embed", "=", "None", ",", "scale", "=", "False", ",", "dropout_attn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param tag_vocab: fastNLP Vocabulary\n        :param embed: fastNLP TokenEmbedding\n        :param num_layers: number of self-attention layers\n        :param d_model: input size\n        :param n_head: number of head\n        :param feedforward_dim: the dimension of ffn\n        :param dropout: dropout in self-attention\n        :param after_norm: normalization place\n        :param attn_type: adatrans, naive\n        :param rel_pos_embed: position embedding\u7684\u7c7b\u578b\uff0c\u652f\u6301sin, fix, None. relative\u65f6\u53ef\u4e3aNone\n        :param bi_embed: Used in Chinese scenerio\n        :param fc_dropout: dropout rate before the fc layer\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed", "=", "embed", "\n", "embed_size", "=", "self", ".", "embed", ".", "embed_size", "\n", "self", ".", "bi_embed", "=", "None", "\n", "if", "bi_embed", "is", "not", "None", ":", "\n", "            ", "self", ".", "bi_embed", "=", "bi_embed", "\n", "embed_size", "+=", "self", ".", "bi_embed", ".", "embed_size", "\n", "\n", "", "self", ".", "in_fc", "=", "nn", ".", "Linear", "(", "embed_size", ",", "d_model", ")", "\n", "\n", "self", ".", "transformer", "=", "TransformerEncoder", "(", "num_layers", ",", "d_model", ",", "n_head", ",", "feedforward_dim", ",", "dropout", ",", "\n", "after_norm", "=", "after_norm", ",", "attn_type", "=", "attn_type", ",", "\n", "scale", "=", "scale", ",", "dropout_attn", "=", "dropout_attn", ",", "\n", "pos_embed", "=", "pos_embed", ")", "\n", "self", ".", "fc_dropout", "=", "nn", ".", "Dropout", "(", "fc_dropout", ")", "\n", "self", ".", "out_fc", "=", "nn", ".", "Linear", "(", "d_model", ",", "len", "(", "tag_vocab", ")", ")", "\n", "\n", "trans", "=", "allowed_transitions", "(", "tag_vocab", ",", "include_start_end", "=", "True", ")", "\n", "self", ".", "crf", "=", "ConditionalRandomField", "(", "len", "(", "tag_vocab", ")", ",", "include_start_end_trans", "=", "True", ",", "allowed_transitions", "=", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER._forward": [[51, 69], ["torch.cat.ne", "torch.cat.ne", "TENER.TENER.embed", "TENER.TENER.in_fc", "TENER.TENER.transformer", "TENER.TENER.fc_dropout", "TENER.TENER.out_fc", "torch.log_softmax", "torch.log_softmax", "TENER.TENER.bi_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TENER.TENER.crf.viterbi_decode", "TENER.TENER.crf"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "chars", ",", "target", ",", "bigrams", "=", "None", ")", ":", "\n", "        ", "mask", "=", "chars", ".", "ne", "(", "0", ")", "\n", "chars", "=", "self", ".", "embed", "(", "chars", ")", "\n", "if", "self", ".", "bi_embed", "is", "not", "None", ":", "\n", "            ", "bigrams", "=", "self", ".", "bi_embed", "(", "bigrams", ")", "\n", "chars", "=", "torch", ".", "cat", "(", "[", "chars", ",", "bigrams", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "chars", "=", "self", ".", "in_fc", "(", "chars", ")", "\n", "chars", "=", "self", ".", "transformer", "(", "chars", ",", "mask", ")", "\n", "chars", "=", "self", ".", "fc_dropout", "(", "chars", ")", "\n", "chars", "=", "self", ".", "out_fc", "(", "chars", ")", "\n", "logits", "=", "F", ".", "log_softmax", "(", "chars", ",", "dim", "=", "-", "1", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "paths", ",", "_", "=", "self", ".", "crf", ".", "viterbi_decode", "(", "logits", ",", "mask", ")", "\n", "return", "{", "'pred'", ":", "paths", "}", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "crf", "(", "logits", ",", "target", ",", "mask", ")", "\n", "return", "{", "'loss'", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.forward": [[70, 72], ["TENER.TENER._forward"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER._forward"], ["", "", "def", "forward", "(", "self", ",", "chars", ",", "target", ",", "bigrams", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "_forward", "(", "chars", ",", "target", ",", "bigrams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER.predict": [[73, 75], ["TENER.TENER._forward"], "methods", ["home.repos.pwc.inspect_result.fastnlp_TENER.models.TENER.TENER._forward"], ["", "def", "predict", "(", "self", ",", "chars", ",", "bigrams", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "_forward", "(", "chars", ",", "target", "=", "None", ",", "bigrams", "=", "bigrams", ")", "\n", "", "", ""]]}