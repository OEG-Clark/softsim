{"home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncMeanCov.forward": [[11, 35], ["in_data.size", "ctx.save_for_backward", "in_data.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "running_mean.mul_", "running_mean.add_", "running_cov.mul_", "running_cov.add_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "in_data_bn.transpose"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "in_data", ",", "running_mean", ",", "running_cov", ",", "momentum", ",", "training", ")", ":", "\n", "        ", "g", ",", "c", ",", "NHW", "=", "in_data", ".", "size", "(", ")", "\n", "ctx", ".", "g", "=", "g", "\n", "ctx", ".", "c", "=", "c", "\n", "ctx", ".", "NHW", "=", "NHW", "\n", "ctx", ".", "training", "=", "training", "\n", "\n", "if", "training", ":", "\n", "            ", "mean_bn", "=", "in_data", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "# g x c x 1", "\n", "in_data_bn", "=", "in_data", "-", "mean_bn", "\n", "cov_bn", "=", "torch", ".", "bmm", "(", "in_data_bn", ",", "in_data_bn", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "NHW", ")", "\n", "\n", "\n", "running_mean", ".", "mul_", "(", "momentum", ")", "\n", "running_mean", ".", "add_", "(", "(", "1", "-", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "running_cov", ".", "mul_", "(", "momentum", ")", "\n", "running_cov", ".", "add_", "(", "(", "1", "-", "momentum", ")", "*", "cov_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "running_mean", ")", "\n", "cov_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "running_cov", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "in_data", ".", "data", ",", "mean_bn", ".", "data", ")", "\n", "return", "mean_bn", ",", "cov_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncMeanCov.backward": [[36, 52], ["grad_cov_out.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_mean_out", ",", "grad_cov_out", ")", ":", "\n", "        ", "in_data", ",", "mean_bn", "=", "ctx", ".", "saved_tensors", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "world_size", "=", "1", "\n", "", "else", ":", "\n", "            ", "world_size", "=", "1", "\n", "\n", "", "grad_cov_out", "=", "(", "grad_cov_out", "+", "grad_cov_out", ".", "transpose", "(", "1", ",", "2", ")", ")", "/", "2", "\n", "grad_cov_in", "=", "2", "*", "torch", ".", "bmm", "(", "grad_cov_out", ",", "(", "in_data", "-", "mean_bn", ")", ")", "/", "(", "ctx", ".", "NHW", "*", "world_size", ")", "# g x c x (N x H x W)", "\n", "\n", "grad_mean_in", "=", "grad_mean_out", "/", "ctx", ".", "NHW", "/", "world_size", "\n", "inDiff", "=", "grad_mean_in", "+", "grad_cov_in", "\n", "return", "inDiff", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncSwitchWhiten2d.__init__": [[69, 115], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_buffer", "sync_switchwhiten.SyncSwitchWhiten2d.register_buffer", "sync_switchwhiten.SyncSwitchWhiten2d.reset_parameters", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_parameter", "sync_switchwhiten.SyncSwitchWhiten2d.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.SwithWhiten.SwitchWhiten2d.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "num_features", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SyncSwitchWhiten2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "sw_type", "not", "in", "[", "2", ",", "3", ",", "4", ",", "5", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'sw_type should be in [2, 3, 4, 5], '", "\n", "'but got {}'", ".", "format", "(", "sw_type", ")", ")", "\n", "", "assert", "num_features", "%", "num_pergroup", "==", "0", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_pergroup", "=", "num_pergroup", "\n", "self", ".", "num_groups", "=", "num_features", "//", "num_pergroup", "\n", "self", ".", "sw_type", "=", "sw_type", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "affine", "=", "affine", "\n", "num_components", "=", "sw_type", "\n", "\n", "self", ".", "sw_mean_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "self", ".", "sw_var_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'sw_var_weight'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "\n", "torch", ".", "zeros", "(", "self", ".", "num_groups", ",", "num_pergroup", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'running_cov'", ",", "\n", "torch", ".", "eye", "(", "num_pergroup", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "num_groups", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncSwitchWhiten2d.reset_parameters": [[116, 125], ["sync_switchwhiten.SyncSwitchWhiten2d.running_mean.zero_", "sync_switchwhiten.SyncSwitchWhiten2d.running_cov.zero_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_cov", ".", "zero_", "(", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_var_weight", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncSwitchWhiten2d.__repr__": [[126, 131], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({num_features}, num_pergroup={num_pergroup}, '", "\n", "'sw_type={sw_type}, T={T}, tie_weight={tie_weight}, '", "\n", "'eps={eps}, momentum={momentum}, affine={affine})'", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncSwitchWhiten2d.forward": [[132, 219], ["x.view.view.size", "x.view.view.transpose().contiguous", "in_data_t.view.view.view", "SyncMeanCov.apply", "mean_bn.view.view.view().expand().contiguous", "mean_bn.view.view.view", "cov_bn.view.view.view().expand().contiguous", "cov_bn.view.view.view", "x.view.view.view", "x.view.view.data.new().resize_", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "x.view.view.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "cov.size", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "range", "torch.baddbmm.mul_", "torch.baddbmm.mul_", "torch.baddbmm.mul_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_hat.view.view.view", "x.view.view.view", "x.view.view.mean().view", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "x.view.view.var().view", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.Softmax.", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "rTr.sqrt", "x.view.view.transpose", "mean_bn.view.view.view().expand", "cov_bn.view.view.view().expand", "x.view.view.data.new", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "sync_switchwhiten.SyncSwitchWhiten2d.bias.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x.view.view.mean", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "x.view.view.var", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "sync_switchwhiten.SyncSwitchWhiten2d.weight.view", "mean_bn.view.view.view", "cov_bn.view.view.view", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand", "var_ln.expand().contiguous().view.expand().contiguous().view.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "c", ",", "g", "=", "self", ".", "num_pergroup", ",", "self", ".", "num_groups", "\n", "\n", "in_data_t", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# g x c x (N x H x W)", "\n", "in_data_t", "=", "in_data_t", ".", "view", "(", "g", ",", "c", ",", "-", "1", ")", "\n", "# calculate batch mean and covariance", "\n", "mean_bn", ",", "cov_bn", "=", "SyncMeanCov", ".", "apply", "(", "in_data_t", ",", "self", ".", "running_mean", ",", "\n", "self", ".", "running_cov", ",", "self", ".", "momentum", ",", "\n", "self", ".", "training", ")", "\n", "\n", "mean_bn", "=", "mean_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "1", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "mean_bn", "=", "mean_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "1", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "c", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "c", ")", ".", "contiguous", "(", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# (N x g) x c x (H x W)", "\n", "in_data", "=", "x", ".", "view", "(", "N", "*", "g", ",", "c", ",", "-", "1", ")", "\n", "\n", "eye", "=", "in_data", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "c", ",", "c", ")", "\n", "eye", "=", "torch", ".", "nn", ".", "init", ".", "eye_", "(", "eye", ")", ".", "view", "(", "1", ",", "c", ",", "c", ")", ".", "expand", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# calculate other statistics", "\n", "# (N x g) x c x 1", "\n", "mean_in", "=", "in_data", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x_in", "=", "in_data", "-", "mean_in", "\n", "# (N x g) x c x c", "\n", "cov_in", "=", "torch", ".", "bmm", "(", "x_in", ",", "torch", ".", "transpose", "(", "x_in", ",", "1", ",", "2", ")", ")", ".", "div", "(", "H", "*", "W", ")", "\n", "if", "self", ".", "sw_type", "in", "[", "3", ",", "5", "]", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "mean_ln", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "mean_ln", "=", "mean_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", "*", "eye", "\n", "", "if", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "var_bn", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_bn", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "var_in", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_in", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "\n", "# calculate weighted average of mean and covariance", "\n", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "var_weight", "=", "softmax", "(", "self", ".", "sw_var_weight", ")", "\n", "", "else", ":", "\n", "            ", "var_weight", "=", "mean_weight", "\n", "\n", "# BW + IW", "\n", "", "if", "self", ".", "sw_type", "==", "2", ":", "\n", "# (N x g) x c x 1", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "3", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "+", "mean_weight", "[", "2", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "2", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + BN + IN + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "mean", "=", "(", "mean_weight", "[", "0", "]", "+", "mean_weight", "[", "2", "]", ")", "*", "mean_bn", "+", "(", "mean_weight", "[", "1", "]", "+", "mean_weight", "[", "3", "]", ")", "*", "mean_in", "+", "mean_weight", "[", "4", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "0", "]", "*", "var_bn", "+", "var_weight", "[", "1", "]", "*", "var_in", "+", "var_weight", "[", "4", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "\n", "# perform whitening using Newton's iteration", "\n", "", "Ng", ",", "c", ",", "_", "=", "cov", ".", "size", "(", ")", "\n", "P", "=", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "cov", ")", ".", "expand", "(", "Ng", ",", "c", ",", "c", ")", "\n", "# reciprocal of trace of covariance", "\n", "rTr", "=", "(", "cov", "*", "P", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", ".", "reciprocal_", "(", ")", "\n", "cov_N", "=", "cov", "*", "rTr", "\n", "for", "k", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "P", "=", "torch", ".", "baddbmm", "(", "1.5", ",", "P", ",", "-", "0.5", ",", "torch", ".", "matrix_power", "(", "P", ",", "3", ")", ",", "cov_N", ")", "\n", "# whiten matrix: the matrix inverse of covariance, i.e., cov^{-1/2}", "\n", "", "wm", "=", "P", ".", "mul_", "(", "rTr", ".", "sqrt", "(", ")", ")", "\n", "\n", "x_hat", "=", "torch", ".", "bmm", "(", "wm", ",", "in_data", "-", "mean", ")", "\n", "x_hat", "=", "x_hat", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "x_hat", "=", "x_hat", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.__init__": [[15, 20], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", ")", "*", "2", ")", "\n", "self", ".", "ignore_index", "=", "None", "\n", "self", ".", "synthia", "=", "True", "if", "num_class", "==", "16", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Pixel_Accuracy": [[22, 30], ["numpy.sum", "print", "numpy.diag().sum", "eval.Eval.confusion_matrix.sum", "numpy.diag"], "methods", ["None"], ["", "def", "Pixel_Accuracy", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Attention: pixel_total is zero!!!\"", ")", "\n", "PA", "=", "0", "\n", "", "else", ":", "\n", "            ", "PA", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ".", "sum", "(", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", ")", "\n", "\n", "", "return", "PA", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Pixel_Accuracy": [[31, 44], ["numpy.nanmean", "numpy.diag", "eval.Eval.confusion_matrix.sum", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean"], "methods", ["None"], ["", "def", "Mean_Pixel_Accuracy", "(", "self", ",", "out_16_13", "=", "False", ")", ":", "\n", "        ", "MPA", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", "axis", "=", "1", ")", "\n", "if", "self", ".", "synthia", ":", "\n", "            ", "MPA_16", "=", "np", ".", "nanmean", "(", "MPA", "[", ":", "self", ".", "ignore_index", "]", ")", "\n", "MPA_13", "=", "np", ".", "nanmean", "(", "MPA", "[", "synthia_set_16_to_13", "]", ")", "\n", "return", "MPA_16", ",", "MPA_13", "\n", "", "if", "out_16_13", ":", "\n", "            ", "MPA_16", "=", "np", ".", "nanmean", "(", "MPA", "[", "synthia_set_16", "]", ")", "\n", "MPA_13", "=", "np", ".", "nanmean", "(", "MPA", "[", "synthia_set_13", "]", ")", "\n", "return", "MPA_16", ",", "MPA_13", "\n", "", "MPA", "=", "np", ".", "nanmean", "(", "MPA", "[", ":", "self", ".", "ignore_index", "]", ")", "\n", "\n", "return", "MPA", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Intersection_over_Union": [[45, 60], ["numpy.nanmean", "numpy.diag", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "Mean_Intersection_over_Union", "(", "self", ",", "out_16_13", "=", "False", ")", ":", "\n", "        ", "MIoU", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "(", "\n", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "+", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "-", "\n", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ")", "\n", "if", "self", ".", "synthia", ":", "\n", "            ", "MIoU_16", "=", "np", ".", "nanmean", "(", "MIoU", "[", ":", "self", ".", "ignore_index", "]", ")", "\n", "MIoU_13", "=", "np", ".", "nanmean", "(", "MIoU", "[", "synthia_set_16_to_13", "]", ")", "\n", "return", "MIoU_16", ",", "MIoU_13", "\n", "", "if", "out_16_13", ":", "\n", "            ", "MIoU_16", "=", "np", ".", "nanmean", "(", "MIoU", "[", "synthia_set_16", "]", ")", "\n", "MIoU_13", "=", "np", ".", "nanmean", "(", "MIoU", "[", "synthia_set_13", "]", ")", "\n", "return", "MIoU_16", ",", "MIoU_13", "\n", "", "MIoU", "=", "np", ".", "nanmean", "(", "MIoU", "[", ":", "self", ".", "ignore_index", "]", ")", "\n", "\n", "return", "MIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Frequency_Weighted_Intersection_over_Union": [[61, 76], ["numpy.multiply", "numpy.sum", "numpy.diag", "numpy.sum", "numpy.sum", "numpy.diag", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan"], "methods", ["None"], ["", "def", "Frequency_Weighted_Intersection_over_Union", "(", "self", ",", "out_16_13", "=", "False", ")", ":", "\n", "        ", "FWIoU", "=", "np", ".", "multiply", "(", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", ",", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ")", "\n", "FWIoU", "=", "FWIoU", "/", "(", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "+", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "-", "\n", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ")", "\n", "if", "self", ".", "synthia", ":", "\n", "            ", "FWIoU_16", "=", "np", ".", "sum", "(", "i", "for", "i", "in", "FWIoU", "if", "not", "np", ".", "isnan", "(", "i", ")", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "FWIoU_13", "=", "np", ".", "sum", "(", "i", "for", "i", "in", "FWIoU", "[", "synthia_set_16_to_13", "]", "if", "not", "np", ".", "isnan", "(", "i", ")", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "return", "FWIoU_16", ",", "FWIoU_13", "\n", "", "if", "out_16_13", ":", "\n", "            ", "FWIoU_16", "=", "np", ".", "sum", "(", "i", "for", "i", "in", "FWIoU", "[", "synthia_set_16", "]", "if", "not", "np", ".", "isnan", "(", "i", ")", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "FWIoU_13", "=", "np", ".", "sum", "(", "i", "for", "i", "in", "FWIoU", "[", "synthia_set_13", "]", "if", "not", "np", ".", "isnan", "(", "i", ")", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "return", "FWIoU_16", ",", "FWIoU_13", "\n", "", "FWIoU", "=", "np", ".", "sum", "(", "i", "for", "i", "in", "FWIoU", "if", "not", "np", ".", "isnan", "(", "i", ")", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "\n", "return", "FWIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Precision": [[77, 89], ["numpy.nanmean", "numpy.diag", "eval.Eval.confusion_matrix.sum", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean"], "methods", ["None"], ["", "def", "Mean_Precision", "(", "self", ",", "out_16_13", "=", "False", ")", ":", "\n", "        ", "Precision", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", "axis", "=", "0", ")", "\n", "if", "self", ".", "synthia", ":", "\n", "            ", "Precision_16", "=", "np", ".", "nanmean", "(", "Precision", "[", ":", "self", ".", "ignore_index", "]", ")", "\n", "Precision_13", "=", "np", ".", "nanmean", "(", "Precision", "[", "synthia_set_16_to_13", "]", ")", "\n", "return", "Precision_16", ",", "Precision_13", "\n", "", "if", "out_16_13", ":", "\n", "            ", "Precision_16", "=", "np", ".", "nanmean", "(", "Precision", "[", "synthia_set_16", "]", ")", "\n", "Precision_13", "=", "np", ".", "nanmean", "(", "Precision", "[", "synthia_set_13", "]", ")", "\n", "return", "Precision_16", ",", "Precision_13", "\n", "", "Precision", "=", "np", ".", "nanmean", "(", "Precision", "[", ":", "self", ".", "ignore_index", "]", ")", "\n", "return", "Precision", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Print_Every_class_Eval": [[90, 107], ["print", "range", "numpy.diag", "numpy.diag", "eval.Eval.confusion_matrix.sum", "numpy.diag", "eval.Eval.confusion_matrix.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "len", "print", "numpy.diag", "str", "str", "str", "str", "str", "numpy.sum", "numpy.sum", "numpy.isnan", "round", "numpy.isnan", "round", "numpy.isnan", "round", "numpy.isnan", "round", "numpy.isnan", "round"], "methods", ["None"], ["", "def", "Print_Every_class_Eval", "(", "self", ",", "out_16_13", "=", "False", ")", ":", "\n", "        ", "MIoU", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "(", "\n", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "+", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "-", "\n", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", ")", "\n", "MPA", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", "axis", "=", "1", ")", "\n", "Precision", "=", "np", ".", "diag", "(", "self", ".", "confusion_matrix", ")", "/", "self", ".", "confusion_matrix", ".", "sum", "(", "axis", "=", "0", ")", "\n", "Class_ratio", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "1", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "Pred_retio", "=", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "self", ".", "confusion_matrix", ")", "\n", "print", "(", "'===>Everyclass:\\t'", "+", "'MPA\\t'", "+", "'MIoU\\t'", "+", "'PC\\t'", "+", "'Ratio\\t'", "+", "'Pred_Retio'", ")", "\n", "if", "out_16_13", ":", "MIoU", "=", "MIoU", "[", "synthia_set_16", "]", "\n", "for", "ind_class", "in", "range", "(", "len", "(", "MIoU", ")", ")", ":", "\n", "            ", "pa", "=", "str", "(", "round", "(", "MPA", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", "if", "not", "np", ".", "isnan", "(", "MPA", "[", "ind_class", "]", ")", "else", "'nan'", "\n", "iou", "=", "str", "(", "round", "(", "MIoU", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", "if", "not", "np", ".", "isnan", "(", "MIoU", "[", "ind_class", "]", ")", "else", "'nan'", "\n", "pc", "=", "str", "(", "round", "(", "Precision", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", "if", "not", "np", ".", "isnan", "(", "Precision", "[", "ind_class", "]", ")", "else", "'nan'", "\n", "cr", "=", "str", "(", "round", "(", "Class_ratio", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", "if", "not", "np", ".", "isnan", "(", "Class_ratio", "[", "ind_class", "]", ")", "else", "'nan'", "\n", "pr", "=", "str", "(", "round", "(", "Pred_retio", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", "if", "not", "np", ".", "isnan", "(", "Pred_retio", "[", "ind_class", "]", ")", "else", "'nan'", "\n", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "pa", "+", "'\\t'", "+", "iou", "+", "'\\t'", "+", "pc", "+", "'\\t'", "+", "cr", "+", "'\\t'", "+", "pr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.__generate_matrix": [[109, 116], ["numpy.bincount", "numpy.bincount.reshape", "gt_image[].astype"], "methods", ["None"], ["", "", "def", "__generate_matrix", "(", "self", ",", "gt_image", ",", "pre_image", ")", ":", "\n", "\n", "        ", "mask", "=", "(", "gt_image", ">=", "0", ")", "&", "(", "gt_image", "<", "self", ".", "num_class", ")", "\n", "label", "=", "self", ".", "num_class", "*", "gt_image", "[", "mask", "]", ".", "astype", "(", "'int'", ")", "+", "pre_image", "[", "mask", "]", "\n", "count", "=", "np", ".", "bincount", "(", "label", ",", "minlength", "=", "self", ".", "num_class", "**", "2", ")", "\n", "confusion_matrix", "=", "count", ".", "reshape", "(", "self", ".", "num_class", ",", "self", ".", "num_class", ")", "\n", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.add_batch": [[117, 122], ["eval.Eval.__generate_matrix"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.__generate_matrix"], ["", "def", "add_batch", "(", "self", ",", "gt_image", ",", "pre_image", ")", ":", "\n", "# assert the size of two images are same", "\n", "        ", "assert", "gt_image", ".", "shape", "==", "pre_image", ".", "shape", "\n", "\n", "self", ".", "confusion_matrix", "+=", "self", ".", "__generate_matrix", "(", "gt_image", ",", "pre_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.reset": [[123, 125], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax": [[126, 129], ["numpy.exp", "numpy.sum"], "function", ["None"], ["", "", "def", "softmax", "(", "k", ",", "axis", "=", "None", ")", ":", "\n", "    ", "exp_k", "=", "np", ".", "exp", "(", "k", ")", "\n", "return", "exp_k", "/", "np", ".", "sum", "(", "exp_k", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.norm.build_norm_layer": [[13, 55], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\" Build normalization layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.softCrossEntropy.__init__": [[18, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "softCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.softCrossEntropy.forward": [[23, 36], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "inputs.size", "target.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: predictions (N, C, H, W)\n        :param target: target distribution (N, C, H, W)\n        :return: loss\n        \"\"\"", "\n", "assert", "inputs", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "\n", "mask", "=", "(", "target", "!=", "self", ".", "ignore_index", ")", "\n", "\n", "log_likelihood", "=", "F", ".", "log_softmax", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "mul", "(", "-", "log_likelihood", ",", "target", ")", "[", "mask", "]", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.IWsoftCrossEntropy.__init__": [[39, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ",", "num_class", "=", "19", ",", "ratio", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "ratio", "=", "ratio", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.IWsoftCrossEntropy.forward": [[46, 68], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "inputs.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "inputs.size", "target.size", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "[].detach", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "argpred[].cpu().data.float", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "argpred[].cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.histc().float.sum", "torch.histc().float.sum", "torch.histc().float.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: predictions (N, C, H, W)\n        :param target: target distribution (N, C, H, W)\n        :return: loss with image-wise weighting factor\n        \"\"\"", "\n", "assert", "inputs", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "\n", "mask", "=", "(", "target", "!=", "self", ".", "ignore_index", ")", "\n", "_", ",", "argpred", "=", "torch", ".", "max", "(", "inputs", ",", "1", ")", "\n", "weights", "=", "[", "]", "\n", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "hist", "=", "torch", ".", "histc", "(", "argpred", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "self", ".", "num_class", ",", "min", "=", "0", ",", "\n", "max", "=", "self", ".", "num_class", "-", "1", ")", ".", "float", "(", ")", "\n", "weight", "=", "(", "1", "/", "torch", ".", "max", "(", "torch", ".", "pow", "(", "hist", ",", "self", ".", "ratio", ")", "*", "torch", ".", "pow", "(", "hist", ".", "sum", "(", ")", ",", "1", "-", "self", ".", "ratio", ")", ",", "torch", ".", "ones", "(", "1", ")", ")", ")", ".", "to", "(", "argpred", ".", "device", ")", "[", "argpred", "[", "i", "]", "]", ".", "detach", "(", ")", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "", "weights", "=", "torch", ".", "stack", "(", "weights", ",", "dim", "=", "0", ")", "\n", "\n", "log_likelihood", "=", "F", ".", "log_softmax", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "(", "torch", ".", "mul", "(", "-", "log_likelihood", ",", "target", ")", "*", "weights", ")", "[", "mask", "]", ")", "/", "(", "batch_size", "*", "self", ".", "num_class", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.IW_MaxSquareloss.__init__": [[70, 75], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ",", "num_class", "=", "19", ",", "ratio", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.IW_MaxSquareloss.forward": [[76, 105], ["prob.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "prob.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mask_arg.unsqueeze().expand_as", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "torch.histc().float", "[].detach", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "mask_arg.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "label[].cpu().data.float", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "label[].cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.histc().float.sum", "torch.histc().float.sum", "torch.histc().float.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "prob", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param pred: predictions (N, C, H, W)\n        :param prob: probability of pred (N, C, H, W)\n        :param label(optional): the map for counting label numbers (N, C, H, W)\n        :return: maximum squares loss with image-wise weighting factor\n        \"\"\"", "\n", "# prob -= 0.5", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "prob", ".", "size", "(", ")", "\n", "mask", "=", "(", "prob", "!=", "self", ".", "ignore_index", ")", "\n", "maxpred", ",", "argpred", "=", "torch", ".", "max", "(", "prob", ",", "1", ")", "\n", "mask_arg", "=", "(", "maxpred", "!=", "self", ".", "ignore_index", ")", "\n", "argpred", "=", "torch", ".", "where", "(", "mask_arg", ",", "argpred", ",", "torch", ".", "ones", "(", "1", ")", ".", "to", "(", "prob", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "*", "self", ".", "ignore_index", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "label", "=", "argpred", "\n", "", "weights", "=", "[", "]", "\n", "batch_size", "=", "prob", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "hist", "=", "torch", ".", "histc", "(", "label", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "self", ".", "num_class", "+", "1", ",", "min", "=", "-", "1", ",", "\n", "max", "=", "self", ".", "num_class", "-", "1", ")", ".", "float", "(", ")", "\n", "hist", "=", "hist", "[", "1", ":", "]", "\n", "weight", "=", "(", "1", "/", "torch", ".", "max", "(", "torch", ".", "pow", "(", "hist", ",", "self", ".", "ratio", ")", "*", "torch", ".", "pow", "(", "hist", ".", "sum", "(", ")", ",", "1", "-", "self", ".", "ratio", ")", ",", "torch", ".", "ones", "(", "1", ")", ")", ")", ".", "to", "(", "argpred", ".", "device", ")", "[", "argpred", "[", "i", "]", "]", ".", "detach", "(", ")", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "", "weights", "=", "torch", ".", "stack", "(", "weights", ",", "dim", "=", "0", ")", "\n", "mask", "=", "mask_arg", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "prob", ")", "\n", "prior", "=", "torch", ".", "mean", "(", "prob", ",", "(", "2", ",", "3", ")", ",", "True", ")", ".", "detach", "(", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "(", "torch", ".", "pow", "(", "prob", ",", "2", ")", "*", "weights", ")", "[", "mask", "]", ")", "/", "(", "batch_size", "*", "self", ".", "num_class", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.MaxSquareloss.__init__": [[107, 111], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "-", "1", ",", "num_class", "=", "19", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "num_class", "=", "num_class", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.loss.MaxSquareloss.forward": [[112, 122], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "prob", ")", ":", "\n", "        ", "\"\"\"\n        :param pred: predictions (N, C, H, W)\n        :param prob: probability of pred (N, C, H, W)\n        :return: maximum squares loss\n        \"\"\"", "\n", "# prob -= 0.5", "\n", "mask", "=", "(", "prob", "!=", "self", ".", "ignore_index", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "prob", ",", "2", ")", "[", "mask", "]", ")", "/", "2", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.train_helper.get_model": [[14, 35], ["graphs.models.deeplab101_IN.DeeplabMulti101_IN", "graphs.models.deeplab50_bn.Deeplab50_bn.optim_parameters", "graphs.models.deeplab50_ClassINW.Res50_ClassINW", "graphs.models.deeplab50_bn.Deeplab50_bn.optim_parameters", "graphs.models.deeplab50_bn.Deeplab50_bn", "graphs.models.deeplab50_bn.Deeplab50_bn.optim_parameters"], "function", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.DeeplabMulti101_IN", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.optim_parameters", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.Res50_ClassINW", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.optim_parameters", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Deeplab50_bn", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.optim_parameters"], ["def", "get_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "backbone", "==", "\"Deeplab101_IN\"", ":", "\n", "        ", "model", "=", "DeeplabMulti101_IN", "(", "args", ",", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "pretrained", "=", "args", ".", "imagenet_pretrained", ")", "\n", "params", "=", "model", ".", "optim_parameters", "(", "args", ")", "\n", "args", ".", "numpy_transform", "=", "True", "\n", "\n", "", "elif", "args", ".", "backbone", "==", "\"Deeplab50_CLASS_INW\"", ":", "\n", "        ", "model", "=", "Res50_ClassINW", "(", "args", ",", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "pretrained", "=", "args", ".", "imagenet_pretrained", ")", "\n", "params", "=", "model", ".", "optim_parameters", "(", "args", ")", "\n", "args", ".", "numpy_transform", "=", "True", "\n", "\n", "", "elif", "args", ".", "backbone", "==", "\"Deeplab50_bn\"", ":", "\n", "        ", "model", "=", "Deeplab50_bn", "(", "args", ",", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "pretrained", "=", "args", ".", "imagenet_pretrained", ")", "\n", "params", "=", "model", ".", "optim_parameters", "(", "args", ")", "\n", "args", ".", "numpy_transform", "=", "True", "\n", "\n", "", "return", "model", ",", "params", "", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.SwithWhiten.SwitchWhiten2d.__init__": [[22, 67], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "SwithWhiten.SwitchWhiten2d.register_buffer", "SwithWhiten.SwitchWhiten2d.register_buffer", "SwithWhiten.SwitchWhiten2d.reset_parameters", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "SwithWhiten.SwitchWhiten2d.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "SwithWhiten.SwitchWhiten2d.register_parameter", "SwithWhiten.SwitchWhiten2d.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.SwithWhiten.SwitchWhiten2d.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "num_features", ",", "\n", "num_pergroup", "=", "16", ",", "\n", "sw_type", "=", "2", ",", "\n", "T", "=", "5", ",", "\n", "tie_weight", "=", "False", ",", "\n", "eps", "=", "1e-5", ",", "\n", "momentum", "=", "0.99", ",", "\n", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SwitchWhiten2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "sw_type", "not", "in", "[", "2", ",", "3", ",", "5", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'sw_type should be in [2, 3, 5], '", "\n", "'but got {}'", ".", "format", "(", "sw_type", ")", ")", "\n", "", "assert", "num_features", "%", "num_pergroup", "==", "0", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_pergroup", "=", "num_pergroup", "\n", "self", ".", "num_groups", "=", "num_features", "//", "num_pergroup", "\n", "self", ".", "sw_type", "=", "sw_type", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "affine", "=", "affine", "\n", "num_components", "=", "sw_type", "\n", "\n", "self", ".", "sw_mean_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "self", ".", "sw_var_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_components", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'sw_var_weight'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "\n", "torch", ".", "zeros", "(", "self", ".", "num_groups", ",", "num_pergroup", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'running_cov'", ",", "\n", "torch", ".", "eye", "(", "num_pergroup", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "num_groups", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.SwithWhiten.SwitchWhiten2d.reset_parameters": [[68, 77], ["SwithWhiten.SwitchWhiten2d.running_mean.zero_", "SwithWhiten.SwitchWhiten2d.running_cov.zero_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_cov", ".", "zero_", "(", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "sw_var_weight", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.SwithWhiten.SwitchWhiten2d.__repr__": [[78, 83], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({num_features}, num_pergroup={num_pergroup}, '", "\n", "'sw_type={sw_type}, T={T}, tie_weight={tie_weight}, '", "\n", "'eps={eps}, momentum={momentum}, affine={affine})'", ".", "format", "(", "\n", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.utils.SwithWhiten.SwitchWhiten2d.forward": [[84, 184], ["x.view.view.size", "x.view.view.transpose().contiguous", "in_data_t.view.view.view", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view().expand().contiguous", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "x.view.view.view", "x.view.view.data.new().resize_", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "torch.nn.init.eye_().view().expand", "x.view.view.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.Softmax", "torch.Softmax", "torch.Softmax.", "cov.size", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "torch.eye().to().expand", "range", "torch.baddbmm.mul_", "torch.baddbmm.mul_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x_hat.view.view.view", "in_data_t.view.view.mean", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "SwithWhiten.SwitchWhiten2d.running_mean.mul_", "SwithWhiten.SwitchWhiten2d.running_mean.add_", "SwithWhiten.SwitchWhiten2d.running_cov.mul_", "SwithWhiten.SwitchWhiten2d.running_cov.add_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.view.view.view", "x.view.view.mean().view", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "x.view.view.var().view", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous().view", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.Softmax.", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "rTr.sqrt", "x.view.view.transpose", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "x.view.view.data.new", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.nn.init.eye_().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "SwithWhiten.SwitchWhiten2d.bias.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x.view.view.mean", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "x.view.view.var", "var_ln.expand().contiguous().view.expand().contiguous().view.expand().contiguous", "SwithWhiten.SwitchWhiten2d.weight.view", "in_data_bn.transpose", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.nn.init.eye_", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "mean_ln.expand().contiguous().view.expand().contiguous().view.expand", "var_ln.expand().contiguous().view.expand().contiguous().view.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "c", ",", "g", "=", "self", ".", "num_pergroup", ",", "self", ".", "num_groups", "\n", "\n", "in_data_t", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# g x c x (N x H x W)", "\n", "in_data_t", "=", "in_data_t", ".", "view", "(", "g", ",", "c", ",", "-", "1", ")", "\n", "\n", "# calculate batch mean and covariance", "\n", "if", "self", ".", "training", ":", "\n", "# g x c x 1", "\n", "            ", "mean_bn", "=", "in_data_t", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "in_data_bn", "=", "in_data_t", "-", "mean_bn", "\n", "# g x c x c", "\n", "cov_bn", "=", "torch", ".", "bmm", "(", "in_data_bn", ",", "\n", "in_data_bn", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "H", "*", "W", "*", "N", ")", "\n", "\n", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_mean", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "mean_bn", ".", "data", ")", "\n", "self", ".", "running_cov", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_cov", ".", "add_", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "cov_bn", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "mean_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_mean", ")", "\n", "cov_bn", "=", "torch", ".", "autograd", ".", "Variable", "(", "self", ".", "running_cov", ")", "\n", "\n", "", "mean_bn", "=", "mean_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "1", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "mean_bn", "=", "mean_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "1", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "1", ",", "g", ",", "c", ",", "c", ")", ".", "expand", "(", "N", ",", "g", ",", "c", ",", "c", ")", ".", "contiguous", "(", ")", "\n", "cov_bn", "=", "cov_bn", ".", "view", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# (N x g) x c x (H x W)", "\n", "in_data", "=", "x", ".", "view", "(", "N", "*", "g", ",", "c", ",", "-", "1", ")", "\n", "\n", "eye", "=", "in_data", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "c", ",", "c", ")", "\n", "eye", "=", "torch", ".", "nn", ".", "init", ".", "eye_", "(", "eye", ")", ".", "view", "(", "1", ",", "c", ",", "c", ")", ".", "expand", "(", "N", "*", "g", ",", "c", ",", "c", ")", "\n", "\n", "# calculate other statistics", "\n", "# (N x g) x c x 1", "\n", "mean_in", "=", "in_data", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x_in", "=", "in_data", "-", "mean_in", "\n", "# (N x g) x c x c", "\n", "cov_in", "=", "torch", ".", "bmm", "(", "x_in", ",", "torch", ".", "transpose", "(", "x_in", ",", "1", ",", "2", ")", ")", ".", "div", "(", "H", "*", "W", ")", "\n", "if", "self", ".", "sw_type", "in", "[", "3", ",", "5", "]", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "mean_ln", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "mean_ln", "=", "mean_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", ".", "expand", "(", "N", ",", "g", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "g", ",", "1", ",", "1", ")", "\n", "var_ln", "=", "var_ln", "*", "eye", "\n", "", "if", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "var_bn", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_bn", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "var_in", "=", "torch", ".", "diag_embed", "(", "torch", ".", "diagonal", "(", "cov_in", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "\n", "# calculate weighted average of mean and covariance", "\n", "", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "mean_weight", "=", "softmax", "(", "self", ".", "sw_mean_weight", ")", "\n", "if", "not", "self", ".", "tie_weight", ":", "\n", "            ", "var_weight", "=", "softmax", "(", "self", ".", "sw_var_weight", ")", "\n", "", "else", ":", "\n", "            ", "var_weight", "=", "mean_weight", "\n", "\n", "# BW + IW", "\n", "", "if", "self", ".", "sw_type", "==", "2", ":", "\n", "# (N x g) x c x 1", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "3", ":", "\n", "            ", "mean", "=", "mean_weight", "[", "0", "]", "*", "mean_bn", "+", "mean_weight", "[", "1", "]", "*", "mean_in", "+", "mean_weight", "[", "2", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "2", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "# BW + IW + BN + IN + LN", "\n", "", "elif", "self", ".", "sw_type", "==", "5", ":", "\n", "            ", "mean", "=", "(", "mean_weight", "[", "0", "]", "+", "mean_weight", "[", "2", "]", ")", "*", "mean_bn", "+", "(", "mean_weight", "[", "1", "]", "+", "mean_weight", "[", "3", "]", ")", "*", "mean_in", "+", "mean_weight", "[", "4", "]", "*", "mean_ln", "\n", "cov", "=", "var_weight", "[", "0", "]", "*", "cov_bn", "+", "var_weight", "[", "1", "]", "*", "cov_in", "+", "var_weight", "[", "0", "]", "*", "var_bn", "+", "var_weight", "[", "1", "]", "*", "var_in", "+", "var_weight", "[", "4", "]", "*", "var_ln", "+", "self", ".", "eps", "*", "eye", "\n", "\n", "# perform whitening using Newton's iteration", "\n", "", "Ng", ",", "c", ",", "_", "=", "cov", ".", "size", "(", ")", "\n", "P", "=", "torch", ".", "eye", "(", "c", ")", ".", "to", "(", "cov", ")", ".", "expand", "(", "Ng", ",", "c", ",", "c", ")", "\n", "# reciprocal of trace of covariance", "\n", "rTr", "=", "(", "cov", "*", "P", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", ".", "reciprocal_", "(", ")", "\n", "cov_N", "=", "cov", "*", "rTr", "\n", "for", "k", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "P", "=", "torch", ".", "baddbmm", "(", "1.5", ",", "P", ",", "-", "0.5", ",", "torch", ".", "matrix_power", "(", "P", ",", "3", ")", ",", "cov_N", ")", "\n", "# whiten matrix: the matrix inverse of covariance, i.e., cov^{-1/2}", "\n", "", "wm", "=", "P", ".", "mul_", "(", "rTr", ".", "sqrt", "(", ")", ")", "\n", "\n", "x_hat", "=", "torch", ".", "bmm", "(", "wm", ",", "in_data", "-", "mean", ")", "\n", "x_hat", "=", "x_hat", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "x_hat", "=", "x_hat", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x_hat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.crosscity_Dataset.CrossCity_Dataset.__init__": [[17, 67], ["print", "isinstance", "isinstance", "os.path.join", "os.path.join", "os.path.join", "id.strip", "os.path.join", "os.path.join", "os.path.join", "Warning", "open", "enumerate", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'./datasets/NTHU_Datasets/Rio'", ",", "\n", "list_path", "=", "'./datasets/NTHU_list/Rio/List'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ",", "\n", "class_13", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "\"train.txt\"", ")", "\n", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"Images/Train\"", ")", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"Labels/Train\"", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "\"test.txt\"", ")", "\n", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"Images/Test\"", ")", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"Labels/Test\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val\"", ")", "\n", "\n", "", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "self", ".", "class_16", "=", "False", "\n", "# only consider 13 shared classes", "\n", "self", ".", "class_13", "=", "class_13", "\n", "synthia_set_13", "=", "[", "0", ",", "1", ",", "2", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", "\n", "self", ".", "trainid_to_13id", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "synthia_set_13", ")", "}", "\n", "\n", "print", "(", "\"{} num images in City {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "items", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.crosscity_Dataset.CrossCity_Dataset.__getitem__": [[68, 85], ["os.path.join", "PIL.Image.open().convert", "os.path.exists", "os.path.join", "crosscity_Dataset.CrossCity_Dataset._train_sync_transform", "os.path.join", "PIL.Image.open", "crosscity_Dataset.CrossCity_Dataset._val_sync_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "id", "=", "self", ".", "items", "[", "item", "]", "\n", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.jpg\"", ".", "format", "(", "id", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "if", "self", ".", "split", "==", "\"train\"", "and", "self", ".", "training", ":", "\n", "            ", "image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "None", ")", "\n", "return", "image", ",", "image", ",", "item", "\n", "", "else", ":", "\n", "            ", "gt_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}_eval.png\"", ".", "format", "(", "id", ")", ")", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.crosscity_Dataset.CrossCity_DataLoader.__init__": [[87, 126], ["crosscity_Dataset.CrossCity_Dataset", "GTA5_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "CrossCity_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train\"", ")", "\n", "\n", "", "val_split", "=", "'val'", "\n", "val_set", "=", "GTA5_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "val_split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "False", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "valid_iterations", "=", "(", "len", "(", "val_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "\n", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "", "", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.synthia_Dataset.SYNTHIA_Dataset.__init__": [[18, 66], ["os.path.join", "os.path.join", "os.path.join", "print", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "open", "enumerate", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'./datasets/SYNTHIA'", ",", "\n", "list_path", "=", "'./datasets/SYNTHIA/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ",", "\n", "class_16", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"RGB\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"GT/LABELS\"", ")", "\n", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "1", ":", "10", ",", "2", ":", "2", ",", "3", ":", "0", ",", "4", ":", "1", ",", "5", ":", "4", ",", "6", ":", "8", ",", "7", ":", "5", ",", "8", ":", "13", ",", "\n", "9", ":", "7", ",", "10", ":", "11", ",", "11", ":", "18", ",", "12", ":", "17", ",", "15", ":", "6", ",", "16", ":", "9", ",", "17", ":", "12", ",", "\n", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "16", ",", "21", ":", "3", "}", "\n", "# only consider 16 shared classes", "\n", "self", ".", "class_16", "=", "class_16", "\n", "synthia_set_16", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", "\n", "self", ".", "trainid_to_16id", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "synthia_set_16", ")", "}", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "items", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.synthia_Dataset.SYNTHIA_Dataset.__getitem__": [[67, 83], ["int", "os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.fromarray", "imageio.imread", "numpy.uint8", "synthia_Dataset.SYNTHIA_Dataset._train_sync_transform", "synthia_Dataset.SYNTHIA_Dataset._val_sync_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "id", "=", "int", "(", "self", ".", "items", "[", "item", "]", ")", "\n", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{:0>7d}.png\"", ".", "format", "(", "id", ")", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "gt_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{:0>7d}.png\"", ".", "format", "(", "id", ")", ")", "\n", "gt_image", "=", "imageio", ".", "imread", "(", "gt_image_path", ",", "format", "=", "'PNG-FI'", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "gt_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "gt_image", ")", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.synthia_Dataset.SYNTHIA_DataLoader.__init__": [[85, 131], ["synthia_Dataset.SYNTHIA_Dataset", "synthia_Dataset.SYNTHIA_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "SYNTHIA_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "", "val_split", "=", "'val'", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "else", "'test'", "\n", "val_set", "=", "SYNTHIA_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "val_split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "False", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "valid_iterations", "=", "(", "len", "(", "val_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "\n", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "", "", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset.__init__": [[46, 112], ["os.path.abspath", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "print", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "print", "open", "enumerate", "enumerate", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "os", ".", "path", ".", "abspath", "(", "'../../DATASETS/datasets_original/Cityscapes'", ")", ",", "\n", "list_path", "=", "os", ".", "path", ".", "abspath", "(", "'../datasets/city_list'", ")", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ",", "\n", "class_16", "=", "False", ",", "\n", "class_13", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param root_path:\n        :param dataset:\n        :param base_size:\n        :param is_trainging:\n        :param transforms:\n        \"\"\"", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "self", ".", "color_jitter", "=", "args", ".", "color_jitter", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"leftImg8bit\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"gtFine\"", ")", "\n", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "-", "1", ":", "ignore_label", ",", "0", ":", "ignore_label", ",", "1", ":", "ignore_label", ",", "2", ":", "ignore_label", ",", "\n", "3", ":", "ignore_label", ",", "4", ":", "ignore_label", ",", "5", ":", "ignore_label", ",", "6", ":", "ignore_label", ",", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "9", ":", "ignore_label", ",", "10", ":", "ignore_label", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "\n", "14", ":", "ignore_label", ",", "15", ":", "ignore_label", ",", "16", ":", "ignore_label", ",", "17", ":", "5", ",", "\n", "18", ":", "ignore_label", ",", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "\n", "28", ":", "15", ",", "29", ":", "ignore_label", ",", "30", ":", "ignore_label", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "# In SYNTHIA-to-Cityscapes case, only consider 16 shared classes", "\n", "self", ".", "class_16", "=", "class_16", "\n", "synthia_set_16", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", "\n", "self", ".", "trainid_to_16id", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "synthia_set_16", ")", "}", "\n", "# In Cityscapes-to-NTHU case, only consider 13 shared classes", "\n", "self", ".", "class_13", "=", "class_13", "\n", "synthia_set_13", "=", "[", "0", ",", "1", ",", "2", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", "\n", "self", ".", "trainid_to_13id", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "synthia_set_13", ")", "}", "\n", "\n", "print", "(", "\"{} num images in Cityscapes {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "items", ")", ",", "self", ".", "split", ")", ")", "\n", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "print", "(", "\"use numpy_transform, instead of tensor transform!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset.id2trainId": [[113, 128], ["cityscapes_Dataset.City_Dataset.id_to_trainid.items", "numpy.ones", "cityscapes_Dataset.City_Dataset.trainid_to_16id.items", "cityscapes_Dataset.City_Dataset.trainid_to_13id.items", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "id2trainId", "(", "self", ",", "label", ",", "reverse", "=", "False", ",", "ignore_label", "=", "-", "1", ")", ":", "\n", "        ", "label_copy", "=", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "if", "self", ".", "class_16", ":", "\n", "            ", "label_copy_16", "=", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "trainid_to_16id", ".", "items", "(", ")", ":", "\n", "                ", "label_copy_16", "[", "label_copy", "==", "k", "]", "=", "v", "\n", "", "label_copy", "=", "label_copy_16", "\n", "", "if", "self", ".", "class_13", ":", "\n", "            ", "label_copy_13", "=", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "trainid_to_13id", ".", "items", "(", ")", ":", "\n", "                ", "label_copy_13", "[", "label_copy", "==", "k", "]", "=", "v", "\n", "", "label_copy", "=", "label_copy_13", "\n", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset.__getitem__": [[129, 148], ["os.path.join", "os.path.join", "PIL.Image.open().convert", "os.path.join", "os.path.join", "PIL.Image.open", "[].split", "cityscapes_Dataset.City_Dataset._train_sync_transform", "cityscapes_Dataset.City_Dataset._val_sync_transform", "id.split", "id.split", "PIL.Image.open", "id.split", "id.split", "[].split", "id.split"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "id", "=", "self", ".", "items", "[", "item", "]", "\n", "filename", "=", "id", ".", "split", "(", "\"train_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"val_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"test_\"", ")", "[", "-", "1", "]", "\n", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "image_filename", "=", "filename", "+", "\"_leftImg8bit.png\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "image_filepath", ",", "image_filename", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "gt_filename", "=", "filename", "+", "\"_gtFine_labelIds.png\"", "\n", "gt_image_path", "=", "os", ".", "path", ".", "join", "(", "gt_filepath", ",", "gt_filename", ")", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._train_sync_transform": [[149, 215], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "cityscapes_Dataset.City_Dataset._img_transform", "random.random", "img.filter.filter.transpose", "random.random", "torchvision.ColorJitter", "torchvision.ColorJitter.", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "random.random", "img.filter.filter.filter", "cityscapes_Dataset.City_Dataset._img_transform", "cityscapes_Dataset.City_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "def", "_train_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "color_jitter", ":", "\n", "# random jitter", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "jitter", "=", "ttransforms", ".", "ColorJitter", "(", "brightness", "=", "0.5", ",", "hue", "=", "0.3", ",", "contrast", "=", "0.2", ",", "saturation", "=", "0.2", ")", "\n", "img", "=", "jitter", "(", "img", ")", "\n", "\n", "", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._val_sync_transform": [[216, 241], ["img.resize.resize.resize", "mask.resize.resize.resize", "int", "int", "img.resize.resize.crop", "mask.resize.resize.crop", "cityscapes_Dataset.City_Dataset._img_transform", "cityscapes_Dataset.City_Dataset._mask_transform", "int", "int", "round", "round", "img.resize.resize.resize", "mask.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "random_crop", ":", "\n", "            ", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "crop_w", "/", "w", "<", "crop_h", "/", "h", ":", "\n", "                ", "oh", "=", "crop_h", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "                ", "ow", "=", "crop_w", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._img_transform": [[242, 256], ["numpy.asarray", "image.transpose().copy.transpose().copy.transpose().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.Compose", "torchvision.Compose.", "image.transpose().copy.transpose().copy.transpose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_img_transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "IMG_MEAN", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "# (C x H x W)", "\n", "new_image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image_transforms", "=", "ttransforms", ".", "Compose", "(", "[", "\n", "ttransforms", ".", "ToTensor", "(", ")", ",", "\n", "ttransforms", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", ",", "\n", "]", ")", "\n", "new_image", "=", "image_transforms", "(", "image", ")", "\n", "", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._mask_transform": [[257, 263], ["numpy.asarray", "cityscapes_Dataset.City_Dataset.id2trainId().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cityscapes_Dataset.City_Dataset.id2trainId"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.id2trainId"], ["", "def", "_mask_transform", "(", "self", ",", "gt_image", ")", ":", "\n", "        ", "target", "=", "np", ".", "asarray", "(", "gt_image", ",", "np", ".", "float32", ")", "\n", "target", "=", "self", ".", "id2trainId", "(", "target", ")", ".", "copy", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._train_sync_transform_0": [[264, 323], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "cityscapes_Dataset.City_Dataset._img_transform_0", "random.random", "img.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "random.random", "img.filter.filter.filter", "cityscapes_Dataset.City_Dataset._img_transform_0", "cityscapes_Dataset.City_Dataset._mask_transform_0", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform_0"], ["", "def", "_train_sync_transform_0", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_img_transform_0", "(", "img", ")", ",", "self", ".", "_mask_transform_0", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform_0", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._val_sync_transform_0": [[324, 349], ["img.resize.resize.resize", "mask.resize.resize.resize", "int", "int", "img.resize.resize.crop", "mask.resize.resize.crop", "cityscapes_Dataset.City_Dataset._img_transform_0", "cityscapes_Dataset.City_Dataset._mask_transform_0", "int", "int", "round", "round", "img.resize.resize.resize", "mask.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform_0"], ["", "", "def", "_val_sync_transform_0", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "random_crop", ":", "\n", "            ", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "crop_w", "/", "w", "<", "crop_h", "/", "h", ":", "\n", "                ", "oh", "=", "crop_h", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "                ", "ow", "=", "crop_w", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "", "img", ",", "mask", "=", "self", ".", "_img_transform_0", "(", "img", ")", ",", "self", ".", "_mask_transform_0", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._img_transform_0": [[350, 364], ["numpy.asarray", "image.transpose().copy.transpose().copy.transpose().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.Compose", "torchvision.Compose.", "image.transpose().copy.transpose().copy.transpose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_img_transform_0", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "IMG_MEAN", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "# (C x H x W)", "\n", "new_image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image_transforms", "=", "ttransforms", ".", "Compose", "(", "[", "\n", "ttransforms", ".", "ToTensor", "(", ")", ",", "\n", "ttransforms", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", ",", "\n", "]", ")", "\n", "new_image", "=", "image_transforms", "(", "image", ")", "\n", "", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset._mask_transform_0": [[365, 371], ["numpy.asarray", "cityscapes_Dataset.City_Dataset.id2trainId().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cityscapes_Dataset.City_Dataset.id2trainId"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.id2trainId"], ["", "def", "_mask_transform_0", "(", "self", ",", "gt_image", ")", ":", "\n", "        ", "target", "=", "np", ".", "asarray", "(", "gt_image", ",", "np", ".", "float32", ")", "\n", "target", "=", "self", ".", "id2trainId", "(", "target", ")", ".", "copy", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_Dataset.__len__": [[372, 374], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.__init__": [[377, 440], ["os.path.abspath", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "print", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "print", "open", "enumerate", "enumerate", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "os", ".", "path", ".", "abspath", "(", "'../../DATASETS/datasets_original/Cityscapes'", ")", ",", "\n", "list_path", "=", "os", ".", "path", ".", "abspath", "(", "'../datasets/city_list'", ")", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ",", "\n", "class_16", "=", "False", ",", "\n", "class_13", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param root_path:\n        :param dataset:\n        :param base_size:\n        :param is_trainging:\n        :param transforms:\n        \"\"\"", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"leftImg8bit\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"gtFine\"", ")", "\n", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "-", "1", ":", "ignore_label", ",", "0", ":", "ignore_label", ",", "1", ":", "ignore_label", ",", "2", ":", "ignore_label", ",", "\n", "3", ":", "ignore_label", ",", "4", ":", "ignore_label", ",", "5", ":", "ignore_label", ",", "6", ":", "ignore_label", ",", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "9", ":", "ignore_label", ",", "10", ":", "ignore_label", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "\n", "14", ":", "ignore_label", ",", "15", ":", "ignore_label", ",", "16", ":", "ignore_label", ",", "17", ":", "5", ",", "\n", "18", ":", "ignore_label", ",", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "\n", "28", ":", "15", ",", "29", ":", "ignore_label", ",", "30", ":", "ignore_label", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "# In SYNTHIA-to-Cityscapes case, only consider 16 shared classes", "\n", "self", ".", "class_16", "=", "class_16", "\n", "synthia_set_16", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", "\n", "self", ".", "trainid_to_16id", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "synthia_set_16", ")", "}", "\n", "# In Cityscapes-to-NTHU case, only consider 13 shared classes", "\n", "self", ".", "class_13", "=", "class_13", "\n", "synthia_set_13", "=", "[", "0", ",", "1", ",", "2", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", ",", "15", ",", "17", ",", "18", "]", "\n", "self", ".", "trainid_to_13id", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "synthia_set_13", ")", "}", "\n", "\n", "print", "(", "\"{} num images in Cityscapes {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "items", ")", ",", "self", ".", "split", ")", ")", "\n", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "print", "(", "\"use numpy_transform, instead of tensor transform!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.id2trainId": [[441, 456], ["cityscapes_Dataset.Beiyong_Dataset.id_to_trainid.items", "numpy.ones", "cityscapes_Dataset.Beiyong_Dataset.trainid_to_16id.items", "cityscapes_Dataset.Beiyong_Dataset.trainid_to_13id.items", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "id2trainId", "(", "self", ",", "label", ",", "reverse", "=", "False", ",", "ignore_label", "=", "-", "1", ")", ":", "\n", "        ", "label_copy", "=", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "if", "self", ".", "class_16", ":", "\n", "            ", "label_copy_16", "=", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "trainid_to_16id", ".", "items", "(", ")", ":", "\n", "                ", "label_copy_16", "[", "label_copy", "==", "k", "]", "=", "v", "\n", "", "label_copy", "=", "label_copy_16", "\n", "", "if", "self", ".", "class_13", ":", "\n", "            ", "label_copy_13", "=", "ignore_label", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "trainid_to_13id", ".", "items", "(", ")", ":", "\n", "                ", "label_copy_13", "[", "label_copy", "==", "k", "]", "=", "v", "\n", "", "label_copy", "=", "label_copy_13", "\n", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.__getitem__": [[457, 476], ["os.path.join", "os.path.join", "PIL.Image.open().convert", "os.path.join", "os.path.join", "PIL.Image.open", "[].split", "cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "cityscapes_Dataset.Beiyong_Dataset._val_sync_transform", "id.split", "id.split", "PIL.Image.open", "id.split", "id.split", "[].split", "id.split"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "id", "=", "self", ".", "items", "[", "item", "]", "\n", "filename", "=", "id", ".", "split", "(", "\"train_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"val_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"test_\"", ")", "[", "-", "1", "]", "\n", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "image_filename", "=", "filename", "+", "\"_leftImg8bit.png\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "image_filepath", ",", "image_filename", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ",", "id", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "gt_filename", "=", "filename", "+", "\"_gtFine_labelIds.png\"", "\n", "gt_image_path", "=", "os", ".", "path", ".", "join", "(", "gt_filepath", ",", "gt_filename", ")", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.generate_mixing_mask": [[477, 488], ["numpy.exp", "numpy.random.uniform", "numpy.random.normal", "scipy.ndimage.filters.gaussian_filter", "numpy.concatenate", "numpy.random.uniform", "scipy.ndimage.filters.gaussian_filter.mean", "numpy.log", "numpy.log", "scipy.ndimage.filters.gaussian_filter.std", "scipy.special.erfinv"], "methods", ["None"], ["", "def", "generate_mixing_mask", "(", "self", ",", "img_size", ",", "sigma_min", ",", "sigma_max", ",", "p_min", ",", "p_max", ")", ":", "\n", "        ", "sigma", "=", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "np", ".", "log", "(", "sigma_min", ")", ",", "np", ".", "log", "(", "sigma_max", ")", ")", ")", "\n", "p", "=", "np", ".", "random", ".", "uniform", "(", "p_min", ",", "p_max", ")", "\n", "N", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "img_size", ")", "\n", "Ns", "=", "gaussian_filter", "(", "N", ",", "sigma", ")", "\n", "\n", "t", "=", "erfinv", "(", "p", "*", "2", "-", "1", ")", "*", "(", "2", "**", "0.5", ")", "*", "Ns", ".", "std", "(", ")", "+", "Ns", ".", "mean", "(", ")", "\n", "a", "=", "(", "Ns", ">", "t", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "a", "=", "a", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "a", ",", "a", ",", "a", ")", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_s1_s2_transform": [[489, 565], ["img_1.filter.filter.resize", "img_2.filter.filter.resize", "random.randint", "random.randint", "img_1.filter.filter.crop", "img_2.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img_1.filter.filter.transpose", "img_2.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img_1.filter.filter.resize", "img_2.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img_1.filter.filter.filter", "img_2.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform_rs", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_rs", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "def", "_train_s1_s2_transform", "(", "self", ",", "img_1", ",", "img_2", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img_1", "=", "img_1", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_2", "=", "img_2", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img_1", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img_1", "=", "img_1", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "img_2", "=", "img_2", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img_1", "=", "ImageOps", ".", "expand", "(", "img_1", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "img_2", "=", "ImageOps", ".", "expand", "(", "img_2", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img_1", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img_1", "=", "img_1", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "img_2", "=", "img_2", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img_1", "=", "img_1", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_2", "=", "img_2", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img_1", "=", "img_1", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_2", "=", "img_2", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img_ss", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform_rs", "(", "img_1", ",", "img_2", ")", ",", "self", ".", "_img_transform", "(", "\n", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image_1", "=", "img_ss", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "w_img_raw", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img_fix", "=", "torch", ".", "add", "(", "image_1", ",", "w_img_raw", ")", "\n", "return", "img_fix", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img_1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_rs": [[566, 589], ["numpy.asarray", "numpy.asarray", "cityscapes_Dataset.Beiyong_Dataset.generate_mixing_mask", "image.transpose().copy.transpose().copy.transpose().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.Compose", "torchvision.Compose.", "image.transpose().copy.transpose().copy.transpose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.generate_mixing_mask"], ["", "", "def", "_img_transform_rs", "(", "self", ",", "img_1", ",", "img_raw", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "img_1", "=", "np", ".", "asarray", "(", "img_1", ",", "np", ".", "float32", ")", "\n", "img_1", "=", "img_1", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "img_raw", "=", "np", ".", "asarray", "(", "img_raw", ",", "np", ".", "float32", ")", "\n", "img_raw", "=", "img_raw", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "M", "=", "self", ".", "generate_mixing_mask", "(", "(", "640", ",", "640", ")", ",", "4", ",", "16", ",", "self", ".", "args", ".", "beta", ",", "self", ".", "args", ".", "beta", ")", "\n", "\n", "# print(self.args.alpha.dtype)", "\n", "# M.dtype = 'float32'", "\n", "# img = torch.mul(img_1,(1-M))+torch.mul(img_raw*M)", "\n", "\n", "image", "=", "img_1", "*", "(", "1", "-", "M", ")", "+", "img_raw", "*", "M", "\n", "image", "-=", "IMG_MEAN", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "# (C x H x W)", "\n", "new_image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image_transforms", "=", "ttransforms", ".", "Compose", "(", "[", "\n", "ttransforms", ".", "ToTensor", "(", ")", ",", "\n", "ttransforms", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", ",", "\n", "]", ")", "\n", "new_image", "=", "image_transforms", "(", "img_1", ")", "\n", "", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_r_s_transform": [[590, 661], ["img_1.filter.filter.resize", "random.randint", "random.randint", "img_1.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img_1.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img_1.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img_1.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform_rs", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_rs", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "def", "_train_r_s_transform", "(", "self", ",", "img_1", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img_1", "=", "img_1", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img_1", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img_1", "=", "img_1", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img_1", "=", "ImageOps", ".", "expand", "(", "img_1", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img_1", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img_1", "=", "img_1", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img_1", "=", "img_1", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img_1", "=", "img_1", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "\n", "            ", "img_1", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform_rs", "(", "img_1", ",", "img_raw", ")", ",", "self", ".", "_img_transform", "(", "\n", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image_1", "=", "img_1", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "w_img_raw", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img_1", "=", "torch", ".", "add", "(", "image_1", ",", "w_img_raw", ")", "\n", "\n", "return", "img_1", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img_1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform": [[662, 730], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "_train_sync_transform", "(", "self", ",", "img", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_img_transform", "(", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image", "=", "img", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "img_raw", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img", "=", "torch", ".", "add", "(", "image", ",", "img_raw", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_PS_transform": [[731, 799], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "_train_PS_transform", "(", "self", ",", "img", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_img_transform", "(", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image", "=", "img", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "img_raw_w", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img", "=", "torch", ".", "add", "(", "image", ",", "img_raw_w", ")", "\n", "\n", "return", "img", ",", "img_raw", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._Fa_RSS_transform": [[800, 874], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img.filter.filter.transpose", "img_2.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "img_2.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img.filter.filter.filter", "img_2.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "_Fa_RSS_transform", "(", "self", ",", "img", ",", "img_2", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_2", "=", "img_2", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_2", "=", "img_2", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_2", "=", "img_2", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "img_2", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_img_transform", "(", "img_2", ")", ",", "self", ".", "_img_transform", "(", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image", "=", "img", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "image_2", "=", "img", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "img_raw_w", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img", "=", "torch", ".", "add", "(", "image", ",", "img_raw_w", ")", "\n", "img_2", "=", "torch", ".", "add", "(", "image_2", ",", "img_raw_w", ")", "\n", "\n", "return", "img", ",", "img_2", ",", "img_raw", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_RSS_transform": [[876, 950], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img.filter.filter.transpose", "img_2.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "img_2.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img.filter.filter.filter", "img_2.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "_train_RSS_transform", "(", "self", ",", "img", ",", "img_2", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_2", "=", "img_2", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_2", "=", "img_2", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_2", "=", "img_2", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "img_2", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_img_transform", "(", "img_2", ")", ",", "self", ".", "_img_transform", "(", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image", "=", "img", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "image_2", "=", "img_2", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "img_raw_w", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img", "=", "torch", ".", "add", "(", "image", ",", "img_raw_w", ")", "\n", "img_2", "=", "torch", ".", "add", "(", "image_2", ",", "img_raw_w", ")", "\n", "\n", "return", "img", ",", "img_2", ",", "img_raw", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.Print_transform": [[957, 1031], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "random.random", "img.filter.filter.transpose", "img_2.filter.filter.transpose", "img_raw.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "img_2.filter.filter.resize", "img_raw.filter.filter.resize", "random.random", "random.random", "img.filter.filter.filter", "img_2.filter.filter.filter", "img_raw.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur", "PIL.ImageFilter.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "Print_transform", "(", "self", ",", "img", ",", "img_2", ",", "img_raw", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_2", "=", "img_2", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img_raw", "=", "img_raw", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_2", "=", "img_2", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "img_raw", "=", "img_raw", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "a", "=", "random", ".", "random", "(", ")", "\n", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_2", "=", "img_2", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "img_raw", "=", "img_raw", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "a", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "img_2", ",", "img_raw", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_img_transform", "(", "img_2", ")", ",", "self", ".", "_img_transform", "(", "img_raw", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "image", "=", "img", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "image_2", "=", "img_2", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "img_raw_w", "=", "img_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img", "=", "torch", ".", "add", "(", "image", ",", "img_raw_w", ")", "\n", "img_2", "=", "torch", ".", "add", "(", "image_2", ",", "img_raw_w", ")", "\n", "\n", "return", "img", ",", "img_2", ",", "img_raw", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform": [[1036, 1061], ["img.resize.resize.resize", "mask.resize.resize.resize", "int", "int", "img.resize.resize.crop", "mask.resize.resize.crop", "cityscapes_Dataset.Beiyong_Dataset._img_transform", "cityscapes_Dataset.Beiyong_Dataset._mask_transform", "int", "int", "round", "round", "img.resize.resize.resize", "mask.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform"], ["", "", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "random_crop", ":", "\n", "            ", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "crop_w", "/", "w", "<", "crop_h", "/", "h", ":", "\n", "                ", "oh", "=", "crop_h", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "                ", "ow", "=", "crop_w", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "", "img", ",", "mask", "=", "self", ".", "_img_transform", "(", "img", ")", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform": [[1062, 1076], ["numpy.asarray", "image.transpose().copy.transpose().copy.transpose().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.Compose", "torchvision.Compose.", "image.transpose().copy.transpose().copy.transpose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_img_transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "IMG_MEAN", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "# (C x H x W)", "\n", "new_image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image_transforms", "=", "ttransforms", ".", "Compose", "(", "[", "\n", "ttransforms", ".", "ToTensor", "(", ")", ",", "\n", "ttransforms", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", ",", "\n", "]", ")", "\n", "new_image", "=", "image_transforms", "(", "image", ")", "\n", "", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform": [[1077, 1083], ["numpy.asarray", "cityscapes_Dataset.Beiyong_Dataset.id2trainId().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cityscapes_Dataset.Beiyong_Dataset.id2trainId"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.id2trainId"], ["", "def", "_mask_transform", "(", "self", ",", "gt_image", ")", ":", "\n", "        ", "target", "=", "np", ".", "asarray", "(", "gt_image", ",", "np", ".", "float32", ")", "\n", "target", "=", "self", ".", "id2trainId", "(", "target", ")", ".", "copy", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform_0": [[1084, 1143], ["img.filter.filter.resize", "random.randint", "random.randint", "img.filter.filter.crop", "cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "random.random", "img.filter.filter.transpose", "random.randint", "int", "random.randint", "int", "mask.resize.resize.resize", "PIL.ImageOps.expand", "mask.resize.resize.crop", "img.filter.filter.resize", "random.random", "img.filter.filter.filter", "cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "cityscapes_Dataset.Beiyong_Dataset._mask_transform_0", "mask.resize.resize.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "mask.resize.resize.resize", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform_0"], ["", "def", "_train_sync_transform_0", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param image:  PIL input image\n        :param gt_image: PIL input gt_image\n        :return:\n        '''", "\n", "if", "self", ".", "random_mirror", ":", "\n", "# random mirror", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "", "if", "self", ".", "random_crop", ":", "\n", "# random scale", "\n", "            ", "base_w", ",", "base_h", "=", "self", ".", "base_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "assert", "w", ">=", "h", "\n", "if", "(", "base_w", "/", "w", ")", ">", "(", "base_h", "/", "h", ")", ":", "\n", "                ", "base_size", "=", "base_w", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "base_size", "=", "base_h", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "base_size", "*", "0.5", ")", ",", "int", "(", "base_size", "*", "2.0", ")", ")", "\n", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "ow", "<", "crop_w", "or", "oh", "<", "crop_h", ":", "\n", "                ", "padh", "=", "crop_h", "-", "oh", "if", "oh", "<", "crop_h", "else", "0", "\n", "padw", "=", "crop_w", "-", "ow", "if", "ow", "<", "crop_w", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "if", "mask", ":", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "if", "mask", ":", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "if", "self", ".", "gaussian_blur", ":", "\n", "# gaussian blur as in PSP", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "# final transform", "\n", "", "", "if", "mask", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_img_transform_0", "(", "img", ")", ",", "self", ".", "_mask_transform_0", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "_img_transform_0", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform_0": [[1144, 1169], ["img.resize.resize.resize", "mask.resize.resize.resize", "int", "int", "img.resize.resize.crop", "mask.resize.resize.crop", "cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "cityscapes_Dataset.Beiyong_Dataset._mask_transform_0", "int", "int", "round", "round", "img.resize.resize.resize", "mask.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform_0"], ["", "", "def", "_val_sync_transform_0", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "random_crop", ":", "\n", "            ", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "crop_w", "/", "w", "<", "crop_h", "/", "h", ":", "\n", "                ", "oh", "=", "crop_h", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "                ", "ow", "=", "crop_w", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_w", ",", "y1", "+", "crop_h", ")", ")", "\n", "", "elif", "self", ".", "resize", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# final transform", "\n", "", "img", ",", "mask", "=", "self", ".", "_img_transform_0", "(", "img", ")", ",", "self", ".", "_mask_transform_0", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._img_transform_0": [[1170, 1184], ["numpy.asarray", "image.transpose().copy.transpose().copy.transpose().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.Compose", "torchvision.Compose.", "image.transpose().copy.transpose().copy.transpose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_img_transform_0", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "numpy_transform", ":", "\n", "            ", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "IMG_MEAN", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "# (C x H x W)", "\n", "new_image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image_transforms", "=", "ttransforms", ".", "Compose", "(", "[", "\n", "ttransforms", ".", "ToTensor", "(", ")", ",", "\n", "ttransforms", ".", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", ",", "\n", "]", ")", "\n", "new_image", "=", "image_transforms", "(", "image", ")", "\n", "", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._mask_transform_0": [[1185, 1191], ["numpy.asarray", "cityscapes_Dataset.Beiyong_Dataset.id2trainId().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cityscapes_Dataset.Beiyong_Dataset.id2trainId"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.id2trainId"], ["", "def", "_mask_transform_0", "(", "self", ",", "gt_image", ")", ":", "\n", "        ", "target", "=", "np", ".", "asarray", "(", "gt_image", ",", "np", ".", "float32", ")", "\n", "target", "=", "self", ".", "id2trainId", "(", "target", ")", ".", "copy", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset.__len__": [[1192, 1194], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.City_DataLoader.__init__": [[1197, 1261], ["cityscapes_Dataset.City_Dataset", "cityscapes_Dataset.City_Dataset", "cityscapes_Dataset.City_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "City_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "'../../DATASETS/datasets_original/Cityscapes'", ",", "\n", "list_path", "=", "'../datasets/city_list'", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ",", "\n", "class_16", "=", "args", ".", "class_16", ",", "\n", "class_13", "=", "args", ".", "class_13", ")", "\n", "\n", "if", "(", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", ")", "and", "training", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "", "val_set", "=", "City_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "'../../DATASETS/datasets_original/Cityscapes'", ",", "\n", "list_path", "=", "'../datasets/city_list'", ",", "\n", "split", "=", "'val'", ",", "\n", "base_size", "=", "args", ".", "target_base_size", ",", "\n", "crop_size", "=", "args", ".", "target_crop_size", ",", "\n", "training", "=", "False", ",", "\n", "class_16", "=", "args", ".", "class_16", ",", "\n", "class_13", "=", "args", ".", "class_13", ")", "\n", "val_set_bdds", "=", "City_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "'../../DATASETS/datasets_original/BDDS/bdds_val'", ",", "\n", "list_path", "=", "'../datasets/bdds_list'", ",", "\n", "split", "=", "'val'", ",", "\n", "base_size", "=", "args", ".", "target_base_size", ",", "\n", "crop_size", "=", "args", ".", "target_crop_size", ",", "\n", "training", "=", "False", ",", "\n", "class_16", "=", "args", ".", "class_16", ",", "\n", "class_13", "=", "args", ".", "class_13", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "val_loader_bdds", "=", "data", ".", "DataLoader", "(", "val_set_bdds", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "\n", "self", ".", "valid_iterations", "=", "(", "len", "(", "val_set", ")", "+", "1", ")", "//", "1", "\n", "\n", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "1", ")", "//", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.flip": [[1263, 1269], ["tuple", "x.dim", "slice", "x.new().long", "range", "x.dim", "x.new", "torch.arange().tolist", "torch.arange().tolist", "torch.arange", "torch.arange", "x.size"], "function", ["None"], ["", "", "def", "flip", "(", "x", ",", "dim", ")", ":", "\n", "    ", "dim", "=", "x", ".", "dim", "(", ")", "+", "dim", "if", "dim", "<", "0", "else", "dim", "\n", "inds", "=", "tuple", "(", "slice", "(", "None", ",", "None", ")", "if", "i", "!=", "dim", "\n", "else", "x", ".", "new", "(", "torch", ".", "arange", "(", "x", ".", "size", "(", "i", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "tolist", "(", ")", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "return", "x", "[", "inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.inv_preprocess": [[1271, 1292], ["cityscapes_Dataset.inv_preprocess.norm_ip"], "function", ["None"], ["", "def", "inv_preprocess", "(", "imgs", ",", "num_images", "=", "1", ",", "img_mean", "=", "IMG_MEAN", ",", "numpy_transform", "=", "False", ")", ":", "\n", "    ", "\"\"\"Inverse preprocessing of the batch of images.\n\n    Args:\n      imgs: batch of input images.\n      num_images: number of images to apply the inverse transformations on.\n      img_mean: vector of mean colour values.\n      numpy_transform: whether change RGB to BGR during img_transform.\n\n    Returns:\n      The batch of the size num_images with the same spatial dimensions as the input.\n    \"\"\"", "\n", "if", "numpy_transform", ":", "\n", "        ", "imgs", "=", "flip", "(", "imgs", ",", "1", ")", "\n", "\n", "", "def", "norm_ip", "(", "img", ",", "min", ",", "max", ")", ":", "\n", "        ", "img", ".", "clamp_", "(", "min", "=", "min", ",", "max", "=", "max", ")", "\n", "img", ".", "add_", "(", "-", "min", ")", ".", "div_", "(", "max", "-", "min", "+", "1e-5", ")", "\n", "\n", "", "norm_ip", "(", "imgs", ",", "float", "(", "imgs", ".", "min", "(", ")", ")", ",", "float", "(", "imgs", ".", "max", "(", ")", ")", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels": [[1294, 1320], ["isinstance", "numpy.zeros", "range", "torch.from_numpy().div_", "torch.from_numpy().div_", "mask.data.cpu().numpy.data.cpu().numpy", "PIL.Image.new", "Image.new.load", "enumerate", "numpy.array", "enumerate", "torch.from_numpy", "torch.from_numpy", "mask.data.cpu().numpy.data.cpu", "len", "len", "np.zeros.transpose().astype", "np.zeros.transpose"], "function", ["None"], ["", "def", "decode_labels", "(", "mask", ",", "num_images", "=", "1", ",", "num_classes", "=", "NUM_CLASSES", ")", ":", "\n", "    ", "\"\"\"Decode batch of segmentation masks.\n\n    Args:\n      mask: result of inference after taking argmax.\n      num_images: number of images to decode from the batch.\n      num_classes: number of classes to predict.\n\n    Returns:\n      A batch with num_images RGB images of the same size as the input.\n    \"\"\"", "\n", "if", "isinstance", "(", "mask", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "mask", "=", "mask", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "n", ",", "h", ",", "w", "=", "mask", ".", "shape", "\n", "if", "n", "<", "num_images", ":", "\n", "        ", "num_images", "=", "n", "\n", "", "outputs", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "len", "(", "mask", "[", "i", ",", "0", "]", ")", ",", "len", "(", "mask", "[", "i", "]", ")", ")", ")", "\n", "pixels", "=", "img", ".", "load", "(", ")", "\n", "for", "j_", ",", "j", "in", "enumerate", "(", "mask", "[", "i", ",", ":", ",", ":", "]", ")", ":", "\n", "            ", "for", "k_", ",", "k", "in", "enumerate", "(", "j", ")", ":", "\n", "                ", "if", "k", "<", "num_classes", ":", "\n", "                    ", "pixels", "[", "k_", ",", "j_", "]", "=", "label_colours", "[", "k", "]", "\n", "", "", "", "outputs", "[", "i", "]", "=", "np", ".", "array", "(", "img", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "outputs", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ".", "astype", "(", "'float32'", ")", ")", ".", "div_", "(", "255.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.inspect_decode_labels": [[1346, 1380], ["isinstance", "pred.data.cpu().numpy.transpose", "numpy.zeros", "range", "torch.from_numpy().div_", "torch.from_numpy().div_", "pred.data.cpu().numpy.data.cpu().numpy", "PIL.Image.new", "Image.new.load", "enumerate", "numpy.array", "enumerate", "torch.from_numpy", "torch.from_numpy", "pred.data.cpu().numpy.data.cpu", "numpy.max", "numpy.argmax", "enumerate", "np.zeros.transpose().astype", "softmax", "tuple", "map", "np.zeros.transpose", "int"], "function", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax"], ["def", "inspect_decode_labels", "(", "pred", ",", "num_images", "=", "1", ",", "num_classes", "=", "NUM_CLASSES", ",", "\n", "inspect_split", "=", "[", "0.9", ",", "0.8", ",", "0.7", ",", "0.5", ",", "0.0", "]", ",", "inspect_ratio", "=", "[", "1.0", ",", "0.8", ",", "0.6", ",", "0.3", "]", ")", ":", "\n", "    ", "\"\"\"Decode batch of segmentation masks accroding to the prediction probability.\n\n    Args:\n      pred: result of inference.\n      num_images: number of images to decode from the batch.\n      num_classes: number of classes to predict (including background).\n      inspect_split: probability between different split has different brightness.\n\n    Returns:\n      A batch with num_images RGB images of the same size as the input. \n    \"\"\"", "\n", "if", "isinstance", "(", "pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "n", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "shape", "\n", "pred", "=", "pred", ".", "transpose", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "if", "n", "<", "num_images", ":", "\n", "        ", "num_images", "=", "n", "\n", "", "outputs", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", ",", "h", ")", ")", "\n", "pixels", "=", "img", ".", "load", "(", ")", "\n", "for", "j_", ",", "j", "in", "enumerate", "(", "pred", "[", "i", ",", ":", ",", ":", ",", ":", "]", ")", ":", "\n", "            ", "for", "k_", ",", "k", "in", "enumerate", "(", "j", ")", ":", "\n", "                ", "assert", "k", ".", "shape", "[", "0", "]", "==", "num_classes", "\n", "k_value", "=", "np", ".", "max", "(", "softmax", "(", "k", ")", ")", "\n", "k_class", "=", "np", ".", "argmax", "(", "k", ")", "\n", "for", "it", ",", "iv", "in", "enumerate", "(", "inspect_split", ")", ":", "\n", "                    ", "if", "k_value", ">", "iv", ":", "break", "\n", "", "if", "iv", ">", "0", ":", "\n", "                    ", "pixels", "[", "k_", ",", "j_", "]", "=", "tuple", "(", "map", "(", "lambda", "x", ":", "int", "(", "inspect_ratio", "[", "it", "]", "*", "x", ")", ",", "label_colours", "[", "k_class", "]", ")", ")", "\n", "", "", "", "outputs", "[", "i", "]", "=", "np", ".", "array", "(", "img", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "outputs", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ".", "astype", "(", "'float32'", ")", ")", ".", "div_", "(", "255.0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_Dataset.__init__": [[17, 64], ["os.path.join", "os.path.join", "os.path.join", "print", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "open", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "self", ".", "color_jitter", "=", "args", ".", "color_jitter", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "items", ")", ",", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_Dataset.__getitem__": [[65, 85], ["os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open", "gta5_Dataset.GTA5_Dataset._train_sync_transform", "gta5_Dataset.GTA5_Dataset._val_sync_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "id", "=", "self", ".", "items", "[", "item", "]", "\n", "\n", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "gt_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_DataLoader.__init__": [[87, 133], ["gta5_Dataset.GTA5_Dataset", "gta5_Dataset.GTA5_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "GTA5_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "", "val_split", "=", "'val'", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "else", "'test'", "\n", "val_set", "=", "GTA5_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "val_split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "False", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "valid_iterations", "=", "(", "len", "(", "val_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "\n", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_xuanran_Dataset.__init__": [[137, 219], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.GTA5_xuanran_Dataset.label_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.GTA5_xuanran_Dataset.images_lst.append", "gta5_Dataset.GTA5_xuanran_Dataset.images_lst.extend", "os.path.join", "gta5_Dataset.GTA5_xuanran_Dataset.label_lst.append", "open", "range", "gta5_Dataset.GTA5_xuanran_Dataset.xuanran_lst.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst", ".", "extend", "(", "self", ".", "xuanran_lst", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_xuanran_Dataset.__getitem__": [[220, 244], ["PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.GTA5_xuanran_Dataset._train_sync_transform", "gta5_Dataset.GTA5_xuanran_Dataset._val_sync_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "        ", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_xuanran_Dataset.__len__": [[245, 247], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.GTA5_xuanran_DataLoader.__init__": [[250, 297], ["gta5_Dataset.GTA5_xuanran_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "GTA5_xuanran_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_Dataset.__init__": [[303, 391], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.Mix_Dataset.label_lst.extend", "gta5_Dataset.Mix_Dataset.raw_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.Mix_Dataset.images_lst.append", "gta5_Dataset.Mix_Dataset.images_lst.extend", "os.path.join", "gta5_Dataset.Mix_Dataset.label_lst.append", "os.path.join", "gta5_Dataset.Mix_Dataset.raw_lst.append", "open", "range", "gta5_Dataset.Mix_Dataset.xuanran_lst.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../../DATASETS/datasets_seg/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "", "self", ".", "images_lst", ".", "extend", "(", "self", ".", "xuanran_lst", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "", "self", ".", "raw_lst", ".", "extend", "(", "self", ".", "raw_lst", ")", "\n", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded!!!!!\"", ".", "format", "(", "len", "(", "self", ".", "images_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_Dataset.__getitem__": [[392, 422], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.Mix_Dataset._train_sync_transform", "gta5_Dataset.Mix_Dataset._val_sync_transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image_0", ")", "\n", "#image_raw, gt_image = self._train_sync_transform(image_raw, gt_image_0)", "\n", "#image = image * (1 - alpha)", "\n", "#img_raw = image_raw * alpha", "\n", "#image = torch.add(image, img_raw)", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_Dataset.__len__": [[423, 425], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_DataLoader.__init__": [[428, 475], ["gta5_Dataset.Mix_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "Mix_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Only_xuanran_Dataset.__init__": [[482, 565], ["os.path.join", "os.path.join", "os.path.join", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.Only_xuanran_Dataset.images_lst.append", "os.path.join", "gta5_Dataset.Only_xuanran_Dataset.label_lst.append", "open", "range", "gta5_Dataset.Only_xuanran_Dataset.xuanran_lst.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "", "", "self", ".", "images_lst", "=", "self", ".", "xuanran_lst", "\n", "\n", "\n", "\n", "\n", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Only_xuanran_Dataset.__getitem__": [[566, 588], ["PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.Only_xuanran_Dataset._train_sync_transform", "gta5_Dataset.Only_xuanran_Dataset._val_sync_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "        ", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Only_xuanran_Dataset.__len__": [[589, 591], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Only_xuanran_DataLoader.__init__": [[594, 641], ["gta5_Dataset.Only_xuanran_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "Only_xuanran_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_xuanran_Dataset.__init__": [[645, 728], ["os.path.join", "os.path.join", "os.path.join", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.Mix_xuanran_Dataset.images_lst.append", "os.path.join", "gta5_Dataset.Mix_xuanran_Dataset.label_lst.append", "open", "range", "gta5_Dataset.Mix_xuanran_Dataset.xuanran_lst.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "", "", "self", ".", "images_lst", "=", "self", ".", "xuanran_lst", "\n", "\n", "\n", "\n", "\n", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_xuanran_Dataset.__getitem__": [[729, 751], ["PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.Mix_xuanran_Dataset._train_sync_transform", "gta5_Dataset.Mix_xuanran_Dataset._val_sync_transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_sync_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "        ", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image", ")", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_xuanran_Dataset.__len__": [[752, 754], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Mix_xuanran_DataLoader.__init__": [[757, 804], ["gta5_Dataset.Mix_xuanran_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "Mix_xuanran_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_Dataset_style_1_2.__init__": [[815, 926], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.CowMix_Dataset_style_1_2.label_lst.extend", "gta5_Dataset.CowMix_Dataset_style_1_2.raw_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.CowMix_Dataset_style_1_2.images_lst_1.append", "os.path.join", "gta5_Dataset.CowMix_Dataset_style_1_2.images_lst_2.append", "gta5_Dataset.CowMix_Dataset_style_1_2.images_lst_1.extend", "gta5_Dataset.CowMix_Dataset_style_1_2.images_lst_2.extend", "os.path.join", "gta5_Dataset.CowMix_Dataset_style_1_2.label_lst.append", "os.path.join", "gta5_Dataset.CowMix_Dataset_style_1_2.raw_lst.append", "open", "range", "gta5_Dataset.CowMix_Dataset_style_1_2.xuanran_lst_1.append", "range", "gta5_Dataset.CowMix_Dataset_style_1_2.xuanran_lst_2.append", "len", "len", "os.path.join", "element.append", "len", "os.path.join", "element.append", "random.sample", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst_1", "=", "[", "]", "\n", "self", ".", "images_lst_2", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst_1", ".", "append", "(", "image_path", ")", "\n", "\n", "", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst_2", ".", "append", "(", "image_path", ")", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst_1", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst_1", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst_1", ".", "extend", "(", "self", ".", "xuanran_lst_1", ")", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst_2", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst_2", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst_2", ".", "extend", "(", "self", ".", "xuanran_lst_2", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "", "self", ".", "raw_lst", ".", "extend", "(", "self", ".", "raw_lst", ")", "\n", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_Dataset_style_1_2.__getitem__": [[927, 957], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.CowMix_Dataset_style_1_2._train_s1_s2_transform", "gta5_Dataset.CowMix_Dataset_style_1_2._val_sync_transform", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_s1_s2_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst_1", "[", "idx", "]", "\n", "image_1", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "image_path", "=", "self", ".", "images_lst_2", "[", "idx", "]", "\n", "image_2", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_s1_s2_transform", "(", "image_1", ",", "image_2", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image_1", ",", "gt_image_0", ")", "\n", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_Dataset_style_1_2.__len__": [[958, 960], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_s1_s2_DataLoader.__init__": [[963, 996], ["gta5_Dataset.CowMix_Dataset_style_1_2", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "CowMix_Dataset_style_1_2", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_Dataset_r_s.__init__": [[999, 1091], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.CowMix_Dataset_r_s.label_lst.extend", "gta5_Dataset.CowMix_Dataset_r_s.raw_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.CowMix_Dataset_r_s.images_lst_1.append", "gta5_Dataset.CowMix_Dataset_r_s.images_lst_1.extend", "os.path.join", "gta5_Dataset.CowMix_Dataset_r_s.label_lst.append", "os.path.join", "gta5_Dataset.CowMix_Dataset_r_s.raw_lst.append", "open", "range", "gta5_Dataset.CowMix_Dataset_r_s.xuanran_lst_1.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst_1", "=", "[", "]", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst_1", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst_1", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst_1", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst_1", ".", "extend", "(", "self", ".", "xuanran_lst_1", ")", "\n", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "", "self", ".", "raw_lst", ".", "extend", "(", "self", ".", "raw_lst", ")", "\n", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_Dataset_r_s.__getitem__": [[1092, 1121], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.CowMix_Dataset_r_s._train_r_s_transform", "gta5_Dataset.CowMix_Dataset_r_s._val_sync_transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_r_s_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst_1", "[", "idx", "]", "\n", "image_1", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_train_r_s_transform", "(", "image_1", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image_1", ",", "gt_image_0", ")", "\n", "\n", "\n", "", "return", "image", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_Dataset_r_s.__len__": [[1122, 1124], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.CowMix_r_s_DataLoader.__init__": [[1127, 1160], ["gta5_Dataset.CowMix_Dataset_r_s", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "CowMix_Dataset_r_s", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.PS_Dataset.__init__": [[1165, 1254], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.PS_Dataset.label_lst.extend", "gta5_Dataset.PS_Dataset.raw_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.PS_Dataset.images_lst.append", "gta5_Dataset.PS_Dataset.images_lst.extend", "os.path.join", "gta5_Dataset.PS_Dataset.label_lst.append", "os.path.join", "gta5_Dataset.PS_Dataset.raw_lst.append", "open", "range", "gta5_Dataset.PS_Dataset.xuanran_lst.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst", ".", "extend", "(", "self", ".", "xuanran_lst", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "", "self", ".", "raw_lst", ".", "extend", "(", "self", ".", "raw_lst", ")", "\n", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.PS_Dataset.__getitem__": [[1255, 1285], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.PS_Dataset._train_PS_transform", "gta5_Dataset.PS_Dataset._val_sync_transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_PS_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "image_raw", ",", "gt_image", "=", "self", ".", "_train_PS_transform", "(", "image", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image_0", ")", "\n", "#image_raw, gt_image = self._train_sync_transform(image_raw, gt_image_0)", "\n", "#image = image * (1 - alpha)", "\n", "#img_raw = image_raw * alpha", "\n", "#image = torch.add(image, img_raw)", "\n", "\n", "", "return", "image", ",", "image_raw", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.PS_Dataset.__len__": [[1286, 1288], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.PartStyle_DataLoader.__init__": [[1291, 1338], ["gta5_Dataset.PS_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "PS_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Raw_TR_Dataset.__init__": [[1346, 1435], ["os.path.join", "os.path.join", "os.path.join", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "gta5_Dataset.Raw_TR_Dataset.images_lst.extend", "os.path.join", "gta5_Dataset.Raw_TR_Dataset.label_lst.append", "os.path.join", "gta5_Dataset.Raw_TR_Dataset.raw_lst.append", "open", "range", "gta5_Dataset.Raw_TR_Dataset.xuanran_lst.append", "len", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "# for id in self.items:", "\n", "#     image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "#     self.images_lst.append(image_path)", "\n", "\n", "\n", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst", ".", "extend", "(", "self", ".", "xuanran_lst", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "# self.label_lst.extend(self.label_lst)", "\n", "\n", "", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "# self.raw_lst.extend(self.raw_lst)", "\n", "\n", "\n", "\n", "\n", "", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Raw_TR_Dataset.__getitem__": [[1436, 1466], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.Raw_TR_Dataset._train_PS_transform", "gta5_Dataset.Raw_TR_Dataset._val_sync_transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_PS_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "image_raw", ",", "gt_image", "=", "self", ".", "_train_PS_transform", "(", "image", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image_0", ")", "\n", "#image_raw, gt_image = self._train_sync_transform(image_raw, gt_image_0)", "\n", "#image = image * (1 - alpha)", "\n", "#img_raw = image_raw * alpha", "\n", "#image = torch.add(image, img_raw)", "\n", "\n", "", "return", "image", ",", "image_raw", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Raw_TR_Dataset.__len__": [[1467, 1469], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Raw_TR_DataLoader.__init__": [[1472, 1519], ["gta5_Dataset.Raw_TR_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "Raw_TR_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.R_SS_Dataset.__init__": [[1525, 1619], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.R_SS_Dataset.label_lst.extend", "gta5_Dataset.R_SS_Dataset.raw_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.R_SS_Dataset.images_lst.append", "gta5_Dataset.R_SS_Dataset.images_lst_2.append", "gta5_Dataset.R_SS_Dataset.images_lst.extend", "gta5_Dataset.R_SS_Dataset.images_lst_2.extend", "os.path.join", "gta5_Dataset.R_SS_Dataset.label_lst.append", "os.path.join", "gta5_Dataset.R_SS_Dataset.raw_lst.append", "open", "range", "gta5_Dataset.R_SS_Dataset.xuanran_lst.append", "gta5_Dataset.R_SS_Dataset.xuanran_lst_2.append", "len", "len", "os.path.join", "element.append", "random.sample", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "self", ".", "images_lst_2", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "self", ".", "images_lst_2", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "self", ".", "xuanran_lst_2", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "self", ".", "xuanran_lst_2", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst", ".", "extend", "(", "self", ".", "xuanran_lst", ")", "\n", "self", ".", "images_lst_2", ".", "extend", "(", "self", ".", "xuanran_lst_2", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "", "self", ".", "raw_lst", ".", "extend", "(", "self", ".", "raw_lst", ")", "\n", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.R_SS_Dataset.__getitem__": [[1620, 1653], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.R_SS_Dataset._train_RSS_transform", "gta5_Dataset.R_SS_Dataset._val_sync_transform", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._train_RSS_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image_path_2", "=", "self", ".", "images_lst_2", "[", "idx", "]", "\n", "image_2", "=", "Image", ".", "open", "(", "image_path_2", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "image_2", ",", "image_raw", ",", "gt_image", "=", "self", ".", "_train_RSS_transform", "(", "image", ",", "image_2", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image_0", ")", "\n", "#image_raw, gt_image = self._train_sync_transform(image_raw, gt_image_0)", "\n", "#image = image * (1 - alpha)", "\n", "#img_raw = image_raw * alpha", "\n", "#image = torch.add(image, img_raw)", "\n", "\n", "", "return", "image", ",", "image_2", ",", "image_raw", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.R_SS_Dataset.__len__": [[1654, 1656], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.RSS_DataLoader.__init__": [[1659, 1706], ["gta5_Dataset.R_SS_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "R_SS_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.F_R_SS_Dataset.__init__": [[1711, 1805], ["os.path.join", "os.path.join", "os.path.join", "gta5_Dataset.F_R_SS_Dataset.label_lst.extend", "gta5_Dataset.F_R_SS_Dataset.raw_lst.extend", "print", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.F_R_SS_Dataset.images_lst.append", "gta5_Dataset.F_R_SS_Dataset.images_lst_2.append", "gta5_Dataset.F_R_SS_Dataset.images_lst.extend", "gta5_Dataset.F_R_SS_Dataset.images_lst_2.extend", "os.path.join", "gta5_Dataset.F_R_SS_Dataset.label_lst.append", "os.path.join", "gta5_Dataset.F_R_SS_Dataset.raw_lst.append", "open", "range", "gta5_Dataset.F_R_SS_Dataset.xuanran_lst.append", "gta5_Dataset.F_R_SS_Dataset.xuanran_lst_2.append", "len", "len", "os.path.join", "element.append", "random.sample", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "random_mirror", "=", "args", ".", "random_mirror", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "self", ".", "gaussian_blur", "=", "args", ".", "gaussian_blur", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "self", ".", "images_lst_2", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "self", ".", "images_lst_2", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "self", ".", "xuanran_lst_2", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "self", ".", "xuanran_lst_2", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "self", ".", "images_lst", ".", "extend", "(", "self", ".", "xuanran_lst", ")", "\n", "self", ".", "images_lst_2", ".", "extend", "(", "self", ".", "xuanran_lst_2", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", ".", "extend", "(", "self", ".", "label_lst", ")", "\n", "\n", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "", "self", ".", "raw_lst", ".", "extend", "(", "self", ".", "raw_lst", ")", "\n", "\n", "\n", "\n", "\n", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "print", "(", "\"{} num images in GTA5 {} set have been loaded.\"", ".", "format", "(", "len", "(", "self", ".", "label_lst", ")", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.F_R_SS_Dataset.__getitem__": [[1806, 1839], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "gta5_Dataset.F_R_SS_Dataset._Fa_RSS_transform", "gta5_Dataset.F_R_SS_Dataset._val_sync_transform", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._Fa_RSS_transform", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.Beiyong_Dataset._val_sync_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "\n", "        ", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "images_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image_path_2", "=", "self", ".", "images_lst_2", "[", "idx", "]", "\n", "image_2", "=", "Image", ".", "open", "(", "image_path_2", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "\n", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{0:05d}.png\".format(id))", "\n", "# gt_image_path = os.path.join(self.gt_filepath, \"{}.png\".format(id))", "\n", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image_0", "=", "Image", ".", "open", "(", "gt_image_path", ")", "\n", "\n", "if", "(", "self", ".", "split", "==", "\"train\"", "or", "self", ".", "split", "==", "\"trainval\"", "or", "self", ".", "split", "==", "\"all\"", ")", "and", "self", ".", "training", ":", "\n", "            ", "image", ",", "image_2", ",", "image_raw", ",", "gt_image", "=", "self", ".", "_Fa_RSS_transform", "(", "image", ",", "image_2", ",", "image_raw", ",", "gt_image_0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "image", ",", "gt_image", "=", "self", ".", "_val_sync_transform", "(", "image", ",", "gt_image_0", ")", "\n", "#image_raw, gt_image = self._train_sync_transform(image_raw, gt_image_0)", "\n", "#image = image * (1 - alpha)", "\n", "#img_raw = image_raw * alpha", "\n", "#image = torch.add(image, img_raw)", "\n", "\n", "", "return", "image", ",", "image_2", ",", "image_raw", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.F_R_SS_Dataset.__len__": [[1840, 1842], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.F_RSS_DataLoader.__init__": [[1845, 1892], ["gta5_Dataset.F_R_SS_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "F_R_SS_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "# val_split = 'val' if self.args.split == \"train\" else 'test'", "\n", "# val_set = GTA5_xuanran_Dataset(args,", "\n", "#                     data_root_path=args.data_root_path,", "\n", "#                     list_path=args.list_path,", "\n", "#                     split=val_split,", "\n", "#                     base_size=args.base_size,", "\n", "#                     crop_size=args.crop_size,", "\n", "#                     training=False)", "\n", "# self.val_loader = data.DataLoader(val_set,", "\n", "#                                     batch_size=self.args.batch_size,", "\n", "#                                     shuffle=False,", "\n", "#                                     num_workers=self.args.data_loader_workers,", "\n", "#                                     pin_memory=self.args.pin_memory,", "\n", "#                                     drop_last=True)", "\n", "# self.valid_iterations = (len(val_set) + self.args.batch_size) // self.args.batch_size", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Print_Dataset.__init__": [[1897, 1986], ["os.path.join", "os.path.join", "os.path.join", "len", "isinstance", "isinstance", "os.path.exists", "Warning", "id.strip", "os.path.join", "gta5_Dataset.Print_Dataset.images_lst.append", "os.path.join", "gta5_Dataset.Print_Dataset.raw_lst.append", "os.path.join", "gta5_Dataset.Print_Dataset.label_lst.append", "open", "range", "gta5_Dataset.Print_Dataset.xuanran_lst.append", "len", "os.path.join", "element.append", "random.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "data_root_path", "=", "'../datasets/GTA5'", ",", "\n", "list_path", "=", "'../datasets/GTA5/list'", ",", "\n", "split", "=", "'train'", ",", "\n", "base_size", "=", "769", ",", "\n", "crop_size", "=", "769", ",", "\n", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "xuanran", "=", "args", ".", "xuanran_path", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_path", "=", "data_root_path", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "self", ".", "base_size", "=", "self", ".", "base_size", "if", "isinstance", "(", "self", ".", "base_size", ",", "tuple", ")", "else", "(", "self", ".", "base_size", ",", "self", ".", "base_size", ")", "\n", "self", ".", "crop_size", "=", "self", ".", "crop_size", "if", "isinstance", "(", "self", ".", "crop_size", ",", "tuple", ")", "else", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "training", "=", "training", "\n", "\n", "\n", "self", ".", "random_crop", "=", "args", ".", "random_crop", "\n", "self", ".", "resize", "=", "args", ".", "resize", "\n", "\n", "\n", "item_list_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "list_path", ",", "self", ".", "split", "+", "\".txt\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "item_list_filepath", ")", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainval/test/all\"", ")", "\n", "\n", "", "self", ".", "image_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"images\"", ")", "\n", "self", ".", "gt_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"labels\"", ")", "\n", "\n", "\n", "# self.items = [int(id.strip()) for id in open(item_list_filepath)]", "\n", "self", ".", "items", "=", "[", "id", ".", "strip", "(", ")", "for", "id", "in", "open", "(", "item_list_filepath", ")", "]", "\n", "self", ".", "images_lst", "=", "[", "]", "\n", "self", ".", "images_lst_2", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "images_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "\n", "", "if", "self", ".", "xuanran", "is", "not", "None", ":", "\n", "            ", "self", ".", "xuanran_lst", "=", "[", "]", "\n", "\n", "\n", "\n", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "xuanran", ")", ")", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "xuanran", "[", "i", "]", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "\n", "element", ".", "append", "(", "image_path", ")", "\n", "\n", "", "self", ".", "xuanran_lst", ".", "append", "(", "random", ".", "sample", "(", "element", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "self", ".", "raw_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "raw_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "self", ".", "label_lst", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "items", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_filepath", ",", "\"{}.png\"", ".", "format", "(", "id", ")", ")", "\n", "self", ".", "label_lst", ".", "append", "(", "image_path", ")", "\n", "\n", "\n", "", "ignore_label", "=", "-", "1", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "class_16", "=", "False", "\n", "self", ".", "class_13", "=", "False", "\n", "\n", "\n", "self", ".", "total_num", "=", "len", "(", "self", ".", "images_lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Print_Dataset.__getitem__": [[1987, 2011], ["torchvision.Compose", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "torchvision.Compose.", "torchvision.Compose.", "torchvision.Compose.", "torch.add", "torch.add", "torch.add", "torch.add", "torchvision.ToTensor", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "loader", "=", "ttransforms", ".", "Compose", "(", "[", "ttransforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "alpha", "=", "self", ".", "args", ".", "alpha", "\n", "# image_path = os.path.join(self.image_filepath, \"{0:05d}.png\".format(id))", "\n", "# image_path = os.path.join(self.image_filepath, \"{}.png\".format(id))", "\n", "image_path", "=", "self", ".", "xuanran_lst", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image_raw", "=", "Image", ".", "open", "(", "self", ".", "raw_lst", "[", "idx", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "gt_image_path", "=", "self", ".", "label_lst", "[", "idx", "]", "\n", "gt_image", "=", "Image", ".", "open", "(", "gt_image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "image", "=", "loader", "(", "image", ")", "\n", "image_raw", "=", "loader", "(", "image_raw", ")", "\n", "gt_image", "=", "loader", "(", "gt_image", ")", "\n", "\n", "image", "=", "image", "*", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "\n", "img_raw_w", "=", "image_raw", "*", "self", ".", "args", ".", "alpha", "\n", "img", "=", "torch", ".", "add", "(", "image", ",", "img_raw_w", ")", "\n", "\n", "\n", "\n", "\n", "\n", "return", "img", ",", "image_raw", ",", "gt_image", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Print_Dataset.__len__": [[2012, 2014], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.gta5_Dataset.Print_DataLoader.__init__": [[2017, 2049], ["gta5_Dataset.Print_Dataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "Warning", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "training", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "data_set", "=", "Print_Dataset", "(", "args", ",", "\n", "data_root_path", "=", "args", ".", "data_root_path", ",", "\n", "list_path", "=", "args", ".", "list_path", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "base_size", "=", "args", ".", "base_size", ",", "\n", "crop_size", "=", "args", ".", "crop_size", ",", "\n", "training", "=", "training", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "split", "==", "\"train\"", "or", "self", ".", "args", ".", "split", "==", "\"trainval\"", "or", "self", ".", "args", ".", "split", "==", "\"all\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "split", "==", "\"val\"", "or", "self", ".", "args", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data_loader", "=", "data", ".", "DataLoader", "(", "data_set", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "self", ".", "args", ".", "pin_memory", ",", "\n", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Warning", "(", "\"split must be train/val/trainavl/test/all\"", ")", "\n", "\n", "\n", "", "self", ".", "num_iterations", "=", "(", "len", "(", "data_set", ")", "+", "self", ".", "args", ".", "batch_size", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "# self.num_iterations = 50", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.WeightedCrossEntropyLoss.__init__": [[49, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "0", ",", "ignore", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "ignore", "=", "ignore", "\n", "", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.WeightedCrossEntropyLoss.forward": [[53, 85], ["range", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "lis.append", "type", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "range", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum().cpu().numpy.item", "torch.sum().cpu().numpy.item", "torch.sum().cpu().numpy.item", "torch.sum().cpu().numpy.item", "torch.prod().float.item", "torch.prod().float.item", "torch.prod().float.item", "torch.prod().float.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "lis", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "# non_zero_num = torch.nonzero(target).shape[0]", "\n", "# print(type(non_zero_num))", "\n", "            ", "gt", "=", "(", "target", "==", "i", ")", ".", "float", "(", ")", "# B", "\n", "inter", "=", "torch", ".", "sum", "(", "gt", ",", "dim", "=", "(", "0", ",", "1", ",", "2", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B", "\n", "\n", "\n", "total_num", "=", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "target", ".", "shape", ")", ")", ".", "float", "(", ")", "\n", "\n", "k", "=", "inter", ".", "item", "(", ")", "/", "total_num", ".", "item", "(", ")", "\n", "\n", "lis", ".", "append", "(", "1", "-", "k", ")", "\n", "# print(lis)", "\n", "\n", "", "scaled_weight", "=", "torch", ".", "tensor", "(", "lis", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "# scaled_weight = torch.tensor([]).cuda(self.device)", "\n", "\n", "# non_zero_num = torch.nonzero(target).shape[0]", "\n", "# total_num = torch.prod(torch.tensor(target.shape)).float()", "\n", "# k = non_zero_num / total_num", "\n", "# scaled_weight = torch.tensor([k, 1-k]).cuda(self.device)", "\n", "\n", "if", "type", "(", "output", ")", "==", "list", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "output", "[", "0", "]", ",", "target", ",", "weight", "=", "scaled_weight", ",", "ignore_index", "=", "self", ".", "ignore", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "output", ")", ")", ":", "\n", "                ", "loss", "+=", "F", ".", "cross_entropy", "(", "output", "[", "i", "]", ",", "target", ",", "weight", "=", "scaled_weight", ",", "ignore_index", "=", "self", ".", "ignore", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "weight", "=", "scaled_weight", ",", "ignore_index", "=", "self", ".", "ignore", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.__init__": [[93, 172], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "tensorboardX.SummaryWriter", "utils.eval.Eval", "train.Trainer.loss.cuda", "utils.train_helper.get_model", "train.Trainer.model.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "min", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "WeightedCrossEntropyLoss().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "train.Trainer.model.load_state_dict", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "datasets.cityscapes_Dataset.City_DataLoader", "datasets.cityscapes_Dataset.City_DataLoader", "datasets.synthia_Dataset.SYNTHIA_DataLoader", "math.ceil", "math.ceil", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "datasets.gta5_Dataset.GTA5_DataLoader", "datasets.synthia_Dataset.SYNTHIA_DataLoader", "train.WeightedCrossEntropyLoss", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.train_helper.get_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "cuda", "=", "None", ",", "train_id", "=", "\"None\"", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "ITER_MAX", "=", "args", ".", "each_epoch_iters", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "device_ids", "[", "0", "]", ")", ")", "\n", "# os.environ[\"CUDA_VISIBLE_DEVICES\"] = self.args.gpu", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\"2\"", "\n", "self", ".", "cuda", "=", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "# self.device = torch.device('cuda' if self.cuda else 'cpu')", "\n", "self", ".", "train_id", "=", "train_id", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "current_MIoU", "=", "0", "\n", "self", ".", "best_MIou", "=", "0", "\n", "self", ".", "best_source_MIou", "=", "0", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "current_iter", "=", "0", "\n", "self", ".", "second_best_MIou", "=", "0", "\n", "\n", "# set TensorboardX", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "args", ".", "checkpoint_dir", ")", "\n", "\n", "# Metric definition", "\n", "self", ".", "Eval", "=", "Eval", "(", "self", ".", "args", ".", "num_classes", ")", "\n", "\n", "# loss definition", "\n", "if", "args", ".", "weight_loss", ":", "\n", "            ", "self", ".", "loss", "=", "WeightedCrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", "\n", "\n", "# self.loss.to(self.device)", "\n", "", "self", ".", "loss", "=", "self", ".", "loss", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "\n", "# model", "\n", "self", ".", "model", ",", "params", "=", "get_model", "(", "self", ".", "args", ")", "\n", "if", "args", ".", "use_trained", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'2.pt'", ")", ")", ")", "\n", "self", ".", "model", ".", "restored", "=", "True", "\n", "\n", "\n", "# self.model.to(self.device)", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "# if torch.cuda.is_available():", "\n", "#     if len(device_ids) > 1:", "\n", "#         self.model.to(torch.device('cuda:{}'.format(0)))", "\n", "#         self.model = torch.nn.DataParallel(self.model, device_ids=device_ids)", "\n", "#     else:", "\n", "#         self.model.to(torch.device('cuda:{}'.format(0)))", "\n", "# self.model = nn.DataParallel(self.model, device_ids=[0,1,2,3,4,5,6])", "\n", "# self.model.to(self.device)", "\n", "\n", "if", "self", ".", "args", ".", "optim", "==", "\"SGD\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "params", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", "\n", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "                ", "self", ".", "optimizer", "=", "nn", ".", "DataParallel", "(", "self", ".", "optimizer", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "optim", "==", "\"Adam\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "# dataloader", "\n", "", "if", "self", ".", "args", ".", "dataset", "==", "\"cityscapes\"", ":", "\n", "            ", "self", ".", "dataloader", "=", "City_DataLoader", "(", "self", ".", "args", ")", "\n", "", "elif", "self", ".", "args", ".", "dataset", "==", "\"gta5\"", ":", "\n", "            ", "self", ".", "dataloader", "=", "GTA5_DataLoader", "(", "self", ".", "args", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataloader", "=", "SYNTHIA_DataLoader", "(", "self", ".", "args", ")", "\n", "", "if", "self", ".", "args", ".", "val_dataset", "==", "\"cityscapes\"", ":", "\n", "            ", "self", ".", "test_dataloader", "=", "City_DataLoader", "(", "self", ".", "args", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_dataloader", "=", "SYNTHIA_DataLoader", "(", "self", ".", "args", ")", "\n", "", "self", ".", "dataloader", ".", "num_iterations", "=", "min", "(", "self", ".", "dataloader", ".", "num_iterations", ",", "ITER_MAX", ")", "\n", "print", "(", "self", ".", "args", ".", "iter_max", ",", "self", ".", "dataloader", ".", "num_iterations", ")", "\n", "self", ".", "epoch_num", "=", "ceil", "(", "self", ".", "args", ".", "iter_max", "/", "self", ".", "dataloader", ".", "num_iterations", ")", "if", "self", ".", "args", ".", "iter_stop", "is", "None", "else", "ceil", "(", "self", ".", "args", ".", "iter_stop", "/", "self", ".", "dataloader", ".", "num_iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.main": [[173, 202], ["train.Trainer.logger.info", "vars().items", "train.Trainer.train", "train.Trainer.writer.close", "train.Trainer.logger.info", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "train.Trainer.logger.info", "train.Trainer.logger.info", "os.path.isdir", "train.Trainer.load_checkpoint", "train.Trainer.load_checkpoint", "vars", "os.path.join", "os.path.join", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.train", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.load_checkpoint", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.load_checkpoint"], ["", "def", "main", "(", "self", ")", ":", "\n", "# display args details", "\n", "        ", "self", ".", "logger", ".", "info", "(", "\"Global configuration as follows:\"", ")", "\n", "for", "key", ",", "val", "in", "vars", "(", "self", ".", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"{:16} {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "# choose cuda", "\n", "", "if", "self", ".", "cuda", ":", "\n", "            ", "current_device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"This model will run on {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "get_device_name", "(", "current_device", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"This model will run on CPU\"", ")", "\n", "\n", "# load pretrained checkpoint", "\n", "", "if", "self", ".", "args", ".", "pretrained_ckpt_file", "is", "not", "None", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "args", ".", "pretrained_ckpt_file", ")", ":", "\n", "                ", "self", ".", "args", ".", "pretrained_ckpt_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint_dir", ",", "self", ".", "train_id", "+", "'best.pth'", ")", "\n", "", "self", ".", "load_checkpoint", "(", "self", ".", "args", ".", "pretrained_ckpt_file", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "continue_training", ":", "\n", "            ", "self", ".", "load_checkpoint", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint_dir", ",", "self", ".", "train_id", "+", "'best.pth'", ")", ")", "\n", "self", ".", "best_iter", "=", "self", ".", "current_iter", "\n", "self", ".", "best_source_iter", "=", "self", ".", "current_iter", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_epoch", "=", "0", "\n", "# train", "\n", "", "self", ".", "train", "(", ")", "\n", "\n", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.train": [[203, 247], ["range", "train.Trainer.logger.info", "train.Trainer.logger.info", "train.Trainer.save_checkpoint", "train.Trainer.train_one_epoch", "train.Trainer.validate", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.model.state_dict", "train.Trainer.optimizer.state_dict", "train.Trainer.model.module.state_dict", "os.path.join", "train.Trainer.logger.info", "train.Trainer.save_checkpoint", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.logger.info", "train.Trainer.logger.info", "os.path.join", "train.Trainer.model.module.state_dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.train_one_epoch", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.validate", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "# self.validate() # check image summary", "\n", "        ", "pixel_num", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "current_epoch", ",", "self", ".", "epoch_num", ")", ":", "\n", "\n", "            ", "self", ".", "train_one_epoch", "(", "pixel_num", "=", "pixel_num", ")", "\n", "# validate", "\n", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "=", "self", ".", "validate", "(", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'PA'", ",", "PA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MPA'", ",", "MPA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MIoU'", ",", "MIoU", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'FWIoU'", ",", "FWIoU", ",", "self", ".", "current_epoch", ")", "\n", "#", "\n", "self", ".", "current_MIoU", "=", "MIoU", "\n", "is_best", "=", "MIoU", ">", "self", ".", "best_MIou", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "\n", "if", "is_best", ":", "\n", "\n", "                ", "self", ".", "best_MIou", "=", "MIoU", "\n", "self", ".", "best_iter", "=", "self", ".", "current_iter", "\n", "self", ".", "logger", ".", "info", "(", "\"=>saving a new best checkpoint...\"", ")", "\n", "self", ".", "save_checkpoint", "(", "self", ".", "train_id", "+", "'best.pth'", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'best.pt'", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"=> The MIoU of val does't improve.\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"=> The best MIoU of val is {} at {}\"", ".", "format", "(", "self", ".", "best_MIou", ",", "self", ".", "best_iter", ")", ")", "\n", "\n", "", "self", ".", "current_epoch", "+=", "1", "\n", "\n", "", "state", "=", "{", "\n", "'epoch'", ":", "self", ".", "current_epoch", "+", "1", ",", "\n", "'iteration'", ":", "self", ".", "current_iter", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_MIou'", ":", "self", ".", "current_MIoU", "\n", "}", "\n", "self", ".", "logger", ".", "info", "(", "\"=>best_MIou {} at {}\"", ".", "format", "(", "self", ".", "best_MIou", ",", "self", ".", "best_iter", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"=>saving the final checkpoint to \"", "+", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint_dir", ",", "self", ".", "train_id", "+", "'final.pth'", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "self", ".", "train_id", "+", "'final.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.get_one_hot": [[248, 258], ["list", "label.view.view.view", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "torch.sparse.torch.eye().to", "ones.transpose.transpose.index_select", "list.append", "ones.transpose.transpose.view", "ones.transpose.transpose.transpose", "ones.transpose.transpose.transpose", "label.view.view.size", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye", "torch.sparse.torch.eye"], "methods", ["None"], ["", "def", "get_one_hot", "(", "self", ",", "label", ",", "N", ")", ":", "\n", "        ", "size", "=", "list", "(", "label", ".", "size", "(", ")", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ")", "\n", "ones", "=", "torch", ".", "sparse", ".", "torch", ".", "eye", "(", "N", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "ones", "=", "ones", ".", "index_select", "(", "0", ",", "label", ")", "\n", "size", ".", "append", "(", "N", ")", "\n", "ones", "=", "ones", ".", "view", "(", "*", "size", ")", "\n", "ones", "=", "ones", ".", "transpose", "(", "2", ",", "3", ")", "\n", "ones", "=", "ones", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "ones", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.train_one_epoch": [[259, 450], ["tqdm.tqdm.tqdm", "train.Trainer.logger.info", "train.Trainer.Eval.reset", "numpy.mean", "sorted", "print", "train.Trainer.log_one_train_epoch", "tqdm.tqdm.tqdm.close", "train.Trainer.model.eval", "train.Trainer.logger.info", "train.Trainer.model.train", "train.Trainer.poly_lr_scheduler", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "train.Trainer.optimizer.zero_grad", "train.Trainer.model", "train.Trainer.model.state_dict().keys", "weights_t.squeeze", "weights_t.squeeze", "isinstance", "a_.to.to.to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "train.Trainer.get_one_hot().to", "sum", "train.Trainer.model.module.SAN_stage_2.relu", "sum", "train.Trainer.model.module.SAN_stage_1.relu", "train.Trainer.loss", "range", "pixel_num.append", "tqdm.tqdm.tqdm.set_postfix", "cur_loss.backward", "train_loss.append", "numpy.isnan", "pred.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "torch.squeeze.cpu().numpy", "numpy.argmax", "train.Trainer.Eval.add_batch", "range", "train.Trainer.logger.info", "train.Trainer.logger.info", "len", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "train.Trainer.model.module.SAN_stage_2.IN", "outs_lay2.append", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "train.Trainer.model.module.SAN_stage_1.IN", "outs_lay1.append", "train.Trainer.loss", "train.Trainer.loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "torch.prod().float", "lis.append", "len", "train.Trainer.optimizer.module.step", "train.Trainer.optimizer.step", "cur_loss.item", "float", "ValueError", "len", "x.to", "torch.squeeze.to", "torch.squeeze.to", "torch.squeeze.to", "torch.squeeze.to", "train.Trainer.model.state_dict", "selected_keys_classify_1.append", "selected_keys_classify_2.append", "train.Trainer.model.state_dict", "train.Trainer.model.state_dict", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "train.Trainer.get_one_hot", "torch.sum().cpu().numpy.item", "torch.sum().cpu().numpy.item", "torch.sum().cpu().numpy.item", "torch.sum().cpu().numpy.item", "torch.prod().float.item", "torch.prod().float.item", "torch.prod().float.item", "torch.prod().float.item", "train.Trainer.loss", "loss_2.cpu().item", "cur_loss.item", "train.Trainer.item", "cur_loss.item", "pred.data.cpu().numpy.data.cpu().numpy.data.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.cpu", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.squeeze.size", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "mid_lay2_ori.size", "mid_lay1_ori.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss_2.cpu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.reset", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.log_one_train_epoch", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.train", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.poly_lr_scheduler", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.sync_switchwhiten.SyncMeanCov.backward", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.add_batch", "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.get_one_hot"], ["", "def", "train_one_epoch", "(", "self", ",", "pixel_num", ")", ":", "\n", "        ", "tqdm_epoch", "=", "tqdm", "(", "self", ".", "dataloader", ".", "data_loader", ",", "\n", "total", "=", "self", ".", "dataloader", ".", "num_iterations", ",", "\n", "desc", "=", "\"Train Epoch-{}-total-{}\"", ".", "format", "(", "self", ".", "current_epoch", "+", "1", ",", "self", ".", "epoch_num", ")", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Training one epoch...\"", ")", "\n", "self", ".", "Eval", ".", "reset", "(", ")", "\n", "\n", "train_loss", "=", "[", "]", "\n", "loss_seg_value_2", "=", "0", "\n", "iter_num", "=", "self", ".", "dataloader", ".", "num_iterations", "\n", "\n", "if", "self", ".", "args", ".", "freeze_bn", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"freeze bacth normalization successfully!\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "# Initialize your average meters", "\n", "\n", "", "batch_idx", "=", "0", "\n", "\n", "for", "x", ",", "y", ",", "_", "in", "tqdm_epoch", ":", "\n", "            ", "self", ".", "poly_lr_scheduler", "(", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "init_lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "iter", "=", "self", ".", "current_iter", ",", "\n", "max_iter", "=", "self", ".", "args", ".", "iter_max", ",", "\n", "power", "=", "self", ".", "args", ".", "poly_power", ",", "\n", ")", "\n", "if", "self", ".", "args", ".", "iter_stop", "is", "not", "None", "and", "self", ".", "current_iter", ">=", "self", ".", "args", ".", "iter_stop", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"iteration arrive {}(early stop)/{}(total step)!\"", ".", "format", "(", "self", ".", "args", ".", "iter_stop", ",", "self", ".", "args", ".", "iter_max", ")", ")", "\n", "break", "\n", "", "if", "self", ".", "current_iter", ">=", "self", ".", "args", ".", "iter_max", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"iteration arrive {}!\"", ".", "format", "(", "self", ".", "args", ".", "iter_max", ")", ")", "\n", "break", "\n", "", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "self", ".", "optimizer", ".", "module", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "self", ".", "current_iter", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "self", ".", "current_iter", ")", "\n", "\n", "", "if", "self", ".", "cuda", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "to", "(", "self", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "y", "=", "torch", ".", "squeeze", "(", "y", ",", "1", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# model", "\n", "pred", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "\n", "weights_keys", "=", "self", ".", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "\n", "selected_keys_classify_1", "=", "[", "]", "\n", "selected_keys_classify_2", "=", "[", "]", "\n", "for", "key", "in", "weights_keys", ":", "\n", "                ", "if", "\"classifier_1.weight\"", "in", "key", ":", "\n", "                    ", "selected_keys_classify_1", ".", "append", "(", "key", ")", "\n", "", "if", "\"classifier_2.weight\"", "in", "key", ":", "\n", "                    ", "selected_keys_classify_2", ".", "append", "(", "key", ")", "\n", "\n", "", "", "for", "key", "in", "selected_keys_classify_1", ":", "\n", "                ", "if", "\"num_batches_tracked\"", "in", "key", ":", "\n", "                    ", "continue", "\n", "", "weights_t", "=", "self", ".", "model", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "", "classsifier_1_weights", "=", "weights_t", ".", "squeeze", "(", ")", "\n", "for", "key", "in", "selected_keys_classify_2", ":", "\n", "                ", "if", "\"num_batches_tracked\"", "in", "key", ":", "\n", "                    ", "continue", "\n", "", "weights_t", "=", "self", ".", "model", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "", "classsifier_2_weights", "=", "weights_t", ".", "squeeze", "(", ")", "\n", "# print(classsifier_1_weights.size(),classsifier_2_weights.size())", "\n", "\n", "\n", "\n", "\n", "if", "isinstance", "(", "pred", ",", "tuple", ")", ":", "\n", "\n", "                ", "pred_2", "=", "pred", "[", "1", "]", "\n", "pred_lay2", "=", "pred", "[", "2", "]", "\n", "pred_lay1", "=", "pred", "[", "3", "]", "\n", "mid_lay2_ori", "=", "pred", "[", "4", "]", "\n", "mid_lay2_ined", "=", "pred", "[", "5", "]", "\n", "mid_lay1_ori", "=", "pred", "[", "6", "]", "\n", "mid_lay1_ined", "=", "pred", "[", "7", "]", "\n", "mid_lay2_iwed", "=", "pred", "[", "8", "]", "\n", "mid_lay1_iwed", "=", "pred", "[", "9", "]", "\n", "pred", "=", "pred", "[", "0", "]", "\n", "\n", "", "a_", "=", "torch", ".", "ones", "(", "y", ".", "size", "(", ")", "[", "0", "]", ",", "y", ".", "size", "(", ")", "[", "1", "]", ",", "y", ".", "size", "(", ")", "[", "2", "]", ",", "dtype", "=", "torch", ".", "long", ")", "*", "args", ".", "num_classes", "\n", "a_", "=", "a_", ".", "to", "(", "self", ".", "device", ")", "\n", "y_", "=", "torch", ".", "where", "(", "y", "==", "-", "1", ",", "a_", ",", "y", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_one_hot", "=", "self", ".", "get_one_hot", "(", "y_", ",", "args", ".", "num_classes", "+", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "outs_lay2", "=", "[", "]", "\n", "for", "i", "in", "args", ".", "selected_classes", ":", "\n", "                ", "mask", "=", "torch", ".", "unsqueeze", "(", "gt_one_hot", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "1", ")", "\n", "mask", "=", "F", ".", "interpolate", "(", "mask", ",", "size", "=", "mid_lay2_ori", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "out", "=", "mid_lay2_ori", "*", "mask", "\n", "out", "=", "self", ".", "model", ".", "module", ".", "SAN_stage_2", ".", "IN", "(", "out", ")", "\n", "# out = nn.InstanceNorm2d(512, affine=True)(out)", "\n", "outs_lay2", ".", "append", "(", "out", ")", "\n", "", "mid_lay2_label", "=", "sum", "(", "outs_lay2", ")", "\n", "mid_lay2_label", "=", "self", ".", "model", ".", "module", ".", "SAN_stage_2", ".", "relu", "(", "mid_lay2_label", ")", "\n", "\n", "outs_lay1", "=", "[", "]", "\n", "for", "i", "in", "args", ".", "selected_classes", ":", "\n", "                ", "mask", "=", "torch", ".", "unsqueeze", "(", "gt_one_hot", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "1", ")", "\n", "mask", "=", "F", ".", "interpolate", "(", "mask", ",", "size", "=", "mid_lay1_ori", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "out", "=", "mid_lay1_ori", "*", "mask", "\n", "out", "=", "self", ".", "model", ".", "module", ".", "SAN_stage_1", ".", "IN", "(", "out", ")", "\n", "# out = nn.InstanceNorm2d(512, affine=True)(out)", "\n", "outs_lay1", ".", "append", "(", "out", ")", "\n", "", "mid_lay1_label", "=", "sum", "(", "outs_lay1", ")", "\n", "mid_lay1_label", "=", "self", ".", "model", ".", "module", ".", "SAN_stage_1", ".", "relu", "(", "mid_lay1_label", ")", "\n", "\n", "\n", "# loss", "\n", "loss_main", "=", "self", ".", "loss", "(", "pred", ",", "y", ")", "\n", "loss_lay2", "=", "0.1", "*", "self", ".", "loss", "(", "pred_lay2", ",", "y", ")", "\n", "loss_lay1", "=", "0.1", "*", "self", ".", "loss", "(", "pred_lay1", ",", "y", ")", "\n", "loss_in_lay2", "=", "0.1", "*", "F", ".", "smooth_l1_loss", "(", "mid_lay2_ined", ",", "mid_lay2_label", ")", "\n", "loss_in_lay1", "=", "0.1", "*", "F", ".", "smooth_l1_loss", "(", "mid_lay1_ined", ",", "mid_lay1_label", ")", "\n", "loss_iw_lay2", "=", "0.1", "*", "mid_lay2_iwed", "\n", "loss_iw_lay1", "=", "0.1", "*", "mid_lay1_iwed", "\n", "cur_loss", "=", "loss_main", "+", "loss_lay2", "+", "loss_lay1", "+", "loss_in_lay2", "+", "loss_in_lay1", "+", "loss_iw_lay2", "+", "loss_iw_lay1", "\n", "\n", "\n", "#########################", "\n", "lis", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "# non_zero_num = torch.nonzero(target).shape[0]", "\n", "# print(type(non_zero_num))", "\n", "                ", "gt", "=", "(", "y", "==", "i", ")", ".", "float", "(", ")", "# B", "\n", "inter", "=", "torch", ".", "sum", "(", "gt", ",", "dim", "=", "(", "0", ",", "1", ",", "2", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B", "\n", "\n", "total_num", "=", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "y", ".", "shape", ")", ")", ".", "float", "(", ")", "\n", "\n", "k", "=", "inter", ".", "item", "(", ")", "/", "total_num", ".", "item", "(", ")", "\n", "\n", "lis", ".", "append", "(", "k", ")", "\n", "", "pixel_num", ".", "append", "(", "lis", ")", "\n", "#########################", "\n", "\n", "\n", "if", "self", ".", "args", ".", "multi", ":", "\n", "                ", "loss_2", "=", "self", ".", "args", ".", "lambda_seg", "*", "self", ".", "loss", "(", "pred_2", ",", "y", ")", "\n", "cur_loss", "+=", "loss_2", "\n", "loss_seg_value_2", "+=", "loss_2", ".", "cpu", "(", ")", ".", "item", "(", ")", "/", "iter_num", "\n", "\n", "", "tqdm_epoch", ".", "set_postfix", "(", "loss_total", "=", "cur_loss", ".", "item", "(", ")", ",", "loss_main", "=", "loss_main", ".", "item", "(", ")", ")", "\n", "\n", "# optimizer", "\n", "cur_loss", ".", "backward", "(", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "                ", "self", ".", "optimizer", ".", "module", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ".", "append", "(", "cur_loss", ".", "item", "(", ")", ")", "\n", "\n", "# if batch_idx % 50 == 0:", "\n", "#     if self.args.multi:", "\n", "#         self.logger.info(\"The train loss of epoch{}-batch-{}:{};{}\".format(self.current_epoch,", "\n", "#                                                                            batch_idx, cur_loss.item(),", "\n", "#                                                                            loss_2.item()))", "\n", "#     else:", "\n", "#         self.logger.info(\"The train loss of epoch{}-batch-{}:{}\".format(self.current_epoch,", "\n", "#                                                                         batch_idx, cur_loss.item()))", "\n", "\n", "batch_idx", "+=", "1", "\n", "\n", "self", ".", "current_iter", "+=", "1", "\n", "\n", "if", "np", ".", "isnan", "(", "float", "(", "cur_loss", ".", "item", "(", ")", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Loss is nan during training...'", ")", "\n", "\n", "", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "argpred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "self", ".", "Eval", ".", "add_batch", "(", "label", ",", "argpred", ")", "\n", "\n", "if", "batch_idx", "==", "self", ".", "dataloader", ".", "num_iterations", ":", "\n", "                ", "break", "\n", "\n", "#######", "\n", "", "", "mean", "=", "np", ".", "mean", "(", "pixel_num", ",", "axis", "=", "0", ")", "\n", "sorted_id", "=", "sorted", "(", "range", "(", "len", "(", "mean", ")", ")", ",", "key", "=", "lambda", "k", ":", "mean", "[", "k", "]", ",", "reverse", "=", "True", ")", "\n", "print", "(", "sorted_id", ")", "\n", "########", "\n", "\n", "self", ".", "log_one_train_epoch", "(", "x", ",", "label", ",", "argpred", ",", "train_loss", ")", "\n", "tqdm_epoch", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.log_one_train_epoch": [[451, 483], ["datasets.cityscapes_Dataset.inv_preprocess", "datasets.cityscapes_Dataset.decode_labels", "datasets.cityscapes_Dataset.decode_labels", "enumerate", "train.Trainer.logger.info", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "train.Trainer.writer.add_scalar", "tqdm.tqdm.tqdm.write", "x.clone().cpu", "zip", "train.Trainer.writer.add_image", "train.Trainer.writer.add_image", "train.Trainer.writer.add_image", "train.Trainer.Eval.Pixel_Accuracy", "train.Trainer.Eval.Mean_Pixel_Accuracy", "train.Trainer.Eval.Mean_Intersection_over_Union", "train.Trainer.Eval.Frequency_Weighted_Intersection_over_Union", "train.Trainer.Eval.Pixel_Accuracy", "train.Trainer.Eval.Mean_Pixel_Accuracy", "train.Trainer.Eval.Mean_Intersection_over_Union", "train.Trainer.Eval.Frequency_Weighted_Intersection_over_Union", "isinstance", "sum", "len", "x.clone", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.inv_preprocess", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Pixel_Accuracy", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Pixel_Accuracy", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Intersection_over_Union", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Frequency_Weighted_Intersection_over_Union", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Pixel_Accuracy", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Pixel_Accuracy", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Mean_Intersection_over_Union", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.Frequency_Weighted_Intersection_over_Union"], ["", "def", "log_one_train_epoch", "(", "self", ",", "x", ",", "label", ",", "argpred", ",", "train_loss", ")", ":", "\n", "# show train image on tensorboard", "\n", "        ", "images_inv", "=", "inv_preprocess", "(", "x", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "self", ".", "args", ".", "show_num_images", ",", "\n", "numpy_transform", "=", "self", ".", "args", ".", "numpy_transform", ")", "\n", "labels_colors", "=", "decode_labels", "(", "label", ",", "self", ".", "args", ".", "show_num_images", ")", "\n", "preds_colors", "=", "decode_labels", "(", "argpred", ",", "self", ".", "args", ".", "show_num_images", ")", "\n", "for", "index", ",", "(", "img", ",", "lab", ",", "color_pred", ")", "in", "enumerate", "(", "zip", "(", "images_inv", ",", "labels_colors", ",", "preds_colors", ")", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_image", "(", "'train/'", "+", "str", "(", "index", ")", "+", "'/Images'", ",", "img", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'train/'", "+", "str", "(", "index", ")", "+", "'/Labels'", ",", "lab", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'train/'", "+", "str", "(", "index", ")", "+", "'/preds'", ",", "color_pred", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "class_16", ":", "\n", "            ", "PA", "=", "self", ".", "Eval", ".", "Pixel_Accuracy", "(", ")", "\n", "MPA_16", ",", "MPA", "=", "self", ".", "Eval", ".", "Mean_Pixel_Accuracy", "(", ")", "\n", "MIoU_16", ",", "MIoU", "=", "self", ".", "Eval", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU_16", ",", "FWIoU", "=", "self", ".", "Eval", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "", "else", ":", "\n", "            ", "PA", "=", "self", ".", "Eval", ".", "Pixel_Accuracy", "(", ")", "\n", "MPA", "=", "self", ".", "Eval", ".", "Mean_Pixel_Accuracy", "(", ")", "\n", "MIoU", "=", "self", ".", "Eval", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU", "=", "self", ".", "Eval", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'\\nEpoch:{}, train PA1:{}, MPA1:{}, MIoU1:{}, FWIoU1:{}'", ".", "format", "(", "self", ".", "current_epoch", ",", "PA", ",", "MPA", ",", "\n", "MIoU", ",", "FWIoU", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_PA'", ",", "PA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_MPA'", ",", "MPA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_MIoU'", ",", "MIoU", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_FWIoU'", ",", "FWIoU", ",", "self", ".", "current_epoch", ")", "\n", "\n", "tr_loss", "=", "sum", "(", "train_loss", ")", "/", "len", "(", "train_loss", ")", "if", "isinstance", "(", "train_loss", ",", "list", ")", "else", "train_loss", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "tr_loss", ",", "self", ".", "current_epoch", ")", "\n", "tqdm", ".", "write", "(", "\"The average loss of train epoch-{}-:{}\"", ".", "format", "(", "self", ".", "current_epoch", ",", "tr_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.validate": [[484, 572], ["train.Trainer.logger.info", "train.Trainer.Eval.reset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "datasets.cityscapes_Dataset.inv_preprocess", "datasets.cityscapes_Dataset.decode_labels", "datasets.cityscapes_Dataset.decode_labels", "enumerate", "train.Trainer.validate.val_info"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.reset", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.inv_preprocess", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels"], ["", "def", "validate", "(", "self", ",", "mode", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'\\nvalidating one epoch...'", ")", "\n", "self", ".", "Eval", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tqdm_batch", "=", "tqdm", "(", "self", ".", "test_dataloader", ".", "val_loader", ",", "total", "=", "self", ".", "test_dataloader", ".", "valid_iterations", ",", "\n", "desc", "=", "\"Val Epoch-{}-\"", ".", "format", "(", "self", ".", "current_epoch", "+", "1", ")", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "if", "mode", "==", "'val'", ":", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "i", "=", "0", "\n", "\n", "for", "x", ",", "y", ",", "id", "in", "tqdm_batch", ":", "\n", "                ", "if", "self", ".", "cuda", ":", "\n", "                    ", "x", ",", "y", "=", "x", ".", "to", "(", "self", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# model", "\n", "", "pred", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "isinstance", "(", "pred", ",", "tuple", ")", ":", "\n", "                    ", "pred_2", "=", "pred", "[", "1", "]", "\n", "pred", "=", "pred", "[", "0", "]", "\n", "pred_P", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred_P_2", "=", "F", ".", "softmax", "(", "pred_2", ",", "dim", "=", "1", ")", "\n", "", "y", "=", "torch", ".", "squeeze", "(", "y", ",", "1", ")", "\n", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "argpred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "Eval", ".", "add_batch", "(", "label", ",", "argpred", ")", "\n", "\n", "# show val result on tensorboard", "\n", "", "images_inv", "=", "inv_preprocess", "(", "x", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "self", ".", "args", ".", "show_num_images", ",", "\n", "numpy_transform", "=", "self", ".", "args", ".", "numpy_transform", ")", "\n", "labels_colors", "=", "decode_labels", "(", "label", ",", "self", ".", "args", ".", "show_num_images", ")", "\n", "preds_colors", "=", "decode_labels", "(", "argpred", ",", "self", ".", "args", ".", "show_num_images", ")", "\n", "for", "index", ",", "(", "img", ",", "lab", ",", "color_pred", ")", "in", "enumerate", "(", "zip", "(", "images_inv", ",", "labels_colors", ",", "preds_colors", ")", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_image", "(", "str", "(", "index", ")", "+", "'/Images'", ",", "img", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "str", "(", "index", ")", "+", "'/Labels'", ",", "lab", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "str", "(", "index", ")", "+", "'/preds'", ",", "color_pred", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "class_16", ":", "\n", "                ", "def", "val_info", "(", "Eval", ",", "name", ")", ":", "\n", "                    ", "PA", "=", "Eval", ".", "Pixel_Accuracy", "(", ")", "\n", "MPA_16", ",", "MPA_13", "=", "Eval", ".", "Mean_Pixel_Accuracy", "(", ")", "\n", "MIoU_16", ",", "MIoU_13", "=", "Eval", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU_16", ",", "FWIoU_13", "=", "Eval", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "PC_16", ",", "PC_13", "=", "Eval", ".", "Mean_Precision", "(", ")", "\n", "print", "(", "\"########## Eval{} ############\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'\\nEpoch:{:.3f}, {} PA:{:.3f}, MPA_16:{:.3f}, MIoU_16:{:.3f}, FWIoU_16:{:.3f}, PC_16:{:.3f}'", ".", "format", "(", "\n", "self", ".", "current_epoch", ",", "name", ",", "PA", ",", "MPA_16", ",", "\n", "MIoU_16", ",", "FWIoU_16", ",", "PC_16", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'\\nEpoch:{:.3f}, {} PA:{:.3f}, MPA_13:{:.3f}, MIoU_13:{:.3f}, FWIoU_13:{:.3f}, PC_13:{:.3f}'", ".", "format", "(", "\n", "self", ".", "current_epoch", ",", "name", ",", "PA", ",", "MPA_13", ",", "\n", "MIoU_13", ",", "FWIoU_13", ",", "PC_13", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'PA'", "+", "name", ",", "PA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MPA_16'", "+", "name", ",", "MPA_16", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MIoU_16'", "+", "name", ",", "MIoU_16", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'FWIoU_16'", "+", "name", ",", "FWIoU_16", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MPA_13'", "+", "name", ",", "MPA_13", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MIoU_13'", "+", "name", ",", "MIoU_13", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'FWIoU_13'", "+", "name", ",", "FWIoU_13", ",", "self", ".", "current_epoch", ")", "\n", "return", "PA", ",", "MPA_13", ",", "MIoU_13", ",", "FWIoU_13", "\n", "", "", "else", ":", "\n", "                ", "def", "val_info", "(", "Eval", ",", "name", ")", ":", "\n", "                    ", "PA", "=", "Eval", ".", "Pixel_Accuracy", "(", ")", "\n", "MPA", "=", "Eval", ".", "Mean_Pixel_Accuracy", "(", ")", "\n", "MIoU", "=", "Eval", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU", "=", "Eval", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "PC", "=", "Eval", ".", "Mean_Precision", "(", ")", "\n", "print", "(", "\"########## Eval{} ############\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'\\nEpoch:{:.3f}, {} PA1:{:.3f}, MPA1:{:.3f}, MIoU1:{:.3f}, FWIoU1:{:.3f}, PC:{:.3f}'", ".", "format", "(", "\n", "self", ".", "current_epoch", ",", "name", ",", "PA", ",", "MPA", ",", "\n", "MIoU", ",", "FWIoU", ",", "PC", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'PA'", "+", "name", ",", "PA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MPA'", "+", "name", ",", "MPA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MIoU'", "+", "name", ",", "MIoU", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'FWIoU'", "+", "name", ",", "FWIoU", ",", "self", ".", "current_epoch", ")", "\n", "return", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "\n", "\n", "", "", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "=", "val_info", "(", "self", ".", "Eval", ",", "\"\"", ")", "\n", "tqdm_batch", ".", "close", "(", ")", "\n", "\n", "", "return", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.validate_source": [[573, 676], ["train.Trainer.logger.info", "train.Trainer.Eval.reset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "train.Trainer.model.eval", "datasets.cityscapes_Dataset.inv_preprocess", "datasets.cityscapes_Dataset.decode_labels", "datasets.cityscapes_Dataset.decode_labels", "enumerate", "train.Trainer.validate_source.source_val_info"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.Eval.reset", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.inv_preprocess", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels", "home.repos.pwc.inspect_result.leolyj_san-saw.datasets.cityscapes_Dataset.decode_labels"], ["", "def", "validate_source", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'\\nvalidating source domain...'", ")", "\n", "self", ".", "Eval", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tqdm_batch", "=", "tqdm", "(", "self", ".", "source_val_dataloader", ",", "total", "=", "self", ".", "dataloader", ".", "valid_iterations", ",", "\n", "desc", "=", "\"Source Val Epoch-{}-\"", ".", "format", "(", "self", ".", "current_epoch", "+", "1", ")", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "i", "=", "0", "\n", "for", "x", ",", "y", ",", "id", "in", "tqdm_batch", ":", "\n", "# y.to(torch.long)", "\n", "                ", "if", "self", ".", "cuda", ":", "\n", "                    ", "x", ",", "y", "=", "x", ".", "to", "(", "self", ".", "device", ")", ",", "y", ".", "to", "(", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# model", "\n", "", "pred", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "if", "isinstance", "(", "pred", ",", "tuple", ")", ":", "\n", "                    ", "pred_2", "=", "pred", "[", "1", "]", "\n", "pred", "=", "pred", "[", "0", "]", "\n", "pred_P", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred_P_2", "=", "F", ".", "softmax", "(", "pred_2", ",", "dim", "=", "1", ")", "\n", "", "y", "=", "torch", ".", "squeeze", "(", "y", ",", "1", ")", "\n", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "argpred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "Eval", ".", "add_batch", "(", "label", ",", "argpred", ")", "\n", "\n", "i", "+=", "1", "\n", "if", "i", "==", "self", ".", "dataloader", ".", "valid_iterations", ":", "\n", "                    ", "break", "\n", "\n", "# show val result on tensorboard", "\n", "", "", "images_inv", "=", "inv_preprocess", "(", "x", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "self", ".", "args", ".", "show_num_images", ",", "\n", "numpy_transform", "=", "self", ".", "args", ".", "numpy_transform", ")", "\n", "labels_colors", "=", "decode_labels", "(", "label", ",", "self", ".", "args", ".", "show_num_images", ")", "\n", "preds_colors", "=", "decode_labels", "(", "argpred", ",", "self", ".", "args", ".", "show_num_images", ")", "\n", "for", "index", ",", "(", "img", ",", "lab", ",", "color_pred", ")", "in", "enumerate", "(", "zip", "(", "images_inv", ",", "labels_colors", ",", "preds_colors", ")", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_image", "(", "'source_eval/'", "+", "str", "(", "index", ")", "+", "'/Images'", ",", "img", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'source_eval/'", "+", "str", "(", "index", ")", "+", "'/Labels'", ",", "lab", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'source_eval/'", "+", "str", "(", "index", ")", "+", "'/preds'", ",", "color_pred", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "class_16", ":", "\n", "                ", "def", "source_val_info", "(", "Eval", ",", "name", ")", ":", "\n", "                    ", "PA", "=", "Eval", ".", "Pixel_Accuracy", "(", ")", "\n", "MPA_16", ",", "MPA_13", "=", "Eval", ".", "Mean_Pixel_Accuracy", "(", ")", "\n", "MIoU_16", ",", "MIoU_13", "=", "Eval", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU_16", ",", "FWIoU_13", "=", "Eval", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "PC_16", ",", "PC_13", "=", "Eval", ".", "Mean_Precision", "(", ")", "\n", "print", "(", "\"########## Source Eval{} ############\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'\\nEpoch:{:.3f}, source {} PA:{:.3f}, MPA_16:{:.3f}, MIoU_16:{:.3f}, FWIoU_16:{:.3f}, PC_16:{:.3f}'", ".", "format", "(", "\n", "self", ".", "current_epoch", ",", "name", ",", "PA", ",", "MPA_16", ",", "\n", "MIoU_16", ",", "FWIoU_16", ",", "PC_16", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'\\nEpoch:{:.3f}, source {} PA:{:.3f}, MPA_13:{:.3f}, MIoU_13:{:.3f}, FWIoU_13:{:.3f}, PC_13:{:.3f}'", ".", "format", "(", "\n", "self", ".", "current_epoch", ",", "name", ",", "PA", ",", "MPA_13", ",", "\n", "MIoU_13", ",", "FWIoU_13", ",", "PC_13", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_PA'", "+", "name", ",", "PA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_MPA_16'", "+", "name", ",", "MPA_16", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_MIoU_16'", "+", "name", ",", "MIoU_16", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_FWIoU_16'", "+", "name", ",", "FWIoU_16", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_MPA_13'", "+", "name", ",", "MPA_13", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_MIoU_13'", "+", "name", ",", "MIoU_13", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_FWIoU_13'", "+", "name", ",", "FWIoU_13", ",", "self", ".", "current_epoch", ")", "\n", "return", "PA", ",", "MPA_13", ",", "MIoU_13", ",", "FWIoU_13", "\n", "", "", "else", ":", "\n", "                ", "def", "source_val_info", "(", "Eval", ",", "name", ")", ":", "\n", "                    ", "PA", "=", "Eval", ".", "Pixel_Accuracy", "(", ")", "\n", "MPA", "=", "Eval", ".", "Mean_Pixel_Accuracy", "(", ")", "\n", "MIoU", "=", "Eval", ".", "Mean_Intersection_over_Union", "(", ")", "\n", "FWIoU", "=", "Eval", ".", "Frequency_Weighted_Intersection_over_Union", "(", ")", "\n", "PC", "=", "Eval", ".", "Mean_Precision", "(", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_PA'", "+", "name", ",", "PA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_MPA'", "+", "name", ",", "MPA", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_MIoU'", "+", "name", ",", "MIoU", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'source_FWIoU'", "+", "name", ",", "FWIoU", ",", "self", ".", "current_epoch", ")", "\n", "print", "(", "\"########## Source Eval{} ############\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'\\nEpoch:{:.3f}, source {} PA1:{:.3f}, MPA1:{:.3f}, MIoU1:{:.3f}, FWIoU1:{:.3f}, PC:{:.3f}'", ".", "format", "(", "\n", "self", ".", "current_epoch", ",", "name", ",", "PA", ",", "MPA", ",", "\n", "MIoU", ",", "FWIoU", ",", "PC", ")", ")", "\n", "return", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "\n", "\n", "", "", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "=", "source_val_info", "(", "self", ".", "Eval", ",", "\"\"", ")", "\n", "tqdm_batch", ".", "close", "(", ")", "\n", "\n", "", "is_best", "=", "MIoU", ">", "self", ".", "best_source_MIou", "\n", "if", "is_best", ":", "\n", "            ", "self", ".", "best_source_MIou", "=", "MIoU", "\n", "self", ".", "best_source_iter", "=", "self", ".", "current_iter", "\n", "self", ".", "logger", ".", "info", "(", "\"=>saving a new best source checkpoint...\"", ")", "\n", "self", ".", "save_checkpoint", "(", "self", ".", "train_id", "+", "'source_best.pth'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"=> The source MIoU of val does't improve.\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"=> The best source MIoU of val is {} at {}\"", ".", "format", "(", "self", ".", "best_source_MIou", ",", "self", ".", "best_source_iter", ")", ")", "\n", "\n", "", "return", "PA", ",", "MPA", ",", "MIoU", ",", "FWIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.save_checkpoint": [[677, 694], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.model.state_dict", "train.Trainer.optimizer.state_dict"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "filename", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Save checkpoint if a new best is achieved\n        :param state:\n        :param is_best:\n        :param filepath:\n        :return:\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint_dir", ",", "filename", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "self", ".", "current_epoch", "+", "1", ",", "\n", "'iteration'", ":", "self", ".", "current_iter", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_MIou'", ":", "self", ".", "best_MIou", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.load_checkpoint": [[695, 708], ["train.Trainer.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.Trainer.logger.info", "train.Trainer.model.load_state_dict", "train.Trainer.model.module.load_state_dict", "train.Trainer.logger.info", "train.Trainer.logger.info"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "filename", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded successfully from \"", "+", "filename", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint exists from '{}'. Skipping...\"", ".", "format", "(", "self", ".", "args", ".", "checkpoint_dir", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"**First time to train**\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.Trainer.poly_lr_scheduler": [[709, 724], ["len", "len", "len", "float"], "methods", ["None"], ["", "", "def", "poly_lr_scheduler", "(", "self", ",", "optimizer", ",", "init_lr", "=", "None", ",", "iter", "=", "None", ",", "\n", "max_iter", "=", "None", ",", "power", "=", "None", ")", ":", "\n", "        ", "init_lr", "=", "self", ".", "args", ".", "lr", "if", "init_lr", "is", "None", "else", "init_lr", "\n", "iter", "=", "self", ".", "current_iter", "if", "iter", "is", "None", "else", "iter", "\n", "max_iter", "=", "self", ".", "args", ".", "iter_max", "if", "max_iter", "is", "None", "else", "max_iter", "\n", "power", "=", "self", ".", "args", ".", "poly_power", "if", "power", "is", "None", "else", "power", "\n", "new_lr", "=", "init_lr", "*", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "power", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "optimizer", ".", "module", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "new_lr", "\n", "if", "len", "(", "optimizer", ".", "module", ".", "param_groups", ")", "==", "2", ":", "\n", "                ", "optimizer", ".", "module", ".", "param_groups", "[", "1", "]", "[", "\"lr\"", "]", "=", "10", "*", "new_lr", "\n", "", "", "else", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "new_lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", "==", "2", ":", "\n", "                ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "\"lr\"", "]", "=", "10", "*", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.str2bool": [[40, 47], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Unsupported value encountered.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.add_train_args": [[726, 828], ["arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument"], "function", ["None"], ["", "", "", "", "def", "add_train_args", "(", "arg_parser", ")", ":", "\n", "# Path related arguments", "\n", "    ", "arg_parser", ".", "add_argument", "(", "'--data_root_path'", ",", "type", "=", "str", ",", "default", "=", "'../../DATASETS/datasets_seg/GTA5'", ",", "\n", "help", "=", "\"the root path of dataset\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--list_path'", ",", "type", "=", "str", ",", "default", "=", "'../datasets/GTA_640/list'", ",", "\n", "help", "=", "\"the root path of dataset\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "default", "=", "\"./log/gta5_pretrain_2\"", ",", "\n", "help", "=", "\"the path of ckpt file\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--xuanran_path'", ",", "default", "=", "None", ",", "\n", "help", "=", "\"the path of ckpt file\"", ")", "\n", "\n", "# Model related arguments", "\n", "arg_parser", ".", "add_argument", "(", "'--weight_loss'", ",", "default", "=", "True", ",", "\n", "help", "=", "\"if use weight loss\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--use_trained'", ",", "default", "=", "False", ",", "\n", "help", "=", "\"if use trained model\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--backbone'", ",", "default", "=", "'Deeplab50_CLASS_INW'", ",", "\n", "help", "=", "\"backbone of encoder\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--bn_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"batch normalization momentum\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--imagenet_pretrained'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "\n", "help", "=", "\"whether apply imagenet pretrained weights\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--pretrained_ckpt_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"whether apply pretrained checkpoint\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--continue_training'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"whether to continue training \"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--show_num_images'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"show how many images during validate\"", ")", "\n", "\n", "# train related arguments", "\n", "arg_parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "12345", ",", "type", "=", "int", ",", "\n", "help", "=", "'random seed'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "\n", "help", "=", "\" the num of gpu\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--batch_size_per_gpu'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "help", "=", "'input batch size'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "0.3", ",", "type", "=", "int", ",", "\n", "help", "=", "'input mix alpha'", ")", "\n", "\n", "# dataset related arguments", "\n", "arg_parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'gta5'", ",", "type", "=", "str", ",", "\n", "help", "=", "'dataset choice'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--val_dataset'", ",", "type", "=", "str", ",", "default", "=", "'cityscapes'", ",", "\n", "help", "=", "'a list consists of cityscapes, mapillary, gtav, bdd100k, synthia'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--base_size'", ",", "default", "=", "\"640,640\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'crop size of image'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--crop_size'", ",", "default", "=", "\"640,640\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'base size of image'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--target_base_size'", ",", "default", "=", "\"1024,512\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'crop size of target image'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--target_crop_size'", ",", "default", "=", "\"1024,512\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'base size of target image'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "19", ",", "type", "=", "int", ",", "\n", "help", "=", "'num class of mask'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--data_loader_workers'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'num_workers of Dataloader'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--pin_memory'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "help", "=", "'pin_memory of Dataloader'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--split'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "\n", "help", "=", "\"choose from train/val/test/trainval/all\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--random_mirror'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'add random_mirror'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--random_crop'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'add random_crop'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--resize'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'resize'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--gaussian_blur'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'add gaussian_blur'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--numpy_transform'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'image transform with numpy style'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--color_jitter'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'image transform with numpy style'", ")", "\n", "\n", "# optimization related arguments", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--freeze_bn'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"whether freeze BatchNormalization\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "\"SGD\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'optimizer'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "help", "=", "\"init learning rate \"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--iter_max'", ",", "type", "=", "int", ",", "default", "=", "200000", ",", "\n", "help", "=", "\"the maxinum of iteration\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--iter_stop'", ",", "type", "=", "int", ",", "default", "=", "200000", ",", "\n", "help", "=", "\"the early stop step\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--each_epoch_iters'", ",", "default", "=", "1000", ",", "\n", "help", "=", "\"the path of ckpt file\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--poly_power'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"poly_power\"", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--selected_classes'", ",", "default", "=", "[", "0", ",", "10", ",", "2", ",", "1", ",", "8", "]", ",", "\n", "help", "=", "\"poly_power\"", ")", "\n", "\n", "# multi-level output", "\n", "\n", "arg_parser", ".", "add_argument", "(", "'--multi'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'output model middle feature'", ")", "\n", "arg_parser", ".", "add_argument", "(", "'--lambda_seg'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"lambda_seg of middle output\"", ")", "\n", "return", "arg_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.tools.train.init_args": [[830, 890], ["print", "str", "args.crop_size.split", "args.base_size.split", "args.target_crop_size.split", "args.target_base_size.split", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.StreamHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "random.seed", "numpy.random.seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "len", "int", "int", "len", "int", "int", "os.path.join", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "init_args", "(", "args", ")", ":", "\n", "# args.batch_size = args.batch_size_per_gpu * ceil(len(args.gpu) / 2)", "\n", "    ", "args", ".", "batch_size", "=", "args", ".", "batch_size_per_gpu", "\n", "print", "(", "\"batch size: \"", ",", "args", ".", "batch_size", ")", "\n", "\n", "train_id", "=", "str", "(", "args", ".", "dataset", ")", "\n", "\n", "crop_size", "=", "args", ".", "crop_size", ".", "split", "(", "','", ")", "\n", "base_size", "=", "args", ".", "base_size", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "crop_size", ")", "==", "1", ":", "\n", "        ", "args", ".", "crop_size", "=", "int", "(", "crop_size", "[", "0", "]", ")", "\n", "args", ".", "base_size", "=", "int", "(", "base_size", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "crop_size", "=", "(", "int", "(", "crop_size", "[", "0", "]", ")", ",", "int", "(", "crop_size", "[", "1", "]", ")", ")", "\n", "args", ".", "base_size", "=", "(", "int", "(", "base_size", "[", "0", "]", ")", ",", "int", "(", "base_size", "[", "1", "]", ")", ")", "\n", "\n", "\n", "", "target_crop_size", "=", "args", ".", "target_crop_size", ".", "split", "(", "','", ")", "\n", "target_base_size", "=", "args", ".", "target_base_size", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "target_crop_size", ")", "==", "1", ":", "\n", "        ", "args", ".", "target_crop_size", "=", "int", "(", "target_crop_size", "[", "0", "]", ")", "\n", "args", ".", "target_base_size", "=", "int", "(", "target_base_size", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "target_crop_size", "=", "(", "int", "(", "target_crop_size", "[", "0", "]", ")", ",", "int", "(", "target_crop_size", "[", "1", "]", ")", ")", "\n", "args", ".", "target_base_size", "=", "(", "int", "(", "target_base_size", "[", "0", "]", ")", ",", "int", "(", "target_base_size", "[", "1", "]", ")", ")", "\n", "\n", "# if not args.continue_training:", "\n", "#     if os.path.exists(args.checkpoint_dir):", "\n", "#         print(\"checkpoint dir exists, which will be removed\")", "\n", "#         import shutil", "\n", "#         shutil.rmtree(args.checkpoint_dir, ignore_errors=True)", "\n", "#     os.mkdir(args.checkpoint_dir)", "\n", "\n", "", "if", "args", ".", "data_root_path", "is", "None", ":", "\n", "        ", "args", ".", "data_root_path", "=", "datasets_path", "[", "args", ".", "dataset", "]", "[", "'data_root_path'", "]", "\n", "args", ".", "list_path", "=", "datasets_path", "[", "args", ".", "dataset", "]", "[", "'list_path'", "]", "\n", "args", ".", "image_filepath", "=", "datasets_path", "[", "args", ".", "dataset", "]", "[", "'image_path'", "]", "\n", "args", ".", "gt_filepath", "=", "datasets_path", "[", "args", ".", "dataset", "]", "[", "'gt_path'", "]", "\n", "\n", "", "args", ".", "class_16", "=", "True", "if", "args", ".", "num_classes", "==", "16", "else", "False", "\n", "args", ".", "class_13", "=", "True", "if", "args", ".", "num_classes", "==", "13", "else", "False", "\n", "\n", "# logger configure", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'train_log.txt'", ")", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# set seed", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "args", ",", "train_id", ",", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.__init__": [[8, 23], ["torch.Module.__init__", "len", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.ones().triu().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones().triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dim", ",", "relax_denom", "=", "0", ",", "classifier", "=", "None", ",", "work", "=", "False", ")", ":", "\n", "        ", "super", "(", "SAW", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "work", "=", "work", "\n", "self", ".", "selected_classes", "=", "args", ".", "selected_classes", "\n", "self", ".", "C", "=", "len", "(", "args", ".", "selected_classes", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "i", "=", "torch", ".", "eye", "(", "self", ".", "C", ",", "self", ".", "C", ")", ".", "cuda", "(", ")", "\n", "self", ".", "reversal_i", "=", "torch", ".", "ones", "(", "self", ".", "C", ",", "self", ".", "C", ")", ".", "triu", "(", "diagonal", "=", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "classify", "=", "classifier", "\n", "self", ".", "num_off_diagonal", "=", "torch", ".", "sum", "(", "self", ".", "reversal_i", ")", "\n", "if", "relax_denom", "==", "0", ":", "\n", "            ", "print", "(", "\"Note relax_denom == 0!\"", ")", "\n", "self", ".", "margin", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "margin", "=", "self", ".", "num_off_diagonal", "//", "relax_denom", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.get_mask_matrix": [[25, 27], ["None"], "methods", ["None"], ["", "", "def", "get_mask_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "i", ",", "self", ".", "reversal_i", ",", "self", ".", "margin", ",", "self", ".", "num_off_diagonal", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.get_covariance_matrix": [[28, 38], ["x.contiguous().view.contiguous().view.contiguous().view", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "torch.bmm().div", "x.contiguous().view.contiguous().view.contiguous", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.contiguous().view.contiguous().view.transpose"], "methods", ["None"], ["", "def", "get_covariance_matrix", "(", "self", ",", "x", ",", "eye", "=", "None", ")", ":", "\n", "        ", "eps", "=", "1e-5", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "# i-th feature size (B X C X H X W)", "\n", "HW", "=", "H", "*", "W", "\n", "if", "eye", "is", "None", ":", "\n", "            ", "eye", "=", "torch", ".", "eye", "(", "C", ")", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "-", "1", ")", "# B X C X H X W > B X C X (H X W)", "\n", "x_cor", "=", "torch", ".", "bmm", "(", "x", ",", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "div", "(", "HW", "-", "1", ")", "+", "(", "eps", "*", "eye", ")", "# C X C / HW", "\n", "\n", "return", "x_cor", ",", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.instance_whitening_loss": [[39, 48], ["SAW.SAW.get_covariance_matrix", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.get_covariance_matrix"], ["", "def", "instance_whitening_loss", "(", "self", ",", "x", ",", "eye", ",", "mask_matrix", ",", "margin", ",", "num_remove_cov", ")", ":", "\n", "        ", "x_cor", ",", "B", "=", "self", ".", "get_covariance_matrix", "(", "x", ",", "eye", "=", "eye", ")", "\n", "x_cor_masked", "=", "x_cor", "*", "mask_matrix", "\n", "\n", "off_diag_sum", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x_cor_masked", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "-", "margin", "# B X 1 X 1", "\n", "loss", "=", "torch", ".", "clamp", "(", "torch", ".", "div", "(", "off_diag_sum", ",", "num_remove_cov", ")", ",", "min", "=", "0", ")", "# B X 1 X 1", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "B", "\n", "\n", "return", "loss", "\n", "", "def", "sort_with_idx", "(", "self", ",", "x", ",", "idx", ",", "weights", ")", ":", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.sort_with_idx": [[48, 61], ["x.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "range", "range", "int", "range"], "methods", ["None"], ["", "def", "sort_with_idx", "(", "self", ",", "x", ",", "idx", ",", "weights", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "after_sort", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "weights", "=", "F", ".", "sigmoid", "(", "weights", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "\n", "            ", "for", "k", "in", "range", "(", "int", "(", "c", "/", "self", ".", "C", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "C", ")", ":", "\n", "                    ", "channel_id", "=", "idx", "[", "self", ".", "selected_classes", "[", "j", "]", "]", "[", "k", "]", "\n", "wgh", "=", "weights", "[", "self", ".", "selected_classes", "[", "j", "]", "]", "[", "channel_id", "]", "\n", "after_sort", "[", "i", "]", "[", "self", ".", "C", "*", "k", "+", "j", "]", "[", ":", "]", "[", ":", "]", "=", "wgh", "*", "x", "[", "i", "]", "[", "channel_id", "]", "[", ":", "]", "[", ":", "]", "\n", "\n", "", "", "", "return", "after_sort", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.forward": [[62, 97], ["SAW.SAW.classify.state_dict().keys", "abs", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "SAW.SAW.sort_with_idx", "range", "SAW.SAW.get_mask_matrix", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "range", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "weights_t.squeeze", "int", "f_map_lst.append", "int", "SAW.SAW.instance_whitening_loss", "SAW.SAW.classify.state_dict", "selected_keys_classify.append", "SAW.SAW.classify.state_dict", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.sort_with_idx", "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.get_mask_matrix", "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAW.SAW.instance_whitening_loss"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "work", ":", "\n", "            ", "weights_keys", "=", "self", ".", "classify", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "\n", "selected_keys_classify", "=", "[", "]", "\n", "\n", "for", "key", "in", "weights_keys", ":", "\n", "                ", "if", "\"weight\"", "in", "key", ":", "\n", "                    ", "selected_keys_classify", ".", "append", "(", "key", ")", "\n", "\n", "", "", "for", "key", "in", "selected_keys_classify", ":", "\n", "                ", "weights_t", "=", "self", ".", "classify", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "\n", "", "classsifier_weights", "=", "abs", "(", "weights_t", ".", "squeeze", "(", ")", ")", "\n", "_", ",", "index", "=", "torch", ".", "sort", "(", "classsifier_weights", ",", "descending", "=", "True", ",", "dim", "=", "1", ")", "\n", "f_map_lst", "=", "[", "]", "\n", "B", ",", "channel_num", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "sort_with_idx", "(", "x", ",", "index", ",", "classsifier_weights", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "channel_num", "/", "self", ".", "C", ")", ")", ":", "\n", "                ", "group", "=", "x", "[", ":", ",", "self", ".", "C", "*", "i", ":", "self", ".", "C", "*", "(", "i", "+", "1", ")", ",", ":", ",", ":", "]", "\n", "f_map_lst", ".", "append", "(", "group", ")", "\n", "\n", "", "eye", ",", "mask_matrix", ",", "margin", ",", "num_remove_cov", "=", "self", ".", "get_mask_matrix", "(", ")", "\n", "SAW_loss", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "channel_num", "/", "self", ".", "C", ")", ")", ":", "\n", "                ", "loss", "=", "self", ".", "instance_whitening_loss", "(", "f_map_lst", "[", "i", "]", ",", "eye", ",", "mask_matrix", ",", "margin", ",", "num_remove_cov", ")", "\n", "SAW_loss", "=", "SAW_loss", "+", "loss", "\n", "", "", "else", ":", "\n", "            ", "SAW_loss", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "", "return", "SAW_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.Bottleneck.__init__": [[12, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "bn_momentum", "=", "0.1", ",", "IN", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "\n", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "IN", "=", "None", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.Bottleneck.forward": [[32, 55], ["deeplab101_IN.Bottleneck.conv1", "deeplab101_IN.Bottleneck.bn1", "deeplab101_IN.Bottleneck.relu", "deeplab101_IN.Bottleneck.conv2", "deeplab101_IN.Bottleneck.bn2", "deeplab101_IN.Bottleneck.relu", "deeplab101_IN.Bottleneck.conv3", "deeplab101_IN.Bottleneck.bn3", "deeplab101_IN.Bottleneck.relu", "deeplab101_IN.Bottleneck.downsample", "deeplab101_IN.Bottleneck.IN"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "IN", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.Classifier_Module.__init__": [[58, 67], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab101_IN.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.Classifier_Module.forward": [[68, 73], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti.__init__": [[76, 101], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab101_IN.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab101_IN.ResNetMulti._make_layer", "deeplab101_IN.ResNetMulti._make_layer", "deeplab101_IN.ResNetMulti._make_layer", "deeplab101_IN.ResNetMulti._make_layer", "deeplab101_IN.ResNetMulti._make_pred_layer", "deeplab101_IN.ResNetMulti._make_pred_layer", "deeplab101_IN.ResNetMulti.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "in1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "IN", "=", "True", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "IN", "=", "True", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti._make_layer": [[102, 117], ["layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "IN", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "IN", "=", "IN", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti._make_pred_layer": [[118, 120], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti.forward": [[121, 139], ["deeplab101_IN.ResNetMulti.conv1", "deeplab101_IN.ResNetMulti.in1", "deeplab101_IN.ResNetMulti.relu", "deeplab101_IN.ResNetMulti.maxpool", "deeplab101_IN.ResNetMulti.layer1", "deeplab101_IN.ResNetMulti.layer2", "deeplab101_IN.ResNetMulti.layer3", "deeplab101_IN.ResNetMulti.layer5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab101_IN.ResNetMulti.layer4", "deeplab101_IN.ResNetMulti.layer6", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab101_IN.ResNetMulti.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x1", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x2", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "x2", ",", "x1", "# changed!", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti.get_1x_lr_params_NOscale": [[140, 163], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "in1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti.get_10x_lr_params": [[164, 176], ["b.append", "b.append", "range", "deeplab101_IN.ResNetMulti.layer5.parameters", "deeplab101_IN.ResNetMulti.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.ResNetMulti.optim_parameters": [[177, 180], ["deeplab101_IN.ResNetMulti.get_1x_lr_params_NOscale", "deeplab101_IN.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab101_IN.DeeplabMulti101_IN": [[182, 200], ["deeplab101_IN.ResNetMulti", "torch.load", "torch.load", "torch.load", "ResNetMulti.state_dict().copy", "ResNetMulti.load_state_dict", "i.split", "ResNetMulti.state_dict"], "function", ["None"], ["", "", "def", "DeeplabMulti101_IN", "(", "args", ",", "num_classes", "=", "21", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\n", "\n", "\n", "        ", "restore_from", "=", "'./pretrained_model/DeepLab_resnet_pretrained_init-f81d91e8.pth'", "\n", "# restore_from = './pretrained_model/GTA5_source.pth'", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "\n", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "            ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Bottleneck.__init__": [[22, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "bn_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "\n", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Bottleneck.forward": [[39, 60], ["deeplab50_bn.Bottleneck.conv1", "deeplab50_bn.Bottleneck.bn1", "deeplab50_bn.Bottleneck.relu", "deeplab50_bn.Bottleneck.conv2", "deeplab50_bn.Bottleneck.bn2", "deeplab50_bn.Bottleneck.relu", "deeplab50_bn.Bottleneck.conv3", "deeplab50_bn.Bottleneck.bn3", "deeplab50_bn.Bottleneck.relu", "deeplab50_bn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Classifier_Module.__init__": [[63, 72], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab50_bn.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Classifier_Module.forward": [[73, 78], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti.__init__": [[81, 106], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab50_bn.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab50_bn.ResNetMulti._make_layer", "deeplab50_bn.ResNetMulti._make_layer", "deeplab50_bn.ResNetMulti._make_layer", "deeplab50_bn.ResNetMulti._make_layer", "deeplab50_bn.ResNetMulti._make_pred_layer", "deeplab50_bn.ResNetMulti._make_pred_layer", "deeplab50_bn.ResNetMulti.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti._make_layer": [[107, 121], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti._make_pred_layer": [[122, 124], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti.forward": [[125, 143], ["deeplab50_bn.ResNetMulti.conv1", "deeplab50_bn.ResNetMulti.bn1", "deeplab50_bn.ResNetMulti.relu", "deeplab50_bn.ResNetMulti.maxpool", "deeplab50_bn.ResNetMulti.layer1", "deeplab50_bn.ResNetMulti.layer2", "deeplab50_bn.ResNetMulti.layer3", "deeplab50_bn.ResNetMulti.layer5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab50_bn.ResNetMulti.layer4", "deeplab50_bn.ResNetMulti.layer6", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab50_bn.ResNetMulti.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x1", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x2", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "x2", ",", "x1", "# changed!", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti.get_1x_lr_params_NOscale": [[144, 167], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti.get_10x_lr_params": [[168, 180], ["b.append", "b.append", "range", "deeplab50_bn.ResNetMulti.layer5.parameters", "deeplab50_bn.ResNetMulti.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.ResNetMulti.optim_parameters": [[181, 184], ["deeplab50_bn.ResNetMulti.get_1x_lr_params_NOscale", "deeplab50_bn.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Deeplab50_bn": [[187, 196], ["deeplab50_bn.ResNetMulti", "ResNetMulti.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "Deeplab50_bn", "(", "args", ",", "num_classes", "=", "21", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\n", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ",", "\n", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_bn.Deeplab50_bn_": [[197, 215], ["deeplab50_bn.ResNetMulti", "torch.load", "torch.load", "torch.load", "torch.load", "ResNetMulti.state_dict().copy", "ResNetMulti.load_state_dict", "i.split", "ResNetMulti.state_dict"], "function", ["None"], ["", "def", "Deeplab50_bn_", "(", "args", ",", "num_classes", "=", "21", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\n", "\n", "\n", "        ", "restore_from", "=", "'./pretrained_model/DeepLab_resnet_pretrained_init-f81d91e8.pth'", "\n", "# restore_from = './pretrained_model/GTA5_source.pth'", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "\n", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "            ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.Bottleneck.__init__": [[24, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "\n", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "# self.IN = None", "\n", "# if IN:", "\n", "#     self.IN = nn.InstanceNorm2d(planes*4, affine=affine_par)", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.Bottleneck.forward": [[45, 69], ["deeplab50_ClassINW.Bottleneck.conv1", "deeplab50_ClassINW.Bottleneck.bn1", "deeplab50_ClassINW.Bottleneck.relu", "deeplab50_ClassINW.Bottleneck.conv2", "deeplab50_ClassINW.Bottleneck.bn2", "deeplab50_ClassINW.Bottleneck.relu", "deeplab50_ClassINW.Bottleneck.conv3", "deeplab50_ClassINW.Bottleneck.bn3", "deeplab50_ClassINW.Bottleneck.relu", "deeplab50_ClassINW.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "# if self.IN is not None:", "\n", "#", "\n", "#     out = self.IN(out)", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.class_in_block.__init__": [[73, 85], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "deeplab50_ClassINW.class_in_block.branches.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "classin_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", "class_in_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "inplanes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "classin_classes", "=", "classin_classes", "\n", "self", ".", "branches", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "classin_classes", ":", "\n", "            ", "self", ".", "branches", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "1", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.class_in_block.forward": [[87, 105], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "sum", "deeplab50_ClassINW.class_in_block.relu", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab50_ClassINW.class_in_block.sigmoid", "deeplab50_ClassINW.class_in_block.IN", "outs.append"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "masks", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "masks", "=", "F", ".", "softmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "self", ".", "classin_classes", ":", "\n", "            ", "mask", "=", "torch", ".", "unsqueeze", "(", "masks", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "1", ")", "\n", "mid", "=", "x", "*", "mask", "\n", "avg_out", "=", "torch", ".", "mean", "(", "mid", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "mid", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "atten", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "atten", "=", "self", ".", "sigmoid", "(", "self", ".", "branches", "[", "idx", "]", "(", "atten", ")", ")", "\n", "out", "=", "mid", "*", "atten", "\n", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "out_", "=", "sum", "(", "outs", ")", "\n", "out_", "=", "self", ".", "relu", "(", "out_", ")", "\n", "\n", "return", "out_", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.Classifier_Module.__init__": [[108, 117], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab50_ClassINW.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.Classifier_Module.forward": [[118, 123], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.__init__": [[126, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab50_ClassINW.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab50_ClassINW.ResNetMulti._make_layer", "deeplab50_ClassINW.ResNetMulti._make_layer", "deeplab50_ClassINW.ResNetMulti._make_layer", "deeplab50_ClassINW.ResNetMulti._make_layer", "deeplab50_ClassINW.ResNetMulti._make_pred_layer", "deeplab50_ClassINW.ResNetMulti._make_pred_layer", "graphs.models.SAN.SAN", "graphs.models.SAN.SAN", "graphs.models.SAW.SAW", "graphs.models.SAW.SAW", "deeplab50_ClassINW.ResNetMulti.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "classifier_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "classifier_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "in1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "# self.layer1_class_in = class_in_block(inplanes=256, classin_classes=args.selected_classes)", "\n", "# self.layer2_class_in = class_in_block(inplanes=512, classin_classes=args.selected_classes)", "\n", "self", ".", "SAN_stage_1", "=", "SAN", "(", "inplanes", "=", "256", ",", "selected_classes", "=", "args", ".", "selected_classes", ")", "\n", "self", ".", "SAN_stage_2", "=", "SAN", "(", "inplanes", "=", "512", ",", "selected_classes", "=", "args", ".", "selected_classes", ")", "\n", "self", ".", "SAW_stage_1", "=", "SAW", "(", "args", ",", "dim", "=", "256", ",", "relax_denom", "=", "2.0", ",", "classifier", "=", "self", ".", "classifier_1", ")", "\n", "self", ".", "SAW_stage_2", "=", "SAW", "(", "args", ",", "dim", "=", "512", ",", "relax_denom", "=", "2.0", ",", "classifier", "=", "self", ".", "classifier_2", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "print_weights", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.print_weights": [[162, 169], ["deeplab50_ClassINW.ResNetMulti.layer1_pred.state_dict().keys", "[].numpy", "deeplab50_ClassINW.ResNetMulti.layer1_pred.state_dict", "deeplab50_ClassINW.ResNetMulti.layer1_pred.state_dict"], "methods", ["None"], ["", "", "", "def", "print_weights", "(", "self", ")", ":", "\n", "        ", "weights_keys", "=", "self", ".", "layer1_pred", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "for", "key", "in", "weights_keys", ":", "\n", "            ", "if", "\"num_batches_tracked\"", "in", "key", ":", "\n", "                ", "continue", "\n", "", "weights_t", "=", "self", ".", "layer1_pred", ".", "state_dict", "(", ")", "[", "key", "]", ".", "numpy", "(", ")", "\n", "", "return", "weights_t", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_layer": [[170, 185], ["layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti._make_pred_layer": [[186, 188], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.forward": [[189, 223], ["deeplab50_ClassINW.ResNetMulti.conv1", "deeplab50_ClassINW.ResNetMulti.in1", "deeplab50_ClassINW.ResNetMulti.relu", "deeplab50_ClassINW.ResNetMulti.maxpool", "deeplab50_ClassINW.ResNetMulti.layer1", "deeplab50_ClassINW.ResNetMulti.classifier_1", "deeplab50_ClassINW.ResNetMulti.SAN_stage_1", "deeplab50_ClassINW.ResNetMulti.SAW_stage_1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab50_ClassINW.ResNetMulti.layer2", "deeplab50_ClassINW.ResNetMulti.classifier_2", "deeplab50_ClassINW.ResNetMulti.SAN_stage_2", "deeplab50_ClassINW.ResNetMulti.SAW_stage_2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab50_ClassINW.ResNetMulti.layer3", "deeplab50_ClassINW.ResNetMulti.layer5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab50_ClassINW.ResNetMulti.layer4", "deeplab50_ClassINW.ResNetMulti.layer6", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplab50_ClassINW.ResNetMulti.size", "deeplab50_ClassINW.ResNetMulti.detach", "deeplab50_ClassINW.ResNetMulti.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x_1_ori", "=", "x", "\n", "x1", "=", "self", ".", "classifier_1", "(", "x", ".", "detach", "(", ")", ")", "\n", "x", "=", "self", ".", "SAN_stage_1", "(", "x", ",", "x1", ")", "\n", "x_1_ined", "=", "x", "\n", "\n", "saw_loss_lay1", "=", "self", ".", "SAW_stage_1", "(", "x", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x1", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x_2_ori", "=", "x", "\n", "x2", "=", "self", ".", "classifier_2", "(", "x", ".", "detach", "(", ")", ")", "\n", "x", "=", "self", ".", "SAN_stage_2", "(", "x", ",", "x2", ")", "\n", "x_2_ined", "=", "x", "\n", "\n", "saw_loss_lay2", "=", "self", ".", "SAW_stage_2", "(", "x", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x2", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x3", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x3", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x4", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x4", "=", "self", ".", "layer6", "(", "x4", ")", "\n", "x4", "=", "F", ".", "interpolate", "(", "x4", ",", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "x4", ",", "x3", ",", "x2", ",", "x1", ",", "x_2_ori", ",", "x_2_ined", ",", "x_1_ori", ",", "x_1_ined", ",", "saw_loss_lay2", ",", "saw_loss_lay1", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_1x_lr_params_NOscale": [[224, 251], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "in1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "SAN_stage_1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "SAN_stage_2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "b", ".", "append", "(", "self", ".", "classifier_1", ")", "\n", "b", ".", "append", "(", "self", ".", "classifier_2", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_10x_lr_params": [[252, 264], ["b.append", "b.append", "range", "deeplab50_ClassINW.ResNetMulti.layer5.parameters", "deeplab50_ClassINW.ResNetMulti.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.optim_parameters": [[265, 268], ["deeplab50_ClassINW.ResNetMulti.get_1x_lr_params_NOscale", "deeplab50_ClassINW.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.ResNetMulti.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.deeplab50_ClassINW.Res50_ClassINW": [[270, 290], ["deeplab50_ClassINW.ResNetMulti", "ResNetMulti.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "Res50_ClassINW", "(", "args", ",", "num_classes", "=", "21", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "args", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\n", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ",", "\n", "strict", "=", "False", ")", "\n", "\n", "# restore_from = './pretrained_model/DeepLab_resnet_pretrained_init-f81d91e8.pth'", "\n", "# # restore_from = './pretrained_model/GTA5_source.pth'", "\n", "# saved_state_dict = torch.load(restore_from)", "\n", "#", "\n", "# new_params = model.state_dict().copy()", "\n", "# for i in saved_state_dict:", "\n", "#     i_parts = i.split('.')", "\n", "#     if not i_parts[1] == 'layer5':", "\n", "#         new_params['.'.join(i_parts[1:])] = saved_state_dict[i]", "\n", "# model.load_state_dict(new_params)", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__": [[20, 33], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "SAN.SAN.CFR_branches.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "selected_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", "SAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "0", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "inplanes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "selected_classes", "=", "selected_classes", "\n", "self", ".", "CFR_branches", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "selected_classes", ":", "\n", "            ", "self", ".", "CFR_branches", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "1", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "mask_matrix", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.cosine_distance": [[34, 39], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "obs.norm", "centers.norm", "centers_norm.transpose"], "methods", ["None"], ["", "def", "cosine_distance", "(", "self", ",", "obs", ",", "centers", ")", ":", "\n", "        ", "obs_norm", "=", "obs", "/", "obs", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "centers_norm", "=", "centers", "/", "centers", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "cos", "=", "torch", ".", "matmul", "(", "obs_norm", ",", "centers_norm", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "return", "1", "-", "cos", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.l2_distance": [[40, 43], ["obs.unsqueeze", "centers.unsqueeze"], "methods", ["None"], ["", "def", "l2_distance", "(", "self", ",", "obs", ",", "centers", ")", ":", "\n", "        ", "dis", "=", "(", "(", "obs", ".", "unsqueeze", "(", "dim", "=", "1", ")", "-", "centers", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "**", "2.0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "squeeze", "(", ")", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN._kmeans_batch": [[44, 80], ["obs[].clone", "float", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "history_distances.append", "range", "distance_function", "distance_function.min", "seg_center_ids.append", "seg_center_dis.append", "torch.cat().mean.item", "torch.cat().mean.item", "torch.cat().mean.item", "torch.cat().mean.item", "obs.index_select", "obs.index_select.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "warnings.warn", "obs_id_in_cluster_i.sum", "obs_id_in_cluster_i.nonzero().squeeze", "obs.index_select.mean.norm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "obs_id_in_cluster_i.nonzero", "obs.size", "map"], "methods", ["None"], ["", "def", "_kmeans_batch", "(", "self", ",", "obs", ":", "torch", ".", "Tensor", ",", "k", ":", "int", ",", "distance_function", ",", "batch_size", "=", "0", ",", "thresh", "=", "1e-5", ",", "norm_center", "=", "False", ")", ":", "\n", "\n", "# k x D", "\n", "        ", "centers", "=", "obs", "[", "torch", ".", "randperm", "(", "obs", ".", "size", "(", "0", ")", ")", "[", ":", "k", "]", "]", ".", "clone", "(", ")", "\n", "history_distances", "=", "[", "float", "(", "'inf'", ")", "]", "\n", "if", "batch_size", "==", "0", ":", "\n", "            ", "batch_size", "=", "obs", ".", "shape", "[", "0", "]", "\n", "", "while", "True", ":", "\n", "# (N x D, k x D) -> N x k", "\n", "            ", "segs", "=", "torch", ".", "split", "(", "obs", ",", "batch_size", ")", "\n", "seg_center_dis", "=", "[", "]", "\n", "seg_center_ids", "=", "[", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "                ", "distances", "=", "distance_function", "(", "seg", ",", "centers", ")", "\n", "center_dis", ",", "center_ids", "=", "distances", ".", "min", "(", "dim", "=", "1", ")", "\n", "seg_center_ids", ".", "append", "(", "center_ids", ")", "\n", "seg_center_dis", ".", "append", "(", "center_dis", ")", "\n", "\n", "", "obs_center_dis_mean", "=", "torch", ".", "cat", "(", "seg_center_dis", ")", ".", "mean", "(", ")", "\n", "obs_center_ids", "=", "torch", ".", "cat", "(", "seg_center_ids", ")", "\n", "history_distances", ".", "append", "(", "obs_center_dis_mean", ".", "item", "(", ")", ")", "\n", "diff", "=", "history_distances", "[", "-", "2", "]", "-", "history_distances", "[", "-", "1", "]", "\n", "if", "diff", "<", "thresh", ":", "\n", "                ", "if", "diff", "<", "0", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"Distance diff < 0, distances: \"", "+", "\", \"", ".", "join", "(", "map", "(", "str", ",", "history_distances", ")", ")", ")", "\n", "", "break", "\n", "", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "                ", "obs_id_in_cluster_i", "=", "obs_center_ids", "==", "i", "\n", "if", "obs_id_in_cluster_i", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "obs_in_cluster", "=", "obs", ".", "index_select", "(", "0", ",", "obs_id_in_cluster_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "c", "=", "obs_in_cluster", ".", "mean", "(", "dim", "=", "0", ")", "\n", "if", "norm_center", ":", "\n", "                    ", "c", "/=", "c", ".", "norm", "(", ")", "\n", "", "centers", "[", "i", "]", "=", "c", "\n", "", "", "return", "centers", ",", "history_distances", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.kmeans": [[81, 97], ["float", "range", "SAN.SAN._kmeans_batch"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN._kmeans_batch"], ["", "def", "kmeans", "(", "self", ",", "obs", ":", "torch", ".", "Tensor", ",", "k", ":", "int", ",", "distance_function", "=", "l2_distance", ",", "iter", "=", "20", ",", "batch_size", "=", "0", ",", "thresh", "=", "1e-5", ",", "norm_center", "=", "False", ")", ":", "\n", "\n", "        ", "best_distance", "=", "float", "(", "\"inf\"", ")", "\n", "best_centers", "=", "None", "\n", "for", "i", "in", "range", "(", "iter", ")", ":", "\n", "            ", "if", "batch_size", "==", "0", ":", "\n", "                ", "batch_size", "==", "obs", ".", "shape", "[", "0", "]", "\n", "", "centers", ",", "distance", "=", "self", ".", "_kmeans_batch", "(", "obs", ",", "k", ",", "\n", "norm_center", "=", "norm_center", ",", "\n", "distance_function", "=", "distance_function", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "thresh", "=", "thresh", ")", "\n", "if", "distance", "<", "best_distance", ":", "\n", "                ", "best_centers", "=", "centers", "\n", "best_distance", "=", "distance", "\n", "", "", "return", "best_centers", ",", "best_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.product_quantization": [[98, 105], ["range", "SAN.SAN.kmeans", "centers.append"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.kmeans"], ["", "def", "product_quantization", "(", "self", ",", "data", ",", "sub_vector_size", ",", "k", ",", "**", "kwargs", ")", ":", "\n", "        ", "centers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "data", ".", "shape", "[", "1", "]", ",", "sub_vector_size", ")", ":", "\n", "            ", "sub_data", "=", "data", "[", ":", ",", "i", ":", "i", "+", "sub_vector_size", "]", "\n", "sub_centers", ",", "_", "=", "self", ".", "kmeans", "(", "sub_data", ",", "k", "=", "k", ",", "**", "kwargs", ")", "\n", "centers", ".", "append", "(", "sub_centers", ")", "\n", "", "return", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.data_to_pq": [[106, 119], ["len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "sum", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "SAN.SAN.l2_distance", "SAN.SAN.argmin().to", "SAN.SAN.argmin"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.l2_distance"], ["", "def", "data_to_pq", "(", "self", ",", "data", ",", "centers", ")", ":", "\n", "        ", "assert", "(", "len", "(", "centers", ")", ">", "0", ")", "\n", "assert", "(", "data", ".", "shape", "[", "1", "]", "==", "sum", "(", "[", "cb", ".", "shape", "[", "1", "]", "for", "cb", "in", "centers", "]", ")", ")", "\n", "\n", "m", "=", "len", "(", "centers", ")", "\n", "sub_size", "=", "centers", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "ret", "=", "torch", ".", "zeros", "(", "data", ".", "shape", "[", "0", "]", ",", "m", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "data", ".", "device", ")", "\n", "for", "idx", ",", "sub_vec", "in", "enumerate", "(", "torch", ".", "split", "(", "data", ",", "sub_size", ",", "dim", "=", "1", ")", ")", ":", "\n", "            ", "dis", "=", "self", ".", "l2_distance", "(", "sub_vec", ",", "centers", "[", "idx", "]", ")", "\n", "ret", "[", ":", ",", "idx", "]", "=", "dis", ".", "argmin", "(", "dim", "=", "1", ")", ".", "to", "(", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.train_product_quantization": [[120, 124], ["SAN.SAN.product_quantization", "SAN.SAN.data_to_pq"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.product_quantization", "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.data_to_pq"], ["", "def", "train_product_quantization", "(", "self", ",", "data", ",", "sub_vector_size", ",", "k", ",", "**", "kwargs", ")", ":", "\n", "        ", "center_list", "=", "self", ".", "product_quantization", "(", "data", ",", "sub_vector_size", ",", "k", ",", "**", "kwargs", ")", "\n", "pq_data", "=", "self", ".", "data_to_pq", "(", "data", ",", "center_list", ")", "\n", "return", "pq_data", ",", "center_list", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN._gram": [[125, 131], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["", "def", "_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "bs", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "ch", "*", "h", "*", "w", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.pq_distance_book": [[132, 144], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "len", "len", "range", "len", "SAN.SAN.l2_distance"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.l2_distance"], ["", "def", "pq_distance_book", "(", "self", ",", "pq_centers", ")", ":", "\n", "        ", "assert", "(", "len", "(", "pq_centers", ")", ">", "0", ")", "\n", "\n", "pq", "=", "torch", ".", "zeros", "(", "len", "(", "pq_centers", ")", ",", "\n", "len", "(", "pq_centers", "[", "0", "]", ")", ",", "\n", "len", "(", "pq_centers", "[", "0", "]", ")", ",", "\n", "device", "=", "pq_centers", "[", "0", "]", ".", "device", ")", "\n", "for", "ci", ",", "center", "in", "enumerate", "(", "pq_centers", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "center", ")", ")", ":", "\n", "                ", "dis", "=", "self", ".", "l2_distance", "(", "center", "[", "i", ":", "i", "+", "1", ",", ":", "]", ",", "center", ")", "\n", "pq", "[", "ci", ",", "i", "]", "=", "dis", "\n", "", "", "return", "pq", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.Regional_Normalization": [[145, 149], ["SAN.SAN.IN"], "methods", ["None"], ["", "def", "Regional_Normalization", "(", "self", ",", "region_mask", ",", "x", ")", ":", "\n", "        ", "masked", "=", "x", "*", "region_mask", "\n", "RN_feature_map", "=", "self", ".", "IN", "(", "masked", ")", "\n", "return", "RN_feature_map", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.asymmetric_table": [[150, 161], ["len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "sum", "range", "SAN.SAN.l2_distance"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.l2_distance"], ["", "def", "asymmetric_table", "(", "self", ",", "query", ",", "centers", ")", ":", "\n", "        ", "m", "=", "len", "(", "centers", ")", "\n", "sub_size", "=", "centers", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "ret", "=", "torch", ".", "zeros", "(", "\n", "query", ".", "shape", "[", "0", "]", ",", "m", ",", "centers", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "query", ".", "device", ")", "\n", "assert", "(", "query", ".", "shape", "[", "1", "]", "==", "sum", "(", "[", "cb", ".", "shape", "[", "1", "]", "for", "cb", "in", "centers", "]", ")", ")", "\n", "for", "i", ",", "offset", "in", "enumerate", "(", "range", "(", "0", ",", "query", ".", "shape", "[", "1", "]", ",", "sub_size", ")", ")", ":", "\n", "            ", "sub_query", "=", "query", "[", ":", ",", "offset", ":", "offset", "+", "sub_size", "]", "\n", "ret", "[", ":", ",", "i", ",", ":", "]", "=", "self", ".", "l2_distance", "(", "sub_query", ",", "centers", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.asymmetric_distance_slow": [[162, 172], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "range", "pq_data[].item"], "methods", ["None"], ["", "def", "asymmetric_distance_slow", "(", "self", ",", "asymmetric_tab", ",", "pq_data", ")", ":", "\n", "        ", "ret", "=", "torch", ".", "zeros", "(", "asymmetric_tab", ".", "shape", "[", "0", "]", ",", "pq_data", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "asymmetric_tab", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "pq_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "dis", "=", "0", "\n", "for", "k", "in", "range", "(", "pq_data", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "sub_dis", "=", "asymmetric_tab", "[", "i", ",", "k", ",", "pq_data", "[", "j", ",", "k", "]", ".", "item", "(", ")", "]", "\n", "dis", "+=", "sub_dis", "\n", "", "ret", "[", "i", ",", "j", "]", "=", "dis", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.asymmetric_distance": [[173, 177], ["pq_data.long", "sum", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "range"], "methods", ["None"], ["", "def", "asymmetric_distance", "(", "self", ",", "asymmetric_tab", ",", "pq_data", ")", ":", "\n", "        ", "pq_db", "=", "pq_data", ".", "long", "(", ")", "\n", "dd", "=", "[", "torch", ".", "index_select", "(", "asymmetric_tab", "[", ":", ",", "i", ",", ":", "]", ",", "1", ",", "pq_db", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "pq_data", ".", "shape", "[", "1", "]", ")", "]", "\n", "return", "sum", "(", "dd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.pq_distance": [[178, 185], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "enumerate", "enumerate", "zip", "oi.item", "ci.item"], "methods", ["None"], ["", "def", "pq_distance", "(", "self", ",", "obj", ",", "centers", ",", "pq_disbook", ")", ":", "\n", "        ", "ret", "=", "torch", ".", "zeros", "(", "obj", ".", "shape", "[", "0", "]", ",", "centers", ".", "shape", "[", "0", "]", ")", "\n", "for", "obj_idx", ",", "o", "in", "enumerate", "(", "obj", ")", ":", "\n", "            ", "for", "ct_idx", ",", "c", "in", "enumerate", "(", "centers", ")", ":", "\n", "                ", "for", "i", ",", "(", "oi", ",", "ci", ")", "in", "enumerate", "(", "zip", "(", "o", ",", "c", ")", ")", ":", "\n", "                    ", "ret", "[", "obj_idx", ",", "ct_idx", "]", "+=", "pq_disbook", "[", "i", ",", "oi", ".", "item", "(", ")", ",", "ci", ".", "item", "(", ")", "]", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.set_class_mask_matrix": [[186, 204], ["normalized_map.size", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.ones().cuda.view", "torch.ones().cuda.view", "torch.ones().cuda.view", "torch.ones().cuda.view", "kmeans1d.cluster", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "clusters.count", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.flatten.size", "torch.flatten.size", "torch.flatten.size", "torch.flatten.size", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.flatten.size", "torch.flatten.size", "torch.flatten.size", "torch.flatten.size"], "methods", ["None"], ["", "def", "set_class_mask_matrix", "(", "self", ",", "normalized_map", ")", ":", "\n", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "normalized_map", ".", "size", "(", ")", "\n", "var_flatten", "=", "torch", ".", "flatten", "(", "normalized_map", ")", "\n", "\n", "\n", "try", ":", "# kmeans1d clustering setting for RN block", "\n", "            ", "clusters", ",", "centroids", "=", "kmeans1d", ".", "cluster", "(", "var_flatten", ",", "5", ",", "3", ")", "\n", "num_category", "=", "var_flatten", ".", "size", "(", ")", "[", "0", "]", "-", "clusters", ".", "count", "(", "0", ")", "# 1: class-region, 2~5: background", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "var_flatten", ",", "k", "=", "int", "(", "num_category", ")", ")", "\n", "mask_matrix", "=", "torch", ".", "flatten", "(", "torch", ".", "zeros", "(", "b", ",", "c", ",", "h", ",", "w", ")", ".", "cuda", "(", ")", ")", "\n", "mask_matrix", "[", "indices", "]", "=", "1", "\n", "", "except", ":", "\n", "            ", "mask_matrix", "=", "torch", ".", "ones", "(", "var_flatten", ".", "size", "(", ")", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "", "mask_matrix", "=", "mask_matrix", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "mask_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.forward": [[205, 226], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "sum", "SAN.SAN.relu", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SAN.SAN.sigmoid", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SAN.SAN.set_class_mask_matrix", "SAN.SAN.Regional_Normalization", "outs.append"], "methods", ["home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.utils.eval.softmax", "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.set_class_mask_matrix", "home.repos.pwc.inspect_result.leolyj_san-saw.models.SAN.SAN.Regional_Normalization"], ["", "def", "forward", "(", "self", ",", "x", ",", "masks", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "masks", "=", "F", ".", "softmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "self", ".", "selected_classes", ":", "\n", "            ", "mask", "=", "torch", ".", "unsqueeze", "(", "masks", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "1", ")", "\n", "mid", "=", "x", "*", "mask", "\n", "avg_out", "=", "torch", ".", "mean", "(", "mid", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "mid", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "atten", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "atten", "=", "self", ".", "sigmoid", "(", "self", ".", "CFR_branches", "[", "idx", "]", "(", "atten", ")", ")", "\n", "out", "=", "mid", "*", "atten", "\n", "heatmap", "=", "torch", ".", "mean", "(", "out", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "class_region", "=", "self", ".", "set_class_mask_matrix", "(", "heatmap", ")", "\n", "out", "=", "self", ".", "Regional_Normalization", "(", "class_region", ",", "out", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "out_", "=", "sum", "(", "outs", ")", "\n", "out_", "=", "self", ".", "relu", "(", "out_", ")", "\n", "\n", "return", "out_", "\n", "\n"]]}