{"home.repos.pwc.inspect_result.shashacks_irl_transition.None.config.argparser": [[5, 155], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "v.lower", "print", "int", "v.split"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["def", "argparser", "(", ")", ":", "\n", "    ", "def", "str2bool", "(", "v", ")", ":", "\n", "        ", "return", "v", ".", "lower", "(", ")", "==", "'true'", "\n", "\n", "", "def", "str2list", "(", "v", ")", ":", "\n", "        ", "if", "not", "v", ":", "\n", "            ", "print", "(", "v", ")", "\n", "return", "v", "\n", "", "else", ":", "\n", "            ", "return", "[", "v_", "for", "v_", "in", "v", ".", "split", "(", "','", ")", "]", "\n", "\n", "", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Transition Policy with Inverse Reinforcement Learning'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--mpi'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"use mpi\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--hrl'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--complex_task'", ",", "type", "=", "str", ",", "default", "=", "'patrol'", ",", "choices", "=", "[", "'patrol'", ",", "'obstacle'", ",", "'hurdle'", ",", "'pick'", ",", "'serve'", ",", "'catch'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "5000", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "default", "=", "'Walker2dForward-v1'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'Hopper-v3'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "4000", ")", "\n", "parser", ".", "add_argument", "(", "'--num_rollouts'", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "parser", ".", "add_argument", "(", "'--max_steps'", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--primitive_algo'", ",", "type", "=", "str", ",", "default", "=", "'ppo'", ",", "\n", "choices", "=", "[", "'ppo'", ",", "'trpo'", ",", "'ppo_reward_test'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--primitive_hid_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--primitive_hid_layer'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n", "# Lee trpo", "\n", "parser", ".", "add_argument", "(", "'--rl_num_hid_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--rl_hid_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--rl_fixed_var'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--rl_activation'", ",", "type", "=", "str", ",", "default", "=", "'tanh'", ",", "choices", "=", "[", "'relu'", ",", "'elu'", ",", "'tanh'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--primitive_include_acc'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "\n", "# ppo", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.20", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ")", "\n", "parser", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "0.97", ")", "\n", "parser", ".", "add_argument", "(", "'--target_kl'", ",", "type", "=", "float", ",", "default", "=", "0.015", ")", "\n", "parser", ".", "add_argument", "(", "'--entcoeff'", ",", "type", "=", "float", ",", "default", "=", "0.002", ")", "\n", "parser", ".", "add_argument", "(", "'--ppo_pi_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--ppo_vf_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--ppo_batchsize'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--ppo_train_v_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n", "# trpo", "\n", "parser", ".", "add_argument", "(", "'--delta'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--damping_coeff'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--cg_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--backtrack_coeff'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--backtrack_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--trpo_batchsize'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--trpo_train_v_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n", "# sac", "\n", "parser", ".", "add_argument", "(", "'--sac_steps_per_epoch'", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_epochs'", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_replay_size'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e6", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.99", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sac_polyak'", ",", "type", "=", "float", ",", "default", "=", "0.995", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_batchsize'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_start_steps'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sac_update_after'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_update_every'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_num_test_episodes'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--sac_max_ep_len'", ",", "type", "=", "int", ",", "default", "=", "8000", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sac_save_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "# collect expert demonstration ", "\n", "parser", ".", "add_argument", "(", "'--collect_exp_data'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--front'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "# parser.add_argument('--exp_buffer_size', type=int, default=5000)", "\n", "parser", ".", "add_argument", "(", "'--exp_buffer_size'", ",", "type", "=", "int", ",", "default", "=", "1000000", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--primitive_path'", ",", "type", "=", "str", ",", "default", "=", "'data/ppo_forward/ppo_forward_s5003/pyt_save/model.pt'", ")", "\n", "parser", ".", "add_argument", "(", "'--primitive_env'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--primitive'", ",", "type", "=", "str", ",", "choices", "=", "[", "'walk'", ",", "'jump'", ",", "'crawl'", "]", ")", "\n", "\n", "# irl", "\n", "parser", ".", "add_argument", "(", "'--irl_training'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--env_1'", ",", "type", "=", "str", ",", "default", "=", "'forward'", ")", "\n", "parser", ".", "add_argument", "(", "'--env_2'", ",", "type", "=", "str", ",", "default", "=", "'jump'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_data_path_1'", ",", "type", "=", "str", ",", "default", "=", "'data/exp_demo/Walker2dForwardHmap-v1'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_data_path_2'", ",", "type", "=", "str", ",", "default", "=", "'data/exp_demo/Walker2dJumpHmap-v1'", ")", "\n", "parser", ".", "add_argument", "(", "'--irl_algo'", ",", "type", "=", "str", ",", "default", "=", "'airl'", ")", "\n", "\n", "# evaluate path", "\n", "parser", ".", "add_argument", "(", "'--path'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--render'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_algo'", ",", "type", "=", "str", ",", "default", "=", "'trpo'", ",", "choices", "=", "[", "'ppo'", ",", "'trpo'", "]", ")", "\n", "\n", "# Q-network", "\n", "parser", ".", "add_argument", "(", "'--gamma_q'", ",", "type", "=", "float", ",", "default", "=", "0.99", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate_q'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--max_buffer_size_q'", ",", "type", "=", "int", ",", "default", "=", "1000000", ")", "\n", "parser", ".", "add_argument", "(", "'--update_target_frequency_q'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon_q'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon_min_q'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon_decay_q'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_q'", ",", "type", "=", "int", ",", "default", "=", "20000", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_q'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_frequency_q'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "\n", "# training Q-network for obstacle and patorl single", "\n", "parser", ".", "add_argument", "(", "'--option'", ",", "type", "=", "str", ",", "default", "=", "'p'", ",", "choices", "=", "[", "'n'", ",", "'p'", "]", ")", "# negative direction first ", "\n", "parser", ".", "add_argument", "(", "'--prev'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--tran'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--next'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--fname'", ",", "type", "=", "str", ",", "default", "=", "'jump'", ")", "\n", "\n", "# training Q-network for obstacle and patorl", "\n", "parser", ".", "add_argument", "(", "'--pi1'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: walk / patrol: forward walk", "\n", "parser", ".", "add_argument", "(", "'--pi2'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: jump / patrol: backward walk", "\n", "parser", ".", "add_argument", "(", "'--pi3'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: crawl", "\n", "parser", ".", "add_argument", "(", "'--pi12'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: walk->jump / patrol: forward walk-> backward walk", "\n", "parser", ".", "add_argument", "(", "'--pi21'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: jump->walk / patrol: backward walk-> forward walk", "\n", "parser", ".", "add_argument", "(", "'--pi13'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: walk->crawl", "\n", "parser", ".", "add_argument", "(", "'--pi31'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: crawl->walk", "\n", "parser", ".", "add_argument", "(", "'--pi23'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--pi32'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--q12'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle Q-network: walk->jump / patrol Q-network: forward walk-> backward walk", "\n", "parser", ".", "add_argument", "(", "'--q21'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle Q-network: jump->walk / patrol Q-network: backward walk-> forward walk", "\n", "parser", ".", "add_argument", "(", "'--q13'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle Q-network: walk->crawl", "\n", "parser", ".", "add_argument", "(", "'--q31'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle Q-network: crawl->walk", "\n", "parser", ".", "add_argument", "(", "'--q23'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--q32'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--single'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--pi1_env'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: walk / patrol: forward walk", "\n", "parser", ".", "add_argument", "(", "'--pi2_env'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: jump / patrol: backward walk", "\n", "parser", ".", "add_argument", "(", "'--pi3_env'", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# obstacle: jump / patrol: backward walk", "\n", "\n", "parser", ".", "add_argument", "(", "'--perplexity'", ",", "type", "=", "int", ",", "default", "=", "40", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Person.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "base", "=", "10", "\n", "", "def", "greeting", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Person.greeting": [[17, 19], ["print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "greeting", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\uc548\ub155\ud558\uc138\uc694.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Gauss.__init__": [[21, 24], ["print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["    ", "def", "__init__", "(", "self", ",", "rms_dict", ")", ":", "\n", "        ", "print", "(", "'Gauss'", ",", "rms_dict", ")", "\n", "self", ".", "rms_dict", "=", "rms_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Gauss.check": [[25, 27], ["print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Check Gauss'", ",", "self", ".", "rms_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Gauss.update": [[28, 32], ["print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Update Gauss'", ")", "\n", "self", ".", "rms_dict", "[", "'sum'", "]", "=", "self", ".", "rms_dict", "[", "'sum'", "]", "+", "torch", ".", "tensor", "(", "[", "1000.", "]", ")", "\n", "self", ".", "rms_dict", "[", "'count'", "]", "=", "self", ".", "rms_dict", "[", "'count'", "]", "+", "torch", ".", "tensor", "(", "[", "1000.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.__init__": [[34, 40], ["mpi.Person.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mpi.Gauss"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rms_sum", "=", "torch", ".", "tensor", "(", "[", "1.", "]", ")", "\n", "self", ".", "rms_count", "=", "torch", ".", "tensor", "(", "[", "2.", "]", ")", "\n", "self", ".", "rms_dict", "=", "{", "'sum'", ":", "self", ".", "rms_sum", ",", "'count'", ":", "self", ".", "rms_count", "}", "\n", "self", ".", "pi", "=", "Gauss", "(", "self", ".", "rms_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check": [[41, 45], ["print", "print", "print", "id", "id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Check Student'", ",", "self", ".", "rms_dict", ")", "\n", "print", "(", "'id'", ",", "id", "(", "self", ".", "rms_dict", "[", "'sum'", "]", ")", ")", "\n", "print", "(", "'id'", ",", "id", "(", "self", ".", "rms_sum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.update": [[46, 50], ["print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Update Student'", ")", "\n", "self", ".", "rms_sum", "=", "self", ".", "rms_sum", "+", "torch", ".", "tensor", "(", "[", "100.", "]", ")", "\n", "self", ".", "rms_count", "=", "self", ".", "rms_count", "+", "torch", ".", "tensor", "(", "[", "100.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.mlp": [[6, 12], ["range", "torch.Sequential", "len", "torch.Linear", "act", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["def", "mlp", "(", "sizes", ",", "activation", ",", "output_activation", "=", "nn", ".", "Identity", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "sizes", ")", "-", "1", ")", ":", "\n", "        ", "act", "=", "activation", "if", "j", "<", "len", "(", "sizes", ")", "-", "2", "else", "output_activation", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "sizes", "[", "j", "]", ",", "sizes", "[", "j", "+", "1", "]", ")", ",", "act", "(", ")", "]", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.main": [[52, 62], ["mpi.Student", "mpi.Student.check", "Student.pi.check", "mpi.Student.update", "mpi.Student.check", "Student.pi.check", "Student.pi.update", "mpi.Student.check", "Student.pi.check"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check", "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check", "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check", "home.repos.pwc.inspect_result.shashacks_irl_transition.None.mpi.Student.check"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "james", "=", "Student", "(", ")", "\n", "james", ".", "check", "(", ")", "\n", "james", ".", "pi", ".", "check", "(", ")", "\n", "james", ".", "update", "(", ")", "\n", "james", ".", "check", "(", ")", "\n", "james", ".", "pi", ".", "check", "(", ")", "\n", "james", ".", "pi", ".", "update", "(", ")", "\n", "james", ".", "check", "(", ")", "\n", "james", ".", "pi", ".", "check", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.main.train_primitive": [[36, 44], ["algo.trpo.trpo.TRPO.train", "algo.ppo.ppo.PPO", "algo.trpo.trpo.TRPO"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.train"], ["def", "train_primitive", "(", "args", ",", "logger_kwargs", ")", ":", "\n", "\n", "    ", "if", "args", ".", "primitive_algo", "==", "'ppo'", ":", "\n", "        ", "algo", "=", "PPO", "(", "args", ",", "logger_kwargs", ")", "\n", "", "elif", "args", ".", "primitive_algo", "==", "'trpo'", ":", "\n", "        ", "algo", "=", "TRPO", "(", "args", ",", "logger_kwargs", ")", "\n", "\n", "", "algo", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.None.main.main": [[46, 104], ["config.argparser", "spinup.utils.mpi_tools.mpi_fork", "setup_logger_kwargs", "spinup.utils.mpi_pytorch.setup_pytorch_for_mpi", "print", "print", "print", "print", "print", "print", "q_network.train_q_network_obstacle.train_q_network_obstacle", "print", "irl.train_irl.train_irl", "print", "print", "main.train_primitive", "print", "q_network.test_q_network_hurdle.test_q_network_hurdle", "irl.collect_demo.collect_demo", "q_network.train_q_network_hurdle.train_q_network_hurdle", "q_network.test_q_network_obstacle.test_q_network_obstacle", "irl.collect_demo_arm.collect_demo_arm", "q_network.train_q_network_pick.train_q_network_pick", "q_network.test_q_network_pick.test_q_network_pick", "q_network.train_q_network_serve.train_q_network_serve", "q_network.test_q_network_serve.test_q_network_serve", "q_network.train_q_network_patrol.train_q_network_patrol", "q_network.test_q_network_patrol.test_q_network_patrol", "q_network.train_q_network_catch.train_q_network_catch", "q_network.test_q_network_catch.test_q_network_catch"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.None.config.argparser", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_fork.mpi_fork", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.setup_logger_kwargs", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.setup_pytorch_for_mpi", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.train_q_network_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.train_irl.train_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.None.main.train_primitive", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.test_q_network_hurdle", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(ori).collect_demo", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.train_q_network_hurdle", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.test_q_network_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo_arm.collect_demo_arm", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.train_q_network_pick", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.test_q_network_pick", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.train_q_network_serve", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.test_q_network_serve", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.train_q_network_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.test_q_network_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.train_q_network_catch", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.test_q_network_catch"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "argparser", "(", ")", "\n", "mpi_fork", "(", "args", ".", "mpi", ")", "# run parallel code with mpi", "\n", "from", "spinup", ".", "utils", ".", "run_utils", "import", "setup_logger_kwargs", "\n", "logger_kwargs", "=", "setup_logger_kwargs", "(", "args", ".", "exp_name", ",", "args", ".", "seed", ")", "\n", "\n", "# Special function to avoid certain slowdowns from PyTorch + MPI combo.", "\n", "setup_pytorch_for_mpi", "(", ")", "\n", "if", "args", ".", "train", ":", "\n", "        ", "if", "args", ".", "hrl", ":", "\n", "            ", "print", "(", "f\"Start training a Q-network\"", ")", "\n", "if", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "                ", "train_q_network_obstacle", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "                ", "train_q_network_hurdle", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "                ", "train_q_network_pick", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "                ", "train_q_network_serve", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                ", "train_q_network_patrol", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                ", "train_q_network_catch", "(", "args", ")", "\n", "\n", "", "print", "(", "f\"Done training a Q-network\"", ")", "\n", "\n", "", "elif", "args", ".", "irl_training", ":", "\n", "            ", "print", "(", "\"Start IRL training\"", ")", "\n", "train_irl", "(", "args", ")", "\n", "print", "(", "\"Done IRL training\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Start training primitive policy\"", ")", "\n", "train_primitive", "(", "args", ",", "logger_kwargs", ")", "\n", "print", "(", "\"Done training primitive policy\"", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "hrl", ":", "\n", "            ", "print", "(", "f\"Start test hrl result\"", ")", "\n", "if", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "                ", "test_q_network_hurdle", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "                ", "test_q_network_obstacle", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "                ", "test_q_network_pick", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "                ", "test_q_network_serve", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                ", "test_q_network_patrol", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                ", "test_q_network_catch", "(", "args", ")", "\n", "\n", "", "print", "(", "f\"Done test hrl result\"", ")", "\n", "", "if", "args", ".", "collect_exp_data", ":", "\n", "            ", "print", "(", "f\"Start collecting {args.env} expert demonstrations\"", ")", "\n", "if", "args", ".", "complex_task", "==", "'hurdle'", "or", "args", ".", "complex_task", "==", "'obstacle'", "or", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                ", "collect_demo", "(", "args", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'pick'", "or", "args", ".", "complex_task", "==", "'serve'", "or", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                ", "collect_demo_arm", "(", "args", ")", "\n", "", "print", "(", "f\"Done collecting {args.env} expert demonstrations\"", ")", "\n", "# else: rendering?", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.SerializedStartBuffer.__init__": [[6, 16], ["torch.load", "tmp[].size", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone", "tmp[].clone", "tmp[].clone", "tmp[].clone", "tmp[].clone"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'time'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "times", "=", "tmp", "[", "'time'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "qposs", "=", "tmp", "[", "'qpos'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "qvels", "=", "tmp", "[", "'qvel'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "qacts", "=", "tmp", "[", "'qact'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "obstacle_poss", "=", "tmp", "[", "'obstacle_pos'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.SerializedStartBuffer.sample": [[17, 25], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ")", "\n", "return", "(", "\n", "self", ".", "times", "[", "idx", "]", ",", "\n", "self", ".", "qposs", "[", "idx", "]", ",", "\n", "self", ".", "qvels", "[", "idx", "]", ",", "\n", "self", ".", "qacts", "[", "idx", "]", ",", "\n", "self", ".", "obstacle_poss", "[", "idx", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.SerializedBufferForTSNE.__init__": [[29, 39], ["torch.load", "tmp[].size", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone", "tmp[].clone", "tmp[].clone", "tmp[].clone", "tmp[].clone"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.SerializedBufferForTSNE.sample": [[40, 48], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.SerializedBuffer.__init__": [[52, 66], ["torch.load", "tmp[].size", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "tmp[].clone().to", "torch.mean", "torch.max", "torch.zeros", "torch.tensor", "torch.std", "tmp[].clone", "tmp[].clone", "tmp[].clone", "tmp[].clone", "tmp[].clone"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "mean", "(", "self", ".", "states", ",", "dim", "=", "0", ")", "\n", "self", ".", "epsilon", "=", "torch", ".", "zeros", "(", "self", ".", "mean", ".", "shape", ")", "+", "torch", ".", "tensor", "(", "[", "1e-4", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "max", "(", "torch", ".", "std", "(", "self", ".", "states", ",", "dim", "=", "0", ")", ",", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.SerializedBuffer.sample": [[67, 75], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.StartBuffer.__init__": [[78, 92], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_size", ",", "time", ",", "qpos", ",", "qvel", ",", "qact", ",", "obstacle_pos", ",", "device", ")", ":", "\n", "        ", "self", ".", "_p", "=", "0", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "time", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "time", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "qpos", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "qpos", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "qvel", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "qvel", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "qact", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "qact", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "obstacle_pos", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "obstacle_pos", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.StartBuffer.append": [[93, 102], ["buffer.StartBuffer.time[].copy_", "buffer.StartBuffer.qpos[].copy_", "buffer.StartBuffer.qvel[].copy_", "buffer.StartBuffer.qact[].copy_", "buffer.StartBuffer.obstacle_pos[].copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "qact", ",", "obstacle_pos", ")", ":", "\n", "        ", "if", "not", "self", ".", "_p", "==", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "time", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "time", ")", ")", "\n", "self", ".", "qpos", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "qpos", ")", ")", "\n", "self", ".", "qvel", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "qvel", ")", ")", "\n", "self", ".", "qact", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "qact", ")", ")", "\n", "self", ".", "obstacle_pos", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "obstacle_pos", ")", ")", "\n", "\n", "self", ".", "_p", "=", "self", ".", "_p", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.StartBuffer.save": [[103, 114], ["torch.save", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname", "buffer.StartBuffer.time.clone().cpu", "buffer.StartBuffer.qpos.clone().cpu", "buffer.StartBuffer.qvel.clone().cpu", "buffer.StartBuffer.qact.clone().cpu", "buffer.StartBuffer.obstacle_pos.clone().cpu", "buffer.StartBuffer.time.clone", "buffer.StartBuffer.qpos.clone", "buffer.StartBuffer.qvel.clone", "buffer.StartBuffer.qact.clone", "buffer.StartBuffer.obstacle_pos.clone"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'time'", ":", "self", ".", "time", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'qpos'", ":", "self", ".", "qpos", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'qvel'", ":", "self", ".", "qvel", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'qact'", ":", "self", ".", "qact", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'obstacle_pos'", ":", "self", ".", "obstacle_pos", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.StartBuffer.sample": [[115, 118], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "buffer_size", ")", "\n", "return", "(", "self", ".", "time", "[", "idx", "]", ",", "self", ".", "qpos", "[", "idx", "]", ",", "self", ".", "qvel", "[", "idx", "]", ",", "self", ".", "qact", "[", "idx", "]", ",", "self", ".", "obstacle_pos", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.BufferForTSNE.__init__": [[121, 137], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_size", ",", "state_shape", ",", "action_shape", ",", "device", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_p", "=", "0", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "*", "state_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "actions", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "*", "action_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "dones", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "next_states", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "*", "state_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.BufferForTSNE.append": [[138, 147], ["buffer.BufferForTSNE.states[].copy_", "buffer.BufferForTSNE.actions[].copy_", "float", "float", "buffer.BufferForTSNE.next_states[].copy_", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "append", "(", "self", ",", "state", ",", "action", ",", "reward", ",", "done", ",", "next_state", ")", ":", "\n", "        ", "self", ".", "states", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "state", ")", ")", "\n", "self", ".", "actions", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "action", ")", ")", "\n", "self", ".", "rewards", "[", "self", ".", "_p", "]", "=", "float", "(", "reward", ")", "\n", "self", ".", "dones", "[", "self", ".", "_p", "]", "=", "float", "(", "done", ")", "\n", "self", ".", "next_states", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "next_state", ")", ")", "\n", "\n", "self", ".", "_p", "=", "(", "self", ".", "_p", "+", "1", ")", "%", "self", ".", "buffer_size", "\n", "self", ".", "_n", "=", "min", "(", "self", ".", "_n", "+", "1", ",", "self", ".", "buffer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.BufferForTSNE.save": [[148, 159], ["torch.save", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname", "buffer.BufferForTSNE.states.clone().cpu", "buffer.BufferForTSNE.actions.clone().cpu", "buffer.BufferForTSNE.rewards.clone().cpu", "buffer.BufferForTSNE.dones.clone().cpu", "buffer.BufferForTSNE.next_states.clone().cpu", "buffer.BufferForTSNE.states.clone", "buffer.BufferForTSNE.actions.clone", "buffer.BufferForTSNE.rewards.clone", "buffer.BufferForTSNE.dones.clone", "buffer.BufferForTSNE.next_states.clone"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'state'", ":", "self", ".", "states", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'action'", ":", "self", ".", "actions", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'reward'", ":", "self", ".", "rewards", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'done'", ":", "self", ".", "dones", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'next_state'", ":", "self", ".", "next_states", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.__init__": [[162, 178], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_size", ",", "state_shape", ",", "action_shape", ",", "device", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_p", "=", "0", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "state_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "actions", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "action_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "dones", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "next_states", "=", "torch", ".", "empty", "(", "\n", "(", "buffer_size", ",", "state_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.append": [[179, 188], ["buffer.Buffer.states[].copy_", "buffer.Buffer.actions[].copy_", "float", "float", "buffer.Buffer.next_states[].copy_", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "append", "(", "self", ",", "state", ",", "action", ",", "reward", ",", "done", ",", "next_state", ")", ":", "\n", "        ", "self", ".", "states", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "state", ")", ")", "\n", "self", ".", "actions", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "action", ")", ")", "\n", "self", ".", "rewards", "[", "self", ".", "_p", "]", "=", "float", "(", "reward", ")", "\n", "self", ".", "dones", "[", "self", ".", "_p", "]", "=", "float", "(", "done", ")", "\n", "self", ".", "next_states", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "next_state", ")", ")", "\n", "\n", "self", ".", "_p", "=", "(", "self", ".", "_p", "+", "1", ")", "%", "self", ".", "buffer_size", "\n", "self", ".", "_n", "=", "min", "(", "self", ".", "_n", "+", "1", ",", "self", ".", "buffer_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save": [[189, 200], ["torch.save", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname", "buffer.Buffer.states.clone().cpu", "buffer.Buffer.actions.clone().cpu", "buffer.Buffer.rewards.clone().cpu", "buffer.Buffer.dones.clone().cpu", "buffer.Buffer.next_states.clone().cpu", "buffer.Buffer.states.clone", "buffer.Buffer.actions.clone", "buffer.Buffer.rewards.clone", "buffer.Buffer.dones.clone", "buffer.Buffer.next_states.clone"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'state'", ":", "self", ".", "states", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'action'", ":", "self", ".", "actions", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'reward'", ":", "self", ".", "rewards", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'done'", ":", "self", ".", "dones", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'next_state'", ":", "self", ".", "next_states", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.__init__": [[204, 223], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_size", ",", "state_shape", ",", "action_shape", ",", "device", ",", "mix", "=", "1", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_p", "=", "0", "\n", "self", ".", "mix", "=", "mix", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "total_size", "=", "mix", "*", "buffer_size", "\n", "\n", "self", ".", "states", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "total_size", ",", "*", "state_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "actions", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "total_size", ",", "*", "action_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "total_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "dones", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "total_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "log_pis", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "total_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "next_states", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "total_size", ",", "*", "state_shape", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append": [[224, 234], ["buffer.RolloutBuffer.states[].copy_", "buffer.RolloutBuffer.actions[].copy_", "float", "float", "float", "buffer.RolloutBuffer.next_states[].copy_", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "append", "(", "self", ",", "state", ",", "action", ",", "reward", ",", "done", ",", "log_pi", ",", "next_state", ")", ":", "\n", "        ", "self", ".", "states", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "state", ")", ")", "\n", "self", ".", "actions", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "action", ")", ")", "\n", "self", ".", "rewards", "[", "self", ".", "_p", "]", "=", "float", "(", "reward", ")", "\n", "self", ".", "dones", "[", "self", ".", "_p", "]", "=", "float", "(", "done", ")", "\n", "self", ".", "log_pis", "[", "self", ".", "_p", "]", "=", "float", "(", "log_pi", ")", "\n", "self", ".", "next_states", "[", "self", ".", "_p", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "next_state", ")", ")", "\n", "\n", "self", ".", "_p", "=", "(", "self", ".", "_p", "+", "1", ")", "%", "self", ".", "total_size", "\n", "self", ".", "_n", "=", "min", "(", "self", ".", "_n", "+", "1", ",", "self", ".", "total_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.get": [[235, 246], ["slice"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_p", "%", "self", ".", "buffer_size", "==", "0", "\n", "start", "=", "(", "self", ".", "_p", "-", "self", ".", "buffer_size", ")", "%", "self", ".", "total_size", "\n", "idx", "=", "slice", "(", "start", ",", "start", "+", "self", ".", "buffer_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "log_pis", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.sample": [[248, 258], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "assert", "self", ".", "_p", "%", "self", ".", "buffer_size", "==", "0", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "log_pis", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.train_irl.train_irl": [[13, 61], ["gym.make", "gym.make", "irl.buffer.SerializedStartBuffer", "irl.buffer.SerializedBuffer", "irl.trainer.Trainer", "irl.trainer.Trainer.train", "gym.make.unwrapped.set_curbs_x_randomness_for_irl", "gym.make.unwrapped.set_curbs_x_randomness_for_irl", "tuple", "gym.make.unwrapped.set_randomness_for_irl", "gym.make.unwrapped.set_randomness_for_irl", "map", "os.path.join", "torch.device", "os.path.join", "torch.device", "torch.device", "zip"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.train", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.set_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.set_randomness_for_irl"], ["def", "train_irl", "(", "args", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "env_test", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "if", "args", ".", "complex_task", "==", "'obstacle'", "or", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "        ", "env", ".", "unwrapped", ".", "set_curbs_x_randomness_for_irl", "(", ")", "\n", "env_test", ".", "unwrapped", ".", "set_curbs_x_randomness_for_irl", "(", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "        ", "env", ".", "unwrapped", ".", "set_randomness_for_irl", "(", ")", "\n", "env_test", ".", "unwrapped", ".", "set_randomness_for_irl", "(", ")", "\n", "\n", "", "if", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "        ", "env_obs_shape", "=", "tuple", "(", "map", "(", "sum", ",", "zip", "(", "(", "2", ",", ")", ",", "env", ".", "observation_space", ".", "shape", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "env_obs_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "\n", "", "start_buffer_exp", "=", "SerializedStartBuffer", "(", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_data_path_1", ",", "'exp_demo_start.pth'", ")", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "buffer_exp", "=", "SerializedBuffer", "(", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_data_path_2", ",", "'exp_demo.pth'", ")", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "algo", "=", "ALGOS", "[", "args", ".", "irl_algo", "]", "(", "\n", "buffer_exp", "=", "buffer_exp", ",", "\n", "args", "=", "args", ",", "\n", "start_buffer_exp", "=", "start_buffer_exp", ",", "\n", "state_shape", "=", "env_obs_shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "rollout_length", "=", "50000", ",", "\n", "front", "=", "args", ".", "front", "\n", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "\n", "env", "=", "env", ",", "\n", "env_test", "=", "env_test", ",", "\n", "algo", "=", "algo", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "args", "=", "args", ",", "\n", "start_buffer_exp", "=", "start_buffer_exp", "\n", ")", "\n", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer.Trainer.__init__": [[14, 46], ["super().__init__", "trainer.Trainer.set_seed", "os.path.join", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "env_test", ",", "algo", ",", "args", ",", "start_buffer_exp", ",", "seed", "=", "0", ",", "num_steps", "=", "10000000", ",", "\n", "eval_interval", "=", "10000", ",", "num_eval_episodes", "=", "5", ",", "train_with_learned_reward", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "# Env to collect samples.", "\n", "self", ".", "env", "=", "env", "\n", "\n", "# Env for evaluation.", "\n", "self", ".", "env_test", "=", "env_test", "\n", "\n", "self", ".", "set_seed", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "algo", "=", "algo", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "'data/transition'", ",", "args", ".", "env_1", "+", "'_'", "+", "args", ".", "env_2", ")", "\n", "\n", "# Log setting.", "\n", "self", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'summary'", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "summary_dir", ")", "\n", "self", ".", "model_dir", "=", "self", ".", "log_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "model_dir", ")", "\n", "\n", "# Other parameters.", "\n", "", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "eval_interval", "=", "eval_interval", "\n", "self", ".", "num_eval_episodes", "=", "num_eval_episodes", "\n", "\n", "self", ".", "train_with_learned_reward", "=", "train_with_learned_reward", "\n", "self", ".", "start_buffer_exp", "=", "start_buffer_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer.Trainer.set_seed": [[47, 60], ["torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "trainer.Trainer.env.seed", "trainer.Trainer.env_test.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "self", ")", ":", "\n", "# Random seed", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "self", ".", "env", ".", "seed", "(", "self", ".", "seed", ")", "\n", "self", ".", "env_test", ".", "seed", "(", "2", "**", "31", "-", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer.Trainer.train": [[61, 98], ["time.time.time", "trainer.Trainer.env.reset", "trainer.Trainer.start_buffer_exp.sample", "trainer.Trainer.env.unwrapped.rollback", "range", "time.time.sleep", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "trainer.Trainer.algo.step", "trainer.Trainer.algo.is_update", "trainer.Trainer.env.unwrapped.get_dist", "numpy.append", "trainer.Trainer.algo.update", "trainer.Trainer.evaluate", "trainer.Trainer.algo.save_reward_function", "trainer.Trainer.algo.save_models", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "numpy.array", "os.path.join", "os.path.join", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.is_update", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.evaluate", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.save_reward_function", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.save_models"], ["", "def", "train", "(", "self", ")", ":", "\n", "# Time to start training.", "\n", "        ", "self", ".", "start_time", "=", "time", "(", ")", "\n", "# Episode's timestep.", "\n", "t", "=", "0", "\n", "# Initialize the environment.", "\n", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "start_sample", "=", "self", ".", "start_buffer_exp", ".", "sample", "(", ")", "\n", "\n", "\n", "state", "=", "self", ".", "env", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "3", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "4", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "for", "step", "in", "range", "(", "1", ",", "self", ".", "num_steps", "+", "1", ")", ":", "\n", "# Pass to the algorithm to update state and episode timestep.", "\n", "            ", "if", "self", ".", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "dist", "=", "self", ".", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "state", "=", "np", ".", "append", "(", "state", ",", "np", ".", "array", "(", "dist", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "state", ",", "t", "=", "self", ".", "algo", ".", "step", "(", "self", ".", "env", ",", "state", ",", "t", ",", "step", ")", "\n", "\n", "# Update the algorithm whenever ready.", "\n", "if", "self", ".", "algo", ".", "is_update", "(", "step", ")", ":", "\n", "                ", "self", ".", "algo", ".", "update", "(", "self", ".", "writer", ")", "\n", "\n", "# Evaluate regularly.", "\n", "", "if", "step", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "self", ".", "evaluate", "(", "step", ")", "\n", "\n", "", "if", "step", "%", "(", "self", ".", "eval_interval", "*", "100", ")", "==", "0", ":", "\n", "                ", "self", ".", "algo", ".", "save_reward_function", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "f'step{step}'", ")", ")", "\n", "self", ".", "algo", ".", "save_models", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "f'step{step}'", ")", ")", "\n", "# Wait for the logging to be finished.", "\n", "", "", "sleep", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer.Trainer.evaluate": [[99, 183], ["range", "trainer.Trainer.writer.add_scalar", "print", "trainer.Trainer.env_test.reset", "trainer.Trainer.start_buffer_exp.sample", "trainer.Trainer.env_test.unwrapped.rollback", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "trainer.Trainer.env_test.step", "trainer.Trainer.env_test.unwrapped.is_transition_boundary", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_rear", "trainer.Trainer.algo.exploit", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_obstacle", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_rear_for_obstacle", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_pick", "trainer.Trainer.env_test.unwrapped.is_transition_boundary", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_rear", "trainer.Trainer.env_test.unwrapped.get_dist", "trainer.Trainer.algo.exploit", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_serve", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_obstacle", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_rear_for_obstacle", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_pick", "numpy.append", "trainer.Trainer.algo.exploit", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_catch", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_serve", "numpy.array", "trainer.Trainer.algo.exploit", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_catch", "trainer.Trainer.algo.exploit", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_patrol", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_rear_for_patrol", "trainer.Trainer.algo.exploit", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_for_patrol", "trainer.Trainer.env_test.unwrapped.is_transition_boundary_rear_for_patrol"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_transition_boundary_for_pick", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_transition_boundary_for_serve", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_transition_boundary_for_pick", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_transition_boundary_for_catch", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_transition_boundary_for_serve", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_transition_boundary_for_catch", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_rear_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_rear_for_patrol"], ["", "def", "evaluate", "(", "self", ",", "step", ")", ":", "\n", "        ", "mean_return", "=", "0.0", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_eval_episodes", ")", ":", "\n", "            ", "state", "=", "self", ".", "env_test", ".", "reset", "(", ")", "\n", "start_sample", "=", "self", ".", "start_buffer_exp", ".", "sample", "(", ")", "\n", "state", "=", "self", ".", "env_test", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "3", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "4", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "episode_return", "=", "0.0", "\n", "done", "=", "False", "\n", "\n", "\n", "if", "self", ".", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "                ", "if", "self", ".", "args", ".", "front", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary", "(", ")", "\n", "", "else", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "                ", "if", "self", ".", "args", ".", "front", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_obstacle", "(", ")", "\n", "", "else", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear_for_obstacle", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "                ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_pick", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "                ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_serve", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_catch", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                ", "if", "self", ".", "args", ".", "front", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_patrol", "(", ")", "\n", "", "else", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear_for_patrol", "(", ")", "\n", "\n", "\n", "", "", "while", "(", "not", "done", ")", "and", "(", "not", "flag", "==", "-", "1", ")", ":", "\n", "                ", "if", "self", ".", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "                    ", "if", "self", ".", "args", ".", "front", ":", "\n", "                        ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary", "(", ")", "\n", "", "else", ":", "\n", "                        ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "                    ", "if", "self", ".", "args", ".", "front", ":", "\n", "                        ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_obstacle", "(", ")", "\n", "", "else", ":", "\n", "                        ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear_for_obstacle", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_pick", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_serve", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_catch", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                    ", "if", "self", ".", "args", ".", "front", ":", "\n", "                        ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_for_patrol", "(", ")", "\n", "", "else", ":", "\n", "                        ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear_for_patrol", "(", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "                    ", "action", "=", "self", ".", "algo", ".", "exploit", "(", "state", ")", "\n", "", "elif", "self", ".", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                    ", "dist", "=", "self", ".", "env_test", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "action", "=", "self", ".", "algo", ".", "exploit", "(", "np", ".", "append", "(", "state", ",", "np", ".", "array", "(", "dist", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "", "elif", "self", ".", "args", ".", "env", "==", "'JacoPick-v1'", ":", "\n", "                    ", "action", "=", "self", ".", "algo", ".", "exploit", "(", "state", ")", "\n", "", "elif", "self", ".", "args", ".", "env", "==", "'JacoCatch-v1'", ":", "\n", "                    ", "action", "=", "self", ".", "algo", ".", "exploit", "(", "state", ")", "\n", "", "elif", "self", ".", "args", ".", "env", "==", "'JacoServe-v1'", ":", "\n", "                    ", "action", "=", "self", ".", "algo", ".", "exploit", "(", "state", ")", "\n", "", "elif", "self", ".", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "self", ".", "args", ".", "env", "==", "'Walker2dBackward-v1'", ":", "\n", "                    ", "action", "=", "self", ".", "algo", ".", "exploit", "(", "state", ")", "\n", "\n", "# self.env_test.render()", "\n", "# sleep(1e-2)", "\n", "", "state", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env_test", ".", "step", "(", "action", ")", "\n", "episode_return", "+=", "reward", "\n", "\n", "", "mean_return", "+=", "episode_return", "/", "self", ".", "num_eval_episodes", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'return/test'", ",", "mean_return", ",", "step", ")", "\n", "print", "(", "f'Num steps: {step:<6}   '", "\n", "f'Return: {mean_return:<5.1f}   '", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer.Trainer.time": [[187, 190], ["str", "datetime.timedelta", "int", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "@", "property", "\n", "def", "time", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "timedelta", "(", "seconds", "=", "int", "(", "time", "(", ")", "-", "self", ".", "start_time", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo_arm.load_model": [[28, 36], ["os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo_arm.tensor_description": [[37, 41], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo_arm.set_seed": [[42, 55], ["torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "env.seed", "p_env.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "p_env", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "p_env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo_arm.collect_demo_arm": [[56, 210], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "collect_demo_arm.set_seed", "baselines.common.set_global_seeds", "rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "collect_demo_arm.load_model", "network.get_variables", "irl.buffer.StartBuffer", "rl.util.make_env.reset", "irl.buffer.StartBuffer.save", "irl.buffer.Buffer", "rl.util.make_env.reset", "numpy.array", "print", "print", "print", "irl.buffer.Buffer.save", "baselines.logger.info", "rl.util.make_env.unwrapped.get_sim_state", "rl.mlp_policy.MlpPolicy.act", "rl.util.make_env.step", "os.path.join", "numpy.array", "rl.mlp_policy.MlpPolicy.act", "rl.util.make_env.step", "numpy.array", "numpy.mean", "numpy.std", "os.path.join", "torch.device", "rl.util.make_env.unwrapped.is_boundary_pick_front", "irl.buffer.StartBuffer.append", "rl.util.make_env.reset", "torch.device", "rl.util.make_env.unwrapped.is_boundary_pick_rear", "np.array.append", "irl.buffer.Buffer.append", "rl.util.make_env.reset", "collect_demo_arm.tensor_description", "rl.util.make_env.unwrapped.is_boundary_toss_front", "print", "numpy.array", "numpy.array", "rl.util.make_env.unwrapped.is_boundary_hit_rear", "print", "rl.util.make_env.unwrapped.is_boundary_catch_front", "rl.util.make_env.unwrapped.is_boundary_catch_rear"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_sim_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.is_boundary_pick_front", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_boundary_pick_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_boundary_toss_front", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.is_boundary_hit_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.is_boundary_catch_front", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_boundary_catch_rear"], ["", "def", "collect_demo_arm", "(", "args", ")", ":", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env_name", "=", "args", ".", "env", "\n", "p_env_name", "=", "args", ".", "primitive_env", "\n", "env", "=", "make_env", "(", "env_name", ")", "\n", "p_env", "=", "make_env", "(", "p_env_name", ")", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "p_env", ")", "\n", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "# build vanilla TRPO", "\n", "policy", "=", "MlpPolicy", "(", "\n", "env", "=", "p_env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "p_env_name", ",", "\n", "ob_env_name", "=", "p_env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "old_policy", "=", "MlpPolicy", "(", "\n", "env", "=", "p_env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "p_env_name", ",", "\n", "ob_env_name", "=", "p_env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "policy", ")", "\n", "networks", ".", "append", "(", "old_policy", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "\n", "", "", "ckpt_path", "=", "load_model", "(", "args", ".", "primitive_path", ",", "var_list", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "act_shape", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "buffer_size", "=", "args", ".", "exp_buffer_size", "\n", "b_sim_info", "=", "None", "\n", "if", "args", ".", "front", ":", "\n", "        ", "buffer_size", "=", "args", ".", "exp_buffer_size", "//", "100", "\n", "start_buffer", "=", "StartBuffer", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "time", "=", "1", ",", "\n", "qpos", "=", "env", ".", "unwrapped", ".", "model", ".", "nq", ",", "\n", "qvel", "=", "env", ".", "unwrapped", ".", "model", ".", "nv", ",", "\n", "qact", "=", "act_shape", ",", "\n", "obstacle_pos", "=", "1", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "buffer_size", ":", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "            ", "sim_info", "=", "env", ".", "unwrapped", ".", "get_sim_state", "(", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "o", ",", "False", ")", "\n", "n_o", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "if", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_pick_front", "(", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_toss_front", "(", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_catch_front", "(", ")", "\n", "\n", "", "if", "flag", "==", "1", "and", "b_sim_info", "!=", "None", ":", "\n", "                ", "if", "i", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "f'(front: {start_buffer._p} / {buffer_size})'", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "start_buffer", ".", "append", "(", "np", ".", "array", "(", "[", "sim_info", "[", "'state'", "]", "[", "0", "]", "]", ")", ",", "sim_info", "[", "'state'", "]", "[", "1", "]", ",", "sim_info", "[", "'state'", "]", "[", "2", "]", ",", "a", ",", "np", ".", "array", "(", "[", "-", "1", "]", ")", ")", "\n", "# print('append')", "\n", "flag", "=", "-", "1", "\n", "\n", "", "o", "=", "n_o", "\n", "b_sim_info", "=", "sim_info", "\n", "b_ac", "=", "a", "\n", "if", "d", "or", "flag", "==", "-", "1", ":", "\n", "                ", "o", "=", "env", ".", "reset", "(", ")", "\n", "b_sim_info", "=", "None", "\n", "\n", "\n", "", "", "start_buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "primitive_env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo_start.pth'", "\n", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "buffer", "=", "Buffer", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "state_shape", "=", "obs_shape", ",", "\n", "action_shape", "=", "act_shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "total_return", "=", "0.0", "\n", "num_episodes", "=", "0", "\n", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "episode_return", "=", "0.0", "\n", "i", "=", "0", "\n", "states", "=", "[", "]", "\n", "while", "i", "<", "buffer_size", ":", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "            ", "o", "=", "np", ".", "array", "(", "o", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "o", ",", "False", ")", "\n", "n_o", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "n_o", "=", "np", ".", "array", "(", "n_o", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_pick_rear", "(", "o", ",", "n_o", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_hit_rear", "(", ")", "\n", "", "elif", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_catch_rear", "(", ")", "\n", "\n", "", "if", "flag", "==", "1", ":", "\n", "                ", "states", ".", "append", "(", "o", ")", "\n", "buffer", ".", "append", "(", "o", ",", "a", ",", "r", ",", "d", ",", "n_o", ")", "\n", "# print('append')", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "f'(rear: {i}, {buffer_size})'", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "episode_return", "+=", "r", "\n", "\n", "", "o", "=", "n_o", "\n", "\n", "if", "d", "or", "flag", "==", "-", "1", ":", "\n", "# print('done')", "\n", "                ", "num_episodes", "+=", "1", "\n", "total_return", "+=", "episode_return", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "episode_return", "=", "0.0", "\n", "\n", "\n", "\n", "", "", "states", "=", "np", ".", "array", "(", "states", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "print", "(", "np", ".", "mean", "(", "states", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "np", ".", "std", "(", "states", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "f'Mean return of the expert is {total_return / num_episodes}'", ")", "\n", "\n", "buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "primitive_env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo.pth'", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo.load_model": [[28, 36], ["os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo.tensor_description": [[37, 41], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo.set_seed": [[42, 55], ["torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "env.seed", "p_env.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "p_env", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "p_env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo.collect_demo": [[56, 274], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "collect_demo.set_seed", "rl.util.make_env.unwrapped.set_curbs_x_randomness_for_irl", "baselines.common.set_global_seeds", "rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "collect_demo.load_model", "network.get_variables", "irl.buffer.StartBuffer", "rl.util.make_env.reset", "irl.buffer.StartBuffer.save", "irl.buffer.Buffer", "rl.util.make_env.reset", "numpy.array", "print", "print", "print", "irl.buffer.Buffer.save", "baselines.logger.info", "rl.util.make_env.unwrapped.get_sim_state", "rl.mlp_policy.MlpPolicy.act", "rl.util.make_env.step", "os.path.join", "rl.util.make_env.render", "print", "rl.util.make_env.unwrapped.get_sim_state", "numpy.array", "rl.mlp_policy.MlpPolicy.act", "rl.util.make_env.step", "numpy.array", "numpy.mean", "numpy.std", "os.path.join", "torch.device", "irl.buffer.StartBuffer.append", "rl.util.make_env.reset", "torch.device", "rl.util.make_env.unwrapped.get_x_pos", "rl.util.make_env.unwrapped.get_dist", "rl.util.make_env.unwrapped.get_dist", "numpy.append", "numpy.append", "np.array.append", "irl.buffer.Buffer.append", "rl.util.make_env.reset", "collect_demo.tensor_description", "rl.util.make_env.unwrapped.is_boundary_walk_front", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.append", "numpy.append", "rl.util.make_env.unwrapped.is_boundary_walk_rear", "print", "print", "rl.util.make_env.unwrapped.is_boundary_jump_front", "numpy.array", "numpy.array", "numpy.append", "numpy.append", "rl.util.make_env.unwrapped.is_boundary_jump_rear", "rl.util.make_env.unwrapped.get_curbs_x_randomness", "rl.util.make_env.unwrapped.is_boundary_walk_front_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_forward_front_for_patrol", "numpy.array", "numpy.array", "rl.util.make_env.unwrapped.is_boundary_walk_rear", "rl.util.make_env.unwrapped.is_boundary_forward_rear_for_patrol", "rl.util.make_env.unwrapped.is_boundary_jump_front_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_walk_front_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_balance_front_for_patrol", "rl.util.make_env.unwrapped.is_boundary_jump_rear_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_walk_rear_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_balance_rear_for_patrol", "rl.util.make_env.unwrapped.is_boundary_crawl_front_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_backward_front_for_patrol", "rl.util.make_env.unwrapped.is_boundary_crawl_rear_for_obstacle", "rl.util.make_env.unwrapped.is_boundary_backward_rear_for_patrol"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_sim_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_sim_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_front", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_front", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_curbs_x_randomness", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_front_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary_forward_front_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary_forward_rear_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_front_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_front_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.is_boundary_balance_front_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_rear_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_walk_rear_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.is_boundary_balance_rear_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_crawl_front_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_boundary_backward_front_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_crawl_rear_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_boundary_backward_rear_for_patrol"], ["", "def", "collect_demo", "(", "args", ")", ":", "\n", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env_name", "=", "args", ".", "env", "\n", "p_env_name", "=", "args", ".", "primitive_env", "\n", "env", "=", "make_env", "(", "env_name", ")", "\n", "p_env", "=", "make_env", "(", "p_env_name", ")", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "p_env", ")", "\n", "\n", "env", ".", "unwrapped", ".", "set_curbs_x_randomness_for_irl", "(", ")", "\n", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "# build vanilla TRPO", "\n", "policy", "=", "MlpPolicy", "(", "\n", "env", "=", "p_env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "p_env_name", ",", "\n", "ob_env_name", "=", "p_env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "old_policy", "=", "MlpPolicy", "(", "\n", "env", "=", "p_env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "p_env_name", ",", "\n", "ob_env_name", "=", "p_env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "policy", ")", "\n", "networks", ".", "append", "(", "old_policy", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "\n", "", "", "ckpt_path", "=", "load_model", "(", "args", ".", "primitive_path", ",", "var_list", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "act_shape", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "buffer_size", "=", "args", ".", "exp_buffer_size", "\n", "if", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "        ", "obs_shape", "+=", "2", "\n", "", "b_sim_info", "=", "None", "\n", "if", "args", ".", "front", ":", "\n", "        ", "buffer_size", "=", "args", ".", "exp_buffer_size", "//", "100", "\n", "start_buffer", "=", "StartBuffer", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "time", "=", "1", ",", "\n", "qpos", "=", "env", ".", "unwrapped", ".", "model", ".", "nq", ",", "\n", "qvel", "=", "env", ".", "unwrapped", ".", "model", ".", "nv", ",", "\n", "qact", "=", "act_shape", ",", "\n", "obstacle_pos", "=", "1", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "buffer_size", ":", "\n", "# env.render()", "\n", "# print(env.unwrapped.get_x_pos())", "\n", "            ", "sim_info", "=", "env", ".", "unwrapped", ".", "get_sim_state", "(", ")", "\n", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", "and", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "                ", "o", "=", "o", "[", ":", "-", "2", "]", "\n", "", "a", ",", "vpred", "=", "policy", ".", "act", "(", "o", ",", "False", ")", "\n", "n_o", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "if", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "                ", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_walk_front", "(", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dJump-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_jump_front", "(", ")", "\n", "", "", "elif", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "                ", "if", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "                    ", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_walk_front_for_obstacle", "(", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dJump-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_jump_front_for_obstacle", "(", ")", "\n", "", "", "elif", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                    ", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_walk_front_for_obstacle", "(", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_crawl_front_for_obstacle", "(", ")", "\n", "", "", "", "elif", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                ", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_forward_front_for_patrol", "(", ")", "\n", "", "elif", "args", ".", "env", "==", "'Walker2dBalance-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_balance_front_for_patrol", "(", ")", "\n", "", "elif", "args", ".", "env", "==", "'Walker2dBackward-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_backward_front_for_patrol", "(", ")", "\n", "\n", "\n", "\n", "# print(flag, env.unwrapped.get_x_pos(), env.unwrapped.get_curb_pos())", "\n", "", "", "if", "flag", "==", "0", "and", "b_sim_info", "!=", "None", ":", "\n", "                ", "if", "i", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "f'(front: {start_buffer._p} / {buffer_size})'", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "start_buffer", ".", "append", "(", "np", ".", "array", "(", "[", "b_sim_info", "[", "'state'", "]", "[", "0", "]", "]", ")", ",", "b_sim_info", "[", "'state'", "]", "[", "1", "]", ",", "b_sim_info", "[", "'state'", "]", "[", "2", "]", ",", "b_ac", ",", "np", ".", "array", "(", "[", "b_sim_info", "[", "'obstacle_pos'", "]", "]", ")", ")", "\n", "flag", "=", "-", "1", "\n", "\n", "", "o", "=", "n_o", "\n", "b_sim_info", "=", "sim_info", "\n", "b_ac", "=", "a", "\n", "\n", "if", "d", "or", "flag", "==", "-", "1", ":", "\n", "                ", "o", "=", "env", ".", "reset", "(", ")", "\n", "b_sim_info", "=", "None", "\n", "\n", "\n", "", "", "start_buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "primitive_env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo_start.pth'", "\n", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "buffer", "=", "Buffer", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "state_shape", "=", "obs_shape", ",", "\n", "action_shape", "=", "act_shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "total_return", "=", "0.0", "\n", "num_episodes", "=", "0", "\n", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "episode_return", "=", "0.0", "\n", "i", "=", "0", "\n", "states", "=", "[", "]", "\n", "while", "i", "<", "buffer_size", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "print", "(", "env", ".", "unwrapped", ".", "get_x_pos", "(", ")", ")", "\n", "sim_info", "=", "env", ".", "unwrapped", ".", "get_sim_state", "(", ")", "\n", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", "and", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "                ", "o", "=", "o", "[", ":", "-", "2", "]", "\n", "", "o", "=", "np", ".", "array", "(", "o", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "args", ".", "primitive_env", "==", "'Walker2dCrawl-v1'", "and", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "\n", "", "a", ",", "vpred", "=", "policy", ".", "act", "(", "o", ",", "False", ")", "\n", "n_o", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "n_o", "=", "np", ".", "array", "(", "n_o", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "args", ".", "primitive_env", "==", "'Walker2dCrawl-v1'", "and", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "n_dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "\n", "", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", "and", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "                ", "o", "=", "np", ".", "append", "(", "o", ",", "np", ".", "array", "(", "[", "5.1", ",", "5.2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "n_o", "=", "np", ".", "append", "(", "n_o", "[", ":", "-", "2", "]", ",", "np", ".", "array", "(", "[", "5.1", ",", "5.2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", "and", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "o", "=", "np", ".", "append", "(", "o", ",", "np", ".", "array", "(", "[", "5.1", ",", "6.0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "n_o", "=", "np", ".", "append", "(", "n_o", ",", "np", ".", "array", "(", "[", "5.1", ",", "6.0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dCrawl-v1'", "and", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "o", "=", "np", ".", "append", "(", "o", ",", "np", ".", "array", "(", "dist", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "n_o", "=", "np", ".", "append", "(", "n_o", ",", "np", ".", "array", "(", "n_dist", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "", "if", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "                ", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_walk_rear", "(", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dJump-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_jump_rear", "(", ")", "\n", "", "", "elif", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "                ", "if", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "                    ", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_walk_rear", "(", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dJump-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_jump_rear_for_obstacle", "(", ")", "\n", "", "", "elif", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                    ", "if", "args", ".", "primitive_env", "==", "'Walker2dForward-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_walk_rear_for_obstacle", "(", ")", "\n", "", "elif", "args", ".", "primitive_env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                        ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_crawl_rear_for_obstacle", "(", ")", "\n", "", "", "", "elif", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "                ", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_forward_rear_for_patrol", "(", ")", "\n", "", "elif", "args", ".", "env", "==", "'Walker2dBalance-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_balance_rear_for_patrol", "(", ")", "\n", "", "elif", "args", ".", "env", "==", "'Walker2dBackward-v1'", ":", "\n", "                    ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_backward_rear_for_patrol", "(", ")", "\n", "\n", "\n", "# print(flag, env.unwrapped.get_x_pos(), env.unwrapped.get_curb_pos(), env.unwrapped.get_curb_pos() - env.unwrapped.get_x_pos())", "\n", "# print(dist, n_dist)", "\n", "", "", "if", "flag", "==", "0", ":", "\n", "                ", "states", ".", "append", "(", "o", ")", "\n", "buffer", ".", "append", "(", "o", ",", "a", ",", "r", ",", "d", ",", "n_o", ")", "\n", "# print('append')", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "f'(rear: {i}, {buffer_size})'", ")", "\n", "print", "(", "env", ".", "unwrapped", ".", "get_curbs_x_randomness", "(", ")", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "episode_return", "+=", "r", "\n", "", "if", "d", "or", "flag", "==", "-", "1", ":", "\n", "                ", "num_episodes", "+=", "1", "\n", "total_return", "+=", "episode_return", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "episode_return", "=", "0.0", "\n", "\n", "", "if", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "o", "=", "n_o", "[", ":", "-", "2", "]", "\n", "", "else", ":", "\n", "                ", "o", "=", "n_o", "\n", "\n", "", "", "states", "=", "np", ".", "array", "(", "states", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "print", "(", "np", ".", "mean", "(", "states", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "np", ".", "std", "(", "states", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "f'Mean return of the expert is {total_return / num_episodes}'", ")", "\n", "\n", "buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "primitive_env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo.pth'", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(my).load_model": [[29, 37], ["os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(my).tensor_description": [[38, 42], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(my).set_seed": [[43, 55], ["torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "env.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(my).collect_demo": [[56, 216], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "collect_demo(my).set_seed", "rl.util.make_env.unwrapped.set_curbs_x_randomness_for_irl", "baselines.common.set_global_seeds", "rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "collect_demo(my).load_model", "irl.buffer.Buffer", "rl.util.make_env.reset", "print", "irl.buffer.Buffer.save", "irl.buffer.StartBuffer.save", "rl.util.make_env", "irl.buffer.SerializedStartBuffer", "rl.util.make_env.unwrapped.set_curbs_x_randomness_for_irl", "rl.util.make_env.reset", "irl.buffer.SerializedStartBuffer.sample", "print", "rl.util.make_env.unwrapped.rollback", "print", "network.get_variables", "irl.buffer.StartBuffer", "rl.util.make_env.unwrapped.get_dist", "rl.util.make_env.render", "rl.mlp_policy.MlpPolicy.act", "rl.util.make_env.step", "print", "os.path.join", "os.path.join", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "rl.util.make_env.render", "baselines.logger.info", "torch.device", "rl.util.make_env.unwrapped.get_dist", "rl.util.make_env.unwrapped.get_x_pos", "rl.util.make_env.unwrapped.is_boundary", "rl.util.make_env.unwrapped.is_boundary_rear", "rl.util.make_env.reset", "os.path.join", "torch.device", "torch.device", "rl.util.make_env.unwrapped.get_sim_state", "irl.buffer.Buffer.append", "irl.buffer.Buffer.append", "print", "print", "print", "print", "print", "print", "print", "irl.buffer.StartBuffer.append", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "collect_demo(my).tensor_description", "numpy.append", "numpy.append", "rl.util.make_env.unwrapped.get_curbs_x_randomness", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_sim_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_curbs_x_randomness"], ["", "def", "collect_demo", "(", "args", ")", ":", "\n", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env_name", "=", "args", ".", "env", "\n", "env", "=", "make_env", "(", "env_name", ")", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ")", "\n", "\n", "env", ".", "unwrapped", ".", "set_curbs_x_randomness_for_irl", "(", ")", "\n", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "# build vanilla TRPO", "\n", "policy", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "old_policy", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "policy", ")", "\n", "networks", ".", "append", "(", "old_policy", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "\n", "", "", "ckpt_path", "=", "load_model", "(", "args", ".", "primitive_path", ",", "var_list", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "act_shape", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "        ", "obs_shape", "+=", "2", "\n", "\n", "", "buffer_size", "=", "args", ".", "exp_buffer_size", "\n", "buffer", "=", "Buffer", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "state_shape", "=", "obs_shape", ",", "\n", "action_shape", "=", "act_shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", "or", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "        ", "start_buffer", "=", "StartBuffer", "(", "\n", "buffer_size", "=", "buffer_size", "//", "100", ",", "\n", "time", "=", "1", ",", "\n", "qpos", "=", "env", ".", "unwrapped", ".", "model", ".", "nq", ",", "\n", "qvel", "=", "env", ".", "unwrapped", ".", "model", ".", "nv", ",", "\n", "qact", "=", "act_shape", ",", "\n", "obstacle_pos", "=", "1", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "\n", "", "total_return", "=", "0.0", "\n", "num_episodes", "=", "0", "\n", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "        ", "dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "", "t", "=", "0", "\n", "episode_return", "=", "0.0", "\n", "is_first", "=", "True", "\n", "i", "=", "0", "\n", "while", "i", "<", "buffer_size", ":", "\n", "        ", "env", ".", "render", "(", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "o", ",", "False", ")", "\n", "n_o", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "            ", "n_dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "", "print", "(", "env", ".", "unwrapped", ".", "get_x_pos", "(", ")", ",", "env", ".", "unwrapped", ".", "get_sim_state", "(", ")", "[", "'obstacle_pos'", "]", ")", "\n", "# print(n_o)", "\n", "if", "args", ".", "front", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary", "(", ")", "\n", "", "else", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_rear", "(", ")", "\n", "", "if", "flag", "==", "0", ":", "\n", "            ", "i", "=", "i", "+", "1", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "buffer", ".", "append", "(", "np", ".", "append", "(", "o", ",", "dist", ")", ",", "a", ",", "r", ",", "d", ",", "np", ".", "append", "(", "n_o", ",", "n_dist", ")", ")", "\n", "", "else", ":", "\n", "                ", "buffer", ".", "append", "(", "o", ",", "a", ",", "r", ",", "d", ",", "n_o", ")", "\n", "", "episode_return", "+=", "r", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "f'({i}, {start_buffer._p}) / {buffer_size}'", ")", "\n", "print", "(", "env", ".", "unwrapped", ".", "get_curbs_x_randomness", "(", ")", ")", "\n", "", "if", "is_first", ":", "\n", "# print('check')", "\n", "# print(env.unwrapped.get_x_pos())", "\n", "# print(env.unwrapped.get_obs_full())", "\n", "# print('o:', o)", "\n", "# print('n_o:', n_o)", "\n", "                ", "print", "(", "'info:'", ",", "np", ".", "array", "(", "[", "info", "[", "'state'", "]", "[", "0", "]", "]", ")", ")", "\n", "print", "(", "info", "[", "'state'", "]", "[", "1", "]", ")", "\n", "print", "(", "info", "[", "'state'", "]", "[", "2", "]", ")", "\n", "print", "(", "a", ")", "\n", "print", "(", "np", ".", "array", "(", "[", "info", "[", "'obstacle_pos'", "]", "]", ")", ")", "\n", "# exit()", "\n", "start_buffer", ".", "append", "(", "np", ".", "array", "(", "[", "info", "[", "'state'", "]", "[", "0", "]", "]", ")", ",", "info", "[", "'state'", "]", "[", "1", "]", ",", "info", "[", "'state'", "]", "[", "2", "]", ",", "a", ",", "np", ".", "array", "(", "[", "info", "[", "'obstacle_pos'", "]", "]", ")", ")", "\n", "is_first", "=", "False", "\n", "", "", "if", "d", "or", "flag", "==", "-", "1", ":", "\n", "            ", "num_episodes", "+=", "1", "\n", "total_return", "+=", "episode_return", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "t", "=", "0", "\n", "episode_return", "=", "0.0", "\n", "is_first", "=", "True", "\n", "\n", "\n", "", "o", "=", "n_o", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "            ", "dist", "=", "n_dist", "\n", "\n", "", "", "print", "(", "f'Mean return of the expert is {total_return / num_episodes}'", ")", "\n", "\n", "buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo.pth'", "\n", ")", ")", "\n", "start_buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo_start.pth'", "\n", ")", ")", "\n", "\n", "env_test", "=", "make_env", "(", "'Walker2dJump-v1'", ")", "\n", "\n", "start_buffer_exp", "=", "SerializedStartBuffer", "(", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "'data/exp_demo/Walker2dForward-v1_front_123/'", "'exp_demo_start.pth'", ")", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "env_test", ".", "unwrapped", ".", "set_curbs_x_randomness_for_irl", "(", ")", "\n", "state", "=", "env_test", ".", "reset", "(", ")", "\n", "start_sample", "=", "start_buffer_exp", ".", "sample", "(", ")", "\n", "print", "(", "start_sample", ")", "\n", "\n", "state", "=", "env_test", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "3", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "4", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "state", ")", "\n", "while", "True", ":", "\n", "        ", "env_test", ".", "render", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.__init__": [[13, 45], ["super().__init__", "trainer(my).Trainer.set_seed", "os.path.join", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "env_test", ",", "algo", ",", "args", ",", "start_buffer_exp", ",", "seed", "=", "0", ",", "num_steps", "=", "10000000", ",", "\n", "eval_interval", "=", "10000", ",", "num_eval_episodes", "=", "5", ",", "train_with_learned_reward", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "# Env to collect samples.", "\n", "self", ".", "env", "=", "env", "\n", "\n", "# Env for evaluation.", "\n", "self", ".", "env_test", "=", "env_test", "\n", "\n", "self", ".", "set_seed", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "algo", "=", "algo", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "'data/transition'", ",", "args", ".", "env_1", "+", "'_'", "+", "args", ".", "env_2", ")", "\n", "\n", "# Log setting.", "\n", "self", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'summary'", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "summary_dir", ")", "\n", "self", ".", "model_dir", "=", "self", ".", "log_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "model_dir", ")", "\n", "\n", "# Other parameters.", "\n", "", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "eval_interval", "=", "eval_interval", "\n", "self", ".", "num_eval_episodes", "=", "num_eval_episodes", "\n", "\n", "self", ".", "train_with_learned_reward", "=", "train_with_learned_reward", "\n", "self", ".", "start_buffer_exp", "=", "start_buffer_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.set_seed": [[46, 59], ["torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "trainer(my).Trainer.env.seed", "trainer(my).Trainer.env_test.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "self", ")", ":", "\n", "# Random seed", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "self", ".", "env", ".", "seed", "(", "self", ".", "seed", ")", "\n", "self", ".", "env_test", ".", "seed", "(", "2", "**", "31", "-", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.train": [[60, 94], ["time.time.time", "trainer(my).Trainer.env.reset", "trainer(my).Trainer.start_buffer_exp.sample", "trainer(my).Trainer.env.unwrapped.rollback", "range", "time.time.sleep", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "trainer(my).Trainer.algo.step", "trainer(my).Trainer.algo.is_update", "trainer(my).Trainer.algo.update", "trainer(my).Trainer.evaluate", "trainer(my).Trainer.algo.save_reward_function", "trainer(my).Trainer.algo.save_models", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "os.path.join", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.is_update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.evaluate", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.save_reward_function", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.save_models"], ["", "def", "train", "(", "self", ")", ":", "\n", "# Time to start training.", "\n", "        ", "self", ".", "start_time", "=", "time", "(", ")", "\n", "# Episode's timestep.", "\n", "t", "=", "0", "\n", "# Initialize the environment.", "\n", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "start_sample", "=", "self", ".", "start_buffer_exp", ".", "sample", "(", ")", "\n", "\n", "\n", "state", "=", "self", ".", "env", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "1", ",", "self", ".", "num_steps", "+", "1", ")", ":", "\n", "# Pass to the algorithm to update state and episode timestep.", "\n", "            ", "state", ",", "t", "=", "self", ".", "algo", ".", "step", "(", "self", ".", "env", ",", "state", ",", "t", ",", "step", ")", "\n", "# self.env.render()", "\n", "# sleep(1e-2)", "\n", "\n", "# Update the algorithm whenever ready.", "\n", "if", "self", ".", "algo", ".", "is_update", "(", "step", ")", ":", "\n", "                ", "self", ".", "algo", ".", "update", "(", "self", ".", "writer", ")", "\n", "\n", "# Evaluate regularly.", "\n", "", "if", "step", "%", "self", ".", "eval_interval", "==", "0", ":", "\n", "                ", "self", ".", "evaluate", "(", "step", ")", "\n", "\n", "", "if", "step", "%", "(", "self", ".", "eval_interval", "*", "100", ")", "==", "0", ":", "\n", "                ", "self", ".", "algo", ".", "save_reward_function", "(", "self", ".", "model_dir", ")", "\n", "self", ".", "algo", ".", "save_models", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "f'step{step}'", ")", ")", "\n", "# Wait for the logging to be finished.", "\n", "", "", "sleep", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.evaluate": [[95, 130], ["range", "trainer(my).Trainer.writer.add_scalar", "print", "trainer(my).Trainer.env_test.reset", "trainer(my).Trainer.start_buffer_exp.sample", "trainer(my).Trainer.env_test.unwrapped.rollback", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "trainer(my).Trainer.env_test.unwrapped.is_transition_boundary", "trainer(my).Trainer.env_test.unwrapped.is_transition_boundary_rear", "trainer(my).Trainer.algo.ac.act", "trainer(my).Trainer.env_test.step", "trainer(my).Trainer.env_test.unwrapped.is_transition_boundary", "trainer(my).Trainer.env_test.unwrapped.is_transition_boundary_rear", "torch.as_tensor", "trainer(my).Trainer.env_test.render", "print", "trainer(my).Trainer.env.unwrapped.get_curbs_x_randomness", "trainer(my).Trainer.env_test.unwrapped.get_curbs_x_randomness", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "trainer(my).Trainer.env_test.unwrapped.get_x_pos", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_curbs_x_randomness", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_curbs_x_randomness", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos"], ["", "def", "evaluate", "(", "self", ",", "step", ")", ":", "\n", "        ", "mean_return", "=", "0.0", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_eval_episodes", ")", ":", "\n", "            ", "state", "=", "self", ".", "env_test", ".", "reset", "(", ")", "\n", "start_sample", "=", "self", ".", "start_buffer_exp", ".", "sample", "(", ")", "\n", "state", "=", "self", ".", "env_test", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "episode_return", "=", "0.0", "\n", "done", "=", "False", "\n", "\n", "if", "self", ".", "args", ".", "front", ":", "\n", "                ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary", "(", ")", "\n", "", "else", ":", "\n", "                ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear", "(", ")", "\n", "", "while", "(", "not", "done", ")", "and", "(", "not", "flag", "==", "-", "1", ")", ":", "\n", "                ", "if", "self", ".", "args", ".", "front", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary", "(", ")", "\n", "", "else", ":", "\n", "                    ", "flag", "=", "self", ".", "env_test", ".", "unwrapped", ".", "is_transition_boundary_rear", "(", ")", "\n", "", "action", "=", "self", ".", "algo", ".", "ac", ".", "act", "(", "torch", ".", "as_tensor", "(", "state", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "state", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env_test", ".", "step", "(", "action", ")", "\n", "episode_return", "+=", "reward", "\n", "\n", "if", "step", ">=", "100000", ":", "\n", "                    ", "self", ".", "env_test", ".", "render", "(", ")", "\n", "print", "(", "'xpos:'", ",", "self", ".", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", ",", "'alive_reward:'", ",", "info", "[", "'alive_reward'", "]", ",", "'ctrl_reward:'", ",", "info", "[", "'ctrl_reward'", "]", ",", "'collision_penalty:'", ",", "info", "[", "'collision_penalty'", "]", ",", "'x_vel_reward:'", ",", "info", "[", "'x_vel_reward'", "]", "\n", ",", "'angle_reward:'", ",", "info", "[", "'angle_reward'", "]", ",", "'height_reward:'", ",", "info", "[", "'height_reward'", "]", ",", "'foot_reward:'", ",", "info", "[", "'foot_reward'", "]", ",", "'jump_reward:'", ",", "info", "[", "'jump_reward'", "]", ",", "'pass_reward:'", ",", "info", "[", "'pass_reward'", "]", ")", "\n", "\n", "\n", "", "", "mean_return", "+=", "episode_return", "/", "self", ".", "num_eval_episodes", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "'return/test'", ",", "mean_return", ",", "step", ")", "\n", "print", "(", "f'Num steps: {step:<6}   '", "\n", "f'Return: {mean_return:<5.1f}   '", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time": [[135, 138], ["str", "datetime.timedelta", "int", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "@", "property", "\n", "def", "time", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "timedelta", "(", "seconds", "=", "int", "(", "time", "(", ")", "-", "self", ".", "start_time", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(ori).load_model": [[28, 36], ["os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(ori).tensor_description": [[37, 41], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(ori).set_seed": [[42, 54], ["torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "env.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.collect_demo(ori).collect_demo": [[55, 187], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "collect_demo(ori).set_seed", "rl.util.make_env.unwrapped.set_curbs_x_randomness_for_irl", "baselines.common.set_global_seeds", "rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "collect_demo(ori).load_model", "irl.buffer.Buffer", "rl.util.make_env.reset", "print", "irl.buffer.Buffer.save", "irl.buffer.StartBuffer.save", "network.get_variables", "irl.buffer.StartBuffer", "rl.util.make_env.unwrapped.get_dist", "rl.util.make_env.unwrapped.get_sim_state", "rl.mlp_policy.MlpPolicy.act", "rl.util.make_env.step", "print", "os.path.join", "os.path.join", "baselines.logger.info", "torch.device", "rl.util.make_env.unwrapped.get_cur_pos", "rl.util.make_env.unwrapped.get_x_pos", "rl.util.make_env.unwrapped.get_dist", "rl.util.make_env.unwrapped.is_boundary", "rl.util.make_env.unwrapped.is_boundary_rear", "rl.util.make_env.render", "time.sleep", "irl.buffer.StartBuffer.append", "rl.util.make_env.reset", "torch.device", "irl.buffer.Buffer.append", "irl.buffer.Buffer.append", "numpy.array", "numpy.array", "print", "print", "collect_demo(ori).tensor_description", "numpy.append", "numpy.append", "rl.util.make_env.unwrapped.get_curbs_x_randomness"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_sim_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_curbs_x_randomness"], ["", "def", "collect_demo", "(", "args", ")", ":", "\n", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env_name", "=", "args", ".", "env", "\n", "env", "=", "make_env", "(", "env_name", ")", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ")", "\n", "\n", "env", ".", "unwrapped", ".", "set_curbs_x_randomness_for_irl", "(", ")", "\n", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "# build vanilla TRPO", "\n", "policy", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "old_policy", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "policy", ")", "\n", "networks", ".", "append", "(", "old_policy", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "\n", "", "", "ckpt_path", "=", "load_model", "(", "args", ".", "primitive_path", ",", "var_list", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "act_shape", "=", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "# if args.env == 'Walker2dJump-v1':", "\n", "#     obs_shape -= 2", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "        ", "obs_shape", "+=", "2", "\n", "\n", "", "buffer_size", "=", "args", ".", "exp_buffer_size", "\n", "buffer", "=", "Buffer", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "state_shape", "=", "obs_shape", ",", "\n", "action_shape", "=", "act_shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", "or", "args", ".", "env", "==", "'Walker2dJump-v1'", ":", "\n", "        ", "start_buffer", "=", "StartBuffer", "(", "\n", "buffer_size", "=", "buffer_size", "//", "100", ",", "\n", "time", "=", "1", ",", "\n", "qpos", "=", "env", ".", "unwrapped", ".", "model", ".", "nq", ",", "\n", "qvel", "=", "env", ".", "unwrapped", ".", "model", ".", "nv", ",", "\n", "qact", "=", "act_shape", ",", "\n", "obstacle_pos", "=", "1", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", ")", "\n", "\n", "\n", "", "total_return", "=", "0.0", "\n", "num_episodes", "=", "0", "\n", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "        ", "dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "", "episode_return", "=", "0.0", "\n", "i", "=", "0", "\n", "\n", "\n", "while", "i", "<", "buffer_size", ":", "\n", "        ", "sim_info", "=", "env", ".", "unwrapped", ".", "get_sim_state", "(", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "o", ",", "False", ")", "\n", "n_o", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "print", "(", "env", ".", "unwrapped", ".", "get_cur_pos", "(", ")", ",", "env", ".", "unwrapped", ".", "get_x_pos", "(", ")", ")", "\n", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "            ", "n_dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "", "if", "args", ".", "front", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary", "(", ")", "\n", "", "else", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_boundary_rear", "(", ")", "\n", "", "if", "flag", "==", "0", ":", "\n", "            ", "i", "=", "i", "+", "1", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "                ", "buffer", ".", "append", "(", "np", ".", "append", "(", "o", ",", "dist", ")", ",", "a", ",", "r", ",", "d", ",", "np", ".", "append", "(", "n_o", ",", "n_dist", ")", ")", "\n", "", "else", ":", "\n", "                ", "buffer", ".", "append", "(", "o", ",", "a", ",", "r", ",", "d", ",", "n_o", ")", "\n", "", "env", ".", "render", "(", ")", "\n", "time", ".", "sleep", "(", "5e-3", ")", "\n", "start_buffer", ".", "append", "(", "np", ".", "array", "(", "[", "b_sim_info", "[", "'state'", "]", "[", "0", "]", "]", ")", ",", "b_sim_info", "[", "'state'", "]", "[", "1", "]", ",", "b_sim_info", "[", "'state'", "]", "[", "2", "]", ",", "b_ac", ",", "np", ".", "array", "(", "[", "b_sim_info", "[", "'obstacle_pos'", "]", "]", ")", ")", "\n", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "f'({i}, {start_buffer._p}) / {buffer_size}'", ")", "\n", "print", "(", "env", ".", "unwrapped", ".", "get_curbs_x_randomness", "(", ")", ")", "\n", "\n", "", "episode_return", "+=", "r", "\n", "", "if", "d", "or", "flag", "==", "-", "1", ":", "\n", "            ", "num_episodes", "+=", "1", "\n", "total_return", "+=", "episode_return", "\n", "o", "=", "env", ".", "reset", "(", ")", "\n", "episode_return", "=", "0.0", "\n", "\n", "\n", "", "o", "=", "n_o", "\n", "if", "args", ".", "env", "==", "'Walker2dForward-v1'", "or", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "            ", "dist", "=", "n_dist", "\n", "", "b_sim_info", "=", "sim_info", "\n", "b_ac", "=", "a", "\n", "\n", "", "print", "(", "f'Mean return of the expert is {total_return / num_episodes}'", ")", "\n", "\n", "buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo.pth'", "\n", ")", ")", "\n", "start_buffer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "'data'", ",", "\n", "'exp_demo'", ",", "\n", "args", ".", "env", "+", "'_'", "+", "args", ".", "suffix", ",", "\n", "'exp_demo_start.pth'", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.GAILDiscrim.__init__": [[10, 19], ["torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Module.__init__", "utils.build_mlp"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "hidden_units", "=", "(", "100", ",", "100", ")", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", "+", "action_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.GAILDiscrim.forward": [[21, 23], ["disc.GAILDiscrim.net", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "torch", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.GAILDiscrim.calculate_reward": [[24, 28], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.logsigmoid", "torch.logsigmoid", "disc.GAILDiscrim.forward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "calculate_reward", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "# PPO(GAIL) is to maximize E_{\\pi} [-log(1 - D)].", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "-", "F", ".", "logsigmoid", "(", "-", "self", ".", "forward", "(", "states", ",", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.__init__": [[32, 57], ["torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Module.__init__", "utils.build_mlp", "utils.build_mlp"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "gamma", ",", "\n", "hidden_units_r", "=", "(", "256", ",", "256", ")", ",", "\n", "hidden_units_v", "=", "(", "256", ",", "256", ")", ",", "\n", "hidden_activation_r", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "hidden_activation_v", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "hidden_units_r", "=", "(", "100", ",", "100", ")", "\n", "hidden_units_v", "=", "(", "100", ",", "100", ")", "\n", "# print(hidden_units_r)", "\n", "# print(hidden_units_v)", "\n", "# exit()", "\n", "self", ".", "g", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", "+", "action_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units_r", ",", "\n", "hidden_activation", "=", "hidden_activation_r", "\n", ")", "\n", "self", ".", "h", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units_v", ",", "\n", "hidden_activation", "=", "hidden_activation_v", "\n", ")", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.f": [[58, 64], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "disc.AIRLDiscrim.g", "disc.AIRLDiscrim.h", "disc.AIRLDiscrim.h"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "states", ",", "actions", ",", "dones", ",", "next_states", ")", ":", "\n", "        ", "states_actions", "=", "torch", ".", "cat", "(", "(", "states", ",", "actions", ")", ",", "dim", "=", "1", ")", "\n", "rs", "=", "self", ".", "g", "(", "states_actions", ")", "\n", "vs", "=", "self", ".", "h", "(", "states", ")", "\n", "next_vs", "=", "self", ".", "h", "(", "next_states", ")", "\n", "return", "rs", "+", "self", ".", "gamma", "*", "(", "1", "-", "dones", ")", "*", "next_vs", "-", "vs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.forward": [[65, 68], ["disc.AIRLDiscrim.f"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.f"], ["", "def", "forward", "(", "self", ",", "states", ",", "actions", ",", "dones", ",", "log_pis", ",", "next_states", ")", ":", "\n", "# Discriminator's output is sigmoid(f - log_pi).", "\n", "        ", "return", "self", ".", "f", "(", "states", ",", "actions", ",", "dones", ",", "next_states", ")", "-", "log_pis", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.calculate_reward": [[69, 73], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "disc.AIRLDiscrim.forward", "torch.logsigmoid", "torch.logsigmoid"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "calculate_reward", "(", "self", ",", "states", ",", "actions", ",", "dones", ",", "log_pis", ",", "next_states", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "self", ".", "forward", "(", "states", ",", "actions", ",", "dones", ",", "log_pis", ",", "next_states", ")", "\n", "return", "-", "F", ".", "logsigmoid", "(", "-", "logits", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateIndependentPolicy.__init__": [[8, 21], ["torch.nn.Tanh", "torch.nn.Module.__init__", "utils.build_mlp", "torch.nn.Parameter", "torch.zeros", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "hidden_units", "=", "(", "64", ",", "64", ")", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "action_shape", "[", "0", "]", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n", "self", ".", "log_stds", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "action_shape", "[", "0", "]", ")", ")", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateIndependentPolicy.forward": [[22, 25], ["torch.clamp", "torch.tanh", "policy.StateIndependentPolicy.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "torch", ".", "tanh", "(", "self", ".", "net", "(", "states", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateIndependentPolicy.sample": [[26, 29], ["torch.clamp", "utils.reparameterize", "policy.StateIndependentPolicy.net"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.reparameterize"], ["", "def", "sample", "(", "self", ",", "states", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "reparameterize", "(", "self", ".", "net", "(", "states", ")", ",", "self", ".", "log_stds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateIndependentPolicy.evaluate_log_pi": [[30, 35], ["torch.clamp", "utils.evaluate_lop_pi", "policy.StateIndependentPolicy.net"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.evaluate_lop_pi"], ["", "def", "evaluate_log_pi", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "val", "=", "evaluate_lop_pi", "(", "self", ".", "net", "(", "states", ")", ",", "self", ".", "log_stds", ",", "actions", ")", "\n", "# print(val)", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateDependentPolicy.__init__": [[39, 51], ["torch.nn.ReLU", "torch.nn.Module.__init__", "utils.build_mlp", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "hidden_units", "=", "(", "256", ",", "256", ")", ",", "\n", "hidden_activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "2", "*", "action_shape", "[", "0", "]", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateDependentPolicy.forward": [[52, 55], ["torch.clamp", "torch.tanh", "policy.StateDependentPolicy.net().chunk", "policy.StateDependentPolicy.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "torch", ".", "tanh", "(", "self", ".", "net", "(", "states", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateDependentPolicy.sample": [[56, 60], ["torch.clamp", "policy.StateDependentPolicy.net().chunk", "utils.reparameterize", "log_stds.clamp_", "policy.StateDependentPolicy.net"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.reparameterize"], ["", "def", "sample", "(", "self", ",", "states", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "means", ",", "log_stds", "=", "self", ".", "net", "(", "states", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "return", "reparameterize", "(", "means", ",", "log_stds", ".", "clamp_", "(", "-", "20", ",", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp": [[6, 18], ["torch.nn.Tanh", "layers.append", "torch.nn.Sequential", "layers.append", "layers.append", "torch.nn.Linear", "layers.append", "torch.nn.Linear"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["def", "build_mlp", "(", "input_dim", ",", "output_dim", ",", "hidden_units", "=", "[", "64", ",", "64", "]", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", ",", "output_activation", "=", "None", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "units", "=", "input_dim", "\n", "for", "next_units", "in", "hidden_units", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "units", ",", "next_units", ")", ")", "\n", "layers", ".", "append", "(", "hidden_activation", ")", "\n", "units", "=", "next_units", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "units", ",", "output_dim", ")", ")", "\n", "if", "output_activation", "is", "not", "None", ":", "\n", "        ", "layers", ".", "append", "(", "output_activation", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.calculate_log_pi": [[20, 23], ["noises.pow", "torch.log", "log_stds.exp().pow", "log_stds.exp"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "calculate_log_pi", "(", "log_stds", ",", "noises", ",", "actions", ")", ":", "\n", "    ", "gaussian_log_probs", "=", "(", "-", "0.5", "*", "noises", ".", "pow", "(", "2", ")", "-", "0.5", "*", "torch", ".", "log", "(", "2", "*", "math", ".", "pi", "*", "log_stds", ".", "exp", "(", ")", ".", "pow", "(", "2", ")", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "gaussian_log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.reparameterize": [[25, 29], ["torch.normal", "log_stds.exp", "utils.calculate_log_pi", "log_stds.exp"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.calculate_log_pi"], ["", "def", "reparameterize", "(", "means", ",", "log_stds", ")", ":", "\n", "    ", "actions", "=", "torch", ".", "normal", "(", "means", ",", "log_stds", ".", "exp", "(", ")", ")", "\n", "noises", "=", "(", "actions", "-", "means", ")", "/", "(", "log_stds", ".", "exp", "(", ")", "+", "1e-8", ")", "\n", "return", "actions", ",", "calculate_log_pi", "(", "log_stds", ",", "noises", ",", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.atanh": [[31, 33], ["torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "atanh", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "(", "torch", ".", "log", "(", "1", "+", "x", "+", "1e-6", ")", "-", "torch", ".", "log", "(", "1", "-", "x", "+", "1e-6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.evaluate_lop_pi": [[35, 41], ["utils.calculate_log_pi", "log_stds.exp"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.calculate_log_pi"], ["", "def", "evaluate_lop_pi", "(", "means", ",", "log_stds", ",", "actions", ")", ":", "\n", "    ", "noises", "=", "(", "actions", "-", "means", ")", "/", "(", "log_stds", ".", "exp", "(", ")", "+", "1e-8", ")", "\n", "val", "=", "calculate_log_pi", "(", "log_stds", ",", "noises", ",", "actions", ")", "\n", "# print(val)", "\n", "# exit()", "\n", "return", "val", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.StateFunction.__init__": [[9, 21], ["torch.nn.Tanh", "torch.nn.Module.__init__", "utils.build_mlp", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "hidden_units", "=", "(", "64", ",", "64", ")", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.StateFunction.forward": [[22, 25], ["torch.clamp", "value.StateFunction.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "self", ".", "net", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.StateActionFunction.__init__": [[29, 41], ["torch.nn.Tanh", "torch.nn.Module.__init__", "utils.build_mlp", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "hidden_units", "=", "(", "100", ",", "100", ")", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", "+", "action_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.StateActionFunction.forward": [[42, 45], ["torch.clamp", "value.StateActionFunction.net", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "self", ".", "net", "(", "torch", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.TwinnedStateActionFunction.__init__": [[49, 67], ["torch.nn.ReLU", "torch.nn.Module.__init__", "utils.build_mlp", "utils.build_mlp", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.utils.build_mlp"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "hidden_units", "=", "(", "256", ",", "256", ")", ",", "\n", "hidden_activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net1", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", "+", "action_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n", "self", ".", "net2", "=", "build_mlp", "(", "\n", "input_dim", "=", "state_shape", "[", "0", "]", "+", "action_shape", "[", "0", "]", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "hidden_activation", "=", "hidden_activation", "\n", ")", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "state_shape", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.TwinnedStateActionFunction.forward": [[68, 72], ["torch.clamp", "torch.cat", "value.TwinnedStateActionFunction.net1", "value.TwinnedStateActionFunction.net2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "xs", "=", "torch", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "net1", "(", "xs", ")", ",", "self", ".", "net2", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.TwinnedStateActionFunction.q1": [[73, 76], ["torch.clamp", "value.TwinnedStateActionFunction.net1", "torch.cat"], "methods", ["None"], ["", "def", "q1", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "self", ".", "net1", "(", "torch", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.__init__": [[9, 19], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "gamma", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "learning_steps", "=", "0", "\n", "self", ".", "state_shape", "=", "state_shape", "\n", "self", ".", "action_shape", "=", "action_shape", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.explore": [[21, 26], ["torch.tensor", "torch.no_grad", "base.Algorithm.actor.sample", "log_pi.item", "torch.tensor.unsqueeze_", "action.cpu().numpy", "action.cpu"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "explore", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "=", "torch", ".", "tensor", "(", "state", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "action", ",", "log_pi", "=", "self", ".", "actor", ".", "sample", "(", "state", ".", "unsqueeze_", "(", "0", ")", ")", "\n", "", "return", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "log_pi", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit": [[27, 32], ["torch.tensor", "torch.no_grad", "base.Algorithm.actor", "base.Algorithm.cpu().numpy", "torch.tensor.unsqueeze_", "base.Algorithm.cpu"], "methods", ["None"], ["", "def", "exploit", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "=", "torch", ".", "tensor", "(", "state", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "action", "=", "self", ".", "actor", "(", "state", ".", "unsqueeze_", "(", "0", ")", ")", "\n", "", "return", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.is_update": [[33, 36], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "is_update", "(", "self", ",", "step", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.update": [[37, 40], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.save_models": [[41, 45], ["os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "@", "abstractmethod", "\n", "def", "save_models", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.gail.GAIL.__init__": [[12, 39], ["irl.algo.ppo.PPO.__init__", "irl.network.GAILDiscrim().to", "torch.optim.Adam", "torch.optim.Adam", "gail.GAIL.disc.parameters", "irl.network.GAILDiscrim", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "buffer_exp", ",", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "\n", "gamma", "=", "0.995", ",", "rollout_length", "=", "50000", ",", "mix_buffer", "=", "1", ",", "\n", "batch_size", "=", "64", ",", "lr_actor", "=", "3e-4", ",", "lr_critic", "=", "3e-4", ",", "lr_disc", "=", "3e-4", ",", "\n", "units_actor", "=", "(", "64", ",", "64", ")", ",", "units_critic", "=", "(", "64", ",", "64", ")", ",", "\n", "units_disc", "=", "(", "100", ",", "100", ")", ",", "epoch_ppo", "=", "50", ",", "epoch_disc", "=", "10", ",", "\n", "clip_eps", "=", "0.2", ",", "lambd", "=", "0.97", ",", "coef_ent", "=", "0.0", ",", "max_grad_norm", "=", "10.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "gamma", ",", "rollout_length", ",", "\n", "mix_buffer", ",", "lr_actor", ",", "lr_critic", ",", "units_actor", ",", "units_critic", ",", "\n", "epoch_ppo", ",", "clip_eps", ",", "lambd", ",", "coef_ent", ",", "max_grad_norm", "\n", ")", "\n", "\n", "# Expert's buffer.", "\n", "self", ".", "buffer_exp", "=", "buffer_exp", "\n", "\n", "# Discriminator.", "\n", "self", ".", "disc", "=", "GAILDiscrim", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "hidden_units", "=", "units_disc", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "learning_steps_disc", "=", "0", "\n", "self", ".", "optim_disc", "=", "Adam", "(", "self", ".", "disc", ".", "parameters", "(", ")", ",", "lr", "=", "lr_disc", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_disc", "=", "epoch_disc", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.gail.GAIL.update": [[40, 63], ["range", "gail.GAIL.buffer.get", "gail.GAIL.disc.calculate_reward", "gail.GAIL.update_ppo", "gail.GAIL.update_disc", "gail.GAIL.buffer.sample", "gail.GAIL.buffer_exp.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.calculate_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.update_ppo", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.update_disc", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "update", "(", "self", ",", "writer", ")", ":", "\n", "        ", "self", ".", "learning_steps", "+=", "1", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "epoch_disc", ")", ":", "\n", "            ", "self", ".", "learning_steps_disc", "+=", "1", "\n", "\n", "# Samples from current policy's trajectories.", "\n", "states", ",", "actions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "[", ":", "2", "]", "\n", "# Samples from expert's demonstrations.", "\n", "states_exp", ",", "actions_exp", "=", "self", ".", "buffer_exp", ".", "sample", "(", "self", ".", "batch_size", ")", "[", ":", "2", "]", "\n", "# Update discriminator.", "\n", "self", ".", "update_disc", "(", "states", ",", "actions", ",", "states_exp", ",", "actions_exp", ",", "writer", ")", "\n", "\n", "# We don't use reward signals here,", "\n", "", "states", ",", "actions", ",", "_", ",", "dones", ",", "log_pis", ",", "next_states", "=", "self", ".", "buffer", ".", "get", "(", ")", "\n", "\n", "# Calculate rewards.", "\n", "rewards", "=", "self", ".", "disc", ".", "calculate_reward", "(", "states", ",", "actions", ")", "\n", "\n", "# Update PPO using estimated rewards.", "\n", "self", ".", "update_ppo", "(", "\n", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", ",", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.gail.GAIL.update_disc": [[64, 88], ["gail.GAIL.disc", "gail.GAIL.disc", "gail.GAIL.optim_disc.zero_grad", "loss_disc.backward", "gail.GAIL.optim_disc.step", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "loss_disc.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "def", "update_disc", "(", "self", ",", "states", ",", "actions", ",", "states_exp", ",", "actions_exp", ",", "writer", ")", ":", "\n", "# Output of discriminator is (-inf, inf), not [0, 1].", "\n", "        ", "logits_pi", "=", "self", ".", "disc", "(", "states", ",", "actions", ")", "\n", "logits_exp", "=", "self", ".", "disc", "(", "states_exp", ",", "actions_exp", ")", "\n", "\n", "# Discriminator is to maximize E_{\\pi} [log(1 - D)] + E_{exp} [log(D)].", "\n", "loss_pi", "=", "-", "F", ".", "logsigmoid", "(", "-", "logits_pi", ")", ".", "mean", "(", ")", "\n", "loss_exp", "=", "-", "F", ".", "logsigmoid", "(", "logits_exp", ")", ".", "mean", "(", ")", "\n", "loss_disc", "=", "loss_pi", "+", "loss_exp", "\n", "\n", "self", ".", "optim_disc", ".", "zero_grad", "(", ")", "\n", "loss_disc", ".", "backward", "(", ")", "\n", "self", ".", "optim_disc", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "learning_steps_disc", "%", "self", ".", "epoch_disc", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\n", "'loss/disc'", ",", "loss_disc", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "\n", "# Discriminator's accuracies.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "acc_pi", "=", "(", "logits_pi", "<", "0", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "acc_exp", "=", "(", "logits_exp", ">", "0", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "writer", ".", "add_scalar", "(", "'stats/acc_pi'", ",", "acc_pi", ",", "self", ".", "learning_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'stats/acc_exp'", ",", "acc_exp", ",", "self", ".", "learning_steps", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.__init__": [[13, 52], ["irl.algo.ppo.PPO.__init__", "irl.network.disc.AIRLDiscrim().to", "torch.optim.Adam", "torch.optim.Adam", "airl.AIRL.disc.parameters", "irl.network.disc.AIRLDiscrim", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "buffer_exp", ",", "start_buffer_exp", ",", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "front", ",", "\n", "gamma", "=", "0.995", ",", "rollout_length", "=", "10000", ",", "mix_buffer", "=", "1", ",", "\n", "batch_size", "=", "64", ",", "lr_actor", "=", "3e-4", ",", "lr_critic", "=", "3e-4", ",", "lr_disc", "=", "3e-4", ",", "\n", "units_actor", "=", "(", "64", ",", "64", ")", ",", "units_critic", "=", "(", "64", ",", "64", ")", ",", "\n", "units_disc_r", "=", "(", "100", ",", "100", ")", ",", "units_disc_v", "=", "(", "100", ",", "100", ")", ",", "\n", "epoch_ppo", "=", "50", ",", "epoch_disc", "=", "10", ",", "clip_eps", "=", "0.2", ",", "lambd", "=", "0.97", ",", "\n", "coef_ent", "=", "0.0", ",", "max_grad_norm", "=", "10.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "start_buffer_exp", ",", "gamma", ",", "rollout_length", ",", "\n", "mix_buffer", ",", "lr_actor", ",", "lr_critic", ",", "units_actor", ",", "units_critic", ",", "\n", "epoch_ppo", ",", "clip_eps", ",", "lambd", ",", "coef_ent", ",", "max_grad_norm", "\n", ")", "\n", "self", ".", "front", "=", "front", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# Expert's buffer.", "\n", "self", ".", "buffer_exp", "=", "buffer_exp", "\n", "\n", "\n", "# Discriminator.", "\n", "self", ".", "disc", "=", "AIRLDiscrim", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "gamma", "=", "gamma", ",", "\n", "hidden_units_r", "=", "units_disc_r", ",", "\n", "hidden_units_v", "=", "units_disc_v", ",", "\n", "hidden_activation_r", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "hidden_activation_v", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "learning_steps_disc", "=", "0", "\n", "self", ".", "optim_disc", "=", "Adam", "(", "self", ".", "disc", ".", "parameters", "(", ")", ",", "lr", "=", "lr_disc", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_disc", "=", "epoch_disc", "\n", "\n", "self", ".", "actor", ".", "mean", "=", "self", ".", "buffer_exp", ".", "mean", "\n", "self", ".", "actor", ".", "std", "=", "self", ".", "buffer_exp", ".", "std", "\n", "self", ".", "critic", ".", "mean", "=", "self", ".", "buffer_exp", ".", "mean", "\n", "self", ".", "critic", ".", "std", "=", "self", ".", "buffer_exp", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.update": [[53, 92], ["range", "airl.AIRL.buffer.get", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "airl.AIRL.disc.calculate_reward", "airl.AIRL.update_ppo", "airl.AIRL.buffer.sample", "airl.AIRL.buffer_exp.sample", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "airl.AIRL.update_disc", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "airl.AIRL.actor.evaluate_log_pi"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.calculate_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.update_ppo", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.update_disc", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateIndependentPolicy.evaluate_log_pi"], ["", "def", "update", "(", "self", ",", "writer", ")", ":", "\n", "        ", "self", ".", "learning_steps", "+=", "1", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "epoch_disc", ")", ":", "\n", "            ", "self", ".", "learning_steps_disc", "+=", "1", "\n", "\n", "# Samples from current policy's trajectories.", "\n", "states", ",", "actions", ",", "_", ",", "dones", ",", "log_pis", ",", "next_states", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "# Samples from expert's demonstrations.", "\n", "states_exp", ",", "actions_exp", ",", "_", ",", "dones_exp", ",", "next_states_exp", "=", "self", ".", "buffer_exp", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "# Calculate log probabilities of expert actions.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "log_pis_exp", "=", "self", ".", "actor", ".", "evaluate_log_pi", "(", "states_exp", ",", "actions_exp", ")", "\n", "\n", "", "n_states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "buffer_exp", ".", "mean", ")", "/", "self", ".", "buffer_exp", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "n_next_states", "=", "torch", ".", "clamp", "(", "(", "next_states", "-", "self", ".", "buffer_exp", ".", "mean", ")", "/", "self", ".", "buffer_exp", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "n_states_exp", "=", "torch", ".", "clamp", "(", "(", "states_exp", "-", "self", ".", "buffer_exp", ".", "mean", ")", "/", "self", ".", "buffer_exp", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "n_next_states_exp", "=", "torch", ".", "clamp", "(", "(", "next_states_exp", "-", "self", ".", "buffer_exp", ".", "mean", ")", "/", "self", ".", "buffer_exp", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "\n", "# Update discriminator.", "\n", "self", ".", "update_disc", "(", "\n", "n_states", ",", "actions", ",", "dones", ",", "log_pis", ",", "n_next_states", ",", "\n", "n_states_exp", ",", "actions_exp", ",", "dones_exp", ",", "log_pis_exp", ",", "n_next_states_exp", ",", "writer", "\n", ")", "\n", "\n", "# We don't use reward signals here,", "\n", "", "states", ",", "actions", ",", "_", ",", "dones", ",", "log_pis", ",", "next_states", "=", "self", ".", "buffer", ".", "get", "(", ")", "\n", "\n", "n_states", "=", "torch", ".", "clamp", "(", "(", "states", "-", "self", ".", "buffer_exp", ".", "mean", ")", "/", "self", ".", "buffer_exp", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "n_next_states", "=", "torch", ".", "clamp", "(", "(", "next_states", "-", "self", ".", "buffer_exp", ".", "mean", ")", "/", "self", ".", "buffer_exp", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "\n", "# Calculate rewards.", "\n", "rewards", "=", "self", ".", "disc", ".", "calculate_reward", "(", "\n", "n_states", ",", "actions", ",", "dones", ",", "log_pis", ",", "n_next_states", ")", "\n", "\n", "# Update PPO using estimated rewards.", "\n", "self", ".", "update_ppo", "(", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", ",", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.update_disc": [[93, 119], ["airl.AIRL.disc", "airl.AIRL.disc", "airl.AIRL.optim_disc.zero_grad", "loss_disc.backward", "airl.AIRL.optim_disc.step", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "loss_disc.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "def", "update_disc", "(", "self", ",", "states", ",", "actions", ",", "dones", ",", "log_pis", ",", "next_states", ",", "\n", "states_exp", ",", "action_exp", ",", "dones_exp", ",", "log_pis_exp", ",", "\n", "next_states_exp", ",", "writer", ")", ":", "\n", "# Output of discriminator is (-inf, inf), not [0, 1].", "\n", "        ", "logits_pi", "=", "self", ".", "disc", "(", "states", ",", "actions", ",", "dones", ",", "log_pis", ",", "next_states", ")", "\n", "logits_exp", "=", "self", ".", "disc", "(", "states_exp", ",", "action_exp", ",", "dones_exp", ",", "log_pis_exp", ",", "next_states_exp", ")", "\n", "\n", "# Discriminator is to maximize E_{\\pi} [log(1 - D)] + E_{exp} [log(D)].", "\n", "loss_pi", "=", "-", "F", ".", "logsigmoid", "(", "-", "logits_pi", ")", ".", "mean", "(", ")", "\n", "loss_exp", "=", "-", "F", ".", "logsigmoid", "(", "logits_exp", ")", ".", "mean", "(", ")", "\n", "loss_disc", "=", "loss_pi", "+", "loss_exp", "\n", "\n", "self", ".", "optim_disc", ".", "zero_grad", "(", ")", "\n", "loss_disc", ".", "backward", "(", ")", "\n", "self", ".", "optim_disc", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "learning_steps_disc", "%", "self", ".", "epoch_disc", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\n", "'loss/disc'", ",", "loss_disc", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "\n", "# Discriminator's accuracies.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "acc_pi", "=", "(", "logits_pi", "<", "0", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "acc_exp", "=", "(", "logits_exp", ">", "0", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "writer", ".", "add_scalar", "(", "'stats/acc_pi'", ",", "acc_pi", ",", "self", ".", "learning_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'stats/acc_exp'", ",", "acc_exp", ",", "self", ".", "learning_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.airl.AIRL.save_reward_function": [[120, 127], ["os.path.join", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "airl.AIRL.disc.g.state_dict", "airl.AIRL.disc.h.state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], ["", "", "def", "save_reward_function", "(", "self", ",", "path", ")", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'reward.pt'", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'g'", ":", "self", ".", "disc", ".", "g", ".", "state_dict", "(", ")", ",", "\n", "'h'", ":", "self", ".", "disc", ".", "h", ".", "state_dict", "(", ")", "\n", "}", ",", "fname", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.__init__": [[31, 74], ["irl.algo.base.Algorithm.__init__", "irl.buffer.RolloutBuffer", "irl.network.StateIndependentPolicy().to", "irl.network.StateFunction().to", "torch.optim.Adam", "torch.optim.Adam", "ppo.PPO.actor.parameters", "ppo.PPO.critic.parameters", "irl.network.StateIndependentPolicy", "irl.network.StateFunction", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "start_buffer_exp", ",", "gamma", "=", "0.995", ",", "\n", "rollout_length", "=", "2048", ",", "mix_buffer", "=", "20", ",", "lr_actor", "=", "3e-4", ",", "\n", "lr_critic", "=", "3e-4", ",", "units_actor", "=", "(", "64", ",", "64", ")", ",", "units_critic", "=", "(", "64", ",", "64", ")", ",", "\n", "epoch_ppo", "=", "10", ",", "clip_eps", "=", "0.2", ",", "lambd", "=", "0.97", ",", "coef_ent", "=", "0.0", ",", "\n", "max_grad_norm", "=", "10.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "gamma", ")", "\n", "\n", "self", ".", "start_buffer_exp", "=", "start_buffer_exp", "\n", "\n", "# Rollout buffer.", "\n", "self", ".", "buffer", "=", "RolloutBuffer", "(", "\n", "buffer_size", "=", "rollout_length", ",", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "device", "=", "device", ",", "\n", "mix", "=", "mix_buffer", "\n", ")", "\n", "\n", "# Actor.", "\n", "self", ".", "actor", "=", "StateIndependentPolicy", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "hidden_units", "=", "units_actor", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Critic.", "\n", "self", ".", "critic", "=", "StateFunction", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "hidden_units", "=", "units_critic", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "optim_actor", "=", "Adam", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "lr_actor", ")", "\n", "self", ".", "optim_critic", "=", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "lr_critic", ")", "\n", "\n", "self", ".", "learning_steps_ppo", "=", "0", "\n", "self", ".", "rollout_length", "=", "rollout_length", "\n", "self", ".", "epoch_ppo", "=", "epoch_ppo", "\n", "self", ".", "clip_eps", "=", "clip_eps", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "coef_ent", "=", "coef_ent", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.is_update": [[75, 77], ["None"], "methods", ["None"], ["", "def", "is_update", "(", "self", ",", "step", ")", ":", "\n", "        ", "return", "step", "%", "self", ".", "rollout_length", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.step": [[78, 123], ["ppo.PPO.explore", "env.step", "env.unwrapped.get_dist", "ppo.PPO.buffer.append", "ppo.PPO.buffer.append", "env.reset", "ppo.PPO.start_buffer_exp.sample", "env.unwrapped.rollback", "numpy.append", "env.unwrapped.is_transition_boundary", "env.unwrapped.is_transition_boundary_rear", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "start_sample[].cpu().detach().numpy", "numpy.array", "env.unwrapped.is_transition_boundary_for_obstacle", "env.unwrapped.is_transition_boundary_rear_for_obstacle", "env.unwrapped.is_transition_boundary_for_pick", "env.unwrapped.is_transition_boundary_for_catch", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "start_sample[].cpu().detach", "env.unwrapped.is_transition_boundary_for_serve", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "start_sample[].cpu", "env.unwrapped.is_transition_boundary_for_patrol", "env.unwrapped.is_transition_boundary_rear_for_patrol"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.explore", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear_for_obstacle", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_transition_boundary_for_pick", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_transition_boundary_for_catch", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_transition_boundary_for_serve", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_for_patrol", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_rear_for_patrol"], ["", "def", "step", "(", "self", ",", "env", ",", "state", ",", "t", ",", "step", ")", ":", "\n", "        ", "t", "+=", "1", "\n", "\n", "action", ",", "log_pi", "=", "self", ".", "explore", "(", "state", ")", "\n", "next_state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "if", "self", ".", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "            ", "dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "self", ".", "buffer", ".", "append", "(", "state", ",", "action", ",", "reward", ",", "done", ",", "log_pi", ",", "np", ".", "append", "(", "next_state", ",", "np", ".", "array", "(", "dist", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", ".", "append", "(", "state", ",", "action", ",", "reward", ",", "done", ",", "log_pi", ",", "next_state", ")", "\n", "", "if", "self", ".", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "            ", "if", "self", ".", "front", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary", "(", ")", "\n", "", "else", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_rear", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "            ", "if", "self", ".", "front", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_obstacle", "(", ")", "\n", "", "else", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_rear_for_obstacle", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_pick", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_catch", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_serve", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "            ", "if", "self", ".", "front", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_patrol", "(", ")", "\n", "", "else", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_rear_for_patrol", "(", ")", "\n", "\n", "\n", "", "", "if", "done", "or", "flag", "==", "-", "1", ":", "\n", "            ", "t", "=", "0", "\n", "next_state", "=", "env", ".", "reset", "(", ")", "\n", "start_sample", "=", "self", ".", "start_buffer_exp", ".", "sample", "(", ")", "\n", "next_state", "=", "env", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "3", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "4", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "next_state", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.update": [[124, 130], ["ppo.PPO.buffer.get", "ppo.PPO.update_ppo"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.update_ppo"], ["", "def", "update", "(", "self", ",", "writer", ")", ":", "\n", "        ", "self", ".", "learning_steps", "+=", "1", "\n", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", "=", "self", ".", "buffer", ".", "get", "(", ")", "\n", "self", ".", "update_ppo", "(", "\n", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", ",", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.update_ppo": [[131, 144], ["ppo.calculate_gae", "range", "torch.no_grad", "ppo.PPO.critic", "ppo.PPO.critic", "ppo.PPO.update_critic", "ppo.PPO.update_actor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.calculate_gae", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.update_critic", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.update_actor"], ["", "def", "update_ppo", "(", "self", ",", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", ",", "\n", "writer", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "values", "=", "self", ".", "critic", "(", "states", ")", "\n", "next_values", "=", "self", ".", "critic", "(", "next_states", ")", "\n", "\n", "", "targets", ",", "gaes", "=", "calculate_gae", "(", "\n", "values", ",", "rewards", ",", "dones", ",", "next_values", ",", "self", ".", "gamma", ",", "self", ".", "lambd", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "epoch_ppo", ")", ":", "\n", "            ", "self", ".", "learning_steps_ppo", "+=", "1", "\n", "self", ".", "update_critic", "(", "states", ",", "targets", ",", "writer", ")", "\n", "self", ".", "update_actor", "(", "states", ",", "actions", ",", "log_pis", ",", "gaes", ",", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.update_critic": [[145, 156], ["ppo.PPO.optim_critic.zero_grad", "loss_critic.backward", "torch.nn.utils.clip_grad_norm_", "ppo.PPO.optim_critic.step", "ppo.PPO.critic.parameters", "writer.add_scalar", "loss_critic.item", "ppo.PPO.critic"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "", "def", "update_critic", "(", "self", ",", "states", ",", "targets", ",", "writer", ")", ":", "\n", "        ", "loss_critic", "=", "(", "self", ".", "critic", "(", "states", ")", "-", "targets", ")", ".", "pow_", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optim_critic", ".", "zero_grad", "(", ")", "\n", "loss_critic", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optim_critic", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "learning_steps_ppo", "%", "self", ".", "epoch_ppo", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\n", "'loss/critic'", ",", "loss_critic", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.update_actor": [[157, 180], ["ppo.PPO.actor.evaluate_log_pi", "torch.max().mean", "ppo.PPO.optim_actor.zero_grad", "torch.nn.utils.clip_grad_norm_", "ppo.PPO.optim_actor.step", "ppo.PPO.mean", "ppo.PPO.actor.parameters", "writer.add_scalar", "writer.add_scalar", "torch.clamp", "torch.max", "torch.max().mean.item", "entropy.item"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.policy.StateIndependentPolicy.evaluate_log_pi", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "", "def", "update_actor", "(", "self", ",", "states", ",", "actions", ",", "log_pis_old", ",", "gaes", ",", "writer", ")", ":", "\n", "        ", "log_pis", "=", "self", ".", "actor", ".", "evaluate_log_pi", "(", "states", ",", "actions", ")", "\n", "entropy", "=", "-", "log_pis", ".", "mean", "(", ")", "\n", "\n", "ratios", "=", "(", "log_pis", "-", "log_pis_old", ")", ".", "exp_", "(", ")", "\n", "loss_actor1", "=", "-", "ratios", "*", "gaes", "\n", "loss_actor2", "=", "-", "torch", ".", "clamp", "(", "\n", "ratios", ",", "\n", "1.0", "-", "self", ".", "clip_eps", ",", "\n", "1.0", "+", "self", ".", "clip_eps", "\n", ")", "*", "gaes", "\n", "loss_actor", "=", "torch", ".", "max", "(", "loss_actor1", ",", "loss_actor2", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optim_actor", ".", "zero_grad", "(", ")", "\n", "(", "loss_actor", "-", "self", ".", "coef_ent", "*", "entropy", ")", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optim_actor", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "learning_steps_ppo", "%", "self", ".", "epoch_ppo", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\n", "'loss/actor'", ",", "loss_actor", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'stats/entropy'", ",", "entropy", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPO.save_models": [[182, 192], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.save", "ppo.PPO.actor.state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'model.pt'", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'actor_mean'", ":", "self", ".", "actor", ".", "mean", ",", "\n", "'actor_std'", ":", "self", ".", "actor", ".", "std", ",", "\n", "'critic_mean'", ":", "self", ".", "critic", ".", "mean", ",", "\n", "'critic_std'", ":", "self", ".", "critic", ".", "std", ",", "\n", "'model'", ":", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.__init__": [[195, 209], ["irl.network.StateIndependentPolicy().to", "torch.load", "ppo.PPOExpert.actor.load_state_dict", "irl.network.StateIndependentPolicy", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "device", ",", "path", ",", "\n", "units_actor", "=", "(", "64", ",", "64", ")", ")", ":", "\n", "# Actor.", "\n", "        ", "self", ".", "actor", "=", "StateIndependentPolicy", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "hidden_units", "=", "units_actor", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "actor", ".", "mean", "=", "checkpoint", "[", "'actor_mean'", "]", "\n", "self", ".", "actor", ".", "std", "=", "checkpoint", "[", "'actor_std'", "]", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean": [[210, 212], ["None"], "methods", ["None"], ["", "def", "get_mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actor", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std": [[213, 215], ["None"], "methods", ["None"], ["", "def", "get_std", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actor", ".", "std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.calculate_gae": [[15, 27], ["torch.empty_like", "reversed", "range", "rewards.size", "torch.empty_like.mean", "torch.empty_like.std"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std"], ["def", "calculate_gae", "(", "values", ",", "rewards", ",", "dones", ",", "next_values", ",", "gamma", ",", "lambd", ")", ":", "\n", "# Calculate TD errors.", "\n", "    ", "deltas", "=", "rewards", "+", "gamma", "*", "next_values", "*", "(", "1", "-", "dones", ")", "-", "values", "\n", "# Initialize gae.", "\n", "gaes", "=", "torch", ".", "empty_like", "(", "rewards", ")", "\n", "\n", "# Calculate gae recursively from behind.", "\n", "gaes", "[", "-", "1", "]", "=", "deltas", "[", "-", "1", "]", "\n", "for", "t", "in", "reversed", "(", "range", "(", "rewards", ".", "size", "(", "0", ")", "-", "1", ")", ")", ":", "\n", "        ", "gaes", "[", "t", "]", "=", "deltas", "[", "t", "]", "+", "gamma", "*", "lambd", "*", "(", "1", "-", "dones", "[", "t", "]", ")", "*", "gaes", "[", "t", "+", "1", "]", "\n", "\n", "", "return", "gaes", "+", "values", ",", "(", "gaes", "-", "gaes", ".", "mean", "(", ")", ")", "/", "(", "gaes", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spinup.version.get_version": [[5, 8], ["None"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "\"Returns the version as a human-format string.\"", "\n", "return", "'%d.%d.%d'", "%", "version_info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.__init__": [[41, 44], ["tensorflow.train.AdamOptimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "tf", ".", "train", ".", "AdamOptimizer", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.compute_gradients": [[45, 70], ["super().compute_gradients", "mpi_tf.flat_concat", "mpi_tf.MpiAdamOptimizer.comm.Get_size", "numpy.zeros", "tensorflow.py_func", "tensorflow.py_func.set_shape", "tensorflow.split", "v.shape.as_list", "int", "mpi_tf.MpiAdamOptimizer.comm.Allreduce", "numpy.divide", "numpy.prod", "float", "tensorflow.reshape", "zip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.compute_gradients", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.flat_concat"], ["", "def", "compute_gradients", "(", "self", ",", "loss", ",", "var_list", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Same as normal compute_gradients, except average grads over processes.\n        \"\"\"", "\n", "grads_and_vars", "=", "super", "(", ")", ".", "compute_gradients", "(", "loss", ",", "var_list", ",", "**", "kwargs", ")", "\n", "grads_and_vars", "=", "[", "(", "g", ",", "v", ")", "for", "g", ",", "v", "in", "grads_and_vars", "if", "g", "is", "not", "None", "]", "\n", "flat_grad", "=", "flat_concat", "(", "[", "g", "for", "g", ",", "v", "in", "grads_and_vars", "]", ")", "\n", "shapes", "=", "[", "v", ".", "shape", ".", "as_list", "(", ")", "for", "g", ",", "v", "in", "grads_and_vars", "]", "\n", "sizes", "=", "[", "int", "(", "np", ".", "prod", "(", "s", ")", ")", "for", "s", "in", "shapes", "]", "\n", "\n", "num_tasks", "=", "self", ".", "comm", ".", "Get_size", "(", ")", "\n", "buf", "=", "np", ".", "zeros", "(", "flat_grad", ".", "shape", ",", "np", ".", "float32", ")", "\n", "\n", "def", "_collect_grads", "(", "flat_grad", ")", ":", "\n", "            ", "self", ".", "comm", ".", "Allreduce", "(", "flat_grad", ",", "buf", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "np", ".", "divide", "(", "buf", ",", "float", "(", "num_tasks", ")", ",", "out", "=", "buf", ")", "\n", "return", "buf", "\n", "\n", "", "avg_flat_grad", "=", "tf", ".", "py_func", "(", "_collect_grads", ",", "[", "flat_grad", "]", ",", "tf", ".", "float32", ")", "\n", "avg_flat_grad", ".", "set_shape", "(", "flat_grad", ".", "shape", ")", "\n", "avg_grads", "=", "tf", ".", "split", "(", "avg_flat_grad", ",", "sizes", ",", "axis", "=", "0", ")", "\n", "avg_grads_and_vars", "=", "[", "(", "tf", ".", "reshape", "(", "g", ",", "v", ".", "shape", ")", ",", "v", ")", "\n", "for", "g", ",", "(", "_", ",", "v", ")", "in", "zip", "(", "avg_grads", ",", "grads_and_vars", ")", "]", "\n", "\n", "return", "avg_grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.apply_gradients": [[71, 79], ["super().apply_gradients", "tensorflow.group", "tensorflow.control_dependencies", "mpi_tf.sync_params"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.apply_gradients", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.sync_params"], ["", "def", "apply_gradients", "(", "self", ",", "grads_and_vars", ",", "global_step", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Same as normal apply_gradients, except sync params after update.\n        \"\"\"", "\n", "opt", "=", "super", "(", ")", ".", "apply_gradients", "(", "grads_and_vars", ",", "global_step", ",", "name", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "opt", "]", ")", ":", "\n", "            ", "sync", "=", "sync_params", "(", "[", "v", "for", "g", ",", "v", "in", "grads_and_vars", "]", ")", "\n", "", "return", "tf", ".", "group", "(", "[", "opt", ",", "sync", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.flat_concat": [[7, 9], ["tensorflow.concat", "tensorflow.reshape"], "function", ["None"], ["def", "flat_concat", "(", "xs", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "[", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", ")", ")", "for", "x", "in", "xs", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.assign_params_from_flat": [[10, 15], ["tensorflow.split", "tensorflow.group", "int", "tensorflow.reshape", "numpy.prod", "flat_size", "zip", "tensorflow.assign", "p.shape.as_list", "zip"], "function", ["None"], ["", "def", "assign_params_from_flat", "(", "x", ",", "params", ")", ":", "\n", "    ", "flat_size", "=", "lambda", "p", ":", "int", "(", "np", ".", "prod", "(", "p", ".", "shape", ".", "as_list", "(", ")", ")", ")", "# the 'int' is important for scalars", "\n", "splits", "=", "tf", ".", "split", "(", "x", ",", "[", "flat_size", "(", "p", ")", "for", "p", "in", "params", "]", ")", "\n", "new_params", "=", "[", "tf", ".", "reshape", "(", "p_new", ",", "p", ".", "shape", ")", "for", "p", ",", "p_new", "in", "zip", "(", "params", ",", "splits", ")", "]", "\n", "return", "tf", ".", "group", "(", "[", "tf", ".", "assign", "(", "p", ",", "p_new", ")", "for", "p", ",", "p_new", "in", "zip", "(", "params", ",", "new_params", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.sync_params": [[16, 23], ["mpi_tf.flat_concat", "tensorflow.py_func", "mpi_tf.assign_params_from_flat", "spinup.utils.mpi_tools.broadcast"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.flat_concat", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.assign_params_from_flat", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.broadcast"], ["", "def", "sync_params", "(", "params", ")", ":", "\n", "    ", "get_params", "=", "flat_concat", "(", "params", ")", "\n", "def", "_broadcast", "(", "x", ")", ":", "\n", "        ", "broadcast", "(", "x", ")", "\n", "return", "x", "\n", "", "synced_params", "=", "tf", ".", "py_func", "(", "_broadcast", ",", "[", "get_params", "]", ",", "tf", ".", "float32", ")", "\n", "return", "assign_params_from_flat", "(", "synced_params", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.sync_all_params": [[24, 27], ["mpi_tf.sync_params", "tensorflow.global_variables"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.sync_params"], ["", "def", "sync_all_params", "(", ")", ":", "\n", "    ", "\"\"\"Sync all tf variables across MPI processes.\"\"\"", "\n", "return", "sync_params", "(", "tf", ".", "global_variables", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.__init__": [[246, 252], ["run_utils.ExperimentGrid.name"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.name"], ["def", "__init__", "(", "self", ",", "name", "=", "''", ")", ":", "\n", "        ", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "vals", "=", "[", "]", "\n", "self", ".", "shs", "=", "[", "]", "\n", "self", ".", "in_names", "=", "[", "]", "\n", "self", ".", "name", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.name": [[253, 256], ["isinstance"], "methods", ["None"], ["", "def", "name", "(", "self", ",", "_name", ")", ":", "\n", "        ", "assert", "isinstance", "(", "_name", ",", "str", ")", ",", "\"Name has to be a string.\"", "\n", "self", ".", "_name", "=", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print": [[257, 294], ["run_utils.ExperimentGrid.print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "\"\"\"Print a helpful report about the experiment grid.\"\"\"", "\n", "print", "(", "'='", "*", "DIV_LINE_WIDTH", ")", "\n", "\n", "# Prepare announcement at top of printing. If the ExperimentGrid has a", "\n", "# short name, write this as one line. If the name is long, break the", "\n", "# announcement over two lines.", "\n", "base_msg", "=", "'ExperimentGrid %s runs over parameters:\\n'", "\n", "name_insert", "=", "'['", "+", "self", ".", "_name", "+", "']'", "\n", "if", "len", "(", "base_msg", "%", "name_insert", ")", "<=", "80", ":", "\n", "            ", "msg", "=", "base_msg", "%", "name_insert", "\n", "", "else", ":", "\n", "            ", "msg", "=", "base_msg", "%", "(", "name_insert", "+", "'\\n'", ")", "\n", "", "print", "(", "colorize", "(", "msg", ",", "color", "=", "'green'", ",", "bold", "=", "True", ")", ")", "\n", "\n", "# List off parameters, shorthands, and possible values.", "\n", "for", "k", ",", "v", ",", "sh", "in", "zip", "(", "self", ".", "keys", ",", "self", ".", "vals", ",", "self", ".", "shs", ")", ":", "\n", "            ", "color_k", "=", "colorize", "(", "k", ".", "ljust", "(", "40", ")", ",", "color", "=", "'cyan'", ",", "bold", "=", "True", ")", "\n", "print", "(", "''", ",", "color_k", ",", "'['", "+", "sh", "+", "']'", "if", "sh", "is", "not", "None", "else", "''", ",", "'\\n'", ")", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "v", ")", ":", "\n", "                ", "print", "(", "'\\t'", "+", "str", "(", "convert_json", "(", "val", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "\n", "# Count up the number of variants. The number counting seeds", "\n", "# is the total number of experiments that will run; the number not", "\n", "# counting seeds is the total number of otherwise-unique configs", "\n", "# being investigated.", "\n", "", "nvars_total", "=", "int", "(", "np", ".", "prod", "(", "[", "len", "(", "v", ")", "for", "v", "in", "self", ".", "vals", "]", ")", ")", "\n", "if", "'seed'", "in", "self", ".", "keys", ":", "\n", "            ", "num_seeds", "=", "len", "(", "self", ".", "vals", "[", "self", ".", "keys", ".", "index", "(", "'seed'", ")", "]", ")", "\n", "nvars_seedless", "=", "int", "(", "nvars_total", "/", "num_seeds", ")", "\n", "", "else", ":", "\n", "            ", "nvars_seedless", "=", "nvars_total", "\n", "", "print", "(", "' Variants, counting seeds: '", ".", "ljust", "(", "40", ")", ",", "nvars_total", ")", "\n", "print", "(", "' Variants, not counting seeds: '", ".", "ljust", "(", "40", ")", ",", "nvars_seedless", ")", "\n", "print", "(", ")", "\n", "print", "(", "'='", "*", "DIV_LINE_WIDTH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid._default_shorthand": [[296, 306], ["run_utils.ExperimentGrid._default_shorthand.shear"], "methods", ["None"], ["", "def", "_default_shorthand", "(", "self", ",", "key", ")", ":", "\n", "# Create a default shorthand for the key, built from the first ", "\n", "# three letters of each colon-separated part.", "\n", "# But if the first three letters contains something which isn't", "\n", "# alphanumeric, shear that off.", "\n", "        ", "valid_chars", "=", "\"%s%s\"", "%", "(", "string", ".", "ascii_letters", ",", "string", ".", "digits", ")", "\n", "def", "shear", "(", "x", ")", ":", "\n", "            ", "return", "''", ".", "join", "(", "z", "for", "z", "in", "x", "[", ":", "3", "]", "if", "z", "in", "valid_chars", ")", "\n", "", "sh", "=", "'-'", ".", "join", "(", "[", "shear", "(", "x", ")", "for", "x", "in", "key", ".", "split", "(", "':'", ")", "]", ")", "\n", "return", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.add": [[307, 339], ["isinstance", "run_utils.ExperimentGrid.keys.append", "run_utils.ExperimentGrid.vals.append", "run_utils.ExperimentGrid.shs.append", "run_utils.ExperimentGrid.in_names.append", "isinstance", "isinstance", "run_utils.ExperimentGrid._default_shorthand"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid._default_shorthand"], ["", "def", "add", "(", "self", ",", "key", ",", "vals", ",", "shorthand", "=", "None", ",", "in_name", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Add a parameter (key) to the grid config, with potential values (vals).\n\n        By default, if a shorthand isn't given, one is automatically generated\n        from the key using the first three letters of each colon-separated\n        term. To disable this behavior, change ``DEFAULT_SHORTHAND`` in the\n        ``spinup/user_config.py`` file to ``False``. \n\n        Args:\n            key (string): Name of parameter.\n\n            vals (value or list of values): Allowed values of parameter.\n\n            shorthand (string): Optional, shortened name of parameter. For \n                example, maybe the parameter ``steps_per_epoch`` is shortened\n                to ``steps``. \n\n            in_name (bool): When constructing variant names, force the\n                inclusion of this parameter into the name.\n        \"\"\"", "\n", "assert", "isinstance", "(", "key", ",", "str", ")", ",", "\"Key must be a string.\"", "\n", "assert", "shorthand", "is", "None", "or", "isinstance", "(", "shorthand", ",", "str", ")", ",", "\"Shorthand must be a string.\"", "\n", "if", "not", "isinstance", "(", "vals", ",", "list", ")", ":", "\n", "            ", "vals", "=", "[", "vals", "]", "\n", "", "if", "DEFAULT_SHORTHAND", "and", "shorthand", "is", "None", ":", "\n", "            ", "shorthand", "=", "self", ".", "_default_shorthand", "(", "key", ")", "\n", "", "self", ".", "keys", ".", "append", "(", "key", ")", "\n", "self", ".", "vals", ".", "append", "(", "vals", ")", "\n", "self", ".", "shs", ".", "append", "(", "shorthand", ")", "\n", "self", ".", "in_names", ".", "append", "(", "in_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.variant_name": [[340, 394], ["zip", "var_name.lstrip", "k.split", "run_utils.ExperimentGrid.variant_name.get_val"], "methods", ["None"], ["", "def", "variant_name", "(", "self", ",", "variant", ")", ":", "\n", "        ", "\"\"\"\n        Given a variant (dict of valid param/value pairs), make an exp_name.\n\n        A variant's name is constructed as the grid name (if you've given it \n        one), plus param names (or shorthands if available) and values \n        separated by underscores.\n\n        Note: if ``seed`` is a parameter, it is not included in the name.\n        \"\"\"", "\n", "\n", "def", "get_val", "(", "v", ",", "k", ")", ":", "\n", "# Utility method for getting the correct value out of a variant", "\n", "# given as a nested dict. Assumes that a parameter name, k, ", "\n", "# describes a path into the nested dict, such that k='a:b:c'", "\n", "# corresponds to value=variant['a']['b']['c']. Uses recursion", "\n", "# to get this.", "\n", "            ", "if", "k", "in", "v", ":", "\n", "                ", "return", "v", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "splits", "=", "k", ".", "split", "(", "':'", ")", "\n", "k0", ",", "k1", "=", "splits", "[", "0", "]", ",", "':'", ".", "join", "(", "splits", "[", "1", ":", "]", ")", "\n", "return", "get_val", "(", "v", "[", "k0", "]", ",", "k1", ")", "\n", "\n", "# Start the name off with the name of the variant generator.", "\n", "", "", "var_name", "=", "self", ".", "_name", "\n", "\n", "# Build the rest of the name by looping through all parameters,", "\n", "# and deciding which ones need to go in there.", "\n", "for", "k", ",", "v", ",", "sh", ",", "inn", "in", "zip", "(", "self", ".", "keys", ",", "self", ".", "vals", ",", "self", ".", "shs", ",", "self", ".", "in_names", ")", ":", "\n", "\n", "# Include a parameter in a name if either 1) it can take multiple", "\n", "# values, or 2) the user specified that it must appear in the name.", "\n", "# Except, however, when the parameter is 'seed'. Seed is handled", "\n", "# differently so that runs of the same experiment, with different ", "\n", "# seeds, will be grouped by experiment name.", "\n", "            ", "if", "(", "len", "(", "v", ")", ">", "1", "or", "inn", ")", "and", "not", "(", "k", "==", "'seed'", ")", ":", "\n", "\n", "# Use the shorthand if available, otherwise the full name.", "\n", "                ", "param_name", "=", "sh", "if", "sh", "is", "not", "None", "else", "k", "\n", "param_name", "=", "valid_str", "(", "param_name", ")", "\n", "\n", "# Get variant value for parameter k", "\n", "variant_val", "=", "get_val", "(", "variant", ",", "k", ")", "\n", "\n", "# Append to name", "\n", "if", "all_bools", "(", "v", ")", ":", "\n", "# If this is a param which only takes boolean values,", "\n", "# only include in the name if it's True for this variant.", "\n", "                    ", "var_name", "+=", "(", "'_'", "+", "param_name", ")", "if", "variant_val", "else", "''", "\n", "", "else", ":", "\n", "                    ", "var_name", "+=", "'_'", "+", "param_name", "+", "valid_str", "(", "variant_val", ")", "\n", "\n", "", "", "", "return", "var_name", ".", "lstrip", "(", "'_'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid._variants": [[395, 412], ["len", "run_utils.ExperimentGrid._variants", "dict", "v.update", "variants.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid._variants", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_variants", "(", "self", ",", "keys", ",", "vals", ")", ":", "\n", "        ", "\"\"\"\n        Recursively builds list of valid variants.\n        \"\"\"", "\n", "if", "len", "(", "keys", ")", "==", "1", ":", "\n", "            ", "pre_variants", "=", "[", "dict", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "pre_variants", "=", "self", ".", "_variants", "(", "keys", "[", "1", ":", "]", ",", "vals", "[", "1", ":", "]", ")", "\n", "\n", "", "variants", "=", "[", "]", "\n", "for", "val", "in", "vals", "[", "0", "]", ":", "\n", "            ", "for", "pre_v", "in", "pre_variants", ":", "\n", "                ", "v", "=", "{", "}", "\n", "v", "[", "keys", "[", "0", "]", "]", "=", "val", "\n", "v", ".", "update", "(", "pre_v", ")", "\n", "variants", ".", "append", "(", "v", ")", "\n", "", "", "return", "variants", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.variants": [[413, 480], ["run_utils.ExperimentGrid._variants", "dict", "set", "var.items", "run_utils.ExperimentGrid.variants.unflatten_var"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid._variants"], ["", "def", "variants", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Makes a list of dicts, where each dict is a valid config in the grid.\n\n        There is special handling for variant parameters whose names take\n        the form\n\n            ``'full:param:name'``.\n\n        The colons are taken to indicate that these parameters should\n        have a nested dict structure. eg, if there are two params,\n\n            ====================  ===\n            Key                   Val\n            ====================  ===\n            ``'base:param:a'``    1\n            ``'base:param:b'``    2\n            ====================  ===\n\n        the variant dict will have the structure\n\n        .. parsed-literal::\n\n            variant = {\n                base: {\n                    param : {\n                        a : 1,\n                        b : 2\n                        }\n                    }    \n                }\n        \"\"\"", "\n", "flat_variants", "=", "self", ".", "_variants", "(", "self", ".", "keys", ",", "self", ".", "vals", ")", "\n", "\n", "def", "unflatten_var", "(", "var", ")", ":", "\n", "            ", "\"\"\" \n            Build the full nested dict version of var, based on key names.\n            \"\"\"", "\n", "new_var", "=", "dict", "(", ")", "\n", "unflatten_set", "=", "set", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "var", ".", "items", "(", ")", ":", "\n", "                ", "if", "':'", "in", "k", ":", "\n", "                    ", "splits", "=", "k", ".", "split", "(", "':'", ")", "\n", "k0", "=", "splits", "[", "0", "]", "\n", "assert", "k0", "not", "in", "new_var", "or", "isinstance", "(", "new_var", "[", "k0", "]", ",", "dict", ")", ",", "\"You can't assign multiple values to the same key.\"", "\n", "\n", "if", "not", "(", "k0", "in", "new_var", ")", ":", "\n", "                        ", "new_var", "[", "k0", "]", "=", "dict", "(", ")", "\n", "\n", "", "sub_k", "=", "':'", ".", "join", "(", "splits", "[", "1", ":", "]", ")", "\n", "new_var", "[", "k0", "]", "[", "sub_k", "]", "=", "v", "\n", "unflatten_set", ".", "add", "(", "k0", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "not", "(", "k", "in", "new_var", ")", ",", "\"You can't assign multiple values to the same key.\"", "\n", "new_var", "[", "k", "]", "=", "v", "\n", "\n", "# Make sure to fill out the nested dicts.", "\n", "", "", "for", "k", "in", "unflatten_set", ":", "\n", "                ", "new_var", "[", "k", "]", "=", "unflatten_var", "(", "new_var", "[", "k", "]", ")", "\n", "\n", "", "return", "new_var", "\n", "\n", "", "new_variants", "=", "[", "unflatten_var", "(", "var", ")", "for", "var", "in", "flat_variants", "]", "\n", "return", "new_variants", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run": [[481, 548], ["run_utils.ExperimentGrid.print", "run_utils.ExperimentGrid.variants", "set", "sorted", "spinup.utils.logx.colorize", "run_utils.ExperimentGrid.print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.variants", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "run", "(", "self", ",", "thunk", ",", "num_cpu", "=", "1", ",", "data_dir", "=", "None", ",", "datestamp", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Run each variant in the grid with function 'thunk'.\n\n        Note: 'thunk' must be either a callable function, or a string. If it is\n        a string, it must be the name of a parameter whose values are all \n        callable functions.\n\n        Uses ``call_experiment`` to actually launch each experiment, and gives\n        each variant a name using ``self.variant_name()``. \n\n        Maintenance note: the args for ExperimentGrid.run should track closely\n        to the args for call_experiment. However, ``seed`` is omitted because\n        we presume the user may add it as a parameter in the grid.\n        \"\"\"", "\n", "\n", "# Print info about self.", "\n", "self", ".", "print", "(", ")", "\n", "\n", "# Make the list of all variants.", "\n", "variants", "=", "self", ".", "variants", "(", ")", "\n", "\n", "# Print variant names for the user.", "\n", "var_names", "=", "set", "(", "[", "self", ".", "variant_name", "(", "var", ")", "for", "var", "in", "variants", "]", ")", "\n", "var_names", "=", "sorted", "(", "list", "(", "var_names", ")", ")", "\n", "line", "=", "'='", "*", "DIV_LINE_WIDTH", "\n", "preparing", "=", "colorize", "(", "'Preparing to run the following experiments...'", ",", "\n", "color", "=", "'green'", ",", "bold", "=", "True", ")", "\n", "joined_var_names", "=", "'\\n'", ".", "join", "(", "var_names", ")", "\n", "announcement", "=", "f\"\\n{preparing}\\n\\n{joined_var_names}\\n\\n{line}\"", "\n", "print", "(", "announcement", ")", "\n", "\n", "\n", "if", "WAIT_BEFORE_LAUNCH", ">", "0", ":", "\n", "            ", "delay_msg", "=", "colorize", "(", "dedent", "(", "\"\"\"\n            Launch delayed to give you a few seconds to review your experiments.\n\n            To customize or disable this behavior, change WAIT_BEFORE_LAUNCH in\n            spinup/user_config.py.\n\n            \"\"\"", ")", ",", "color", "=", "'cyan'", ",", "bold", "=", "True", ")", "+", "line", "\n", "print", "(", "delay_msg", ")", "\n", "wait", ",", "steps", "=", "WAIT_BEFORE_LAUNCH", ",", "100", "\n", "prog_bar", "=", "trange", "(", "steps", ",", "desc", "=", "'Launching in...'", ",", "\n", "leave", "=", "False", ",", "ncols", "=", "DIV_LINE_WIDTH", ",", "\n", "mininterval", "=", "0.25", ",", "\n", "bar_format", "=", "'{desc}: {bar}| {remaining} {elapsed}'", ")", "\n", "for", "_", "in", "prog_bar", ":", "\n", "                ", "time", ".", "sleep", "(", "wait", "/", "steps", ")", "\n", "\n", "# Run the variants.", "\n", "", "", "for", "var", "in", "variants", ":", "\n", "            ", "exp_name", "=", "self", ".", "variant_name", "(", "var", ")", "\n", "\n", "# Figure out what the thunk is.", "\n", "if", "isinstance", "(", "thunk", ",", "str", ")", ":", "\n", "# Assume one of the variant parameters has the same", "\n", "# name as the string you passed for thunk, and that ", "\n", "# variant[thunk] is a valid callable function.", "\n", "                ", "thunk_", "=", "var", "[", "thunk", "]", "\n", "del", "var", "[", "thunk", "]", "\n", "", "else", ":", "\n", "# Assume thunk is given as a function.", "\n", "                ", "thunk_", "=", "thunk", "\n", "\n", "", "call_experiment", "(", "exp_name", ",", "thunk_", ",", "num_cpu", "=", "num_cpu", ",", "\n", "data_dir", "=", "data_dir", ",", "datestamp", "=", "datestamp", ",", "**", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.setup_logger_kwargs": [[26, 88], ["dict", "time.strftime", "os.join", "time.strftime", "os.join", "str", "str"], "function", ["None"], ["def", "setup_logger_kwargs", "(", "exp_name", ",", "seed", "=", "None", ",", "data_dir", "=", "None", ",", "datestamp", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Sets up the output_dir for a logger and returns a dict for logger kwargs.\n\n    If no seed is given and datestamp is false, \n\n    ::\n\n        output_dir = data_dir/exp_name\n\n    If a seed is given and datestamp is false,\n\n    ::\n\n        output_dir = data_dir/exp_name/exp_name_s[seed]\n\n    If datestamp is true, amend to\n\n    ::\n\n        output_dir = data_dir/YY-MM-DD_exp_name/YY-MM-DD_HH-MM-SS_exp_name_s[seed]\n\n    You can force datestamp=True by setting ``FORCE_DATESTAMP=True`` in \n    ``spinup/user_config.py``. \n\n    Args:\n\n        exp_name (string): Name for experiment.\n\n        seed (int): Seed for random number generators used by experiment.\n\n        data_dir (string): Path to folder where results should be saved.\n            Default is the ``DEFAULT_DATA_DIR`` in ``spinup/user_config.py``.\n\n        datestamp (bool): Whether to include a date and timestamp in the\n            name of the save directory.\n\n    Returns:\n\n        logger_kwargs, a dict containing output_dir and exp_name.\n    \"\"\"", "\n", "\n", "# Datestamp forcing", "\n", "datestamp", "=", "datestamp", "or", "FORCE_DATESTAMP", "\n", "\n", "# Make base path", "\n", "ymd_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d_\"", ")", "if", "datestamp", "else", "''", "\n", "relpath", "=", "''", ".", "join", "(", "[", "ymd_time", ",", "exp_name", "]", ")", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "# Make a seed-specific subfolder in the experiment directory.", "\n", "        ", "if", "datestamp", ":", "\n", "            ", "hms_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", "\n", "subfolder", "=", "''", ".", "join", "(", "[", "hms_time", ",", "'-'", ",", "exp_name", ",", "'_s'", ",", "str", "(", "seed", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "subfolder", "=", "''", ".", "join", "(", "[", "exp_name", ",", "'_s'", ",", "str", "(", "seed", ")", "]", ")", "\n", "", "relpath", "=", "osp", ".", "join", "(", "relpath", ",", "subfolder", ")", "\n", "\n", "", "data_dir", "=", "data_dir", "or", "DEFAULT_DATA_DIR", "\n", "logger_kwargs", "=", "dict", "(", "output_dir", "=", "osp", ".", "join", "(", "data_dir", ",", "relpath", ")", ",", "\n", "exp_name", "=", "exp_name", ")", "\n", "return", "logger_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.call_experiment": [[90, 213], ["print", "print", "print", "spinup.utils.serialization_utils.convert_json", "print", "print", "cloudpickle.dumps", "base64.b64encode().decode", "os.join", "spinup.utils.logx.colorize", "spinup.utils.logx.colorize", "print", "psutil.cpu_count", "spinup.utils.logx.colorize", "spinup.utils.logx.colorize", "json.dumps", "run_utils.setup_logger_kwargs", "print", "spinup.utils.mpi_tools.mpi_fork", "thunk", "os.abspath", "subprocess.check_call", "base64.b64encode", "os.dirname", "print", "gym.make", "zlib.compress", "textwrap.dedent", "textwrap.dedent"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.decode", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.setup_logger_kwargs", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_fork.mpi_fork", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make"], ["", "def", "call_experiment", "(", "exp_name", ",", "thunk", ",", "seed", "=", "0", ",", "num_cpu", "=", "1", ",", "data_dir", "=", "None", ",", "\n", "datestamp", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Run a function (thunk) with hyperparameters (kwargs), plus configuration.\n\n    This wraps a few pieces of functionality which are useful when you want\n    to run many experiments in sequence, including logger configuration and\n    splitting into multiple processes for MPI. \n\n    There's also a SpinningUp-specific convenience added into executing the\n    thunk: if ``env_name`` is one of the kwargs passed to call_experiment, it's\n    assumed that the thunk accepts an argument called ``env_fn``, and that\n    the ``env_fn`` should make a gym environment with the given ``env_name``. \n\n    The way the experiment is actually executed is slightly complicated: the\n    function is serialized to a string, and then ``run_entrypoint.py`` is\n    executed in a subprocess call with the serialized string as an argument.\n    ``run_entrypoint.py`` unserializes the function call and executes it.\n    We choose to do it this way---instead of just calling the function \n    directly here---to avoid leaking state between successive experiments.\n\n    Args:\n\n        exp_name (string): Name for experiment.\n\n        thunk (callable): A python function.\n\n        seed (int): Seed for random number generators.\n\n        num_cpu (int): Number of MPI processes to split into. Also accepts\n            'auto', which will set up as many procs as there are cpus on\n            the machine.\n\n        data_dir (string): Used in configuring the logger, to decide where\n            to store experiment results. Note: if left as None, data_dir will\n            default to ``DEFAULT_DATA_DIR`` from ``spinup/user_config.py``. \n\n        **kwargs: All kwargs to pass to thunk.\n\n    \"\"\"", "\n", "\n", "# Determine number of CPU cores to run on", "\n", "num_cpu", "=", "psutil", ".", "cpu_count", "(", "logical", "=", "False", ")", "if", "num_cpu", "==", "'auto'", "else", "num_cpu", "\n", "\n", "# Send random seed to thunk", "\n", "kwargs", "[", "'seed'", "]", "=", "seed", "\n", "\n", "# Be friendly and print out your kwargs, so we all know what's up", "\n", "print", "(", "colorize", "(", "'Running experiment:\\n'", ",", "color", "=", "'cyan'", ",", "bold", "=", "True", ")", ")", "\n", "print", "(", "exp_name", "+", "'\\n'", ")", "\n", "print", "(", "colorize", "(", "'with kwargs:\\n'", ",", "color", "=", "'cyan'", ",", "bold", "=", "True", ")", ")", "\n", "kwargs_json", "=", "convert_json", "(", "kwargs", ")", "\n", "print", "(", "json", ".", "dumps", "(", "kwargs_json", ",", "separators", "=", "(", "','", ",", "':\\t'", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n", "# Set up logger output directory", "\n", "if", "'logger_kwargs'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'logger_kwargs'", "]", "=", "setup_logger_kwargs", "(", "exp_name", ",", "seed", ",", "data_dir", ",", "datestamp", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Note: Call experiment is not handling logger_kwargs.\\n'", ")", "\n", "\n", "", "def", "thunk_plus", "(", ")", ":", "\n", "# Make 'env_fn' from 'env_name'", "\n", "        ", "if", "'env_name'", "in", "kwargs", ":", "\n", "            ", "import", "gym", "\n", "env_name", "=", "kwargs", "[", "'env_name'", "]", "\n", "kwargs", "[", "'env_fn'", "]", "=", "lambda", ":", "gym", ".", "make", "(", "env_name", ")", "\n", "del", "kwargs", "[", "'env_name'", "]", "\n", "\n", "# Fork into multiple processes", "\n", "", "mpi_fork", "(", "num_cpu", ")", "\n", "\n", "# Run thunk", "\n", "thunk", "(", "**", "kwargs", ")", "\n", "\n", "# Prepare to launch a script to run the experiment", "\n", "", "pickled_thunk", "=", "cloudpickle", ".", "dumps", "(", "thunk_plus", ")", "\n", "encoded_thunk", "=", "base64", ".", "b64encode", "(", "zlib", ".", "compress", "(", "pickled_thunk", ")", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "entrypoint", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "osp", ".", "dirname", "(", "__file__", ")", ")", ",", "'run_entrypoint.py'", ")", "\n", "cmd", "=", "[", "sys", ".", "executable", "if", "sys", ".", "executable", "else", "'python'", ",", "entrypoint", ",", "encoded_thunk", "]", "\n", "try", ":", "\n", "        ", "subprocess", ".", "check_call", "(", "cmd", ",", "env", "=", "os", ".", "environ", ")", "\n", "", "except", "CalledProcessError", ":", "\n", "        ", "err_msg", "=", "'\\n'", "*", "3", "+", "'='", "*", "DIV_LINE_WIDTH", "+", "'\\n'", "+", "dedent", "(", "\"\"\"\n\n            There appears to have been an error in your experiment.\n\n            Check the traceback above to see what actually went wrong. The \n            traceback below, included for completeness (but probably not useful\n            for diagnosing the error), shows the stack leading up to the \n            experiment launch.\n\n            \"\"\"", ")", "+", "'='", "*", "DIV_LINE_WIDTH", "+", "'\\n'", "*", "3", "\n", "print", "(", "err_msg", ")", "\n", "raise", "\n", "\n", "# Tell the user about where results are, and how to check them", "\n", "", "logger_kwargs", "=", "kwargs", "[", "'logger_kwargs'", "]", "\n", "\n", "plot_cmd", "=", "'python -m spinup.run plot '", "+", "logger_kwargs", "[", "'output_dir'", "]", "\n", "plot_cmd", "=", "colorize", "(", "plot_cmd", ",", "'green'", ")", "\n", "\n", "test_cmd", "=", "'python -m spinup.run test_policy '", "+", "logger_kwargs", "[", "'output_dir'", "]", "\n", "test_cmd", "=", "colorize", "(", "test_cmd", ",", "'green'", ")", "\n", "\n", "output_msg", "=", "'\\n'", "*", "5", "+", "'='", "*", "DIV_LINE_WIDTH", "+", "'\\n'", "+", "dedent", "(", "\"\"\"\\\n    End of experiment.\n\n\n    Plot results from this run with:\n\n    %s\n\n\n    Watch the trained agent with:\n\n    %s\n\n\n    \"\"\"", "%", "(", "plot_cmd", ",", "test_cmd", ")", ")", "+", "'='", "*", "DIV_LINE_WIDTH", "+", "'\\n'", "*", "5", "\n", "\n", "print", "(", "output_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.all_bools": [[215, 217], ["all", "isinstance"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["", "def", "all_bools", "(", "vals", ")", ":", "\n", "    ", "return", "all", "(", "[", "isinstance", "(", "v", ",", "bool", ")", "for", "v", "in", "vals", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.valid_str": [[218, 239], ["hasattr", "str().lower", "run_utils.valid_str", "isinstance", "isinstance", "str", "run_utils.valid_str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.valid_str", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.valid_str"], ["", "def", "valid_str", "(", "v", ")", ":", "\n", "    ", "\"\"\" \n    Convert a value or values to a string which could go in a filepath.\n\n    Partly based on `this gist`_.\n\n    .. _`this gist`: https://gist.github.com/seanh/93666\n\n    \"\"\"", "\n", "if", "hasattr", "(", "v", ",", "'__name__'", ")", ":", "\n", "        ", "return", "valid_str", "(", "v", ".", "__name__", ")", "\n", "\n", "", "if", "isinstance", "(", "v", ",", "tuple", ")", "or", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "        ", "return", "'-'", ".", "join", "(", "[", "valid_str", "(", "x", ")", "for", "x", "in", "v", "]", ")", "\n", "\n", "# Valid characters are '-', '_', and alphanumeric. Replace invalid chars", "\n", "# with '-'. ", "\n", "", "str_v", "=", "str", "(", "v", ")", ".", "lower", "(", ")", "\n", "valid_chars", "=", "\"-_%s%s\"", "%", "(", "string", ".", "ascii_letters", ",", "string", ".", "digits", ")", "\n", "str_v", "=", "''", ".", "join", "(", "c", "if", "c", "in", "valid_chars", "else", "'-'", "for", "c", "in", "str_v", ")", "\n", "return", "str_v", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.test_eg": [[550, 559], ["run_utils.ExperimentGrid", "run_utils.ExperimentGrid.add", "run_utils.ExperimentGrid.add", "run_utils.ExperimentGrid.add", "run_utils.ExperimentGrid.add", "run_utils.ExperimentGrid.add", "run_utils.ExperimentGrid.add", "run_utils.ExperimentGrid.variants"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.variants"], ["", "", "", "def", "test_eg", "(", ")", ":", "\n", "    ", "eg", "=", "ExperimentGrid", "(", ")", "\n", "eg", ".", "add", "(", "'test:a'", ",", "[", "1", ",", "2", ",", "3", "]", ",", "'ta'", ",", "True", ")", "\n", "eg", ".", "add", "(", "'test:b'", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "eg", ".", "add", "(", "'some'", ",", "[", "4", ",", "5", "]", ")", "\n", "eg", ".", "add", "(", "'why'", ",", "[", "True", ",", "False", "]", ")", "\n", "eg", ".", "add", "(", "'huh'", ",", "5", ")", "\n", "eg", ".", "add", "(", "'no'", ",", "6", ",", "in_name", "=", "True", ")", "\n", "return", "eg", ".", "variants", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.setup_pytorch_for_mpi": [[8, 18], ["max", "torch.set_num_threads", "torch.get_num_threads", "int", "torch.get_num_threads", "spinup.utils.mpi_tools.num_procs"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.num_procs"], ["def", "setup_pytorch_for_mpi", "(", ")", ":", "\n", "    ", "\"\"\"\n    Avoid slowdowns caused by each separate process's PyTorch using\n    more than its fair share of CPU resources.\n    \"\"\"", "\n", "#print('Proc %d: Reporting original number of Torch threads as %d.'%(proc_id(), torch.get_num_threads()), flush=True)", "\n", "if", "torch", ".", "get_num_threads", "(", ")", "==", "1", ":", "\n", "        ", "return", "\n", "", "fair_num_threads", "=", "max", "(", "int", "(", "torch", ".", "get_num_threads", "(", ")", "/", "num_procs", "(", ")", ")", ",", "1", ")", "\n", "torch", ".", "set_num_threads", "(", "fair_num_threads", ")", "\n", "#print('Proc %d: Reporting new number of Torch threads as %d.'%(proc_id(), torch.get_num_threads()), flush=True)", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.mpi_avg_grads": [[20, 28], ["module.parameters", "spinup.utils.mpi_tools.num_procs", "p.grad.numpy", "spinup.utils.mpi_tools.mpi_avg"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.num_procs", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_avg"], ["", "def", "mpi_avg_grads", "(", "module", ")", ":", "\n", "    ", "\"\"\" Average contents of gradient buffers across MPI processes. \"\"\"", "\n", "if", "num_procs", "(", ")", "==", "1", ":", "\n", "        ", "return", "\n", "", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "p_grad_numpy", "=", "p", ".", "grad", ".", "numpy", "(", ")", "# numpy view of tensor data", "\n", "avg_p_grad", "=", "mpi_avg", "(", "p", ".", "grad", ")", "\n", "p_grad_numpy", "[", ":", "]", "=", "avg_p_grad", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.sync_params": [[29, 36], ["module.parameters", "spinup.utils.mpi_tools.num_procs", "p.data.numpy", "spinup.utils.mpi_tools.broadcast"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.num_procs", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.broadcast"], ["", "", "def", "sync_params", "(", "module", ")", ":", "\n", "    ", "\"\"\" Sync all parameters of module across all MPI processes. \"\"\"", "\n", "if", "num_procs", "(", ")", "==", "1", ":", "\n", "        ", "return", "\n", "", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "p_numpy", "=", "p", ".", "data", ".", "numpy", "(", ")", "\n", "broadcast", "(", "p_numpy", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_fork": [[6, 37], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "sys.exit", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["def", "mpi_fork", "(", "n", ",", "bind_to_core", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Re-launches the current script with workers linked by MPI.\n\n    Also, terminates the original process that launched it.\n\n    Taken almost without modification from the Baselines function of the\n    `same name`_.\n\n    .. _`same name`: https://github.com/openai/baselines/blob/master/baselines/common/mpi_fork.py\n\n    Args:\n        n (int): Number of process to split into.\n\n        bind_to_core (bool): Bind each MPI process to a core.\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "args", "=", "[", "\"mpirun\"", ",", "\"-np\"", ",", "str", "(", "n", ")", "]", "\n", "if", "bind_to_core", ":", "\n", "            ", "args", "+=", "[", "\"-bind-to\"", ",", "\"core\"", "]", "\n", "", "args", "+=", "[", "sys", ".", "executable", "]", "+", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.msg": [[39, 41], ["print", "str", "mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "", "def", "msg", "(", "m", ",", "string", "=", "''", ")", ":", "\n", "    ", "print", "(", "(", "'Message from %d: %s \\t '", "%", "(", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", ",", "string", ")", ")", "+", "str", "(", "m", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id": [[42, 45], ["mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["None"], ["", "def", "proc_id", "(", ")", ":", "\n", "    ", "\"\"\"Get rank of calling process.\"\"\"", "\n", "return", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.allreduce": [[46, 48], ["mpi4py.MPI.COMM_WORLD.Allreduce"], "function", ["None"], ["", "def", "allreduce", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.num_procs": [[49, 52], ["mpi4py.MPI.COMM_WORLD.Get_size"], "function", ["None"], ["", "def", "num_procs", "(", ")", ":", "\n", "    ", "\"\"\"Count active MPI processes.\"\"\"", "\n", "return", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.broadcast": [[53, 55], ["mpi4py.MPI.COMM_WORLD.Bcast"], "function", ["None"], ["", "def", "broadcast", "(", "x", ",", "root", "=", "0", ")", ":", "\n", "    ", "MPI", ".", "COMM_WORLD", ".", "Bcast", "(", "x", ",", "root", "=", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_op": [[56, 62], ["numpy.asarray", "numpy.zeros_like", "mpi_tools.allreduce", "numpy.isscalar", "mpi4py.MPI.SUM"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.allreduce"], ["", "def", "mpi_op", "(", "x", ",", "op", ")", ":", "\n", "    ", "x", ",", "scalar", "=", "(", "[", "x", "]", ",", "True", ")", "if", "np", ".", "isscalar", "(", "x", ")", "else", "(", "x", ",", "False", ")", "\n", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "buff", "=", "np", ".", "zeros_like", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "allreduce", "(", "x", ",", "buff", ",", "op", "=", "op", ")", "\n", "return", "buff", "[", "0", "]", "if", "scalar", "else", "buff", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_sum": [[63, 65], ["mpi_tools.mpi_op"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_op"], ["", "def", "mpi_sum", "(", "x", ")", ":", "\n", "    ", "return", "mpi_op", "(", "x", ",", "MPI", ".", "SUM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_avg": [[66, 69], ["mpi_tools.mpi_sum", "mpi_tools.num_procs"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.num_procs"], ["", "def", "mpi_avg", "(", "x", ")", ":", "\n", "    ", "\"\"\"Average a scalar or vector over MPI processes.\"\"\"", "\n", "return", "mpi_sum", "(", "x", ")", "/", "num_procs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_statistics_scalar": [[70, 93], ["numpy.array", "mpi_tools.mpi_sum", "mpi_tools.mpi_sum", "numpy.sqrt", "numpy.sum", "mpi_tools.mpi_op", "mpi_tools.mpi_op", "numpy.sum", "len", "numpy.min", "numpy.max", "len", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_op", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_op", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "mpi_statistics_scalar", "(", "x", ",", "with_min_and_max", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Get mean/std and optional min/max of scalar x across MPI processes.\n\n    Args:\n        x: An array containing samples of the scalar to produce statistics\n            for.\n\n        with_min_and_max (bool): If true, return min and max of x in \n            addition to mean and std.\n    \"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "global_sum", ",", "global_n", "=", "mpi_sum", "(", "[", "np", ".", "sum", "(", "x", ")", ",", "len", "(", "x", ")", "]", ")", "\n", "mean", "=", "global_sum", "/", "global_n", "\n", "\n", "global_sum_sq", "=", "mpi_sum", "(", "np", ".", "sum", "(", "(", "x", "-", "mean", ")", "**", "2", ")", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "global_sum_sq", "/", "global_n", ")", "# compute global std", "\n", "\n", "if", "with_min_and_max", ":", "\n", "        ", "global_min", "=", "mpi_op", "(", "np", ".", "min", "(", "x", ")", "if", "len", "(", "x", ")", ">", "0", "else", "np", ".", "inf", ",", "op", "=", "MPI", ".", "MIN", ")", "\n", "global_max", "=", "mpi_op", "(", "np", ".", "max", "(", "x", ")", "if", "len", "(", "x", ")", ">", "0", "else", "-", "np", ".", "inf", ",", "op", "=", "MPI", ".", "MAX", ")", "\n", "return", "mean", ",", "std", ",", "global_min", ",", "global_max", "\n", "", "return", "mean", ",", "std", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.Dataset.__init__": [[8, 15], ["dataset.Dataset.shuffle", "next", "iter", "data_map.values"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "data_map", ",", "deterministic", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_map", "=", "data_map", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "enable_shuffle", "=", "shuffle", "\n", "self", ".", "n", "=", "next", "(", "iter", "(", "data_map", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "_next_id", "=", "0", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.Dataset.shuffle": [[16, 26], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "self", ".", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.Dataset.next_batch": [[27, 39], ["min", "dict", "dataset.Dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_next_id", ">=", "self", ".", "n", "and", "self", ".", "enable_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "cur_id", "=", "self", ".", "_next_id", "\n", "cur_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "_next_id", ")", "\n", "self", ".", "_next_id", "+=", "cur_batch_size", "\n", "\n", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "cur_id", ":", "cur_id", "+", "cur_batch_size", "]", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.Dataset.iterate_once": [[40, 46], ["dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.next_batch"], ["", "def", "iterate_once", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "while", "self", ".", "_next_id", "<=", "self", ".", "n", "-", "batch_size", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.Dataset.iterate_times": [[47, 53], ["range", "dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.next_batch"], ["", "def", "iterate_times", "(", "self", ",", "batch_size", ",", "times", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "times", ")", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.Dataset.subset": [[54, 59], ["dict", "dataset.Dataset"], "methods", ["None"], ["", "def", "subset", "(", "self", ",", "num_elements", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", ":", "num_elements", "]", "\n", "", "return", "Dataset", "(", "data_map", ",", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.dataset.iterbatches": [[61, 72], ["tuple", "all", "numpy.arange", "numpy.array_split", "map", "numpy.random.shuffle", "numpy.arange", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["", "", "def", "iterbatches", "(", "arrays", ",", "*", ",", "num_batches", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "include_final_partial_batch", "=", "True", ")", ":", "\n", "    ", "assert", "(", "num_batches", "is", "None", ")", "!=", "(", "batch_size", "is", "None", ")", ",", "'Provide num_batches or batch_size, but not both'", "\n", "arrays", "=", "tuple", "(", "map", "(", "np", ".", "asarray", ",", "arrays", ")", ")", "\n", "n", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "assert", "all", "(", "a", ".", "shape", "[", "0", "]", "==", "n", "for", "a", "in", "arrays", "[", "1", ":", "]", ")", "\n", "inds", "=", "np", ".", "arange", "(", "n", ")", "\n", "if", "shuffle", ":", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "sections", "=", "np", ".", "arange", "(", "0", ",", "n", ",", "batch_size", ")", "[", "1", ":", "]", "if", "num_batches", "is", "None", "else", "num_batches", "\n", "for", "batch_inds", "in", "np", ".", "array_split", "(", "inds", ",", "sections", ")", ":", "\n", "        ", "if", "include_final_partial_batch", "or", "len", "(", "batch_inds", ")", "==", "batch_size", ":", "\n", "            ", "yield", "tuple", "(", "a", "[", "batch_inds", "]", "for", "a", "in", "arrays", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.plot_data": [[15, 60], ["isinstance", "seaborn.set", "seaborn.tsplot", "matplotlib.legend().set_draggable", "matplotlib.tight_layout", "numpy.ones", "pandas.concat", "numpy.max", "matplotlib.ticklabel_format", "numpy.asarray", "numpy.ones", "matplotlib.legend", "numpy.asarray", "len", "numpy.convolve", "numpy.convolve"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["def", "plot_data", "(", "data", ",", "xaxis", "=", "'Epoch'", ",", "value", "=", "\"AverageEpRet\"", ",", "condition", "=", "\"Condition1\"", ",", "smooth", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "smooth", ">", "1", ":", "\n", "        ", "\"\"\"\n        smooth data with moving window average.\n        that is,\n            smoothed_y[t] = average(y[t-k], y[t-k+1], ..., y[t+k-1], y[t+k])\n        where the \"smooth\" param is width of that window (2k+1)\n        \"\"\"", "\n", "y", "=", "np", ".", "ones", "(", "smooth", ")", "\n", "for", "datum", "in", "data", ":", "\n", "            ", "x", "=", "np", ".", "asarray", "(", "datum", "[", "value", "]", ")", "\n", "z", "=", "np", ".", "ones", "(", "len", "(", "x", ")", ")", "\n", "smoothed_x", "=", "np", ".", "convolve", "(", "x", ",", "y", ",", "'same'", ")", "/", "np", ".", "convolve", "(", "z", ",", "y", ",", "'same'", ")", "\n", "datum", "[", "value", "]", "=", "smoothed_x", "\n", "\n", "", "", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "data", "=", "pd", ".", "concat", "(", "data", ",", "ignore_index", "=", "True", ")", "\n", "", "sns", ".", "set", "(", "style", "=", "\"darkgrid\"", ",", "font_scale", "=", "1.5", ")", "\n", "sns", ".", "tsplot", "(", "data", "=", "data", ",", "time", "=", "xaxis", ",", "value", "=", "value", ",", "unit", "=", "\"Unit\"", ",", "condition", "=", "condition", ",", "ci", "=", "'sd'", ",", "**", "kwargs", ")", "\n", "\"\"\"\n    If you upgrade to any version of Seaborn greater than 0.8.1, switch from \n    tsplot to lineplot replacing L29 with:\n\n        sns.lineplot(data=data, x=xaxis, y=value, hue=condition, ci='sd', **kwargs)\n\n    Changes the colorscheme and the default legend style, though.\n    \"\"\"", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", ".", "set_draggable", "(", "True", ")", "\n", "#plt.legend(loc='upper center', ncol=3, handlelength=1,", "\n", "#           borderaxespad=0., prop={'size': 13})", "\n", "\n", "\"\"\"\n    For the version of the legend used in the Spinning Up benchmarking page, \n    swap L38 with:\n\n    plt.legend(loc='upper center', ncol=6, handlelength=1,\n               mode=\"expand\", borderaxespad=0., prop={'size': 13})\n    \"\"\"", "\n", "\n", "xscale", "=", "np", ".", "max", "(", "np", ".", "asarray", "(", "data", "[", "xaxis", "]", ")", ")", ">", "5e3", "\n", "if", "xscale", ":", "\n", "# Just some formatting niceness: x-axis scale in scientific notation if max x is large", "\n", "        ", "plt", ".", "ticklabel_format", "(", "style", "=", "'sci'", ",", "axis", "=", "'x'", ",", "scilimits", "=", "(", "0", ",", "0", ")", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", "pad", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.get_datasets": [[61, 101], ["os.walk", "os.walk", "pd.read_table.insert", "pd.read_table.insert", "pd.read_table.insert", "pd.read_table.insert", "datasets.append", "open", "json.load", "str", "pandas.read_table", "len", "len", "len", "len", "os.path.join", "os.path.join", "print", "os.path.join", "os.path.join", "print", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "get_datasets", "(", "logdir", ",", "condition", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Recursively look through logdir for output files produced by\n    spinup.logx.Logger. \n\n    Assumes that any file \"progress.txt\" is a valid hit. \n    \"\"\"", "\n", "global", "exp_idx", "\n", "global", "units", "\n", "datasets", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "logdir", ")", ":", "\n", "        ", "if", "'progress.txt'", "in", "files", ":", "\n", "            ", "exp_name", "=", "None", "\n", "try", ":", "\n", "                ", "config_path", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'config.json'", ")", ")", "\n", "config", "=", "json", ".", "load", "(", "config_path", ")", "\n", "if", "'exp_name'", "in", "config", ":", "\n", "                    ", "exp_name", "=", "config", "[", "'exp_name'", "]", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "'No file named config.json'", ")", "\n", "", "condition1", "=", "condition", "or", "exp_name", "or", "'exp'", "\n", "condition2", "=", "condition1", "+", "'-'", "+", "str", "(", "exp_idx", ")", "\n", "exp_idx", "+=", "1", "\n", "if", "condition1", "not", "in", "units", ":", "\n", "                ", "units", "[", "condition1", "]", "=", "0", "\n", "", "unit", "=", "units", "[", "condition1", "]", "\n", "units", "[", "condition1", "]", "+=", "1", "\n", "\n", "try", ":", "\n", "                ", "exp_data", "=", "pd", ".", "read_table", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'progress.txt'", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Could not read from %s'", "%", "os", ".", "path", ".", "join", "(", "root", ",", "'progress.txt'", ")", ")", "\n", "continue", "\n", "", "performance", "=", "'AverageTestEpRet'", "if", "'AverageTestEpRet'", "in", "exp_data", "else", "'AverageEpRet'", "\n", "exp_data", ".", "insert", "(", "len", "(", "exp_data", ".", "columns", ")", ",", "'Unit'", ",", "unit", ")", "\n", "exp_data", ".", "insert", "(", "len", "(", "exp_data", ".", "columns", ")", ",", "'Condition1'", ",", "condition1", ")", "\n", "exp_data", ".", "insert", "(", "len", "(", "exp_data", ".", "columns", ")", ",", "'Condition2'", ",", "condition2", ")", "\n", "exp_data", ".", "insert", "(", "len", "(", "exp_data", ".", "columns", ")", ",", "'Performance'", ",", "exp_data", "[", "performance", "]", ")", "\n", "datasets", ".", "append", "(", "exp_data", ")", "\n", "", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.get_all_datasets": [[103, 152], ["print", "print", "print", "zip", "os.isdir", "os.dirname", "os.listdir", "os.listdir", "sorted", "len", "len", "plot.get_datasets", "plot.get_datasets", "os.join", "logdir.split", "all", "all", "fulldir"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.get_datasets", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.get_datasets", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["", "def", "get_all_datasets", "(", "all_logdirs", ",", "legend", "=", "None", ",", "select", "=", "None", ",", "exclude", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    For every entry in all_logdirs,\n        1) check if the entry is a real directory and if it is, \n           pull data from it; \n\n        2) if not, check to see if the entry is a prefix for a \n           real directory, and pull data from that.\n    \"\"\"", "\n", "logdirs", "=", "[", "]", "\n", "for", "logdir", "in", "all_logdirs", ":", "\n", "        ", "if", "osp", ".", "isdir", "(", "logdir", ")", "and", "logdir", "[", "-", "1", "]", "==", "os", ".", "sep", ":", "\n", "            ", "logdirs", "+=", "[", "logdir", "]", "\n", "", "else", ":", "\n", "            ", "basedir", "=", "osp", ".", "dirname", "(", "logdir", ")", "\n", "fulldir", "=", "lambda", "x", ":", "osp", ".", "join", "(", "basedir", ",", "x", ")", "\n", "prefix", "=", "logdir", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "listdir", "=", "os", ".", "listdir", "(", "basedir", ")", "\n", "logdirs", "+=", "sorted", "(", "[", "fulldir", "(", "x", ")", "for", "x", "in", "listdir", "if", "prefix", "in", "x", "]", ")", "\n", "\n", "", "", "\"\"\"\n    Enforce selection rules, which check logdirs for certain substrings.\n    Makes it easier to look at graphs from particular ablations, if you\n    launch many jobs at once with similar names.\n    \"\"\"", "\n", "if", "select", "is", "not", "None", ":", "\n", "        ", "logdirs", "=", "[", "log", "for", "log", "in", "logdirs", "if", "all", "(", "x", "in", "log", "for", "x", "in", "select", ")", "]", "\n", "", "if", "exclude", "is", "not", "None", ":", "\n", "        ", "logdirs", "=", "[", "log", "for", "log", "in", "logdirs", "if", "all", "(", "not", "(", "x", "in", "log", ")", "for", "x", "in", "exclude", ")", "]", "\n", "\n", "# Verify logdirs", "\n", "", "print", "(", "'Plotting from...\\n'", "+", "'='", "*", "DIV_LINE_WIDTH", "+", "'\\n'", ")", "\n", "for", "logdir", "in", "logdirs", ":", "\n", "        ", "print", "(", "logdir", ")", "\n", "", "print", "(", "'\\n'", "+", "'='", "*", "DIV_LINE_WIDTH", ")", "\n", "\n", "# Make sure the legend is compatible with the logdirs", "\n", "assert", "not", "(", "legend", ")", "or", "(", "len", "(", "legend", ")", "==", "len", "(", "logdirs", ")", ")", ",", "\"Must give a legend title for each set of experiments.\"", "\n", "\n", "# Load data from logdirs", "\n", "data", "=", "[", "]", "\n", "if", "legend", ":", "\n", "        ", "for", "log", ",", "leg", "in", "zip", "(", "logdirs", ",", "legend", ")", ":", "\n", "            ", "data", "+=", "get_datasets", "(", "log", ",", "leg", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "log", "in", "logdirs", ":", "\n", "            ", "data", "+=", "get_datasets", "(", "log", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.make_plots": [[154, 164], ["plot.get_all_datasets", "getattr", "matplotlib.show", "isinstance", "matplotlib.figure", "plot.plot_data"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.get_all_datasets", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.plot_data"], ["", "def", "make_plots", "(", "all_logdirs", ",", "legend", "=", "None", ",", "xaxis", "=", "None", ",", "values", "=", "None", ",", "count", "=", "False", ",", "\n", "font_scale", "=", "1.5", ",", "smooth", "=", "1", ",", "select", "=", "None", ",", "exclude", "=", "None", ",", "estimator", "=", "'mean'", ")", ":", "\n", "    ", "data", "=", "get_all_datasets", "(", "all_logdirs", ",", "legend", ",", "select", ",", "exclude", ")", "\n", "values", "=", "values", "if", "isinstance", "(", "values", ",", "list", ")", "else", "[", "values", "]", "\n", "condition", "=", "'Condition2'", "if", "count", "else", "'Condition1'", "\n", "estimator", "=", "getattr", "(", "np", ",", "estimator", ")", "# choose what to show on main curve: mean? max? min?", "\n", "for", "value", "in", "values", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plot_data", "(", "data", ",", "xaxis", "=", "xaxis", ",", "value", "=", "value", ",", "condition", "=", "condition", ",", "smooth", "=", "smooth", ",", "estimator", "=", "estimator", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.main": [[166, 231], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "plot.make_plots"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.plot.make_plots"], ["", "def", "main", "(", ")", ":", "\n", "    ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'logdir'", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--legend'", ",", "'-l'", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--xaxis'", ",", "'-x'", ",", "default", "=", "'TotalEnvInteracts'", ")", "\n", "parser", ".", "add_argument", "(", "'--value'", ",", "'-y'", ",", "default", "=", "'Performance'", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--count'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--smooth'", ",", "'-s'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--select'", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--exclude'", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--est'", ",", "default", "=", "'mean'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\"\"\"\n\n    Args: \n        logdir (strings): As many log directories (or prefixes to log \n            directories, which the plotter will autocomplete internally) as \n            you'd like to plot from.\n\n        legend (strings): Optional way to specify legend for the plot. The \n            plotter legend will automatically use the ``exp_name`` from the\n            config.json file, unless you tell it otherwise through this flag.\n            This only works if you provide a name for each directory that\n            will get plotted. (Note: this may not be the same as the number\n            of logdir args you provide! Recall that the plotter looks for\n            autocompletes of the logdir args: there may be more than one \n            match for a given logdir prefix, and you will need to provide a \n            legend string for each one of those matches---unless you have \n            removed some of them as candidates via selection or exclusion \n            rules (below).)\n\n        xaxis (string): Pick what column from data is used for the x-axis.\n             Defaults to ``TotalEnvInteracts``.\n\n        value (strings): Pick what columns from data to graph on the y-axis. \n            Submitting multiple values will produce multiple graphs. Defaults\n            to ``Performance``, which is not an actual output of any algorithm.\n            Instead, ``Performance`` refers to either ``AverageEpRet``, the \n            correct performance measure for the on-policy algorithms, or\n            ``AverageTestEpRet``, the correct performance measure for the \n            off-policy algorithms. The plotter will automatically figure out \n            which of ``AverageEpRet`` or ``AverageTestEpRet`` to report for \n            each separate logdir.\n\n        count: Optional flag. By default, the plotter shows y-values which\n            are averaged across all results that share an ``exp_name``, \n            which is typically a set of identical experiments that only vary\n            in random seed. But if you'd like to see all of those curves \n            separately, use the ``--count`` flag.\n\n        smooth (int): Smooth data by averaging it over a fixed window. This \n            parameter says how wide the averaging window will be.\n\n        select (strings): Optional selection rule: the plotter will only show\n            curves from logdirs that contain all of these substrings.\n\n        exclude (strings): Optional exclusion rule: plotter will only show \n            curves from logdirs that do not contain these substrings.\n\n    \"\"\"", "\n", "\n", "make_plots", "(", "args", ".", "logdir", ",", "args", ".", "legend", ",", "args", ".", "xaxis", ",", "args", ".", "value", ",", "args", ".", "count", ",", "\n", "smooth", "=", "args", ".", "smooth", ",", "select", "=", "args", ".", "select", ",", "exclude", "=", "args", ".", "exclude", ",", "\n", "estimator", "=", "args", ".", "est", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.__init__": [[52, 87], ["spinup.utils.mpi_tools.proc_id", "os.exists", "os.exists", "open", "atexit.register", "print", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "logx.colorize", "int", "time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["def", "__init__", "(", "self", ",", "output_dir", "=", "None", ",", "output_fname", "=", "'progress.txt'", ",", "exp_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a Logger.\n\n        Args:\n            output_dir (string): A directory for saving results to. If \n                ``None``, defaults to a temp directory of the form\n                ``/tmp/experiments/somerandomnumber``.\n\n            output_fname (string): Name for the tab-separated-value file \n                containing metrics logged throughout a training run. \n                Defaults to ``progress.txt``. \n\n            exp_name (string): Experiment name. If you run multiple training\n                runs and give them all the same ``exp_name``, the plotter\n                will know to group them. (Use case: if you run the same\n                hyperparameter configuration with multiple random seeds, you\n                should give them all the same ``exp_name``.)\n        \"\"\"", "\n", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "output_dir", "=", "output_dir", "or", "\"/tmp/experiments/%i\"", "%", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "if", "osp", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "                ", "print", "(", "\"Warning: Log dir %s already exists! Storing info there anyway.\"", "%", "self", ".", "output_dir", ")", "\n", "", "else", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "", "self", ".", "output_file", "=", "open", "(", "osp", ".", "join", "(", "self", ".", "output_dir", ",", "output_fname", ")", ",", "'w'", ")", "\n", "atexit", ".", "register", "(", "self", ".", "output_file", ".", "close", ")", "\n", "print", "(", "colorize", "(", "\"Logging data to %s\"", "%", "self", ".", "output_file", ".", "name", ",", "'green'", ",", "bold", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_dir", "=", "None", "\n", "self", ".", "output_file", "=", "None", "\n", "", "self", ".", "first_row", "=", "True", "\n", "self", ".", "log_headers", "=", "[", "]", "\n", "self", ".", "log_current_row", "=", "{", "}", "\n", "self", ".", "exp_name", "=", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.log": [[88, 92], ["spinup.utils.mpi_tools.proc_id", "print", "logx.colorize"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize"], ["", "def", "log", "(", "self", ",", "msg", ",", "color", "=", "'green'", ")", ":", "\n", "        ", "\"\"\"Print a colorized message to stdout.\"\"\"", "\n", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "colorize", "(", "msg", ",", "color", ",", "bold", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.log_tabular": [[93, 108], ["logx.Logger.log_headers.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "", "def", "log_tabular", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "\"\"\"\n        Log a value of some diagnostic.\n\n        Call this only once for each diagnostic quantity, each iteration.\n        After using ``log_tabular`` to store values for each diagnostic,\n        make sure to call ``dump_tabular`` to write them out to file and\n        stdout (otherwise they will not get saved anywhere).\n        \"\"\"", "\n", "if", "self", ".", "first_row", ":", "\n", "            ", "self", ".", "log_headers", ".", "append", "(", "key", ")", "\n", "", "else", ":", "\n", "            ", "assert", "key", "in", "self", ".", "log_headers", ",", "\"Trying to introduce a new key %s that you didn't include in the first iteration\"", "%", "key", "\n", "", "assert", "key", "not", "in", "self", ".", "log_current_row", ",", "\"You already set %s this iteration. Maybe you forgot to call dump_tabular()\"", "%", "key", "\n", "self", ".", "log_current_row", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.save_config": [[109, 134], ["spinup.utils.serialization_utils.convert_json", "spinup.utils.mpi_tools.proc_id", "json.dumps", "print", "print", "logx.colorize", "open", "out.write", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize"], ["", "def", "save_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Log an experiment configuration.\n\n        Call this once at the top of your experiment, passing in all important\n        config vars as a dict. This will serialize the config to JSON, while\n        handling anything which can't be serialized in a graceful way (writing\n        as informative a string as possible). \n\n        Example use:\n\n        .. code-block:: python\n\n            logger = EpochLogger(**logger_kwargs)\n            logger.save_config(locals())\n        \"\"\"", "\n", "config_json", "=", "convert_json", "(", "config", ")", "\n", "if", "self", ".", "exp_name", "is", "not", "None", ":", "\n", "            ", "config_json", "[", "'exp_name'", "]", "=", "self", ".", "exp_name", "\n", "", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "output", "=", "json", ".", "dumps", "(", "config_json", ",", "separators", "=", "(", "','", ",", "':\\t'", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "print", "(", "colorize", "(", "'Saving config:\\n'", ",", "color", "=", "'cyan'", ",", "bold", "=", "True", ")", ")", "\n", "print", "(", "output", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "output_dir", ",", "\"config.json\"", ")", ",", "'w'", ")", "as", "out", ":", "\n", "                ", "out", ".", "write", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.save_state": [[135, 164], ["spinup.utils.mpi_tools.proc_id", "hasattr", "joblib.dump", "logx.Logger._pytorch_simple_save", "os.join", "os.join", "logx.Logger.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger._pytorch_simple_save", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "", "", "def", "save_state", "(", "self", ",", "state_dict", ",", "itr", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Saves the state of an experiment.\n\n        To be clear: this is about saving *state*, not logging diagnostics.\n        All diagnostic logging is separate from this function. This function\n        will save whatever is in ``state_dict``---usually just a copy of the\n        environment---and the most recent parameters for the model you \n        previously set up saving for with ``setup_tf_saver``. \n\n        Call with any frequency you prefer. If you only want to maintain a\n        single state and overwrite it at each call with the most recent \n        version, leave ``itr=None``. If you want to keep all of the states you\n        save, provide unique (increasing) values for 'itr'.\n\n        Args:\n            state_dict (dict): Dictionary containing essential elements to\n                describe the current state of training.\n\n            itr: An int, or None. Current iteration of training.\n        \"\"\"", "\n", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "fname", "=", "'vars.pkl'", "if", "itr", "is", "None", "else", "'vars%d.pkl'", "%", "itr", "\n", "try", ":", "\n", "                ", "joblib", ".", "dump", "(", "state_dict", ",", "osp", ".", "join", "(", "self", ".", "output_dir", ",", "fname", ")", ")", "\n", "", "except", ":", "\n", "                ", "self", ".", "log", "(", "'Warning: could not pickle state_dict.'", ",", "color", "=", "'red'", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'pytorch_saver_elements'", ")", ":", "\n", "                ", "self", ".", "_pytorch_simple_save", "(", "itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.setup_pytorch_saver": [[165, 180], ["None"], "methods", ["None"], ["", "", "", "def", "setup_pytorch_saver", "(", "self", ",", "what_to_save", ")", ":", "\n", "        ", "\"\"\"\n        Set up easy model saving for a single PyTorch model.\n\n        Because PyTorch saving and loading is especially painless, this is\n        very minimal; we just need references to whatever we would like to \n        pickle. This is integrated into the logger because the logger\n        knows where the user would like to save information about this\n        training run.\n\n        Args:\n            what_to_save: Any PyTorch model or serializable object containing\n                PyTorch models.\n        \"\"\"", "\n", "self", ".", "pytorch_saver_elements", "=", "what_to_save", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger._pytorch_simple_save": [[181, 204], ["spinup.utils.mpi_tools.proc_id", "hasattr", "os.join", "os.join", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "warnings.catch_warnings", "warnings.simplefilter", "torch.save"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save"], ["", "def", "_pytorch_simple_save", "(", "self", ",", "itr", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Saves the PyTorch model (or models).\n        \"\"\"", "\n", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "'pytorch_saver_elements'", ")", ",", "\"First have to setup saving with self.setup_pytorch_saver\"", "\n", "fpath", "=", "'pyt_save'", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "output_dir", ",", "fpath", ")", "\n", "fname", "=", "'model'", "+", "(", "'%d'", "%", "itr", "if", "itr", "is", "not", "None", "else", "''", ")", "+", "'.pt'", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "# We are using a non-recommended way of saving PyTorch models,", "\n", "# by pickling whole objects (which are dependent on the exact", "\n", "# directory structure at the time of saving) as opposed to", "\n", "# just saving network weights. This works sufficiently well", "\n", "# for the purposes of Spinning Up, but you may want to do ", "\n", "# something different for your personal PyTorch project.", "\n", "# We use a catch_warnings() context to avoid the warnings about", "\n", "# not being able to save the source code.", "\n", "torch", ".", "save", "(", "self", ".", "pytorch_saver_elements", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.dump_tabular": [[206, 233], ["logx.Logger.log_current_row.clear", "spinup.utils.mpi_tools.proc_id", "max", "print", "print", "len", "max", "logx.Logger.log_current_row.get", "print", "vals.append", "logx.Logger.output_file.write", "logx.Logger.output_file.flush", "hasattr", "logx.Logger.output_file.write", "map"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush"], ["", "", "", "def", "dump_tabular", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Write all of the diagnostics from the current iteration.\n\n        Writes both to stdout, and to the output file.\n        \"\"\"", "\n", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "vals", "=", "[", "]", "\n", "key_lens", "=", "[", "len", "(", "key", ")", "for", "key", "in", "self", ".", "log_headers", "]", "\n", "max_key_len", "=", "max", "(", "15", ",", "max", "(", "key_lens", ")", ")", "\n", "keystr", "=", "'%'", "+", "'%d'", "%", "max_key_len", "\n", "fmt", "=", "\"| \"", "+", "keystr", "+", "\"s | %15s |\"", "\n", "n_slashes", "=", "22", "+", "max_key_len", "\n", "print", "(", "\"-\"", "*", "n_slashes", ")", "\n", "for", "key", "in", "self", ".", "log_headers", ":", "\n", "                ", "val", "=", "self", ".", "log_current_row", ".", "get", "(", "key", ",", "\"\"", ")", "\n", "valstr", "=", "\"%8.3g\"", "%", "val", "if", "hasattr", "(", "val", ",", "\"__float__\"", ")", "else", "val", "\n", "print", "(", "fmt", "%", "(", "key", ",", "valstr", ")", ")", "\n", "vals", ".", "append", "(", "val", ")", "\n", "", "print", "(", "\"-\"", "*", "n_slashes", ",", "flush", "=", "True", ")", "\n", "if", "self", ".", "output_file", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "first_row", ":", "\n", "                    ", "self", ".", "output_file", ".", "write", "(", "\"\\t\"", ".", "join", "(", "self", ".", "log_headers", ")", "+", "\"\\n\"", ")", "\n", "", "self", ".", "output_file", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "vals", ")", ")", "+", "\"\\n\"", ")", "\n", "self", ".", "output_file", ".", "flush", "(", ")", "\n", "", "", "self", ".", "log_current_row", ".", "clear", "(", ")", "\n", "self", ".", "first_row", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.__init__": [[259, 262], ["logx.Logger.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "epoch_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.store": [[264, 275], ["kwargs.items", "logx.EpochLogger.epoch_dict[].append", "logx.EpochLogger.epoch_dict.keys"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "store", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Save something into the epoch_logger's current state.\n\n        Provide an arbitrary number of keyword arguments with numerical \n        values.\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "(", "k", "in", "self", ".", "epoch_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "self", ".", "epoch_dict", "[", "k", "]", "=", "[", "]", "\n", "", "self", ".", "epoch_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular": [[276, 309], ["logx.Logger.log_tabular", "spinup.utils.mpi_tools.mpi_statistics_scalar", "logx.Logger.log_tabular", "numpy.concatenate", "logx.Logger.log_tabular", "logx.Logger.log_tabular", "logx.Logger.log_tabular", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_statistics_scalar", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular"], ["", "", "def", "log_tabular", "(", "self", ",", "key", ",", "val", "=", "None", ",", "with_min_and_max", "=", "False", ",", "average_only", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Log a value or possibly the mean/std/min/max values of a diagnostic.\n\n        Args:\n            key (string): The name of the diagnostic. If you are logging a\n                diagnostic whose state has previously been saved with \n                ``store``, the key here has to match the key you used there.\n\n            val: A value for the diagnostic. If you have previously saved\n                values for this key via ``store``, do *not* provide a ``val``\n                here.\n\n            with_min_and_max (bool): If true, log min and max values of the \n                diagnostic over the epoch.\n\n            average_only (bool): If true, do not log the standard deviation\n                of the diagnostic over the epoch.\n        \"\"\"", "\n", "\n", "if", "val", "is", "not", "None", ":", "\n", "            ", "super", "(", ")", ".", "log_tabular", "(", "key", ",", "val", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "self", ".", "epoch_dict", "[", "key", "]", "\n", "vals", "=", "np", ".", "concatenate", "(", "v", ")", "if", "isinstance", "(", "v", "[", "0", "]", ",", "np", ".", "ndarray", ")", "and", "len", "(", "v", "[", "0", "]", ".", "shape", ")", ">", "0", "else", "v", "\n", "stats", "=", "mpi_statistics_scalar", "(", "vals", ",", "with_min_and_max", "=", "with_min_and_max", ")", "\n", "super", "(", ")", ".", "log_tabular", "(", "key", "if", "average_only", "else", "'Average'", "+", "key", ",", "stats", "[", "0", "]", ")", "\n", "if", "not", "(", "average_only", ")", ":", "\n", "                ", "super", "(", ")", ".", "log_tabular", "(", "'Std'", "+", "key", ",", "stats", "[", "1", "]", ")", "\n", "", "if", "with_min_and_max", ":", "\n", "                ", "super", "(", ")", ".", "log_tabular", "(", "'Max'", "+", "key", ",", "stats", "[", "3", "]", ")", "\n", "super", "(", ")", ".", "log_tabular", "(", "'Min'", "+", "key", ",", "stats", "[", "2", "]", ")", "\n", "", "", "self", ".", "epoch_dict", "[", "key", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.get_stats": [[310, 317], ["spinup.utils.mpi_tools.mpi_statistics_scalar", "numpy.concatenate", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_statistics_scalar", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "get_stats", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        Lets an algorithm ask the logger for mean/std/min/max of a diagnostic.\n        \"\"\"", "\n", "v", "=", "self", ".", "epoch_dict", "[", "key", "]", "\n", "vals", "=", "np", ".", "concatenate", "(", "v", ")", "if", "isinstance", "(", "v", "[", "0", "]", ",", "np", ".", "ndarray", ")", "and", "len", "(", "v", "[", "0", "]", ".", "shape", ")", ">", "0", "else", "v", "\n", "return", "mpi_statistics_scalar", "(", "vals", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.colorize": [[30, 42], ["attr.append", "str", "attr.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Colorize a string.\n\n    This function was originally written by John Schulman.\n    \"\"\"", "\n", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "'1'", ")", "\n", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.test_policy.load_policy_and_env": [[11, 65], ["any", "isinstance", "test_policy.load_tf_policy", "test_policy.load_pytorch_policy", "joblib.load", "os.join", "os.listdir", "os.listdir", "int", "os.join", "len", "max", "os.listdir", "os.listdir", "int", "os.listdir", "os.listdir", "len", "x.split", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.test_policy.load_tf_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.test_policy.load_pytorch_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["def", "load_policy_and_env", "(", "fpath", ",", "itr", "=", "'last'", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load a policy from save, whether it's TF or PyTorch, along with RL env.\n\n    Not exceptionally future-proof, but it will suffice for basic uses of the \n    Spinning Up implementations.\n\n    Checks to see if there's a tf1_save folder. If yes, assumes the model\n    is tensorflow and loads it that way. Otherwise, loads as if there's a \n    PyTorch save.\n    \"\"\"", "\n", "\n", "# determine if tf save or pytorch save", "\n", "if", "any", "(", "[", "'tf1_save'", "in", "x", "for", "x", "in", "os", ".", "listdir", "(", "fpath", ")", "]", ")", ":", "\n", "        ", "backend", "=", "'tf1'", "\n", "", "else", ":", "\n", "        ", "backend", "=", "'pytorch'", "\n", "\n", "# handle which epoch to load from", "\n", "", "if", "itr", "==", "'last'", ":", "\n", "# check filenames for epoch (AKA iteration) numbers, find maximum value", "\n", "\n", "        ", "if", "backend", "==", "'tf1'", ":", "\n", "            ", "saves", "=", "[", "int", "(", "x", "[", "8", ":", "]", ")", "for", "x", "in", "os", ".", "listdir", "(", "fpath", ")", "if", "'tf1_save'", "in", "x", "and", "len", "(", "x", ")", ">", "8", "]", "\n", "\n", "", "elif", "backend", "==", "'pytorch'", ":", "\n", "            ", "pytsave_path", "=", "osp", ".", "join", "(", "fpath", ",", "'pyt_save'", ")", "\n", "# Each file in this folder has naming convention 'modelXX.pt', where", "\n", "# 'XX' is either an integer or empty string. Empty string case", "\n", "# corresponds to len(x)==8, hence that case is excluded.", "\n", "saves", "=", "[", "int", "(", "x", ".", "split", "(", "'.'", ")", "[", "0", "]", "[", "5", ":", "]", ")", "for", "x", "in", "os", ".", "listdir", "(", "pytsave_path", ")", "if", "len", "(", "x", ")", ">", "8", "and", "'model'", "in", "x", "]", "\n", "\n", "", "itr", "=", "'%d'", "%", "max", "(", "saves", ")", "if", "len", "(", "saves", ")", ">", "0", "else", "''", "\n", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "itr", ",", "int", ")", ",", "\"Bad value provided for itr (needs to be int or 'last').\"", "\n", "itr", "=", "'%d'", "%", "itr", "\n", "\n", "# load the get_action function", "\n", "", "if", "backend", "==", "'tf1'", ":", "\n", "        ", "get_action", "=", "load_tf_policy", "(", "fpath", ",", "itr", ",", "deterministic", ")", "\n", "", "else", ":", "\n", "        ", "get_action", "=", "load_pytorch_policy", "(", "fpath", ",", "itr", ",", "deterministic", ")", "\n", "\n", "# try to load environment from save", "\n", "# (sometimes this will fail because the environment could not be pickled)", "\n", "", "try", ":", "\n", "        ", "state", "=", "joblib", ".", "load", "(", "osp", ".", "join", "(", "fpath", ",", "'vars'", "+", "itr", "+", "'.pkl'", ")", ")", "\n", "env", "=", "state", "[", "'env'", "]", "\n", "", "except", ":", "\n", "        ", "env", "=", "None", "\n", "\n", "", "return", "env", ",", "get_action", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.test_policy.load_tf_policy": [[67, 90], ["os.join", "print", "tensorflow.Session", "spinup.utils.logx.restore_tf_graph", "print", "print", "spinup.utils.logx.restore_tf_graph.keys", "tf.Session.run"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run"], ["", "def", "load_tf_policy", "(", "fpath", ",", "itr", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load a tensorflow policy saved with Spinning Up Logger.\"\"\"", "\n", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'tf1_save'", "+", "itr", ")", "\n", "print", "(", "'\\n\\nLoading from %s.\\n\\n'", "%", "fname", ")", "\n", "\n", "# load the things!", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "model", "=", "restore_tf_graph", "(", "sess", ",", "fname", ")", "\n", "\n", "# get the correct op for executing actions", "\n", "if", "deterministic", "and", "'mu'", "in", "model", ".", "keys", "(", ")", ":", "\n", "# 'deterministic' is only a valid option for SAC policies", "\n", "        ", "print", "(", "'Using deterministic action op.'", ")", "\n", "action_op", "=", "model", "[", "'mu'", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Using default action op.'", ")", "\n", "action_op", "=", "model", "[", "'pi'", "]", "\n", "\n", "# make function for producing an action given a single state", "\n", "", "get_action", "=", "lambda", "x", ":", "sess", ".", "run", "(", "action_op", ",", "feed_dict", "=", "{", "model", "[", "'x'", "]", ":", "x", "[", "None", ",", ":", "]", "}", ")", "[", "0", "]", "\n", "\n", "return", "get_action", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.test_policy.load_pytorch_policy": [[92, 108], ["os.join", "print", "torch.load", "torch.no_grad", "torch.as_tensor", "torch.load.act"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["", "def", "load_pytorch_policy", "(", "fpath", ",", "itr", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load a pytorch policy saved with Spinning Up Logger.\"\"\"", "\n", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'pyt_save'", ",", "'model'", "+", "itr", "+", "'.pt'", ")", "\n", "print", "(", "'\\n\\nLoading from %s.\\n\\n'", "%", "fname", ")", "\n", "\n", "model", "=", "torch", ".", "load", "(", "fname", ")", "\n", "\n", "# make function for producing an action given a single state", "\n", "def", "get_action", "(", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "torch", ".", "as_tensor", "(", "x", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "action", "=", "model", ".", "act", "(", "x", ")", "\n", "", "return", "action", "\n", "\n", "", "return", "get_action", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.test_policy.run_policy": [[110, 138], ["spinup.EpochLogger", "spinup.EpochLogger.log_tabular", "spinup.EpochLogger.log_tabular", "spinup.EpochLogger.dump_tabular", "env.reset", "test_policy.load_pytorch_policy.get_action", "env.step", "env.render", "time.sleep", "spinup.EpochLogger.store", "print", "env.reset"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.dump_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.get_action", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "run_policy", "(", "env", ",", "get_action", ",", "max_ep_len", "=", "None", ",", "num_episodes", "=", "100", ",", "render", "=", "True", ")", ":", "\n", "\n", "    ", "assert", "env", "is", "not", "None", ",", "\"Environment not found!\\n\\n It looks like the environment wasn't saved, \"", "+", "\"and we can't run the agent in it. :( \\n\\n Check out the readthedocs \"", "+", "\"page on Experiment Outputs for how to handle this situation.\"", "\n", "\n", "logger", "=", "EpochLogger", "(", ")", "\n", "o", ",", "r", ",", "d", ",", "ep_ret", ",", "ep_len", ",", "n", "=", "env", ".", "reset", "(", ")", ",", "0", ",", "False", ",", "0", ",", "0", ",", "0", "\n", "while", "n", "<", "num_episodes", ":", "\n", "        ", "if", "render", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "time", ".", "sleep", "(", "1e-3", ")", "\n", "\n", "", "a", "=", "get_action", "(", "o", ")", "\n", "o", ",", "r", ",", "d", ",", "_", "=", "env", ".", "step", "(", "a", ")", "\n", "ep_ret", "+=", "r", "\n", "ep_len", "+=", "1", "\n", "\n", "if", "d", "or", "(", "ep_len", "==", "max_ep_len", ")", ":", "\n", "            ", "logger", ".", "store", "(", "EpRet", "=", "ep_ret", ",", "EpLen", "=", "ep_len", ")", "\n", "print", "(", "'Episode %d \\t EpRet %.3f \\t EpLen %d'", "%", "(", "n", ",", "ep_ret", ",", "ep_len", ")", ")", "\n", "o", ",", "r", ",", "d", ",", "ep_ret", ",", "ep_len", "=", "env", ".", "reset", "(", ")", ",", "0", ",", "False", ",", "0", ",", "0", "\n", "n", "+=", "1", "\n", "\n", "", "", "logger", ".", "log_tabular", "(", "'EpRet'", ",", "with_min_and_max", "=", "True", ")", "\n", "logger", ".", "log_tabular", "(", "'EpLen'", ",", "average_only", "=", "True", ")", "\n", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json": [[3, 27], ["serialization_utils.is_json_serializable", "isinstance", "str", "isinstance", "serialization_utils.convert_json", "serialization_utils.convert_json", "isinstance", "obj.items", "serialization_utils.convert_json", "serialization_utils.convert_json", "hasattr", "serialization_utils.convert_json", "hasattr", "serialization_utils.convert_json", "serialization_utils.convert_json", "str", "obj.__dict__.items"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.is_json_serializable", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.convert_json"], ["def", "convert_json", "(", "obj", ")", ":", "\n", "    ", "\"\"\" Convert obj to a version which can be serialized with JSON. \"\"\"", "\n", "if", "is_json_serializable", "(", "obj", ")", ":", "\n", "        ", "return", "obj", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "{", "convert_json", "(", "k", ")", ":", "convert_json", "(", "v", ")", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", "}", "\n", "\n", "", "elif", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "            ", "return", "(", "convert_json", "(", "x", ")", "for", "x", "in", "obj", ")", "\n", "\n", "", "elif", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "[", "convert_json", "(", "x", ")", "for", "x", "in", "obj", "]", "\n", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__name__'", ")", "and", "not", "(", "'lambda'", "in", "obj", ".", "__name__", ")", ":", "\n", "            ", "return", "convert_json", "(", "obj", ".", "__name__", ")", "\n", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__dict__'", ")", "and", "obj", ".", "__dict__", ":", "\n", "            ", "obj_dict", "=", "{", "convert_json", "(", "k", ")", ":", "convert_json", "(", "v", ")", "\n", "for", "k", ",", "v", "in", "obj", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "return", "{", "str", "(", "obj", ")", ":", "obj_dict", "}", "\n", "\n", "", "return", "str", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.serialization_utils.is_json_serializable": [[28, 34], ["json.dumps"], "function", ["None"], ["", "", "def", "is_json_serializable", "(", "v", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "json", ".", "dumps", "(", "v", ")", "\n", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise.ReraisedException.__init__": [[27, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "old_exc", ",", "prefix", ",", "suffix", ")", ":", "\n", "        ", "self", ".", "old_exc", "=", "old_exc", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "suffix", "=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise.ReraisedException.__str__": [[32, 42], ["reraise.full_class_name", "klass.__str__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise.full_class_name", "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.error.APIError.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "klass", "=", "self", ".", "old_exc", ".", "__class__", "\n", "\n", "orig", "=", "\"%s: %s\"", "%", "(", "full_class_name", "(", "self", ".", "old_exc", ")", ",", "klass", ".", "__str__", "(", "self", ".", "old_exc", ")", ")", "\n", "prefixpart", "=", "suffixpart", "=", "''", "\n", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "            ", "prefixpart", "=", "self", ".", "prefix", "+", "\"\\n\"", "\n", "", "if", "self", ".", "suffix", "is", "not", "None", ":", "\n", "            ", "suffixpart", "=", "\"\\n\\n\"", "+", "self", ".", "suffix", "\n", "", "return", "\"%sThe original exception was:\\n\\n%s%s\"", "%", "(", "prefixpart", ",", "orig", ",", "suffixpart", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise.reraise": [[10, 18], ["sys.exc_info", "reraise.ReraisedException", "reraise_impl", "old_exc_type"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise_impl_py3.reraise_impl"], ["", "def", "reraise", "(", "prefix", "=", "None", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "old_exc_type", ",", "old_exc_value", ",", "traceback", "=", "sys", ".", "exc_info", "(", ")", "\n", "if", "old_exc_value", "is", "None", ":", "\n", "        ", "old_exc_value", "=", "old_exc_type", "(", ")", "\n", "\n", "", "e", "=", "ReraisedException", "(", "old_exc_value", ",", "prefix", ",", "suffix", ")", "\n", "\n", "reraise_impl", "(", "e", ",", "traceback", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise.full_class_name": [[20, 25], ["None"], "function", ["None"], ["", "def", "full_class_name", "(", "o", ")", ":", "\n", "    ", "module", "=", "o", ".", "__class__", ".", "__module__", "\n", "if", "module", "is", "None", "or", "module", "==", "str", ".", "__class__", ".", "__module__", ":", "\n", "        ", "return", "o", ".", "__class__", ".", "__name__", "\n", "", "return", "module", "+", "'.'", "+", "o", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.reraise_impl_py3.reraise_impl": [[3, 5], ["e.with_traceback"], "function", ["None"], ["def", "reraise_impl", "(", "e", ",", "traceback", ")", ":", "\n", "    ", "raise", "e", ".", "with_traceback", "(", "traceback", ")", "from", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.atomic_write.atomic_write": [[32, 56], ["os.path.isfile", "replace", "open", "os.remove", "file.flush", "os.fsync", "file.fileno"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush"], ["", "@", "contextmanager", "\n", "def", "atomic_write", "(", "filepath", ",", "binary", "=", "False", ",", "fsync", "=", "False", ")", ":", "\n", "    ", "\"\"\" Writeable file object that atomically updates a file (using a temporary file). In some cases (namely Python < 3.3 on Windows), this could result in an existing file being temporarily unlinked.\n\n    :param filepath: the file path to be opened\n    :param binary: whether to open the file in a binary mode instead of textual\n    :param fsync: whether to force write the file to disk\n    \"\"\"", "\n", "\n", "tmppath", "=", "filepath", "+", "'~'", "\n", "while", "os", ".", "path", ".", "isfile", "(", "tmppath", ")", ":", "\n", "        ", "tmppath", "+=", "'~'", "\n", "", "try", ":", "\n", "        ", "with", "open", "(", "tmppath", ",", "'wb'", "if", "binary", "else", "'w'", ")", "as", "file", ":", "\n", "            ", "yield", "file", "\n", "if", "fsync", ":", "\n", "                ", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "file", ".", "fileno", "(", ")", ")", "\n", "", "", "replace", "(", "tmppath", ",", "filepath", ")", "\n", "", "finally", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "remove", "(", "tmppath", ")", "\n", "", "except", "(", "IOError", ",", "OSError", ")", ":", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.colorize.colorize": [[18, 36], ["attr.append", "six.u().join", "six.u", "attr.append", "six.u", "str", "six.u", "six.u"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return string surrounded by appropriate terminal color codes to\n    print colorized text.  Valid colors: gray, red, green, yellow,\n    blue, magenta, cyan, white, crimson\n    \"\"\"", "\n", "\n", "# Import six here so that `utils` has no import-time dependencies.", "\n", "# We want this since we use `utils` during our import-time sanity checks", "\n", "# that verify that our dependencies (including six) are actually present.", "\n", "import", "six", "\n", "\n", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "six", ".", "u", "(", "str", "(", "num", ")", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "six", ".", "u", "(", "'1'", ")", ")", "\n", "attrs", "=", "six", ".", "u", "(", "';'", ")", ".", "join", "(", "attr", ")", "\n", "return", "six", ".", "u", "(", "'\\x1b[%sm%s\\x1b[0m'", ")", "%", "(", "attrs", ",", "string", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.ezpickle.EzPickle.__init__": [[20, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_ezpickle_args", "=", "args", "\n", "self", ".", "_ezpickle_kwargs", "=", "kwargs", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.ezpickle.EzPickle.__getstate__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"_ezpickle_args\"", ":", "self", ".", "_ezpickle_args", ",", "\"_ezpickle_kwargs\"", ":", "self", ".", "_ezpickle_kwargs", "}", "\n", "", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.ezpickle.EzPickle.__setstate__": [[25, 28], ["ezpickle.EzPickle.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"_ezpickle_args\"", "]", ",", "**", "d", "[", "\"_ezpickle_kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.json_utils.json_encode_np": [[3, 19], ["isinstance", "list", "isinstance", "float", "isinstance", "float", "isinstance", "int", "isinstance", "int"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["def", "json_encode_np", "(", "obj", ")", ":", "\n", "    ", "\"\"\"\n    JSON can't serialize numpy types, so convert to pure python\n    \"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "list", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", ":", "\n", "        ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", ":", "\n", "        ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", ":", "\n", "        ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ":", "\n", "        ", "return", "int", "(", "obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random": [[11, 20], ["seeding.create_seed", "numpy.random.RandomState", "np.random.RandomState.seed", "gym.error.Error", "seeding._int_list_from_bigint", "seeding.hash_seed", "isinstance"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.create_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding._int_list_from_bigint", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.hash_seed"], ["def", "np_random", "(", "seed", "=", "None", ")", ":", "\n", "    ", "if", "seed", "is", "not", "None", "and", "not", "(", "isinstance", "(", "seed", ",", "integer_types", ")", "and", "0", "<=", "seed", ")", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Seed must be a non-negative integer or omitted, not {}'", ".", "format", "(", "seed", ")", ")", "\n", "\n", "", "seed", "=", "create_seed", "(", "seed", ")", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "rng", ".", "seed", "(", "_int_list_from_bigint", "(", "hash_seed", "(", "seed", ")", ")", ")", "\n", "return", "rng", ",", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.hash_seed": [[21, 44], ["hashlib.sha512().digest", "seeding._bigint_from_bytes", "seeding.create_seed", "hashlib.sha512", "str().encode", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding._bigint_from_bytes", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.create_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode"], ["", "def", "hash_seed", "(", "seed", "=", "None", ",", "max_bytes", "=", "8", ")", ":", "\n", "    ", "\"\"\"Any given evaluation is likely to have many PRNG's active at\n    once. (Most commonly, because the environment is running in\n    multiple processes.) There's literature indicating that having\n    linear correlations between seeds of multiple PRNG's can correlate\n    the outputs:\n\n    http://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/\n    http://stackoverflow.com/questions/1554958/how-different-do-random-seeds-need-to-be\n    http://dl.acm.org/citation.cfm?id=1276928\n\n    Thus, for sanity we hash the seeds before using them. (This scheme\n    is likely not crypto-strength, but it should be good enough to get\n    rid of simple correlations.)\n\n    Args:\n        seed (Optional[int]): None seeds from an operating system specific randomness source.\n        max_bytes: Maximum number of bytes to use in the hashed seed.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "create_seed", "(", "max_bytes", "=", "max_bytes", ")", "\n", "", "hash", "=", "hashlib", ".", "sha512", "(", "str", "(", "seed", ")", ".", "encode", "(", "'utf8'", ")", ")", ".", "digest", "(", ")", "\n", "return", "_bigint_from_bytes", "(", "hash", "[", ":", "max_bytes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.create_seed": [[45, 67], ["seeding._bigint_from_bytes", "isinstance", "os.urandom", "_bigint_from_bytes.encode", "hashlib.sha512().digest", "seeding._bigint_from_bytes", "isinstance", "gym.error.Error", "hashlib.sha512", "type"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding._bigint_from_bytes", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding._bigint_from_bytes", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "create_seed", "(", "a", "=", "None", ",", "max_bytes", "=", "8", ")", ":", "\n", "    ", "\"\"\"Create a strong random seed. Otherwise, Python 2 would seed using\n    the system time, which might be non-robust especially in the\n    presence of concurrency.\n\n    Args:\n        a (Optional[int, str]): None seeds from an operating system specific randomness source.\n        max_bytes: Maximum number of bytes to use in the seed.\n    \"\"\"", "\n", "# Adapted from https://svn.python.org/projects/python/tags/r32/Lib/random.py", "\n", "if", "a", "is", "None", ":", "\n", "        ", "a", "=", "_bigint_from_bytes", "(", "os", ".", "urandom", "(", "max_bytes", ")", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "str", ")", ":", "\n", "        ", "a", "=", "a", ".", "encode", "(", "'utf8'", ")", "\n", "a", "+=", "hashlib", ".", "sha512", "(", "a", ")", ".", "digest", "(", ")", "\n", "a", "=", "_bigint_from_bytes", "(", "a", "[", ":", "max_bytes", "]", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "integer_types", ")", ":", "\n", "        ", "a", "=", "a", "%", "2", "**", "(", "8", "*", "max_bytes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Invalid type for seed: {} ({})'", ".", "format", "(", "type", "(", "a", ")", ",", "a", ")", ")", "\n", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding._bigint_from_bytes": [[69, 79], ["int", "struct.unpack", "enumerate", "len", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.unpack"], ["", "def", "_bigint_from_bytes", "(", "bytes", ")", ":", "\n", "    ", "sizeof_int", "=", "4", "\n", "padding", "=", "sizeof_int", "-", "len", "(", "bytes", ")", "%", "sizeof_int", "\n", "bytes", "+=", "b'\\0'", "*", "padding", "\n", "int_count", "=", "int", "(", "len", "(", "bytes", ")", "/", "sizeof_int", ")", "\n", "unpacked", "=", "struct", ".", "unpack", "(", "\"{}I\"", ".", "format", "(", "int_count", ")", ",", "bytes", ")", "\n", "accum", "=", "0", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "unpacked", ")", ":", "\n", "        ", "accum", "+=", "2", "**", "(", "sizeof_int", "*", "8", "*", "i", ")", "*", "val", "\n", "", "return", "accum", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding._int_list_from_bigint": [[80, 92], ["gym.error.Error", "divmod", "ints.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_int_list_from_bigint", "(", "bigint", ")", ":", "\n", "# Special case 0", "\n", "    ", "if", "bigint", "<", "0", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Seed must be non-negative, not {}'", ".", "format", "(", "bigint", ")", ")", "\n", "", "elif", "bigint", "==", "0", ":", "\n", "        ", "return", "[", "0", "]", "\n", "\n", "", "ints", "=", "[", "]", "\n", "while", "bigint", ">", "0", ":", "\n", "        ", "bigint", ",", "mod", "=", "divmod", "(", "bigint", ",", "2", "**", "32", ")", "\n", "ints", ".", "append", "(", "mod", ")", "\n", "", "return", "ints", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.__init__": [[153, 167], ["len", "plt.subplots", "zip", "axis.set_title", "collections.deque", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "callback", ",", "horizon_timesteps", ",", "plot_names", ")", ":", "\n", "        ", "self", ".", "data_callback", "=", "callback", "\n", "self", ".", "horizon_timesteps", "=", "horizon_timesteps", "\n", "self", ".", "plot_names", "=", "plot_names", "\n", "\n", "num_plots", "=", "len", "(", "self", ".", "plot_names", ")", "\n", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "num_plots", ")", "\n", "if", "num_plots", "==", "1", ":", "\n", "            ", "self", ".", "ax", "=", "[", "self", ".", "ax", "]", "\n", "", "for", "axis", ",", "name", "in", "zip", "(", "self", ".", "ax", ",", "plot_names", ")", ":", "\n", "            ", "axis", ".", "set_title", "(", "name", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "self", ".", "cur_plot", "=", "[", "None", "for", "_", "in", "range", "(", "num_plots", ")", "]", "\n", "self", ".", "data", "=", "[", "deque", "(", "maxlen", "=", "horizon_timesteps", ")", "for", "_", "in", "range", "(", "num_plots", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.callback": [[168, 182], ["play.PlayPlot.data_callback", "zip", "enumerate", "plt.pause", "data_series.append", "max", "play.PlayPlot.ax[].scatter", "play.PlayPlot.ax[].set_xlim", "plot.remove", "range", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["", "def", "callback", "(", "self", ",", "obs_t", ",", "obs_tp1", ",", "action", ",", "rew", ",", "done", ",", "info", ")", ":", "\n", "        ", "points", "=", "self", ".", "data_callback", "(", "obs_t", ",", "obs_tp1", ",", "action", ",", "rew", ",", "done", ",", "info", ")", "\n", "for", "point", ",", "data_series", "in", "zip", "(", "points", ",", "self", ".", "data", ")", ":", "\n", "            ", "data_series", ".", "append", "(", "point", ")", "\n", "", "self", ".", "t", "+=", "1", "\n", "\n", "xmin", ",", "xmax", "=", "max", "(", "0", ",", "self", ".", "t", "-", "self", ".", "horizon_timesteps", ")", ",", "self", ".", "t", "\n", "\n", "for", "i", ",", "plot", "in", "enumerate", "(", "self", ".", "cur_plot", ")", ":", "\n", "            ", "if", "plot", "is", "not", "None", ":", "\n", "                ", "plot", ".", "remove", "(", ")", "\n", "", "self", ".", "cur_plot", "[", "i", "]", "=", "self", ".", "ax", "[", "i", "]", ".", "scatter", "(", "range", "(", "xmin", ",", "xmax", ")", ",", "list", "(", "self", ".", "data", "[", "i", "]", ")", ")", "\n", "self", ".", "ax", "[", "i", "]", ".", "set_xlim", "(", "xmin", ",", "xmax", ")", "\n", "", "plt", ".", "pause", "(", "0.000001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.display_arr": [[19, 25], ["pygame.surfarray.make_surface", "pygame.transform.scale", "screen.blit", "arr.min", "arr.max", "arr.swapaxes"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["def", "display_arr", "(", "screen", ",", "arr", ",", "video_size", ",", "transpose", ")", ":", "\n", "    ", "arr_min", ",", "arr_max", "=", "arr", ".", "min", "(", ")", ",", "arr", ".", "max", "(", ")", "\n", "arr", "=", "255.0", "*", "(", "arr", "-", "arr_min", ")", "/", "(", "arr_max", "-", "arr_min", ")", "\n", "pyg_img", "=", "pygame", ".", "surfarray", ".", "make_surface", "(", "arr", ".", "swapaxes", "(", "0", ",", "1", ")", "if", "transpose", "else", "arr", ")", "\n", "pyg_img", "=", "pygame", ".", "transform", ".", "scale", "(", "pyg_img", ",", "video_size", ")", "\n", "screen", ".", "blit", "(", "pyg_img", ",", "(", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.play": [[26, 151], ["set", "pygame.display.set_mode", "pygame.time.Clock", "pygame.quit", "type", "hasattr", "sum", "pygame.event.get", "pygame.display.flip", "pygame.time.Clock.tick", "len", "env.get_keys_to_action", "hasattr", "map", "int", "int", "env.reset", "env.step", "play.display_arr", "len", "env.unwrapped.get_keys_to_action", "env.unwrapped.get_keys_to_action.keys", "callback", "len", "obs.repeat.repeat", "tuple", "pressed_keys.append", "sorted", "pressed_keys.remove", "pygame.display.set_mode", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_keys_to_action", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.display_arr", "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_keys_to_action", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.callback", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "play", "(", "env", ",", "transpose", "=", "True", ",", "fps", "=", "30", ",", "zoom", "=", "None", ",", "callback", "=", "None", ",", "keys_to_action", "=", "None", ")", ":", "\n", "    ", "\"\"\"Allows one to play the game using keyboard.\n\n    To simply play the game use:\n\n        play(gym.make(\"Pong-v3\"))\n\n    Above code works also if env is wrapped, so it's particularly useful in\n    verifying that the frame-level preprocessing does not render the game\n    unplayable.\n\n    If you wish to plot real time statistics as you play, you can use\n    gym.utils.play.PlayPlot. Here's a sample code for plotting the reward\n    for last 5 second of gameplay.\n\n        def callback(obs_t, obs_tp1, rew, done, info):\n            return [rew,]\n        env_plotter = EnvPlotter(callback, 30 * 5, [\"reward\"])\n\n        env = gym.make(\"Pong-v3\")\n        play(env, callback=env_plotter.callback)\n\n\n    Arguments\n    ---------\n    env: gym.Env\n        Environment to use for playing.\n    transpose: bool\n        If True the output of observation is transposed.\n        Defaults to true.\n    fps: int\n        Maximum number of steps of the environment to execute every second.\n        Defaults to 30.\n    zoom: float\n        Make screen edge this many times bigger\n    callback: lambda or None\n        Callback if a callback is provided it will be executed after\n        every step. It takes the following input:\n            obs_t: observation before performing action\n            obs_tp1: observation after performing action\n            action: action that was executed\n            rew: reward that was received\n            done: whether the environemnt is done or not\n            info: debug info\n    keys_to_action: dict: tuple(int) -> int or None\n        Mapping from keys pressed to action performed.\n        For example if pressed 'w' and space at the same time is supposed\n        to trigger action number 2 then key_to_action dict would look like this:\n\n            {\n                # ...\n                sorted(ord('w'), ord(' ')) -> 2\n                # ...\n            }\n        If None, default key_to_action mapping for that env is used, if provided.\n    \"\"\"", "\n", "\n", "obs_s", "=", "env", ".", "observation_space", "\n", "assert", "type", "(", "obs_s", ")", "==", "gym", ".", "spaces", ".", "box", ".", "Box", "\n", "assert", "len", "(", "obs_s", ".", "shape", ")", "==", "2", "or", "(", "len", "(", "obs_s", ".", "shape", ")", "==", "3", "and", "obs_s", ".", "shape", "[", "2", "]", "in", "[", "1", ",", "3", "]", ")", "\n", "\n", "if", "keys_to_action", "is", "None", ":", "\n", "        ", "if", "hasattr", "(", "env", ",", "'get_keys_to_action'", ")", ":", "\n", "            ", "keys_to_action", "=", "env", ".", "get_keys_to_action", "(", ")", "\n", "", "elif", "hasattr", "(", "env", ".", "unwrapped", ",", "'get_keys_to_action'", ")", ":", "\n", "            ", "keys_to_action", "=", "env", ".", "unwrapped", ".", "get_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "env", ".", "spec", ".", "id", "+", "\" does not have explicit key to action mapping, \"", "+", "\"please specify one manually\"", "\n", "", "", "relevant_keys", "=", "set", "(", "sum", "(", "map", "(", "list", ",", "keys_to_action", ".", "keys", "(", ")", ")", ",", "[", "]", ")", ")", "\n", "\n", "if", "transpose", ":", "\n", "        ", "video_size", "=", "env", ".", "observation_space", ".", "shape", "[", "1", "]", ",", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "video_size", "=", "env", ".", "observation_space", ".", "shape", "[", "0", "]", ",", "env", ".", "observation_space", ".", "shape", "[", "1", "]", "\n", "\n", "", "if", "zoom", "is", "not", "None", ":", "\n", "        ", "video_size", "=", "int", "(", "video_size", "[", "0", "]", "*", "zoom", ")", ",", "int", "(", "video_size", "[", "1", "]", "*", "zoom", ")", "\n", "\n", "", "pressed_keys", "=", "[", "]", "\n", "running", "=", "True", "\n", "env_done", "=", "True", "\n", "\n", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "video_size", ")", "\n", "clock", "=", "pygame", ".", "time", ".", "Clock", "(", ")", "\n", "\n", "\n", "while", "running", ":", "\n", "        ", "if", "env_done", ":", "\n", "            ", "env_done", "=", "False", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "keys_to_action", "[", "tuple", "(", "sorted", "(", "pressed_keys", ")", ")", "]", "\n", "prev_obs", "=", "obs", "\n", "obs", ",", "rew", ",", "env_done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "callback", "is", "not", "None", ":", "\n", "                ", "callback", "(", "prev_obs", ",", "obs", ",", "action", ",", "rew", ",", "env_done", ",", "info", ")", "\n", "", "", "if", "obs", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "obs", ".", "shape", ")", "==", "2", ":", "\n", "                ", "obs", "=", "obs", "[", ":", ",", ":", ",", "None", "]", "\n", "", "if", "obs", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                ", "obs", "=", "obs", ".", "repeat", "(", "3", ",", "axis", "=", "2", ")", "\n", "", "display_arr", "(", "screen", ",", "obs", ",", "transpose", "=", "transpose", ",", "video_size", "=", "video_size", ")", "\n", "\n", "# process pygame events", "\n", "", "for", "event", "in", "pygame", ".", "event", ".", "get", "(", ")", ":", "\n", "# test events, set key states", "\n", "            ", "if", "event", ".", "type", "==", "pygame", ".", "KEYDOWN", ":", "\n", "                ", "if", "event", ".", "key", "in", "relevant_keys", ":", "\n", "                    ", "pressed_keys", ".", "append", "(", "event", ".", "key", ")", "\n", "", "elif", "event", ".", "key", "==", "27", ":", "\n", "                    ", "running", "=", "False", "\n", "", "", "elif", "event", ".", "type", "==", "pygame", ".", "KEYUP", ":", "\n", "                ", "if", "event", ".", "key", "in", "relevant_keys", ":", "\n", "                    ", "pressed_keys", ".", "remove", "(", "event", ".", "key", ")", "\n", "", "", "elif", "event", ".", "type", "==", "pygame", ".", "QUIT", ":", "\n", "                ", "running", "=", "False", "\n", "", "elif", "event", ".", "type", "==", "VIDEORESIZE", ":", "\n", "                ", "video_size", "=", "event", ".", "size", "\n", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "video_size", ")", "\n", "print", "(", "video_size", ")", "\n", "\n", "", "", "pygame", ".", "display", ".", "flip", "(", ")", "\n", "clock", ".", "tick", "(", "fps", ")", "\n", "", "pygame", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.__init__": [[32, 39], ["threading.Lock", "weakref.WeakValueDictionary", "atexit.register"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register"], ["def", "__init__", "(", "self", ",", "atexit_register", "=", "True", ")", ":", "\n", "        ", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "next_id", "=", "-", "1", "\n", "self", ".", "closeables", "=", "weakref", ".", "WeakValueDictionary", "(", ")", "\n", "\n", "if", "atexit_register", ":", "\n", "            ", "atexit", ".", "register", "(", "self", ".", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.generate_next_id": [[40, 44], ["None"], "methods", ["None"], ["", "", "def", "generate_next_id", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "next_id", "+=", "1", "\n", "return", "self", ".", "next_id", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.register": [[45, 56], ["hasattr", "closer.Closer.generate_next_id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.generate_next_id"], ["", "", "def", "register", "(", "self", ",", "closeable", ")", ":", "\n", "        ", "\"\"\"Registers an object with a 'close' method.\n\n        Returns:\n            int: The registration ID of this object. It is the caller's responsibility to save this ID if early closing is desired.\n        \"\"\"", "\n", "assert", "hasattr", "(", "closeable", ",", "'close'", ")", ",", "'No close method for {}'", ".", "format", "(", "closeable", ")", "\n", "\n", "next_id", "=", "self", ".", "generate_next_id", "(", ")", "\n", "self", ".", "closeables", "[", "next_id", "]", "=", "closeable", "\n", "return", "next_id", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.unregister": [[57, 61], ["None"], "methods", ["None"], ["", "def", "unregister", "(", "self", ",", "id", ")", ":", "\n", "        ", "assert", "id", "is", "not", "None", "\n", "if", "id", "in", "self", ".", "closeables", ":", "\n", "            ", "del", "self", ".", "closeables", "[", "id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.close": [[62, 68], ["list", "closer.Closer.closeables.values", "closeable.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "# Explicitly fetch all monitors first so that they can't disappear while", "\n", "# we iterate. cf. http://stackoverflow.com/a/12429620", "\n", "        ", "closeables", "=", "list", "(", "self", ".", "closeables", ".", "values", "(", ")", ")", "\n", "for", "closeable", "in", "closeables", ":", "\n", "            ", "closeable", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.step": [[46, 63], ["None"], "methods", ["None"], ["def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Run one timestep of the environment's dynamics. When end of\n        episode is reached, you are responsible for calling `reset()`\n        to reset this environment's state.\n\n        Accepts an action and returns a tuple (observation, reward, done, info).\n\n        Args:\n            action (object): an action provided by the environment\n\n        Returns:\n            observation (object): agent's observation of the current environment\n            reward (float) : amount of reward returned after previous action\n            done (boolean): whether the episode has ended, in which case further step() calls will return undefined results\n            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.reset": [[64, 71], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the state of the environment and returns an initial observation.\n\n        Returns: observation (object): the initial observation of the\n            space.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.render": [[72, 111], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Renders the environment.\n\n        The set of supported modes varies per environment. (And some\n        environments do not support rendering at all.) By convention,\n        if mode is:\n\n        - human: render to the current display or terminal and\n          return nothing. Usually for human consumption.\n        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),\n          representing RGB values for an x-by-y pixel image, suitable\n          for turning into a video.\n        - ansi: Return a string (str) or StringIO.StringIO containing a\n          terminal-style text representation. The text can include newlines\n          and ANSI escape sequences (e.g. for colors).\n\n        Note:\n            Make sure that your class's metadata 'render.modes' key includes\n              the list of supported modes. It's recommended to call super()\n              in implementations to use the functionality of this method.\n\n        Args:\n            mode (str): the mode to render with\n            close (bool): close all open renderings\n\n        Example:\n\n        class MyEnv(Env):\n            metadata = {'render.modes': ['human', 'rgb_array']}\n\n            def render(self, mode='human'):\n                if mode == 'rgb_array':\n                    return np.array(...) # return RGB frame suitable for video\n                elif mode is 'human':\n                    ... # pop up a window and render\n                else:\n                    super(MyEnv, self).render(mode=mode) # just raise an exception\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.close": [[112, 119], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Override _close in your subclass to perform any necessary cleanup.\n\n        Environments will automatically close() themselves when\n        garbage collected or when the program exits.\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.seed": [[120, 137], ["gym.logger.warn"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets the seed for this env's random number generator(s).\n\n        Note:\n            Some environments use multiple pseudorandom number generators.\n            We want to capture all such seeds used in order to ensure that\n            there aren't accidental correlations between multiple generators.\n\n        Returns:\n            list<bigint>: Returns the list of seeds used in this env's random\n              number generators. The first value in the list should be the\n              \"main\" seed, or the value which a reproducer should pass to\n              'seed'. Often, the main seed equals the provided 'seed', but\n              this won't be true if seed=None, for example.\n        \"\"\"", "\n", "logger", ".", "warn", "(", "\"Could not seed environment %s\"", ",", "self", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.unwrapped": [[138, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "\"\"\"Completely unwrap this env.\n\n        Returns:\n            gym.Env: The base non-wrapped gym.Env instance\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Env.__str__": [[147, 152], ["type", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "spec", "is", "None", ":", "\n", "            ", "return", "'<{} instance>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "return", "'<{}<{}>>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "self", ".", "spec", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.GoalEnv.reset": [[163, 172], ["core.Env.reset", "isinstance", "gym.error.Error", "gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "reset", "(", "self", ")", ":", "\n", "# Enforce that each GoalEnv uses a Goal-compatible observation space.", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'GoalEnv requires an observation space of type gym.spaces.Dict'", ")", "\n", "", "result", "=", "super", "(", "GoalEnv", ",", "self", ")", ".", "reset", "(", ")", "\n", "for", "key", "in", "[", "'observation'", ",", "'achieved_goal'", ",", "'desired_goal'", "]", ":", "\n", "            ", "if", "key", "not", "in", "result", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'GoalEnv requires the \"{}\" key to be part of the observation dictionary.'", ".", "format", "(", "key", ")", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.GoalEnv.compute_reward": [[173, 192], ["NotImplementedError"], "methods", ["None"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        ", "\"\"\"Compute the step reward. This externalizes the reward function and makes\n        it dependent on an a desired goal and the one that was achieved. If you wish to include\n        additional rewards that are independent of the goal, you can include the necessary values\n        to derive it in info and compute it accordingly.\n\n        Args:\n            achieved_goal (object): the goal that was achieved during execution\n            desired_goal (object): the desired goal that we asked the agent to attempt to achieve\n            info (dict): an info dictionary with additional information\n\n        Returns:\n            float: The reward that corresponds to the provided achieved goal w.r.t. to the desired\n            goal. Note that the following should always hold true:\n\n                ob, reward, done, info = env.step()\n                assert reward == env.compute_reward(ob['achieved_goal'], ob['goal'], info)\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Space.__init__": [[200, 204], ["tuple", "np.dtype"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "import", "numpy", "as", "np", "# takes about 300-400ms to import, so we load lazily", "\n", "self", ".", "shape", "=", "None", "if", "shape", "is", "None", "else", "tuple", "(", "shape", ")", "\n", "self", ".", "dtype", "=", "None", "if", "dtype", "is", "None", "else", "np", ".", "dtype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Space.sample": [[205, 210], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Uniformly randomly sample a random element of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Space.contains": [[211, 217], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Return boolean specifying if x is a valid\n        member of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Space.to_jsonable": [[218, 222], ["None"], "methods", ["None"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "\"\"\"Convert a batch of samples from this space to a JSONable data type.\"\"\"", "\n", "# By default, assume identity is JSONable", "\n", "return", "sample_n", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Space.from_jsonable": [[223, 227], ["None"], "methods", ["None"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "\"\"\"Convert a JSONable data type to a batch of samples from this space.\"\"\"", "\n", "# By default, assume identity is JSONable", "\n", "return", "sample_n", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.__init__": [[241, 248], ["core.Wrapper._warn_double_wrap"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper._warn_double_wrap"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "action_space", "=", "self", ".", "env", ".", "action_space", "\n", "self", ".", "observation_space", "=", "self", ".", "env", ".", "observation_space", "\n", "self", ".", "reward_range", "=", "self", ".", "env", ".", "reward_range", "\n", "self", ".", "metadata", "=", "self", ".", "env", ".", "metadata", "\n", "self", ".", "_warn_double_wrap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.class_name": [[249, 252], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "class_name", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper._warn_double_wrap": [[253, 262], ["isinstance", "env.class_name", "core.Wrapper.class_name", "gym.error.DoubleWrapperError"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.class_name", "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.class_name"], ["", "def", "_warn_double_wrap", "(", "self", ")", ":", "\n", "        ", "env", "=", "self", ".", "env", "\n", "while", "True", ":", "\n", "            ", "if", "isinstance", "(", "env", ",", "Wrapper", ")", ":", "\n", "                ", "if", "env", ".", "class_name", "(", ")", "==", "self", ".", "class_name", "(", ")", ":", "\n", "                    ", "raise", "error", ".", "DoubleWrapperError", "(", "\"Attempted to double wrap with Wrapper: {}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "env", "=", "env", ".", "env", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.step": [[263, 272], ["hasattr", "core.deprecated_warn_once", "core.Wrapper.step", "core.deprecated_warn_once", "core.Wrapper.env.step", "type", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_step\"", ")", ":", "\n", "            ", "deprecated_warn_once", "(", "\"%s doesn't implement 'step' method, but it implements deprecated '_step' method.\"", "%", "type", "(", "self", ")", ")", "\n", "self", ".", "step", "=", "self", ".", "_step", "\n", "return", "self", ".", "step", "(", "action", ")", "\n", "", "else", ":", "\n", "            ", "deprecated_warn_once", "(", "\"%s doesn't implement 'step' method, \"", "%", "type", "(", "self", ")", "+", "\n", "\"which is required for wrappers derived directly from Wrapper. Deprecated default implementation is used.\"", ")", "\n", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.reset": [[273, 282], ["hasattr", "core.deprecated_warn_once", "core.Wrapper._reset", "core.deprecated_warn_once", "core.Wrapper.env.reset", "type", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_reset\"", ")", ":", "\n", "            ", "deprecated_warn_once", "(", "\"%s doesn't implement 'reset' method, but it implements deprecated '_reset' method.\"", "%", "type", "(", "self", ")", ")", "\n", "self", ".", "reset", "=", "self", ".", "_reset", "\n", "return", "self", ".", "_reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "deprecated_warn_once", "(", "\"%s doesn't implement 'reset' method, \"", "%", "type", "(", "self", ")", "+", "\n", "\"which is required for wrappers derived directly from Wrapper. Deprecated default implementation is used.\"", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.render": [[283, 285], ["core.Wrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.close": [[286, 289], ["core.Wrapper.env.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "env", ":", "\n", "            ", "return", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.seed": [[290, 292], ["core.Wrapper.env.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.compute_reward": [[293, 295], ["core.Wrapper.env.compute_reward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv.compute_reward"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "compute_reward", "(", "achieved_goal", ",", "desired_goal", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.__str__": [[296, 298], ["type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'<{}{}>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "self", ".", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.__repr__": [[299, 301], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.unwrapped": [[302, 305], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "unwrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.spec": [[306, 309], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ObservationWrapper.step": [[312, 315], ["core.ObservationWrapper.env.step", "core.ObservationWrapper.observation"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.dict.FlattenDictWrapper.observation"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "self", ".", "observation", "(", "observation", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ObservationWrapper.reset": [[316, 319], ["core.ObservationWrapper.env.reset", "core.ObservationWrapper.observation"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.dict.FlattenDictWrapper.observation"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "observation", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "return", "self", ".", "observation", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ObservationWrapper.observation": [[320, 323], ["core.deprecated_warn_once", "core.ObservationWrapper._observation", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.ScaledFloatFrame._observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "deprecated_warn_once", "(", "\"%s doesn't implement 'observation' method. Maybe it implements deprecated '_observation' method.\"", "%", "type", "(", "self", ")", ")", "\n", "return", "self", ".", "_observation", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.RewardWrapper.reset": [[326, 328], ["core.RewardWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["    ", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.RewardWrapper.step": [[329, 332], ["core.RewardWrapper.env.step", "core.RewardWrapper.reward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.RewardWrapper.reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "observation", ",", "self", ".", "reward", "(", "reward", ")", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.RewardWrapper.reward": [[333, 336], ["core.deprecated_warn_once", "core.RewardWrapper._reward", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.ClipRewardEnv._reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "deprecated_warn_once", "(", "\"%s doesn't implement 'reward' method. Maybe it implements deprecated '_reward' method.\"", "%", "type", "(", "self", ")", ")", "\n", "return", "self", ".", "_reward", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ActionWrapper.step": [[339, 342], ["core.ActionWrapper.action", "core.ActionWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ActionWrapper.action", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "self", ".", "action", "(", "action", ")", "\n", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ActionWrapper.reset": [[343, 345], ["core.ActionWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ActionWrapper.action": [[346, 349], ["core.deprecated_warn_once", "core.ActionWrapper._action", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "deprecated_warn_once", "(", "\"%s doesn't implement 'action' method. Maybe it implements deprecated '_action' method.\"", "%", "type", "(", "self", ")", ")", "\n", "return", "self", ".", "_action", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.ActionWrapper.reverse_action": [[350, 353], ["core.deprecated_warn_once", "core.ActionWrapper._reverse_action", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "reverse_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "deprecated_warn_once", "(", "\"%s doesn't implement 'reverse_action' method. Maybe it implements deprecated '_reverse_action' method.\"", "%", "type", "(", "self", ")", ")", "\n", "return", "self", ".", "_reverse_action", "(", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.deprecated_warn_once": [[231, 236], ["gym.logger.warn"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["def", "deprecated_warn_once", "(", "text", ")", ":", "\n", "    ", "global", "warn_once", "\n", "if", "not", "warn_once", ":", "return", "\n", "warn_once", "=", "False", "\n", "logger", ".", "warn", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.error.APIError.__init__": [[68, 85], ["Exception.__init__", "error.APIError.headers.get", "hasattr", "http_body.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.decode"], ["    ", "def", "__init__", "(", "self", ",", "message", "=", "None", ",", "http_body", "=", "None", ",", "http_status", "=", "None", ",", "\n", "json_body", "=", "None", ",", "headers", "=", "None", ")", ":", "\n", "        ", "super", "(", "APIError", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n", "if", "http_body", "and", "hasattr", "(", "http_body", ",", "'decode'", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "http_body", "=", "http_body", ".", "decode", "(", "'utf-8'", ")", "\n", "", "except", ":", "\n", "                ", "http_body", "=", "(", "'<Could not decode body as utf-8. '", "\n", "'Please report to gym@openai.com>'", ")", "\n", "\n", "", "", "self", ".", "_message", "=", "message", "\n", "self", ".", "http_body", "=", "http_body", "\n", "self", ".", "http_status", "=", "http_status", "\n", "self", ".", "json_body", "=", "json_body", "\n", "self", ".", "headers", "=", "headers", "or", "{", "}", "\n", "self", ".", "request_id", "=", "self", ".", "headers", ".", "get", "(", "'request-id'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.error.APIError.__unicode__": [[86, 92], ["None"], "methods", ["None"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "request_id", "is", "not", "None", ":", "\n", "            ", "msg", "=", "self", ".", "_message", "or", "\"<empty message>\"", "\n", "return", "u\"Request {0}: {1}\"", ".", "format", "(", "self", ".", "request_id", ",", "msg", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_message", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.error.APIError.__str__": [[93, 98], ["unicode().encode", "error.APIError.__unicode__", "unicode"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode", "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.error.APIError.__unicode__"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "try", ":", "# Python 2", "\n", "            ", "return", "unicode", "(", "self", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "", "except", "NameError", ":", "# Python 3", "\n", "            ", "return", "self", ".", "__unicode__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.error.InvalidRequestError.__init__": [[106, 112], ["error.APIError.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "message", ",", "param", ",", "http_body", "=", "None", ",", "\n", "http_status", "=", "None", ",", "json_body", "=", "None", ",", "headers", "=", "None", ")", ":", "\n", "        ", "super", "(", "InvalidRequestError", ",", "self", ")", ".", "__init__", "(", "\n", "message", ",", "http_body", ",", "http_status", ",", "json_body", ",", "\n", "headers", ")", "\n", "self", ".", "param", "=", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.logger.set_level": [[11, 17], ["None"], "function", ["None"], ["def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "global", "MIN_LEVEL", "\n", "MIN_LEVEL", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.logger.debug": [[18, 21], ["print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "debug", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "INFO", ":", "\n", "        ", "print", "(", "'%s: %s'", "%", "(", "'DEBUG'", ",", "msg", "%", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.logger.info": [[22, 25], ["print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "", "def", "info", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "INFO", ":", "\n", "        ", "print", "(", "'%s: %s'", "%", "(", "'INFO'", ",", "msg", "%", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.logger.warn": [[26, 29], ["print", "gym.utils.colorize"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize"], ["", "", "def", "warn", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "WARN", ":", "\n", "        ", "print", "(", "colorize", "(", "'%s: %s'", "%", "(", "'WARN'", ",", "msg", "%", "args", ")", ",", "'yellow'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.logger.error": [[30, 33], ["print", "gym.utils.colorize"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize"], ["", "", "def", "error", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "ERROR", ":", "\n", "        ", "print", "(", "colorize", "(", "'%s: %s'", "%", "(", "'ERROR'", ",", "msg", "%", "args", ")", ",", "'red'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.__init__.Spaces.__getattr__": [[21, 25], ["warnings.warn", "getattr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.__init__.Wrappers.__getattr__": [[28, 32], ["warnings.warn", "getattr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.gym.__init__.undo_logger_setup": [[14, 16], ["warnings.warn"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_atexit.Closeable.close": [[5, 7], ["None"], "methods", ["None"], ["def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "close_called", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_atexit.test_register_unregister": [[8, 22], ["gym.utils.closer.Closer", "test_atexit.Closeable", "test_atexit.Closeable", "gym.utils.closer.Closer.register", "gym.utils.closer.Closer.register", "gym.utils.closer.Closer.unregister", "gym.utils.closer.Closer.close"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.unregister", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "", "def", "test_register_unregister", "(", ")", ":", "\n", "    ", "registry", "=", "Closer", "(", "atexit_register", "=", "False", ")", "\n", "c1", "=", "Closeable", "(", ")", "\n", "c2", "=", "Closeable", "(", ")", "\n", "\n", "assert", "not", "c1", ".", "close_called", "\n", "assert", "not", "c2", ".", "close_called", "\n", "registry", ".", "register", "(", "c1", ")", "\n", "id2", "=", "registry", ".", "register", "(", "c2", ")", "\n", "\n", "registry", ".", "unregister", "(", "id2", ")", "\n", "registry", ".", "close", "(", ")", "\n", "assert", "c1", ".", "close_called", "\n", "assert", "not", "c2", ".", "close_called", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_seeding.test_invalid_seeds": [[4, 12], ["gym.utils.seeding.np_random"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["def", "test_invalid_seeds", "(", ")", ":", "\n", "    ", "for", "seed", "in", "[", "-", "1", ",", "'test'", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "seeding", ".", "np_random", "(", "seed", ")", "\n", "", "except", "error", ".", "Error", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Invalid seed {} passed validation'", ".", "format", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_seeding.test_valid_seeds": [[13, 17], ["gym.utils.seeding.np_random"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "", "", "def", "test_valid_seeds", "(", ")", ":", "\n", "    ", "for", "seed", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "random", ",", "seed1", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "assert", "seed", "==", "seed1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.hash_object": [[27, 29], ["hashlib.sha256().hexdigest", "hashlib.sha256", "str().encode", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode"], ["", "", "def", "hash_object", "(", "unhashed", ")", ":", "\n", "\t", "return", "hashlib", ".", "sha256", "(", "str", "(", "unhashed", ")", ".", "encode", "(", "'utf-16'", ")", ")", ".", "hexdigest", "(", ")", "# This is really bad, str could be same while values change", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.generate_rollout_hash": [[30, 66], ["gym.spaces.seed", "spec.make", "spec.make.seed", "range", "test_envs_semantics.hash_object", "test_envs_semantics.hash_object", "test_envs_semantics.hash_object", "test_envs_semantics.hash_object", "spec.make.close", "spec.make.reset", "range", "spec.make.action_space.sample", "spec.make.step", "action_list.append", "observation_list.append", "reward_list.append", "done_list.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.hash_object", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "generate_rollout_hash", "(", "spec", ")", ":", "\n", "\t", "spaces", ".", "seed", "(", "0", ")", "\n", "env", "=", "spec", ".", "make", "(", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "\n", "observation_list", "=", "[", "]", "\n", "action_list", "=", "[", "]", "\n", "reward_list", "=", "[", "]", "\n", "done_list", "=", "[", "]", "\n", "\n", "total_steps", "=", "0", "\n", "for", "episode", "in", "range", "(", "episodes", ")", ":", "\n", "\t\t", "if", "total_steps", ">=", "ROLLOUT_STEPS", ":", "break", "\n", "observation", "=", "env", ".", "reset", "(", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "\t\t\t", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "observation", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "action_list", ".", "append", "(", "action", ")", "\n", "observation_list", ".", "append", "(", "observation", ")", "\n", "reward_list", ".", "append", "(", "reward", ")", "\n", "done_list", ".", "append", "(", "done", ")", "\n", "\n", "total_steps", "+=", "1", "\n", "if", "total_steps", ">=", "ROLLOUT_STEPS", ":", "break", "\n", "\n", "if", "done", ":", "break", "\n", "\n", "", "", "observations_hash", "=", "hash_object", "(", "observation_list", ")", "\n", "actions_hash", "=", "hash_object", "(", "action_list", ")", "\n", "rewards_hash", "=", "hash_object", "(", "reward_list", ")", "\n", "dones_hash", "=", "hash_object", "(", "done_list", ")", "\n", "\n", "env", ".", "close", "(", ")", "\n", "return", "observations_hash", ",", "actions_hash", ",", "rewards_hash", ",", "dones_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.test_env_semantics": [[67, 96], ["pytest.mark.parametrize", "gym.logger.warn", "gym.logger.info", "test_envs_semantics.generate_rollout_hash", "len", "open", "json.load", "errors.append", "errors.append", "errors.append", "errors.append", "ValueError", "gym.logger.warn", "gym.logger.warn"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs_semantics.generate_rollout_hash", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"spec\"", ",", "spec_list", ")", "\n", "def", "test_env_semantics", "(", "spec", ")", ":", "\n", "\t", "logger", ".", "warn", "(", "\"Skipping this test. Existing hashes were generated in a bad way\"", ")", "\n", "return", "\n", "with", "open", "(", "ROLLOUT_FILE", ")", "as", "data_file", ":", "\n", "\t\t", "rollout_dict", "=", "json", ".", "load", "(", "data_file", ")", "\n", "\n", "", "if", "spec", ".", "id", "not", "in", "rollout_dict", ":", "\n", "\t\t", "if", "not", "spec", ".", "nondeterministic", ":", "\n", "\t\t\t", "logger", ".", "warn", "(", "\"Rollout does not exist for {}, run generate_json.py to generate rollouts for new envs\"", ".", "format", "(", "spec", ".", "id", ")", ")", "\n", "", "return", "\n", "\n", "", "logger", ".", "info", "(", "\"Testing rollout for {} environment...\"", ".", "format", "(", "spec", ".", "id", ")", ")", "\n", "\n", "observations_now", ",", "actions_now", ",", "rewards_now", ",", "dones_now", "=", "generate_rollout_hash", "(", "spec", ")", "\n", "\n", "errors", "=", "[", "]", "\n", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'observations'", "]", "!=", "observations_now", ":", "\n", "\t\t", "errors", ".", "append", "(", "'Observations not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'observations'", "]", ",", "observations_now", ")", ")", "\n", "", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'actions'", "]", "!=", "actions_now", ":", "\n", "\t\t", "errors", ".", "append", "(", "'Actions not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'actions'", "]", ",", "actions_now", ")", ")", "\n", "", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'rewards'", "]", "!=", "rewards_now", ":", "\n", "\t\t", "errors", ".", "append", "(", "'Rewards not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'rewards'", "]", ",", "rewards_now", ")", ")", "\n", "", "if", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'dones'", "]", "!=", "dones_now", ":", "\n", "\t\t", "errors", ".", "append", "(", "'Dones not equal for {} -- expected {} but got {}'", ".", "format", "(", "spec", ".", "id", ",", "rollout_dict", "[", "spec", ".", "id", "]", "[", "'dones'", "]", ",", "dones_now", ")", ")", "\n", "", "if", "len", "(", "errors", ")", ":", "\n", "\t\t", "for", "error", "in", "errors", ":", "\n", "\t\t\t", "logger", ".", "warn", "(", "error", ")", "\n", "", "raise", "ValueError", "(", "errors", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs.test_env": [[9, 30], ["pytest.mark.parametrize", "spec.make", "spec.make.reset", "ob_space.contains", "act_space.sample", "spec.make.step", "ob_space.contains", "numpy.isscalar", "isinstance", "spec.make.metadata.get", "spec.make.metadata.get", "spec.make.close", "spec.make.render", "spec.make.render"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"spec\"", ",", "spec_list", ")", "\n", "def", "test_env", "(", "spec", ")", ":", "\n", "    ", "env", "=", "spec", ".", "make", "(", ")", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "act_space", "=", "env", ".", "action_space", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "assert", "ob_space", ".", "contains", "(", "ob", ")", ",", "'Reset observation: {!r} not in space'", ".", "format", "(", "ob", ")", "\n", "a", "=", "act_space", ".", "sample", "(", ")", "\n", "observation", ",", "reward", ",", "done", ",", "_info", "=", "env", ".", "step", "(", "a", ")", "\n", "assert", "ob_space", ".", "contains", "(", "observation", ")", ",", "'Step observation: {!r} not in space'", ".", "format", "(", "observation", ")", "\n", "assert", "np", ".", "isscalar", "(", "reward", ")", ",", "\"{} is not a scalar for {}\"", ".", "format", "(", "reward", ",", "env", ")", "\n", "assert", "isinstance", "(", "done", ",", "bool", ")", ",", "\"Expected {} to be a boolean\"", ".", "format", "(", "done", ")", "\n", "\n", "for", "mode", "in", "env", ".", "metadata", ".", "get", "(", "'render.modes'", ",", "[", "]", ")", ":", "\n", "        ", "env", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n", "# Make sure we can render the environment after close.", "\n", "", "for", "mode", "in", "env", ".", "metadata", ".", "get", "(", "'render.modes'", ",", "[", "]", ")", ":", "\n", "        ", "env", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_envs.test_random_rollout": [[32, 43], ["gym.envs.make", "gym.envs.make", "env.reset", "range", "env.close", "env.action_space.sample", "env.observation_space.contains", "agent", "env.action_space.contains", "env.step"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "test_random_rollout", "(", ")", ":", "\n", "    ", "for", "env", "in", "[", "envs", ".", "make", "(", "'CartPole-v0'", ")", ",", "envs", ".", "make", "(", "'FrozenLake-v0'", ")", "]", ":", "\n", "        ", "agent", "=", "lambda", "ob", ":", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "assert", "env", ".", "observation_space", ".", "contains", "(", "ob", ")", "\n", "a", "=", "agent", "(", "ob", ")", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "a", ")", "\n", "(", "ob", ",", "_reward", ",", "done", ",", "_info", ")", "=", "env", ".", "step", "(", "a", ")", "\n", "if", "done", ":", "break", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.test_env": [[6, 58], ["pytest.mark.parametrize", "gym.spaces.seed", "spec.make", "spec.make.seed", "spec.make.reset", "spec.make.close", "gym.spaces.seed", "spec.make", "spec.make.seed", "spec.make.reset", "spec.make.close", "enumerate", "test_determinism.assert_equals", "enumerate", "spec.make.action_space.sample", "spec.make.step", "spec.make.action_space.sample", "spec.make.step", "zip", "zip", "test_determinism.assert_equals", "range", "range", "test_determinism.assert_equals", "test_determinism.assert_equals", "print", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"spec\"", ",", "spec_list", ")", "\n", "def", "test_env", "(", "spec", ")", ":", "\n", "\n", "# Note that this precludes running this test in multiple", "\n", "# threads. However, we probably already can't do multithreading", "\n", "# due to some environments.", "\n", "    ", "spaces", ".", "seed", "(", "0", ")", "\n", "\n", "env1", "=", "spec", ".", "make", "(", ")", "\n", "env1", ".", "seed", "(", "0", ")", "\n", "action_samples1", "=", "[", "env1", ".", "action_space", ".", "sample", "(", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "initial_observation1", "=", "env1", ".", "reset", "(", ")", "\n", "step_responses1", "=", "[", "env1", ".", "step", "(", "action", ")", "for", "action", "in", "action_samples1", "]", "\n", "env1", ".", "close", "(", ")", "\n", "\n", "spaces", ".", "seed", "(", "0", ")", "\n", "\n", "env2", "=", "spec", ".", "make", "(", ")", "\n", "env2", ".", "seed", "(", "0", ")", "\n", "action_samples2", "=", "[", "env2", ".", "action_space", ".", "sample", "(", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "initial_observation2", "=", "env2", ".", "reset", "(", ")", "\n", "step_responses2", "=", "[", "env2", ".", "step", "(", "action", ")", "for", "action", "in", "action_samples2", "]", "\n", "env2", ".", "close", "(", ")", "\n", "\n", "for", "i", ",", "(", "action_sample1", ",", "action_sample2", ")", "in", "enumerate", "(", "zip", "(", "action_samples1", ",", "action_samples2", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "assert_equals", "(", "action_sample1", ",", "action_sample2", ")", "\n", "", "except", "AssertionError", ":", "\n", "            ", "print", "(", "'env1.action_space='", ",", "env1", ".", "action_space", ")", "\n", "print", "(", "'env2.action_space='", ",", "env2", ".", "action_space", ")", "\n", "print", "(", "'action_samples1='", ",", "action_samples1", ")", "\n", "print", "(", "'action_samples2='", ",", "action_samples2", ")", "\n", "print", "(", "'[{}] action_sample1: {}, action_sample2: {}'", ".", "format", "(", "i", ",", "action_sample1", ",", "action_sample2", ")", ")", "\n", "raise", "\n", "\n", "# Don't check rollout equality if it's a a nondeterministic", "\n", "# environment.", "\n", "", "", "if", "spec", ".", "nondeterministic", ":", "\n", "        ", "return", "\n", "\n", "", "assert_equals", "(", "initial_observation1", ",", "initial_observation2", ")", "\n", "\n", "for", "i", ",", "(", "(", "o1", ",", "r1", ",", "d1", ",", "i1", ")", ",", "(", "o2", ",", "r2", ",", "d2", ",", "i2", ")", ")", "in", "enumerate", "(", "zip", "(", "step_responses1", ",", "step_responses2", ")", ")", ":", "\n", "        ", "assert_equals", "(", "o1", ",", "o2", ",", "'[{}] '", ".", "format", "(", "i", ")", ")", "\n", "assert", "r1", "==", "r2", ",", "'[{}] r1: {}, r2: {}'", ".", "format", "(", "i", ",", "r1", ",", "r2", ")", "\n", "assert", "d1", "==", "d2", ",", "'[{}] d1: {}, d2: {}'", ".", "format", "(", "i", ",", "d1", ",", "d2", ")", "\n", "\n", "# Go returns a Pachi game board in info, which doesn't", "\n", "# properly check equality. For now, we hack around this by", "\n", "# just skipping Go.", "\n", "if", "spec", ".", "id", "not", "in", "[", "'Go9x9-v0'", ",", "'Go19x19-v0'", "]", ":", "\n", "            ", "assert_equals", "(", "i1", ",", "i2", ",", "'[{}] '", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals": [[59, 75], ["isinstance", "type", "type", "a.keys", "isinstance", "list", "list", "test_determinism.assert_equals", "numpy.testing.assert_array_equal", "isinstance", "a.keys", "b.keys", "zip", "test_determinism.assert_equals"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_determinism.assert_equals"], ["", "", "", "def", "assert_equals", "(", "a", ",", "b", ",", "prefix", "=", "None", ")", ":", "\n", "    ", "assert", "type", "(", "a", ")", "==", "type", "(", "b", ")", ",", "\"{}Differing types: {} and {}\"", ".", "format", "(", "prefix", ",", "a", ",", "b", ")", "\n", "if", "isinstance", "(", "a", ",", "dict", ")", ":", "\n", "        ", "assert", "list", "(", "a", ".", "keys", "(", ")", ")", "==", "list", "(", "b", ".", "keys", "(", ")", ")", ",", "\"{}Key sets differ: {} and {}\"", ".", "format", "(", "prefix", ",", "a", ",", "b", ")", "\n", "\n", "for", "k", "in", "a", ".", "keys", "(", ")", ":", "\n", "            ", "v_a", "=", "a", "[", "k", "]", "\n", "v_b", "=", "b", "[", "k", "]", "\n", "assert_equals", "(", "v_a", ",", "v_b", ")", "\n", "", "", "elif", "isinstance", "(", "a", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_array_equal", "(", "a", ",", "b", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "tuple", ")", ":", "\n", "        ", "for", "elem_from_a", ",", "elem_from_b", "in", "zip", "(", "a", ",", "b", ")", ":", "\n", "            ", "assert_equals", "(", "elem_from_a", ",", "elem_from_b", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "a", "==", "b", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_registration.test_make": [[6, 10], ["gym.envs.make", "isinstance"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make"], ["def", "test_make", "(", ")", ":", "\n", "    ", "env", "=", "envs", ".", "make", "(", "'CartPole-v0'", ")", "\n", "assert", "env", ".", "spec", ".", "id", "==", "'CartPole-v0'", "\n", "assert", "isinstance", "(", "env", ".", "unwrapped", ",", "cartpole", ".", "CartPoleEnv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_registration.test_make_deprecated": [[11, 18], ["gym.envs.make"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make"], ["", "def", "test_make_deprecated", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "envs", ".", "make", "(", "'Humanoid-v0'", ")", "\n", "", "except", "error", ".", "Error", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_registration.test_spec": [[19, 22], ["gym.envs.spec"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec"], ["", "", "def", "test_spec", "(", ")", ":", "\n", "    ", "spec", "=", "envs", ".", "spec", "(", "'CartPole-v0'", ")", "\n", "assert", "spec", ".", "id", "==", "'CartPole-v0'", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_registration.test_missing_lookup": [[23, 42], ["gym.envs.registration.EnvRegistry", "registration.EnvRegistry.register", "registration.EnvRegistry.register", "registration.EnvRegistry.register", "registration.EnvRegistry.register", "registration.EnvRegistry.spec", "registration.EnvRegistry.spec"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec"], ["", "def", "test_missing_lookup", "(", ")", ":", "\n", "    ", "registry", "=", "registration", ".", "EnvRegistry", "(", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Test-v0'", ",", "entry_point", "=", "None", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Test-v15'", ",", "entry_point", "=", "None", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Test-v9'", ",", "entry_point", "=", "None", ")", "\n", "registry", ".", "register", "(", "id", "=", "'Other-v100'", ",", "entry_point", "=", "None", ")", "\n", "try", ":", "\n", "        ", "registry", ".", "spec", "(", "'Test-v1'", ")", "# must match an env name but not the version above", "\n", "", "except", "error", ".", "DeprecatedEnv", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "try", ":", "\n", "        ", "registry", ".", "spec", "(", "'Unknown-v1'", ")", "\n", "", "except", "error", ".", "UnregisteredEnv", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_registration.test_malformed_lookup": [[43, 51], ["gym.envs.registration.EnvRegistry", "registration.EnvRegistry.spec"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec"], ["", "", "def", "test_malformed_lookup", "(", ")", ":", "\n", "    ", "registry", "=", "registration", ".", "EnvRegistry", "(", ")", "\n", "try", ":", "\n", "        ", "registry", ".", "spec", "(", "u'\u201cBreakout-v0\u201d'", ")", "\n", "", "except", "error", ".", "Error", "as", "e", ":", "\n", "        ", "assert", "'malformed environment ID'", "in", "'{}'", ".", "format", "(", "e", ")", ",", "'Unexpected message: {}'", ".", "format", "(", "e", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.spec_list.should_skip_env_spec_for_tests": [[4, 21], ["ep.startswith", "ep.startswith", "ep.startswith", "gym.logger.warn", "os.environ.get", "os.path.exists", "ep.startswith", "os.path.expanduser", "spec.id.startswith", "spec.id.startswith"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["def", "should_skip_env_spec_for_tests", "(", "spec", ")", ":", "\n", "# We skip tests for envs that require dependencies or are otherwise", "\n", "# troublesome to run frequently", "\n", "    ", "ep", "=", "spec", ".", "_entry_point", "\n", "# Skip mujoco tests for pull request CI", "\n", "skip_mujoco", "=", "not", "(", "os", ".", "environ", ".", "get", "(", "'MUJOCO_KEY_BUNDLE'", ")", "or", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "expanduser", "(", "'~/.mujoco'", ")", ")", ")", "\n", "if", "skip_mujoco", "and", "ep", ".", "startswith", "(", "'gym.envs.mujoco:'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "(", "'GoEnv'", "in", "ep", "or", "\n", "'HexEnv'", "in", "ep", "or", "\n", "ep", ".", "startswith", "(", "'gym.envs.box2d:'", ")", "or", "\n", "ep", ".", "startswith", "(", "'gym.envs.box2d:'", ")", "or", "\n", "(", "ep", ".", "startswith", "(", "\"gym.envs.atari\"", ")", "and", "not", "spec", ".", "id", ".", "startswith", "(", "\"Pong\"", ")", "and", "not", "spec", ".", "id", ".", "startswith", "(", "\"Seaquest\"", ")", ")", "\n", ")", ":", "\n", "        ", "logger", ".", "warn", "(", "\"Skipping tests for env {}\"", ".", "format", "(", "ep", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.setUp": [[29, 32], ["test_algorithmic.TestAlgorithmicEnvInteractions.ENV_KLS", "test_algorithmic.imprint"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.imprint"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "self", ".", "ENV_KLS", "(", "base", "=", "2", ",", "chars", "=", "True", ")", "\n", "imprint", "(", "self", ".", "env", ",", "self", ".", "CANNED_INPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_successful_interaction": [[33, 43], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertGreater", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertTrue", "test_algorithmic.TestAlgorithmicEnvInteractions.assertGreater"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "test_successful_interaction", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "0", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "1", ")", "\n", "self", ".", "assertGreater", "(", "reward", ",", "0", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "self", ".", "assertGreater", "(", "reward", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_bad_output_fail_fast": [[44, 49], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertTrue", "test_algorithmic.TestAlgorithmicEnvInteractions.assertLess"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "test_bad_output_fail_fast", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "self", ".", "assertLess", "(", "reward", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_levelup": [[50, 67], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "range", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertTrue", "test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "test_levelup", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "# Kind of a hack", "\n", "alg", ".", "algorithmic_env", ".", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "[", "]", "\n", "min_length", "=", "self", ".", "env", ".", "min_length", "\n", "for", "i", "in", "range", "(", "self", ".", "env", ".", "last", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "0", "]", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertTrue", "(", "done", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "i", "<", "self", ".", "env", ".", "last", "-", "1", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "alg", ".", "algorithmic_env", ".", "AlgorithmicEnv", ".", "reward_shortfalls", ")", ",", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "# Should have leveled up on the last iteration", "\n", "                ", "self", ".", "assertEqual", "(", "self", ".", "env", ".", "min_length", ",", "min_length", "+", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "alg", ".", "algorithmic_env", ".", "AlgorithmicEnv", ".", "reward_shortfalls", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_walk_off_the_end": [[68, 85], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "", "", "def", "test_walk_off_the_end", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "# Walk off the end", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "self", ".", "env", ".", "base", ")", "\n", "self", ".", "assertEqual", "(", "r", ",", "0", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "# Walk further off track", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "self", ".", "env", ".", "base", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "# Return to the first input character", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "self", ".", "env", ".", "base", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "RIGHT", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_grid_naviation": [[86, 104], ["gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.imprint", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv._movement_idx", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertFalse", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.imprint", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._movement_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "test_grid_naviation", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "rows", "=", "2", ",", "base", "=", "6", ")", "\n", "N", ",", "S", ",", "E", ",", "W", "=", "[", "env", ".", "_movement_idx", "(", "named_dir", ")", "for", "named_dir", "in", "[", "'up'", ",", "'down'", ",", "'right'", ",", "'left'", "]", "]", "\n", "# Corresponds to a grid that looks like...", "\n", "#       0 1 2", "\n", "#       3 4 5", "\n", "canned", "=", "[", "[", "0", ",", "3", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "5", "]", "]", "\n", "imprint", "(", "env", ",", "canned", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "0", ")", "\n", "navigation", "=", "[", "\n", "(", "S", ",", "3", ")", ",", "(", "N", ",", "0", ")", ",", "(", "E", ",", "1", ")", ",", "(", "S", ",", "4", ")", ",", "(", "S", ",", "6", ")", ",", "(", "E", ",", "6", ")", ",", "(", "N", ",", "5", ")", ",", "(", "N", ",", "2", ")", ",", "(", "W", ",", "1", ")", "\n", "]", "\n", "for", "(", "movement", ",", "expected_obs", ")", "in", "navigation", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "[", "movement", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "reward", ",", "0", ")", "\n", "self", ".", "assertFalse", "(", "done", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "expected_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_grid_success": [[105, 117], ["gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.imprint", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "enumerate", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.step", "test_algorithmic.TestAlgorithmicEnvInteractions.assertGreater", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.imprint", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "", "def", "test_grid_success", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "rows", "=", "2", ",", "base", "=", "3", ")", "\n", "canned", "=", "[", "[", "1", ",", "2", "]", ",", "[", "1", ",", "0", "]", ",", "[", "2", ",", "2", "]", "]", "\n", "imprint", "(", "env", ",", "canned", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "target", "=", "[", "0", ",", "2", ",", "1", ",", "1", "]", "\n", "self", ".", "assertEqual", "(", "env", ".", "target", ",", "target", ")", "\n", "self", ".", "assertEqual", "(", "obs", ",", "1", ")", "\n", "for", "i", ",", "target_digit", "in", "enumerate", "(", "target", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "[", "0", ",", "1", ",", "target_digit", "]", ")", "\n", "self", ".", "assertGreater", "(", "reward", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "done", ",", "i", "==", "len", "(", "target", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_sane_time_limit": [[118, 126], ["test_algorithmic.TestAlgorithmicEnvInteractions.env.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertLess", "range", "test_algorithmic.TestAlgorithmicEnvInteractions.fail", "test_algorithmic.TestAlgorithmicEnvInteractions.env.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "", "def", "test_sane_time_limit", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertLess", "(", "self", ".", "env", ".", "time_limit", ",", "100", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "obs", ",", "r", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "[", "self", ".", "LEFT", ",", "0", ",", "0", "]", ")", "\n", "if", "done", ":", "\n", "                ", "return", "\n", "", "", "self", ".", "fail", "(", "\"Time limit wasn't enforced\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestAlgorithmicEnvInteractions.test_rendering": [[127, 142], ["test_algorithmic.TestAlgorithmicEnvInteractions.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.ENV_KLS", "test_algorithmic.imprint", "test_algorithmic.TestAlgorithmicEnvInteractions.reset", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions.assertEqual", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_target", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_target", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs", "test_algorithmic.TestAlgorithmicEnvInteractions._get_str_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.imprint", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs"], ["", "def", "test_rendering", "(", "self", ")", ":", "\n", "        ", "env", "=", "self", ".", "env", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", ")", ",", "'A'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "1", ")", ",", "'B'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "-", "1", ")", ",", "' '", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "2", ")", ",", "' '", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_target", "(", "0", ")", ",", "'A'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_target", "(", "1", ")", ",", "'B'", ")", "\n", "# Test numerical alphabet rendering", "\n", "env", "=", "self", ".", "ENV_KLS", "(", "base", "=", "3", ",", "chars", "=", "False", ")", "\n", "imprint", "(", "env", ",", "self", ".", "CANNED_INPUT", ")", "\n", "env", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", ")", ",", "'0'", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "_get_str_obs", "(", "1", ")", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestTargets.test_reverse_target": [[146, 158], ["gym.envs.algorithmic.reverse.ReverseEnv", "gym.envs.algorithmic.reverse.ReverseEnv.target_from_input_data", "test_algorithmic.TestTargets.assertEqual"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["def", "test_reverse_target", "(", "self", ")", ":", "\n", "        ", "input_expected", "=", "[", "\n", "(", "[", "0", "]", ",", "[", "0", "]", ")", ",", "\n", "(", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ")", ",", "\n", "(", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ")", ",", "\n", "(", "[", "1", ",", "0", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", "]", ")", ",", "\n", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "0", ",", "0", "]", ")", ",", "\n", "]", "\n", "env", "=", "alg", ".", "reverse", ".", "ReverseEnv", "(", ")", "\n", "for", "input_arr", ",", "expected", "in", "input_expected", ":", "\n", "            ", "target", "=", "env", ".", "target_from_input_data", "(", "input_arr", ")", "\n", "self", ".", "assertEqual", "(", "target", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestTargets.test_reversed_addition_target": [[159, 168], ["gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.TestTargets.assertEqual", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "", "def", "test_reversed_addition_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "base", "=", "3", ")", "\n", "input_expected", "=", "[", "\n", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "2", ",", "2", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "1", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "2", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ")", ",", "\n", "]", "\n", "for", "(", "input_grid", ",", "expected_target", ")", "in", "input_expected", ":", "\n", "            ", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "input_grid", ")", ",", "expected_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestTargets.test_reversed_addition_3rows": [[169, 177], ["gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv", "test_algorithmic.TestTargets.assertEqual", "gym.envs.algorithmic.reversed_addition.ReversedAdditionEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "", "def", "test_reversed_addition_3rows", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "reversed_addition", ".", "ReversedAdditionEnv", "(", "base", "=", "3", ",", "rows", "=", "3", ")", "\n", "input_expected", "=", "[", "\n", "(", "[", "[", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ",", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "[", "[", "1", ",", "1", ",", "2", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ",", "[", "1", ",", "0", ",", "1", "]", ")", ",", "\n", "]", "\n", "for", "(", "input_grid", ",", "expected_target", ")", "in", "input_expected", ":", "\n", "            ", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "input_grid", ")", ",", "expected_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestTargets.test_copy_target": [[178, 181], ["gym.envs.algorithmic.copy_.CopyEnv", "test_algorithmic.TestTargets.assertEqual", "gym.envs.algorithmic.copy_.CopyEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "", "def", "test_copy_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "copy_", ".", "CopyEnv", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestTargets.test_duplicated_input_target": [[182, 185], ["gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv", "test_algorithmic.TestTargets.assertEqual", "gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "def", "test_duplicated_input_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "duplicated_input", ".", "DuplicatedInputEnv", "(", "duplication", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ")", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestTargets.test_repeat_copy_target": [[186, 189], ["gym.envs.algorithmic.repeat_copy.RepeatCopyEnv", "test_algorithmic.TestTargets.assertEqual", "gym.envs.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data"], ["", "def", "test_repeat_copy_target", "(", "self", ")", ":", "\n", "        ", "env", "=", "alg", ".", "repeat_copy", ".", "RepeatCopyEnv", "(", ")", "\n", "self", ".", "assertEqual", "(", "env", ".", "target_from_input_data", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "[", "0", ",", "1", ",", "2", ",", "2", ",", "1", ",", "0", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestInputGeneration.test_tape_inputs": [[193, 203], ["env_kls", "range", "env_kls.generate_input_data", "test_algorithmic.TestInputGeneration.assertTrue", "test_algorithmic.TestInputGeneration.assertLessEqual", "all", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["def", "test_tape_inputs", "(", "self", ")", ":", "\n", "        ", "for", "env_kls", "in", "ALL_TAPE_ENVS", ":", "\n", "            ", "env", "=", "env_kls", "(", ")", "\n", "for", "size", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "                ", "input_tape", "=", "env", ".", "generate_input_data", "(", "size", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "0", "<=", "x", "<=", "env", ".", "base", "for", "x", "in", "input_tape", ")", ",", "\n", "\"Invalid input tape from env {}: {}\"", ".", "format", "(", "env_kls", ",", "input_tape", ")", ")", "\n", "# DuplicatedInput needs to generate inputs with even length,", "\n", "# so it may be short one", "\n", "self", ".", "assertLessEqual", "(", "len", "(", "input_tape", ")", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestInputGeneration.test_grid_inputs": [[204, 214], ["env_kls", "range", "env_kls.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertTrue", "test_algorithmic.TestInputGeneration.assertTrue", "len", "all", "all", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["", "", "", "def", "test_grid_inputs", "(", "self", ")", ":", "\n", "        ", "for", "env_kls", "in", "ALL_GRID_ENVS", ":", "\n", "            ", "env", "=", "env_kls", "(", ")", "\n", "for", "size", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "                ", "input_grid", "=", "env", ".", "generate_input_data", "(", "size", ")", "\n", "# Should get \"size\" sublists, each of length self.rows (not the", "\n", "# opposite, as you might expect)", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_grid", ")", ",", "size", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "len", "(", "col", ")", "==", "env", ".", "rows", "for", "col", "in", "input_grid", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "0", "<=", "x", "<=", "env", ".", "base", "for", "x", "in", "input_grid", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.TestInputGeneration.test_duplicatedinput_inputs": [[215, 237], ["gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv", "gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv", "gym.envs.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "test_algorithmic.TestInputGeneration.assertEqual", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data"], ["", "", "", "def", "test_duplicatedinput_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"The duplicated_input env needs to generate strings with the appropriate\n        amount of repetiion.\"\"\"", "\n", "env", "=", "alg", ".", "duplicated_input", ".", "DuplicatedInputEnv", "(", "duplication", "=", "2", ")", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "4", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "2", "]", ",", "input_tape", "[", "3", "]", ")", "\n", "# If requested input size isn't a multiple of duplication, go lower", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "3", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "# If requested input size is *less than* duplication, go up", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "\n", "env", "=", "alg", ".", "duplicated_input", ".", "DuplicatedInputEnv", "(", "duplication", "=", "3", ")", "\n", "input_tape", "=", "env", ".", "generate_input_data", "(", "6", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "input_tape", ")", ",", "6", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "0", "]", ",", "input_tape", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "input_tape", "[", "1", "]", ",", "input_tape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_algorithmic.imprint": [[17, 22], ["None"], "function", ["None"], ["def", "imprint", "(", "env", ",", "input_arr", ")", ":", "\n", "    ", "\"\"\"Monkey-patch the given environment so that when reset() is called, the\n    input tape/grid will be set to the given data, rather than being randomly\n    generated.\"\"\"", "\n", "env", ".", "generate_input_data", "=", "lambda", "_", ":", "input_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.BrokenRecordableEnv.render": [[13, 15], ["None"], "methods", ["None"], ["def", "render", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.UnrecordableEnv.render": [[19, 21], ["None"], "methods", ["None"], ["def", "render", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.test_record_simple": [[22, 33], ["gym.make", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "gym.make.reset", "gym.wrappers.monitoring.video_recorder.VideoRecorder.capture_frame", "gym.wrappers.monitoring.video_recorder.VideoRecorder.close", "os.path.exists", "open", "os.fstat", "open.fileno"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "", "def", "test_record_simple", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "env", ".", "reset", "(", ")", "\n", "rec", ".", "capture_frame", "(", ")", "\n", "rec", ".", "close", "(", ")", "\n", "assert", "not", "rec", ".", "empty", "\n", "assert", "not", "rec", ".", "broken", "\n", "assert", "os", ".", "path", ".", "exists", "(", "rec", ".", "path", ")", "\n", "f", "=", "open", "(", "rec", ".", "path", ")", "\n", "assert", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", ">", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.test_no_frames": [[34, 41], ["test_video_recorder.BrokenRecordableEnv", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "gym.wrappers.monitoring.video_recorder.VideoRecorder.close", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "def", "test_no_frames", "(", ")", ":", "\n", "    ", "env", "=", "BrokenRecordableEnv", "(", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "rec", ".", "close", "(", ")", "\n", "assert", "rec", ".", "empty", "\n", "assert", "rec", ".", "functional", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "rec", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.test_record_unrecordable_method": [[42, 47], ["test_video_recorder.UnrecordableEnv", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "gym.wrappers.monitoring.video_recorder.VideoRecorder.close"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "test_record_unrecordable_method", "(", ")", ":", "\n", "    ", "env", "=", "UnrecordableEnv", "(", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "assert", "not", "rec", ".", "enabled", "\n", "rec", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.test_record_breaking_render_method": [[48, 56], ["test_video_recorder.BrokenRecordableEnv", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "gym.wrappers.monitoring.video_recorder.VideoRecorder.capture_frame", "gym.wrappers.monitoring.video_recorder.VideoRecorder.close", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "def", "test_record_breaking_render_method", "(", ")", ":", "\n", "    ", "env", "=", "BrokenRecordableEnv", "(", ")", "\n", "rec", "=", "VideoRecorder", "(", "env", ")", "\n", "rec", ".", "capture_frame", "(", ")", "\n", "rec", ".", "close", "(", ")", "\n", "assert", "rec", ".", "empty", "\n", "assert", "rec", ".", "broken", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "rec", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_video_recorder.test_text_envs": [[57, 66], ["gym.make", "gym.wrappers.monitoring.video_recorder.VideoRecorder", "gym.make.reset", "gym.wrappers.monitoring.video_recorder.VideoRecorder.capture_frame", "gym.wrappers.monitoring.video_recorder.VideoRecorder.close", "os.remove"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "test_text_envs", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "'FrozenLake-v0'", ")", "\n", "video", "=", "VideoRecorder", "(", "env", ")", "\n", "try", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "video", ".", "capture_frame", "(", ")", "\n", "video", ".", "close", "(", ")", "\n", "", "finally", ":", "\n", "        ", "os", ".", "remove", "(", "video", ".", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.helpers.tempdir": [[5, 10], ["tempfile.mkdtemp", "shutil.rmtree"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "tempdir", "(", ")", ":", "\n", "    ", "temp", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "yield", "temp", "\n", "shutil", ".", "rmtree", "(", "temp", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_wrappers.test_no_double_wrapping": [[8, 22], ["tempfile.mkdtemp", "gym.make", "gym.wrappers.Monitor", "wrappers.Monitor.close", "shutil.rmtree", "gym.wrappers.Monitor"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["def", "test_no_double_wrapping", "(", ")", ":", "\n", "    ", "temp", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "try", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "\"FrozenLake-v0\"", ")", "\n", "env", "=", "wrappers", ".", "Monitor", "(", "env", ",", "temp", ")", "\n", "try", ":", "\n", "            ", "env", "=", "wrappers", ".", "Monitor", "(", "env", ",", "temp", ")", "\n", "", "except", "error", ".", "DoubleWrapperError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"Should not allow double wrapping\"", "\n", "", "env", ".", "close", "(", ")", "\n", "", "finally", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "temp", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_core.ArgumentEnv.__init__": [[6, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "self", ".", "calls", "+=", "1", "\n", "self", ".", "arg", "=", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_core.test_env_instantiation": [[10, 16], ["test_core.ArgumentEnv"], "function", ["None"], ["", "", "def", "test_env_instantiation", "(", ")", ":", "\n", "# This looks like a pretty trivial, but given our usage of", "\n", "# __new__, it's worth having.", "\n", "    ", "env", "=", "ArgumentEnv", "(", "'arg'", ")", "\n", "assert", "env", ".", "arg", "==", "'arg'", "\n", "assert", "env", ".", "calls", "==", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_spaces.test_roundtripping": [[7, 33], ["pytest.mark.parametrize", "space.sample", "space.sample", "space.contains", "space.contains", "space.to_jsonable", "json.loads", "space.from_jsonable", "space.to_jsonable", "space.to_jsonable", "space.to_jsonable", "space.to_jsonable", "json.dumps", "gym.spaces.Discrete", "gym.spaces.Tuple", "gym.spaces.Tuple", "gym.spaces.Tuple", "gym.spaces.MultiDiscrete", "gym.spaces.Dict", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Box", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.from_jsonable", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"space\"", ",", "[", "\n", "Discrete", "(", "3", ")", ",", "\n", "Tuple", "(", "[", "Discrete", "(", "5", ")", ",", "Discrete", "(", "10", ")", "]", ")", ",", "\n", "Tuple", "(", "[", "Discrete", "(", "5", ")", ",", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "1", ",", "5", "]", ")", ")", "]", ")", ",", "\n", "Tuple", "(", "(", "Discrete", "(", "5", ")", ",", "Discrete", "(", "2", ")", ",", "Discrete", "(", "2", ")", ")", ")", ",", "\n", "MultiDiscrete", "(", "[", "2", ",", "2", ",", "100", "]", ")", ",", "\n", "Dict", "(", "{", "\"position\"", ":", "Discrete", "(", "5", ")", ",", "\"velocity\"", ":", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "1", ",", "5", "]", ")", ")", "}", ")", ",", "\n", "]", ")", "\n", "def", "test_roundtripping", "(", "space", ")", ":", "\n", "    ", "sample_1", "=", "space", ".", "sample", "(", ")", "\n", "sample_2", "=", "space", ".", "sample", "(", ")", "\n", "assert", "space", ".", "contains", "(", "sample_1", ")", "\n", "assert", "space", ".", "contains", "(", "sample_2", ")", "\n", "json_rep", "=", "space", ".", "to_jsonable", "(", "[", "sample_1", ",", "sample_2", "]", ")", "\n", "\n", "json_roundtripped", "=", "json", ".", "loads", "(", "json", ".", "dumps", "(", "json_rep", ")", ")", "\n", "\n", "samples_after_roundtrip", "=", "space", ".", "from_jsonable", "(", "json_roundtripped", ")", "\n", "sample_1_prime", ",", "sample_2_prime", "=", "samples_after_roundtrip", "\n", "\n", "s1", "=", "space", ".", "to_jsonable", "(", "[", "sample_1", "]", ")", "\n", "s1p", "=", "space", ".", "to_jsonable", "(", "[", "sample_1_prime", "]", ")", "\n", "s2", "=", "space", ".", "to_jsonable", "(", "[", "sample_2", "]", ")", "\n", "s2p", "=", "space", ".", "to_jsonable", "(", "[", "sample_2_prime", "]", ")", "\n", "assert", "s1", "==", "s1p", ",", "\"Expected {} to equal {}\"", ".", "format", "(", "s1", ",", "s1p", ")", "\n", "assert", "s2", "==", "s2p", ",", "\"Expected {} to equal {}\"", ".", "format", "(", "s2", ",", "s2p", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_schedules.test_piecewise_schedule": [[6, 21], ["baselines.common.schedules.PiecewiseSchedule", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value"], ["def", "test_piecewise_schedule", "(", ")", ":", "\n", "    ", "ps", "=", "PiecewiseSchedule", "(", "[", "(", "-", "5", ",", "100", ")", ",", "(", "5", ",", "200", ")", ",", "(", "10", ",", "50", ")", ",", "(", "100", ",", "50", ")", ",", "(", "200", ",", "-", "50", ")", "]", ",", "outside_value", "=", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "-", "10", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "0", ")", ",", "150", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "5", ")", ",", "200", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "9", ")", ",", "80", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "50", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "80", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "150", ")", ",", "0", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "175", ")", ",", "-", "25", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "201", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "500", ")", ",", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "200", "-", "1e-10", ")", ",", "-", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_schedules.test_constant_schedule": [[23, 27], ["baselines.common.schedules.ConstantSchedule", "range", "numpy.isclose", "baselines.common.schedules.ConstantSchedule.value"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value"], ["", "def", "test_constant_schedule", "(", ")", ":", "\n", "    ", "cs", "=", "ConstantSchedule", "(", "5", ")", "\n", "for", "i", "in", "range", "(", "-", "100", ",", "100", ")", ":", "\n", "        ", "assert", "np", ".", "isclose", "(", "cs", ".", "value", "(", "i", ")", ",", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_tf_util.test_set_value": [[11, 28], ["tensorflow.Variable", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.set_value", "tensorflow.get_default_graph", "tf.get_default_graph.finalize", "baselines.common.tf_util.set_value", "tf.Variable.eval", "tf.Variable.eval", "tf.Variable.eval"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.set_value", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.set_value", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.eval", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.eval", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.eval"], ["def", "test_set_value", "(", ")", ":", "\n", "    ", "a", "=", "tf", ".", "Variable", "(", "42.", ")", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "        ", "set_value", "(", "a", ",", "5", ")", "\n", "assert", "a", ".", "eval", "(", ")", "==", "5", "\n", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "g", ".", "finalize", "(", ")", "\n", "set_value", "(", "a", ",", "6", ")", "\n", "assert", "a", ".", "eval", "(", ")", "==", "6", "\n", "\n", "# test the test", "\n", "try", ":", "\n", "            ", "assert", "a", ".", "eval", "(", ")", "==", "7", "\n", "", "except", "AssertionError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"assertion should have failed\"", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_tf_util.test_function": [[30, 44], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.tf_util.function", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "baselines.common.tf_util.function.", "baselines.common.tf_util.function.", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.initialize"], ["", "", "", "def", "test_function", "(", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"y\"", ")", "\n", "z", "=", "3", "*", "x", "+", "2", "*", "y", "\n", "lin", "=", "function", "(", "[", "x", ",", "y", "]", ",", "z", ",", "givens", "=", "{", "y", ":", "0", "}", ")", "\n", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "        ", "initialize", "(", ")", "\n", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "x", "=", "3", ")", "==", "9", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "assert", "lin", "(", "x", "=", "2", ",", "y", "=", "3", ")", "==", "12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_tf_util.test_multikwargs": [[46, 64], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "baselines.common.tf_util.function", "tensorflow.variable_scope", "tensorflow.placeholder", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "baselines.common.tf_util.function.", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.initialize"], ["", "", "def", "test_multikwargs", "(", ")", ":", "\n", "    ", "tf", ".", "reset_default_graph", "(", ")", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"other\"", ")", ":", "\n", "        ", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "", "z", "=", "3", "*", "x", "+", "2", "*", "x2", "\n", "\n", "lin", "=", "function", "(", "[", "x", ",", "x2", "]", ",", "z", ",", "givens", "=", "{", "x2", ":", "0", "}", ")", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "        ", "initialize", "(", ")", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "expt_caught", "=", "False", "\n", "try", ":", "\n", "            ", "lin", "(", "x", "=", "2", ")", "\n", "", "except", "AssertionError", ":", "\n", "            ", "expt_caught", "=", "True", "\n", "", "assert", "expt_caught", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_segment_tree.test_tree_set": [[6, 18], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["def", "test_tree_set", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "2", ")", ",", "0.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "4.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_segment_tree.test_tree_set_overlap": [[20, 31], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "test_tree_set_overlap", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "1", ",", "2", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_segment_tree.test_prefixsum_idx": [[33, 45], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.0", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.5", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.01", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "4.00", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_segment_tree.test_prefixsum_idx2": [[47, 61], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx2", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "0.5", "\n", "tree", "[", "1", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.00", ")", "==", "0", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.55", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.51", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "5.50", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.tests.test_segment_tree.test_max_interval_tree": [[63, 96], ["baselines.common.segment_tree.MinSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "test_max_interval_tree", "(", ")", ":", "\n", "    ", "tree", "=", "MinSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "0.5", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "0.7", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "4.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "3", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "-", "1", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvSpec.__init__": [[36, 76], ["tags.get", "env_id_re.search", "env_id_re.search.group", "tags.get", "gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get"], ["def", "__init__", "(", "self", ",", "id", ",", "entry_point", "=", "None", ",", "trials", "=", "100", ",", "reward_threshold", "=", "None", ",", "local_only", "=", "False", ",", "kwargs", "=", "None", ",", "nondeterministic", "=", "False", ",", "tags", "=", "None", ",", "max_episode_steps", "=", "None", ",", "max_episode_seconds", "=", "None", ",", "timestep_limit", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "# Evaluation parameters", "\n", "self", ".", "trials", "=", "trials", "\n", "self", ".", "reward_threshold", "=", "reward_threshold", "\n", "# Environment properties", "\n", "self", ".", "nondeterministic", "=", "nondeterministic", "\n", "\n", "if", "tags", "is", "None", ":", "\n", "            ", "tags", "=", "{", "}", "\n", "", "self", ".", "tags", "=", "tags", "\n", "\n", "# BACKWARDS COMPAT 2017/1/18", "\n", "if", "tags", ".", "get", "(", "'wrapper_config.TimeLimit.max_episode_steps'", ")", ":", "\n", "            ", "max_episode_steps", "=", "tags", ".", "get", "(", "'wrapper_config.TimeLimit.max_episode_steps'", ")", "\n", "# TODO: Add the following deprecation warning after 2017/02/18", "\n", "# warnings.warn(\"DEPRECATION WARNING wrapper_config.TimeLimit has been deprecated. Replace any calls to `register(tags={'wrapper_config.TimeLimit.max_episode_steps': 200)}` with `register(max_episode_steps=200)`. This change was made 2017/1/31 and is included in gym version 0.8.0. If you are getting many of these warnings, you may need to update universe past version 0.21.3\")", "\n", "\n", "", "tags", "[", "'wrapper_config.TimeLimit.max_episode_steps'", "]", "=", "max_episode_steps", "\n", "######", "\n", "\n", "# BACKWARDS COMPAT 2017/1/31", "\n", "if", "timestep_limit", "is", "not", "None", ":", "\n", "            ", "max_episode_steps", "=", "timestep_limit", "\n", "# TODO: Add the following deprecation warning after 2017/03/01", "\n", "# warnings.warn(\"register(timestep_limit={}) is deprecated. Use register(max_episode_steps={}) instead.\".format(timestep_limit, timestep_limit))", "\n", "######", "\n", "\n", "", "self", ".", "max_episode_steps", "=", "max_episode_steps", "\n", "self", ".", "max_episode_seconds", "=", "max_episode_seconds", "\n", "\n", "# We may make some of these other parameters public if they're", "\n", "# useful.", "\n", "match", "=", "env_id_re", ".", "search", "(", "id", ")", "\n", "if", "not", "match", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Attempted to register malformed environment ID: {}. (Currently all IDs must be of the form {}.)'", ".", "format", "(", "id", ",", "env_id_re", ".", "pattern", ")", ")", "\n", "", "self", ".", "_env_name", "=", "match", ".", "group", "(", "1", ")", "\n", "self", ".", "_entry_point", "=", "entry_point", "\n", "self", ".", "_local_only", "=", "local_only", "\n", "self", ".", "_kwargs", "=", "{", "}", "if", "kwargs", "is", "None", "else", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvSpec.make": [[77, 92], ["gym.error.Error", "callable", "registration.EnvSpec._entry_point", "registration.load", "load."], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load"], ["", "def", "make", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiates an instance of the environment with appropriate kwargs\"\"\"", "\n", "if", "self", ".", "_entry_point", "is", "None", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Attempting to make deprecated env {}. (HINT: is there a newer registered version of this env?)'", ".", "format", "(", "self", ".", "id", ")", ")", "\n", "\n", "", "elif", "callable", "(", "self", ".", "_entry_point", ")", ":", "\n", "            ", "env", "=", "self", ".", "_entry_point", "(", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "load", "(", "self", ".", "_entry_point", ")", "\n", "env", "=", "cls", "(", "**", "self", ".", "_kwargs", ")", "\n", "\n", "# Make the enviroment aware of which spec it came from.", "\n", "", "env", ".", "unwrapped", ".", "spec", "=", "self", "\n", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvSpec.__repr__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"EnvSpec({})\"", ".", "format", "(", "self", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvSpec.timestep_limit": [[100, 103], ["None"], "methods", ["None"], ["", "@", "timestep_limit", ".", "setter", "\n", "def", "timestep_limit", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "max_episode_steps", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.__init__": [[113, 115], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "env_specs", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.make": [[116, 132], ["gym.logger.info", "registration.EnvRegistry.spec", "registration.EnvRegistry.make", "hasattr", "hasattr", "registration.patch_deprecated_methods", "TimeLimit", "getattr", "registration.EnvRegistry.tags.get"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.patch_deprecated_methods", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get"], ["", "def", "make", "(", "self", ",", "id", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Making new env: %s'", ",", "id", ")", "\n", "spec", "=", "self", ".", "spec", "(", "id", ")", "\n", "env", "=", "spec", ".", "make", "(", ")", "\n", "# We used to have people override _reset/_step rather than", "\n", "# reset/step. Set _gym_disable_underscore_compat = True on", "\n", "# your environment if you use these methods and don't want", "\n", "# compatibility code to be invoked.", "\n", "if", "hasattr", "(", "env", ",", "\"_reset\"", ")", "and", "hasattr", "(", "env", ",", "\"_step\"", ")", "and", "not", "getattr", "(", "env", ",", "\"_gym_disable_underscore_compat\"", ",", "False", ")", ":", "\n", "            ", "patch_deprecated_methods", "(", "env", ")", "\n", "", "if", "(", "env", ".", "spec", ".", "timestep_limit", "is", "not", "None", ")", "and", "not", "spec", ".", "tags", ".", "get", "(", "'vnc'", ")", ":", "\n", "            ", "from", "gym", ".", "wrappers", ".", "time_limit", "import", "TimeLimit", "\n", "env", "=", "TimeLimit", "(", "env", ",", "\n", "max_episode_steps", "=", "env", ".", "spec", ".", "max_episode_steps", ",", "\n", "max_episode_seconds", "=", "env", ".", "spec", ".", "max_episode_seconds", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all": [[134, 136], ["registration.EnvRegistry.env_specs.values"], "methods", ["None"], ["", "def", "all", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env_specs", ".", "values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.spec": [[137, 154], ["env_id_re.search", "gym.error.Error", "env_id_re.search.group", "id.encode", "gym.error.DeprecatedEnv", "gym.error.UnregisteredEnv", "registration.EnvRegistry.env_specs.items"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode"], ["", "def", "spec", "(", "self", ",", "id", ")", ":", "\n", "        ", "match", "=", "env_id_re", ".", "search", "(", "id", ")", "\n", "if", "not", "match", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Attempted to look up malformed environment ID: {}. (Currently all IDs must be of the form {}.)'", ".", "format", "(", "id", ".", "encode", "(", "'utf-8'", ")", ",", "env_id_re", ".", "pattern", ")", ")", "\n", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "env_specs", "[", "id", "]", "\n", "", "except", "KeyError", ":", "\n", "# Parse the env name and check to see if it matches the non-version", "\n", "# part of a valid env (could also check the exact number here)", "\n", "            ", "env_name", "=", "match", ".", "group", "(", "1", ")", "\n", "matching_envs", "=", "[", "valid_env_name", "for", "valid_env_name", ",", "valid_env_spec", "in", "self", ".", "env_specs", ".", "items", "(", ")", "\n", "if", "env_name", "==", "valid_env_spec", ".", "_env_name", "]", "\n", "if", "matching_envs", ":", "\n", "                ", "raise", "error", ".", "DeprecatedEnv", "(", "'Env {} not found (valid versions include {})'", ".", "format", "(", "id", ",", "matching_envs", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "error", ".", "UnregisteredEnv", "(", "'No registered env with id: {}'", ".", "format", "(", "id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.register": [[155, 159], ["registration.EnvSpec", "gym.error.Error"], "methods", ["None"], ["", "", "", "def", "register", "(", "self", ",", "id", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "id", "in", "self", ".", "env_specs", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Cannot re-register id: {}'", ".", "format", "(", "id", ")", ")", "\n", "", "self", ".", "env_specs", "[", "id", "]", "=", "EnvSpec", "(", "id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load": [[11, 16], ["pkg_resources.EntryPoint.parse", "pkg_resources.EntryPoint.parse.load"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load"], ["def", "load", "(", "name", ")", ":", "\n", "    ", "import", "pkg_resources", "# takes ~400ms to load, so we import it lazily", "\n", "entry_point", "=", "pkg_resources", ".", "EntryPoint", ".", "parse", "(", "'x={}'", ".", "format", "(", "name", ")", ")", "\n", "result", "=", "entry_point", ".", "load", "(", "False", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register": [[163, 165], ["registry.register"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register"], ["def", "register", "(", "id", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "registry", ".", "register", "(", "id", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make": [[166, 168], ["registry.make"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make"], ["", "def", "make", "(", "id", ")", ":", "\n", "    ", "return", "registry", ".", "make", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec": [[169, 171], ["registry.spec"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.spec"], ["", "def", "spec", "(", "id", ")", ":", "\n", "    ", "return", "registry", ".", "spec", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.patch_deprecated_methods": [[174, 192], ["gym.logger.warn", "env._render", "env._render", "str", "type"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["def", "patch_deprecated_methods", "(", "env", ")", ":", "\n", "    ", "\"\"\"\n    Methods renamed from '_method' to 'method', render() no longer has 'close' parameter, close is a separate method.\n    For backward compatibility, this makes it possible to work with unmodified environments.\n    \"\"\"", "\n", "global", "warn_once", "\n", "if", "warn_once", ":", "\n", "        ", "logger", ".", "warn", "(", "\"Environment '%s' has deprecated methods '_step' and '_reset' rather than 'step' and 'reset'. Compatibility code invoked. Set _gym_disable_underscore_compat = True to disable this behavior.\"", "%", "str", "(", "type", "(", "env", ")", ")", ")", "\n", "warn_once", "=", "False", "\n", "", "env", ".", "reset", "=", "env", ".", "_reset", "\n", "env", ".", "step", "=", "env", ".", "_step", "\n", "env", ".", "seed", "=", "env", ".", "_seed", "\n", "def", "render", "(", "mode", ")", ":", "\n", "        ", "return", "env", ".", "_render", "(", "mode", ",", "close", "=", "False", ")", "\n", "", "def", "close", "(", ")", ":", "\n", "        ", "env", ".", "_render", "(", "\"human\"", ",", "close", "=", "True", ")", "\n", "", "env", ".", "render", "=", "render", "\n", "env", ".", "close", "=", "close", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.__init__._merge": [[404, 407], ["a.update"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2mat": [[111, 133], ["numpy.asarray", "numpy.empty", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos"], "function", ["None"], ["def", "euler2mat", "(", "euler", ")", ":", "\n", "    ", "\"\"\" Convert Euler Angles to Rotation Matrix.  See rotation.py for notes \"\"\"", "\n", "euler", "=", "np", ".", "asarray", "(", "euler", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "assert", "euler", ".", "shape", "[", "-", "1", "]", "==", "3", ",", "\"Invalid shaped euler {}\"", ".", "format", "(", "euler", ")", "\n", "\n", "ai", ",", "aj", ",", "ak", "=", "-", "euler", "[", "...", ",", "2", "]", ",", "-", "euler", "[", "...", ",", "1", "]", ",", "-", "euler", "[", "...", ",", "0", "]", "\n", "si", ",", "sj", ",", "sk", "=", "np", ".", "sin", "(", "ai", ")", ",", "np", ".", "sin", "(", "aj", ")", ",", "np", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "np", ".", "cos", "(", "ai", ")", ",", "np", ".", "cos", "(", "aj", ")", ",", "np", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "mat", "=", "np", ".", "empty", "(", "euler", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "mat", "[", "...", ",", "2", ",", "2", "]", "=", "cj", "*", "ck", "\n", "mat", "[", "...", ",", "2", ",", "1", "]", "=", "sj", "*", "sc", "-", "cs", "\n", "mat", "[", "...", ",", "2", ",", "0", "]", "=", "sj", "*", "cc", "+", "ss", "\n", "mat", "[", "...", ",", "1", ",", "2", "]", "=", "cj", "*", "sk", "\n", "mat", "[", "...", ",", "1", ",", "1", "]", "=", "sj", "*", "ss", "+", "cc", "\n", "mat", "[", "...", ",", "1", ",", "0", "]", "=", "sj", "*", "cs", "-", "sc", "\n", "mat", "[", "...", ",", "0", ",", "2", "]", "=", "-", "sj", "\n", "mat", "[", "...", ",", "0", ",", "1", "]", "=", "cj", "*", "si", "\n", "mat", "[", "...", ",", "0", ",", "0", "]", "=", "cj", "*", "ci", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2quat": [[135, 152], ["numpy.asarray", "numpy.empty", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "def", "euler2quat", "(", "euler", ")", ":", "\n", "    ", "\"\"\" Convert Euler Angles to Quaternions.  See rotation.py for notes \"\"\"", "\n", "euler", "=", "np", ".", "asarray", "(", "euler", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "assert", "euler", ".", "shape", "[", "-", "1", "]", "==", "3", ",", "\"Invalid shape euler {}\"", ".", "format", "(", "euler", ")", "\n", "\n", "ai", ",", "aj", ",", "ak", "=", "euler", "[", "...", ",", "2", "]", "/", "2", ",", "-", "euler", "[", "...", ",", "1", "]", "/", "2", ",", "euler", "[", "...", ",", "0", "]", "/", "2", "\n", "si", ",", "sj", ",", "sk", "=", "np", ".", "sin", "(", "ai", ")", ",", "np", ".", "sin", "(", "aj", ")", ",", "np", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "np", ".", "cos", "(", "ai", ")", ",", "np", ".", "cos", "(", "aj", ")", ",", "np", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "quat", "=", "np", ".", "empty", "(", "euler", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "4", ",", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "quat", "[", "...", ",", "0", "]", "=", "cj", "*", "cc", "+", "sj", "*", "ss", "\n", "quat", "[", "...", ",", "3", "]", "=", "cj", "*", "sc", "-", "sj", "*", "cs", "\n", "quat", "[", "...", ",", "2", "]", "=", "-", "(", "cj", "*", "ss", "+", "sj", "*", "cc", ")", "\n", "quat", "[", "...", ",", "1", "]", "=", "cj", "*", "cs", "-", "sj", "*", "sc", "\n", "return", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.mat2euler": [[154, 172], ["numpy.asarray", "numpy.sqrt", "numpy.empty", "numpy.where", "numpy.where", "numpy.where", "numpy.arctan2", "numpy.arctan2", "numpy.arctan2", "numpy.arctan2", "numpy.arctan2"], "function", ["None"], ["", "def", "mat2euler", "(", "mat", ")", ":", "\n", "    ", "\"\"\" Convert Rotation Matrix to Euler Angles.  See rotation.py for notes \"\"\"", "\n", "mat", "=", "np", ".", "asarray", "(", "mat", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "assert", "mat", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "3", ",", "3", ")", ",", "\"Invalid shape matrix {}\"", ".", "format", "(", "mat", ")", "\n", "\n", "cy", "=", "np", ".", "sqrt", "(", "mat", "[", "...", ",", "2", ",", "2", "]", "*", "mat", "[", "...", ",", "2", ",", "2", "]", "+", "mat", "[", "...", ",", "1", ",", "2", "]", "*", "mat", "[", "...", ",", "1", ",", "2", "]", ")", "\n", "condition", "=", "cy", ">", "_EPS4", "\n", "euler", "=", "np", ".", "empty", "(", "mat", ".", "shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "euler", "[", "...", ",", "2", "]", "=", "np", ".", "where", "(", "condition", ",", "\n", "-", "np", ".", "arctan2", "(", "mat", "[", "...", ",", "0", ",", "1", "]", ",", "mat", "[", "...", ",", "0", ",", "0", "]", ")", ",", "\n", "-", "np", ".", "arctan2", "(", "-", "mat", "[", "...", ",", "1", ",", "0", "]", ",", "mat", "[", "...", ",", "1", ",", "1", "]", ")", ")", "\n", "euler", "[", "...", ",", "1", "]", "=", "np", ".", "where", "(", "condition", ",", "\n", "-", "np", ".", "arctan2", "(", "-", "mat", "[", "...", ",", "0", ",", "2", "]", ",", "cy", ")", ",", "\n", "-", "np", ".", "arctan2", "(", "-", "mat", "[", "...", ",", "0", ",", "2", "]", ",", "cy", ")", ")", "\n", "euler", "[", "...", ",", "0", "]", "=", "np", ".", "where", "(", "condition", ",", "\n", "-", "np", ".", "arctan2", "(", "mat", "[", "...", ",", "1", ",", "2", "]", ",", "mat", "[", "...", ",", "2", ",", "2", "]", ")", ",", "\n", "0.0", ")", "\n", "return", "euler", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.mat2quat": [[174, 209], ["numpy.asarray", "numpy.zeros", "numpy.empty", "numpy.nditer", "numpy.linalg.eigh", "np.nditer.iternext", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.argmax"], ["", "def", "mat2quat", "(", "mat", ")", ":", "\n", "    ", "\"\"\" Convert Rotation Matrix to Quaternion.  See rotation.py for notes \"\"\"", "\n", "mat", "=", "np", ".", "asarray", "(", "mat", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "assert", "mat", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "3", ",", "3", ")", ",", "\"Invalid shape matrix {}\"", ".", "format", "(", "mat", ")", "\n", "\n", "Qxx", ",", "Qyx", ",", "Qzx", "=", "mat", "[", "...", ",", "0", ",", "0", "]", ",", "mat", "[", "...", ",", "0", ",", "1", "]", ",", "mat", "[", "...", ",", "0", ",", "2", "]", "\n", "Qxy", ",", "Qyy", ",", "Qzy", "=", "mat", "[", "...", ",", "1", ",", "0", "]", ",", "mat", "[", "...", ",", "1", ",", "1", "]", ",", "mat", "[", "...", ",", "1", ",", "2", "]", "\n", "Qxz", ",", "Qyz", ",", "Qzz", "=", "mat", "[", "...", ",", "2", ",", "0", "]", ",", "mat", "[", "...", ",", "2", ",", "1", "]", ",", "mat", "[", "...", ",", "2", ",", "2", "]", "\n", "# Fill only lower half of symmetric matrix", "\n", "K", "=", "np", ".", "zeros", "(", "mat", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "K", "[", "...", ",", "0", ",", "0", "]", "=", "Qxx", "-", "Qyy", "-", "Qzz", "\n", "K", "[", "...", ",", "1", ",", "0", "]", "=", "Qyx", "+", "Qxy", "\n", "K", "[", "...", ",", "1", ",", "1", "]", "=", "Qyy", "-", "Qxx", "-", "Qzz", "\n", "K", "[", "...", ",", "2", ",", "0", "]", "=", "Qzx", "+", "Qxz", "\n", "K", "[", "...", ",", "2", ",", "1", "]", "=", "Qzy", "+", "Qyz", "\n", "K", "[", "...", ",", "2", ",", "2", "]", "=", "Qzz", "-", "Qxx", "-", "Qyy", "\n", "K", "[", "...", ",", "3", ",", "0", "]", "=", "Qyz", "-", "Qzy", "\n", "K", "[", "...", ",", "3", ",", "1", "]", "=", "Qzx", "-", "Qxz", "\n", "K", "[", "...", ",", "3", ",", "2", "]", "=", "Qxy", "-", "Qyx", "\n", "K", "[", "...", ",", "3", ",", "3", "]", "=", "Qxx", "+", "Qyy", "+", "Qzz", "\n", "K", "/=", "3.0", "\n", "# TODO: vectorize this -- probably could be made faster", "\n", "q", "=", "np", ".", "empty", "(", "K", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "4", ",", ")", ")", "\n", "it", "=", "np", ".", "nditer", "(", "q", "[", "...", ",", "0", "]", ",", "flags", "=", "[", "'multi_index'", "]", ")", "\n", "while", "not", "it", ".", "finished", ":", "\n", "# Use Hermitian eigenvectors, values for speed", "\n", "        ", "vals", ",", "vecs", "=", "np", ".", "linalg", ".", "eigh", "(", "K", "[", "it", ".", "multi_index", "]", ")", "\n", "# Select largest eigenvector, reorder to w,x,y,z quaternion", "\n", "q", "[", "it", ".", "multi_index", "]", "=", "vecs", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "np", ".", "argmax", "(", "vals", ")", "]", "\n", "# Prefer quaternion with positive w", "\n", "# (q * -1 corresponds to same rotation as q)", "\n", "if", "q", "[", "it", ".", "multi_index", "]", "[", "0", "]", "<", "0", ":", "\n", "            ", "q", "[", "it", ".", "multi_index", "]", "*=", "-", "1", "\n", "", "it", ".", "iternext", "(", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2euler": [[211, 214], ["rotations.mat2euler", "rotations.quat2mat"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.mat2euler", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2mat"], ["", "def", "quat2euler", "(", "quat", ")", ":", "\n", "    ", "\"\"\" Convert Quaternion to Euler Angles.  See rotation.py for notes \"\"\"", "\n", "return", "mat2euler", "(", "quat2mat", "(", "quat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.subtract_euler": [[216, 223], ["rotations.euler2quat", "rotations.euler2quat", "rotations.quat_mul", "rotations.quat2euler", "rotations.quat_conjugate"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2quat", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2quat", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_mul", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2euler", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_conjugate"], ["", "def", "subtract_euler", "(", "e1", ",", "e2", ")", ":", "\n", "    ", "assert", "e1", ".", "shape", "==", "e2", ".", "shape", "\n", "assert", "e1", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "q1", "=", "euler2quat", "(", "e1", ")", "\n", "q2", "=", "euler2quat", "(", "e2", ")", "\n", "q_diff", "=", "quat_mul", "(", "q1", ",", "quat_conjugate", "(", "q2", ")", ")", "\n", "return", "quat2euler", "(", "q_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2mat": [[225, 249], ["numpy.asarray", "numpy.sum", "numpy.empty", "numpy.where", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "\"\"\" Convert Quaternion to Euler Angles.  See rotation.py for notes \"\"\"", "\n", "quat", "=", "np", ".", "asarray", "(", "quat", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "assert", "quat", ".", "shape", "[", "-", "1", "]", "==", "4", ",", "\"Invalid shape quat {}\"", ".", "format", "(", "quat", ")", "\n", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "quat", "[", "...", ",", "0", "]", ",", "quat", "[", "...", ",", "1", "]", ",", "quat", "[", "...", ",", "2", "]", ",", "quat", "[", "...", ",", "3", "]", "\n", "Nq", "=", "np", ".", "sum", "(", "quat", "*", "quat", ",", "axis", "=", "-", "1", ")", "\n", "s", "=", "2.0", "/", "Nq", "\n", "X", ",", "Y", ",", "Z", "=", "x", "*", "s", ",", "y", "*", "s", ",", "z", "*", "s", "\n", "wX", ",", "wY", ",", "wZ", "=", "w", "*", "X", ",", "w", "*", "Y", ",", "w", "*", "Z", "\n", "xX", ",", "xY", ",", "xZ", "=", "x", "*", "X", ",", "x", "*", "Y", ",", "x", "*", "Z", "\n", "yY", ",", "yZ", ",", "zZ", "=", "y", "*", "Y", ",", "y", "*", "Z", ",", "z", "*", "Z", "\n", "\n", "mat", "=", "np", ".", "empty", "(", "quat", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "mat", "[", "...", ",", "0", ",", "0", "]", "=", "1.0", "-", "(", "yY", "+", "zZ", ")", "\n", "mat", "[", "...", ",", "0", ",", "1", "]", "=", "xY", "-", "wZ", "\n", "mat", "[", "...", ",", "0", ",", "2", "]", "=", "xZ", "+", "wY", "\n", "mat", "[", "...", ",", "1", ",", "0", "]", "=", "xY", "+", "wZ", "\n", "mat", "[", "...", ",", "1", ",", "1", "]", "=", "1.0", "-", "(", "xX", "+", "zZ", ")", "\n", "mat", "[", "...", ",", "1", ",", "2", "]", "=", "yZ", "-", "wX", "\n", "mat", "[", "...", ",", "2", ",", "0", "]", "=", "xZ", "-", "wY", "\n", "mat", "[", "...", ",", "2", ",", "1", "]", "=", "yZ", "+", "wX", "\n", "mat", "[", "...", ",", "2", ",", "2", "]", "=", "1.0", "-", "(", "xX", "+", "yY", ")", "\n", "return", "np", ".", "where", "(", "(", "Nq", ">", "_FLOAT_EPS", ")", "[", "...", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "mat", ",", "np", ".", "eye", "(", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_conjugate": [[250, 254], ["None"], "function", ["None"], ["", "def", "quat_conjugate", "(", "q", ")", ":", "\n", "    ", "inv_q", "=", "-", "q", "\n", "inv_q", "[", "...", ",", "0", "]", "*=", "-", "1", "\n", "return", "inv_q", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_mul": [[255, 279], ["numpy.array", "q.swapaxes.swapaxes"], "function", ["None"], ["", "def", "quat_mul", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "assert", "q0", ".", "shape", "==", "q1", ".", "shape", "\n", "assert", "q0", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "q1", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "\n", "w0", "=", "q0", "[", "...", ",", "0", "]", "\n", "x0", "=", "q0", "[", "...", ",", "1", "]", "\n", "y0", "=", "q0", "[", "...", ",", "2", "]", "\n", "z0", "=", "q0", "[", "...", ",", "3", "]", "\n", "\n", "w1", "=", "q1", "[", "...", ",", "0", "]", "\n", "x1", "=", "q1", "[", "...", ",", "1", "]", "\n", "y1", "=", "q1", "[", "...", ",", "2", "]", "\n", "z1", "=", "q1", "[", "...", ",", "3", "]", "\n", "\n", "w", "=", "w0", "*", "w1", "-", "x0", "*", "x1", "-", "y0", "*", "y1", "-", "z0", "*", "z1", "\n", "x", "=", "w0", "*", "x1", "+", "x0", "*", "w1", "+", "y0", "*", "z1", "-", "z0", "*", "y1", "\n", "y", "=", "w0", "*", "y1", "+", "y0", "*", "w1", "+", "z0", "*", "x1", "-", "x0", "*", "z1", "\n", "z", "=", "w0", "*", "z1", "+", "z0", "*", "w1", "+", "x0", "*", "y1", "-", "y0", "*", "x1", "\n", "q", "=", "np", ".", "array", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", "\n", "if", "q", ".", "ndim", "==", "2", ":", "\n", "        ", "q", "=", "q", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "", "assert", "q", ".", "shape", "==", "q0", ".", "shape", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_rot_vec": [[280, 285], ["numpy.array", "rotations.quat_mul", "rotations.quat_mul", "rotations.quat_conjugate"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_mul", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_mul", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_conjugate"], ["", "def", "quat_rot_vec", "(", "q", ",", "v0", ")", ":", "\n", "    ", "q_v0", "=", "np", ".", "array", "(", "[", "0", ",", "v0", "[", "0", "]", ",", "v0", "[", "1", "]", ",", "v0", "[", "2", "]", "]", ")", "\n", "q_v", "=", "quat_mul", "(", "q", ",", "quat_mul", "(", "q_v0", ",", "quat_conjugate", "(", "q", ")", ")", ")", "\n", "v", "=", "q_v", "[", "1", ":", "]", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_identity": [[286, 288], ["numpy.array"], "function", ["None"], ["", "def", "quat_identity", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2axisangle": [[289, 300], ["numpy.array", "numpy.linalg.norm", "numpy.arcsin"], "function", ["None"], ["", "def", "quat2axisangle", "(", "quat", ")", ":", "\n", "    ", "theta", "=", "0", ";", "\n", "axis", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ";", "\n", "sin_theta", "=", "np", ".", "linalg", ".", "norm", "(", "quat", "[", "1", ":", "]", ")", "\n", "\n", "if", "(", "sin_theta", ">", "0.0001", ")", ":", "\n", "        ", "theta", "=", "2", "*", "np", ".", "arcsin", "(", "sin_theta", ")", "\n", "theta", "*=", "1", "if", "quat", "[", "0", "]", ">=", "0", "else", "-", "1", "\n", "axis", "=", "quat", "[", "1", ":", "]", "/", "sin_theta", "\n", "\n", "", "return", "axis", ",", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2point_euler": [[301, 309], ["euler.copy", "numpy.sin", "numpy.cos", "numpy.concatenate", "len", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "euler2point_euler", "(", "euler", ")", ":", "\n", "    ", "_euler", "=", "euler", ".", "copy", "(", ")", "\n", "if", "len", "(", "_euler", ".", "shape", ")", "<", "2", ":", "\n", "        ", "_euler", "=", "np", ".", "expand_dims", "(", "_euler", ",", "0", ")", "\n", "", "assert", "(", "_euler", ".", "shape", "[", "1", "]", "==", "3", ")", "\n", "_euler_sin", "=", "np", ".", "sin", "(", "_euler", ")", "\n", "_euler_cos", "=", "np", ".", "cos", "(", "_euler", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "_euler_sin", ",", "_euler_cos", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.point_euler2euler": [[310, 318], ["euler.copy", "numpy.arctan", "len", "numpy.expand_dims"], "function", ["None"], ["", "def", "point_euler2euler", "(", "euler", ")", ":", "\n", "    ", "_euler", "=", "euler", ".", "copy", "(", ")", "\n", "if", "len", "(", "_euler", ".", "shape", ")", "<", "2", ":", "\n", "        ", "_euler", "=", "np", ".", "expand_dims", "(", "_euler", ",", "0", ")", "\n", "", "assert", "(", "_euler", ".", "shape", "[", "1", "]", "==", "6", ")", "\n", "angle", "=", "np", ".", "arctan", "(", "_euler", "[", "...", ",", ":", "3", "]", "/", "_euler", "[", "...", ",", "3", ":", "]", ")", "\n", "angle", "[", "_euler", "[", "...", ",", "3", ":", "]", "<", "0", "]", "+=", "np", ".", "pi", "\n", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2point_quat": [[319, 329], ["quat.copy", "numpy.concatenate", "len", "numpy.expand_dims", "numpy.arccos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.squeeze", "numpy.squeeze", "numpy.abs", "numpy.abs", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "quat2point_quat", "(", "quat", ")", ":", "\n", "# Should be in qw, qx, qy, qz", "\n", "    ", "_quat", "=", "quat", ".", "copy", "(", ")", "\n", "if", "len", "(", "_quat", ".", "shape", ")", "<", "2", ":", "\n", "        ", "_quat", "=", "np", ".", "expand_dims", "(", "_quat", ",", "0", ")", "\n", "", "assert", "(", "_quat", ".", "shape", "[", "1", "]", "==", "4", ")", "\n", "angle", "=", "np", ".", "arccos", "(", "_quat", "[", ":", ",", "[", "0", "]", "]", ")", "*", "2", "\n", "xyz", "=", "_quat", "[", ":", ",", "1", ":", "]", "\n", "xyz", "[", "np", ".", "squeeze", "(", "np", ".", "abs", "(", "np", ".", "sin", "(", "angle", "/", "2", ")", ")", ")", ">=", "1e-5", "]", "=", "(", "xyz", "/", "np", ".", "sin", "(", "angle", "/", "2", ")", ")", "[", "np", ".", "squeeze", "(", "np", ".", "abs", "(", "np", ".", "sin", "(", "angle", "/", "2", ")", ")", ")", ">=", "1e-5", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "np", ".", "sin", "(", "angle", ")", ",", "np", ".", "cos", "(", "angle", ")", ",", "xyz", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.point_quat2quat": [[330, 341], ["quat.copy", "numpy.arctan", "numpy.cos", "numpy.concatenate", "len", "numpy.expand_dims", "numpy.sin", "numpy.squeeze", "numpy.squeeze", "numpy.abs", "numpy.abs", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "point_quat2quat", "(", "quat", ")", ":", "\n", "    ", "_quat", "=", "quat", ".", "copy", "(", ")", "\n", "if", "len", "(", "_quat", ".", "shape", ")", "<", "2", ":", "\n", "        ", "_quat", "=", "np", ".", "expand_dims", "(", "_quat", ",", "0", ")", "\n", "", "assert", "(", "_quat", ".", "shape", "[", "1", "]", "==", "5", ")", "\n", "angle", "=", "np", ".", "arctan", "(", "_quat", "[", ":", ",", "[", "0", "]", "]", "/", "_quat", "[", ":", ",", "[", "1", "]", "]", ")", "\n", "qw", "=", "np", ".", "cos", "(", "angle", "/", "2", ")", "\n", "\n", "qxyz", "=", "_quat", "[", ":", ",", "2", ":", "]", "\n", "qxyz", "[", "np", ".", "squeeze", "(", "np", ".", "abs", "(", "np", ".", "sin", "(", "angle", "/", "2", ")", ")", ")", ">=", "1e-5", "]", "=", "(", "qxyz", "*", "np", ".", "sin", "(", "angle", "/", "2", ")", ")", "[", "np", ".", "squeeze", "(", "np", ".", "abs", "(", "np", ".", "sin", "(", "angle", "/", "2", ")", ")", ")", ">=", "1e-5", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "qw", ",", "qxyz", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.normalize_angles": [[342, 349], ["angles.copy.copy", "angles.copy.min", "angles.copy.max"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "normalize_angles", "(", "angles", ")", ":", "\n", "    ", "'''Puts angles in [-pi, pi] range.'''", "\n", "angles", "=", "angles", ".", "copy", "(", ")", "\n", "if", "angles", ".", "size", ">", "0", ":", "\n", "        ", "angles", "=", "(", "angles", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "-", "np", ".", "pi", "\n", "assert", "-", "np", ".", "pi", "-", "1e-6", "<=", "angles", ".", "min", "(", ")", "and", "angles", ".", "max", "(", ")", "<=", "np", ".", "pi", "+", "1e-6", "\n", "", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.round_to_straight_angles": [[350, 354], ["rotations.normalize_angles", "numpy.round"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.normalize_angles"], ["", "def", "round_to_straight_angles", "(", "angles", ")", ":", "\n", "    ", "'''Returns closest angle modulo 90 degrees '''", "\n", "angles", "=", "np", ".", "round", "(", "angles", "/", "(", "np", ".", "pi", "/", "2", ")", ")", "*", "(", "np", ".", "pi", "/", "2", ")", "\n", "return", "normalize_angles", "(", "angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.get_parallel_rotations": [[355, 370], ["itertools.product", "rotations.mat2euler", "numpy.round", "all", "len", "rotations.euler2mat"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.mat2euler", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2mat"], ["", "def", "get_parallel_rotations", "(", ")", ":", "\n", "    ", "mult90", "=", "[", "0", ",", "np", ".", "pi", "/", "2", ",", "-", "np", ".", "pi", "/", "2", ",", "np", ".", "pi", "]", "\n", "parallel_rotations", "=", "[", "]", "\n", "for", "euler", "in", "itertools", ".", "product", "(", "mult90", ",", "repeat", "=", "3", ")", ":", "\n", "        ", "canonical", "=", "mat2euler", "(", "euler2mat", "(", "euler", ")", ")", "\n", "canonical", "=", "np", ".", "round", "(", "canonical", "/", "(", "np", ".", "pi", "/", "2", ")", ")", "\n", "if", "canonical", "[", "0", "]", "==", "-", "2", ":", "\n", "            ", "canonical", "[", "0", "]", "=", "2", "\n", "", "if", "canonical", "[", "2", "]", "==", "-", "2", ":", "\n", "            ", "canonical", "[", "2", "]", "=", "2", "\n", "", "canonical", "*=", "np", ".", "pi", "/", "2", "\n", "if", "all", "(", "[", "(", "canonical", "!=", "rot", ")", ".", "any", "(", ")", "for", "rot", "in", "parallel_rotations", "]", ")", ":", "\n", "            ", "parallel_rotations", "+=", "[", "canonical", "]", "\n", "", "", "assert", "len", "(", "parallel_rotations", ")", "==", "24", "\n", "return", "parallel_rotations", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv.__init__": [[15, 49], ["gym.envs.robotics.robot_env.RobotEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "model_path", ",", "n_substeps", ",", "gripper_extra_height", ",", "block_gripper", ",", "\n", "has_object", ",", "target_in_the_air", ",", "target_offset", ",", "obj_range", ",", "target_range", ",", "\n", "distance_threshold", ",", "initial_qpos", ",", "reward_type", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes a new Fetch environment.\n\n        Args:\n            model_path (string): path to the environments XML file\n            n_substeps (int): number of substeps the simulation runs on every call to step\n            gripper_extra_height (float): additional height above the table when positioning the gripper\n            block_gripper (boolean): whether or not the gripper is blocked (i.e. not movable) or not\n            has_object (boolean): whether or not the environment has an object\n            target_in_the_air (boolean): whether or not the target should be in the air above the table or on the table surface\n            target_offset (float or array with 3 elements): offset of the target\n            obj_range (float): range of a uniform distribution for sampling initial object positions\n            target_range (float): range of a uniform distribution for sampling a target\n            distance_threshold (float): the threshold after which a goal is considered achieved\n            initial_qpos (dict): a dictionary of joint names and values that define the initial configuration\n            reward_type ('sparse' or 'dense'): the reward type, i.e. sparse or dense\n        \"\"\"", "\n", "self", ".", "gripper_extra_height", "=", "gripper_extra_height", "\n", "self", ".", "block_gripper", "=", "block_gripper", "\n", "self", ".", "has_object", "=", "has_object", "\n", "self", ".", "target_in_the_air", "=", "target_in_the_air", "\n", "self", ".", "target_offset", "=", "target_offset", "\n", "self", ".", "obj_range", "=", "obj_range", "\n", "self", ".", "target_range", "=", "target_range", "\n", "self", ".", "distance_threshold", "=", "distance_threshold", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "\n", "super", "(", "FetchEnv", ",", "self", ")", ".", "__init__", "(", "\n", "model_path", "=", "model_path", ",", "n_substeps", "=", "n_substeps", ",", "n_actions", "=", "4", ",", "\n", "initial_qpos", "=", "initial_qpos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv.compute_reward": [[53, 60], ["fetch_env.goal_distance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.goal_distance"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "goal", ",", "info", ")", ":", "\n", "# Compute distance between goal and the achieved goal.", "\n", "        ", "d", "=", "goal_distance", "(", "achieved_goal", ",", "goal", ")", "\n", "if", "self", ".", "reward_type", "==", "'sparse'", ":", "\n", "            ", "return", "-", "(", "d", ">", "self", ".", "distance_threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "return", "-", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._step_callback": [[64, 69], ["fetch_env.FetchEnv.sim.data.set_joint_qpos", "fetch_env.FetchEnv.sim.data.set_joint_qpos", "fetch_env.FetchEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "", "def", "_step_callback", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "block_gripper", ":", "\n", "            ", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "'robot0:l_gripper_finger_joint'", ",", "0.", ")", "\n", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "'robot0:r_gripper_finger_joint'", ",", "0.", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._set_action": [[70, 86], ["numpy.concatenate.copy", "numpy.array", "numpy.concatenate", "gym.envs.robotics.utils.ctrl_set_action", "gym.envs.robotics.utils.mocap_set_action", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.ctrl_set_action", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.mocap_set_action"], ["", "", "def", "_set_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "action", ".", "shape", "==", "(", "4", ",", ")", "\n", "action", "=", "action", ".", "copy", "(", ")", "# ensure that we don't change the action outside of this scope", "\n", "pos_ctrl", ",", "gripper_ctrl", "=", "action", "[", ":", "3", "]", ",", "action", "[", "3", "]", "\n", "\n", "pos_ctrl", "*=", "0.05", "# limit maximum change in position", "\n", "rot_ctrl", "=", "[", "1.", ",", "0.", ",", "1.", ",", "0.", "]", "# fixed rotation of the end effector, expressed as a quaternion", "\n", "gripper_ctrl", "=", "np", ".", "array", "(", "[", "gripper_ctrl", ",", "gripper_ctrl", "]", ")", "\n", "assert", "gripper_ctrl", ".", "shape", "==", "(", "2", ",", ")", "\n", "if", "self", ".", "block_gripper", ":", "\n", "            ", "gripper_ctrl", "=", "np", ".", "zeros_like", "(", "gripper_ctrl", ")", "\n", "", "action", "=", "np", ".", "concatenate", "(", "[", "pos_ctrl", ",", "rot_ctrl", ",", "gripper_ctrl", "]", ")", "\n", "\n", "# Apply action to simulation.", "\n", "utils", ".", "ctrl_set_action", "(", "self", ".", "sim", ",", "action", ")", "\n", "utils", ".", "mocap_set_action", "(", "self", ".", "sim", ",", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._get_obs": [[87, 121], ["fetch_env.FetchEnv.sim.data.get_site_xpos", "gym.envs.robotics.utils.robot_get_obs", "numpy.concatenate", "fetch_env.FetchEnv.sim.data.get_site_xvelp", "fetch_env.FetchEnv.sim.data.get_site_xpos", "gym.envs.robotics.rotations.mat2euler", "numpy.zeros", "fetch_env.FetchEnv.copy", "numpy.squeeze", "numpy.concatenate.copy", "numpy.squeeze.copy", "fetch_env.FetchEnv.goal.copy", "fetch_env.FetchEnv.sim.data.get_site_xmat", "fetch_env.FetchEnv.sim.data.get_site_xvelp", "fetch_env.FetchEnv.sim.data.get_site_xvelr", "numpy.zeros.copy", "numpy.zeros.ravel", "numpy.zeros.ravel", "numpy.zeros.ravel", "numpy.zeros.ravel", "numpy.zeros.ravel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.robot_get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.mat2euler"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "# positions", "\n", "        ", "grip_pos", "=", "self", ".", "sim", ".", "data", ".", "get_site_xpos", "(", "'robot0:grip'", ")", "\n", "dt", "=", "self", ".", "sim", ".", "nsubsteps", "*", "self", ".", "sim", ".", "model", ".", "opt", ".", "timestep", "\n", "grip_velp", "=", "self", ".", "sim", ".", "data", ".", "get_site_xvelp", "(", "'robot0:grip'", ")", "*", "dt", "\n", "robot_qpos", ",", "robot_qvel", "=", "utils", ".", "robot_get_obs", "(", "self", ".", "sim", ")", "\n", "if", "self", ".", "has_object", ":", "\n", "            ", "object_pos", "=", "self", ".", "sim", ".", "data", ".", "get_site_xpos", "(", "'object0'", ")", "\n", "# rotations", "\n", "object_rot", "=", "rotations", ".", "mat2euler", "(", "self", ".", "sim", ".", "data", ".", "get_site_xmat", "(", "'object0'", ")", ")", "\n", "# velocities", "\n", "object_velp", "=", "self", ".", "sim", ".", "data", ".", "get_site_xvelp", "(", "'object0'", ")", "*", "dt", "\n", "object_velr", "=", "self", ".", "sim", ".", "data", ".", "get_site_xvelr", "(", "'object0'", ")", "*", "dt", "\n", "# gripper state", "\n", "object_rel_pos", "=", "object_pos", "-", "grip_pos", "\n", "object_velp", "-=", "grip_velp", "\n", "", "else", ":", "\n", "            ", "object_pos", "=", "object_rot", "=", "object_velp", "=", "object_velr", "=", "object_rel_pos", "=", "np", ".", "zeros", "(", "0", ")", "\n", "", "gripper_state", "=", "robot_qpos", "[", "-", "2", ":", "]", "\n", "gripper_vel", "=", "robot_qvel", "[", "-", "2", ":", "]", "*", "dt", "# change to a scalar if the gripper is made symmetric", "\n", "\n", "if", "not", "self", ".", "has_object", ":", "\n", "            ", "achieved_goal", "=", "grip_pos", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "achieved_goal", "=", "np", ".", "squeeze", "(", "object_pos", ".", "copy", "(", ")", ")", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "[", "\n", "grip_pos", ",", "object_pos", ".", "ravel", "(", ")", ",", "object_rel_pos", ".", "ravel", "(", ")", ",", "gripper_state", ",", "object_rot", ".", "ravel", "(", ")", ",", "\n", "object_velp", ".", "ravel", "(", ")", ",", "object_velr", ".", "ravel", "(", ")", ",", "grip_velp", ",", "gripper_vel", ",", "\n", "]", ")", "\n", "\n", "return", "{", "\n", "'observation'", ":", "obs", ".", "copy", "(", ")", ",", "\n", "'achieved_goal'", ":", "achieved_goal", ".", "copy", "(", ")", ",", "\n", "'desired_goal'", ":", "self", ".", "goal", ".", "copy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._viewer_setup": [[123, 131], ["fetch_env.FetchEnv.sim.model.body_name2id", "enumerate"], "methods", ["None"], ["", "def", "_viewer_setup", "(", "self", ")", ":", "\n", "        ", "body_id", "=", "self", ".", "sim", ".", "model", ".", "body_name2id", "(", "'robot0:gripper_link'", ")", "\n", "lookat", "=", "self", ".", "sim", ".", "data", ".", "body_xpos", "[", "body_id", "]", "\n", "for", "idx", ",", "value", "in", "enumerate", "(", "lookat", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "idx", "]", "=", "value", "\n", "", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "2.5", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "132.", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "14.", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._render_callback": [[132, 138], ["fetch_env.FetchEnv.sim.model.site_name2id", "fetch_env.FetchEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "_render_callback", "(", "self", ")", ":", "\n", "# Visualize target.", "\n", "        ", "sites_offset", "=", "(", "self", ".", "sim", ".", "data", ".", "site_xpos", "-", "self", ".", "sim", ".", "model", ".", "site_pos", ")", ".", "copy", "(", ")", "\n", "site_id", "=", "self", ".", "sim", ".", "model", ".", "site_name2id", "(", "'target0'", ")", "\n", "self", ".", "sim", ".", "model", ".", "site_pos", "[", "site_id", "]", "=", "self", ".", "goal", "-", "sites_offset", "[", "0", "]", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._reset_sim": [[139, 154], ["fetch_env.FetchEnv.sim.set_state", "fetch_env.FetchEnv.sim.forward", "fetch_env.FetchEnv.sim.data.get_joint_qpos", "fetch_env.FetchEnv.sim.data.set_joint_qpos", "numpy.linalg.norm", "fetch_env.FetchEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "_reset_sim", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim", ".", "set_state", "(", "self", ".", "initial_state", ")", "\n", "\n", "# Randomize start position of object.", "\n", "if", "self", ".", "has_object", ":", "\n", "            ", "object_xpos", "=", "self", ".", "initial_gripper_xpos", "[", ":", "2", "]", "\n", "while", "np", ".", "linalg", ".", "norm", "(", "object_xpos", "-", "self", ".", "initial_gripper_xpos", "[", ":", "2", "]", ")", "<", "0.1", ":", "\n", "                ", "object_xpos", "=", "self", ".", "initial_gripper_xpos", "[", ":", "2", "]", "+", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "obj_range", ",", "self", ".", "obj_range", ",", "size", "=", "2", ")", "\n", "", "object_qpos", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "'object0:joint'", ")", "\n", "assert", "object_qpos", ".", "shape", "==", "(", "7", ",", ")", "\n", "object_qpos", "[", ":", "2", "]", "=", "object_xpos", "\n", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "'object0:joint'", ",", "object_qpos", ")", "\n", "\n", "", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._sample_goal": [[155, 165], ["goal.copy", "fetch_env.FetchEnv.np_random.uniform", "fetch_env.FetchEnv.np_random.uniform", "fetch_env.FetchEnv.np_random.uniform", "fetch_env.FetchEnv.np_random.uniform"], "methods", ["None"], ["", "def", "_sample_goal", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "has_object", ":", "\n", "            ", "goal", "=", "self", ".", "initial_gripper_xpos", "[", ":", "3", "]", "+", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "target_range", ",", "self", ".", "target_range", ",", "size", "=", "3", ")", "\n", "goal", "+=", "self", ".", "target_offset", "\n", "goal", "[", "2", "]", "=", "self", ".", "height_offset", "\n", "if", "self", ".", "target_in_the_air", "and", "self", ".", "np_random", ".", "uniform", "(", ")", "<", "0.5", ":", "\n", "                ", "goal", "[", "2", "]", "+=", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "0.45", ")", "\n", "", "", "else", ":", "\n", "            ", "goal", "=", "self", ".", "initial_gripper_xpos", "[", ":", "3", "]", "+", "self", ".", "np_random", ".", "uniform", "(", "-", "0.15", ",", "0.15", ",", "size", "=", "3", ")", "\n", "", "return", "goal", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._is_success": [[166, 169], ["fetch_env.goal_distance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.goal_distance"], ["", "def", "_is_success", "(", "self", ",", "achieved_goal", ",", "desired_goal", ")", ":", "\n", "        ", "d", "=", "goal_distance", "(", "achieved_goal", ",", "desired_goal", ")", "\n", "return", "(", "d", "<", "self", ".", "distance_threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.FetchEnv._env_setup": [[170, 188], ["initial_qpos.items", "gym.envs.robotics.utils.reset_mocap_welds", "fetch_env.FetchEnv.sim.forward", "numpy.array", "fetch_env.FetchEnv.sim.data.set_mocap_pos", "fetch_env.FetchEnv.sim.data.set_mocap_quat", "range", "fetch_env.FetchEnv.sim.data.get_site_xpos().copy", "fetch_env.FetchEnv.sim.data.set_joint_qpos", "numpy.array", "fetch_env.FetchEnv.sim.data.get_site_xpos", "fetch_env.FetchEnv.sim.step", "fetch_env.FetchEnv.sim.data.get_site_xpos", "fetch_env.FetchEnv.sim.data.get_site_xpos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.reset_mocap_welds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "_env_setup", "(", "self", ",", "initial_qpos", ")", ":", "\n", "        ", "for", "name", ",", "value", "in", "initial_qpos", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "name", ",", "value", ")", "\n", "", "utils", ".", "reset_mocap_welds", "(", "self", ".", "sim", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n", "# Move end effector into position.", "\n", "gripper_target", "=", "np", ".", "array", "(", "[", "-", "0.498", ",", "0.005", ",", "-", "0.431", "+", "self", ".", "gripper_extra_height", "]", ")", "+", "self", ".", "sim", ".", "data", ".", "get_site_xpos", "(", "'robot0:grip'", ")", "\n", "gripper_rotation", "=", "np", ".", "array", "(", "[", "1.", ",", "0.", ",", "1.", ",", "0.", "]", ")", "\n", "self", ".", "sim", ".", "data", ".", "set_mocap_pos", "(", "'robot0:mocap'", ",", "gripper_target", ")", "\n", "self", ".", "sim", ".", "data", ".", "set_mocap_quat", "(", "'robot0:mocap'", ",", "gripper_rotation", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "sim", ".", "step", "(", ")", "\n", "\n", "# Extract information for sampling goals.", "\n", "", "self", ".", "initial_gripper_xpos", "=", "self", ".", "sim", ".", "data", ".", "get_site_xpos", "(", "'robot0:grip'", ")", ".", "copy", "(", ")", "\n", "if", "self", ".", "has_object", ":", "\n", "            ", "self", ".", "height_offset", "=", "self", ".", "sim", ".", "data", ".", "get_site_xpos", "(", "'object0'", ")", "[", "2", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.fetch_env.goal_distance": [[6, 9], ["numpy.linalg.norm"], "function", ["None"], ["def", "goal_distance", "(", "goal_a", ",", "goal_b", ")", ":", "\n", "    ", "assert", "goal_a", ".", "shape", "==", "goal_b", ".", "shape", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "goal_a", "-", "goal_b", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.__init__": [[16, 44], ["model_path.startswith", "mujoco_py.load_model_from_path", "mujoco_py.MjSim", "robot_env.RobotEnv.seed", "robot_env.RobotEnv._env_setup", "copy.deepcopy", "robot_env.RobotEnv._sample_goal", "robot_env.RobotEnv._get_obs", "gym.spaces.Box", "gym.spaces.Dict", "os.path.join", "os.path.exists", "IOError", "int", "robot_env.RobotEnv.sim.get_state", "dict", "os.path.dirname", "numpy.round", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._env_setup", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._sample_goal", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "initial_qpos", ",", "n_actions", ",", "n_substeps", ")", ":", "\n", "        ", "if", "model_path", ".", "startswith", "(", "'/'", ")", ":", "\n", "            ", "fullpath", "=", "model_path", "\n", "", "else", ":", "\n", "            ", "fullpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'assets'", ",", "model_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "fullpath", ")", ":", "\n", "            ", "raise", "IOError", "(", "'File {} does not exist'", ".", "format", "(", "fullpath", ")", ")", "\n", "\n", "", "model", "=", "mujoco_py", ".", "load_model_from_path", "(", "fullpath", ")", "\n", "self", ".", "sim", "=", "mujoco_py", ".", "MjSim", "(", "model", ",", "nsubsteps", "=", "n_substeps", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "metadata", "=", "{", "\n", "'render.modes'", ":", "[", "'human'", ",", "'rgb_array'", "]", ",", "\n", "'video.frames_per_second'", ":", "int", "(", "np", ".", "round", "(", "1.0", "/", "self", ".", "dt", ")", ")", "\n", "}", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "_env_setup", "(", "initial_qpos", "=", "initial_qpos", ")", "\n", "self", ".", "initial_state", "=", "copy", ".", "deepcopy", "(", "self", ".", "sim", ".", "get_state", "(", ")", ")", "\n", "\n", "self", ".", "goal", "=", "self", ".", "_sample_goal", "(", ")", "\n", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "-", "1.", ",", "1.", ",", "shape", "=", "(", "n_actions", ",", ")", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "dict", "(", "\n", "desired_goal", "=", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "shape", "=", "obs", "[", "'achieved_goal'", "]", ".", "shape", ",", "dtype", "=", "'float32'", ")", ",", "\n", "achieved_goal", "=", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "shape", "=", "obs", "[", "'achieved_goal'", "]", ".", "shape", ",", "dtype", "=", "'float32'", ")", ",", "\n", "observation", "=", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "shape", "=", "obs", "[", "'observation'", "]", ".", "shape", ",", "dtype", "=", "'float32'", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.dt": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sim", ".", "model", ".", "opt", ".", "timestep", "*", "self", ".", "sim", ".", "nsubsteps", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.seed": [[53, 56], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.step": [[57, 70], ["numpy.clip", "robot_env.RobotEnv._set_action", "robot_env.RobotEnv.sim.step", "robot_env.RobotEnv._step_callback", "robot_env.RobotEnv._get_obs", "robot_env.RobotEnv.compute_reward", "robot_env.RobotEnv._is_success"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.hand_env.HandEnv._set_action", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._step_callback", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv.compute_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._is_success"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "self", ".", "_set_action", "(", "action", ")", "\n", "self", ".", "sim", ".", "step", "(", ")", "\n", "self", ".", "_step_callback", "(", ")", "\n", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "\n", "done", "=", "False", "\n", "info", "=", "{", "\n", "'is_success'", ":", "self", ".", "_is_success", "(", "obs", "[", "'achieved_goal'", "]", ",", "self", ".", "goal", ")", ",", "\n", "}", "\n", "reward", "=", "self", ".", "compute_reward", "(", "obs", "[", "'achieved_goal'", "]", ",", "self", ".", "goal", ",", "info", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.reset": [[71, 83], ["robot_env.RobotEnv._sample_goal().copy", "robot_env.RobotEnv._get_obs", "robot_env.RobotEnv._reset_sim", "robot_env.RobotEnv._sample_goal"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._reset_sim", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._sample_goal"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Attempt to reset the simulator. Since we randomize initial conditions, it", "\n", "# is possible to get into a state with numerical issues (e.g. due to penetration or", "\n", "# Gimbel lock) or we may not achieve an initial condition (e.g. an object is within the hand).", "\n", "# In this case, we just keep randomizing until we eventually achieve a valid initial", "\n", "# configuration.", "\n", "        ", "did_reset_sim", "=", "False", "\n", "while", "not", "did_reset_sim", ":", "\n", "            ", "did_reset_sim", "=", "self", ".", "_reset_sim", "(", ")", "\n", "", "self", ".", "goal", "=", "self", ".", "_sample_goal", "(", ")", ".", "copy", "(", ")", "\n", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.close": [[84, 88], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "# self.viewer.finish()", "\n", "            ", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv.render": [[89, 100], ["robot_env.RobotEnv._render_callback", "robot_env.RobotEnv._get_viewer().render", "robot_env.RobotEnv._get_viewer().read_pixels", "robot_env.RobotEnv._get_viewer().render", "robot_env.RobotEnv._get_viewer", "robot_env.RobotEnv._get_viewer", "robot_env.RobotEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._render_callback", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "self", ".", "_render_callback", "(", ")", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "# window size used for old mujoco-py:", "\n", "width", ",", "height", "=", "500", ",", "500", "\n", "data", "=", "self", ".", "_get_viewer", "(", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "False", ")", "\n", "# original image is upside-down, so flip it", "\n", "return", "data", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._get_viewer": [[101, 106], ["mujoco_py.MjViewer", "robot_env.RobotEnv._viewer_setup"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.hand_env.HandEnv._viewer_setup"], ["", "", "def", "_get_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "mujoco_py", ".", "MjViewer", "(", "self", ".", "sim", ")", "\n", "self", ".", "_viewer_setup", "(", ")", "\n", "", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._reset_sim": [[110, 119], ["robot_env.RobotEnv.sim.set_state", "robot_env.RobotEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "_reset_sim", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets a simulation and indicates whether or not it was successful.\n        If a reset was unsuccessful (e.g. if a randomized state caused an error in the\n        simulation), this method should indicate such a failure by returning False.\n        In such a case, this method will be called again to attempt a the reset again.\n        \"\"\"", "\n", "self", ".", "sim", ".", "set_state", "(", "self", ".", "initial_state", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._get_obs": [[120, 124], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._set_action": [[125, 129], ["NotImplementedError"], "methods", ["None"], ["", "def", "_set_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Applies the given action to the simulation.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._is_success": [[130, 134], ["NotImplementedError"], "methods", ["None"], ["", "def", "_is_success", "(", "self", ",", "achieved_goal", ",", "desired_goal", ")", ":", "\n", "        ", "\"\"\"Indicates whether or not the achieved goal successfully achieved the desired goal.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._sample_goal": [[135, 139], ["NotImplementedError"], "methods", ["None"], ["", "def", "_sample_goal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a new goal and returns it.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._env_setup": [[140, 145], ["None"], "methods", ["None"], ["", "def", "_env_setup", "(", "self", ",", "initial_qpos", ")", ":", "\n", "        ", "\"\"\"Initial configuration of the environment. Can be used to configure initial state\n        and extract information from the simulation.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._viewer_setup": [[146, 151], ["None"], "methods", ["None"], ["", "def", "_viewer_setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initial configuration of the viewer. Can be used to set the camera position,\n        for example.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._render_callback": [[152, 157], ["None"], "methods", ["None"], ["", "def", "_render_callback", "(", "self", ")", ":", "\n", "        ", "\"\"\"A custom callback that is called before rendering. Can be used\n        to implement custom visualizations.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.robot_env.RobotEnv._step_callback": [[158, 163], ["None"], "methods", ["None"], ["", "def", "_step_callback", "(", "self", ")", ":", "\n", "        ", "\"\"\"A custom callback that is called after stepping the simulation. Can be used\n        to enforce additional constraints on the simulation state.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.hand_env.HandEnv.__init__": [[12, 18], ["gym.envs.robotics.robot_env.RobotEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "n_substeps", ",", "initial_qpos", ",", "relative_control", ")", ":", "\n", "        ", "self", ".", "relative_control", "=", "relative_control", "\n", "\n", "super", "(", "HandEnv", ",", "self", ")", ".", "__init__", "(", "\n", "model_path", "=", "model_path", ",", "n_substeps", "=", "n_substeps", ",", "n_actions", "=", "20", ",", "\n", "initial_qpos", "=", "initial_qpos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.hand_env.HandEnv._set_action": [[22, 41], ["numpy.clip", "numpy.zeros_like", "range", "hand_env.HandEnv.sim.data.get_joint_qpos", "hand_env.HandEnv.sim.model.actuator_name2id", "hand_env.HandEnv.sim.data.get_joint_qpos", "hand_env.HandEnv.sim.model.actuator_names[].replace"], "methods", ["None"], ["", "def", "_set_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "action", ".", "shape", "==", "(", "20", ",", ")", "\n", "\n", "ctrlrange", "=", "self", ".", "sim", ".", "model", ".", "actuator_ctrlrange", "\n", "actuation_range", "=", "(", "ctrlrange", "[", ":", ",", "1", "]", "-", "ctrlrange", "[", ":", ",", "0", "]", ")", "/", "2.", "\n", "if", "self", ".", "relative_control", ":", "\n", "            ", "actuation_center", "=", "np", ".", "zeros_like", "(", "action", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "sim", ".", "data", ".", "ctrl", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "actuation_center", "[", "i", "]", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "\n", "self", ".", "sim", ".", "model", ".", "actuator_names", "[", "i", "]", ".", "replace", "(", "':A_'", ",", "':'", ")", ")", "\n", "", "for", "joint_name", "in", "[", "'FF'", ",", "'MF'", ",", "'RF'", ",", "'LF'", "]", ":", "\n", "                ", "act_idx", "=", "self", ".", "sim", ".", "model", ".", "actuator_name2id", "(", "\n", "'robot0:A_{}J1'", ".", "format", "(", "joint_name", ")", ")", "\n", "actuation_center", "[", "act_idx", "]", "+=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "\n", "'robot0:{}J0'", ".", "format", "(", "joint_name", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "actuation_center", "=", "(", "ctrlrange", "[", ":", ",", "1", "]", "+", "ctrlrange", "[", ":", ",", "0", "]", ")", "/", "2.", "\n", "", "self", ".", "sim", ".", "data", ".", "ctrl", "[", ":", "]", "=", "actuation_center", "+", "action", "*", "actuation_range", "\n", "self", ".", "sim", ".", "data", ".", "ctrl", "[", ":", "]", "=", "np", ".", "clip", "(", "self", ".", "sim", ".", "data", ".", "ctrl", ",", "ctrlrange", "[", ":", ",", "0", "]", ",", "ctrlrange", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.hand_env.HandEnv._viewer_setup": [[42, 50], ["hand_env.HandEnv.sim.model.body_name2id", "enumerate"], "methods", ["None"], ["", "def", "_viewer_setup", "(", "self", ")", ":", "\n", "        ", "body_id", "=", "self", ".", "sim", ".", "model", ".", "body_name2id", "(", "'robot0:palm'", ")", "\n", "lookat", "=", "self", ".", "sim", ".", "data", ".", "body_xpos", "[", "body_id", "]", "\n", "for", "idx", ",", "value", "in", "enumerate", "(", "lookat", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "idx", "]", "=", "value", "\n", "", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "55.", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "25.", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.robot_get_obs": [[10, 21], ["numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "n.startswith", "sim.data.get_joint_qpos", "sim.data.get_joint_qvel"], "function", ["None"], ["for", "next_units", "in", "hidden_units", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "units", ",", "next_units", ")", ")", "\n", "layers", ".", "append", "(", "hidden_activation", ")", "\n", "units", "=", "next_units", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "units", ",", "output_dim", ")", ")", "\n", "if", "output_activation", "is", "not", "None", ":", "\n", "        ", "layers", ".", "append", "(", "output_activation", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "\n", "", "def", "calculate_log_pi", "(", "log_stds", ",", "noises", ",", "actions", ")", ":", "\n", "    ", "gaussian_log_probs", "=", "(", "-", "0.5", "*", "noises", ".", "pow", "(", "2", ")", "-", "0.5", "*", "torch", ".", "log", "(", "2", "*", "math", ".", "pi", "*", "log_stds", ".", "exp", "(", ")", ".", "pow", "(", "2", ")", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.ctrl_set_action": [[23, 36], ["numpy.split", "range"], "function", ["None"], ["\n", "\n", "", "def", "reparameterize", "(", "means", ",", "log_stds", ")", ":", "\n", "    ", "actions", "=", "torch", ".", "normal", "(", "means", ",", "log_stds", ".", "exp", "(", ")", ")", "\n", "noises", "=", "(", "actions", "-", "means", ")", "/", "(", "log_stds", ".", "exp", "(", ")", "+", "1e-8", ")", "\n", "return", "actions", ",", "calculate_log_pi", "(", "log_stds", ",", "noises", ",", "actions", ")", "\n", "\n", "\n", "", "def", "atanh", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "(", "torch", ".", "log", "(", "1", "+", "x", "+", "1e-6", ")", "-", "torch", ".", "log", "(", "1", "-", "x", "+", "1e-6", ")", ")", "\n", "\n", "\n", "", "def", "evaluate_lop_pi", "(", "means", ",", "log_stds", ",", "actions", ")", ":", "\n", "    ", "noises", "=", "(", "actions", "-", "means", ")", "/", "(", "log_stds", ".", "exp", "(", ")", "+", "1e-8", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.mocap_set_action": [[38, 57], ["numpy.split", "action.reshape.reshape", "utils.reset_mocap2body_xpos"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.reset_mocap2body_xpos"], ["# print(val)", "\n", "# exit()", "\n", "return", "val", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.reset_mocap_welds": [[59, 68], ["sim.forward", "range", "numpy.array"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.reset_mocap2body_xpos": [[70, 97], ["zip"], "function", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.fetch.pick_and_place.FetchPickAndPlaceEnv.__init__": [[6, 19], ["gym.envs.robotics.fetch_env.FetchEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "initial_qpos", "=", "{", "\n", "'robot0:slide0'", ":", "0.405", ",", "\n", "'robot0:slide1'", ":", "0.48", ",", "\n", "'robot0:slide2'", ":", "0.0", ",", "\n", "'object0:joint'", ":", "[", "1.25", ",", "0.53", ",", "0.4", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "}", "\n", "fetch_env", ".", "FetchEnv", ".", "__init__", "(", "\n", "self", ",", "'fetch/pick_and_place.xml'", ",", "has_object", "=", "True", ",", "block_gripper", "=", "False", ",", "n_substeps", "=", "20", ",", "\n", "gripper_extra_height", "=", "0.2", ",", "target_in_the_air", "=", "True", ",", "target_offset", "=", "0.0", ",", "\n", "obj_range", "=", "0.15", ",", "target_range", "=", "0.15", ",", "distance_threshold", "=", "0.05", ",", "\n", "initial_qpos", "=", "initial_qpos", ",", "reward_type", "=", "reward_type", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.fetch.slide.FetchSlideEnv.__init__": [[8, 21], ["gym.envs.robotics.fetch_env.FetchEnv.__init__", "gym.utils.EzPickle.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "initial_qpos", "=", "{", "\n", "'robot0:slide0'", ":", "0.05", ",", "\n", "'robot0:slide1'", ":", "0.48", ",", "\n", "'robot0:slide2'", ":", "0.0", ",", "\n", "'object0:joint'", ":", "[", "1.7", ",", "1.1", ",", "0.4", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "}", "\n", "fetch_env", ".", "FetchEnv", ".", "__init__", "(", "\n", "self", ",", "'fetch/slide.xml'", ",", "has_object", "=", "True", ",", "block_gripper", "=", "True", ",", "n_substeps", "=", "20", ",", "\n", "gripper_extra_height", "=", "-", "0.02", ",", "target_in_the_air", "=", "False", ",", "target_offset", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.0", ",", "0.0", "]", ")", ",", "\n", "obj_range", "=", "0.1", ",", "target_range", "=", "0.3", ",", "distance_threshold", "=", "0.05", ",", "\n", "initial_qpos", "=", "initial_qpos", ",", "reward_type", "=", "reward_type", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.fetch.push.FetchPushEnv.__init__": [[6, 19], ["gym.envs.robotics.fetch_env.FetchEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "initial_qpos", "=", "{", "\n", "'robot0:slide0'", ":", "0.405", ",", "\n", "'robot0:slide1'", ":", "0.48", ",", "\n", "'robot0:slide2'", ":", "0.0", ",", "\n", "'object0:joint'", ":", "[", "1.25", ",", "0.53", ",", "0.4", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "}", "\n", "fetch_env", ".", "FetchEnv", ".", "__init__", "(", "\n", "self", ",", "'fetch/push.xml'", ",", "has_object", "=", "True", ",", "block_gripper", "=", "True", ",", "n_substeps", "=", "20", ",", "\n", "gripper_extra_height", "=", "0.0", ",", "target_in_the_air", "=", "False", ",", "target_offset", "=", "0.0", ",", "\n", "obj_range", "=", "0.15", ",", "target_range", "=", "0.15", ",", "distance_threshold", "=", "0.05", ",", "\n", "initial_qpos", "=", "initial_qpos", ",", "reward_type", "=", "reward_type", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.fetch.reach.FetchReachEnv.__init__": [[6, 18], ["gym.envs.robotics.fetch_env.FetchEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "initial_qpos", "=", "{", "\n", "'robot0:slide0'", ":", "0.4049", ",", "\n", "'robot0:slide1'", ":", "0.48", ",", "\n", "'robot0:slide2'", ":", "0.0", ",", "\n", "}", "\n", "fetch_env", ".", "FetchEnv", ".", "__init__", "(", "\n", "self", ",", "'fetch/reach.xml'", ",", "has_object", "=", "False", ",", "block_gripper", "=", "True", ",", "n_substeps", "=", "20", ",", "\n", "gripper_extra_height", "=", "0.2", ",", "target_in_the_air", "=", "True", ",", "target_offset", "=", "0.0", ",", "\n", "obj_range", "=", "0.15", ",", "target_range", "=", "0.15", ",", "distance_threshold", "=", "0.05", ",", "\n", "initial_qpos", "=", "initial_qpos", ",", "reward_type", "=", "reward_type", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv.__init__": [[22, 72], ["gym.envs.robotics.hand_env.HandEnv.__init__", "gym.utils.EzPickle.__init__", "gym.envs.robotics.rotations.euler2quat", "gym.envs.robotics.rotations.get_parallel_rotations"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2quat", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.get_parallel_rotations"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model_path", ",", "target_position", ",", "target_rotation", ",", "\n", "target_position_range", ",", "reward_type", ",", "initial_qpos", "=", "{", "}", ",", "\n", "randomize_initial_position", "=", "True", ",", "randomize_initial_rotation", "=", "True", ",", "\n", "distance_threshold", "=", "0.01", ",", "rotation_threshold", "=", "0.1", ",", "n_substeps", "=", "20", ",", "relative_control", "=", "False", ",", "\n", "ignore_z_target_rotation", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes a new Hand manipulation environment.\n\n        Args:\n            model_path (string): path to the environments XML file\n            target_position (string): the type of target position:\n                - ignore: target position is fully ignored, i.e. the object can be positioned arbitrarily\n                - fixed: target position is set to the initial position of the object\n                - random: target position is fully randomized according to target_position_range\n            target_rotation (string): the type of target rotation:\n                - ignore: target rotation is fully ignored, i.e. the object can be rotated arbitrarily\n                - fixed: target rotation is set to the initial rotation of the object\n                - xyz: fully randomized target rotation around the X, Y and Z axis\n                - z: fully randomized target rotation around the Z axis\n                - parallel: fully randomized target rotation around Z and axis-aligned rotation around X, Y\n            ignore_z_target_rotation (boolean): whether or not the Z axis of the target rotation is ignored\n            target_position_range (np.array of shape (3, 2)): range of the target_position randomization\n            reward_type ('sparse' or 'dense'): the reward type, i.e. sparse or dense\n            initial_qpos (dict): a dictionary of joint names and values that define the initial configuration\n            randomize_initial_position (boolean): whether or not to randomize the initial position of the object\n            randomize_initial_rotation (boolean): whether or not to randomize the initial rotation of the object\n            distance_threshold (float, in meters): the threshold after which the position of a goal is considered achieved\n            rotation_threshold (float, in radians): the threshold after which the rotation of a goal is considered achieved\n            n_substeps (int): number of substeps the simulation runs on every call to step\n            relative_control (boolean): whether or not the hand is actuated in absolute joint positions or relative to the current state\n        \"\"\"", "\n", "self", ".", "target_position", "=", "target_position", "\n", "self", ".", "target_rotation", "=", "target_rotation", "\n", "self", ".", "target_position_range", "=", "target_position_range", "\n", "self", ".", "parallel_quats", "=", "[", "rotations", ".", "euler2quat", "(", "r", ")", "for", "r", "in", "rotations", ".", "get_parallel_rotations", "(", ")", "]", "\n", "self", ".", "randomize_initial_rotation", "=", "randomize_initial_rotation", "\n", "self", ".", "randomize_initial_position", "=", "randomize_initial_position", "\n", "self", ".", "distance_threshold", "=", "distance_threshold", "\n", "self", ".", "rotation_threshold", "=", "rotation_threshold", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "self", ".", "ignore_z_target_rotation", "=", "ignore_z_target_rotation", "\n", "\n", "assert", "self", ".", "target_position", "in", "[", "'ignore'", ",", "'fixed'", ",", "'random'", "]", "\n", "assert", "self", ".", "target_rotation", "in", "[", "'ignore'", ",", "'fixed'", ",", "'xyz'", ",", "'z'", ",", "'parallel'", "]", "\n", "\n", "hand_env", ".", "HandEnv", ".", "__init__", "(", "\n", "self", ",", "model_path", ",", "n_substeps", "=", "n_substeps", ",", "initial_qpos", "=", "initial_qpos", ",", "\n", "relative_control", "=", "relative_control", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._get_achieved_goal": [[73, 78], ["manipulate.ManipulateEnv.sim.data.get_joint_qpos"], "methods", ["None"], ["", "def", "_get_achieved_goal", "(", "self", ")", ":", "\n", "# Object position and rotation.", "\n", "        ", "object_qpos", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "'object:joint'", ")", "\n", "assert", "object_qpos", ".", "shape", "==", "(", "7", ",", ")", "\n", "return", "object_qpos", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._goal_distance": [[79, 108], ["numpy.zeros_like", "numpy.zeros_like", "numpy.linalg.norm", "gym.envs.robotics.rotations.quat_mul", "gym.envs.robotics.rotations.quat2euler", "gym.envs.robotics.rotations.quat2euler", "gym.envs.robotics.rotations.euler2quat", "gym.envs.robotics.rotations.quat_conjugate", "numpy.arccos", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_mul", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2euler", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat2euler", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.euler2quat", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_conjugate"], ["", "def", "_goal_distance", "(", "self", ",", "goal_a", ",", "goal_b", ")", ":", "\n", "        ", "assert", "goal_a", ".", "shape", "==", "goal_b", ".", "shape", "\n", "assert", "goal_a", ".", "shape", "[", "-", "1", "]", "==", "7", "\n", "\n", "d_pos", "=", "np", ".", "zeros_like", "(", "goal_a", "[", "...", ",", "0", "]", ")", "\n", "d_rot", "=", "np", ".", "zeros_like", "(", "goal_b", "[", "...", ",", "0", "]", ")", "\n", "if", "self", ".", "target_position", "!=", "'ignore'", ":", "\n", "            ", "delta_pos", "=", "goal_a", "[", "...", ",", ":", "3", "]", "-", "goal_b", "[", "...", ",", ":", "3", "]", "\n", "d_pos", "=", "np", ".", "linalg", ".", "norm", "(", "delta_pos", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "target_rotation", "!=", "'ignore'", ":", "\n", "            ", "quat_a", ",", "quat_b", "=", "goal_a", "[", "...", ",", "3", ":", "]", ",", "goal_b", "[", "...", ",", "3", ":", "]", "\n", "\n", "if", "self", ".", "ignore_z_target_rotation", ":", "\n", "# Special case: We want to ignore the Z component of the rotation.", "\n", "# This code here assumes Euler angles with xyz convention. We first transform", "\n", "# to euler, then set the Z component to be equal between the two, and finally", "\n", "# transform back into quaternions.", "\n", "                ", "euler_a", "=", "rotations", ".", "quat2euler", "(", "quat_a", ")", "\n", "euler_b", "=", "rotations", ".", "quat2euler", "(", "quat_b", ")", "\n", "euler_a", "[", "2", "]", "=", "euler_b", "[", "2", "]", "\n", "quat_a", "=", "rotations", ".", "euler2quat", "(", "euler_a", ")", "\n", "\n", "# Subtract quaternions and extract angle between them.", "\n", "", "quat_diff", "=", "rotations", ".", "quat_mul", "(", "quat_a", ",", "rotations", ".", "quat_conjugate", "(", "quat_b", ")", ")", "\n", "angle_diff", "=", "2", "*", "np", ".", "arccos", "(", "np", ".", "clip", "(", "quat_diff", "[", "...", ",", "0", "]", ",", "-", "1.", ",", "1.", ")", ")", "\n", "d_rot", "=", "angle_diff", "\n", "", "assert", "d_pos", ".", "shape", "==", "d_rot", ".", "shape", "\n", "return", "d_pos", ",", "d_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv.compute_reward": [[112, 121], ["manipulate.ManipulateEnv._is_success().astype", "manipulate.ManipulateEnv._goal_distance", "manipulate.ManipulateEnv._is_success"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._goal_distance", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._is_success"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "goal", ",", "info", ")", ":", "\n", "        ", "if", "self", ".", "reward_type", "==", "'sparse'", ":", "\n", "            ", "success", "=", "self", ".", "_is_success", "(", "achieved_goal", ",", "goal", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "(", "success", "-", "1.", ")", "\n", "", "else", ":", "\n", "            ", "d_pos", ",", "d_rot", "=", "self", ".", "_goal_distance", "(", "achieved_goal", ",", "goal", ")", "\n", "# We weigh the difference in position to avoid that `d_pos` (in meters) is completely", "\n", "# dominated by `d_rot` (in radians).", "\n", "return", "-", "(", "10.", "*", "d_pos", "+", "d_rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._is_success": [[125, 131], ["manipulate.ManipulateEnv._goal_distance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._goal_distance"], ["", "", "def", "_is_success", "(", "self", ",", "achieved_goal", ",", "desired_goal", ")", ":", "\n", "        ", "d_pos", ",", "d_rot", "=", "self", ".", "_goal_distance", "(", "achieved_goal", ",", "desired_goal", ")", "\n", "achieved_pos", "=", "(", "d_pos", "<", "self", ".", "distance_threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "achieved_rot", "=", "(", "d_rot", "<", "self", ".", "rotation_threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "achieved_both", "=", "achieved_pos", "*", "achieved_rot", "\n", "return", "achieved_both", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._env_setup": [[132, 136], ["initial_qpos.items", "manipulate.ManipulateEnv.sim.forward", "manipulate.ManipulateEnv.sim.data.set_joint_qpos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "_env_setup", "(", "self", ",", "initial_qpos", ")", ":", "\n", "        ", "for", "name", ",", "value", "in", "initial_qpos", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "name", ",", "value", ")", "\n", "", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._reset_sim": [[137, 196], ["manipulate.ManipulateEnv.sim.set_state", "manipulate.ManipulateEnv.sim.forward", "manipulate.ManipulateEnv.sim.data.get_joint_qpos().copy", "numpy.linalg.norm", "numpy.concatenate", "manipulate.ManipulateEnv.sim.data.set_joint_qpos", "range", "manipulate.ManipulateEnv._reset_sim.is_on_palm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_reset_sim", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim", ".", "set_state", "(", "self", ".", "initial_state", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n", "initial_qpos", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "'object:joint'", ")", ".", "copy", "(", ")", "\n", "initial_pos", ",", "initial_quat", "=", "initial_qpos", "[", ":", "3", "]", ",", "initial_qpos", "[", "3", ":", "]", "\n", "assert", "initial_qpos", ".", "shape", "==", "(", "7", ",", ")", "\n", "assert", "initial_pos", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "initial_quat", ".", "shape", "==", "(", "4", ",", ")", "\n", "initial_qpos", "=", "None", "\n", "\n", "# Randomization initial rotation.", "\n", "if", "self", ".", "randomize_initial_rotation", ":", "\n", "            ", "if", "self", ".", "target_rotation", "==", "'z'", ":", "\n", "                ", "angle", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "axis", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", "\n", "offset_quat", "=", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", "\n", "initial_quat", "=", "rotations", ".", "quat_mul", "(", "initial_quat", ",", "offset_quat", ")", "\n", "", "elif", "self", ".", "target_rotation", "==", "'parallel'", ":", "\n", "                ", "angle", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "axis", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", "\n", "z_quat", "=", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", "\n", "parallel_quat", "=", "self", ".", "parallel_quats", "[", "self", ".", "np_random", ".", "randint", "(", "len", "(", "self", ".", "parallel_quats", ")", ")", "]", "\n", "offset_quat", "=", "rotations", ".", "quat_mul", "(", "z_quat", ",", "parallel_quat", ")", "\n", "initial_quat", "=", "rotations", ".", "quat_mul", "(", "initial_quat", ",", "offset_quat", ")", "\n", "", "elif", "self", ".", "target_rotation", "in", "[", "'xyz'", ",", "'ignore'", "]", ":", "\n", "                ", "angle", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "axis", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "1.", ",", "1.", ",", "size", "=", "3", ")", "\n", "offset_quat", "=", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", "\n", "initial_quat", "=", "rotations", ".", "quat_mul", "(", "initial_quat", ",", "offset_quat", ")", "\n", "", "elif", "self", ".", "target_rotation", "==", "'fixed'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'Unknown target_rotation option \"{}\".'", ".", "format", "(", "self", ".", "target_rotation", ")", ")", "\n", "\n", "# Randomize initial position.", "\n", "", "", "if", "self", ".", "randomize_initial_position", ":", "\n", "            ", "if", "self", ".", "target_position", "!=", "'fixed'", ":", "\n", "                ", "initial_pos", "+=", "self", ".", "np_random", ".", "normal", "(", "size", "=", "3", ",", "scale", "=", "0.005", ")", "\n", "\n", "", "", "initial_quat", "/=", "np", ".", "linalg", ".", "norm", "(", "initial_quat", ")", "\n", "initial_qpos", "=", "np", ".", "concatenate", "(", "[", "initial_pos", ",", "initial_quat", "]", ")", "\n", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "'object:joint'", ",", "initial_qpos", ")", "\n", "\n", "def", "is_on_palm", "(", ")", ":", "\n", "            ", "self", ".", "sim", ".", "forward", "(", ")", "\n", "cube_middle_idx", "=", "self", ".", "sim", ".", "model", ".", "site_name2id", "(", "'object:center'", ")", "\n", "cube_middle_pos", "=", "self", ".", "sim", ".", "data", ".", "site_xpos", "[", "cube_middle_idx", "]", "\n", "is_on_palm", "=", "(", "cube_middle_pos", "[", "2", "]", ">", "0.04", ")", "\n", "return", "is_on_palm", "\n", "\n", "# Run the simulation for a bunch of timesteps to let everything settle in.", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "_set_action", "(", "np", ".", "zeros", "(", "20", ")", ")", "\n", "try", ":", "\n", "                ", "self", ".", "sim", ".", "step", "(", ")", "\n", "", "except", "mujoco_py", ".", "MujocoException", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "is_on_palm", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._sample_goal": [[197, 238], ["numpy.linalg.norm", "numpy.concatenate", "manipulate.ManipulateEnv.np_random.uniform", "manipulate.ManipulateEnv.np_random.uniform", "numpy.array", "manipulate.quat_from_angle_and_axis", "gym.error.Error", "manipulate.ManipulateEnv.np_random.uniform", "numpy.array", "manipulate.quat_from_angle_and_axis", "gym.envs.robotics.rotations.quat_mul", "manipulate.ManipulateEnv.sim.data.get_joint_qpos", "manipulate.ManipulateEnv.sim.data.get_joint_qpos", "manipulate.ManipulateEnv.np_random.uniform", "manipulate.ManipulateEnv.np_random.uniform", "manipulate.quat_from_angle_and_axis", "manipulate.ManipulateEnv.np_random.randint", "manipulate.ManipulateEnv.sim.data.get_joint_qpos", "gym.error.Error", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.quat_from_angle_and_axis", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.quat_from_angle_and_axis", "home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.rotations.quat_mul", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.quat_from_angle_and_axis"], ["", "def", "_sample_goal", "(", "self", ")", ":", "\n", "# Select a goal for the object position.", "\n", "        ", "target_pos", "=", "None", "\n", "if", "self", ".", "target_position", "==", "'random'", ":", "\n", "            ", "assert", "self", ".", "target_position_range", ".", "shape", "==", "(", "3", ",", "2", ")", "\n", "offset", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "target_position_range", "[", ":", ",", "0", "]", ",", "self", ".", "target_position_range", "[", ":", ",", "1", "]", ")", "\n", "assert", "offset", ".", "shape", "==", "(", "3", ",", ")", "\n", "target_pos", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "'object:joint'", ")", "[", ":", "3", "]", "+", "offset", "\n", "", "elif", "self", ".", "target_position", "in", "[", "'ignore'", ",", "'fixed'", "]", ":", "\n", "            ", "target_pos", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "'object:joint'", ")", "[", ":", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unknown target_position option \"{}\".'", ".", "format", "(", "self", ".", "target_position", ")", ")", "\n", "", "assert", "target_pos", "is", "not", "None", "\n", "assert", "target_pos", ".", "shape", "==", "(", "3", ",", ")", "\n", "\n", "# Select a goal for the object rotation.", "\n", "target_quat", "=", "None", "\n", "if", "self", ".", "target_rotation", "==", "'z'", ":", "\n", "            ", "angle", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "axis", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", "\n", "target_quat", "=", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", "\n", "", "elif", "self", ".", "target_rotation", "==", "'parallel'", ":", "\n", "            ", "angle", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "axis", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", "\n", "target_quat", "=", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", "\n", "parallel_quat", "=", "self", ".", "parallel_quats", "[", "self", ".", "np_random", ".", "randint", "(", "len", "(", "self", ".", "parallel_quats", ")", ")", "]", "\n", "target_quat", "=", "rotations", ".", "quat_mul", "(", "target_quat", ",", "parallel_quat", ")", "\n", "", "elif", "self", ".", "target_rotation", "==", "'xyz'", ":", "\n", "            ", "angle", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "axis", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "1.", ",", "1.", ",", "size", "=", "3", ")", "\n", "target_quat", "=", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", "\n", "", "elif", "self", ".", "target_rotation", "in", "[", "'ignore'", ",", "'fixed'", "]", ":", "\n", "            ", "target_quat", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qpos", "(", "'object:joint'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unknown target_rotation option \"{}\".'", ".", "format", "(", "self", ".", "target_rotation", ")", ")", "\n", "", "assert", "target_quat", "is", "not", "None", "\n", "assert", "target_quat", ".", "shape", "==", "(", "4", ",", ")", "\n", "\n", "target_quat", "/=", "np", ".", "linalg", ".", "norm", "(", "target_quat", ")", "# normalized quaternion", "\n", "goal", "=", "np", ".", "concatenate", "(", "[", "target_pos", ",", "target_quat", "]", ")", "\n", "return", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._render_callback": [[239, 254], ["manipulate.ManipulateEnv.goal.copy", "manipulate.ManipulateEnv.sim.data.set_joint_qpos", "manipulate.ManipulateEnv.sim.data.set_joint_qvel", "manipulate.ManipulateEnv.sim.forward", "numpy.zeros", "manipulate.ManipulateEnv.sim.model.geom_name2id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "_render_callback", "(", "self", ")", ":", "\n", "# Assign current state to target object but offset a bit so that the actual object", "\n", "# is not obscured.", "\n", "        ", "goal", "=", "self", ".", "goal", ".", "copy", "(", ")", "\n", "assert", "goal", ".", "shape", "==", "(", "7", ",", ")", "\n", "if", "self", ".", "target_position", "==", "'ignore'", ":", "\n", "# Move the object to the side since we do not care about it's position.", "\n", "            ", "goal", "[", "0", "]", "+=", "0.15", "\n", "", "self", ".", "sim", ".", "data", ".", "set_joint_qpos", "(", "'target:joint'", ",", "goal", ")", "\n", "self", ".", "sim", ".", "data", ".", "set_joint_qvel", "(", "'target:joint'", ",", "np", ".", "zeros", "(", "6", ")", ")", "\n", "\n", "if", "'object_hidden'", "in", "self", ".", "sim", ".", "model", ".", "geom_names", ":", "\n", "            ", "hidden_id", "=", "self", ".", "sim", ".", "model", ".", "geom_name2id", "(", "'object_hidden'", ")", "\n", "self", ".", "sim", ".", "model", ".", "geom_rgba", "[", "hidden_id", ",", "3", "]", "=", "1.", "\n", "", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.ManipulateEnv._get_obs": [[255, 264], ["gym.envs.robotics.utils.robot_get_obs", "manipulate.ManipulateEnv.sim.data.get_joint_qvel", "manipulate.ManipulateEnv._get_achieved_goal().ravel", "numpy.concatenate", "numpy.concatenate.copy", "manipulate.ManipulateEnv.copy", "manipulate.ManipulateEnv.goal.ravel().copy", "manipulate.ManipulateEnv._get_achieved_goal", "manipulate.ManipulateEnv.goal.ravel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.robot_get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._get_achieved_goal"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "robot_qpos", ",", "robot_qvel", "=", "robot_get_obs", "(", "self", ".", "sim", ")", "\n", "object_qvel", "=", "self", ".", "sim", ".", "data", ".", "get_joint_qvel", "(", "'object:joint'", ")", "\n", "achieved_goal", "=", "self", ".", "_get_achieved_goal", "(", ")", ".", "ravel", "(", ")", "# this contains the object position + rotation", "\n", "observation", "=", "np", ".", "concatenate", "(", "[", "robot_qpos", ",", "robot_qvel", ",", "object_qvel", ",", "achieved_goal", "]", ")", "\n", "return", "{", "\n", "'observation'", ":", "observation", ".", "copy", "(", ")", ",", "\n", "'achieved_goal'", ":", "achieved_goal", ".", "copy", "(", ")", ",", "\n", "'desired_goal'", ":", "self", ".", "goal", ".", "ravel", "(", ")", ".", "copy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.HandBlockEnv.__init__": [[268, 274], ["manipulate.ManipulateEnv.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_position", "=", "'random'", ",", "target_rotation", "=", "'xyz'", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "super", "(", "HandBlockEnv", ",", "self", ")", ".", "__init__", "(", "\n", "model_path", "=", "'hand/manipulate_block.xml'", ",", "target_position", "=", "target_position", ",", "\n", "target_rotation", "=", "target_rotation", ",", "\n", "target_position_range", "=", "np", ".", "array", "(", "[", "(", "-", "0.04", ",", "0.04", ")", ",", "(", "-", "0.06", ",", "0.02", ")", ",", "(", "0.0", ",", "0.06", ")", "]", ")", ",", "\n", "reward_type", "=", "reward_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.HandEggEnv.__init__": [[277, 283], ["manipulate.ManipulateEnv.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_position", "=", "'random'", ",", "target_rotation", "=", "'xyz'", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "super", "(", "HandEggEnv", ",", "self", ")", ".", "__init__", "(", "\n", "model_path", "=", "'hand/manipulate_egg.xml'", ",", "target_position", "=", "target_position", ",", "\n", "target_rotation", "=", "target_rotation", ",", "\n", "target_position_range", "=", "np", ".", "array", "(", "[", "(", "-", "0.04", ",", "0.04", ")", ",", "(", "-", "0.06", ",", "0.02", ")", ",", "(", "0.0", ",", "0.06", ")", "]", ")", ",", "\n", "reward_type", "=", "reward_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.HandPenEnv.__init__": [[286, 293], ["manipulate.ManipulateEnv.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_position", "=", "'random'", ",", "target_rotation", "=", "'xyz'", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "super", "(", "HandPenEnv", ",", "self", ")", ".", "__init__", "(", "\n", "model_path", "=", "'hand/manipulate_pen.xml'", ",", "target_position", "=", "target_position", ",", "\n", "target_rotation", "=", "target_rotation", ",", "\n", "target_position_range", "=", "np", ".", "array", "(", "[", "(", "-", "0.04", ",", "0.04", ")", ",", "(", "-", "0.06", ",", "0.02", ")", ",", "(", "0.0", ",", "0.06", ")", "]", ")", ",", "\n", "randomize_initial_rotation", "=", "False", ",", "reward_type", "=", "reward_type", ",", "\n", "ignore_z_target_rotation", "=", "True", ",", "distance_threshold", "=", "0.05", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.manipulate.quat_from_angle_and_axis": [[13, 19], ["numpy.linalg.norm", "numpy.concatenate", "numpy.linalg.norm", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "quat_from_angle_and_axis", "(", "angle", ",", "axis", ")", ":", "\n", "    ", "assert", "axis", ".", "shape", "==", "(", "3", ",", ")", "\n", "axis", "/=", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "quat", "=", "np", ".", "concatenate", "(", "[", "[", "np", ".", "cos", "(", "angle", "/", "2.", ")", "]", ",", "np", ".", "sin", "(", "angle", "/", "2.", ")", "*", "axis", "]", ")", "\n", "quat", "/=", "np", ".", "linalg", ".", "norm", "(", "quat", ")", "\n", "return", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv.__init__": [[51, 62], ["gym.envs.robotics.hand_env.HandEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._get_achieved_goal": [[63, 66], ["numpy.array().flatten", "reach.HandReachEnv.sim.data.get_site_xpos", "numpy.array"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv.compute_reward": [[70, 76], ["reach.goal_distance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.goal_distance"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._env_setup": [[80, 87], ["initial_qpos.items", "reach.HandReachEnv.sim.forward", "reach.HandReachEnv._get_achieved_goal().copy", "reach.HandReachEnv.sim.data.body_xpos[].copy", "reach.HandReachEnv.sim.data.set_joint_qpos", "reach.HandReachEnv._get_achieved_goal", "reach.HandReachEnv.sim.model.body_name2id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._get_achieved_goal"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._get_obs": [[88, 96], ["gym.envs.robotics.utils.robot_get_obs", "reach.HandReachEnv._get_achieved_goal().ravel", "numpy.concatenate", "numpy.concatenate.copy", "reach.HandReachEnv.copy", "reach.HandReachEnv.goal.copy", "reach.HandReachEnv._get_achieved_goal"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.robotics.utils.robot_get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._get_achieved_goal"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._sample_goal": [[98, 124], ["reach.HandReachEnv.np_random.choice", "FINGERTIP_SITE_NAMES.index", "FINGERTIP_SITE_NAMES.index", "reach.HandReachEnv.np_random.normal", "reach.HandReachEnv.initial_goal.copy().reshape", "reach.HandReachEnv.flatten", "numpy.array", "numpy.linalg.norm", "reach.HandReachEnv.np_random.uniform", "reach.HandReachEnv.initial_goal.copy", "reach.HandReachEnv.initial_goal.copy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._is_success": [[125, 128], ["reach.goal_distance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.goal_distance"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._render_callback": [[129, 145], ["reach.HandReachEnv.goal.reshape", "range", "reach.HandReachEnv._get_achieved_goal().reshape", "range", "reach.HandReachEnv.sim.forward", "reach.HandReachEnv.sim.model.site_name2id", "reach.HandReachEnv.sim.model.site_name2id", "reach.HandReachEnv._get_achieved_goal"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.HandReachEnv._get_achieved_goal"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.hand.reach.goal_distance": [[45, 48], ["numpy.linalg.norm"], "function", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.__init__": [[10, 35], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_catch.JacoCatchEnv._config.update", "jaco_catch.JacoCatchEnv.ob_shape.keys", "numpy.random.seed", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"catch_reward\"", ":", "100", ",", "\n", "\"hold_reward\"", ":", "4", ",", "\n", "\"hold_duration\"", ":", "50", ",", "\n", "\"random_throw\"", ":", "1", ",", "\n", "\"init_randomness\"", ":", "0.01", ",", "\n", "# \"init_randomness\": 0.005,", "\n", "\"random_steps\"", ":", "10", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_target_pos", "=", "[", "0.5", ",", "0.2", ",", "0.2", "]", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"catch_reward\"", ",", "\"hold_reward\"", ",", "\"success\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "self", ".", "t", "=", "0", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_pick.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.step": [[36, 76], ["jaco_catch.JacoCatchEnv.do_simulation", "jaco_catch.JacoCatchEnv._get_obs", "jaco_catch.JacoCatchEnv._ctrl_reward", "jaco_catch.JacoCatchEnv._get_distance_hand", "jaco_catch.JacoCatchEnv._get_box_pos", "numpy.linalg.norm", "print", "jaco_catch.JacoCatchEnv._get_box_pos", "jaco_catch.JacoCatchEnv._get_box_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "# print(self.t)", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "catch_reward", "=", "0", "\n", "hold_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "dist_box", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "in_hand", "=", "dist_box", "<", "0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "on_ground", "=", "box_z", "<=", "0.05", "\n", "\n", "# fail", "\n", "if", "on_ground", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# catch", "\n", "", "if", "in_air", "and", "in_hand", ":", "\n", "            ", "self", ".", "_hold_duration", "+=", "1", "\n", "catch_reward", "=", "self", ".", "_config", "[", "\"catch_reward\"", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_target_pos", "-", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "hold_reward", "=", "self", ".", "_config", "[", "\"hold_reward\"", "]", "*", "(", "1", "-", "dist", ")", "\n", "\n", "# success", "\n", "if", "self", ".", "_hold_duration", "==", "self", ".", "_config", "[", "'hold_duration'", "]", ":", "\n", "                ", "print", "(", "'success catch! {}'", ".", "format", "(", "self", ".", "_get_box_pos", "(", ")", ")", ")", "\n", "done", "=", "success", "=", "True", "\n", "\n", "", "", "reward", "=", "ctrl_reward", "+", "catch_reward", "+", "hold_reward", "\n", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"catch_reward\"", ":", "catch_reward", ",", "\n", "\"hold_reward\"", ":", "hold_reward", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv._throw_box": [[77, 94], ["jaco_catch.JacoCatchEnv._get_box_pos", "jaco_catch.JacoCatchEnv._get_pos", "jaco_catch.JacoCatchEnv.model.body_name2id", "jaco_catch.JacoCatchEnv.do_simulation", "jaco_catch.JacoCatchEnv.unwrapped.action_space.sample", "numpy.random.uniform", "numpy.random.uniform", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "_throw_box", "(", "self", ")", ":", "\n", "# set initial force", "\n", "        ", "box_pos", "=", "self", ".", "_get_box_pos", "(", ")", "\n", "jaco_pos", "=", "self", ".", "_get_pos", "(", "'jaco_link_base'", ")", "\n", "dx", "=", "0.4", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_throw\"", "]", "\n", "dy", "=", "0.3", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_throw\"", "]", "\n", "force", "=", "jaco_pos", "+", "[", "dx", ",", "dy", ",", "1", "]", "-", "box_pos", "\n", "force", "=", "110", "*", "(", "force", "/", "np", ".", "linalg", ".", "norm", "(", "force", ")", ")", "\n", "\n", "# apply force", "\n", "box_body_idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'box'", ")", "\n", "xfrc", "=", "self", ".", "data", ".", "xfrc_applied", "\n", "xfrc", "[", "box_body_idx", ",", ":", "3", "]", "=", "force", "\n", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "# reset force", "\n", "xfrc", "[", "box_body_idx", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv._get_obs": [[95, 101], ["jaco_catch.JacoCatchEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.get_ob_dict": [[102, 114], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.get_sim_state": [[116, 120], ["jaco_catch.JacoCatchEnv.data.qpos.ravel().copy", "jaco_catch.JacoCatchEnv.sim.get_state", "jaco_catch.JacoCatchEnv.data.qpos.ravel"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "return", "{", "'state'", ":", "state", ",", "'box_pos'", ":", "qpos", "[", "9", ":", "12", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.reset_model": [[121, 141], ["numpy.asarray", "jaco_catch.JacoCatchEnv.set_state", "range", "jaco_catch.JacoCatchEnv._throw_box", "jaco_catch.JacoCatchEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "int", "jaco_catch.JacoCatchEnv.do_simulation", "jaco_catch.JacoCatchEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._throw_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "# set box's initial position", "\n", "qpos", "[", "9", ":", "12", "]", "=", "np", ".", "asarray", "(", "[", "0", ",", "2.0", ",", "1.5", "]", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "t", "=", "0", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "", "self", ".", "_throw_box", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.rollback": [[142, 155], ["jaco_catch.JacoCatchEnv.sim.get_state", "mujoco_py.MjSimState", "jaco_catch.JacoCatchEnv.sim.set_state", "jaco_catch.JacoCatchEnv.do_simulation", "jaco_catch.JacoCatchEnv.sim.forward", "jaco_catch.JacoCatchEnv._throw_box", "jaco_catch.JacoCatchEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._throw_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "self", ".", "_throw_box", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_terminate": [[157, 177], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "success_length", "=", "50", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "self", ".", "count_evaluate", "=", "0", "\n", "self", ".", "success", "=", "True", "\n", "\n", "", "box_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "hand_pos", "=", "ob", "[", "46", ":", "49", "]", "\n", "dist_box", "=", "np", ".", "linalg", ".", "norm", "(", "box_pos", "-", "hand_pos", ")", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "in_hand", "=", "dist_box", "<", "0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "on_ground", "=", "box_z", "<=", "0.05", "\n", "\n", "if", "on_ground", "and", "self", ".", "count_evaluate", ">", "0", ":", "\n", "            ", "self", ".", "success", "=", "False", "\n", "\n", "", "if", "in_air", "and", "in_hand", ":", "\n", "            ", "self", ".", "count_evaluate", "+=", "1", "\n", "\n", "", "return", "self", ".", "success", "and", "self", ".", "count_evaluate", ">=", "success_length", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_boundary_catch_rear": [[178, 180], ["None"], "methods", ["None"], ["", "def", "is_boundary_catch_rear", "(", "self", ")", ":", "\n", "        ", "return", "1", "if", "self", ".", "t", "<=", "85", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_catch.JacoCatchEnv.is_transition_boundary_for_catch": [[181, 184], ["None"], "methods", ["None"], ["", "def", "is_transition_boundary_for_catch", "(", "self", ")", ":", "\n", "# print('self.t:', self.t)", "\n", "        ", "return", "1", "if", "self", ".", "t", "<=", "85", "else", "-", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.__init__": [[10, 39], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_forward.Walker2dForwardEnv._config.update", "walker2d_forward.Walker2dForwardEnv.ob_shape.keys", "numpy.random.seed", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__", "numpy.random.rand", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "1", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "1", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"apply_force\"", ":", "100", ",", "\n", "\"random_steps\"", ":", "5", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "x_pos_pivot", "=", "5.0", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "self", ".", "pivot", "=", "np", ".", "random", ".", "randint", "(", "300", ")", "+", "50", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'walker_v1.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.set_curbs_x_randomness_for_irl": [[40, 42], ["None"], "methods", ["None"], ["", "def", "set_curbs_x_randomness_for_irl", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", "\n", "", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.get_curbs_x_randomness": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.get_x_pos": [[45, 47], ["walker2d_forward.Walker2dForwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.get_q_pos": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_q_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.step": [[51, 113], ["walker2d_forward.Walker2dForwardEnv.sim.get_state", "walker2d_forward.Walker2dForwardEnv.do_simulation", "walker2d_forward.Walker2dForwardEnv._reset_external_force", "walker2d_forward.Walker2dForwardEnv._ctrl_reward", "numpy.cos", "walker2d_forward.Walker2dForwardEnv._get_obs", "numpy.random.rand", "walker2d_forward.Walker2dForwardEnv._apply_external_force", "max", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "done", "=", "False", "\n", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "angle", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "# reward", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "reward", "=", "x_vel_reward", "+", "angle_reward", "+", "height_reward", "+", "ctrl_reward", "+", "alive_reward", "+", "foot_reward", "\n", "\n", "# fail", "\n", "done", "=", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "\n", "self", ".", "t", "+=", "1", "\n", "success", "=", "not", "done", "and", "self", ".", "t", ">=", "1000", "\n", "if", "success", ":", "done", "=", "True", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"state\"", ":", "state", ",", "\n", "'obstacle_pos'", ":", "-", "1", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv._get_obs": [[114, 119], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.get_dist": [[120, 122], ["None"], "methods", ["None"], ["", "def", "get_dist", "(", "self", ")", ":", "\n", "        ", "return", "[", "5.1", ",", "5.2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.get_sim_state": [[123, 127], ["walker2d_forward.Walker2dForwardEnv.sim.get_state"], "methods", ["None"], ["", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "curb_obs", "=", "-", "1", "\n", "return", "{", "'state'", ":", "state", ",", "'obstacle_pos'", ":", "curb_obs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.get_ob_dict": [[128, 133], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "'acc'", ":", "ob", "[", "17", ":", "26", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.rollback": [[134, 143], ["walker2d_forward.Walker2dForwardEnv.sim.get_state", "mujoco_py.MjSimState", "walker2d_forward.Walker2dForwardEnv.sim.set_state", "walker2d_forward.Walker2dForwardEnv.do_simulation", "walker2d_forward.Walker2dForwardEnv.sim.forward", "walker2d_forward.Walker2dForwardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "cur_pos", ")", ":", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.reset_model": [[144, 164], ["walker2d_forward.Walker2dForwardEnv.set_state", "walker2d_forward.Walker2dForwardEnv._set_pos", "walker2d_forward.Walker2dForwardEnv._set_pos", "range", "walker2d_forward.Walker2dForwardEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "int", "walker2d_forward.Walker2dForwardEnv.do_simulation", "numpy.random.rand", "walker2d_forward.Walker2dForwardEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "# init target", "\n", "self", ".", "_set_pos", "(", "'target_forward'", ",", "(", "10", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "_set_pos", "(", "'target_backward'", ",", "(", "-", "10", ",", "0", ",", "0", ")", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "self", ".", "x_pos_pivot", "=", "5.0", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary": [[165, 177], ["print", "exit", "walker2d_forward.Walker2dForwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_boundary", "(", "self", ")", ":", "\n", "        ", "print", "(", "'called'", ")", "\n", "exit", "(", ")", "\n", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "3.5", "\n", "end", "=", "4.5", "\n", "if", "start", "<=", "agent_x", "and", "agent_x", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "agent_x", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over      ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_terminate": [[178, 185], ["len", "len"], "methods", ["None"], ["", "", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "ob", ")", "==", "28", ":", "\n", "# Walk-Jump or Walk-Jump-Crawl", "\n", "            ", "return", "ob", "[", "26", "]", "<", "5.1", "\n", "", "elif", "len", "(", "ob", ")", "==", "27", ":", "\n", "# Forward-Backward", "\n", "            ", "return", "ob", "[", "26", "]", "<", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary_forward_front_for_patrol": [[186, 189], ["None"], "methods", ["None"], ["", "", "def", "is_boundary_forward_front_for_patrol", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "return", "0", "if", "self", ".", "x_pos_pivot", "-", "qpos", "[", "0", "]", "<", "0", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_boundary_forward_rear_for_patrol": [[190, 201], ["walker2d_forward.Walker2dForwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_boundary_forward_rear_for_patrol", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "-", "1.0", "\n", "end", "=", "4.0", "\n", "\n", "if", "start", "<=", "agent_x", "and", "agent_x", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "agent_x", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over  ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_transition_boundary_for_patrol": [[202, 204], ["None"], "methods", ["None"], ["", "", "def", "is_transition_boundary_for_patrol", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_forward.Walker2dForwardEnv.is_transition_boundary_rear_for_patrol": [[205, 215], ["walker2d_forward.Walker2dForwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_transition_boundary_rear_for_patrol", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "-", "1.0", "\n", "end", "=", "4.0", "\n", "if", "start", "<=", "agent_x", "and", "agent_x", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "start", "<", "agent_x", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.__init__": [[9, 46], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_toss.JacoTossEnv._config.update", "jaco_toss.JacoTossEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"guide_reward\"", ":", "100", ",", "\n", "\"pick_reward\"", ":", "200", ",", "\n", "\"release_reward\"", ":", "50", ",", "\n", "\"up_reward\"", ":", "50", ",", "\n", "\"pos_stable_reward\"", ":", "2", ",", "\n", "\"success_reward\"", ":", "100", ",", "\n", "\"release_height\"", ":", "0.7", ",", "\n", "\"max_height\"", ":", "2.0", ",", "\n", "\"random_box\"", ":", "0.04", ",", "\n", "\"init_randomness\"", ":", "0.005", ",", "\n", "\"box_size\"", ":", "0.04", ",", "\n", "\"random_steps\"", ":", "0", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_boxtop", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "_dist_boxtop", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_released", "=", "False", "\n", "self", ".", "_above", "=", "False", "\n", "self", ".", "_falling", "=", "False", "\n", "self", ".", "_max_height", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"guide_reward\"", ",", "\"pick_reward\"", ",", "\"release_reward\"", ",", "\n", "\"up_reward\"", ",", "\"pos_stable_reward\"", ",", "\n", "\"success_reward\"", ",", "\"success\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_toss.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.step": [[47, 130], ["jaco_toss.JacoTossEnv.do_simulation", "jaco_toss.JacoTossEnv._get_obs", "jaco_toss.JacoTossEnv._ctrl_reward", "jaco_toss.JacoTossEnv._get_hand_pos", "jaco_toss.JacoTossEnv._get_box_pos", "jaco_toss.JacoTossEnv._get_distance_hand", "numpy.linalg.norm", "print", "min", "print", "min", "abs", "abs", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "\n", "guide_reward", "=", "0", "\n", "pick_reward", "=", "0", "\n", "pos_stable_reward", "=", "0", "\n", "release_reward", "=", "0", "\n", "up_reward", "=", "0", "\n", "success_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "box_pos", "=", "self", ".", "_get_box_pos", "(", ")", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "dist_hand", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "dist_boxtop", "=", "np", ".", "linalg", ".", "norm", "(", "hand_pos", "-", "self", ".", "_boxtop", ")", "\n", "in_air", "=", "box_z", ">", "self", ".", "_config", "[", "\"box_size\"", "]", "+", "0.03", "\n", "in_hand", "=", "dist_hand", "<", "0.10", "\n", "\n", "# guide hand to top of box", "\n", "if", "not", "self", ".", "_picked", "and", "not", "(", "in_hand", "and", "in_air", ")", ":", "\n", "            ", "guide_reward", "=", "self", ".", "_config", "[", "\"guide_reward\"", "]", "*", "(", "self", ".", "_dist_boxtop", "-", "dist_boxtop", ")", "\n", "self", ".", "_dist_boxtop", "=", "dist_boxtop", "\n", "\n", "# pick", "\n", "", "if", "in_hand", "and", "not", "self", ".", "_released", "and", "self", ".", "_pick_height", "<", "min", "(", "box_z", ",", "self", ".", "_config", "[", "\"release_height\"", "]", ")", ":", "\n", "            ", "pick_reward", "=", "self", ".", "_config", "[", "\"pick_reward\"", "]", "*", "(", "min", "(", "box_z", ",", "self", ".", "_config", "[", "\"release_height\"", "]", ")", "-", "self", ".", "_pick_height", ")", "\n", "self", ".", "_picked", "=", "True", "\n", "self", ".", "_pick_height", "=", "box_z", "\n", "\n", "# fail", "\n", "", "if", "self", ".", "_picked", "and", "not", "in_hand", "and", "not", "in_air", ":", "\n", "            ", "done", "=", "True", "\n", "", "print", "(", "box_z", ")", "\n", "# release", "\n", "if", "not", "self", ".", "_released", "and", "box_z", ">", "self", ".", "_config", "[", "\"release_height\"", "]", ":", "\n", "            ", "if", "in_hand", ":", "\n", "                ", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "release_reward", "=", "self", ".", "_config", "[", "\"release_reward\"", "]", "\n", "self", ".", "_released", "=", "True", "\n", "\n", "# pos stable and up reward", "\n", "", "", "if", "self", ".", "_picked", ":", "\n", "            ", "pos_diff", "=", "abs", "(", "box_pos", "[", "0", "]", "-", "0.4", ")", "+", "abs", "(", "box_pos", "[", "1", "]", "-", "0.3", ")", "-", "0.5", "\n", "pos_stable_reward", "=", "-", "self", ".", "_config", "[", "\"pos_stable_reward\"", "]", "*", "pos_diff", "\n", "\n", "", "if", "self", ".", "_released", ":", "\n", "            ", "if", "self", ".", "_max_height", "<", "box_z", ":", "\n", "                ", "self", ".", "_max_height", "=", "box_z", "\n", "", "elif", "not", "self", ".", "_falling", ":", "\n", "                ", "up_reward", "=", "self", ".", "_config", "[", "\"up_reward\"", "]", "*", "(", "1", "-", "abs", "(", "self", ".", "_config", "[", "\"max_height\"", "]", "-", "box_z", ")", "/", "self", ".", "_config", "[", "\"max_height\"", "]", ")", "\n", "if", "abs", "(", "box_z", "-", "self", ".", "_config", "[", "\"max_height\"", "]", ")", "<", "0.1", ":", "\n", "                    ", "up_reward", "+=", "self", ".", "_config", "[", "\"up_reward\"", "]", "\n", "self", ".", "_falling", "=", "True", "\n", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "if", "self", ".", "_falling", "and", "box_z", "<", "self", ".", "_config", "[", "\"release_height\"", "]", ":", "\n", "            ", "done", "=", "True", "\n", "success", "=", "abs", "(", "box_pos", "[", "0", "]", "-", "0.4", ")", "<", "0.1", "and", "abs", "(", "box_pos", "[", "1", "]", "-", "0.3", ")", "<", "0.1", "\n", "if", "success", ":", "\n", "                ", "print", "(", "'success'", ")", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "\n", "", "", "reward", "=", "ctrl_reward", "+", "guide_reward", "+", "pick_reward", "+", "release_reward", "+", "up_reward", "+", "pos_stable_reward", "+", "success_reward", "\n", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"pick_reward\"", ":", "pick_reward", ",", "\n", "\"guide_reward\"", ":", "guide_reward", ",", "\n", "\"release_reward\"", ":", "release_reward", ",", "\n", "\"up_reward\"", ":", "up_reward", ",", "\n", "\"pos_stable_reward\"", ":", "pos_stable_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv._get_obs": [[131, 141], ["jaco_toss.JacoTossEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "            ", "qpos", "=", "qpos", "[", ":", "12", "]", "\n", "qvel", "=", "qvel", "[", ":", "12", "]", "\n", "qacc", "=", "qacc", "[", ":", "12", "]", "\n", "", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.get_ob_dict": [[142, 166], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "                ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "24", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "24", ":", "36", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "36", ":", "39", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "                ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "24", "]", ",", "\n", "'acc'", ":", "ob", "[", "24", ":", "36", "]", ",", "\n", "'hand'", ":", "ob", "[", "36", ":", "39", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.reset_box": [[168, 181], ["jaco_toss.JacoTossEnv.data.qpos.ravel().copy", "jaco_toss.JacoTossEnv.data.qvel.ravel().copy", "numpy.asarray", "numpy.random.uniform", "jaco_toss.JacoTossEnv.set_state", "jaco_toss.JacoTossEnv.data.qpos.ravel", "jaco_toss.JacoTossEnv.data.qvel.ravel", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state"], ["", "", "def", "reset_box", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# set box's initial position", "\n", "r", "=", "self", ".", "_config", "[", "\"random_box\"", "]", "\n", "self", ".", "_init_box_pos", "=", "np", ".", "asarray", "(", "[", "0.4", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ")", ",", "\n", "0.3", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ")", ",", "\n", "self", ".", "_config", "[", "\"box_size\"", "]", "]", ")", "\n", "qpos", "[", "9", ":", "12", "]", "=", "self", ".", "_init_box_pos", "\n", "\n", "qvel", "[", "9", ":", "12", "]", "+=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "3", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.reset_model": [[182, 210], ["jaco_toss.JacoTossEnv.set_state", "jaco_toss.JacoTossEnv.model.body_name2id", "jaco_toss.JacoTossEnv.model.body_name2id", "jaco_toss.JacoTossEnv.reset_box", "range", "numpy.linalg.norm", "jaco_toss.JacoTossEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "int", "jaco_toss.JacoTossEnv.do_simulation", "jaco_toss.JacoTossEnv.unwrapped.action_space.sample", "jaco_toss.JacoTossEnv._get_hand_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "# set thresholds", "\n", "idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'release_point'", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"release_height\"", "]", "\n", "idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'max_point'", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"max_height\"", "]", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_boxtop", "=", "self", ".", "_init_box_pos", "+", "[", "0", ",", "0", ",", "self", ".", "_config", "[", "\"box_size\"", "]", "]", "\n", "self", ".", "_dist_boxtop", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_get_hand_pos", "(", ")", "-", "self", ".", "_boxtop", ")", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_released", "=", "False", "\n", "self", ".", "_above", "=", "False", "\n", "self", ".", "_falling", "=", "False", "\n", "self", ".", "_max_height", "=", "0", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.is_terminate": [[211, 216], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "box_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "if", "box_pos", "[", "2", "]", ">", "env", ".", "unwrapped", ".", "_config", "[", "\"release_height\"", "]", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_toss.JacoTossEnv.viewer_setup": [[217, 228], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "# self.viewer.cam.trackbodyid = 1", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "# self.viewer.cam.distance = self.model.stat.extent * 2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "4", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "100", "\n", "# self.viewer.cam.azimuth = 90", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "0", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "1", "]", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.__init__": [[12, 41], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_pick.JacoPickEnv._config.update", "jaco_pick.JacoPickEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"pick_reward\"", ":", "100", ",", "\n", "\"hold_reward\"", ":", "2", ",", "\n", "\"guide_reward\"", ":", "2", ",", "\n", "\"success_reward\"", ":", "1", ",", "\n", "\"random_box\"", ":", "1", ",", "\n", "\"init_randomness\"", ":", "0.01", ",", "\n", "\"random_steps\"", ":", "10", ",", "\n", "\"hold_duration\"", ":", "50", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_dist_box", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"guide_reward\"", ",", "\"pick_reward\"", ",", "\"hold_reward\"", ",", "\n", "\"success_reward\"", ",", "\"success\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_pick.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.step": [[42, 98], ["jaco_pick.JacoPickEnv.do_simulation", "jaco_pick.JacoPickEnv._get_obs", "jaco_pick.JacoPickEnv._ctrl_reward", "jaco_pick.JacoPickEnv._get_hand_pos", "jaco_pick.JacoPickEnv._get_distance_hand", "jaco_pick.JacoPickEnv._get_box_pos", "numpy.linalg.norm", "min", "print", "jaco_pick.JacoPickEnv._get_box_pos", "jaco_pick.JacoPickEnv._get_box_pos", "min"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "_t", "+=", "1", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "guide_reward", "=", "0", "\n", "pick_reward", "=", "0", "\n", "hold_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "success_reward", "=", "0", "\n", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "dist_box", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "in_hand", "=", "dist_box", "<", "0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "\n", "if", "in_hand", "and", "in_air", ":", "\n", "            ", "self", ".", "_picked", "=", "True", "\n", "\n", "# pick up", "\n", "if", "self", ".", "_pick_height", "<", "min", "(", "self", ".", "_target_pos", "[", "2", "]", ",", "box_z", ")", ":", "\n", "                ", "pick_reward", "=", "self", ".", "_config", "[", "\"pick_reward\"", "]", "*", "(", "min", "(", "self", ".", "_target_pos", "[", "2", "]", ",", "box_z", ")", "-", "self", ".", "_pick_height", ")", "\n", "self", ".", "_pick_height", "=", "box_z", "\n", "\n", "# hold", "\n", "", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_target_pos", "-", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "hold_reward", "=", "self", ".", "_config", "[", "\"hold_reward\"", "]", "*", "(", "1", "-", "dist", ")", "\n", "self", ".", "_hold_duration", "+=", "1", "\n", "\n", "# success", "\n", "if", "self", ".", "_config", "[", "'hold_duration'", "]", "==", "self", ".", "_hold_duration", ":", "\n", "                ", "print", "(", "'success pick!'", ",", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "done", "=", "success", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "*", "(", "200", "-", "self", ".", "_t", ")", "\n", "\n", "# guide hand to the box", "\n", "", "", "if", "not", "self", ".", "_picked", ":", "\n", "            ", "guide_reward", "=", "self", ".", "_config", "[", "\"guide_reward\"", "]", "*", "(", "self", ".", "_dist_box", "-", "dist_box", ")", "\n", "self", ".", "_dist_box", "=", "dist_box", "\n", "\n", "", "if", "self", ".", "_picked", "and", "not", "in_hand", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "reward", "=", "ctrl_reward", "+", "pick_reward", "+", "hold_reward", "+", "guide_reward", "+", "success_reward", "\n", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"pick_reward\"", ":", "pick_reward", ",", "\n", "\"hold_reward\"", ":", "hold_reward", ",", "\n", "\"guide_reward\"", ":", "guide_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"success_count\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv._get_obs": [[99, 105], ["jaco_pick.JacoPickEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.get_ob_dict": [[106, 118], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.get_sim_state": [[120, 124], ["jaco_pick.JacoPickEnv.data.qpos.ravel().copy", "jaco_pick.JacoPickEnv.sim.get_state", "jaco_pick.JacoPickEnv.data.qpos.ravel"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "return", "{", "'state'", ":", "state", ",", "'box_pos'", ":", "qpos", "[", "9", ":", "12", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.reset_box": [[125, 151], ["jaco_pick.JacoPickEnv.data.qpos.ravel().copy", "jaco_pick.JacoPickEnv.data.qvel.ravel().copy", "numpy.asarray", "jaco_pick.JacoPickEnv.set_state", "numpy.linalg.norm", "jaco_pick.JacoPickEnv._init_box_pos.copy", "numpy.random.uniform", "numpy.random.uniform", "jaco_pick.JacoPickEnv.data.qpos.ravel", "jaco_pick.JacoPickEnv.data.qvel.ravel", "jaco_pick.JacoPickEnv._get_hand_pos", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos"], ["", "def", "reset_box", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# set box's initial pose", "\n", "self", ".", "_init_box_pos", "=", "np", ".", "asarray", "(", "\n", "[", "0.5", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_box\"", "]", ",", "\n", "0.2", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_box\"", "]", ",", "\n", "0.03", "]", ")", "\n", "qpos", "[", "9", ":", "12", "]", "=", "self", ".", "_init_box_pos", "\n", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "[", "12", ":", "16", "]", "=", "self", ".", "init_qpos", "[", "12", ":", "16", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "4", ")", "\n", "qvel", "[", "9", ":", "15", "]", "=", "self", ".", "init_qvel", "[", "9", ":", "15", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "6", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_dist_box", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_get_hand_pos", "(", ")", "-", "self", ".", "_init_box_pos", ")", "\n", "self", ".", "_target_pos", "=", "self", ".", "_init_box_pos", ".", "copy", "(", ")", "\n", "self", ".", "_target_pos", "[", "2", "]", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.rollback": [[152, 164], ["jaco_pick.JacoPickEnv.sim.get_state", "mujoco_py.MjSimState", "jaco_pick.JacoPickEnv.sim.set_state", "jaco_pick.JacoPickEnv.do_simulation", "jaco_pick.JacoPickEnv.reset_box", "jaco_pick.JacoPickEnv.sim.forward", "jaco_pick.JacoPickEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.reset_model": [[165, 182], ["jaco_pick.JacoPickEnv.set_state", "jaco_pick.JacoPickEnv.reset_box", "range", "jaco_pick.JacoPickEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "int", "jaco_pick.JacoPickEnv.do_simulation", "jaco_pick.JacoPickEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.set_randomness_for_irl": [[183, 185], ["None"], "methods", ["None"], ["", "def", "set_randomness_for_irl", "(", "self", ")", ":", "\n", "        ", "self", ".", "_config", "[", "\"init_randomness\"", "]", "=", "0.005", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_boundary_pick_rear": [[186, 194], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "is_boundary_pick_rear", "(", "self", ",", "ob", ",", "n_ob", ")", ":", "\n", "        ", "box_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "n_box_pos", "=", "n_ob", "[", "9", ":", "12", "]", "\n", "n_box_z", "=", "n_box_pos", "[", "2", "]", "\n", "\n", "in_air", "=", "n_box_z", ">", "0.05", "\n", "is_box_moving", "=", "np", ".", "linalg", ".", "norm", "(", "n_box_pos", "-", "box_pos", ")", ">", "0.05", "\n", "return", "1", "if", "not", "in_air", "and", "not", "is_box_moving", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_transition_boundary_for_pick": [[195, 202], ["jaco_pick.JacoPickEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "is_transition_boundary_for_pick", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "box_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "\n", "return", "1", "if", "not", "in_air", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick.JacoPickEnv.is_terminate": [[203, 227], ["numpy.linalg.norm", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "success_length", "=", "50", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "self", ".", "count_evaluate", "=", "0", "\n", "self", ".", "success", "=", "True", "\n", "\n", "", "box_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "hand_pos", "=", "ob", "[", "46", ":", "49", "]", "\n", "dist_box", "=", "np", ".", "linalg", ".", "norm", "(", "box_pos", "-", "hand_pos", ")", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "in_hand", "=", "dist_box", "<", "0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "print", "(", "'in_hand: '", ",", "in_hand", ",", "'dist_box: '", ",", "dist_box", ",", "'in_air: '", ",", "in_air", ")", "\n", "print", "(", "'box_pos: '", ",", "box_pos", ")", "\n", "\n", "\n", "if", "not", "in_hand", "and", "self", ".", "count_evaluate", ">", "0", ":", "\n", "            ", "self", ".", "success", "=", "False", "\n", "\n", "", "if", "in_air", "and", "in_hand", ":", "\n", "            ", "self", ".", "count_evaluate", "+=", "1", "\n", "\n", "", "print", "(", "dist_box", ",", "self", ".", "success", ",", "self", ".", "count_evaluate", ">=", "success_length", ",", "self", ".", "count_evaluate", ")", "\n", "\n", "return", "self", ".", "success", "and", "self", ".", "count_evaluate", ">=", "success_length", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.__init__": [[10, 37], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_backward.Walker2dBackwardEnv._config.update", "walker2d_backward.Walker2dBackwardEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "1", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "1", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"apply_force\"", ":", "100", ",", "\n", "\"random_steps\"", ":", "5", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "self", ".", "x_pos_pivot", "=", "4.5", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'walker_v1.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.step": [[38, 96], ["walker2d_backward.Walker2dBackwardEnv.do_simulation", "walker2d_backward.Walker2dBackwardEnv._reset_external_force", "walker2d_backward.Walker2dBackwardEnv._ctrl_reward", "numpy.cos", "walker2d_backward.Walker2dBackwardEnv._get_obs", "numpy.random.rand", "walker2d_backward.Walker2dBackwardEnv._apply_external_force", "max", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "done", "=", "False", "\n", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "foot_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "angle", ")", "\n", "x_vel", "=", "-", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "# reward", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "reward", "=", "x_vel_reward", "+", "angle_reward", "+", "height_reward", "+", "ctrl_reward", "+", "alive_reward", "+", "foot_reward", "\n", "\n", "# fail", "\n", "done", "=", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "\n", "self", ".", "t", "+=", "1", "\n", "success", "=", "not", "done", "and", "self", ".", "t", ">=", "1000", "\n", "if", "success", ":", "done", "=", "True", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "-", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv._get_obs": [[97, 102], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.get_x_pos": [[103, 105], ["walker2d_backward.Walker2dBackwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.get_q_pos": [[106, 108], ["None"], "methods", ["None"], ["", "def", "get_q_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.get_ob_dict": [[109, 114], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "'acc'", ":", "ob", "[", "17", ":", "26", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.get_sim_state": [[115, 119], ["walker2d_backward.Walker2dBackwardEnv.sim.get_state"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "curb_obs", "=", "-", "1", "\n", "return", "{", "'state'", ":", "state", ",", "'obstacle_pos'", ":", "curb_obs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.rollback": [[120, 129], ["walker2d_backward.Walker2dBackwardEnv.sim.get_state", "mujoco_py.MjSimState", "walker2d_backward.Walker2dBackwardEnv.sim.set_state", "walker2d_backward.Walker2dBackwardEnv.do_simulation", "walker2d_backward.Walker2dBackwardEnv.sim.forward", "walker2d_backward.Walker2dBackwardEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "cur_pos", ")", ":", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.reset_model": [[130, 150], ["walker2d_backward.Walker2dBackwardEnv.set_state", "walker2d_backward.Walker2dBackwardEnv._set_pos", "walker2d_backward.Walker2dBackwardEnv._set_pos", "range", "walker2d_backward.Walker2dBackwardEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "int", "walker2d_backward.Walker2dBackwardEnv.do_simulation", "numpy.random.rand", "walker2d_backward.Walker2dBackwardEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "# init target", "\n", "self", ".", "_set_pos", "(", "'target_forward'", ",", "(", "10", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "_set_pos", "(", "'target_backward'", ",", "(", "-", "10", ",", "0", ",", "0", ")", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "self", ".", "x_pos_pivot", "=", "4.5", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_terminate": [[151, 154], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "# Forward-Backward", "\n", "        ", "return", "ob", "[", "26", "]", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_terminate2": [[155, 159], ["None"], "methods", ["None"], ["", "def", "is_terminate2", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "# print('hi', qpos[0])", "\n", "return", "qpos", "[", "0", "]", "+", "2.0", "<", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_boundary_backward_front_for_patrol": [[160, 164], ["None"], "methods", ["None"], ["", "def", "is_boundary_backward_front_for_patrol", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "# print('hi', qpos[0])", "\n", "return", "0", "if", "qpos", "[", "0", "]", "+", "self", ".", "x_pos_pivot", "<", "0", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_boundary_backward_rear_for_patrol": [[165, 176], ["walker2d_backward.Walker2dBackwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_boundary_backward_rear_for_patrol", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "1.0", "\n", "end", "=", "-", "4.0", "\n", "# print(agent_x)", "\n", "if", "start", ">=", "agent_x", "and", "agent_x", ">", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "agent_x", ">", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over  ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_for_patrol": [[177, 179], ["None"], "methods", ["None"], ["", "", "def", "is_transition_boundary_for_patrol", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.is_transition_boundary_rear_for_patrol": [[180, 190], ["walker2d_backward.Walker2dBackwardEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_transition_boundary_rear_for_patrol", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "1.0", "\n", "end", "=", "-", "4.0", "\n", "if", "start", ">=", "agent_x", "and", "agent_x", ">", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "start", "<", "agent_x", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.set_curbs_x_randomness_for_irl": [[191, 193], ["None"], "methods", ["None"], ["", "", "def", "set_curbs_x_randomness_for_irl", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_backward.Walker2dBackwardEnv.get_curbs_x_randomness": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", ",", "-", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.__init__": [[11, 47], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_crawl.Walker2dCrawlEnv._config.update", "walker2d_crawl.Walker2dCrawlEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "2", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "0", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"collision_penalty\"", ":", "10", ",", "\n", "\"ceil_height\"", ":", "1.0", ",", "\n", "\"apply_force\"", ":", "300", ",", "\n", "\"random_steps\"", ":", "5", ",", "\n", "\"min_height\"", ":", "0.3", ",", "\n", "\"done_when_collide\"", ":", "1", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_ceils", "=", "None", "\n", "self", ".", "_ceils_x", "=", "2", "\n", "self", ".", "_stage", "=", "0", "\n", "self", ".", "_collide", "=", "False", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\"collision_penalty\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "self", ".", "collecting_demo", "=", "False", "\n", "self", ".", "randomness", "=", "0.0", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"walker_v2.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.step": [[48, 109], ["walker2d_crawl.Walker2dCrawlEnv.do_simulation", "walker2d_crawl.Walker2dCrawlEnv._reset_external_force", "walker2d_crawl.Walker2dCrawlEnv.collision_detection", "walker2d_crawl.Walker2dCrawlEnv._ctrl_reward", "numpy.cos", "walker2d_crawl.Walker2dCrawlEnv._get_obs", "numpy.random.rand", "walker2d_crawl.Walker2dCrawlEnv._apply_external_force", "max", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.collision_detection", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "collision_penalty", "=", "0", "\n", "if", "self", ".", "collision_detection", "(", "'ceiling'", ")", ":", "\n", "            ", "self", ".", "_collide", "=", "True", "\n", "collision_penalty", "=", "-", "self", ".", "_config", "[", "\"collision_penalty\"", "]", "\n", "\n", "", "done", "=", "False", "\n", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "angle", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "# reward", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "reward", "=", "x_vel_reward", "+", "collision_penalty", "+", "angle_reward", "+", "ctrl_reward", "+", "alive_reward", "+", "foot_reward", "\n", "\n", "done", "=", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "or", "(", "self", ".", "_config", "[", "\"done_when_collide\"", "]", "and", "self", ".", "_collide", ")", "\n", "self", ".", "t", "+=", "1", "\n", "success", "=", "not", "done", "and", "self", ".", "t", ">=", "1000", "\n", "if", "success", ":", "done", "=", "True", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"collision_penalty\"", ":", "collision_penalty", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv._get_obs": [[110, 115], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_ob_dict": [[116, 125], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", "17", ":", "26", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.reset_model": [[127, 143], ["walker2d_crawl.Walker2dCrawlEnv._put_ceils", "walker2d_crawl.Walker2dCrawlEnv.set_state", "range", "walker2d_crawl.Walker2dCrawlEnv._get_obs", "int", "walker2d_crawl.Walker2dCrawlEnv.do_simulation", "numpy.random.uniform", "numpy.random.uniform", "walker2d_crawl.Walker2dCrawlEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv._put_ceils", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "_put_ceils", "(", ")", "\n", "self", ".", "_pass_state", "=", "False", "\n", "self", ".", "_collide", "=", "False", "\n", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.rollback": [[144, 159], ["walker2d_crawl.Walker2dCrawlEnv.sim.get_state", "mujoco_py.MjSimState", "walker2d_crawl.Walker2dCrawlEnv.sim.set_state", "walker2d_crawl.Walker2dCrawlEnv.do_simulation", "walker2d_crawl.Walker2dCrawlEnv.sim.forward", "walker2d_crawl.Walker2dCrawlEnv._get_obs", "walker2d_crawl.Walker2dCrawlEnv.model.geom_name2id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "cur_pos", ")", ":", "\n", "        ", "if", "cur_pos", "!=", "-", "1", ":", "\n", "            ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'ceiling1'", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "cur_pos", "\n", "self", ".", "_ceils", "=", "{", "'pos'", ":", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", ",", "'size'", ":", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "}", "\n", "\n", "", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv._put_ceils": [[160, 169], ["numpy.random.uniform", "walker2d_crawl.Walker2dCrawlEnv.model.geom_name2id", "walker2d_crawl.Walker2dCrawlEnv.model.geom_name2id"], "methods", ["None"], ["", "def", "_put_ceils", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "collecting_demo", ":", "\n", "            ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'ceiling_long'", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'ceiling1'", ")", "\n", "", "offset", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "randomness", ",", "self", ".", "randomness", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "self", ".", "_ceils_x", "+", "offset", "+", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"ceil_height\"", "]", "\n", "self", ".", "_ceils", "=", "{", "'pos'", ":", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", ",", "'size'", ":", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.set_curbs_x_randomness_for_irl": [[170, 175], ["None"], "methods", ["None"], ["", "def", "set_curbs_x_randomness_for_irl", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "        ", "self", ".", "_ceils_x", "=", "8.0", "\n", "self", ".", "collecting_demo", "=", "True", "\n", "self", ".", "randomness", "=", "0.5", "\n", "self", ".", "_config", "[", "'apply_force'", "]", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_sim_state": [[176, 180], ["walker2d_crawl.Walker2dCrawlEnv.sim.get_state"], "methods", ["None"], ["", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "obstacle_pos", "=", "self", ".", "_ceils", "[", "'pos'", "]", "\n", "return", "{", "'state'", ":", "state", ",", "'obstacle_pos'", ":", "obstacle_pos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_x_pos": [[181, 183], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_curb_pos": [[184, 186], ["None"], "methods", ["None"], ["", "def", "get_curb_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ceils", "[", "'pos'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_dist": [[187, 197], ["walker2d_crawl.Walker2dCrawlEnv.get_x_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos"], ["", "def", "get_dist", "(", "self", ")", ":", "\n", "        ", "obs_obs", "=", "[", "5.1", ",", "6.0", "]", "\n", "x_agent", "=", "self", ".", "get_x_pos", "(", ")", "\n", "obs_start", "=", "self", ".", "_ceils", "[", "'pos'", "]", "-", "1.5", "\n", "obs_end", "=", "self", ".", "_ceils", "[", "'pos'", "]", "+", "1.5", "\n", "# print(obs_start, x_agent)", "\n", "if", "0", "<", "obs_start", "-", "x_agent", "and", "obs_start", "-", "x_agent", "<", "3.0", ":", "\n", "            ", "obs_obs", "=", "[", "obs_start", "-", "x_agent", ",", "obs_end", "-", "x_agent", "]", "\n", "# print(obs_obs)", "\n", "", "return", "obs_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.get_curbs_x_randomness": [[198, 200], ["None"], "methods", ["None"], ["", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ceils_x", ",", "self", ".", "randomness", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_terminate": [[201, 209], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "self", ".", "_entered", "=", "False", "\n", "", "if", "ob", "[", "26", "]", "<", "0", ":", "\n", "            ", "self", ".", "_entered", "=", "True", "\n", "", "if", "ob", "[", "26", "]", ">=", "5.1", "and", "self", ".", "_entered", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_walk_front_for_obstacle": [[210, 221], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_boundary_walk_front_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_ceils", "[", "'pos'", "]", "-", "1.5", "-", "agent_x", "\n", "start", "=", "2.5", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over   ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_crawl_rear_for_obstacle": [[222, 233], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_crawl_rear_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_ceils", "[", "'pos'", "]", "-", "1.5", "-", "agent_x", "\n", "start", "=", "1.0", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over   ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_crawl_front_for_obstacle": [[234, 245], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_crawl_front_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "agent_x", "-", "self", ".", "_ceils", "[", "'pos'", "]", "\n", "start", "=", "2.0", "\n", "end", "=", "2.5", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_boundary_walk_rear_for_obstacle": [[246, 257], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_walk_rear_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "-", "1.0", "\n", "end", "=", "4.0", "\n", "\n", "if", "start", "<=", "agent_x", "and", "agent_x", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "agent_x", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over   ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_transition_boundary_for_obstacle": [[258, 269], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_transition_boundary_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_ceils", "[", "'pos'", "]", "-", "1.5", "-", "agent_x", "\n", "start", "=", "1.0", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_crawl.Walker2dCrawlEnv.is_transition_boundary_rear_for_obstacle": [[270, 281], ["walker2d_crawl.Walker2dCrawlEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_transition_boundary_rear_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "agent_x", "-", "self", ".", "_ceils", "[", "'pos'", "]", "\n", "start", "=", "2.0", "\n", "end", "=", "6.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_config", "=", "{", "}", "\n", "self", ".", "_fail", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.set_environment_config": [[12, 16], ["config.items"], "methods", ["None"], ["", "def", "set_environment_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "            ", "assert", "k", "in", "self", ".", "_config", ",", "'{} is not in the self._config'", ".", "format", "(", "k", ")", "\n", "self", ".", "_config", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.render_frame": [[17, 21], ["base_env.BaseEnv._get_viewer", "base_env.BaseEnv.viewer_setup", "base_env.BaseEnv._read_pixels_as_in_window"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.viewer_setup"], ["", "", "def", "render_frame", "(", "self", ")", ":", "\n", "        ", "viewer", "=", "self", ".", "_get_viewer", "(", ")", "\n", "self", ".", "viewer_setup", "(", ")", "\n", "return", "viewer", ".", "_read_pixels_as_in_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.do_simulation": [[22, 29], ["super().do_simulation", "print", "base_env.BaseEnv.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "do_simulation", "(", "self", ",", "a", ",", "frame_skip", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "super", "(", ")", ".", "do_simulation", "(", "a", ",", "frame_skip", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'! warning: simulation is unstable. reset the simulation.'", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "_fail", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.step": [[30, 32], ["None"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_obs": [[33, 35], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos": [[37, 43], ["base_env.BaseEnv.data.get_geom_xpos", "base_env.BaseEnv.data.get_body_xpos"], "methods", ["None"], ["", "def", "_get_pos", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "model", ".", "geom_names", ":", "\n", "            ", "return", "self", ".", "data", ".", "get_geom_xpos", "(", "name", ")", "\n", "", "if", "name", "in", "self", ".", "model", ".", "body_names", ":", "\n", "            ", "return", "self", ".", "data", ".", "get_body_xpos", "(", "name", ")", "\n", "", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos": [[44, 54], ["base_env.BaseEnv.model.geom_name2id", "base_env.BaseEnv.model.body_name2id"], "methods", ["None"], ["", "def", "_set_pos", "(", "self", ",", "name", ",", "pos", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "model", ".", "geom_names", ":", "\n", "            ", "geom_idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "name", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "geom_idx", "]", "[", "0", ":", "3", "]", "=", "pos", "[", ":", "]", "\n", "return", "\n", "", "if", "name", "in", "self", ".", "model", ".", "body_names", ":", "\n", "            ", "body_idx", "=", "self", ".", "model", ".", "body_name2id", "(", "name", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "body_idx", "]", "=", "pos", "[", ":", "]", "\n", "return", "\n", "", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_rot": [[55, 59], ["base_env.BaseEnv.data.get_body_xquat"], "methods", ["None"], ["", "def", "_get_rot", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "model", ".", "body_names", ":", "\n", "            ", "return", "self", ".", "data", ".", "get_body_xquat", "(", "name", ")", "\n", "", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_distance": [[60, 64], ["base_env.BaseEnv._get_pos", "base_env.BaseEnv._get_pos", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos"], ["", "def", "_get_distance", "(", "self", ",", "name1", ",", "name2", ")", ":", "\n", "        ", "pos1", "=", "self", ".", "_get_pos", "(", "name1", ")", "\n", "pos2", "=", "self", ".", "_get_pos", "(", "name2", ")", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "pos1", "-", "pos2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_size": [[65, 70], ["base_env.BaseEnv.model.body_name2id", "enumerate", "base_env.BaseEnv.model.geom_size[].copy"], "methods", ["None"], ["", "def", "_get_size", "(", "self", ",", "name", ")", ":", "\n", "        ", "body_idx1", "=", "self", ".", "model", ".", "body_name2id", "(", "name", ")", "\n", "for", "geom_idx", ",", "body_idx2", "in", "enumerate", "(", "self", ".", "model", ".", "geom_bodyid", ")", ":", "\n", "            ", "if", "body_idx1", "==", "body_idx2", ":", "\n", "                ", "return", "self", ".", "model", ".", "geom_size", "[", "geom_idx", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_size": [[71, 76], ["base_env.BaseEnv.model.body_name2id", "enumerate"], "methods", ["None"], ["", "", "", "def", "_set_size", "(", "self", ",", "name", ",", "size", ")", ":", "\n", "        ", "body_idx1", "=", "self", ".", "model", ".", "body_name2id", "(", "name", ")", "\n", "for", "geom_idx", ",", "body_idx2", "in", "enumerate", "(", "self", ".", "model", ".", "geom_bodyid", ")", ":", "\n", "            ", "if", "body_idx1", "==", "body_idx2", ":", "\n", "                ", "self", ".", "model", ".", "geom_size", "[", "geom_idx", ",", ":", "]", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_geom_type": [[77, 82], ["base_env.BaseEnv.model.body_name2id", "enumerate", "base_env.BaseEnv.model.geom_type[].copy"], "methods", ["None"], ["", "", "", "def", "_get_geom_type", "(", "self", ",", "name", ")", ":", "\n", "        ", "body_idx1", "=", "self", ".", "model", ".", "body_name2id", "(", "name", ")", "\n", "for", "geom_idx", ",", "body_idx2", "in", "enumerate", "(", "self", ".", "model", ".", "geom_bodyid", ")", ":", "\n", "            ", "if", "body_idx1", "==", "body_idx2", ":", "\n", "                ", "return", "self", ".", "model", ".", "geom_type", "[", "geom_idx", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_geom_type": [[83, 88], ["base_env.BaseEnv.model.body_name2id", "enumerate"], "methods", ["None"], ["", "", "", "def", "_set_geom_type", "(", "self", ",", "name", ",", "geom_type", ")", ":", "\n", "        ", "body_idx1", "=", "self", ".", "model", ".", "body_name2id", "(", "name", ")", "\n", "for", "geom_idx", ",", "body_idx2", "in", "enumerate", "(", "self", ".", "model", ".", "geom_bodyid", ")", ":", "\n", "            ", "if", "body_idx1", "==", "body_idx2", ":", "\n", "                ", "self", ".", "model", ".", "geom_type", "[", "geom_idx", "]", "=", "geom_type", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_qpos": [[89, 92], ["base_env.BaseEnv.data.get_joint_qpos", "base_env.BaseEnv.copy"], "methods", ["None"], ["", "", "", "def", "_get_qpos", "(", "self", ",", "name", ")", ":", "\n", "        ", "object_qpos", "=", "self", ".", "data", ".", "get_joint_qpos", "(", "name", ")", "\n", "return", "object_qpos", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_qpos": [[93, 99], ["base_env.BaseEnv.data.get_joint_qpos", "base_env.BaseEnv.data.set_joint_qpos"], "methods", ["None"], ["", "def", "_set_qpos", "(", "self", ",", "name", ",", "pos", ",", "rot", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "        ", "object_qpos", "=", "self", ".", "data", ".", "get_joint_qpos", "(", "name", ")", "\n", "assert", "object_qpos", ".", "shape", "==", "(", "7", ",", ")", "\n", "object_qpos", "[", ":", "3", "]", "=", "pos", "\n", "object_qpos", "[", "3", ":", "]", "=", "rot", "\n", "self", ".", "data", ".", "set_joint_qpos", "(", "name", ",", "object_qpos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_color": [[100, 105], ["base_env.BaseEnv.model.body_name2id", "enumerate", "len"], "methods", ["None"], ["", "def", "_set_color", "(", "self", ",", "name", ",", "color", ")", ":", "\n", "        ", "body_idx1", "=", "self", ".", "model", ".", "body_name2id", "(", "name", ")", "\n", "for", "geom_idx", ",", "body_idx2", "in", "enumerate", "(", "self", ".", "model", ".", "geom_bodyid", ")", ":", "\n", "            ", "if", "body_idx1", "==", "body_idx2", ":", "\n", "                ", "self", ".", "model", ".", "geom_rgba", "[", "geom_idx", ",", "0", ":", "len", "(", "color", ")", "]", "=", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._mass_center": [[106, 110], ["numpy.expand_dims", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "", "", "def", "_mass_center", "(", "self", ")", ":", "\n", "        ", "mass", "=", "np", ".", "expand_dims", "(", "self", ".", "model", ".", "body_mass", ",", "axis", "=", "1", ")", "\n", "xpos", "=", "self", ".", "data", ".", "xipos", "\n", "return", "(", "np", ".", "sum", "(", "mass", "*", "xpos", ",", "0", ")", "/", "np", ".", "sum", "(", "mass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force": [[111, 115], ["range", "len"], "methods", ["None"], ["", "def", "_reset_external_force", "(", "self", ")", ":", "\n", "        ", "xfrc", "=", "self", ".", "data", ".", "xfrc_applied", "\n", "for", "i", "in", "range", "(", "len", "(", "xfrc", ")", ")", ":", "\n", "            ", "xfrc", "[", "i", ",", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force": [[116, 121], ["numpy.random.randint", "len", "numpy.random.rand"], "methods", ["None"], ["", "", "def", "_apply_external_force", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "xfrc", "=", "self", ".", "data", ".", "xfrc_applied", "\n", "force", "=", "(", "np", ".", "random", ".", "rand", "(", "6", ")", "*", "2", "-", "1", ")", "*", "self", ".", "_config", "[", "'apply_force'", "]", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "xfrc", ")", ")", "\n", "xfrc", "[", "idx", ",", ":", "]", "=", "force", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.collision_detection": [[122, 142], ["range", "g1.find", "g2.find", "g1.find", "g2.find", "g1.find", "g2.find"], "methods", ["None"], ["", "def", "collision_detection", "(", "self", ",", "ref_name", "=", "None", ",", "body_name", "=", "None", ")", ":", "\n", "        ", "assert", "ref_name", "is", "not", "None", "\n", "mjcontacts", "=", "self", ".", "data", ".", "contact", "\n", "ncon", "=", "self", ".", "data", ".", "ncon", "\n", "collision", "=", "False", "\n", "for", "i", "in", "range", "(", "ncon", ")", ":", "\n", "            ", "ct", "=", "mjcontacts", "[", "i", "]", "\n", "g1", ",", "g2", "=", "ct", ".", "geom1", ",", "ct", ".", "geom2", "\n", "g1", "=", "self", ".", "model", ".", "geom_names", "[", "g1", "]", "\n", "g2", "=", "self", ".", "model", ".", "geom_names", "[", "g2", "]", "\n", "if", "body_name", "is", "not", "None", ":", "\n", "                ", "if", "(", "g1", ".", "find", "(", "ref_name", ")", ">=", "0", "or", "g2", ".", "find", "(", "ref_name", ")", ">=", "0", ")", "and", "(", "g1", ".", "find", "(", "body_name", ")", ">=", "0", "or", "g2", ".", "find", "(", "body_name", ")", ">=", "0", ")", ":", "\n", "                    ", "collision", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "if", "(", "g1", ".", "find", "(", "ref_name", ")", ">=", "0", "or", "g2", ".", "find", "(", "ref_name", ")", ">=", "0", ")", ":", "\n", "                    ", "collision", "=", "True", "\n", "break", "\n", "", "", "", "return", "collision", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv.__init__": [[7, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "1", ")", ":", "\n", "# config", "\n", "        ", "self", ".", "_with_rot", "=", "with_rot", "\n", "self", ".", "_config", "=", "{", "\n", "\"random_steps\"", ":", "0", ",", "\n", "\"ctrl_reward\"", ":", "1e-4", ",", "\n", "\"init_random_rot\"", ":", "0", "\n", "}", "\n", "self", ".", "_fail", "=", "False", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "=", "[", "\"ctrl_reward\"", "]", "\n", "self", ".", "ob_shape", "=", "{", "\"joint\"", ":", "[", "31", "]", ",", "\"acc\"", ":", "[", "15", "]", ",", "\"hand\"", ":", "[", "3", "]", "}", "\n", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "            ", "self", ".", "ob_shape", "[", "\"joint\"", "]", "=", "[", "24", "]", "# 4 for orientation, 3 for velocity", "\n", "self", ".", "ob_shape", "[", "\"acc\"", "]", "=", "[", "12", "]", "# 4 for orientation, 3 for velocity", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._ctrl_reward": [[24, 29], ["numpy.square().sum", "numpy.abs().mean", "numpy.abs().mean", "numpy.square", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "", "def", "_ctrl_reward", "(", "self", ",", "a", ")", ":", "\n", "        ", "ctrl_reward", "=", "-", "self", ".", "_config", "[", "\"ctrl_reward\"", "]", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "ctrl_reward", "+=", "-", "self", ".", "_config", "[", "\"ctrl_reward\"", "]", "**", "2", "*", "np", ".", "abs", "(", "self", ".", "data", ".", "qvel", ")", ".", "mean", "(", ")", "\n", "ctrl_reward", "+=", "-", "self", ".", "_config", "[", "\"ctrl_reward\"", "]", "**", "2", "*", "np", ".", "abs", "(", "self", ".", "data", ".", "qacc", ")", ".", "mean", "(", ")", "\n", "return", "ctrl_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos": [[30, 32], ["jaco.JacoEnv._get_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos"], ["", "def", "_get_box_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_pos", "(", "'box'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_target_pos": [[33, 35], ["jaco.JacoEnv._get_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos"], ["", "def", "_get_target_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_pos", "(", "'target'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos": [[36, 41], ["numpy.mean", "jaco.JacoEnv._get_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos"], ["", "def", "_get_hand_pos", "(", "self", ")", ":", "\n", "        ", "hand_pos", "=", "np", ".", "mean", "(", "[", "self", ".", "_get_pos", "(", "name", ")", "for", "name", "in", "[", "\n", "'jaco_link_hand'", ",", "'jaco_link_finger_1'", ",", "\n", "'jaco_link_finger_2'", ",", "'jaco_link_finger_3'", "]", "]", ",", "0", ")", "\n", "return", "hand_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand": [[42, 46], ["jaco.JacoEnv._get_pos", "jaco.JacoEnv._get_hand_pos", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos"], ["", "def", "_get_distance_hand", "(", "self", ",", "name", ")", ":", "\n", "        ", "pos", "=", "self", ".", "_get_pos", "(", "name", ")", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "hand_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv.viewer_setup": [[47, 58], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "# self.viewer.cam.trackbodyid = 1", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "# self.viewer.cam.distance = self.model.stat.extent * 2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "2.1", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "200", "\n", "# self.viewer.cam.azimuth = 90", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "0", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "1", "]", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv.is_terminate": [[61, 63], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.__init__": [[13, 68], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_serve.JacoServeEnv._config.update", "numpy.array", "jaco_serve.JacoServeEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"sparse_reward\"", ":", "0", ",", "\n", "\"guide_reward\"", ":", "100", ",", "\n", "\"pick_reward\"", ":", "200", ",", "\n", "\"release_reward\"", ":", "50", ",", "\n", "\"up_reward\"", ":", "50", ",", "\n", "\"pos_stable_reward\"", ":", "2", ",", "\n", "\"success_toss_reward\"", ":", "100", ",", "\n", "\"x_vel_reward\"", ":", "1", ",", "\n", "\"hit_reward\"", ":", "100", ",", "\n", "\"target_reward\"", ":", "200", ",", "\n", "\"return_reward\"", ":", "500", ",", "\n", "\"success_reward\"", ":", "1000", ",", "\n", "\"release_height\"", ":", "0.7", ",", "\n", "\"max_height\"", ":", "2.0", ",", "\n", "\"hit_height\"", ":", "1.0", ",", "\n", "\"return_height\"", ":", "0.8", ",", "\n", "\"target_height\"", ":", "1.2", ",", "\n", "\"hit_threshold\"", ":", "0.1", ",", "\n", "\"target_threshold\"", ":", "0.2", ",", "\n", "\"return_threshold\"", ":", "0.1", ",", "\n", "\"random_box\"", ":", "0.04", ",", "\n", "\"init_randomness\"", ":", "0.005", ",", "\n", "\"box_size\"", ":", "0.04", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_boxtop", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "_dist_boxtop", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_released", "=", "False", "\n", "self", ".", "_above", "=", "False", "\n", "self", ".", "_falling", "=", "False", "\n", "self", ".", "_success_toss", "=", "False", "\n", "self", ".", "_max_height", "=", "0", "\n", "self", ".", "_hit_box", "=", "False", "\n", "self", ".", "_hit_target", "=", "False", "\n", "self", ".", "_min_dist_target", "=", "10", "\n", "self", ".", "_target_pos", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "_return_box_pos", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.3", ",", "self", ".", "_config", "[", "\"return_height\"", "]", "]", ")", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"guide_reward\"", ",", "\"pick_reward\"", ",", "\"release_reward\"", ",", "\n", "\"up_reward\"", ",", "\"pos_stable_reward\"", ",", "\n", "\"hit_reward\"", ",", "\"x_vel_reward\"", ",", "\"return_reward\"", ",", "\"target_reward\"", ",", "\n", "\"success_reward\"", ",", "\"success\"", ",", "\"success_toss_reward\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_serve.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.step": [[69, 219], ["jaco_serve.JacoServeEnv.do_simulation", "jaco_serve.JacoServeEnv._get_box_pos", "jaco_serve.JacoServeEnv._get_obs", "jaco_serve.JacoServeEnv._ctrl_reward", "jaco_serve.JacoServeEnv._get_hand_pos", "jaco_serve.JacoServeEnv._get_distance_hand", "numpy.linalg.norm", "jaco_serve.JacoServeEnv._get_box_pos", "jaco_serve.JacoServeEnv._get_distance", "min", "numpy.linalg.norm", "min", "min", "abs", "print", "print", "abs", "print", "print", "min", "abs", "abs", "abs", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_distance", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "_get_box_pos", "(", ")", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "box_pos", "=", "self", ".", "_get_box_pos", "(", ")", "\n", "x_after", "=", "box_pos", "[", "0", "]", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "\n", "guide_reward", "=", "0", "\n", "pick_reward", "=", "0", "\n", "pos_stable_reward", "=", "0", "\n", "release_reward", "=", "0", "\n", "up_reward", "=", "0", "\n", "success_toss_reward", "=", "0", "\n", "hit_reward", "=", "0", "\n", "x_vel_reward", "=", "0", "\n", "target_reward", "=", "0", "\n", "return_reward", "=", "0", "\n", "success_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "dist_hand", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "dist_boxtop", "=", "np", ".", "linalg", ".", "norm", "(", "hand_pos", "-", "self", ".", "_boxtop", ")", "\n", "in_air", "=", "box_z", ">", "self", ".", "_config", "[", "\"box_size\"", "]", "+", "0.03", "\n", "in_hand", "=", "dist_hand", "<", "0.10", "\n", "on_ground", "=", "box_z", "<", "self", ".", "_config", "[", "\"box_size\"", "]", "+", "0.03", "\n", "hit", "=", "dist_hand", "<", "0.12", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "\n", "# guide hand to top of box", "\n", "if", "not", "self", ".", "_picked", "and", "not", "(", "in_hand", "and", "in_air", ")", ":", "\n", "            ", "guide_reward", "=", "self", ".", "_config", "[", "\"guide_reward\"", "]", "*", "(", "self", ".", "_dist_boxtop", "-", "dist_boxtop", ")", "\n", "self", ".", "_dist_boxtop", "=", "dist_boxtop", "\n", "\n", "# pick", "\n", "", "if", "in_hand", "and", "not", "self", ".", "_released", "and", "self", ".", "_pick_height", "<", "min", "(", "box_z", ",", "self", ".", "_config", "[", "\"release_height\"", "]", ")", ":", "\n", "            ", "pick_reward", "=", "self", ".", "_config", "[", "\"pick_reward\"", "]", "*", "(", "min", "(", "box_z", ",", "self", ".", "_config", "[", "\"release_height\"", "]", ")", "-", "self", ".", "_pick_height", ")", "\n", "self", ".", "_picked", "=", "True", "\n", "self", ".", "_pick_height", "=", "box_z", "\n", "\n", "# fail", "\n", "", "if", "self", ".", "_picked", "and", "not", "in_hand", "and", "not", "in_air", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# release", "\n", "", "if", "not", "self", ".", "_released", "and", "box_z", ">", "self", ".", "_config", "[", "\"release_height\"", "]", ":", "\n", "            ", "if", "in_hand", ":", "\n", "                ", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "release_reward", "=", "self", ".", "_config", "[", "\"release_reward\"", "]", "\n", "self", ".", "_released", "=", "True", "\n", "\n", "# pos stable during toss", "\n", "", "", "if", "self", ".", "_picked", "and", "not", "self", ".", "_hit_box", ":", "\n", "            ", "pos_diff", "=", "abs", "(", "box_pos", "[", "0", "]", "-", "0.4", ")", "+", "abs", "(", "box_pos", "[", "1", "]", "-", "0.3", ")", "-", "0.5", "\n", "pos_stable_reward", "=", "-", "self", ".", "_config", "[", "\"pos_stable_reward\"", "]", "*", "pos_diff", "\n", "\n", "# falling", "\n", "", "if", "self", ".", "_released", "and", "not", "self", ".", "_falling", ":", "\n", "            ", "if", "self", ".", "_max_height", "<", "box_z", ":", "\n", "                ", "self", ".", "_max_height", "=", "box_z", "\n", "", "else", ":", "\n", "                ", "up_reward", "=", "self", ".", "_config", "[", "\"up_reward\"", "]", "*", "(", "1", "-", "abs", "(", "self", ".", "_config", "[", "\"max_height\"", "]", "-", "box_z", ")", "/", "self", ".", "_config", "[", "\"max_height\"", "]", ")", "\n", "if", "abs", "(", "box_z", "-", "self", ".", "_config", "[", "\"max_height\"", "]", ")", "<", "0.1", ":", "\n", "                    ", "up_reward", "+=", "self", ".", "_config", "[", "\"up_reward\"", "]", "\n", "self", ".", "_falling", "=", "True", "\n", "", "else", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "", "", "", "if", "self", ".", "_falling", "and", "not", "self", ".", "_hit_box", "and", "not", "self", ".", "_success_toss", "and", "(", "box_z", "<", "self", ".", "_config", "[", "\"hit_height\"", "]", "-", "self", ".", "_config", "[", "\"hit_threshold\"", "]", "or", "hit", ")", ":", "\n", "            ", "self", ".", "_success_toss", "=", "abs", "(", "box_pos", "[", "0", "]", "-", "0.4", ")", "<", "0.1", "and", "abs", "(", "box_pos", "[", "1", "]", "-", "0.3", ")", "<", "0.1", "\n", "if", "self", ".", "_success_toss", ":", "\n", "                ", "success_toss_reward", "=", "self", ".", "_config", "[", "\"success_toss_reward\"", "]", "\n", "\n", "", "", "if", "self", ".", "_falling", "and", "hit", "and", "not", "self", ".", "_hit_box", ":", "\n", "            ", "hit_reward", "=", "self", ".", "_config", "[", "\"hit_reward\"", "]", "*", "(", "1", "-", "abs", "(", "box_z", "-", "self", ".", "_config", "[", "\"hit_height\"", "]", ")", ")", "\n", "if", "abs", "(", "box_z", "-", "self", ".", "_config", "[", "\"hit_height\"", "]", ")", "<", "self", ".", "_config", "[", "\"hit_threshold\"", "]", ":", "\n", "                ", "self", ".", "_hit_box", "=", "True", "\n", "hit_reward", "+=", "self", ".", "_config", "[", "\"hit_reward\"", "]", "\n", "print", "(", "'hit'", ")", "\n", "", "else", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "'hit, but fail'", ")", "\n", "\n", "", "", "if", "self", ".", "_hit_box", "and", "not", "self", ".", "_hit_target", ":", "\n", "            ", "x_vel_reward", "=", "-", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "abs", "(", "x_vel", ")", "\n", "dist_target", "=", "self", ".", "_get_distance", "(", "'target'", ",", "'box'", ")", "\n", "self", ".", "_min_dist_target", "=", "min", "(", "self", ".", "_min_dist_target", ",", "dist_target", ")", "\n", "\n", "if", "dist_target", "<", "self", ".", "_config", "[", "\"target_threshold\"", "]", ":", "\n", "                ", "print", "(", "'hit target'", ")", "\n", "self", ".", "_hit_target", "=", "True", "\n", "target_reward", "=", "self", ".", "_config", "[", "\"target_reward\"", "]", "\n", "\n", "# For now, only care toss-serve", "\n", "success", "=", "True", "\n", "done", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "\n", "", "", "if", "self", ".", "_hit_target", ":", "\n", "            ", "dist_hit_pos", "=", "np", ".", "linalg", ".", "norm", "(", "box_pos", "-", "self", ".", "_return_box_pos", ")", "\n", "self", ".", "_min_dist_hit_pos", "=", "min", "(", "self", ".", "_min_dist_hit_pos", ",", "dist_hit_pos", ")", "\n", "\n", "if", "dist_hit_pos", "<", "self", ".", "_config", "[", "\"return_threshold\"", "]", ":", "\n", "                ", "print", "(", "'return correctly'", ")", "\n", "success", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "done", "=", "True", "\n", "return_reward", "=", "self", ".", "_config", "[", "\"return_reward\"", "]", "\n", "\n", "# fail", "\n", "", "", "if", "self", ".", "_hit_box", "and", "on_ground", ":", "\n", "            ", "done", "=", "True", "\n", "if", "self", ".", "_hit_box", "and", "not", "self", ".", "_hit_target", ":", "\n", "                ", "target_reward", "=", "self", ".", "_config", "[", "\"target_reward\"", "]", "*", "(", "2", "-", "self", ".", "_min_dist_target", ")", "/", "2", "\n", "", "if", "self", ".", "_hit_target", ":", "\n", "                ", "return_reward", "=", "self", ".", "_config", "[", "\"return_reward\"", "]", "*", "(", "2", "-", "self", ".", "_min_dist_hit_pos", ")", "/", "2", "\n", "\n", "", "", "if", "self", ".", "_config", "[", "\"sparse_reward\"", "]", "==", "0", ":", "\n", "            ", "reward", "=", "ctrl_reward", "+", "guide_reward", "+", "pick_reward", "+", "release_reward", "+", "up_reward", "+", "pos_stable_reward", "+", "hit_reward", "+", "x_vel_reward", "+", "target_reward", "+", "return_reward", "+", "success_reward", "+", "success_toss_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "1", "if", "self", ".", "_success_toss", "or", "success", "else", "0", "\n", "\n", "", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"pick_reward\"", ":", "pick_reward", ",", "\n", "\"guide_reward\"", ":", "guide_reward", ",", "\n", "\"release_reward\"", ":", "release_reward", ",", "\n", "\"up_reward\"", ":", "up_reward", ",", "\n", "\"success_toss_reward\"", ":", "success_toss_reward", ",", "\n", "\"pos_stable_reward\"", ":", "pos_stable_reward", ",", "\n", "\"hit_reward\"", ":", "hit_reward", ",", "\n", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"target_reward\"", ":", "target_reward", ",", "\n", "\"return_reward\"", ":", "return_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"success_count\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv._get_obs": [[220, 230], ["jaco_serve.JacoServeEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "            ", "qpos", "=", "qpos", "[", ":", "12", "]", "\n", "qvel", "=", "qvel", "[", ":", "12", "]", "\n", "qacc", "=", "qacc", "[", ":", "12", "]", "\n", "", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.get_ob_dict": [[231, 255], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "                ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "24", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "24", ":", "36", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "36", ":", "39", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "                ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "24", "]", ",", "\n", "'acc'", ":", "ob", "[", "24", ":", "36", "]", ",", "\n", "'hand'", ":", "ob", "[", "36", ":", "39", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.get_hit_box": [[257, 259], ["None"], "methods", ["None"], ["", "", "def", "get_hit_box", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hit_box", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.reset_box": [[261, 272], ["jaco_serve.JacoServeEnv.data.qpos.ravel().copy", "jaco_serve.JacoServeEnv.data.qvel.ravel().copy", "numpy.asarray", "jaco_serve.JacoServeEnv.set_state", "jaco_serve.JacoServeEnv.data.qpos.ravel", "jaco_serve.JacoServeEnv.data.qvel.ravel", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state"], ["", "def", "reset_box", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# set box's initial position", "\n", "r", "=", "self", ".", "_config", "[", "\"random_box\"", "]", "\n", "self", ".", "_init_box_pos", "=", "np", ".", "asarray", "(", "[", "0.4", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ")", ",", "\n", "0.3", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ")", ",", "\n", "self", ".", "_config", "[", "\"box_size\"", "]", "]", ")", "\n", "qpos", "[", "9", ":", "12", "]", "=", "self", ".", "_init_box_pos", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.reset_model": [[273, 311], ["jaco_serve.JacoServeEnv.set_state", "jaco_serve.JacoServeEnv.reset_box", "jaco_serve.JacoServeEnv.model.body_name2id", "jaco_serve.JacoServeEnv.model.body_name2id", "jaco_serve.JacoServeEnv.model.body_name2id", "numpy.linalg.norm", "jaco_serve.JacoServeEnv._get_pos", "jaco_serve.JacoServeEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "jaco_serve.JacoServeEnv._get_hand_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "# reset jaco", "\n", "        ", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "# reset box", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "# set thresholds", "\n", "idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'release_point'", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"release_height\"", "]", "\n", "idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'max_point'", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"max_height\"", "]", "\n", "\n", "# set target", "\n", "idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'target'", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"target_height\"", "]", "\n", "\n", "# init state", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_released", "=", "False", "\n", "self", ".", "_above", "=", "False", "\n", "self", ".", "_falling", "=", "False", "\n", "self", ".", "_success_toss", "=", "False", "\n", "self", ".", "_hit_box", "=", "False", "\n", "self", ".", "_hit_target", "=", "False", "\n", "\n", "self", ".", "_dist_boxtop", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_get_hand_pos", "(", ")", "-", "self", ".", "_boxtop", ")", "\n", "self", ".", "_boxtop", "=", "self", ".", "_init_box_pos", "+", "[", "0", ",", "0", ",", "self", ".", "_config", "[", "\"box_size\"", "]", "]", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_max_height", "=", "0", "\n", "self", ".", "_min_dist_target", "=", "5", "\n", "self", ".", "_target_pos", "=", "self", ".", "_get_pos", "(", "'target'", ")", "\n", "self", ".", "_min_dist_hit_pos", "=", "5", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.viewer_setup": [[312, 323], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "# self.viewer.cam.trackbodyid = 1", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "# self.viewer.cam.distance = self.model.stat.extent * 2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "4", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "100", "\n", "# self.viewer.cam.azimuth = 90", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "0", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "1", "]", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.get_next_primitive": [[324, 329], ["None"], "methods", ["None"], ["", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "if", "self", ".", "_released", ":", "\n", "            ", "return", "'hit'", "\n", "", "else", ":", "\n", "            ", "return", "'toss'", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.get_sim_state": [[330, 335], ["jaco_serve.JacoServeEnv.data.qpos.ravel().copy", "jaco_serve.JacoServeEnv.data.qvel.ravel().copy", "jaco_serve.JacoServeEnv.sim.get_state", "jaco_serve.JacoServeEnv.data.qpos.ravel", "jaco_serve.JacoServeEnv.data.qvel.ravel"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "return", "{", "'state'", ":", "state", ",", "'box_pos'", ":", "qpos", "[", "9", ":", "12", "]", ",", "'box_vel'", ":", "qvel", "[", "9", ":", "12", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.rollback": [[336, 347], ["jaco_serve.JacoServeEnv.sim.get_state", "mujoco_py.MjSimState", "jaco_serve.JacoServeEnv.sim.set_state", "jaco_serve.JacoServeEnv.do_simulation", "jaco_serve.JacoServeEnv.sim.forward", "jaco_serve.JacoServeEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_boundary_toss_front": [[348, 351], ["jaco_serve.JacoServeEnv._get_box_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "def", "is_boundary_toss_front", "(", "self", ")", ":", "\n", "        ", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "return", "1", "if", "box_z", ">", "0.7", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_transition_boundary_for_serve": [[352, 360], ["jaco_serve.JacoServeEnv._get_box_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "def", "is_transition_boundary_for_serve", "(", "self", ")", ":", "\n", "        ", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "# return 1 if box_z > 0.7 else -1", "\n", "# return 1 if box_z >= 0.9 and not self._hit_box else -1", "\n", "if", "not", "self", ".", "_falling", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "1", "if", "box_z", ">=", "0.9", "and", "not", "self", ".", "_hit_box", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_serve.JacoServeEnv.is_terminate": [[362, 367], ["jaco_serve.JacoServeEnv._get_box_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "", "def", "is_terminate", "(", "self", ")", ":", "\n", "        ", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "if", "box_z", ">", "0.7", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv.__init__": [[9, 37], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_pick_6.JacoPickEnv._config.update", "jaco_pick_6.JacoPickEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"pick_reward\"", ":", "100", ",", "\n", "\"hold_reward\"", ":", "2", ",", "\n", "\"guide_reward\"", ":", "2", ",", "\n", "\"success_reward\"", ":", "10", ",", "\n", "\"hold_reward_duration\"", ":", "50", ",", "\n", "\"random_box\"", ":", "1", ",", "\n", "\"init_randomness\"", ":", "0.05", ",", "\n", "\"random_steps\"", ":", "10", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_dist_boxtop", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"guide_reward\"", ",", "\"pick_reward\"", ",", "\"hold_reward\"", ",", "\"success_reward\"", ",", "\"success\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_pick.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv.step": [[38, 101], ["jaco_pick_6.JacoPickEnv.do_simulation", "jaco_pick_6.JacoPickEnv._get_obs", "jaco_pick_6.JacoPickEnv._ctrl_reward", "jaco_pick_6.JacoPickEnv._get_hand_pos", "jaco_pick_6.JacoPickEnv._get_distance_hand", "jaco_pick_6.JacoPickEnv._get_box_pos", "numpy.linalg.norm", "jaco_pick_6.JacoPickEnv._get_box_pos", "numpy.linalg.norm", "min", "print", "min", "jaco_pick_6.JacoPickEnv._get_box_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "_t", "+=", "1", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "guide_reward", "=", "0", "\n", "pick_reward", "=", "0", "\n", "hold_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "success_reward", "=", "0", "\n", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "dist_hand", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "boxtop", "=", "self", ".", "_get_box_pos", "(", ")", "\n", "#boxtop = self._get_box_pos() + [0, 0, 0.05]", "\n", "dist_boxtop", "=", "np", ".", "linalg", ".", "norm", "(", "hand_pos", "-", "boxtop", ")", "\n", "#in_air = box_z > 0.06", "\n", "#in_hand = dist_hand < 0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "in_hand", "=", "dist_hand", "<", "0.06", "\n", "\n", "# guide hand to top of box", "\n", "#if not self._picked and not (in_hand and in_air):", "\n", "if", "not", "self", ".", "_picked", "and", "not", "in_hand", ":", "\n", "            ", "guide_reward", "=", "self", ".", "_config", "[", "\"guide_reward\"", "]", "*", "(", "self", ".", "_dist_boxtop", "-", "dist_boxtop", ")", "\n", "self", ".", "_dist_boxtop", "=", "dist_boxtop", "\n", "\n", "# pick", "\n", "", "if", "in_hand", "and", "in_air", "and", "self", ".", "_pick_height", "<", "min", "(", "self", ".", "_init_box_pos_above", "[", "2", "]", ",", "box_z", ")", ":", "\n", "            ", "pick_reward", "=", "self", ".", "_config", "[", "\"pick_reward\"", "]", "*", "(", "min", "(", "self", ".", "_init_box_pos_above", "[", "2", "]", ",", "box_z", ")", "-", "self", ".", "_pick_height", ")", "\n", "self", ".", "_pick_height", "=", "box_z", "\n", "\n", "", "if", "not", "self", ".", "_picked", "and", "in_hand", "and", "in_air", ":", "\n", "            ", "self", ".", "_picked", "=", "True", "\n", "pick_reward", "+=", "1", "\n", "\n", "#if self._picked and not (in_hand and in_air):", "\n", "", "if", "self", ".", "_picked", "and", "not", "in_hand", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# hold", "\n", "", "if", "in_hand", "and", "in_air", ":", "\n", "            ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_init_box_pos_above", "-", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "hold_reward", "=", "self", ".", "_config", "[", "\"hold_reward\"", "]", "*", "(", "1", "-", "dist", ")", "\n", "if", "dist", "<", "0.1", ":", "\n", "                ", "self", ".", "_hold_duration", "+=", "1", "\n", "", "if", "self", ".", "_config", "[", "'hold_reward_duration'", "]", "==", "self", ".", "_hold_duration", ":", "\n", "                ", "print", "(", "'success pick!'", ")", "\n", "done", "=", "success", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "*", "(", "200", "-", "self", ".", "_t", ")", "\n", "\n", "", "", "reward", "=", "ctrl_reward", "+", "pick_reward", "+", "hold_reward", "+", "guide_reward", "+", "success_reward", "\n", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"pick_reward\"", ":", "pick_reward", ",", "\n", "\"hold_reward\"", ":", "hold_reward", ",", "\n", "\"guide_reward\"", ":", "guide_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv._get_obs": [[102, 108], ["jaco_pick_6.JacoPickEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv.get_ob_dict": [[109, 121], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv.reset_box": [[123, 145], ["jaco_pick_6.JacoPickEnv.data.qpos.ravel().copy", "jaco_pick_6.JacoPickEnv.data.qvel.ravel().copy", "numpy.asarray", "jaco_pick_6.JacoPickEnv.set_state", "jaco_pick_6.JacoPickEnv.np_random.uniform", "jaco_pick_6.JacoPickEnv.np_random.randint", "jaco_pick_6.JacoPickEnv.np_random.randint", "numpy.all", "jaco_pick_6.JacoPickEnv.np_random.uniform", "jaco_pick_6.JacoPickEnv.np_random.uniform", "jaco_pick_6.JacoPickEnv.data.qpos.ravel", "jaco_pick_6.JacoPickEnv.data.qvel.ravel", "numpy.random.uniform", "numpy.random.uniform", "jaco_pick_6.JacoPickEnv.np_random.randint"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["", "", "def", "reset_box", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# set box's initial position", "\n", "self", ".", "_init_box_pos", "=", "np", ".", "asarray", "(", "\n", "[", "0.5", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_box\"", "]", ",", "\n", "0.2", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_box\"", "]", ",", "\n", "0.03", "]", ")", "\n", "qpos", "[", "9", ":", "12", "]", "=", "self", ".", "_init_box_pos", "\n", "\n", "# set box's initial rotation", "\n", "qpos", "[", "12", ":", "16", "]", "=", "self", ".", "init_qpos", "[", "12", ":", "16", "]", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "4", ")", "\n", "if", "self", ".", "_config", "[", "'init_random_rot'", "]", ":", "\n", "            ", "qpos", "[", "12", ":", "16", "]", "=", "0", "\n", "qpos", "[", "12", "]", "=", "self", ".", "np_random", ".", "randint", "(", "-", "1", ",", "2", ")", "\n", "qpos", "[", "13", "+", "self", ".", "np_random", ".", "randint", "(", "3", ")", "]", "=", "self", ".", "np_random", ".", "randint", "(", "-", "1", ",", "2", ")", "\n", "if", "np", ".", "all", "(", "qpos", "[", "12", ":", "16", "]", "==", "0", ")", ":", "\n", "                ", "qpos", "[", "12", "]", "=", "1", "\n", "", "qpos", "[", "12", ":", "16", "]", "+=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "4", ")", "\n", "", "qvel", "[", "9", ":", "15", "]", "=", "self", ".", "init_qvel", "[", "9", ":", "15", "]", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".005", ",", "high", "=", ".005", ",", "size", "=", "6", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv.reset_model": [[147, 174], ["jaco_pick_6.JacoPickEnv.set_state", "jaco_pick_6.JacoPickEnv.reset_box", "range", "numpy.linalg.norm", "jaco_pick_6.JacoPickEnv._init_box_pos.copy", "jaco_pick_6.JacoPickEnv._get_obs", "jaco_pick_6.JacoPickEnv.np_random.uniform", "jaco_pick_6.JacoPickEnv.np_random.uniform", "int", "jaco_pick_6.JacoPickEnv.do_simulation", "jaco_pick_6.JacoPickEnv.unwrapped.action_space.sample", "jaco_pick_6.JacoPickEnv._get_hand_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "#boxtop = self._init_box_pos + [0, 0, 0.05]", "\n", "boxtop", "=", "self", ".", "_init_box_pos", "\n", "self", ".", "_dist_boxtop", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_get_hand_pos", "(", ")", "-", "boxtop", ")", "\n", "self", ".", "_init_box_pos_above", "=", "self", ".", "_init_box_pos", ".", "copy", "(", ")", "\n", "self", ".", "_init_box_pos_above", "[", "2", "]", "=", "0.4", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_pick_6.JacoPickEnv.is_terminate": [[175, 195], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "success_length", "=", "50", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "self", ".", "count_evaluate", "=", "0", "\n", "self", ".", "success", "=", "True", "\n", "\n", "", "box_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "hand_pos", "=", "ob", "[", "46", ":", "49", "]", "\n", "dist_hand", "=", "np", ".", "linalg", ".", "norm", "(", "box_pos", "-", "hand_pos", ")", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "in_air", "=", "box_z", ">", "0.06", "\n", "on_ground", "=", "box_z", "<", "0.06", "\n", "in_hand", "=", "dist_hand", "<", "0.06", "\n", "\n", "if", "on_ground", "and", "self", ".", "count_evaluate", ">", "0", ":", "\n", "            ", "self", ".", "success", "=", "False", "\n", "\n", "", "if", "in_air", "and", "in_hand", ":", "\n", "            ", "self", ".", "count_evaluate", "+=", "1", "\n", "\n", "", "return", "self", ".", "success", "and", "self", ".", "count_evaluate", ">=", "success_length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.__init__": [[13, 45], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_keep_pick.JacoKeepPickEnv._config.update", "jaco_keep_pick.JacoKeepPickEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"sparse_reward\"", ":", "0", ",", "\n", "\"pick_reward\"", ":", "100", ",", "\n", "\"hold_reward\"", ":", "2", ",", "\n", "\"guide_reward\"", ":", "2", ",", "\n", "\"success_reward\"", ":", "1", ",", "\n", "\"random_box\"", ":", "1", ",", "\n", "\"init_randomness\"", ":", "0.005", ",", "\n", "\"max_success\"", ":", "5", ",", "\n", "\"sub_use_term_len\"", ":", "50", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_dist_box", "=", "0", "\n", "self", ".", "_success_count", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"guide_reward\"", ",", "\"pick_reward\"", ",", "\"hold_reward\"", ",", "\n", "\"success_reward\"", ",", "\"success\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "self", ".", "isReset", "=", "False", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_pick.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.step": [[46, 127], ["jaco_keep_pick.JacoKeepPickEnv.do_simulation", "jaco_keep_pick.JacoKeepPickEnv._get_obs", "jaco_keep_pick.JacoKeepPickEnv._ctrl_reward", "jaco_keep_pick.JacoKeepPickEnv._get_hand_pos", "jaco_keep_pick.JacoKeepPickEnv._get_distance_hand", "jaco_keep_pick.JacoKeepPickEnv._get_box_pos", "numpy.linalg.norm", "print", "jaco_keep_pick.JacoKeepPickEnv.reset_box", "float", "min", "jaco_keep_pick.JacoKeepPickEnv._get_box_pos", "int", "min"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "_t", "+=", "1", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "reset", "=", "False", "\n", "self", ".", "isReset", "=", "False", "\n", "guide_reward", "=", "0", "\n", "pick_reward", "=", "0", "\n", "hold_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "success_reward", "=", "0", "\n", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "dist_box", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "in_hand", "=", "dist_box", "<", "0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "\n", "if", "in_hand", "and", "in_air", ":", "\n", "            ", "self", ".", "_picked", "=", "True", "\n", "\n", "# pick up", "\n", "if", "self", ".", "_pick_height", "<", "min", "(", "self", ".", "_target_pos", "[", "2", "]", ",", "box_z", ")", ":", "\n", "                ", "pick_reward", "=", "self", ".", "_config", "[", "\"pick_reward\"", "]", "*", "(", "min", "(", "self", ".", "_target_pos", "[", "2", "]", ",", "box_z", ")", "-", "self", ".", "_pick_height", ")", "\n", "self", ".", "_pick_height", "=", "box_z", "\n", "\n", "# hold", "\n", "", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_target_pos", "-", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "hold_reward", "=", "self", ".", "_config", "[", "\"hold_reward\"", "]", "*", "(", "1", "-", "dist", ")", "\n", "self", ".", "_hold_duration", "+=", "1", "\n", "\n", "# success", "\n", "if", "self", ".", "_hold_duration", ">=", "self", ".", "_config", "[", "\"sub_use_term_len\"", "]", ":", "\n", "                ", "reset", "=", "True", "\n", "success", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "*", "(", "200", "-", "self", ".", "_t", ")", "\n", "self", ".", "_success_count", "+=", "1", "\n", "if", "self", ".", "_success_count", "==", "int", "(", "self", ".", "_config", "[", "\"max_success\"", "]", ")", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "# guide hand to the box", "\n", "", "", "", "if", "not", "self", ".", "_picked", ":", "\n", "            ", "guide_reward", "=", "self", ".", "_config", "[", "\"guide_reward\"", "]", "*", "(", "self", ".", "_dist_box", "-", "dist_box", ")", "\n", "self", ".", "_dist_box", "=", "dist_box", "\n", "\n", "", "if", "self", ".", "_picked", "and", "not", "in_hand", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "if", "self", ".", "_t", "==", "200", ":", "\n", "            ", "done", "=", "True", "\n", "# print(self._t, self._success_count)", "\n", "\n", "# unstable simulation", "\n", "", "if", "self", ".", "_fail", ":", "\n", "            ", "done", "=", "True", "\n", "self", ".", "_fail", "=", "False", "\n", "\n", "", "if", "done", ":", "\n", "            ", "print", "(", "'success {} times'", ".", "format", "(", "self", ".", "_success_count", ")", ")", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset_box", "(", ")", "\n", "self", ".", "isReset", "=", "True", "\n", "\n", "", "if", "self", ".", "_config", "[", "\"sparse_reward\"", "]", "==", "0", ":", "\n", "            ", "reward", "=", "ctrl_reward", "+", "pick_reward", "+", "hold_reward", "+", "guide_reward", "+", "success_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "float", "(", "success", ")", "\n", "\n", "", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"pick_reward\"", ":", "pick_reward", ",", "\n", "\"hold_reward\"", ":", "hold_reward", ",", "\n", "\"guide_reward\"", ":", "guide_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"success_count\"", ":", "self", ".", "_success_count", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv._get_obs": [[128, 134], ["jaco_keep_pick.JacoKeepPickEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.get_ob_dict": [[135, 147], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.get_sim_state": [[149, 153], ["jaco_keep_pick.JacoKeepPickEnv.data.qpos.ravel().copy", "jaco_keep_pick.JacoKeepPickEnv.sim.get_state", "jaco_keep_pick.JacoKeepPickEnv.data.qpos.ravel"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "return", "{", "'state'", ":", "state", ",", "'box_pos'", ":", "qpos", "[", "9", ":", "12", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.reset_box": [[154, 180], ["jaco_keep_pick.JacoKeepPickEnv.data.qpos.ravel().copy", "jaco_keep_pick.JacoKeepPickEnv.data.qvel.ravel().copy", "numpy.asarray", "jaco_keep_pick.JacoKeepPickEnv.set_state", "numpy.linalg.norm", "jaco_keep_pick.JacoKeepPickEnv._init_box_pos.copy", "numpy.random.uniform", "numpy.random.uniform", "jaco_keep_pick.JacoKeepPickEnv.data.qpos.ravel", "jaco_keep_pick.JacoKeepPickEnv.data.qvel.ravel", "jaco_keep_pick.JacoKeepPickEnv._get_hand_pos", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos"], ["", "def", "reset_box", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# set box's initial pose", "\n", "self", ".", "_init_box_pos", "=", "np", ".", "asarray", "(", "\n", "[", "0.5", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_box\"", "]", ",", "\n", "0.2", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_box\"", "]", ",", "\n", "0.03", "]", ")", "\n", "qpos", "[", "9", ":", "12", "]", "=", "self", ".", "_init_box_pos", "\n", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "[", "12", ":", "16", "]", "=", "self", ".", "init_qpos", "[", "12", ":", "16", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "4", ")", "\n", "qvel", "[", "9", ":", "15", "]", "=", "self", ".", "init_qvel", "[", "9", ":", "15", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "6", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_pick_height", "=", "0", "\n", "self", ".", "_picked", "=", "False", "\n", "self", ".", "_dist_box", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_get_hand_pos", "(", ")", "-", "self", ".", "_init_box_pos", ")", "\n", "self", ".", "_target_pos", "=", "self", ".", "_init_box_pos", ".", "copy", "(", ")", "\n", "self", ".", "_target_pos", "[", "2", "]", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.reset_model": [[183, 199], ["jaco_keep_pick.JacoKeepPickEnv.set_state", "jaco_keep_pick.JacoKeepPickEnv.reset_box", "jaco_keep_pick.JacoKeepPickEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "self", ".", "isReset", "=", "False", "\n", "\n", "self", ".", "_success_count", "=", "0", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.rollback": [[200, 212], ["jaco_keep_pick.JacoKeepPickEnv.sim.get_state", "mujoco_py.MjSimState", "jaco_keep_pick.JacoKeepPickEnv.sim.set_state", "jaco_keep_pick.JacoKeepPickEnv.do_simulation", "jaco_keep_pick.JacoKeepPickEnv.reset_box", "jaco_keep_pick.JacoKeepPickEnv.sim.forward", "jaco_keep_pick.JacoKeepPickEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.is_boundary_pick_front": [[213, 215], ["None"], "methods", ["None"], ["", "def", "is_boundary_pick_front", "(", "self", ")", ":", "\n", "        ", "return", "1", "if", "self", ".", "isReset", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.is_terminate": [[216, 220], ["print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "is_terminate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "isReset", ":", "\n", "            ", "print", "(", "\"Terminate\"", ")", "\n", "", "return", "self", ".", "isReset", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_pick.JacoKeepPickEnv.get_next_primitive": [[221, 223], ["None"], "methods", ["None"], ["", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "return", "'pick'", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.__init__": [[11, 63], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._config.update", "numpy.array", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.ob_shape.update", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.ob_shape.keys", "numpy.random.seed", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "2", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "2", ",", "\n", "\"jump_reward\"", ":", "100", ",", "\n", "\"pass_reward\"", ":", "200", ",", "\n", "\"collision_penalty\"", ":", "10", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"y_vel_limit\"", ":", "2", ",", "\n", "\"curb_height\"", ":", "0.2", ",", "# DO NOT CHANGE!", "\n", "\"ceil_height\"", ":", "1.0", ",", "\n", "\"ceil_size\"", ":", "1.5", ",", "# DO NOT CHANGE!", "\n", "\"obs_randomness\"", ":", "0.5", ",", "\n", "\"done_when_collide\"", ":", "1", ",", "\n", "\"sparse_reward\"", ":", "0", ",", "\n", "\"ob_detect_dist\"", ":", "3.0", ",", "\n", "\"success_dist_after_curb\"", ":", "1.5", ",", "\n", "\"prob_apply_force\"", ":", "0", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_obstacle_type", "=", "None", "\n", "self", ".", "_obstacle_pos", "=", "None", "\n", "self", ".", "_obstacle_size", "=", "None", "\n", "self", ".", "_stage", "=", "0", "\n", "self", ".", "_curb_stage", "=", "0", "\n", "self", ".", "_num_curbs", "=", "3", "\n", "self", ".", "_ceil_stage", "=", "0", "\n", "self", ".", "_num_ceils", "=", "2", "\n", "self", ".", "_pass_state", "=", "[", "False", "]", "*", "(", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", ")", "\n", "self", ".", "_possible_x", "=", "np", ".", "array", "(", "[", "8", ",", "19", ",", "30", ",", "41", ",", "52", "]", ")", "\n", "self", ".", "_success_count", "=", "0", "\n", "self", ".", "_meta_policy_stage", "=", "-", "1", "\n", "self", ".", "_interval_time", "=", "0", "\n", "self", ".", "_interval_start_pos", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\"collision_penalty\"", ",", "\n", "\"jump_reward\"", ",", "\"pass_reward\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", "]", "\n", "self", ".", "ob_shape", ".", "update", "(", "{", "\"curb\"", ":", "[", "2", "]", "}", ")", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'walker_v2.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_x_pos": [[64, 66], ["walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation": [[67, 93], ["walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_walker2d_pos", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._put_obstacles"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._put_obstacles"], ["", "def", "_get_obstacles_observation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_obstacle_type", "is", "None", ":", "\n", "            ", "self", ".", "_put_obstacles", "(", ")", "\n", "", "x_agent", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "pos", "=", "self", ".", "_obstacle_pos", "[", "self", ".", "_stage", "]", "\n", "size", "=", "self", ".", "_obstacle_size", "[", "self", ".", "_stage", "]", "\n", "if", "self", ".", "_obstacle_type", "[", "self", ".", "_stage", "]", ":", "\n", "            ", "if", "x_agent", ">", "pos", "+", "size", "+", "self", ".", "_config", "[", "\"success_dist_after_curb\"", "]", ":", "\n", "                ", "self", ".", "_stage", "+=", "1", "\n", "self", ".", "_curb_stage", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "if", "x_agent", ">", "pos", "+", "size", "+", "0.15", ":", "\n", "                ", "self", ".", "_stage", "+=", "1", "\n", "self", ".", "_ceil_stage", "+=", "1", "\n", "\n", "", "", "if", "self", ".", "_obstacle_type", "[", "self", ".", "_stage", "]", ":", "\n", "            ", "obs_obs", "=", "(", "5.1", ",", "5.2", ")", "\n", "", "else", ":", "\n", "            ", "obs_obs", "=", "(", "5.1", ",", "6.0", ")", "\n", "", "obs_start", "=", "self", ".", "_obstacle_pos", "[", "self", ".", "_stage", "]", "-", "self", ".", "_obstacle_size", "[", "self", ".", "_stage", "]", "\n", "obs_end", "=", "self", ".", "_obstacle_pos", "[", "self", ".", "_stage", "]", "+", "self", ".", "_obstacle_size", "[", "self", ".", "_stage", "]", "\n", "if", "obs_start", "-", "x_agent", "<", "self", ".", "_config", "[", "'ob_detect_dist'", "]", ":", "\n", "            ", "obs_obs", "=", "(", "obs_start", "-", "x_agent", ",", "obs_end", "-", "x_agent", ")", "\n", "", "return", "obs_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.step": [[94, 216], ["min", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.do_simulation", "min", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._reset_external_force", "range", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._ctrl_reward", "numpy.cos", "numpy.clip", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obs", "numpy.random.rand", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._apply_external_force", "print", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.collision_detection", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.collision_detection", "max", "abs", "abs", "abs", "enumerate", "float", "print", "print", "print", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.collision_detection", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.collision_detection", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "_interval_time", "+=", "1", "\n", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "y_before", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "foot_before", "=", "min", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "0", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "0", "]", ")", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "_get_obstacles_observation", "(", ")", "\n", "stage_before", "=", "self", ".", "_stage", "\n", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "y_after", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "foot_after", "=", "min", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "0", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "0", "]", ")", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "_get_obstacles_observation", "(", ")", "\n", "stage_after", "=", "self", ".", "_stage", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "done", "=", "False", "\n", "success", "=", "False", "\n", "pass_reward", "=", "0", "\n", "if", "stage_before", "<", "stage_after", "and", "stage_before", "<", "(", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", ")", "and", "not", "self", ".", "_pass_state", "[", "stage_before", "]", ":", "\n", "            ", "if", "(", "x_after", "-", "self", ".", "_interval_start_pos", ")", "/", "self", ".", "dt", "<", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "1", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "'slow'", ")", "\n", "", "self", ".", "_interval_start_pos", "=", "x_after", "\n", "self", ".", "_interval_time", "=", "0", "\n", "\n", "pass_reward", "=", "self", ".", "_config", "[", "\"pass_reward\"", "]", "\n", "self", ".", "_pass_state", "[", "stage_before", "]", "=", "True", "\n", "success", "=", "True", "\n", "self", ".", "_success_count", "+=", "1", "\n", "print", "(", "'success obstacle {} times'", ".", "format", "(", "self", ".", "_success_count", ")", ")", "\n", "if", "self", ".", "_success_count", "==", "5", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "'Done (success {} times)'", ".", "format", "(", "self", ".", "_success_count", ")", ")", "\n", "\n", "", "", "collision_penalty", "=", "0", "\n", "if", "self", ".", "collision_detection", "(", "'curb'", ")", "or", "self", ".", "collision_detection", "(", "'ceil'", ")", ":", "\n", "            ", "collision_penalty", "=", "-", "self", ".", "_config", "[", "\"collision_penalty\"", "]", "\n", "if", "self", ".", "_config", "[", "\"done_when_collide\"", "]", "!=", "0", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "\"Collided\"", ")", "\n", "\n", "", "", "near_ceiling", "=", "False", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_ceils", "+", "self", ".", "_num_curbs", ")", ":", "\n", "            ", "pos", "=", "self", ".", "_obstacle_pos", "[", "i", "]", "\n", "size", "=", "self", ".", "_obstacle_size", "[", "i", "]", "\n", "if", "not", "self", ".", "_obstacle_type", "[", "i", "]", "and", "pos", "-", "size", "-", "self", ".", "_config", "[", "'ob_detect_dist'", "]", "<", "x_after", "and", "x_after", "<", "pos", "+", "size", "+", "3", ":", "\n", "                ", "near_ceiling", "=", "True", "\n", "\n", "", "", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "foot_reward", "=", "0", "\n", "jump_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "self", ".", "data", ".", "qpos", "[", "2", "]", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "y_vel", "=", "(", "y_after", "-", "y_before", ")", "/", "self", ".", "dt", "\n", "y_vel", "=", "np", ".", "clip", "(", "y_vel", ",", "-", "self", ".", "_config", "[", "\"y_vel_limit\"", "]", ",", "self", ".", "_config", "[", "\"y_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "if", "near_ceiling", ":", "\n", "            ", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "\n", "if", "self", ".", "_obstacle_type", "[", "self", ".", "_stage", "]", ":", "\n", "            ", "c_pos", "=", "self", ".", "_obstacle_pos", "[", "self", ".", "_stage", "]", "\n", "c_size", "=", "self", ".", "_obstacle_size", "[", "self", ".", "_stage", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "[", "c_pos", "-", "c_size", ",", "c_pos", ",", "c_pos", "+", "c_size", "]", ")", ":", "\n", "                ", "if", "foot_before", "<=", "x", "and", "x", "<", "foot_after", ":", "\n", "                    ", "pass_reward", "+=", "self", ".", "_config", "[", "\"pass_reward\"", "]", "*", "(", "i", "+", "1", ")", "/", "3", "\n", "", "if", "x_before", "<=", "x", "and", "x", "<", "x_after", ":", "\n", "                    ", "jump_reward", "+=", "self", ".", "_config", "[", "\"jump_reward\"", "]", "*", "y_vel", "\n", "\n", "", "", "", "if", "self", ".", "_config", "[", "\"sparse_reward\"", "]", "==", "0", ":", "\n", "            ", "reward", "=", "alive_reward", "+", "ctrl_reward", "+", "x_vel_reward", "+", "angle_reward", "+", "height_reward", "+", "pass_reward", "+", "collision_penalty", "+", "foot_reward", "+", "jump_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "float", "(", "success", ")", "\n", "\n", "", "if", "near_ceiling", ":", "\n", "            ", "done", "=", "done", "or", "height", "<", "0.3", "\n", "", "else", ":", "\n", "            ", "done", "=", "done", "or", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "\n", "\n", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"collision_penalty\"", ":", "collision_penalty", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"jump_reward\"", ":", "jump_reward", ",", "\n", "\"pass_reward\"", ":", "pass_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"success_count\"", ":", "self", ".", "_success_count", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obs": [[217, 223], ["walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "obstacle_obs", "=", "self", ".", "_get_obstacles_observation", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", ",", "obstacle_obs", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_ob_dict": [[224, 235], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", ",", "\n", "'curb'", ":", "ob", "[", ":", ",", "-", "2", ":", "]", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", "17", ":", "26", "]", ",", "\n", "'curb'", ":", "ob", "[", "-", "2", ":", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.reset_model": [[237, 258], ["walker2d_obstacle_course.Walker2dObstacleCourseEnv._put_obstacles", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.set_state", "range", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obs", "int", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.do_simulation", "numpy.random.uniform", "numpy.random.uniform", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._put_obstacles", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "_put_obstacles", "(", ")", "\n", "self", ".", "_pass_state", "=", "[", "False", "]", "*", "(", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", ")", "\n", "self", ".", "_success_count", "=", "0", "\n", "self", ".", "_meta_policy_stage", "=", "-", "1", "\n", "self", ".", "_stage", "=", "0", "\n", "self", ".", "_curb_stage", "=", "0", "\n", "self", ".", "_ceil_stage", "=", "0", "\n", "self", ".", "_interval_time", "=", "0", "\n", "self", ".", "_interval_start_pos", "=", "0", "\n", "\n", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type": [[259, 261], ["None"], "methods", ["None"], ["", "def", "get_obstacle_pos_and_type", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos'", ":", "self", ".", "_obstacle_pos", ",", "'type'", ":", "self", ".", "_obstacle_type", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos": [[263, 265], ["None"], "methods", ["None"], ["", "def", "get_obstacle_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_obstacle_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._random_obstacles": [[266, 274], ["numpy.random.permutation", "numpy.arange", "numpy.random.uniform"], "methods", ["None"], ["", "def", "_random_obstacles", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", ")", ")", "\n", "self", ".", "_obstacle_type", "=", "[", "True", "]", "*", "(", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", "+", "1", ")", "\n", "for", "i", "in", "idx", "[", "self", ".", "_num_curbs", ":", "]", ":", "\n", "            ", "self", ".", "_obstacle_type", "[", "i", "]", "=", "False", "# ceilings", "\n", "", "r", "=", "self", ".", "_config", "[", "\"obs_randomness\"", "]", "\n", "obs_x", "=", "self", ".", "_possible_x", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", ")", "\n", "return", "obs_x", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._put_obstacles": [[275, 300], ["walker2d_obstacle_course.Walker2dObstacleCourseEnv._random_obstacles", "range", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._obstacle_pos.append", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._obstacle_size.append", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._obstacle_pos.append", "walker2d_obstacle_course.Walker2dObstacleCourseEnv._obstacle_size.append", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.model.geom_name2id", "walker2d_obstacle_course.Walker2dObstacleCourseEnv.model.geom_name2id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._random_obstacles", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_put_obstacles", "(", "self", ")", ":", "\n", "        ", "geom_name_list", "=", "self", ".", "model", ".", "geom_names", "\n", "self", ".", "_obstacle_pos", "=", "[", "]", "\n", "self", ".", "_obstacle_size", "=", "[", "]", "\n", "\n", "obs_x", "=", "self", ".", "_random_obstacles", "(", ")", "\n", "\n", "curb_idx", "=", "1", "\n", "ceil_idx", "=", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_curbs", "+", "self", ".", "_num_ceils", ")", ":", "\n", "            ", "if", "self", ".", "_obstacle_type", "[", "i", "]", ":", "\n", "                ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'curb{}'", ".", "format", "(", "curb_idx", ")", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "curb_idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'ceiling{}'", ".", "format", "(", "ceil_idx", ")", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"ceil_height\"", "]", "\n", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", "=", "self", ".", "_config", "[", "\"ceil_size\"", "]", "\n", "ceil_idx", "+=", "1", "\n", "", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "obs_x", "[", "i", "]", "\n", "self", ".", "_obstacle_pos", ".", "append", "(", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", ")", "\n", "self", ".", "_obstacle_size", ".", "append", "(", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", ")", "\n", "", "self", ".", "_obstacle_pos", ".", "append", "(", "100", ")", "\n", "self", ".", "_obstacle_size", ".", "append", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_next_primitive": [[301, 311], ["walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv._get_obstacles_observation"], ["", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "self", ".", "_get_obstacles_observation", "(", ")", "\n", "# after successful jump", "\n", "if", "self", ".", "_stage", "!=", "self", ".", "_meta_policy_stage", ":", "\n", "            ", "self", ".", "_meta_policy_stage", "=", "self", ".", "_stage", "\n", "return", "'forward'", "\n", "", "if", "self", ".", "_obstacle_type", "[", "self", ".", "_stage", "]", ":", "\n", "            ", "return", "'jump'", "\n", "", "else", ":", "\n", "            ", "return", "'crawl'", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.__init__": [[12, 56], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_jump.Walker2dJumpEnv._config.update", "walker2d_jump.Walker2dJumpEnv.ob_shape.update", "walker2d_jump.Walker2dJumpEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "2", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "2", ",", "\n", "\"jump_reward\"", ":", "100", ",", "\n", "\"pass_reward\"", ":", "200", ",", "\n", "\"success_reward\"", ":", "100", ",", "\n", "\"collision_penalty\"", ":", "10", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"y_vel_limit\"", ":", "2", ",", "\n", "\"success_dist_after_curb\"", ":", "1.5", ",", "\n", "\"random_steps\"", ":", "5", ",", "\n", "\"curb_height\"", ":", "0.2", ",", "# DO NOT CHANGE!", "\n", "\"curb_randomness\"", ":", "1.5", ",", "\n", "\"apply_force\"", ":", "100", ",", "\n", "\"done_when_collide\"", ":", "1", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_curbs", "=", "None", "\n", "self", ".", "_curbs_x", "=", "7", "\n", "self", ".", "_stage", "=", "0", "\n", "self", ".", "_pass_state", "=", "False", "\n", "self", ".", "_post_curb_states", "=", "0", "\n", "self", ".", "_collide", "=", "False", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\n", "\"collision_penalty\"", ",", "\"jump_reward\"", ",", "\"pass_reward\"", ",", "\n", "\"success_reward\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", "]", "\n", "self", ".", "ob_shape", ".", "update", "(", "{", "\"curb\"", ":", "[", "2", "]", "}", ")", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"walker_v2.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv._get_curb_observation": [[57, 74], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos", "walker2d_jump.Walker2dJumpEnv._put_curbs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._put_curbs"], ["", "def", "_get_curb_observation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_curbs", "is", "None", ":", "\n", "            ", "self", ".", "_put_curbs", "(", ")", "\n", "", "x_agent", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "#x_agent = self.data.qpos[0]", "\n", "self", ".", "_stage", "=", "0", "\n", "# where is the next curb", "\n", "pos", "=", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "size", "=", "self", ".", "_curbs", "[", "'size'", "]", "\n", "\n", "if", "x_agent", ">", "pos", "+", "size", "+", "self", ".", "_config", "[", "\"success_dist_after_curb\"", "]", ":", "\n", "            ", "self", ".", "_stage", "+=", "1", "\n", "", "curb_start", "=", "pos", "-", "size", "\n", "curb_end", "=", "pos", "+", "size", "\n", "if", "curb_start", "-", "x_agent", ">", "5.0", "or", "self", ".", "_stage", "==", "1", ":", "\n", "            ", "return", "(", "5.1", ",", "5.2", ")", "\n", "", "return", "(", "curb_start", "-", "x_agent", ",", "curb_end", "-", "x_agent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.step": [[75, 179], ["min", "walker2d_jump.Walker2dJumpEnv._get_curb_observation", "walker2d_jump.Walker2dJumpEnv.sim.get_state", "walker2d_jump.Walker2dJumpEnv.do_simulation", "min", "walker2d_jump.Walker2dJumpEnv._get_curb_observation", "walker2d_jump.Walker2dJumpEnv._reset_external_force", "walker2d_jump.Walker2dJumpEnv.collision_detection", "walker2d_jump.Walker2dJumpEnv._ctrl_reward", "numpy.cos", "numpy.clip", "walker2d_jump.Walker2dJumpEnv._get_walker2d_pos", "enumerate", "walker2d_jump.Walker2dJumpEnv._get_obs", "numpy.random.rand", "walker2d_jump.Walker2dJumpEnv._apply_external_force", "max", "abs", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.collision_detection", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "y_before", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "foot_before", "=", "min", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "0", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "0", "]", ")", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "_get_curb_observation", "(", ")", "\n", "stage_before", "=", "self", ".", "_stage", "\n", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "y_after", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "foot_after", "=", "min", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "0", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "0", "]", ")", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "_get_curb_observation", "(", ")", "\n", "stage_after", "=", "self", ".", "_stage", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "pass_reward", "=", "0", "\n", "success_reward", "=", "0", "\n", "if", "stage_before", "<", "stage_after", "and", "not", "self", ".", "_pass_state", ":", "\n", "            ", "pass_reward", "=", "self", ".", "_config", "[", "'pass_reward'", "]", "\n", "self", ".", "_pass_state", "=", "True", "\n", "\n", "", "collision_penalty", "=", "0", "\n", "if", "self", ".", "collision_detection", "(", "'curb'", ")", ":", "\n", "            ", "self", ".", "_collide", "=", "True", "\n", "collision_penalty", "=", "-", "self", ".", "_config", "[", "\"collision_penalty\"", "]", "\n", "\n", "", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "jump_reward", "=", "0", "\n", "foot_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "angle", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "y_vel", "=", "(", "y_after", "-", "y_before", ")", "/", "self", ".", "dt", "\n", "y_vel", "=", "np", ".", "clip", "(", "y_vel", ",", "-", "self", ".", "_config", "[", "\"y_vel_limit\"", "]", ",", "self", ".", "_config", "[", "\"y_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "# reward", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "\n", "# success", "\n", "success", "=", "False", "\n", "x_agent", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n", "c_pos", "=", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "c_size", "=", "self", ".", "_curbs", "[", "'size'", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "[", "c_pos", "-", "c_size", ",", "c_pos", ",", "c_pos", "+", "c_size", "]", ")", ":", "\n", "            ", "if", "foot_before", "<=", "x", "and", "x", "<", "foot_after", ":", "\n", "                ", "pass_reward", "+=", "self", ".", "_config", "[", "\"pass_reward\"", "]", "*", "(", "i", "+", "1", ")", "/", "3", "\n", "", "if", "x_before", "<=", "x", "and", "x", "<", "x_after", ":", "\n", "                ", "jump_reward", "+=", "self", ".", "_config", "[", "\"jump_reward\"", "]", "*", "y_vel", "\n", "\n", "", "", "if", "x_agent", ">", "15", ":", "\n", "            ", "success", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "\n", "", "reward", "=", "alive_reward", "+", "ctrl_reward", "+", "collision_penalty", "+", "pass_reward", "+", "x_vel_reward", "+", "height_reward", "+", "angle_reward", "+", "success_reward", "+", "jump_reward", "+", "foot_reward", "\n", "\n", "# fail or success", "\n", "done", "=", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "or", "success", "or", "(", "self", ".", "_config", "[", "\"done_when_collide\"", "]", "and", "self", ".", "_collide", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"collision_penalty\"", ":", "collision_penalty", ",", "\n", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"jump_reward\"", ":", "jump_reward", ",", "\n", "\"pass_reward\"", ":", "pass_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"state\"", ":", "state", ",", "\n", "\"obstacle_pos\"", ":", "self", ".", "_curbs", "[", "'pos'", "]", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv._get_obs": [[180, 186], ["walker2d_jump.Walker2dJumpEnv._get_curb_observation", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "curb_obs", "=", "self", ".", "_get_curb_observation", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", ",", "curb_obs", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.get_ob_dict": [[187, 198], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", ",", "\n", "'curb'", ":", "ob", "[", ":", ",", "-", "2", ":", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", "17", ":", "26", "]", ",", "\n", "'curb'", ":", "ob", "[", "-", "2", ":", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.get_sim_state": [[200, 204], ["walker2d_jump.Walker2dJumpEnv.sim.get_state"], "methods", ["None"], ["", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "obstacle_pos", "=", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "return", "{", "'state'", ":", "state", ",", "'obstacle_pos'", ":", "obstacle_pos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.rollback": [[205, 241], ["walker2d_jump.Walker2dJumpEnv.sim.get_state", "mujoco_py.MjSimState", "walker2d_jump.Walker2dJumpEnv.sim.set_state", "walker2d_jump.Walker2dJumpEnv.do_simulation", "walker2d_jump.Walker2dJumpEnv.sim.forward", "walker2d_jump.Walker2dJumpEnv._get_obs", "walker2d_jump.Walker2dJumpEnv.model.geom_name2id", "walker2d_jump.Walker2dJumpEnv._get_walker2d_pos", "walker2d_jump.Walker2dJumpEnv.model.geom_name2id"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "cur_pos", ")", ":", "\n", "        ", "if", "cur_pos", "!=", "-", "1", ":", "\n", "            ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'curb1'", ")", "\n", "h", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "cur_pos", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "h", "\n", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "2", "]", "=", "h", "\n", "\n", "pos", "=", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "\n", "size", "=", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", "\n", "\n", "self", ".", "_curbs", "=", "{", "'pos'", ":", "pos", ",", "'size'", ":", "size", "}", "\n", "\n", "\n", "", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n", "if", "cur_pos", "==", "-", "1", ":", "\n", "            ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'curb1'", ")", "\n", "h", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "agent_x", "+", "4.0", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "h", "\n", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "2", "]", "=", "h", "\n", "\n", "pos", "=", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "\n", "size", "=", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", "\n", "\n", "self", ".", "_curbs", "=", "{", "'pos'", ":", "pos", ",", "'size'", ":", "size", "}", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.reset_model": [[242, 257], ["walker2d_jump.Walker2dJumpEnv._put_curbs", "walker2d_jump.Walker2dJumpEnv.set_state", "range", "walker2d_jump.Walker2dJumpEnv._get_obs", "int", "walker2d_jump.Walker2dJumpEnv.do_simulation", "numpy.random.uniform", "numpy.random.uniform", "walker2d_jump.Walker2dJumpEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._put_curbs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "_post_curb_states", "=", "0", "\n", "self", ".", "_collide", "=", "False", "\n", "self", ".", "_put_curbs", "(", ")", "\n", "self", ".", "_pass_state", "=", "False", "\n", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv._put_curbs": [[261, 273], ["walker2d_jump.Walker2dJumpEnv.model.geom_name2id", "numpy.random.uniform"], "methods", ["None"], ["", "def", "_put_curbs", "(", "self", ")", ":", "\n", "        ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'curb1'", ")", "\n", "r", "=", "self", ".", "_config", "[", "\"curb_randomness\"", "]", "\n", "h", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "self", ".", "_curbs_x", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "h", "\n", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "2", "]", "=", "h", "\n", "\n", "pos", "=", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "\n", "size", "=", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", "\n", "\n", "self", ".", "_curbs", "=", "{", "'pos'", ":", "pos", ",", "'size'", ":", "size", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.set_curbs_x_randomness_for_irl": [[274, 277], ["None"], "methods", ["None"], ["", "def", "set_curbs_x_randomness_for_irl", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "        ", "self", ".", "_curbs_x", "=", "8.0", "\n", "self", ".", "_config", "[", "'curb_randomness'", "]", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.get_curbs_x_randomness": [[278, 280], ["None"], "methods", ["None"], ["", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_curbs_x", ",", "self", ".", "_config", "[", "'curb_randomness'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.get_x_pos": [[282, 284], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.get_curb_pos": [[286, 288], ["None"], "methods", ["None"], ["", "def", "get_curb_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_front": [[289, 300], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "is_boundary_walk_front", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_curbs", "[", "'pos'", "]", "-", "0.1", "-", "agent_x", "\n", "start", "=", "3.5", "\n", "end", "=", "4.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over   ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_front_for_obstacle": [[301, 312], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_walk_front_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_curbs", "[", "'pos'", "]", "-", "0.1", "-", "agent_x", "\n", "start", "=", "2.5", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over   ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_rear": [[313, 324], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_jump_rear", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_curbs", "[", "'pos'", "]", "-", "0.1", "-", "agent_x", "\n", "start", "=", "2.0", "\n", "end", "=", "4.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over    ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_rear_for_obstacle": [[325, 336], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_jump_rear_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_curbs", "[", "'pos'", "]", "-", "0.1", "-", "agent_x", "\n", "start", "=", "1.0", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over    ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_front": [[337, 348], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_jump_front", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "agent_x", "-", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "start", "=", "2.5", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_jump_front_for_obstacle": [[349, 360], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_jump_front_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "agent_x", "-", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "start", "=", "2.5", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_boundary_walk_rear": [[361, 372], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_boundary_walk_rear", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "start", "=", "-", "1.0", "\n", "end", "=", "4.0", "\n", "\n", "if", "start", "<=", "agent_x", "and", "agent_x", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "agent_x", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over   ", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary": [[374, 385], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_transition_boundary", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_curbs", "[", "'pos'", "]", "-", "0.1", "-", "agent_x", "\n", "start", "=", "2.0", "\n", "end", "=", "4.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear": [[386, 397], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_transition_boundary_rear", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "agent_x", "-", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "start", "=", "2.5", "\n", "end", "=", "6.5", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_for_obstacle": [[398, 409], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_transition_boundary_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "self", ".", "_curbs", "[", "'pos'", "]", "-", "0.1", "-", "agent_x", "\n", "start", "=", "1.0", "\n", "end", "=", "3.0", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", ">=", "end", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_transition_boundary_rear_for_obstacle": [[410, 421], ["walker2d_jump.Walker2dJumpEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "", "def", "is_transition_boundary_rear_for_obstacle", "(", "self", ")", ":", "\n", "        ", "agent_x", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "dist", "=", "agent_x", "-", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "start", "=", "2.5", "\n", "end", "=", "6.5", "\n", "if", "start", "<=", "dist", "and", "dist", "<", "end", ":", "\n", "            ", "return", "0", "\n", "", "elif", "dist", "<", "start", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "# over", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_jump.Walker2dJumpEnv.is_terminate": [[422, 430], ["None"], "methods", ["None"], ["", "", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "self", ".", "_passed", "=", "False", "\n", "", "if", "ob", "[", "26", "]", "<", "0", ":", "\n", "            ", "self", ".", "_passed", "=", "True", "\n", "", "if", "ob", "[", "26", "]", ">=", "5.1", "and", "self", ".", "_passed", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.__init__": [[11, 51], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_patrol.Walker2dPatrolEnv._config.update", "numpy.random.seed", "walker2d_patrol.Walker2dPatrolEnv.ob_shape.update", "walker2d_patrol.Walker2dPatrolEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "2", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "2", ",", "\n", "\"success_reward\"", ":", "100", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"track_length\"", ":", "2.0", ",", "\n", "\"sparse_reward\"", ":", "0", ",", "\n", "\"with_balance\"", ":", "1", ",", "\n", "\"random_direction\"", ":", "1", ",", "\n", "\"forward_first\"", ":", "1", ",", "\n", "\"max_success\"", ":", "5", ",", "\n", "\"prob_apply_force\"", ":", "0", ",", "\n", "\"one_way_time_limit\"", ":", "800", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_direction", "=", "1", "\n", "self", ".", "_success_count", "=", "0", "\n", "self", ".", "_one_way_time_limit", "=", "self", ".", "_config", "[", "\"one_way_time_limit\"", "]", "\n", "\n", "self", ".", "cur_success_for_terminal", "=", "0", "\n", "self", ".", "_balance_period", "=", "False", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\n", "\"angle_reward\"", ",", "\"height_reward\"", ",", "\"alive_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"success_reward\"", ",", "\"direction\"", "]", "\n", "self", ".", "ob_shape", ".", "update", "(", "{", "\"distance\"", ":", "[", "1", "]", "}", ")", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "'walker_v3.xml'", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.step": [[52, 142], ["walker2d_patrol.Walker2dPatrolEnv.do_simulation", "walker2d_patrol.Walker2dPatrolEnv._reset_external_force", "walker2d_patrol.Walker2dPatrolEnv._ctrl_reward", "numpy.cos", "walker2d_patrol.Walker2dPatrolEnv._get_obs", "numpy.random.rand", "walker2d_patrol.Walker2dPatrolEnv._apply_external_force", "max", "abs", "abs", "abs", "abs", "int", "float", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "done", "=", "False", "\n", "success", "=", "False", "\n", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "foot_reward", "=", "0", "\n", "success_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "self", ".", "data", ".", "qpos", "[", "2", "]", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "*", "self", ".", "_direction", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "\n", "# fail", "\n", "done", "=", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "\n", "self", ".", "_one_way_time_limit", "-=", "1", "\n", "if", "self", ".", "_one_way_time_limit", "==", "0", ":", "\n", "# print('failed to patrol within a given time')", "\n", "            ", "done", "=", "True", "\n", "\n", "# success", "\n", "# print('x_vel', x_vel)", "\n", "", "if", "self", ".", "_direction", "*", "x_after", ">", "self", ".", "_config", "[", "\"track_length\"", "]", ":", "\n", "            ", "if", "x_vel", "<", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "1", ":", "\n", "                ", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "success", "=", "True", "\n", "self", ".", "_success_count", "+=", "1", "\n", "self", ".", "_direction", "*=", "-", "1", "\n", "self", ".", "_balance_period", "=", "True", "\n", "self", ".", "_one_way_time_limit", "=", "self", ".", "_config", "[", "\"one_way_time_limit\"", "]", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "# print('success turn {} times'.format(self._success_count))", "\n", "\n", "", "", "if", "self", ".", "_success_count", "==", "int", "(", "self", ".", "_config", "[", "\"max_success\"", "]", ")", ":", "\n", "            ", "done", "=", "True", "\n", "# print('Done (success {} times)'.format(self._success_count))", "\n", "\n", "", "if", "self", ".", "_config", "[", "\"sparse_reward\"", "]", "==", "0", ":", "\n", "            ", "reward", "=", "x_vel_reward", "+", "angle_reward", "+", "height_reward", "+", "ctrl_reward", "+", "alive_reward", "+", "foot_reward", "+", "success_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "float", "(", "success", ")", "\n", "\n", "# if done:", "\n", "#     print('success turn {} times'.format(self._success_count))", "\n", "\n", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "abs", "(", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ")", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"direction\"", ":", "self", ".", "_direction", ",", "\n", "\"success_count\"", ":", "self", ".", "_success_count", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv._get_obs": [[143, 150], ["numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "target", "=", "self", ".", "_direction", "*", "self", ".", "_config", "[", "'track_length'", "]", "\n", "distance", "=", "target", "-", "qpos", "[", "0", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", ",", "[", "distance", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.get_ob_dict": [[151, 162], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", ",", "\n", "'distance'", ":", "ob", "[", ":", ",", "-", "1", ":", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", "17", ":", "26", "]", ",", "\n", "'distance'", ":", "ob", "[", "-", "1", ":", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.get_x_pos": [[164, 166], ["walker2d_patrol.Walker2dPatrolEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.get_q_pos": [[167, 169], ["None"], "methods", ["None"], ["", "def", "get_q_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.reset_model": [[170, 203], ["walker2d_patrol.Walker2dPatrolEnv.set_state", "range", "walker2d_patrol.Walker2dPatrolEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "int", "walker2d_patrol.Walker2dPatrolEnv.do_simulation", "numpy.random.rand", "walker2d_patrol.Walker2dPatrolEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "# reset state", "\n", "self", ".", "_success_count", "=", "0", "\n", "if", "self", ".", "_config", "[", "\"random_direction\"", "]", ">", "0", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", "1", ")", ">", "0.5", ":", "\n", "                ", "self", ".", "_direction", "=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "_direction", "=", "-", "1", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_config", "[", "\"forward_first\"", "]", ">", "0", ":", "\n", "                ", "self", ".", "_direction", "=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "_direction", "=", "-", "1", "\n", "\n", "", "", "qpos", "[", "0", "]", "=", "-", "self", ".", "_direction", "*", "self", ".", "_config", "[", "\"track_length\"", "]", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "self", ".", "cur_success_for_terminal", "=", "0", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "# balance period", "\n", "", "self", ".", "_balance_period", "=", "False", "\n", "self", ".", "_one_way_time_limit", "=", "self", ".", "_config", "[", "\"one_way_time_limit\"", "]", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.get_next_primitive": [[204, 213], ["None"], "methods", ["None"], ["", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "if", "self", ".", "_config", "[", "\"with_balance\"", "]", "==", "0", ":", "\n", "            ", "return", "\"forward\"", "if", "self", ".", "_direction", "==", "1", "else", "\"backward\"", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_balance_period", ":", "\n", "                ", "self", ".", "_balance_period", "=", "False", "\n", "return", "\"balance\"", "\n", "", "else", ":", "\n", "                ", "return", "\"forward\"", "if", "self", ".", "_direction", "==", "1", "else", "\"backward\"", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_patrol.Walker2dPatrolEnv.is_terminate": [[214, 238], ["walker2d_patrol.Walker2dPatrolEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "", "", "def", "is_terminate", "(", "self", ",", "type", ",", "success_length", "=", "100", ",", "init", "=", "False", ")", ":", "\n", "        ", "if", "type", "==", "'walk'", ":", "\n", "# print('success: ', self.cur_success_for_terminal, self._success_count)", "\n", "            ", "if", "self", ".", "cur_success_for_terminal", "!=", "self", ".", "_success_count", ":", "\n", "                ", "self", ".", "cur_success_for_terminal", "=", "self", ".", "_success_count", "\n", "return", "1", "\n", "", "else", ":", "\n", "                ", "return", "0", "\n", "", "", "elif", "type", "==", "'balance'", ":", "\n", "            ", "if", "init", ":", "\n", "                ", "self", ".", "count_evaluate", "=", "0", "\n", "self", ".", "success", "=", "True", "\n", "\n", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "height", "=", "ob", "[", "0", "]", "\n", "success", "=", "height", ">", "0.8", "\n", "\n", "if", "success", ":", "\n", "                ", "self", ".", "count_evaluate", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "success", "=", "False", "\n", "# print('count eval:', self.count_evaluate)", "\n", "\n", "", "return", "self", ".", "success", "and", "self", ".", "count_evaluate", ">=", "success_length", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.__init__": [[11, 42], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_keep_catch.JacoKeepCatchEnv._config.update", "jaco_keep_catch.JacoKeepCatchEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"sparse_reward\"", ":", "0", ",", "\n", "\"catch_reward\"", ":", "100", ",", "\n", "\"hold_reward\"", ":", "4", ",", "\n", "\"random_throw\"", ":", "1", ",", "\n", "\"wait\"", ":", "50", ",", "\n", "\"init_randomness\"", ":", "0.005", ",", "\n", "\"max_success\"", ":", "5", ",", "\n", "\"sub_use_term_len\"", ":", "50", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "self", ".", "_ep_t", "=", "-", "1", "\n", "self", ".", "_dist_box", "=", "0", "\n", "self", ".", "_target_pos", "=", "[", "0", ",", "0.2", ",", "0.2", "]", "\n", "self", ".", "qpos_box", "=", "[", "0", ",", "2", ",", "1.0", ",", "1", ",", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "qvel_box", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "_flag", "=", "True", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"catch_reward\"", ",", "\"hold_reward\"", ",", "\"success\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "self", ".", "_success_count", "=", "0", "\n", "self", ".", "isStart", "=", "False", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_pick.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.step": [[43, 117], ["jaco_keep_catch.JacoKeepCatchEnv.do_simulation", "jaco_keep_catch.JacoKeepCatchEnv._get_obs", "jaco_keep_catch.JacoKeepCatchEnv._ctrl_reward", "jaco_keep_catch.JacoKeepCatchEnv._get_distance_hand", "jaco_keep_catch.JacoKeepCatchEnv._throw_box", "jaco_keep_catch.JacoKeepCatchEnv._get_box_pos", "numpy.linalg.norm", "print", "jaco_keep_catch.JacoKeepCatchEnv.reset_box", "float", "jaco_keep_catch.JacoKeepCatchEnv._set_box", "jaco_keep_catch.JacoKeepCatchEnv._get_box_pos", "int"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._throw_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._set_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "# print(self._t)", "\n", "# print(self._hold_duration)", "\n", "        ", "self", ".", "_t", "+=", "1", "\n", "self", ".", "_ep_t", "+=", "1", "\n", "self", ".", "isStart", "=", "False", "\n", "if", "self", ".", "_ep_t", "==", "1", "or", "(", "self", ".", "_ep_t", "!=", "self", ".", "_t", "and", "self", ".", "_t", "==", "self", ".", "_config", "[", "\"wait\"", "]", ")", ":", "\n", "# more perturb", "\n", "# for _ in range(10):", "\n", "#     print('hihi', self._t)", "\n", "#     self.do_simulation(self.unwrapped.action_space.sample(), self.frame_skip)", "\n", "            ", "self", ".", "_throw_box", "(", ")", "\n", "self", ".", "isStart", "=", "True", "\n", "", "elif", "self", ".", "_ep_t", "!=", "self", ".", "_t", "and", "self", ".", "_t", "<", "self", ".", "_config", "[", "\"wait\"", "]", ":", "\n", "            ", "self", ".", "_set_box", "(", ")", "\n", "\n", "", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "reset", "=", "False", "\n", "catch_reward", "=", "0", "\n", "hold_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "dist_box", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "in_hand", "=", "dist_box", "<", "0.06", "\n", "in_air", "=", "box_z", ">", "0.05", "\n", "on_ground", "=", "box_z", "<=", "0.05", "\n", "\n", "# fail", "\n", "if", "on_ground", ":", "\n", "            ", "done", "=", "True", "\n", "reset", "=", "True", "\n", "\n", "# catch", "\n", "", "if", "in_air", "and", "in_hand", ":", "\n", "            ", "self", ".", "_hold_duration", "+=", "1", "\n", "catch_reward", "=", "self", ".", "_config", "[", "\"catch_reward\"", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_target_pos", "-", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "hold_reward", "=", "self", ".", "_config", "[", "\"hold_reward\"", "]", "*", "(", "1", "-", "dist", ")", "\n", "\n", "# success", "\n", "if", "self", ".", "_hold_duration", "==", "self", ".", "_config", "[", "'sub_use_term_len'", "]", ":", "\n", "                ", "reset", "=", "True", "\n", "success", "=", "True", "\n", "self", ".", "_success_count", "+=", "1", "\n", "if", "self", ".", "_success_count", "==", "int", "(", "self", ".", "_config", "[", "\"max_success\"", "]", ")", ":", "\n", "                    ", "done", "=", "True", "\n", "\n", "# unstable simulation", "\n", "", "", "", "if", "self", ".", "_fail", ":", "\n", "            ", "done", "=", "True", "\n", "self", ".", "_fail", "=", "False", "\n", "\n", "", "if", "done", ":", "\n", "            ", "print", "(", "'success {} times'", ".", "format", "(", "self", ".", "_success_count", ")", ")", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset_box", "(", ")", "\n", "\n", "", "if", "self", ".", "_config", "[", "\"sparse_reward\"", "]", "==", "0", ":", "\n", "            ", "reward", "=", "ctrl_reward", "+", "catch_reward", "+", "hold_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "float", "(", "success", ")", "\n", "\n", "", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"catch_reward\"", ":", "catch_reward", ",", "\n", "\"hold_reward\"", ":", "hold_reward", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"success_count\"", ":", "self", ".", "_success_count", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._set_box": [[118, 125], ["jaco_keep_catch.JacoKeepCatchEnv.data.qpos.ravel().copy", "jaco_keep_catch.JacoKeepCatchEnv.data.qvel.ravel().copy", "jaco_keep_catch.JacoKeepCatchEnv.set_state", "jaco_keep_catch.JacoKeepCatchEnv.data.qpos.ravel", "jaco_keep_catch.JacoKeepCatchEnv.data.qvel.ravel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state"], ["", "def", "_set_box", "(", "self", ")", ":", "\n", "# set box's initial position", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qpos", "[", "9", ":", "16", "]", "=", "self", ".", "qpos_box", "\n", "qvel", "[", "9", ":", "15", "]", "=", "self", ".", "qvel_box", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._throw_box": [[126, 145], ["jaco_keep_catch.JacoKeepCatchEnv._get_box_pos", "jaco_keep_catch.JacoKeepCatchEnv._get_pos", "jaco_keep_catch.JacoKeepCatchEnv.model.body_name2id", "jaco_keep_catch.JacoKeepCatchEnv.do_simulation", "jaco_keep_catch.JacoKeepCatchEnv.unwrapped.action_space.sample", "numpy.random.uniform", "numpy.random.uniform", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "_throw_box", "(", "self", ")", ":", "\n", "# self._set_box()", "\n", "\n", "# set initial force", "\n", "        ", "box_pos", "=", "self", ".", "_get_box_pos", "(", ")", "\n", "jaco_pos", "=", "self", ".", "_get_pos", "(", "'jaco_link_base'", ")", "\n", "dx", "=", "0.4", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_throw\"", "]", "\n", "dy", "=", "0.3", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ")", "*", "self", ".", "_config", "[", "\"random_throw\"", "]", "\n", "force", "=", "jaco_pos", "+", "[", "dx", ",", "dy", ",", "1", "]", "-", "box_pos", "\n", "force", "=", "110", "*", "(", "force", "/", "np", ".", "linalg", ".", "norm", "(", "force", ")", ")", "\n", "\n", "# apply force", "\n", "box_body_idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'box'", ")", "\n", "xfrc", "=", "self", ".", "data", ".", "xfrc_applied", "\n", "xfrc", "[", "box_body_idx", ",", ":", "3", "]", "=", "force", "\n", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "# reset force", "\n", "xfrc", "[", "box_body_idx", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv._get_obs": [[146, 152], ["jaco_keep_catch.JacoKeepCatchEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.get_ob_dict": [[153, 165], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.get_sim_state": [[167, 171], ["jaco_keep_catch.JacoKeepCatchEnv.data.qpos.ravel().copy", "jaco_keep_catch.JacoKeepCatchEnv.sim.get_state", "jaco_keep_catch.JacoKeepCatchEnv.data.qpos.ravel"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "return", "{", "'state'", ":", "state", ",", "'box_pos'", ":", "qpos", "[", "9", ":", "12", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box": [[172, 193], ["jaco_keep_catch.JacoKeepCatchEnv.data.qpos.ravel().copy", "jaco_keep_catch.JacoKeepCatchEnv.data.qvel.ravel().copy", "numpy.asarray", "jaco_keep_catch.JacoKeepCatchEnv.set_state", "numpy.random.uniform", "numpy.random.uniform", "jaco_keep_catch.JacoKeepCatchEnv.data.qpos.ravel", "jaco_keep_catch.JacoKeepCatchEnv.data.qvel.ravel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state"], ["", "def", "reset_box", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "\n", "# set box's initial pose", "\n", "qpos", "[", "9", ":", "12", "]", "=", "np", ".", "asarray", "(", "[", "0", ",", "2.3", ",", "1.5", "]", ")", "\n", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "[", "12", ":", "16", "]", "=", "self", ".", "init_qpos", "[", "12", ":", "16", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "4", ")", "\n", "qvel", "[", "9", ":", "15", "]", "=", "self", ".", "init_qvel", "[", "9", ":", "15", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "6", ")", "\n", "\n", "\n", "self", ".", "qpos_box", "=", "qpos", "[", "9", ":", "16", "]", "\n", "self", ".", "qvel_box", "=", "qvel", "[", "9", ":", "15", "]", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_hold_duration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.rollback": [[194, 205], ["jaco_keep_catch.JacoKeepCatchEnv.sim.get_state", "mujoco_py.MjSimState", "jaco_keep_catch.JacoKeepCatchEnv.sim.set_state", "jaco_keep_catch.JacoKeepCatchEnv.do_simulation", "jaco_keep_catch.JacoKeepCatchEnv.sim.forward", "jaco_keep_catch.JacoKeepCatchEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "rollback", "(", "self", ",", "time", ",", "qpos", ",", "qvel", ",", "act", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "time", ",", "qpos", ",", "qvel", ",", "\n", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "do_simulation", "(", "act", ",", "self", ".", "frame_skip", ")", "\n", "\n", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_model": [[207, 229], ["jaco_keep_catch.JacoKeepCatchEnv.set_state", "jaco_keep_catch.JacoKeepCatchEnv.reset_box", "jaco_keep_catch.JacoKeepCatchEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.reset_box", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "self", ".", "reset_box", "(", ")", "\n", "\n", "self", ".", "_ep_t", "=", "0", "\n", "self", ".", "_success_count", "=", "0", "\n", "\n", "# for _ in range(10):", "\n", "#     print('hihi', self._t)", "\n", "#     self.do_simulation(self.unwrapped.action_space.sample(), self.frame_skip)", "\n", "\n", "# self._throw_box()", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.get_next_primitive": [[230, 232], ["None"], "methods", ["None"], ["", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "return", "'catch'", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.is_boundary_catch_front": [[233, 236], ["None"], "methods", ["None"], ["", "def", "is_boundary_catch_front", "(", "self", ")", ":", "\n", "# print(self.isStart, self._t, self._success_count)", "\n", "        ", "return", "1", "if", "self", ".", "_success_count", ">=", "1", "and", "self", ".", "isStart", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_keep_catch.JacoKeepCatchEnv.is_terminate": [[237, 239], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ")", ":", "\n", "        ", "return", "1", "if", "self", ".", "_success_count", ">=", "1", "and", "self", ".", "isStart", "else", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.__init__": [[11, 57], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_hurdle.Walker2dHurdleEnv._config.update", "walker2d_hurdle.Walker2dHurdleEnv.ob_shape.update", "walker2d_hurdle.Walker2dHurdleEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "2", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0.01", ",", "\n", "\"height_reward\"", ":", "2", ",", "\n", "\"jump_reward\"", ":", "100", ",", "\n", "\"pass_reward\"", ":", "200", ",", "\n", "\"collision_penalty\"", ":", "10", ",", "\n", "\"x_vel_limit\"", ":", "3", ",", "\n", "\"y_vel_limit\"", ":", "2", ",", "\n", "\"curb_height\"", ":", "0.2", ",", "# DO NOT CHANGE!", "\n", "\"curb_randomness\"", ":", "0.0005", ",", "\n", "\"done_when_collide\"", ":", "1", ",", "\n", "\"sparse_reward\"", ":", "0", ",", "\n", "\"curb_detect_dist\"", ":", "4.0", ",", "\n", "\"success_dist_after_curb\"", ":", "1.5", ",", "\n", "\"prob_apply_force\"", ":", "0", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_curbs_x", "=", "[", "8", ",", "18", ",", "28", ",", "38", ",", "48", "]", "\n", "self", ".", "_curbs", "=", "None", "\n", "self", ".", "_num_curbs", "=", "0", "\n", "self", ".", "_stage", "=", "0", "\n", "self", ".", "_post_curb_states", "=", "0", "\n", "self", ".", "_success_count", "=", "0", "\n", "self", ".", "_meta_policy_stage", "=", "-", "1", "\n", "self", ".", "_interval_time", "=", "0", "\n", "self", ".", "_interval_start_pos", "=", "0", "\n", "self", ".", "pass_state", "=", "[", "False", "]", "*", "self", ".", "_num_curbs", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\"collision_penalty\"", ",", "\n", "\"jump_reward\"", ",", "\"pass_reward\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"nz_mean\"", ",", "\"delta_h_mean\"", "]", "\n", "self", ".", "ob_shape", ".", "update", "(", "{", "\"curb\"", ":", "[", "2", "]", "}", ")", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"walker_v2.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation": [[58, 75], ["walker2d_hurdle.Walker2dHurdleEnv._get_walker2d_pos", "walker2d_hurdle.Walker2dHurdleEnv._put_curbs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._put_curbs"], ["", "def", "_get_curb_observation", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_curbs", "is", "None", ":", "\n", "            ", "self", ".", "_put_curbs", "(", ")", "\n", "", "x_agent", "=", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "#x_agent = self.data.qpos[0]", "\n", "if", "x_agent", ">", "self", ".", "_curbs", "[", "'pos'", "]", "[", "self", ".", "_stage", "]", "+", "self", ".", "_curbs", "[", "'size'", "]", "[", "self", ".", "_stage", "]", "+", "self", ".", "_config", "[", "\"success_dist_after_curb\"", "]", ":", "\n", "            ", "self", ".", "_stage", "+=", "1", "\n", "", "if", "self", ".", "_stage", ">=", "self", ".", "_num_curbs", ":", "\n", "            ", "return", "(", "5.1", ",", "5.2", ")", "\n", "", "else", ":", "\n", "            ", "curb_start", "=", "self", ".", "_curbs", "[", "'pos'", "]", "[", "self", ".", "_stage", "]", "-", "self", ".", "_curbs", "[", "'size'", "]", "[", "self", ".", "_stage", "]", "\n", "curb_end", "=", "self", ".", "_curbs", "[", "'pos'", "]", "[", "self", ".", "_stage", "]", "+", "self", ".", "_curbs", "[", "'size'", "]", "[", "self", ".", "_stage", "]", "\n", "if", "curb_start", "-", "x_agent", ">", "self", ".", "_config", "[", "'curb_detect_dist'", "]", ":", "\n", "                ", "return", "(", "5.1", ",", "5.2", ")", "\n", "", "return", "(", "curb_start", "-", "x_agent", ",", "curb_end", "-", "x_agent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.step": [[76, 188], ["min", "walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "walker2d_hurdle.Walker2dHurdleEnv.do_simulation", "min", "walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "walker2d_hurdle.Walker2dHurdleEnv._reset_external_force", "walker2d_hurdle.Walker2dHurdleEnv.collision_detection", "walker2d_hurdle.Walker2dHurdleEnv._ctrl_reward", "numpy.cos", "numpy.clip", "zip", "walker2d_hurdle.Walker2dHurdleEnv._get_obs", "numpy.random.rand", "walker2d_hurdle.Walker2dHurdleEnv._apply_external_force", "print", "max", "abs", "abs", "abs", "abs", "enumerate", "float", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.collision_detection", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "\n", "        ", "self", ".", "_interval_time", "+=", "1", "\n", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "y_before", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "foot_before", "=", "min", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "0", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "0", "]", ")", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "_get_curb_observation", "(", ")", "\n", "stage_before", "=", "self", ".", "_stage", "\n", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "y_after", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "foot_after", "=", "min", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "0", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "0", "]", ")", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "_get_curb_observation", "(", ")", "\n", "stage_after", "=", "self", ".", "_stage", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "\n", "", "done", "=", "False", "\n", "success", "=", "False", "\n", "pass_reward", "=", "0", "\n", "\n", "if", "stage_before", "<", "stage_after", "and", "stage_before", "<", "self", ".", "_num_curbs", "and", "not", "self", ".", "pass_state", "[", "stage_before", "]", ":", "\n", "            ", "if", "(", "x_after", "-", "self", ".", "_interval_start_pos", ")", "/", "self", ".", "dt", "<", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "1", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "'slow'", ")", "\n", "", "self", ".", "_interval_start_pos", "=", "x_after", "\n", "self", ".", "_interval_time", "=", "0", "\n", "\n", "pass_reward", "=", "self", ".", "_config", "[", "'pass_reward'", "]", "\n", "self", ".", "pass_state", "[", "stage_before", "]", "=", "True", "\n", "success", "=", "True", "\n", "self", ".", "_success_count", "+=", "1", "\n", "print", "(", "'success jump {} times'", ".", "format", "(", "self", ".", "_success_count", ")", ")", "\n", "if", "self", ".", "_success_count", "==", "5", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "'Done (success {} times)'", ".", "format", "(", "self", ".", "_success_count", ")", ")", "\n", "\n", "", "", "collision_penalty", "=", "0", "\n", "if", "self", ".", "collision_detection", "(", "'curb'", ")", ":", "\n", "            ", "collision_penalty", "=", "-", "self", ".", "_config", "[", "\"collision_penalty\"", "]", "\n", "if", "self", ".", "_config", "[", "\"done_when_collide\"", "]", "!=", "0", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "\"Collided\"", ")", "\n", "\n", "", "", "x_vel_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "jump_reward", "=", "0", "\n", "foot_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "angle", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "x_vel", "=", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", "-", "abs", "(", "x_vel", "-", "self", ".", "_config", "[", "\"x_vel_limit\"", "]", ")", "\n", "y_vel", "=", "(", "y_after", "-", "y_before", ")", "/", "self", ".", "dt", "\n", "y_vel", "=", "np", ".", "clip", "(", "y_vel", ",", "-", "self", ".", "_config", "[", "\"y_vel_limit\"", "]", ",", "self", ".", "_config", "[", "\"y_vel_limit\"", "]", ")", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "# reward", "\n", "x_vel_reward", "=", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "x_vel", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "\n", "for", "(", "c_pos", ",", "c_size", ")", "in", "zip", "(", "self", ".", "_curbs", "[", "'pos'", "]", ",", "self", ".", "_curbs", "[", "'size'", "]", ")", ":", "\n", "            ", "for", "i", ",", "x", "in", "enumerate", "(", "[", "c_pos", "-", "c_size", ",", "c_pos", ",", "c_pos", "+", "c_size", "]", ")", ":", "\n", "                ", "if", "foot_before", "<=", "x", "and", "x", "<", "foot_after", ":", "\n", "                    ", "pass_reward", "+=", "self", ".", "_config", "[", "\"pass_reward\"", "]", "*", "(", "i", "+", "1", ")", "/", "3", "\n", "", "if", "x_before", "<=", "x", "and", "x", "<", "x_after", ":", "\n", "                    ", "jump_reward", "+=", "self", ".", "_config", "[", "\"jump_reward\"", "]", "*", "y_vel", "\n", "\n", "", "", "", "if", "self", ".", "_config", "[", "\"sparse_reward\"", "]", "==", "0", ":", "\n", "            ", "reward", "=", "alive_reward", "+", "ctrl_reward", "+", "x_vel_reward", "+", "angle_reward", "+", "height_reward", "+", "pass_reward", "+", "collision_penalty", "+", "foot_reward", "+", "jump_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "float", "(", "success", ")", "\n", "\n", "", "done", "=", "done", "or", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"collision_penalty\"", ":", "collision_penalty", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"jump_reward\"", ":", "jump_reward", ",", "\n", "\"pass_reward\"", ":", "pass_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"x_vel_mean\"", ":", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", ",", "\n", "\"success_count\"", ":", "self", ".", "_success_count", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_obs": [[189, 195], ["walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "curb_obs", "=", "self", ".", "_get_curb_observation", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", ",", "curb_obs", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos": [[196, 198], ["walker2d_hurdle.Walker2dHurdleEnv._get_walker2d_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos"], ["", "def", "get_x_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_walker2d_pos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos": [[199, 201], ["None"], "methods", ["None"], ["", "def", "get_curb_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_ob_dict": [[202, 213], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", ",", "\n", "'curb'", ":", "ob", "[", ":", ",", "-", "2", ":", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "\n", "'acc'", ":", "ob", "[", "17", ":", "26", "]", ",", "\n", "'curb'", ":", "ob", "[", "-", "2", ":", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_sim_state": [[215, 219], ["walker2d_hurdle.Walker2dHurdleEnv.sim.get_state"], "methods", ["None"], ["", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "obstacle_pos", "=", "self", ".", "_curbs", "[", "'pos'", "]", "\n", "return", "{", "'state'", ":", "state", ",", "'obstacle_pos'", ":", "obstacle_pos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.reset_model": [[220, 242], ["walker2d_hurdle.Walker2dHurdleEnv._put_curbs", "walker2d_hurdle.Walker2dHurdleEnv.set_state", "range", "walker2d_hurdle.Walker2dHurdleEnv._get_obs", "int", "walker2d_hurdle.Walker2dHurdleEnv.do_simulation", "numpy.random.uniform", "numpy.random.uniform", "walker2d_hurdle.Walker2dHurdleEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._put_curbs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "_curbs", "=", "None", "\n", "self", ".", "_num_curbs", "=", "0", "\n", "self", ".", "_stage", "=", "0", "\n", "self", ".", "_post_curb_states", "=", "0", "\n", "self", ".", "_success_count", "=", "0", "\n", "self", ".", "_put_curbs", "(", ")", "\n", "self", ".", "_meta_policy_stage", "=", "-", "1", "\n", "self", ".", "_interval_time", "=", "0", "\n", "self", ".", "_interval_start_pos", "=", "0", "\n", "self", ".", "pass_state", "=", "[", "False", "]", "*", "self", ".", "_num_curbs", "\n", "\n", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._put_curbs": [[243, 258], ["len", "range", "walker2d_hurdle.Walker2dHurdleEnv._curbs[].append", "walker2d_hurdle.Walker2dHurdleEnv._curbs[].append", "walker2d_hurdle.Walker2dHurdleEnv.model.geom_name2id", "walker2d_hurdle.Walker2dHurdleEnv._curbs[].append", "walker2d_hurdle.Walker2dHurdleEnv._curbs[].append", "numpy.where", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_put_curbs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_curbs", "is", "None", ":", "\n", "            ", "geom_name_list", "=", "self", ".", "model", ".", "geom_names", "\n", "self", ".", "_curbs", "=", "{", "'pos'", ":", "[", "]", ",", "'size'", ":", "[", "]", "}", "\n", "self", ".", "_num_curbs", "=", "len", "(", "np", ".", "where", "(", "[", "'curb'", "in", "name", "for", "name", "in", "geom_name_list", "]", ")", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_curbs", ")", ":", "\n", "                ", "idx", "=", "self", ".", "model", ".", "geom_name2id", "(", "'curb{}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "r", "=", "self", ".", "_config", "[", "\"curb_randomness\"", "]", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", "=", "self", ".", "_curbs_x", "[", "i", "]", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "r", ",", "high", "=", "r", ")", "\n", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"curb_height\"", "]", "\n", "self", ".", "_curbs", "[", "'pos'", "]", ".", "append", "(", "self", ".", "model", ".", "geom_pos", "[", "idx", "]", "[", "0", "]", ")", "\n", "self", ".", "_curbs", "[", "'size'", "]", ".", "append", "(", "self", ".", "model", ".", "geom_size", "[", "idx", "]", "[", "0", "]", ")", "\n", "", "self", ".", "_curbs", "[", "'pos'", "]", ".", "append", "(", "1000", ")", "\n", "self", ".", "_curbs", "[", "'size'", "]", ".", "append", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_next_primitive": [[259, 266], ["walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv._get_curb_observation"], ["", "", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "self", ".", "_get_curb_observation", "(", ")", "\n", "# after successful jump", "\n", "if", "self", ".", "_stage", "!=", "self", ".", "_meta_policy_stage", ":", "\n", "            ", "self", ".", "_meta_policy_stage", "=", "self", ".", "_stage", "\n", "return", "'forward'", "\n", "", "return", "\"jump\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.__init__": [[19, 53], ["model_path.startswith", "mujoco_py.load_model_from_path", "mujoco_py.MjSim", "mujoco_env.MujocoEnv.sim.data.qpos.ravel().copy", "mujoco_env.MujocoEnv.sim.data.qvel.ravel().copy", "mujoco_env.MujocoEnv.step", "mujoco_env.MujocoEnv.model.actuator_ctrlrange.copy", "gym.spaces.Box", "gym.spaces.Box", "mujoco_env.MujocoEnv.seed", "os.path.join", "os.path.exists", "IOError", "int", "numpy.zeros", "numpy.ones", "os.path.dirname", "numpy.round", "mujoco_env.MujocoEnv.sim.data.qpos.ravel", "mujoco_env.MujocoEnv.sim.data.qvel.ravel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["def", "__init__", "(", "self", ",", "model_path", ",", "frame_skip", ")", ":", "\n", "        ", "if", "model_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "            ", "fullpath", "=", "model_path", "\n", "", "else", ":", "\n", "            ", "fullpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"assets\"", ",", "model_path", ")", "\n", "", "if", "not", "path", ".", "exists", "(", "fullpath", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"File %s does not exist\"", "%", "fullpath", ")", "\n", "", "self", ".", "frame_skip", "=", "frame_skip", "\n", "self", ".", "model", "=", "mujoco_py", ".", "load_model_from_path", "(", "fullpath", ")", "\n", "self", ".", "sim", "=", "mujoco_py", ".", "MjSim", "(", "self", ".", "model", ")", "\n", "self", ".", "data", "=", "self", ".", "sim", ".", "data", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "metadata", "=", "{", "\n", "'render.modes'", ":", "[", "'human'", ",", "'rgb_array'", "]", ",", "\n", "'video.frames_per_second'", ":", "int", "(", "np", ".", "round", "(", "1.0", "/", "self", ".", "dt", ")", ")", "\n", "}", "\n", "\n", "self", ".", "init_qpos", "=", "self", ".", "sim", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "init_qvel", "=", "self", ".", "sim", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "observation", ",", "_reward", ",", "done", ",", "_info", "=", "self", ".", "step", "(", "np", ".", "zeros", "(", "self", ".", "model", ".", "nu", ")", ")", "\n", "assert", "not", "done", "\n", "self", ".", "obs_dim", "=", "observation", ".", "size", "\n", "\n", "bounds", "=", "self", ".", "model", ".", "actuator_ctrlrange", ".", "copy", "(", ")", "\n", "low", "=", "bounds", "[", ":", ",", "0", "]", "\n", "high", "=", "bounds", "[", ":", ",", "1", "]", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "self", ".", "obs_dim", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", ",", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.seed": [[54, 57], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.reset_model": [[61, 67], ["None"], "methods", ["None"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset the robot degrees of freedom (qpos and qvel).\n        Implement this in each subclass.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.viewer_setup": [[68, 75], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This method is called when the viewer is initialized and after every reset\n        Optionally implement this method, if you need to tinker with camera position\n        and so forth.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.reset": [[78, 84], ["mujoco_env.MujocoEnv.sim.reset", "mujoco_env.MujocoEnv.reset_model", "mujoco_env.MujocoEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.reset_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.viewer_setup"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim", ".", "reset", "(", ")", "\n", "ob", "=", "self", ".", "reset_model", "(", ")", "\n", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer_setup", "(", ")", "\n", "", "return", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state": [[85, 92], ["mujoco_env.MujocoEnv.sim.get_state", "mujoco_py.MjSimState", "mujoco_env.MujocoEnv.sim.set_state", "mujoco_env.MujocoEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward"], ["", "def", "set_state", "(", "self", ",", "qpos", ",", "qvel", ")", ":", "\n", "        ", "assert", "qpos", ".", "shape", "==", "(", "self", ".", "model", ".", "nq", ",", ")", "and", "qvel", ".", "shape", "==", "(", "self", ".", "model", ".", "nv", ",", ")", "\n", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "old_state", ".", "time", ",", "qpos", ",", "qvel", ",", "\n", "old_state", ".", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.dt": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "opt", ".", "timestep", "*", "self", ".", "frame_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation": [[97, 101], ["range", "mujoco_env.MujocoEnv.sim.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "do_simulation", "(", "self", ",", "ctrl", ",", "n_frames", ")", ":", "\n", "        ", "self", ".", "sim", ".", "data", ".", "ctrl", "[", ":", "]", "=", "ctrl", "\n", "for", "_", "in", "range", "(", "n_frames", ")", ":", "\n", "            ", "self", ".", "sim", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.render": [[102, 112], ["mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer().read_pixels", "mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "# window size used for old mujoco-py:", "\n", "width", ",", "height", "=", "500", ",", "500", "\n", "data", "=", "self", ".", "_get_viewer", "(", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "False", ")", "\n", "# original image is upside-down, so flip it", "\n", "return", "data", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", ")", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.close": [[113, 117], ["None"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "# self.viewer.finish()", "\n", "            ", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv._get_viewer": [[118, 123], ["mujoco_py.MjViewer", "mujoco_env.MujocoEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.viewer_setup"], ["", "", "def", "_get_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "mujoco_py", ".", "MjViewer", "(", "self", ".", "sim", ")", "\n", "self", ".", "viewer_setup", "(", ")", "\n", "", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.get_body_com": [[124, 126], ["mujoco_env.MujocoEnv.data.get_body_xpos"], "methods", ["None"], ["", "def", "get_body_com", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "get_body_xpos", "(", "body_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.state_vector": [[127, 131], ["numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "state_vector", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.__init__": [[9, 48], ["gym.envs.mujoco.jaco.JacoEnv.__init__", "jaco_hit.JacoHitEnv._config.update", "numpy.array", "jaco_hit.JacoHitEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_rot", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "with_rot", "=", "with_rot", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "1", ",", "\n", "\"hit_reward\"", ":", "100", ",", "\n", "\"target_reward\"", ":", "200", ",", "\n", "\"return_reward\"", ":", "500", ",", "\n", "\"success_reward\"", ":", "1000", ",", "\n", "\"max_height\"", ":", "2", ",", "\n", "\"hit_height\"", ":", "1.0", ",", "\n", "\"return_height\"", ":", "0.8", ",", "\n", "\"target_height\"", ":", "1.2", ",", "\n", "\"hit_threshold\"", ":", "0.1", ",", "\n", "\"target_threshold\"", ":", "0.2", ",", "\n", "\"return_threshold\"", ":", "0.1", ",", "\n", "\"random_throw\"", ":", "0.1", ",", "\n", "\"random_box\"", ":", "0.1", ",", "\n", "\"init_randomness\"", ":", "0.005", ",", "\n", "\"box_size\"", ":", "0.04", ",", "\n", "\"random_steps\"", ":", "10", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "_hit_box", "=", "False", "\n", "self", ".", "_hit_target", "=", "False", "\n", "self", ".", "_min_dist_target", "=", "10", "\n", "self", ".", "_target_pos", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "_return_box_pos", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.3", ",", "self", ".", "_config", "[", "\"return_height\"", "]", "]", ")", "\n", "self", ".", "_t", "=", "0", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"hit_reward\"", ",", "\"x_vel_reward\"", ",", "\"return_reward\"", ",", "\n", "\"success\"", ",", "\"success_reward\"", ",", "\"target_reward\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"jaco_hit.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.step": [[49, 128], ["print", "jaco_hit.JacoHitEnv.do_simulation", "jaco_hit.JacoHitEnv._get_box_pos", "jaco_hit.JacoHitEnv._get_obs", "jaco_hit.JacoHitEnv._ctrl_reward", "jaco_hit.JacoHitEnv._get_distance_hand", "jaco_hit.JacoHitEnv._get_pos", "jaco_hit.JacoHitEnv._get_box_pos", "jaco_hit.JacoHitEnv._get_box_pos", "jaco_hit.JacoHitEnv._get_distance", "min", "numpy.linalg.norm", "min", "abs", "print", "abs", "print", "print", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_distance_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_distance", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "print", "(", "'target pos'", ",", "self", ".", "_get_pos", "(", "'target'", ")", ",", "self", ".", "_get_box_pos", "(", ")", ")", "\n", "self", ".", "_t", "+=", "1", "\n", "x_before", "=", "self", ".", "_get_box_pos", "(", ")", "[", "0", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "box_pos", "=", "self", ".", "_get_box_pos", "(", ")", "\n", "x_after", "=", "box_pos", "[", "0", "]", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "done", "=", "False", "\n", "success", "=", "False", "\n", "hit_reward", "=", "0", "\n", "x_vel_reward", "=", "0", "\n", "return_reward", "=", "0", "\n", "target_reward", "=", "0", "\n", "success_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "dist_hand", "=", "self", ".", "_get_distance_hand", "(", "'box'", ")", "\n", "box_z", "=", "box_pos", "[", "2", "]", "\n", "on_ground", "=", "box_z", "<", "self", ".", "_config", "[", "\"box_size\"", "]", "+", "0.03", "\n", "hit", "=", "dist_hand", "<", "0.12", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "\n", "# hit a ball", "\n", "if", "hit", "and", "not", "self", ".", "_hit_box", ":", "\n", "            ", "hit_reward", "=", "self", ".", "_config", "[", "\"hit_reward\"", "]", "*", "(", "1", "-", "abs", "(", "box_z", "-", "self", ".", "_config", "[", "\"hit_height\"", "]", ")", ")", "\n", "if", "abs", "(", "box_z", "-", "self", ".", "_config", "[", "\"hit_height\"", "]", ")", "<", "self", ".", "_config", "[", "\"hit_threshold\"", "]", ":", "\n", "                ", "self", ".", "_hit_box", "=", "True", "\n", "hit_reward", "+=", "self", ".", "_config", "[", "\"hit_reward\"", "]", "\n", "# print('hit')", "\n", "", "else", ":", "\n", "                ", "done", "=", "True", "\n", "print", "(", "'hit, but fail'", ")", "\n", "\n", "# hit a target", "\n", "", "", "if", "self", ".", "_hit_box", "and", "not", "self", ".", "_hit_target", ":", "\n", "            ", "x_vel_reward", "=", "-", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "abs", "(", "x_vel", ")", "\n", "dist_target", "=", "self", ".", "_get_distance", "(", "'target'", ",", "'box'", ")", "\n", "self", ".", "_min_dist_target", "=", "min", "(", "self", ".", "_min_dist_target", ",", "dist_target", ")", "\n", "\n", "if", "dist_target", "<", "self", ".", "_config", "[", "\"target_threshold\"", "]", ":", "\n", "                ", "print", "(", "'hit target'", ")", "\n", "self", ".", "_hit_target", "=", "True", "\n", "target_reward", "=", "self", ".", "_config", "[", "\"target_reward\"", "]", "\n", "done", "=", "success", "=", "True", "# temporary: finish after hitting traget", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "\n", "", "", "if", "self", ".", "_hit_target", ":", "\n", "            ", "dist_hit_pos", "=", "np", ".", "linalg", ".", "norm", "(", "box_pos", "-", "self", ".", "_return_box_pos", ")", "\n", "self", ".", "_min_dist_hit_pos", "=", "min", "(", "self", ".", "_min_dist_hit_pos", ",", "dist_hit_pos", ")", "\n", "\n", "if", "dist_hit_pos", "<", "self", ".", "_config", "[", "\"return_threshold\"", "]", ":", "\n", "                ", "print", "(", "'return correctly'", ")", "\n", "success", "=", "True", "\n", "success_reward", "=", "self", ".", "_config", "[", "\"success_reward\"", "]", "\n", "done", "=", "True", "\n", "return_reward", "=", "self", ".", "_config", "[", "\"return_reward\"", "]", "\n", "\n", "# fail", "\n", "", "", "if", "on_ground", ":", "\n", "            ", "done", "=", "True", "\n", "if", "self", ".", "_hit_box", "and", "not", "self", ".", "_hit_target", ":", "\n", "                ", "target_reward", "=", "self", ".", "_config", "[", "\"target_reward\"", "]", "*", "(", "2", "-", "self", ".", "_min_dist_target", ")", "/", "2", "\n", "", "if", "self", ".", "_hit_target", ":", "\n", "                ", "return_reward", "=", "self", ".", "_config", "[", "\"return_reward\"", "]", "*", "(", "2", "-", "self", ".", "_min_dist_hit_pos", ")", "/", "2", "\n", "\n", "", "", "reward", "=", "ctrl_reward", "+", "hit_reward", "+", "x_vel_reward", "+", "target_reward", "+", "return_reward", "+", "success_reward", "\n", "info", "=", "{", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"hit_reward\"", ":", "hit_reward", ",", "\n", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"target_reward\"", ":", "target_reward", ",", "\n", "\"return_reward\"", ":", "return_reward", ",", "\n", "\"success_reward\"", ":", "success_reward", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv._randomize_box": [[129, 141], ["jaco_hit.JacoHitEnv.model.body_name2id", "jaco_hit.JacoHitEnv.do_simulation", "numpy.random.uniform", "jaco_hit.JacoHitEnv.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "_randomize_box", "(", "self", ")", ":", "\n", "# set initial force", "\n", "        ", "force", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "3", ")", "*", "self", ".", "_config", "[", "\"random_throw\"", "]", "\n", "\n", "# apply force", "\n", "box_body_idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'box'", ")", "\n", "xfrc", "=", "self", ".", "data", ".", "xfrc_applied", "\n", "xfrc", "[", "box_body_idx", ",", ":", "3", "]", "=", "force", "\n", "self", ".", "do_simulation", "(", "self", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "# reset force", "\n", "xfrc", "[", "box_body_idx", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv._get_obs": [[142, 152], ["jaco_hit.JacoHitEnv._get_hand_pos", "numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_hand_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "            ", "qpos", "=", "qpos", "[", ":", "12", "]", "\n", "qvel", "=", "qvel", "[", ":", "12", "]", "\n", "qacc", "=", "qacc", "[", ":", "12", "]", "\n", "", "hand_pos", "=", "self", ".", "_get_hand_pos", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "np", ".", "clip", "(", "qvel", ",", "-", "30", ",", "30", ")", ",", "qacc", ",", "hand_pos", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.get_ob_dict": [[153, 177], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "                ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "24", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "24", ":", "36", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "36", ":", "39", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", ",", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", ":", ",", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", ":", ",", "46", ":", "49", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_with_rot", "==", "0", ":", "\n", "                ", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "24", "]", ",", "\n", "'acc'", ":", "ob", "[", "24", ":", "36", "]", ",", "\n", "'hand'", ":", "ob", "[", "36", ":", "39", "]", ",", "\n", "}", "\n", "", "return", "{", "\n", "'joint'", ":", "ob", "[", ":", "31", "]", ",", "\n", "'acc'", ":", "ob", "[", "31", ":", "46", "]", ",", "\n", "'hand'", ":", "ob", "[", "46", ":", "49", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.reset_model": [[179, 214], ["numpy.random.uniform", "jaco_hit.JacoHitEnv.set_state", "jaco_hit.JacoHitEnv.model.body_name2id", "jaco_hit.JacoHitEnv._get_pos", "numpy.array", "range", "jaco_hit.JacoHitEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "numpy.random.uniform", "int", "jaco_hit.JacoHitEnv.do_simulation", "jaco_hit.JacoHitEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "_t", "=", "0", "\n", "# print('reset called')", "\n", "r", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "\n", "# set box's initial position", "\n", "r", "=", "self", ".", "_config", "[", "\"random_box\"", "]", "\n", "qpos", "[", "9", ":", "12", "]", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.3", ",", "self", ".", "_config", "[", "\"max_height\"", "]", "]", ")", "+", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "3", ")", "\n", "\n", "# set box's initial veolicty", "\n", "r", "=", "self", ".", "_config", "[", "\"random_throw\"", "]", "\n", "qvel", "[", "9", ":", "12", "]", "+=", "np", ".", "random", ".", "uniform", "(", "-", "r", ",", "r", ",", "3", ")", "\n", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "# set target", "\n", "idx", "=", "self", ".", "model", ".", "body_name2id", "(", "'target'", ")", "\n", "self", ".", "model", ".", "body_pos", "[", "idx", "]", "[", "2", "]", "=", "self", ".", "_config", "[", "\"target_height\"", "]", "\n", "\n", "#self._randomize_box()", "\n", "self", ".", "_hit_box", "=", "False", "\n", "self", ".", "_hit_target", "=", "False", "\n", "self", ".", "_min_dist_target", "=", "5", "\n", "self", ".", "_target_pos", "=", "self", ".", "_get_pos", "(", "'target'", ")", "\n", "self", ".", "_min_dist_hit_pos", "=", "5", "\n", "self", ".", "_return_box_pos", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.3", ",", "self", ".", "_config", "[", "\"return_height\"", "]", "]", ")", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.is_terminate": [[215, 221], ["env.unwrapped._get_pos", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "t_pos", "=", "env", ".", "unwrapped", ".", "_get_pos", "(", "'target'", ")", "\n", "b_pos", "=", "ob", "[", "9", ":", "12", "]", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "t_pos", "-", "b_pos", ")", "<", "0.1", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.is_boundary_hit_rear": [[222, 231], ["jaco_hit.JacoHitEnv._get_box_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco.JacoEnv._get_box_pos"], ["", "def", "is_boundary_hit_rear", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_t", "<=", "20", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "box_z", "=", "self", ".", "_get_box_pos", "(", ")", "[", "2", "]", "\n", "if", "self", ".", "_hit_box", "or", "box_z", "<=", "0.9", ":", "\n", "                ", "return", "-", "1", "\n", "", "else", ":", "\n", "                ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.jaco_hit.JacoHitEnv.viewer_setup": [[232, 243], ["None"], "methods", ["None"], ["", "", "", "def", "viewer_setup", "(", "self", ")", ":", "\n", "# self.viewer.cam.trackbodyid = 1", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "# self.viewer.cam.distance = self.model.stat.extent * 2", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "4", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "100", "\n", "# self.viewer.cam.azimuth = 90", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "0", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "1", "]", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.__init__": [[9, 36], ["gym.envs.mujoco.walker2d.Walker2dEnv.__init__", "walker2d_balance.Walker2dBalanceEnv._config.update", "numpy.random.seed", "walker2d_balance.Walker2dBalanceEnv.ob_shape.keys", "gym.envs.mujoco.mujoco_env.MujocoEnv.__init__", "gym.utils.EzPickle.__init__", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# config", "\n", "self", ".", "_config", ".", "update", "(", "{", "\n", "\"x_vel_reward\"", ":", "1", ",", "\n", "\"alive_reward\"", ":", "1", ",", "\n", "\"angle_reward\"", ":", "0.1", ",", "\n", "\"foot_reward\"", ":", "0", ",", "\n", "\"height_reward\"", ":", "0.5", ",", "\n", "\"random_steps\"", ":", "10", ",", "\n", "\"apply_force\"", ":", "400", ",", "\n", "\"prob_apply_force\"", ":", "0.1", ",", "\n", "}", ")", "\n", "\n", "# state", "\n", "self", ".", "t", "=", "0", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "self", ".", "pivot", "=", "np", ".", "random", ".", "randint", "(", "300", ")", "+", "50", "\n", "# env info", "\n", "self", ".", "reward_type", "+=", "[", "\"x_vel_reward\"", ",", "\"alive_reward\"", ",", "\"angle_reward\"", ",", "\n", "\"foot_reward\"", ",", "\"height_reward\"", ",", "\"success\"", ",", "\n", "\"x_vel_mean\"", ",", "\"height_mean\"", ",", "\"delta_h_mean\"", ",", "\"nz_mean\"", "]", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "\"walker_v1.xml\"", ",", "4", ")", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.step": [[37, 96], ["walker2d_balance.Walker2dBalanceEnv.do_simulation", "walker2d_balance.Walker2dBalanceEnv._ctrl_reward", "numpy.cos", "walker2d_balance.Walker2dBalanceEnv._reset_external_force", "walker2d_balance.Walker2dBalanceEnv._get_obs", "max", "abs", "abs", "numpy.abs", "abs", "numpy.random.rand", "walker2d_balance.Walker2dBalanceEnv._apply_external_force", "walker2d_balance.Walker2dBalanceEnv.do_simulation", "walker2d_balance.Walker2dBalanceEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._reset_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._apply_external_force", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "x_before", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_before", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "x_after", "=", "self", ".", "data", ".", "qpos", "[", "0", "]", "\n", "right_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "5", "]", "\n", "left_foot_after", "=", "self", ".", "data", ".", "qpos", "[", "8", "]", "\n", "\n", "done", "=", "False", "\n", "x_vel_reward", "=", "0", "\n", "alive_reward", "=", "0", "\n", "angle_reward", "=", "0", "\n", "height_reward", "=", "0", "\n", "foot_reward", "=", "0", "\n", "ctrl_reward", "=", "self", ".", "_ctrl_reward", "(", "a", ")", "\n", "\n", "# reward", "\n", "height", "=", "self", ".", "data", ".", "qpos", "[", "1", "]", "\n", "angle", "=", "self", ".", "data", ".", "qpos", "[", "2", "]", "\n", "delta_h", "=", "self", ".", "data", ".", "body_xpos", "[", "1", ",", "2", "]", "-", "max", "(", "self", ".", "data", ".", "body_xpos", "[", "4", ",", "2", "]", ",", "self", ".", "data", ".", "body_xpos", "[", "7", ",", "2", "]", ")", "\n", "nz", "=", "np", ".", "cos", "(", "angle", ")", "\n", "x_vel", "=", "(", "x_after", "-", "x_before", ")", "/", "self", ".", "dt", "\n", "right_foot_vel", "=", "abs", "(", "right_foot_after", "-", "right_foot_before", ")", "/", "self", ".", "dt", "\n", "left_foot_vel", "=", "abs", "(", "left_foot_after", "-", "left_foot_before", ")", "/", "self", ".", "dt", "\n", "\n", "x_vel_reward", "=", "-", "self", ".", "_config", "[", "\"x_vel_reward\"", "]", "*", "np", ".", "abs", "(", "x_vel", ")", "\n", "alive_reward", "=", "self", ".", "_config", "[", "\"alive_reward\"", "]", "\n", "angle_reward", "=", "self", ".", "_config", "[", "\"angle_reward\"", "]", "*", "nz", "\n", "height_reward", "=", "-", "self", ".", "_config", "[", "\"height_reward\"", "]", "*", "abs", "(", "1.1", "-", "delta_h", ")", "\n", "foot_reward", "=", "-", "self", ".", "_config", "[", "\"foot_reward\"", "]", "*", "(", "right_foot_vel", "+", "left_foot_vel", ")", "\n", "reward", "=", "x_vel_reward", "+", "angle_reward", "+", "height_reward", "+", "ctrl_reward", "+", "alive_reward", "+", "foot_reward", "\n", "\n", "# fail", "\n", "done", "=", "height", "<", "self", ".", "_config", "[", "\"min_height\"", "]", "\n", "self", ".", "t", "+=", "1", "\n", "# print(self.t)", "\n", "success", "=", "not", "done", "and", "self", ".", "t", ">=", "1000", "\n", "if", "success", ":", "done", "=", "True", "\n", "\n", "self", ".", "_reset_external_force", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "_config", "[", "\"prob_apply_force\"", "]", ":", "\n", "            ", "self", ".", "_apply_external_force", "(", ")", "\n", "if", "self", ".", "t", ">", "1", ":", "# to prevent mujoco initialization error", "\n", "                ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "\n", "", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "info", "=", "{", "\"alive_reward\"", ":", "alive_reward", ",", "\n", "\"x_vel_reward\"", ":", "x_vel_reward", ",", "\n", "\"ctrl_reward\"", ":", "ctrl_reward", ",", "\n", "\"angle_reward\"", ":", "angle_reward", ",", "\n", "\"height_reward\"", ":", "height_reward", ",", "\n", "\"foot_reward\"", ":", "foot_reward", ",", "\n", "\"delta_h_mean\"", ":", "delta_h", ",", "\n", "\"nz_mean\"", ":", "nz", ",", "\n", "\"height_mean\"", ":", "height", ",", "\n", "\"success\"", ":", "success", "}", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv._get_obs": [[97, 102], ["numpy.concatenate().ravel", "numpy.concatenate", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", "\n", "qacc", "=", "self", ".", "data", ".", "qacc", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", "[", "1", ":", "]", ",", "np", ".", "clip", "(", "qvel", ",", "-", "10", ",", "10", ")", ",", "qacc", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_ob_dict": [[103, 108], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "'acc'", ":", "ob", "[", "17", ":", "26", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_sim_state": [[109, 113], ["walker2d_balance.Walker2dBalanceEnv.sim.get_state"], "methods", ["None"], ["", "", "def", "get_sim_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "curb_obs", "=", "-", "1", "\n", "return", "{", "'state'", ":", "state", ",", "'obstacle_pos'", ":", "curb_obs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.reset_model": [[114, 136], ["walker2d_balance.Walker2dBalanceEnv.set_state", "walker2d_balance.Walker2dBalanceEnv._set_pos", "walker2d_balance.Walker2dBalanceEnv._set_pos", "range", "walker2d_balance.Walker2dBalanceEnv._get_obs", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.randint", "int", "walker2d_balance.Walker2dBalanceEnv.do_simulation", "walker2d_balance.Walker2dBalanceEnv.unwrapped.action_space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._set_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "\n", "        ", "init_randomness", "=", "self", ".", "_config", "[", "\"init_randomness\"", "]", "\n", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nq", ")", "\n", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "init_randomness", ",", "\n", "high", "=", "init_randomness", ",", "\n", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n", "# init target", "\n", "self", ".", "_set_pos", "(", "'target_forward'", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "_set_pos", "(", "'target_backward'", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "pivot", "=", "np", ".", "random", ".", "randint", "(", "300", ")", "+", "50", "\n", "\n", "# more perturb", "\n", "for", "_", "in", "range", "(", "int", "(", "self", ".", "_config", "[", "\"random_steps\"", "]", ")", ")", ":", "\n", "            ", "self", ".", "do_simulation", "(", "self", ".", "unwrapped", ".", "action_space", ".", "sample", "(", ")", ",", "self", ".", "frame_skip", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.is_terminate": [[137, 151], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "success_length", "=", "100", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "self", ".", "count_evaluate", "=", "0", "\n", "self", ".", "success", "=", "True", "\n", "", "height", "=", "ob", "[", "0", "]", "\n", "angle", "=", "ob", "[", "1", "]", "\n", "success", "=", "height", ">", "0.8", "\n", "\n", "if", "success", ":", "\n", "            ", "self", ".", "count_evaluate", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "success", "=", "False", "\n", "\n", "", "return", "self", ".", "success", "and", "self", ".", "count_evaluate", ">=", "success_length", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.is_boundary_balance_front_for_patrol": [[152, 155], ["None"], "methods", ["None"], ["", "def", "is_boundary_balance_front_for_patrol", "(", "self", ")", ":", "\n", "# print('t and pivot:', self.t,  self.pivot)", "\n", "        ", "return", "0", "if", "self", ".", "t", ">", "self", ".", "pivot", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.is_boundary_balance_rear_for_patrol": [[156, 158], ["None"], "methods", ["None"], ["", "def", "is_boundary_balance_rear_for_patrol", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.set_curbs_x_randomness_for_irl": [[159, 161], ["None"], "methods", ["None"], ["", "def", "set_curbs_x_randomness_for_irl", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", "\n", "", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_balance.Walker2dBalanceEnv.get_curbs_x_randomness": [[161, 163], ["None"], "methods", ["None"], ["", "def", "get_curbs_x_randomness", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", ",", "-", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.__init__": [[7, 22], ["walker2d.Walker2dEnv.ob_shape.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# config", "\n", "        ", "self", ".", "_config", "=", "{", "\n", "\"random_steps\"", ":", "0", ",", "\n", "\"apply_force\"", ":", "0", ",", "\n", "\"prob_apply_force\"", ":", "0.2", ",", "\n", "\"ctrl_reward\"", ":", "1e-3", ",", "\n", "\"init_randomness\"", ":", "0.01", ",", "\n", "\"min_height\"", ":", "0.8", ",", "\n", "}", "\n", "\n", "# env info", "\n", "self", ".", "reward_type", "=", "[", "\"ctrl_reward\"", "]", "\n", "self", ".", "ob_shape", "=", "{", "\"joint\"", ":", "[", "17", "]", ",", "\"acc\"", ":", "[", "9", "]", "}", "\n", "self", ".", "ob_type", "=", "self", ".", "ob_shape", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._ctrl_reward": [[23, 26], ["numpy.square().sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "_ctrl_reward", "(", "self", ",", "a", ")", ":", "\n", "        ", "ctrl_reward", "=", "-", "self", ".", "_config", "[", "\"ctrl_reward\"", "]", "*", "np", ".", "square", "(", "a", ")", ".", "sum", "(", ")", "\n", "return", "ctrl_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv._get_walker2d_pos": [[27, 34], ["min", "walker2d.Walker2dEnv.get_body_com", "walker2d.Walker2dEnv.get_body_com", "walker2d.Walker2dEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "_get_walker2d_pos", "(", "self", ")", ":", "\n", "# print(self.get_body_com(\"torso\")[0],", "\n", "#            self.get_body_com(\"foot\")[0],", "\n", "#            self.get_body_com(\"foot_left\")[0])", "\n", "        ", "return", "min", "(", "self", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", ",", "\n", "self", ".", "get_body_com", "(", "\"foot\"", ")", "[", "0", "]", ",", "\n", "self", ".", "get_body_com", "(", "\"foot_left\"", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.get_ob_dict": [[35, 40], ["len"], "methods", ["None"], ["", "def", "get_ob_dict", "(", "self", ",", "ob", ")", ":", "\n", "        ", "if", "len", "(", "ob", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", ",", ":", "17", "]", ",", "'acc'", ":", "ob", "[", ":", ",", "17", ":", "26", "]", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'joint'", ":", "ob", "[", ":", "17", "]", ",", "'acc'", ":", "ob", "[", "17", ":", "26", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.viewer_setup": [[41, 47], ["walker2d.Walker2dEnv._get_pos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv._get_pos"], ["", "", "def", "viewer_setup", "(", "self", ")", ":", "\n", "# self.viewer.cam.trackbodyid = 1 # tracking does not work in mujoco-py 1.5.0", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "8", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", ":", "]", "=", "self", ".", "_get_pos", "(", "'torso'", ")", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "10", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "60", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.get_next_primitive": [[50, 56], ["None"], "methods", ["None"], ["", "def", "get_next_primitive", "(", "self", ",", "ob", ",", "prev_primitive", ")", ":", "\n", "        ", "\"\"\" Return the next primitive. Implement this in each subclass.\n        Returns:\n            String of the primitive i.e. Walker2dJump-v1\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate": [[57, 59], ["None"], "methods", ["None"], ["", "def", "is_terminate", "(", "self", ",", "ob", ",", "init", "=", "False", ",", "env", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.ContactDetector.__init__": [[59, 62], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.ContactDetector.BeginContact": [[62, 68], ["range"], "methods", ["None"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "lander", "==", "contact", ".", "fixtureA", ".", "body", "or", "self", ".", "env", ".", "lander", "==", "contact", ".", "fixtureB", ".", "body", ":", "\n", "            ", "self", ".", "env", ".", "game_over", "=", "True", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "env", ".", "legs", "[", "i", "]", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "self", ".", "env", ".", "legs", "[", "i", "]", ".", "ground_contact", "=", "True", "\n", "", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.ContactDetector.EndContact": [[68, 72], ["range"], "methods", ["None"], ["", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "env", ".", "legs", "[", "i", "]", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "self", ".", "env", ".", "legs", "[", "i", "]", ".", "ground_contact", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander.__init__": [[81, 105], ["lunar_lander.LunarLander.seed", "Box2D.b2World", "numpy.array", "gym.spaces.Box", "lunar_lander.LunarLander.reset", "gym.spaces.Box", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", ")", "\n", "self", ".", "moon", "=", "None", "\n", "self", ".", "lander", "=", "None", "\n", "self", ".", "particles", "=", "[", "]", "\n", "\n", "self", ".", "prev_reward", "=", "None", "\n", "\n", "high", "=", "np", ".", "array", "(", "[", "np", ".", "inf", "]", "*", "8", ")", "# useful range is -1 .. +1, but spikes can be higher", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "high", ",", "high", ")", "\n", "\n", "if", "self", ".", "continuous", ":", "\n", "# Action is two floats [main engine, left-right engines].", "\n", "# Main engine: -1..0 off, 0..+1 throttle from 50% to 100% power. Engine can't work with less than 50% power.", "\n", "# Left-right:  -1.0..-0.5 fire left engine, +0.5..+1.0 fire right engine, -0.5..0.5 off", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "-", "1", ",", "+", "1", ",", "(", "2", ",", ")", ")", "\n", "", "else", ":", "\n", "# Nop, fire left engine, main engine, right engine", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander.seed": [[106, 109], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander._destroy": [[110, 120], ["lunar_lander.LunarLander._clean_particles", "lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.world.DestroyBody"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander._clean_particles"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "moon", ":", "return", "\n", "self", ".", "world", ".", "contactListener", "=", "None", "\n", "self", ".", "_clean_particles", "(", "True", ")", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "moon", ")", "\n", "self", ".", "moon", "=", "None", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "lander", ")", "\n", "self", ".", "lander", "=", "None", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "legs", "[", "0", "]", ")", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "legs", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander.reset": [[121, 215], ["lunar_lander.LunarLander._destroy", "lunar_lander.ContactDetector", "lunar_lander.LunarLander.np_random.uniform", "lunar_lander.LunarLander.world.CreateStaticBody", "range", "lunar_lander.LunarLander.world.CreateDynamicBody", "lunar_lander.LunarLander.lander.ApplyForceToCenter", "lunar_lander.LunarLander.moon.CreateEdgeFixture", "lunar_lander.LunarLander.sky_polys.append", "lunar_lander.LunarLander.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "lunar_lander.LunarLander.world.CreateJoint", "lunar_lander.LunarLander.legs.append", "lunar_lander.LunarLander.step", "range", "range", "Box2D.b2.edgeShape", "Box2D.b2.fixtureDef", "lunar_lander.LunarLander.np_random.uniform", "lunar_lander.LunarLander.np_random.uniform", "Box2D.b2.fixtureDef", "numpy.array", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._destroy", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "world", ".", "contactListener_keepref", "=", "ContactDetector", "(", "self", ")", "\n", "self", ".", "world", ".", "contactListener", "=", "self", ".", "world", ".", "contactListener_keepref", "\n", "self", ".", "game_over", "=", "False", "\n", "self", ".", "prev_shaping", "=", "None", "\n", "\n", "W", "=", "VIEWPORT_W", "/", "SCALE", "\n", "H", "=", "VIEWPORT_H", "/", "SCALE", "\n", "\n", "# terrain", "\n", "CHUNKS", "=", "11", "\n", "height", "=", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "H", "/", "2", ",", "size", "=", "(", "CHUNKS", "+", "1", ",", ")", ")", "\n", "chunk_x", "=", "[", "W", "/", "(", "CHUNKS", "-", "1", ")", "*", "i", "for", "i", "in", "range", "(", "CHUNKS", ")", "]", "\n", "self", ".", "helipad_x1", "=", "chunk_x", "[", "CHUNKS", "//", "2", "-", "1", "]", "\n", "self", ".", "helipad_x2", "=", "chunk_x", "[", "CHUNKS", "//", "2", "+", "1", "]", "\n", "self", ".", "helipad_y", "=", "H", "/", "4", "\n", "height", "[", "CHUNKS", "//", "2", "-", "2", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "-", "1", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "+", "0", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "+", "1", "]", "=", "self", ".", "helipad_y", "\n", "height", "[", "CHUNKS", "//", "2", "+", "2", "]", "=", "self", ".", "helipad_y", "\n", "smooth_y", "=", "[", "0.33", "*", "(", "height", "[", "i", "-", "1", "]", "+", "height", "[", "i", "+", "0", "]", "+", "height", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "CHUNKS", ")", "]", "\n", "\n", "self", ".", "moon", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "shapes", "=", "edgeShape", "(", "vertices", "=", "[", "(", "0", ",", "0", ")", ",", "(", "W", ",", "0", ")", "]", ")", ")", "\n", "self", ".", "sky_polys", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "CHUNKS", "-", "1", ")", ":", "\n", "            ", "p1", "=", "(", "chunk_x", "[", "i", "]", ",", "smooth_y", "[", "i", "]", ")", "\n", "p2", "=", "(", "chunk_x", "[", "i", "+", "1", "]", ",", "smooth_y", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "moon", ".", "CreateEdgeFixture", "(", "\n", "vertices", "=", "[", "p1", ",", "p2", "]", ",", "\n", "density", "=", "0", ",", "\n", "friction", "=", "0.1", ")", "\n", "self", ".", "sky_polys", ".", "append", "(", "[", "p1", ",", "p2", ",", "(", "p2", "[", "0", "]", ",", "H", ")", ",", "(", "p1", "[", "0", "]", ",", "H", ")", "]", ")", "\n", "\n", "", "self", ".", "moon", ".", "color1", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "self", ".", "moon", ".", "color2", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "\n", "initial_y", "=", "VIEWPORT_H", "/", "SCALE", "\n", "self", ".", "lander", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ",", "initial_y", ")", ",", "\n", "angle", "=", "0.0", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "/", "SCALE", ",", "y", "/", "SCALE", ")", "for", "x", ",", "y", "in", "LANDER_POLY", "]", ")", ",", "\n", "density", "=", "5.0", ",", "\n", "friction", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0010", ",", "\n", "maskBits", "=", "0x001", ",", "# collide only with ground", "\n", "restitution", "=", "0.0", ")", "# 0.99 bouncy", "\n", ")", "\n", "self", ".", "lander", ".", "color1", "=", "(", "0.5", ",", "0.4", ",", "0.9", ")", "\n", "self", ".", "lander", ".", "color2", "=", "(", "0.3", ",", "0.3", ",", "0.5", ")", "\n", "self", ".", "lander", ".", "ApplyForceToCenter", "(", "(", "\n", "self", ".", "np_random", ".", "uniform", "(", "-", "INITIAL_RANDOM", ",", "INITIAL_RANDOM", ")", ",", "\n", "self", ".", "np_random", ".", "uniform", "(", "-", "INITIAL_RANDOM", ",", "INITIAL_RANDOM", ")", "\n", ")", ",", "True", ")", "\n", "\n", "self", ".", "legs", "=", "[", "]", "\n", "for", "i", "in", "[", "-", "1", ",", "+", "1", "]", ":", "\n", "            ", "leg", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", "-", "i", "*", "LEG_AWAY", "/", "SCALE", ",", "initial_y", ")", ",", "\n", "angle", "=", "(", "i", "*", "0.05", ")", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "box", "=", "(", "LEG_W", "/", "SCALE", ",", "LEG_H", "/", "SCALE", ")", ")", ",", "\n", "density", "=", "1.0", ",", "\n", "restitution", "=", "0.0", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ")", "\n", ")", "\n", "leg", ".", "ground_contact", "=", "False", "\n", "leg", ".", "color1", "=", "(", "0.5", ",", "0.4", ",", "0.9", ")", "\n", "leg", ".", "color2", "=", "(", "0.3", ",", "0.3", ",", "0.5", ")", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "self", ".", "lander", ",", "\n", "bodyB", "=", "leg", ",", "\n", "localAnchorA", "=", "(", "0", ",", "0", ")", ",", "\n", "localAnchorB", "=", "(", "i", "*", "LEG_AWAY", "/", "SCALE", ",", "LEG_DOWN", "/", "SCALE", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "LEG_SPRING_TORQUE", ",", "\n", "motorSpeed", "=", "+", "0.3", "*", "i", "# low enough not to jump back into the sky", "\n", ")", "\n", "if", "i", "==", "-", "1", ":", "\n", "                ", "rjd", ".", "lowerAngle", "=", "+", "0.9", "-", "0.5", "# Yes, the most esoteric numbers here, angles legs have freedom to travel within", "\n", "rjd", ".", "upperAngle", "=", "+", "0.9", "\n", "", "else", ":", "\n", "                ", "rjd", ".", "lowerAngle", "=", "-", "0.9", "\n", "rjd", ".", "upperAngle", "=", "-", "0.9", "+", "0.5", "\n", "", "leg", ".", "joint", "=", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", "\n", "self", ".", "legs", ".", "append", "(", "leg", ")", "\n", "\n", "", "self", ".", "drawlist", "=", "[", "self", ".", "lander", "]", "+", "self", ".", "legs", "\n", "\n", "return", "self", ".", "step", "(", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "if", "self", ".", "continuous", "else", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander._create_particle": [[216, 232], ["lunar_lander.LunarLander.world.CreateDynamicBody", "lunar_lander.LunarLander.particles.append", "lunar_lander.LunarLander._clean_particles", "Box2D.b2.fixtureDef", "Box2D.b2.circleShape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander._clean_particles"], ["", "def", "_create_particle", "(", "self", ",", "mass", ",", "x", ",", "y", ",", "ttl", ")", ":", "\n", "        ", "p", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "x", ",", "y", ")", ",", "\n", "angle", "=", "0.0", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "circleShape", "(", "radius", "=", "2", "/", "SCALE", ",", "pos", "=", "(", "0", ",", "0", ")", ")", ",", "\n", "density", "=", "mass", ",", "\n", "friction", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0100", ",", "\n", "maskBits", "=", "0x001", ",", "# collide only with ground", "\n", "restitution", "=", "0.3", ")", "\n", ")", "\n", "p", ".", "ttl", "=", "ttl", "\n", "self", ".", "particles", ".", "append", "(", "p", ")", "\n", "self", ".", "_clean_particles", "(", "False", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander._clean_particles": [[233, 236], ["lunar_lander.LunarLander.world.DestroyBody", "lunar_lander.LunarLander.particles.pop"], "methods", ["None"], ["", "def", "_clean_particles", "(", "self", ",", "all", ")", ":", "\n", "        ", "while", "self", ".", "particles", "and", "(", "all", "or", "self", ".", "particles", "[", "0", "]", ".", "ttl", "<", "0", ")", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "particles", ".", "pop", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander.step": [[237, 314], ["lunar_lander.LunarLander.action_space.contains", "lunar_lander.LunarLander.world.Step", "math.sin", "math.cos", "lunar_lander.LunarLander._create_particle", "lunar_lander.LunarLander.ApplyLinearImpulse", "lunar_lander.LunarLander.lander.ApplyLinearImpulse", "lunar_lander.LunarLander._create_particle", "lunar_lander.LunarLander.ApplyLinearImpulse", "lunar_lander.LunarLander.lander.ApplyLinearImpulse", "len", "numpy.array", "type", "lunar_lander.LunarLander.np_random.uniform", "range", "numpy.sign", "numpy.clip", "abs", "numpy.abs", "numpy.abs", "numpy.clip", "abs", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car._create_particle", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car._create_particle", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalid \"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "\n", "# Engines", "\n", "tip", "=", "(", "math", ".", "sin", "(", "self", ".", "lander", ".", "angle", ")", ",", "math", ".", "cos", "(", "self", ".", "lander", ".", "angle", ")", ")", "\n", "side", "=", "(", "-", "tip", "[", "1", "]", ",", "tip", "[", "0", "]", ")", ";", "\n", "dispersion", "=", "[", "self", ".", "np_random", ".", "uniform", "(", "-", "1.0", ",", "+", "1.0", ")", "/", "SCALE", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "\n", "m_power", "=", "0.0", "\n", "if", "(", "self", ".", "continuous", "and", "action", "[", "0", "]", ">", "0.0", ")", "or", "(", "not", "self", ".", "continuous", "and", "action", "==", "2", ")", ":", "\n", "# Main engine", "\n", "            ", "if", "self", ".", "continuous", ":", "\n", "                ", "m_power", "=", "(", "np", ".", "clip", "(", "action", "[", "0", "]", ",", "0.0", ",", "1.0", ")", "+", "1.0", ")", "*", "0.5", "# 0.5..1.0", "\n", "assert", "m_power", ">=", "0.5", "and", "m_power", "<=", "1.0", "\n", "", "else", ":", "\n", "                ", "m_power", "=", "1.0", "\n", "", "ox", "=", "tip", "[", "0", "]", "*", "(", "4", "/", "SCALE", "+", "2", "*", "dispersion", "[", "0", "]", ")", "+", "side", "[", "0", "]", "*", "dispersion", "[", "1", "]", "# 4 is move a bit downwards, +-2 for randomness", "\n", "oy", "=", "-", "tip", "[", "1", "]", "*", "(", "4", "/", "SCALE", "+", "2", "*", "dispersion", "[", "0", "]", ")", "-", "side", "[", "1", "]", "*", "dispersion", "[", "1", "]", "\n", "impulse_pos", "=", "(", "self", ".", "lander", ".", "position", "[", "0", "]", "+", "ox", ",", "self", ".", "lander", ".", "position", "[", "1", "]", "+", "oy", ")", "\n", "p", "=", "self", ".", "_create_particle", "(", "3.5", ",", "impulse_pos", "[", "0", "]", ",", "impulse_pos", "[", "1", "]", ",", "m_power", ")", "# particles are just a decoration, 3.5 is here to make particle speed adequate", "\n", "p", ".", "ApplyLinearImpulse", "(", "(", "ox", "*", "MAIN_ENGINE_POWER", "*", "m_power", ",", "oy", "*", "MAIN_ENGINE_POWER", "*", "m_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "self", ".", "lander", ".", "ApplyLinearImpulse", "(", "(", "-", "ox", "*", "MAIN_ENGINE_POWER", "*", "m_power", ",", "-", "oy", "*", "MAIN_ENGINE_POWER", "*", "m_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "\n", "", "s_power", "=", "0.0", "\n", "if", "(", "self", ".", "continuous", "and", "np", ".", "abs", "(", "action", "[", "1", "]", ")", ">", "0.5", ")", "or", "(", "not", "self", ".", "continuous", "and", "action", "in", "[", "1", ",", "3", "]", ")", ":", "\n", "# Orientation engines", "\n", "            ", "if", "self", ".", "continuous", ":", "\n", "                ", "direction", "=", "np", ".", "sign", "(", "action", "[", "1", "]", ")", "\n", "s_power", "=", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "1", "]", ")", ",", "0.5", ",", "1.0", ")", "\n", "assert", "s_power", ">=", "0.5", "and", "s_power", "<=", "1.0", "\n", "", "else", ":", "\n", "                ", "direction", "=", "action", "-", "2", "\n", "s_power", "=", "1.0", "\n", "", "ox", "=", "tip", "[", "0", "]", "*", "dispersion", "[", "0", "]", "+", "side", "[", "0", "]", "*", "(", "3", "*", "dispersion", "[", "1", "]", "+", "direction", "*", "SIDE_ENGINE_AWAY", "/", "SCALE", ")", "\n", "oy", "=", "-", "tip", "[", "1", "]", "*", "dispersion", "[", "0", "]", "-", "side", "[", "1", "]", "*", "(", "3", "*", "dispersion", "[", "1", "]", "+", "direction", "*", "SIDE_ENGINE_AWAY", "/", "SCALE", ")", "\n", "impulse_pos", "=", "(", "self", ".", "lander", ".", "position", "[", "0", "]", "+", "ox", "-", "tip", "[", "0", "]", "*", "17", "/", "SCALE", ",", "self", ".", "lander", ".", "position", "[", "1", "]", "+", "oy", "+", "tip", "[", "1", "]", "*", "SIDE_ENGINE_HEIGHT", "/", "SCALE", ")", "\n", "p", "=", "self", ".", "_create_particle", "(", "0.7", ",", "impulse_pos", "[", "0", "]", ",", "impulse_pos", "[", "1", "]", ",", "s_power", ")", "\n", "p", ".", "ApplyLinearImpulse", "(", "(", "ox", "*", "SIDE_ENGINE_POWER", "*", "s_power", ",", "oy", "*", "SIDE_ENGINE_POWER", "*", "s_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "self", ".", "lander", ".", "ApplyLinearImpulse", "(", "(", "-", "ox", "*", "SIDE_ENGINE_POWER", "*", "s_power", ",", "-", "oy", "*", "SIDE_ENGINE_POWER", "*", "s_power", ")", ",", "impulse_pos", ",", "True", ")", "\n", "\n", "", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "\n", "pos", "=", "self", ".", "lander", ".", "position", "\n", "vel", "=", "self", ".", "lander", ".", "linearVelocity", "\n", "state", "=", "[", "\n", "(", "pos", ".", "x", "-", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", "/", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", ",", "\n", "(", "pos", ".", "y", "-", "(", "self", ".", "helipad_y", "+", "LEG_DOWN", "/", "SCALE", ")", ")", "/", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", ",", "\n", "vel", ".", "x", "*", "(", "VIEWPORT_W", "/", "SCALE", "/", "2", ")", "/", "FPS", ",", "\n", "vel", ".", "y", "*", "(", "VIEWPORT_H", "/", "SCALE", "/", "2", ")", "/", "FPS", ",", "\n", "self", ".", "lander", ".", "angle", ",", "\n", "20.0", "*", "self", ".", "lander", ".", "angularVelocity", "/", "FPS", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "0", "]", ".", "ground_contact", "else", "0.0", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "1", "]", ".", "ground_contact", "else", "0.0", "\n", "]", "\n", "assert", "len", "(", "state", ")", "==", "8", "\n", "\n", "reward", "=", "0", "\n", "shaping", "=", "-", "100", "*", "np", ".", "sqrt", "(", "state", "[", "0", "]", "*", "state", "[", "0", "]", "+", "state", "[", "1", "]", "*", "state", "[", "1", "]", ")", "-", "100", "*", "np", ".", "sqrt", "(", "state", "[", "2", "]", "*", "state", "[", "2", "]", "+", "state", "[", "3", "]", "*", "state", "[", "3", "]", ")", "-", "100", "*", "abs", "(", "state", "[", "4", "]", ")", "+", "10", "*", "state", "[", "6", "]", "+", "10", "*", "state", "[", "7", "]", "# And ten points for legs contact, the idea is if you", "\n", "# lose contact again after landing, you get negative reward", "\n", "if", "self", ".", "prev_shaping", "is", "not", "None", ":", "\n", "            ", "reward", "=", "shaping", "-", "self", ".", "prev_shaping", "\n", "", "self", ".", "prev_shaping", "=", "shaping", "\n", "\n", "reward", "-=", "m_power", "*", "0.30", "# less fuel spent is better, about -30 for heurisic landing", "\n", "reward", "-=", "s_power", "*", "0.03", "\n", "\n", "done", "=", "False", "\n", "if", "self", ".", "game_over", "or", "abs", "(", "state", "[", "0", "]", ")", ">=", "1.0", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "-", "100", "\n", "", "if", "not", "self", ".", "lander", ".", "awake", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "+", "100", "\n", "", "return", "np", ".", "array", "(", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander.render": [[315, 351], ["lunar_lander.LunarLander._clean_particles", "lunar_lander.LunarLander.viewer.render", "rendering.Viewer", "lunar_lander.LunarLander.viewer.set_bounds", "lunar_lander.LunarLander.viewer.draw_polygon", "lunar_lander.LunarLander.viewer.draw_polyline", "lunar_lander.LunarLander.viewer.draw_polygon", "max", "max", "max", "max", "max", "max", "type", "rendering.Transform", "lunar_lander.LunarLander.viewer.draw_circle().add_attr", "lunar_lander.LunarLander.viewer.draw_circle().add_attr", "lunar_lander.LunarLander.viewer.draw_polygon", "path.append", "lunar_lander.LunarLander.viewer.draw_polyline", "lunar_lander.LunarLander.viewer.draw_circle", "lunar_lander.LunarLander.viewer.draw_circle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander._clean_particles", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_circle"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "VIEWPORT_W", ",", "VIEWPORT_H", ")", "\n", "self", ".", "viewer", ".", "set_bounds", "(", "0", ",", "VIEWPORT_W", "/", "SCALE", ",", "0", ",", "VIEWPORT_H", "/", "SCALE", ")", "\n", "\n", "", "for", "obj", "in", "self", ".", "particles", ":", "\n", "            ", "obj", ".", "ttl", "-=", "0.15", "\n", "obj", ".", "color1", "=", "(", "max", "(", "0.2", ",", "0.2", "+", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ")", "\n", "obj", ".", "color2", "=", "(", "max", "(", "0.2", ",", "0.2", "+", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ",", "max", "(", "0.2", ",", "0.5", "*", "obj", ".", "ttl", ")", ")", "\n", "\n", "", "self", ".", "_clean_particles", "(", "False", ")", "\n", "\n", "for", "p", "in", "self", ".", "sky_polys", ":", "\n", "            ", "self", ".", "viewer", ".", "draw_polygon", "(", "p", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "for", "obj", "in", "self", ".", "particles", "+", "self", ".", "drawlist", ":", "\n", "            ", "for", "f", "in", "obj", ".", "fixtures", ":", "\n", "                ", "trans", "=", "f", ".", "body", ".", "transform", "\n", "if", "type", "(", "f", ".", "shape", ")", "is", "circleShape", ":", "\n", "                    ", "t", "=", "rendering", ".", "Transform", "(", "translation", "=", "trans", "*", "f", ".", "shape", ".", "pos", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "20", ",", "color", "=", "obj", ".", "color1", ")", ".", "add_attr", "(", "t", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "20", ",", "color", "=", "obj", ".", "color2", ",", "filled", "=", "False", ",", "linewidth", "=", "2", ")", ".", "add_attr", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "path", "=", "[", "trans", "*", "v", "for", "v", "in", "f", ".", "shape", ".", "vertices", "]", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "path", ",", "color", "=", "obj", ".", "color1", ")", "\n", "path", ".", "append", "(", "path", "[", "0", "]", ")", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "path", ",", "color", "=", "obj", ".", "color2", ",", "linewidth", "=", "2", ")", "\n", "\n", "", "", "", "for", "x", "in", "[", "self", ".", "helipad_x1", ",", "self", ".", "helipad_x2", "]", ":", "\n", "            ", "flagy1", "=", "self", ".", "helipad_y", "\n", "flagy2", "=", "flagy1", "+", "50", "/", "SCALE", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "[", "(", "x", ",", "flagy1", ")", ",", "(", "x", ",", "flagy2", ")", "]", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "(", "x", ",", "flagy2", ")", ",", "(", "x", ",", "flagy2", "-", "10", "/", "SCALE", ")", ",", "(", "x", "+", "25", "/", "SCALE", ",", "flagy2", "-", "5", "/", "SCALE", ")", "]", ",", "color", "=", "(", "0.8", ",", "0.8", ",", "0", ")", ")", "\n", "\n", "", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.LunarLander.close": [[352, 356], ["lunar_lander.LunarLander.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.lunar_lander.heuristic": [[360, 390], ["numpy.abs", "numpy.array", "numpy.clip", "numpy.abs"], "function", ["None"], ["", "def", "heuristic", "(", "env", ",", "s", ")", ":", "\n", "# Heuristic for:", "\n", "# 1. Testing. ", "\n", "# 2. Demonstration rollout.", "\n", "    ", "angle_targ", "=", "s", "[", "0", "]", "*", "0.5", "+", "s", "[", "2", "]", "*", "1.0", "# angle should point towards center (s[0] is horizontal coordinate, s[2] hor speed)", "\n", "if", "angle_targ", ">", "0.4", ":", "angle_targ", "=", "0.4", "# more than 0.4 radians (22 degrees) is bad", "\n", "if", "angle_targ", "<", "-", "0.4", ":", "angle_targ", "=", "-", "0.4", "\n", "hover_targ", "=", "0.55", "*", "np", ".", "abs", "(", "s", "[", "0", "]", ")", "# target y should be proporional to horizontal offset", "\n", "\n", "# PID controller: s[4] angle, s[5] angularSpeed", "\n", "angle_todo", "=", "(", "angle_targ", "-", "s", "[", "4", "]", ")", "*", "0.5", "-", "(", "s", "[", "5", "]", ")", "*", "1.0", "\n", "#print(\"angle_targ=%0.2f, angle_todo=%0.2f\" % (angle_targ, angle_todo))", "\n", "\n", "# PID controller: s[1] vertical coordinate s[3] vertical speed", "\n", "hover_todo", "=", "(", "hover_targ", "-", "s", "[", "1", "]", ")", "*", "0.5", "-", "(", "s", "[", "3", "]", ")", "*", "0.5", "\n", "#print(\"hover_targ=%0.2f, hover_todo=%0.2f\" % (hover_targ, hover_todo))", "\n", "\n", "if", "s", "[", "6", "]", "or", "s", "[", "7", "]", ":", "# legs have contact", "\n", "        ", "angle_todo", "=", "0", "\n", "hover_todo", "=", "-", "(", "s", "[", "3", "]", ")", "*", "0.5", "# override to reduce fall speed, that's all we need after contact", "\n", "\n", "", "if", "env", ".", "continuous", ":", "\n", "        ", "a", "=", "np", ".", "array", "(", "[", "hover_todo", "*", "20", "-", "1", ",", "-", "angle_todo", "*", "20", "]", ")", "\n", "a", "=", "np", ".", "clip", "(", "a", ",", "-", "1", ",", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "0", "\n", "if", "hover_todo", ">", "np", ".", "abs", "(", "angle_todo", ")", "and", "hover_todo", ">", "0.05", ":", "a", "=", "2", "\n", "elif", "angle_todo", "<", "-", "0.05", ":", "a", "=", "3", "\n", "elif", "angle_todo", ">", "+", "0.05", ":", "a", "=", "1", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.__init__": [[50, 108], ["car_dynamics.Car.world.CreateDynamicBody", "car_dynamics.Car.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "car_dynamics.Car.world.CreateJoint", "set", "car_dynamics.Car.wheels.append", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape", "Box2D.b2.polygonShape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["    ", "def", "__init__", "(", "self", ",", "world", ",", "init_angle", ",", "init_x", ",", "init_y", ")", ":", "\n", "        ", "self", ".", "world", "=", "world", "\n", "self", ".", "hull", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", ")", ",", "\n", "angle", "=", "init_angle", ",", "\n", "fixtures", "=", "[", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY1", "]", ")", ",", "density", "=", "1.0", ")", ",", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY2", "]", ")", ",", "density", "=", "1.0", ")", ",", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY3", "]", ")", ",", "density", "=", "1.0", ")", ",", "\n", "fixtureDef", "(", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "SIZE", ",", "y", "*", "SIZE", ")", "for", "x", ",", "y", "in", "HULL_POLY4", "]", ")", ",", "density", "=", "1.0", ")", "\n", "]", "\n", ")", "\n", "self", ".", "hull", ".", "color", "=", "(", "0.8", ",", "0.0", ",", "0.0", ")", "\n", "self", ".", "wheels", "=", "[", "]", "\n", "self", ".", "fuel_spent", "=", "0.0", "\n", "WHEEL_POLY", "=", "[", "\n", "(", "-", "WHEEL_W", ",", "+", "WHEEL_R", ")", ",", "(", "+", "WHEEL_W", ",", "+", "WHEEL_R", ")", ",", "\n", "(", "+", "WHEEL_W", ",", "-", "WHEEL_R", ")", ",", "(", "-", "WHEEL_W", ",", "-", "WHEEL_R", ")", "\n", "]", "\n", "for", "wx", ",", "wy", "in", "WHEELPOS", ":", "\n", "            ", "front_k", "=", "1.0", "if", "wy", ">", "0", "else", "1.0", "\n", "w", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", "+", "wx", "*", "SIZE", ",", "init_y", "+", "wy", "*", "SIZE", ")", ",", "\n", "angle", "=", "init_angle", ",", "\n", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "(", "x", "*", "front_k", "*", "SIZE", ",", "y", "*", "front_k", "*", "SIZE", ")", "for", "x", ",", "y", "in", "WHEEL_POLY", "]", ")", ",", "\n", "density", "=", "0.1", ",", "\n", "categoryBits", "=", "0x0020", ",", "\n", "maskBits", "=", "0x001", ",", "\n", "restitution", "=", "0.0", ")", "\n", ")", "\n", "w", ".", "wheel_rad", "=", "front_k", "*", "WHEEL_R", "*", "SIZE", "\n", "w", ".", "color", "=", "WHEEL_COLOR", "\n", "w", ".", "gas", "=", "0.0", "\n", "w", ".", "brake", "=", "0.0", "\n", "w", ".", "steer", "=", "0.0", "\n", "w", ".", "phase", "=", "0.0", "# wheel angle", "\n", "w", ".", "omega", "=", "0.0", "# angular velocity", "\n", "w", ".", "skid_start", "=", "None", "\n", "w", ".", "skid_particle", "=", "None", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "self", ".", "hull", ",", "\n", "bodyB", "=", "w", ",", "\n", "localAnchorA", "=", "(", "wx", "*", "SIZE", ",", "wy", "*", "SIZE", ")", ",", "\n", "localAnchorB", "=", "(", "0", ",", "0", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "180", "*", "900", "*", "SIZE", "*", "SIZE", ",", "\n", "motorSpeed", "=", "0", ",", "\n", "lowerAngle", "=", "-", "0.4", ",", "\n", "upperAngle", "=", "+", "0.4", ",", "\n", ")", "\n", "w", ".", "joint", "=", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", "\n", "w", ".", "tiles", "=", "set", "(", ")", "\n", "w", ".", "userData", "=", "w", "\n", "self", ".", "wheels", ".", "append", "(", "w", ")", "\n", "", "self", ".", "drawlist", "=", "self", ".", "wheels", "+", "[", "self", ".", "hull", "]", "\n", "self", ".", "particles", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.gas": [[109, 116], ["numpy.clip"], "methods", ["None"], ["", "def", "gas", "(", "self", ",", "gas", ")", ":", "\n", "        ", "'control: rear wheel drive'", "\n", "gas", "=", "np", ".", "clip", "(", "gas", ",", "0", ",", "1", ")", "\n", "for", "w", "in", "self", ".", "wheels", "[", "2", ":", "4", "]", ":", "\n", "            ", "diff", "=", "gas", "-", "w", ".", "gas", "\n", "if", "diff", ">", "0.1", ":", "diff", "=", "0.1", "# gradually increase, but stop immediately", "\n", "w", ".", "gas", "+=", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.brake": [[117, 121], ["None"], "methods", ["None"], ["", "", "def", "brake", "(", "self", ",", "b", ")", ":", "\n", "        ", "'control: brake b=0..1, more than 0.9 blocks wheels to zero rotation'", "\n", "for", "w", "in", "self", ".", "wheels", ":", "\n", "            ", "w", ".", "brake", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.steer": [[122, 126], ["None"], "methods", ["None"], ["", "", "def", "steer", "(", "self", ",", "s", ")", ":", "\n", "        ", "'control: steer s=-1..1, it takes time to rotate steering wheel from side to side, s is target position'", "\n", "self", ".", "wheels", "[", "0", "]", ".", "steer", "=", "s", "\n", "self", ".", "wheels", "[", "1", "]", ".", "steer", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.step": [[127, 199], ["numpy.sign", "abs", "w.GetWorldVector", "w.GetWorldVector", "numpy.sqrt", "w.ApplyForceToCenter", "min", "max", "abs", "abs", "abs", "numpy.square", "numpy.square", "w.skid_particle.poly.append", "numpy.sign", "abs", "abs", "abs", "len", "car_dynamics.Car._create_particle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car._create_particle"], ["", "def", "step", "(", "self", ",", "dt", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "wheels", ":", "\n", "# Steer each wheel", "\n", "            ", "dir", "=", "np", ".", "sign", "(", "w", ".", "steer", "-", "w", ".", "joint", ".", "angle", ")", "\n", "val", "=", "abs", "(", "w", ".", "steer", "-", "w", ".", "joint", ".", "angle", ")", "\n", "w", ".", "joint", ".", "motorSpeed", "=", "dir", "*", "min", "(", "50.0", "*", "val", ",", "3.0", ")", "\n", "\n", "# Position => friction_limit", "\n", "grass", "=", "True", "\n", "friction_limit", "=", "FRICTION_LIMIT", "*", "0.6", "# Grass friction if no tile", "\n", "for", "tile", "in", "w", ".", "tiles", ":", "\n", "                ", "friction_limit", "=", "max", "(", "friction_limit", ",", "FRICTION_LIMIT", "*", "tile", ".", "road_friction", ")", "\n", "grass", "=", "False", "\n", "\n", "# Force", "\n", "", "forw", "=", "w", ".", "GetWorldVector", "(", "(", "0", ",", "1", ")", ")", "\n", "side", "=", "w", ".", "GetWorldVector", "(", "(", "1", ",", "0", ")", ")", "\n", "v", "=", "w", ".", "linearVelocity", "\n", "vf", "=", "forw", "[", "0", "]", "*", "v", "[", "0", "]", "+", "forw", "[", "1", "]", "*", "v", "[", "1", "]", "# forward speed", "\n", "vs", "=", "side", "[", "0", "]", "*", "v", "[", "0", "]", "+", "side", "[", "1", "]", "*", "v", "[", "1", "]", "# side speed", "\n", "\n", "# WHEEL_MOMENT_OF_INERTIA*np.square(w.omega)/2 = E -- energy", "\n", "# WHEEL_MOMENT_OF_INERTIA*w.omega * domega/dt = dE/dt = W -- power", "\n", "# domega = dt*W/WHEEL_MOMENT_OF_INERTIA/w.omega", "\n", "w", ".", "omega", "+=", "dt", "*", "ENGINE_POWER", "*", "w", ".", "gas", "/", "WHEEL_MOMENT_OF_INERTIA", "/", "(", "abs", "(", "w", ".", "omega", ")", "+", "5.0", ")", "# small coef not to divide by zero", "\n", "self", ".", "fuel_spent", "+=", "dt", "*", "ENGINE_POWER", "*", "w", ".", "gas", "\n", "\n", "if", "w", ".", "brake", ">=", "0.9", ":", "\n", "                ", "w", ".", "omega", "=", "0", "\n", "", "elif", "w", ".", "brake", ">", "0", ":", "\n", "                ", "BRAKE_FORCE", "=", "15", "# radians per second", "\n", "dir", "=", "-", "np", ".", "sign", "(", "w", ".", "omega", ")", "\n", "val", "=", "BRAKE_FORCE", "*", "w", ".", "brake", "\n", "if", "abs", "(", "val", ")", ">", "abs", "(", "w", ".", "omega", ")", ":", "val", "=", "abs", "(", "w", ".", "omega", ")", "# low speed => same as = 0", "\n", "w", ".", "omega", "+=", "dir", "*", "val", "\n", "", "w", ".", "phase", "+=", "w", ".", "omega", "*", "dt", "\n", "\n", "vr", "=", "w", ".", "omega", "*", "w", ".", "wheel_rad", "# rotating wheel speed", "\n", "f_force", "=", "-", "vf", "+", "vr", "# force direction is direction of speed difference", "\n", "p_force", "=", "-", "vs", "\n", "\n", "# Physically correct is to always apply friction_limit until speed is equal.", "\n", "# But dt is finite, that will lead to oscillations if difference is already near zero.", "\n", "f_force", "*=", "205000", "*", "SIZE", "*", "SIZE", "# Random coefficient to cut oscillations in few steps (have no effect on friction_limit)", "\n", "p_force", "*=", "205000", "*", "SIZE", "*", "SIZE", "\n", "force", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "f_force", ")", "+", "np", ".", "square", "(", "p_force", ")", ")", "\n", "\n", "# Skid trace", "\n", "if", "abs", "(", "force", ")", ">", "2.0", "*", "friction_limit", ":", "\n", "                ", "if", "w", ".", "skid_particle", "and", "w", ".", "skid_particle", ".", "grass", "==", "grass", "and", "len", "(", "w", ".", "skid_particle", ".", "poly", ")", "<", "30", ":", "\n", "                    ", "w", ".", "skid_particle", ".", "poly", ".", "append", "(", "(", "w", ".", "position", "[", "0", "]", ",", "w", ".", "position", "[", "1", "]", ")", ")", "\n", "", "elif", "w", ".", "skid_start", "is", "None", ":", "\n", "                    ", "w", ".", "skid_start", "=", "w", ".", "position", "\n", "", "else", ":", "\n", "                    ", "w", ".", "skid_particle", "=", "self", ".", "_create_particle", "(", "w", ".", "skid_start", ",", "w", ".", "position", ",", "grass", ")", "\n", "w", ".", "skid_start", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "w", ".", "skid_start", "=", "None", "\n", "w", ".", "skid_particle", "=", "None", "\n", "\n", "", "if", "abs", "(", "force", ")", ">", "friction_limit", ":", "\n", "                ", "f_force", "/=", "force", "\n", "p_force", "/=", "force", "\n", "force", "=", "friction_limit", "# Correct physics here", "\n", "f_force", "*=", "force", "\n", "p_force", "*=", "force", "\n", "\n", "", "w", ".", "omega", "-=", "dt", "*", "f_force", "*", "w", ".", "wheel_rad", "/", "WHEEL_MOMENT_OF_INERTIA", "\n", "\n", "w", ".", "ApplyForceToCenter", "(", "(", "\n", "p_force", "*", "side", "[", "0", "]", "+", "f_force", "*", "forw", "[", "0", "]", ",", "\n", "p_force", "*", "side", "[", "1", "]", "+", "f_force", "*", "forw", "[", "1", "]", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.draw": [[200, 224], ["viewer.draw_polyline", "viewer.draw_polygon", "math.sin", "math.sin", "math.cos", "math.cos", "viewer.draw_polygon", "numpy.sign", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon"], ["", "", "def", "draw", "(", "self", ",", "viewer", ",", "draw_particles", "=", "True", ")", ":", "\n", "        ", "if", "draw_particles", ":", "\n", "            ", "for", "p", "in", "self", ".", "particles", ":", "\n", "                ", "viewer", ".", "draw_polyline", "(", "p", ".", "poly", ",", "color", "=", "p", ".", "color", ",", "linewidth", "=", "5", ")", "\n", "", "", "for", "obj", "in", "self", ".", "drawlist", ":", "\n", "            ", "for", "f", "in", "obj", ".", "fixtures", ":", "\n", "                ", "trans", "=", "f", ".", "body", ".", "transform", "\n", "path", "=", "[", "trans", "*", "v", "for", "v", "in", "f", ".", "shape", ".", "vertices", "]", "\n", "viewer", ".", "draw_polygon", "(", "path", ",", "color", "=", "obj", ".", "color", ")", "\n", "if", "\"phase\"", "not", "in", "obj", ".", "__dict__", ":", "continue", "\n", "a1", "=", "obj", ".", "phase", "\n", "a2", "=", "obj", ".", "phase", "+", "1.2", "# radians", "\n", "s1", "=", "math", ".", "sin", "(", "a1", ")", "\n", "s2", "=", "math", ".", "sin", "(", "a2", ")", "\n", "c1", "=", "math", ".", "cos", "(", "a1", ")", "\n", "c2", "=", "math", ".", "cos", "(", "a2", ")", "\n", "if", "s1", ">", "0", "and", "s2", ">", "0", ":", "continue", "\n", "if", "s1", ">", "0", ":", "c1", "=", "np", ".", "sign", "(", "c1", ")", "\n", "if", "s2", ">", "0", ":", "c2", "=", "np", ".", "sign", "(", "c2", ")", "\n", "white_poly", "=", "[", "\n", "(", "-", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c1", "*", "SIZE", ")", ",", "(", "+", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c1", "*", "SIZE", ")", ",", "\n", "(", "+", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c2", "*", "SIZE", ")", ",", "(", "-", "WHEEL_W", "*", "SIZE", ",", "+", "WHEEL_R", "*", "c2", "*", "SIZE", ")", "\n", "]", "\n", "viewer", ".", "draw_polygon", "(", "[", "trans", "*", "v", "for", "v", "in", "white_poly", "]", ",", "color", "=", "WHEEL_WHITE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car._create_particle": [[225, 237], ["Particle", "car_dynamics.Car.particles.append", "len", "car_dynamics.Car.particles.pop"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "", "", "def", "_create_particle", "(", "self", ",", "point1", ",", "point2", ",", "grass", ")", ":", "\n", "        ", "class", "Particle", ":", "\n", "            ", "pass", "\n", "", "p", "=", "Particle", "(", ")", "\n", "p", ".", "color", "=", "WHEEL_COLOR", "if", "not", "grass", "else", "MUD_COLOR", "\n", "p", ".", "ttl", "=", "1", "\n", "p", ".", "poly", "=", "[", "(", "point1", "[", "0", "]", ",", "point1", "[", "1", "]", ")", ",", "(", "point2", "[", "0", "]", ",", "point2", "[", "1", "]", ")", "]", "\n", "p", ".", "grass", "=", "grass", "\n", "self", ".", "particles", ".", "append", "(", "p", ")", "\n", "while", "len", "(", "self", ".", "particles", ")", ">", "30", ":", "\n", "            ", "self", ".", "particles", ".", "pop", "(", "0", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.destroy": [[238, 244], ["car_dynamics.Car.world.DestroyBody", "car_dynamics.Car.world.DestroyBody"], "methods", ["None"], ["", "def", "destroy", "(", "self", ")", ":", "\n", "        ", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "hull", ")", "\n", "self", ".", "hull", "=", "None", "\n", "for", "w", "in", "self", ".", "wheels", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "w", ")", "\n", "", "self", ".", "wheels", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.FrictionDetector.__init__": [[66, 69], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.FrictionDetector.BeginContact": [[69, 71], ["car_racing.FrictionDetector._contact"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.FrictionDetector._contact"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "self", ".", "_contact", "(", "contact", ",", "True", ")", "\n", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.FrictionDetector.EndContact": [[71, 73], ["car_racing.FrictionDetector._contact"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.FrictionDetector._contact"], ["", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "self", ".", "_contact", "(", "contact", ",", "False", ")", "\n", "", "def", "_contact", "(", "self", ",", "contact", ",", "begin", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.FrictionDetector._contact": [[73, 99], ["obj.tiles.add", "obj.tiles.remove", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "def", "_contact", "(", "self", ",", "contact", ",", "begin", ")", ":", "\n", "        ", "tile", "=", "None", "\n", "obj", "=", "None", "\n", "u1", "=", "contact", ".", "fixtureA", ".", "body", ".", "userData", "\n", "u2", "=", "contact", ".", "fixtureB", ".", "body", ".", "userData", "\n", "if", "u1", "and", "\"road_friction\"", "in", "u1", ".", "__dict__", ":", "\n", "            ", "tile", "=", "u1", "\n", "obj", "=", "u2", "\n", "", "if", "u2", "and", "\"road_friction\"", "in", "u2", ".", "__dict__", ":", "\n", "            ", "tile", "=", "u2", "\n", "obj", "=", "u1", "\n", "", "if", "not", "tile", ":", "return", "\n", "\n", "tile", ".", "color", "[", "0", "]", "=", "ROAD_COLOR", "[", "0", "]", "\n", "tile", ".", "color", "[", "1", "]", "=", "ROAD_COLOR", "[", "1", "]", "\n", "tile", ".", "color", "[", "2", "]", "=", "ROAD_COLOR", "[", "2", "]", "\n", "if", "not", "obj", "or", "\"tiles\"", "not", "in", "obj", ".", "__dict__", ":", "return", "\n", "if", "begin", ":", "\n", "            ", "obj", ".", "tiles", ".", "add", "(", "tile", ")", "\n", "#print tile.road_friction, \"ADD\", len(obj.tiles)", "\n", "if", "not", "tile", ".", "road_visited", ":", "\n", "                ", "tile", ".", "road_visited", "=", "True", "\n", "self", ".", "env", ".", "reward", "+=", "1000.0", "/", "len", "(", "self", ".", "env", ".", "track", ")", "\n", "self", ".", "env", ".", "tile_visited_count", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "obj", ".", "tiles", ".", "remove", "(", "tile", ")", "\n", "#print tile.road_friction, \"DEL\", len(obj.tiles) -- should delete to zero when on grass (this works)", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.__init__": [[107, 121], ["car_racing.CarRacing.seed", "car_racing.FrictionDetector", "Box2D.b2World", "gym.spaces.Box", "gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "seed", "(", ")", "\n", "self", ".", "contactListener_keepref", "=", "FrictionDetector", "(", "self", ")", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", "(", "0", ",", "0", ")", ",", "contactListener", "=", "self", ".", "contactListener_keepref", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "invisible_state_window", "=", "None", "\n", "self", ".", "invisible_video_window", "=", "None", "\n", "self", ".", "road", "=", "None", "\n", "self", ".", "car", "=", "None", "\n", "self", ".", "reward", "=", "0.0", "\n", "self", ".", "prev_reward", "=", "0.0", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "+", "1", ",", "+", "1", ",", "+", "1", "]", ")", ")", "# steer, gas, brake", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "STATE_H", ",", "STATE_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.seed": [[122, 125], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing._destroy": [[126, 132], ["car_racing.CarRacing.car.destroy", "car_racing.CarRacing.world.DestroyBody"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.destroy"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "road", ":", "return", "\n", "for", "t", "in", "self", ".", "road", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "t", ")", "\n", "", "self", ".", "road", "=", "[", "]", "\n", "self", ".", "car", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing._create_track": [[133, 276], ["range", "len", "print", "math.cos", "math.sin", "numpy.sqrt", "range", "range", "range", "car_racing.CarRacing.np_random.uniform", "checkpoints.append", "math.atan2", "math.cos", "math.sin", "track.append", "len", "len", "range", "len", "range", "len", "car_racing.CarRacing.world.CreateStaticBody", "car_racing.CarRacing.road_poly.append", "car_racing.CarRacing.road.append", "car_racing.CarRacing.np_random.uniform", "min", "min", "numpy.square", "numpy.square", "numpy.sign", "abs", "numpy.sign", "car_racing.CarRacing.road_poly.append", "abs", "abs", "abs", "Box2D.b2.fixtureDef", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "len", "Box2D.b2.polygonShape", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_create_track", "(", "self", ")", ":", "\n", "        ", "CHECKPOINTS", "=", "12", "\n", "\n", "# Create checkpoints", "\n", "checkpoints", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "CHECKPOINTS", ")", ":", "\n", "            ", "alpha", "=", "2", "*", "math", ".", "pi", "*", "c", "/", "CHECKPOINTS", "+", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", "*", "1", "/", "CHECKPOINTS", ")", "\n", "rad", "=", "self", ".", "np_random", ".", "uniform", "(", "TRACK_RAD", "/", "3", ",", "TRACK_RAD", ")", "\n", "if", "c", "==", "0", ":", "\n", "                ", "alpha", "=", "0", "\n", "rad", "=", "1.5", "*", "TRACK_RAD", "\n", "", "if", "c", "==", "CHECKPOINTS", "-", "1", ":", "\n", "                ", "alpha", "=", "2", "*", "math", ".", "pi", "*", "c", "/", "CHECKPOINTS", "\n", "self", ".", "start_alpha", "=", "2", "*", "math", ".", "pi", "*", "(", "-", "0.5", ")", "/", "CHECKPOINTS", "\n", "rad", "=", "1.5", "*", "TRACK_RAD", "\n", "", "checkpoints", ".", "append", "(", "(", "alpha", ",", "rad", "*", "math", ".", "cos", "(", "alpha", ")", ",", "rad", "*", "math", ".", "sin", "(", "alpha", ")", ")", ")", "\n", "\n", "#print \"\\n\".join(str(h) for h in checkpoints)", "\n", "#self.road_poly = [ (    # uncomment this to see checkpoints", "\n", "#    [ (tx,ty) for a,tx,ty in checkpoints ],", "\n", "#    (0.7,0.7,0.9) ) ]", "\n", "", "self", ".", "road", "=", "[", "]", "\n", "\n", "# Go from one checkpoint to another to create track", "\n", "x", ",", "y", ",", "beta", "=", "1.5", "*", "TRACK_RAD", ",", "0", ",", "0", "\n", "dest_i", "=", "0", "\n", "laps", "=", "0", "\n", "track", "=", "[", "]", "\n", "no_freeze", "=", "2500", "\n", "visited_other_side", "=", "False", "\n", "while", "1", ":", "\n", "            ", "alpha", "=", "math", ".", "atan2", "(", "y", ",", "x", ")", "\n", "if", "visited_other_side", "and", "alpha", ">", "0", ":", "\n", "                ", "laps", "+=", "1", "\n", "visited_other_side", "=", "False", "\n", "", "if", "alpha", "<", "0", ":", "\n", "                ", "visited_other_side", "=", "True", "\n", "alpha", "+=", "2", "*", "math", ".", "pi", "\n", "", "while", "True", ":", "# Find destination from checkpoints", "\n", "                ", "failed", "=", "True", "\n", "while", "True", ":", "\n", "                    ", "dest_alpha", ",", "dest_x", ",", "dest_y", "=", "checkpoints", "[", "dest_i", "%", "len", "(", "checkpoints", ")", "]", "\n", "if", "alpha", "<=", "dest_alpha", ":", "\n", "                        ", "failed", "=", "False", "\n", "break", "\n", "", "dest_i", "+=", "1", "\n", "if", "dest_i", "%", "len", "(", "checkpoints", ")", "==", "0", ":", "break", "\n", "", "if", "not", "failed", ":", "break", "\n", "alpha", "-=", "2", "*", "math", ".", "pi", "\n", "continue", "\n", "", "r1x", "=", "math", ".", "cos", "(", "beta", ")", "\n", "r1y", "=", "math", ".", "sin", "(", "beta", ")", "\n", "p1x", "=", "-", "r1y", "\n", "p1y", "=", "r1x", "\n", "dest_dx", "=", "dest_x", "-", "x", "# vector towards destination", "\n", "dest_dy", "=", "dest_y", "-", "y", "\n", "proj", "=", "r1x", "*", "dest_dx", "+", "r1y", "*", "dest_dy", "# destination vector projected on rad", "\n", "while", "beta", "-", "alpha", ">", "1.5", "*", "math", ".", "pi", ":", "beta", "-=", "2", "*", "math", ".", "pi", "\n", "while", "beta", "-", "alpha", "<", "-", "1.5", "*", "math", ".", "pi", ":", "beta", "+=", "2", "*", "math", ".", "pi", "\n", "prev_beta", "=", "beta", "\n", "proj", "*=", "SCALE", "\n", "if", "proj", ">", "0.3", ":", "beta", "-=", "min", "(", "TRACK_TURN_RATE", ",", "abs", "(", "0.001", "*", "proj", ")", ")", "\n", "if", "proj", "<", "-", "0.3", ":", "beta", "+=", "min", "(", "TRACK_TURN_RATE", ",", "abs", "(", "0.001", "*", "proj", ")", ")", "\n", "x", "+=", "p1x", "*", "TRACK_DETAIL_STEP", "\n", "y", "+=", "p1y", "*", "TRACK_DETAIL_STEP", "\n", "track", ".", "append", "(", "(", "alpha", ",", "prev_beta", "*", "0.5", "+", "beta", "*", "0.5", ",", "x", ",", "y", ")", ")", "\n", "if", "laps", ">", "4", ":", "break", "\n", "no_freeze", "-=", "1", "\n", "if", "no_freeze", "==", "0", ":", "break", "\n", "#print \"\\n\".join([str(t) for t in enumerate(track)])", "\n", "\n", "# Find closed loop range i1..i2, first loop should be ignored, second is OK", "\n", "", "i1", ",", "i2", "=", "-", "1", ",", "-", "1", "\n", "i", "=", "len", "(", "track", ")", "\n", "while", "True", ":", "\n", "            ", "i", "-=", "1", "\n", "if", "i", "==", "0", ":", "return", "False", "# Failed", "\n", "pass_through_start", "=", "track", "[", "i", "]", "[", "0", "]", ">", "self", ".", "start_alpha", "and", "track", "[", "i", "-", "1", "]", "[", "0", "]", "<=", "self", ".", "start_alpha", "\n", "if", "pass_through_start", "and", "i2", "==", "-", "1", ":", "\n", "                ", "i2", "=", "i", "\n", "", "elif", "pass_through_start", "and", "i1", "==", "-", "1", ":", "\n", "                ", "i1", "=", "i", "\n", "break", "\n", "", "", "print", "(", "\"Track generation: %i..%i -> %i-tiles track\"", "%", "(", "i1", ",", "i2", ",", "i2", "-", "i1", ")", ")", "\n", "assert", "i1", "!=", "-", "1", "\n", "assert", "i2", "!=", "-", "1", "\n", "\n", "track", "=", "track", "[", "i1", ":", "i2", "-", "1", "]", "\n", "\n", "first_beta", "=", "track", "[", "0", "]", "[", "1", "]", "\n", "first_perp_x", "=", "math", ".", "cos", "(", "first_beta", ")", "\n", "first_perp_y", "=", "math", ".", "sin", "(", "first_beta", ")", "\n", "# Length of perpendicular jump to put together head and tail", "\n", "well_glued_together", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "square", "(", "first_perp_x", "*", "(", "track", "[", "0", "]", "[", "2", "]", "-", "track", "[", "-", "1", "]", "[", "2", "]", ")", ")", "+", "\n", "np", ".", "square", "(", "first_perp_y", "*", "(", "track", "[", "0", "]", "[", "3", "]", "-", "track", "[", "-", "1", "]", "[", "3", "]", ")", ")", ")", "\n", "if", "well_glued_together", ">", "TRACK_DETAIL_STEP", ":", "\n", "            ", "return", "False", "\n", "\n", "# Red-white border on hard turns", "\n", "", "border", "=", "[", "False", "]", "*", "len", "(", "track", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "good", "=", "True", "\n", "oneside", "=", "0", "\n", "for", "neg", "in", "range", "(", "BORDER_MIN_COUNT", ")", ":", "\n", "                ", "beta1", "=", "track", "[", "i", "-", "neg", "-", "0", "]", "[", "1", "]", "\n", "beta2", "=", "track", "[", "i", "-", "neg", "-", "1", "]", "[", "1", "]", "\n", "good", "&=", "abs", "(", "beta1", "-", "beta2", ")", ">", "TRACK_TURN_RATE", "*", "0.2", "\n", "oneside", "+=", "np", ".", "sign", "(", "beta1", "-", "beta2", ")", "\n", "", "good", "&=", "abs", "(", "oneside", ")", "==", "BORDER_MIN_COUNT", "\n", "border", "[", "i", "]", "=", "good", "\n", "", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "for", "neg", "in", "range", "(", "BORDER_MIN_COUNT", ")", ":", "\n", "                ", "border", "[", "i", "-", "neg", "]", "|=", "border", "[", "i", "]", "\n", "\n", "# Create tiles", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "track", ")", ")", ":", "\n", "            ", "alpha1", ",", "beta1", ",", "x1", ",", "y1", "=", "track", "[", "i", "]", "\n", "alpha2", ",", "beta2", ",", "x2", ",", "y2", "=", "track", "[", "i", "-", "1", "]", "\n", "road1_l", "=", "(", "x1", "-", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "-", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "road1_r", "=", "(", "x1", "+", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "+", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "road2_l", "=", "(", "x2", "-", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "-", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "road2_r", "=", "(", "x2", "+", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "+", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "fixtures", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "[", "road1_l", ",", "road1_r", ",", "road2_r", ",", "road2_l", "]", ")", "\n", ")", ")", "\n", "t", ".", "userData", "=", "t", "\n", "c", "=", "0.01", "*", "(", "i", "%", "3", ")", "\n", "t", ".", "color", "=", "[", "ROAD_COLOR", "[", "0", "]", "+", "c", ",", "ROAD_COLOR", "[", "1", "]", "+", "c", ",", "ROAD_COLOR", "[", "2", "]", "+", "c", "]", "\n", "t", ".", "road_visited", "=", "False", "\n", "t", ".", "road_friction", "=", "1.0", "\n", "t", ".", "fixtures", "[", "0", "]", ".", "sensor", "=", "True", "\n", "self", ".", "road_poly", ".", "append", "(", "(", "[", "road1_l", ",", "road1_r", ",", "road2_r", ",", "road2_l", "]", ",", "t", ".", "color", ")", ")", "\n", "self", ".", "road", ".", "append", "(", "t", ")", "\n", "if", "border", "[", "i", "]", ":", "\n", "                ", "side", "=", "np", ".", "sign", "(", "beta2", "-", "beta1", ")", "\n", "b1_l", "=", "(", "x1", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "b1_r", "=", "(", "x1", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "cos", "(", "beta1", ")", ",", "y1", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "sin", "(", "beta1", ")", ")", "\n", "b2_l", "=", "(", "x2", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "+", "side", "*", "TRACK_WIDTH", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "b2_r", "=", "(", "x2", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "cos", "(", "beta2", ")", ",", "y2", "+", "side", "*", "(", "TRACK_WIDTH", "+", "BORDER", ")", "*", "math", ".", "sin", "(", "beta2", ")", ")", "\n", "self", ".", "road_poly", ".", "append", "(", "(", "[", "b1_l", ",", "b1_r", ",", "b2_r", ",", "b2_l", "]", ",", "(", "1", ",", "1", ",", "1", ")", "if", "i", "%", "2", "==", "0", "else", "(", "1", ",", "0", ",", "0", ")", ")", ")", "\n", "", "", "self", ".", "track", "=", "track", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.reset": [[277, 293], ["car_racing.CarRacing._destroy", "gym.envs.box2d.car_dynamics.Car", "car_racing.CarRacing._create_track", "print", "car_racing.CarRacing.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._destroy", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing._create_track", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "reward", "=", "0.0", "\n", "self", ".", "prev_reward", "=", "0.0", "\n", "self", ".", "tile_visited_count", "=", "0", "\n", "self", ".", "t", "=", "0.0", "\n", "self", ".", "road_poly", "=", "[", "]", "\n", "self", ".", "human_render", "=", "False", "\n", "\n", "while", "True", ":", "\n", "            ", "success", "=", "self", ".", "_create_track", "(", ")", "\n", "if", "success", ":", "break", "\n", "print", "(", "\"retry to generate track (normal if there are not many of this messages)\"", ")", "\n", "", "self", ".", "car", "=", "Car", "(", "self", ".", "world", ",", "*", "self", ".", "track", "[", "0", "]", "[", "1", ":", "4", "]", ")", "\n", "\n", "return", "self", ".", "step", "(", "None", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.step": [[294, 323], ["car_racing.CarRacing.car.step", "car_racing.CarRacing.world.Step", "car_racing.CarRacing.render", "car_racing.CarRacing.car.steer", "car_racing.CarRacing.car.gas", "car_racing.CarRacing.car.brake", "len", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.steer", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.gas", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.brake"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "is", "not", "None", ":", "\n", "            ", "self", ".", "car", ".", "steer", "(", "-", "action", "[", "0", "]", ")", "\n", "self", ".", "car", ".", "gas", "(", "action", "[", "1", "]", ")", "\n", "self", ".", "car", ".", "brake", "(", "action", "[", "2", "]", ")", "\n", "\n", "", "self", ".", "car", ".", "step", "(", "1.0", "/", "FPS", ")", "\n", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "self", ".", "t", "+=", "1.0", "/", "FPS", "\n", "\n", "self", ".", "state", "=", "self", ".", "render", "(", "\"state_pixels\"", ")", "\n", "\n", "step_reward", "=", "0", "\n", "done", "=", "False", "\n", "if", "action", "is", "not", "None", ":", "# First step without action, called from reset()", "\n", "            ", "self", ".", "reward", "-=", "0.1", "\n", "# We actually don't want to count fuel spent, we want car to be faster.", "\n", "#self.reward -=  10 * self.car.fuel_spent / ENGINE_POWER", "\n", "self", ".", "car", ".", "fuel_spent", "=", "0.0", "\n", "step_reward", "=", "self", ".", "reward", "-", "self", ".", "prev_reward", "\n", "self", ".", "prev_reward", "=", "self", ".", "reward", "\n", "if", "self", ".", "tile_visited_count", "==", "len", "(", "self", ".", "track", ")", ":", "\n", "                ", "done", "=", "True", "\n", "", "x", ",", "y", "=", "self", ".", "car", ".", "hull", ".", "position", "\n", "if", "abs", "(", "x", ")", ">", "PLAYFIELD", "or", "abs", "(", "y", ")", ">", "PLAYFIELD", ":", "\n", "                ", "done", "=", "True", "\n", "step_reward", "=", "-", "100", "\n", "\n", "", "", "return", "self", ".", "state", ",", "step_reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render": [[324, 396], ["car_racing.CarRacing.transform.set_scale", "car_racing.CarRacing.transform.set_translation", "car_racing.CarRacing.transform.set_rotation", "car_racing.CarRacing.car.draw", "rendering.Viewer", "pyglet.text.Label", "rendering.Transform", "numpy.linalg.norm", "math.atan2", "win.switch_to", "win.dispatch_events", "win.clear", "pyglet.gl.glViewport", "t.enable", "car_racing.CarRacing.render_road", "t.disable", "car_racing.CarRacing.render_indicators", "pyglet.image.get_buffer_manager().get_color_buffer().get_image_data", "numpy.fromstring", "arr.reshape.reshape.reshape", "win.flip", "win.clear", "pyglet.gl.glViewport", "t.enable", "car_racing.CarRacing.render_road", "t.disable", "car_racing.CarRacing.render_indicators", "win.flip", "max", "min", "geom.render", "geom.render", "pyglet.image.get_buffer_manager().get_color_buffer", "math.cos", "math.sin", "math.sin", "math.cos", "pyglet.image.get_buffer_manager"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_scale", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_dynamics.Car.draw", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render_road", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.disable", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render_indicators", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render_road", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.disable", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render_indicators", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "self", ".", "score_label", "=", "pyglet", ".", "text", ".", "Label", "(", "'0000'", ",", "font_size", "=", "36", ",", "\n", "x", "=", "20", ",", "y", "=", "WINDOW_H", "*", "2.5", "/", "40.00", ",", "anchor_x", "=", "'left'", ",", "anchor_y", "=", "'center'", ",", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ",", "255", ")", ")", "\n", "self", ".", "transform", "=", "rendering", ".", "Transform", "(", ")", "\n", "\n", "", "if", "\"t\"", "not", "in", "self", ".", "__dict__", ":", "return", "# reset() not called yet", "\n", "\n", "zoom", "=", "0.1", "*", "SCALE", "*", "max", "(", "1", "-", "self", ".", "t", ",", "0", ")", "+", "ZOOM", "*", "SCALE", "*", "min", "(", "self", ".", "t", ",", "1", ")", "# Animate zoom first second", "\n", "zoom_state", "=", "ZOOM", "*", "SCALE", "*", "STATE_W", "/", "WINDOW_W", "\n", "zoom_video", "=", "ZOOM", "*", "SCALE", "*", "VIDEO_W", "/", "WINDOW_W", "\n", "scroll_x", "=", "self", ".", "car", ".", "hull", ".", "position", "[", "0", "]", "\n", "scroll_y", "=", "self", ".", "car", ".", "hull", ".", "position", "[", "1", "]", "\n", "angle", "=", "-", "self", ".", "car", ".", "hull", ".", "angle", "\n", "vel", "=", "self", ".", "car", ".", "hull", ".", "linearVelocity", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "vel", ")", ">", "0.5", ":", "\n", "            ", "angle", "=", "math", ".", "atan2", "(", "vel", "[", "0", "]", ",", "vel", "[", "1", "]", ")", "\n", "", "self", ".", "transform", ".", "set_scale", "(", "zoom", ",", "zoom", ")", "\n", "self", ".", "transform", ".", "set_translation", "(", "\n", "WINDOW_W", "/", "2", "-", "(", "scroll_x", "*", "zoom", "*", "math", ".", "cos", "(", "angle", ")", "-", "scroll_y", "*", "zoom", "*", "math", ".", "sin", "(", "angle", ")", ")", ",", "\n", "WINDOW_H", "/", "4", "-", "(", "scroll_x", "*", "zoom", "*", "math", ".", "sin", "(", "angle", ")", "+", "scroll_y", "*", "zoom", "*", "math", ".", "cos", "(", "angle", ")", ")", ")", "\n", "self", ".", "transform", ".", "set_rotation", "(", "angle", ")", "\n", "\n", "self", ".", "car", ".", "draw", "(", "self", ".", "viewer", ",", "mode", "!=", "\"state_pixels\"", ")", "\n", "\n", "arr", "=", "None", "\n", "win", "=", "self", ".", "viewer", ".", "window", "\n", "if", "mode", "!=", "'state_pixels'", ":", "\n", "            ", "win", ".", "switch_to", "(", ")", "\n", "win", ".", "dispatch_events", "(", ")", "\n", "", "if", "mode", "==", "\"rgb_array\"", "or", "mode", "==", "\"state_pixels\"", ":", "\n", "            ", "win", ".", "clear", "(", ")", "\n", "t", "=", "self", ".", "transform", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "                ", "VP_W", "=", "VIDEO_W", "\n", "VP_H", "=", "VIDEO_H", "\n", "", "else", ":", "\n", "                ", "VP_W", "=", "STATE_W", "\n", "VP_H", "=", "STATE_H", "\n", "", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "VP_W", ",", "VP_H", ")", "\n", "t", ".", "enable", "(", ")", "\n", "self", ".", "render_road", "(", ")", "\n", "for", "geom", "in", "self", ".", "viewer", ".", "onetime_geoms", ":", "\n", "                ", "geom", ".", "render", "(", ")", "\n", "", "t", ".", "disable", "(", ")", "\n", "self", ".", "render_indicators", "(", "WINDOW_W", ",", "WINDOW_H", ")", "# TODO: find why 2x needed, wtf", "\n", "image_data", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", ".", "get_image_data", "(", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "arr", "=", "arr", ".", "reshape", "(", "VP_H", ",", "VP_W", ",", "4", ")", "\n", "arr", "=", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "if", "mode", "==", "\"rgb_array\"", "and", "not", "self", ".", "human_render", ":", "# agent can call or not call env.render() itself when recording video.", "\n", "            ", "win", ".", "flip", "(", ")", "\n", "\n", "", "if", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "human_render", "=", "True", "\n", "win", ".", "clear", "(", ")", "\n", "t", "=", "self", ".", "transform", "\n", "gl", ".", "glViewport", "(", "0", ",", "0", ",", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "t", ".", "enable", "(", ")", "\n", "self", ".", "render_road", "(", ")", "\n", "for", "geom", "in", "self", ".", "viewer", ".", "onetime_geoms", ":", "\n", "                ", "geom", ".", "render", "(", ")", "\n", "", "t", ".", "disable", "(", ")", "\n", "self", ".", "render_indicators", "(", "WINDOW_W", ",", "WINDOW_H", ")", "\n", "win", ".", "flip", "(", ")", "\n", "\n", "", "self", ".", "viewer", ".", "onetime_geoms", "=", "[", "]", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.close": [[397, 401], ["car_racing.CarRacing.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render_road": [[402, 422], ["pyglet.gl.glBegin", "pyglet.gl.glColor4f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glColor4f", "range", "pyglet.gl.glEnd", "range", "pyglet.gl.glColor4f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f"], "methods", ["None"], ["", "", "def", "render_road", "(", "self", ")", ":", "\n", "        ", "gl", ".", "glBegin", "(", "gl", ".", "GL_QUADS", ")", "\n", "gl", ".", "glColor4f", "(", "0.4", ",", "0.8", ",", "0.4", ",", "1.0", ")", "\n", "gl", ".", "glVertex3f", "(", "-", "PLAYFIELD", ",", "+", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "+", "PLAYFIELD", ",", "+", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "+", "PLAYFIELD", ",", "-", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "-", "PLAYFIELD", ",", "-", "PLAYFIELD", ",", "0", ")", "\n", "gl", ".", "glColor4f", "(", "0.4", ",", "0.9", ",", "0.4", ",", "1.0", ")", "\n", "k", "=", "PLAYFIELD", "/", "20.0", "\n", "for", "x", "in", "range", "(", "-", "20", ",", "20", ",", "2", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "-", "20", ",", "20", ",", "2", ")", ":", "\n", "                ", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "k", ",", "k", "*", "y", "+", "0", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "0", ",", "k", "*", "y", "+", "0", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "0", ",", "k", "*", "y", "+", "k", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "k", "*", "x", "+", "k", ",", "k", "*", "y", "+", "k", ",", "0", ")", "\n", "", "", "for", "poly", ",", "color", "in", "self", ".", "road_poly", ":", "\n", "            ", "gl", ".", "glColor4f", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", ")", "\n", "for", "p", "in", "poly", ":", "\n", "                ", "gl", ".", "glVertex3f", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "\n", "", "", "gl", ".", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.car_racing.CarRacing.render_indicators": [[423, 455], ["pyglet.gl.glBegin", "pyglet.gl.glColor4f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "pyglet.gl.glVertex3f", "numpy.sqrt", "car_racing.CarRacing.render_indicators.vertical_ind"], "methods", ["None"], ["", "def", "render_indicators", "(", "self", ",", "W", ",", "H", ")", ":", "\n", "        ", "gl", ".", "glBegin", "(", "gl", ".", "GL_QUADS", ")", "\n", "s", "=", "W", "/", "40.0", "\n", "h", "=", "H", "/", "40.0", "\n", "gl", ".", "glColor4f", "(", "0", ",", "0", ",", "0", ",", "1", ")", "\n", "gl", ".", "glVertex3f", "(", "W", ",", "0", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "W", ",", "5", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "0", ",", "5", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "0", ",", "0", ",", "0", ")", "\n", "def", "vertical_ind", "(", "place", ",", "val", ",", "color", ")", ":", "\n", "            ", "gl", ".", "glColor4f", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "h", "+", "h", "*", "val", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "1", ")", "*", "s", ",", "h", "+", "h", "*", "val", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "1", ")", "*", "s", ",", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "h", ",", "0", ")", "\n", "", "def", "horiz_ind", "(", "place", ",", "val", ",", "color", ")", ":", "\n", "            ", "gl", ".", "glColor4f", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "1", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "4", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "val", ")", "*", "s", ",", "4", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "val", ")", "*", "s", ",", "2", "*", "h", ",", "0", ")", "\n", "gl", ".", "glVertex3f", "(", "(", "place", "+", "0", ")", "*", "s", ",", "2", "*", "h", ",", "0", ")", "\n", "", "true_speed", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "self", ".", "car", ".", "hull", ".", "linearVelocity", "[", "0", "]", ")", "+", "np", ".", "square", "(", "self", ".", "car", ".", "hull", ".", "linearVelocity", "[", "1", "]", ")", ")", "\n", "vertical_ind", "(", "5", ",", "0.02", "*", "true_speed", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "vertical_ind", "(", "7", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "0", "]", ".", "omega", ",", "(", "0.0", ",", "0", ",", "1", ")", ")", "# ABS sensors", "\n", "vertical_ind", "(", "8", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "1", "]", ".", "omega", ",", "(", "0.0", ",", "0", ",", "1", ")", ")", "\n", "vertical_ind", "(", "9", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "2", "]", ".", "omega", ",", "(", "0.2", ",", "0", ",", "1", ")", ")", "\n", "vertical_ind", "(", "10", ",", "0.01", "*", "self", ".", "car", ".", "wheels", "[", "3", "]", ".", "omega", ",", "(", "0.2", ",", "0", ",", "1", ")", ")", "\n", "horiz_ind", "(", "20", ",", "-", "10.0", "*", "self", ".", "car", ".", "wheels", "[", "0", "]", ".", "joint", ".", "angle", ",", "(", "0", ",", "1", ",", "0", ")", ")", "\n", "horiz_ind", "(", "30", ",", "-", "0.8", "*", "self", ".", "car", ".", "hull", ".", "angularVelocity", ",", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "gl", ".", "glEnd", "(", ")", "\n", "self", ".", "score_label", ".", "text", "=", "\"%04i\"", "%", "self", ".", "reward", "\n", "self", ".", "score_label", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.ContactDetector.__init__": [[89, 92], ["Box2D.b2.contactListener.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "contactListener", ".", "__init__", "(", "self", ")", "\n", "self", ".", "env", "=", "env", "\n", "", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.ContactDetector.BeginContact": [[92, 98], ["None"], "methods", ["None"], ["", "def", "BeginContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "hull", "==", "contact", ".", "fixtureA", ".", "body", "or", "self", ".", "env", ".", "hull", "==", "contact", ".", "fixtureB", ".", "body", ":", "\n", "            ", "self", ".", "env", ".", "game_over", "=", "True", "\n", "", "for", "leg", "in", "[", "self", ".", "env", ".", "legs", "[", "1", "]", ",", "self", ".", "env", ".", "legs", "[", "3", "]", "]", ":", "\n", "            ", "if", "leg", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "leg", ".", "ground_contact", "=", "True", "\n", "", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.ContactDetector.EndContact": [[98, 102], ["None"], "methods", ["None"], ["", "", "", "def", "EndContact", "(", "self", ",", "contact", ")", ":", "\n", "        ", "for", "leg", "in", "[", "self", ".", "env", ".", "legs", "[", "1", "]", ",", "self", ".", "env", ".", "legs", "[", "3", "]", "]", ":", "\n", "            ", "if", "leg", "in", "[", "contact", ".", "fixtureA", ".", "body", ",", "contact", ".", "fixtureB", ".", "body", "]", ":", "\n", "                ", "leg", ".", "ground_contact", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker.__init__": [[111, 142], ["bipedal_walker.BipedalWalker.seed", "Box2D.b2World", "Box2D.b2.fixtureDef", "Box2D.b2.fixtureDef", "bipedal_walker.BipedalWalker.reset", "numpy.array", "gym.spaces.Box", "gym.spaces.Box", "numpy.array", "numpy.array", "Box2D.b2.polygonShape", "Box2D.b2.edgeShape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "world", "=", "Box2D", ".", "b2World", "(", ")", "\n", "self", ".", "terrain", "=", "None", "\n", "self", ".", "hull", "=", "None", "\n", "\n", "self", ".", "prev_shaping", "=", "None", "\n", "\n", "self", ".", "fd_polygon", "=", "fixtureDef", "(", "\n", "shape", "=", "polygonShape", "(", "vertices", "=", "\n", "[", "(", "0", ",", "0", ")", ",", "\n", "(", "1", ",", "0", ")", ",", "\n", "(", "1", ",", "-", "1", ")", ",", "\n", "(", "0", ",", "-", "1", ")", "]", ")", ",", "\n", "friction", "=", "FRICTION", ")", "\n", "\n", "self", ".", "fd_edge", "=", "fixtureDef", "(", "\n", "shape", "=", "edgeShape", "(", "vertices", "=", "\n", "[", "(", "0", ",", "0", ")", ",", "\n", "(", "1", ",", "1", ")", "]", ")", ",", "\n", "friction", "=", "FRICTION", ",", "\n", "categoryBits", "=", "0x0001", ",", "\n", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "high", "=", "np", ".", "array", "(", "[", "np", ".", "inf", "]", "*", "24", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "+", "1", ",", "+", "1", ",", "+", "1", ",", "+", "1", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "high", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker.seed": [[143, 146], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._destroy": [[147, 159], ["bipedal_walker.BipedalWalker.world.DestroyBody", "bipedal_walker.BipedalWalker.world.DestroyBody", "bipedal_walker.BipedalWalker.world.DestroyBody"], "methods", ["None"], ["", "def", "_destroy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "terrain", ":", "return", "\n", "self", ".", "world", ".", "contactListener", "=", "None", "\n", "for", "t", "in", "self", ".", "terrain", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "t", ")", "\n", "", "self", ".", "terrain", "=", "[", "]", "\n", "self", ".", "world", ".", "DestroyBody", "(", "self", ".", "hull", ")", "\n", "self", ".", "hull", "=", "None", "\n", "for", "leg", "in", "self", ".", "legs", ":", "\n", "            ", "self", ".", "world", ".", "DestroyBody", "(", "leg", ")", "\n", "", "self", ".", "legs", "=", "[", "]", "\n", "self", ".", "joints", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._generate_terrain": [[160, 273], ["range", "range", "range", "bipedal_walker.BipedalWalker.terrain.reverse", "bipedal_walker.BipedalWalker.terrain_x.append", "bipedal_walker.BipedalWalker.terrain_y.append", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.terrain_poly.append", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.np_random.randint", "numpy.sign", "bipedal_walker.BipedalWalker.np_random.uniform", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.np_random.randint", "bipedal_walker.BipedalWalker.np_random.randint", "range", "bipedal_walker.BipedalWalker.world.CreateStaticBody", "bipedal_walker.BipedalWalker.terrain.append", "bipedal_walker.BipedalWalker.np_random.rand"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_generate_terrain", "(", "self", ",", "hardcore", ")", ":", "\n", "        ", "GRASS", ",", "STUMP", ",", "STAIRS", ",", "PIT", ",", "_STATES_", "=", "range", "(", "5", ")", "\n", "state", "=", "GRASS", "\n", "velocity", "=", "0.0", "\n", "y", "=", "TERRAIN_HEIGHT", "\n", "counter", "=", "TERRAIN_STARTPAD", "\n", "oneshot", "=", "False", "\n", "self", ".", "terrain", "=", "[", "]", "\n", "self", ".", "terrain_x", "=", "[", "]", "\n", "self", ".", "terrain_y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "TERRAIN_LENGTH", ")", ":", "\n", "            ", "x", "=", "i", "*", "TERRAIN_STEP", "\n", "self", ".", "terrain_x", ".", "append", "(", "x", ")", "\n", "\n", "if", "state", "==", "GRASS", "and", "not", "oneshot", ":", "\n", "                ", "velocity", "=", "0.8", "*", "velocity", "+", "0.01", "*", "np", ".", "sign", "(", "TERRAIN_HEIGHT", "-", "y", ")", "\n", "if", "i", ">", "TERRAIN_STARTPAD", ":", "velocity", "+=", "self", ".", "np_random", ".", "uniform", "(", "-", "1", ",", "1", ")", "/", "SCALE", "#1", "\n", "y", "+=", "velocity", "\n", "\n", "", "elif", "state", "==", "PIT", "and", "oneshot", ":", "\n", "                ", "counter", "=", "self", ".", "np_random", ".", "randint", "(", "3", ",", "5", ")", "\n", "poly", "=", "[", "\n", "(", "x", ",", "y", ")", ",", "\n", "(", "x", "+", "TERRAIN_STEP", ",", "y", ")", ",", "\n", "(", "x", "+", "TERRAIN_STEP", ",", "y", "-", "4", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", ",", "y", "-", "4", "*", "TERRAIN_STEP", ")", ",", "\n", "]", "\n", "self", ".", "fd_polygon", ".", "shape", ".", "vertices", "=", "poly", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "self", ".", "fd_polygon", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "\n", "self", ".", "fd_polygon", ".", "shape", ".", "vertices", "=", "[", "(", "p", "[", "0", "]", "+", "TERRAIN_STEP", "*", "counter", ",", "p", "[", "1", "]", ")", "for", "p", "in", "poly", "]", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "self", ".", "fd_polygon", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "counter", "+=", "2", "\n", "original_y", "=", "y", "\n", "\n", "", "elif", "state", "==", "PIT", "and", "not", "oneshot", ":", "\n", "                ", "y", "=", "original_y", "\n", "if", "counter", ">", "1", ":", "\n", "                    ", "y", "-=", "4", "*", "TERRAIN_STEP", "\n", "\n", "", "", "elif", "state", "==", "STUMP", "and", "oneshot", ":", "\n", "                ", "counter", "=", "self", ".", "np_random", ".", "randint", "(", "1", ",", "3", ")", "\n", "poly", "=", "[", "\n", "(", "x", ",", "y", ")", ",", "\n", "(", "x", "+", "counter", "*", "TERRAIN_STEP", ",", "y", ")", ",", "\n", "(", "x", "+", "counter", "*", "TERRAIN_STEP", ",", "y", "+", "counter", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", ",", "y", "+", "counter", "*", "TERRAIN_STEP", ")", ",", "\n", "]", "\n", "self", ".", "fd_polygon", ".", "shape", ".", "vertices", "=", "poly", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "self", ".", "fd_polygon", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "\n", "", "elif", "state", "==", "STAIRS", "and", "oneshot", ":", "\n", "                ", "stair_height", "=", "+", "1", "if", "self", ".", "np_random", ".", "rand", "(", ")", ">", "0.5", "else", "-", "1", "\n", "stair_width", "=", "self", ".", "np_random", ".", "randint", "(", "4", ",", "5", ")", "\n", "stair_steps", "=", "self", ".", "np_random", ".", "randint", "(", "3", ",", "5", ")", "\n", "original_y", "=", "y", "\n", "for", "s", "in", "range", "(", "stair_steps", ")", ":", "\n", "                    ", "poly", "=", "[", "\n", "(", "x", "+", "(", "s", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", "+", "(", "(", "1", "+", "s", ")", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", "+", "(", "(", "1", "+", "s", ")", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "-", "1", "+", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "(", "x", "+", "(", "s", "*", "stair_width", ")", "*", "TERRAIN_STEP", ",", "y", "+", "(", "-", "1", "+", "s", "*", "stair_height", ")", "*", "TERRAIN_STEP", ")", ",", "\n", "]", "\n", "self", ".", "fd_polygon", ".", "shape", ".", "vertices", "=", "poly", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "self", ".", "fd_polygon", ")", "\n", "t", ".", "color1", ",", "t", ".", "color2", "=", "(", "1", ",", "1", ",", "1", ")", ",", "(", "0.6", ",", "0.6", ",", "0.6", ")", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "", "counter", "=", "stair_steps", "*", "stair_width", "\n", "\n", "", "elif", "state", "==", "STAIRS", "and", "not", "oneshot", ":", "\n", "                ", "s", "=", "stair_steps", "*", "stair_width", "-", "counter", "-", "stair_height", "\n", "n", "=", "s", "/", "stair_width", "\n", "y", "=", "original_y", "+", "(", "n", "*", "stair_height", ")", "*", "TERRAIN_STEP", "\n", "\n", "", "oneshot", "=", "False", "\n", "self", ".", "terrain_y", ".", "append", "(", "y", ")", "\n", "counter", "-=", "1", "\n", "if", "counter", "==", "0", ":", "\n", "                ", "counter", "=", "self", ".", "np_random", ".", "randint", "(", "TERRAIN_GRASS", "/", "2", ",", "TERRAIN_GRASS", ")", "\n", "if", "state", "==", "GRASS", "and", "hardcore", ":", "\n", "                    ", "state", "=", "self", ".", "np_random", ".", "randint", "(", "1", ",", "_STATES_", ")", "\n", "oneshot", "=", "True", "\n", "", "else", ":", "\n", "                    ", "state", "=", "GRASS", "\n", "oneshot", "=", "True", "\n", "\n", "", "", "", "self", ".", "terrain_poly", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "TERRAIN_LENGTH", "-", "1", ")", ":", "\n", "            ", "poly", "=", "[", "\n", "(", "self", ".", "terrain_x", "[", "i", "]", ",", "self", ".", "terrain_y", "[", "i", "]", ")", ",", "\n", "(", "self", ".", "terrain_x", "[", "i", "+", "1", "]", ",", "self", ".", "terrain_y", "[", "i", "+", "1", "]", ")", "\n", "]", "\n", "self", ".", "fd_edge", ".", "shape", ".", "vertices", "=", "poly", "\n", "t", "=", "self", ".", "world", ".", "CreateStaticBody", "(", "\n", "fixtures", "=", "self", ".", "fd_edge", ")", "\n", "color", "=", "(", "0.3", ",", "1.0", "if", "i", "%", "2", "==", "0", "else", "0.8", ",", "0.3", ")", "\n", "t", ".", "color1", "=", "color", "\n", "t", ".", "color2", "=", "color", "\n", "self", ".", "terrain", ".", "append", "(", "t", ")", "\n", "color", "=", "(", "0.4", ",", "0.6", ",", "0.3", ")", "\n", "poly", "+=", "[", "(", "poly", "[", "1", "]", "[", "0", "]", ",", "0", ")", ",", "(", "poly", "[", "0", "]", "[", "0", "]", ",", "0", ")", "]", "\n", "self", ".", "terrain_poly", ".", "append", "(", "(", "poly", ",", "color", ")", ")", "\n", "", "self", ".", "terrain", ".", "reverse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._generate_clouds": [[274, 287], ["range", "min", "max", "bipedal_walker.BipedalWalker.cloud_poly.append", "bipedal_walker.BipedalWalker.np_random.uniform", "range", "bipedal_walker.BipedalWalker.np_random.uniform", "bipedal_walker.BipedalWalker.np_random.uniform", "math.sin", "math.cos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_generate_clouds", "(", "self", ")", ":", "\n", "# Sorry for the clouds, couldn't resist", "\n", "        ", "self", ".", "cloud_poly", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "TERRAIN_LENGTH", "//", "20", ")", ":", "\n", "            ", "x", "=", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "TERRAIN_LENGTH", ")", "*", "TERRAIN_STEP", "\n", "y", "=", "VIEWPORT_H", "/", "SCALE", "*", "3", "/", "4", "\n", "poly", "=", "[", "\n", "(", "x", "+", "15", "*", "TERRAIN_STEP", "*", "math", ".", "sin", "(", "3.14", "*", "2", "*", "a", "/", "5", ")", "+", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "5", "*", "TERRAIN_STEP", ")", ",", "\n", "y", "+", "5", "*", "TERRAIN_STEP", "*", "math", ".", "cos", "(", "3.14", "*", "2", "*", "a", "/", "5", ")", "+", "self", ".", "np_random", ".", "uniform", "(", "0", ",", "5", "*", "TERRAIN_STEP", ")", ")", "\n", "for", "a", "in", "range", "(", "5", ")", "]", "\n", "x1", "=", "min", "(", "[", "p", "[", "0", "]", "for", "p", "in", "poly", "]", ")", "\n", "x2", "=", "max", "(", "[", "p", "[", "0", "]", "for", "p", "in", "poly", "]", ")", "\n", "self", ".", "cloud_poly", ".", "append", "(", "(", "poly", ",", "x1", ",", "x2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker.reset": [[288, 373], ["bipedal_walker.BipedalWalker._destroy", "bipedal_walker.ContactDetector", "bipedal_walker.BipedalWalker._generate_terrain", "bipedal_walker.BipedalWalker._generate_clouds", "bipedal_walker.BipedalWalker.world.CreateDynamicBody", "bipedal_walker.BipedalWalker.hull.ApplyForceToCenter", "bipedal_walker.BipedalWalker.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "bipedal_walker.BipedalWalker.legs.append", "bipedal_walker.BipedalWalker.joints.append", "bipedal_walker.BipedalWalker.world.CreateDynamicBody", "Box2D.b2.revoluteJointDef", "bipedal_walker.BipedalWalker.legs.append", "bipedal_walker.BipedalWalker.joints.append", "LidarCallback", "bipedal_walker.BipedalWalker.step", "bipedal_walker.BipedalWalker.np_random.uniform", "bipedal_walker.BipedalWalker.world.CreateJoint", "bipedal_walker.BipedalWalker.world.CreateJoint", "range", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._destroy", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._generate_terrain", "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker._generate_clouds", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_destroy", "(", ")", "\n", "self", ".", "world", ".", "contactListener_bug_workaround", "=", "ContactDetector", "(", "self", ")", "\n", "self", ".", "world", ".", "contactListener", "=", "self", ".", "world", ".", "contactListener_bug_workaround", "\n", "self", ".", "game_over", "=", "False", "\n", "self", ".", "prev_shaping", "=", "None", "\n", "self", ".", "scroll", "=", "0.0", "\n", "self", ".", "lidar_render", "=", "0", "\n", "\n", "W", "=", "VIEWPORT_W", "/", "SCALE", "\n", "H", "=", "VIEWPORT_H", "/", "SCALE", "\n", "\n", "self", ".", "_generate_terrain", "(", "self", ".", "hardcore", ")", "\n", "self", ".", "_generate_clouds", "(", ")", "\n", "\n", "init_x", "=", "TERRAIN_STEP", "*", "TERRAIN_STARTPAD", "/", "2", "\n", "init_y", "=", "TERRAIN_HEIGHT", "+", "2", "*", "LEG_H", "\n", "self", ".", "hull", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", ")", ",", "\n", "fixtures", "=", "HULL_FD", "\n", ")", "\n", "self", ".", "hull", ".", "color1", "=", "(", "0.5", ",", "0.4", ",", "0.9", ")", "\n", "self", ".", "hull", ".", "color2", "=", "(", "0.3", ",", "0.3", ",", "0.5", ")", "\n", "self", ".", "hull", ".", "ApplyForceToCenter", "(", "(", "self", ".", "np_random", ".", "uniform", "(", "-", "INITIAL_RANDOM", ",", "INITIAL_RANDOM", ")", ",", "0", ")", ",", "True", ")", "\n", "\n", "self", ".", "legs", "=", "[", "]", "\n", "self", ".", "joints", "=", "[", "]", "\n", "for", "i", "in", "[", "-", "1", ",", "+", "1", "]", ":", "\n", "            ", "leg", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", "-", "LEG_H", "/", "2", "-", "LEG_DOWN", ")", ",", "\n", "angle", "=", "(", "i", "*", "0.05", ")", ",", "\n", "fixtures", "=", "LEG_FD", "\n", ")", "\n", "leg", ".", "color1", "=", "(", "0.6", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ",", "0.5", "-", "i", "/", "10.", ")", "\n", "leg", ".", "color2", "=", "(", "0.4", "-", "i", "/", "10.", ",", "0.2", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ")", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "self", ".", "hull", ",", "\n", "bodyB", "=", "leg", ",", "\n", "localAnchorA", "=", "(", "0", ",", "LEG_DOWN", ")", ",", "\n", "localAnchorB", "=", "(", "0", ",", "LEG_H", "/", "2", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "MOTORS_TORQUE", ",", "\n", "motorSpeed", "=", "i", ",", "\n", "lowerAngle", "=", "-", "0.8", ",", "\n", "upperAngle", "=", "1.1", ",", "\n", ")", "\n", "self", ".", "legs", ".", "append", "(", "leg", ")", "\n", "self", ".", "joints", ".", "append", "(", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", ")", "\n", "\n", "lower", "=", "self", ".", "world", ".", "CreateDynamicBody", "(", "\n", "position", "=", "(", "init_x", ",", "init_y", "-", "LEG_H", "*", "3", "/", "2", "-", "LEG_DOWN", ")", ",", "\n", "angle", "=", "(", "i", "*", "0.05", ")", ",", "\n", "fixtures", "=", "LOWER_FD", "\n", ")", "\n", "lower", ".", "color1", "=", "(", "0.6", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ",", "0.5", "-", "i", "/", "10.", ")", "\n", "lower", ".", "color2", "=", "(", "0.4", "-", "i", "/", "10.", ",", "0.2", "-", "i", "/", "10.", ",", "0.3", "-", "i", "/", "10.", ")", "\n", "rjd", "=", "revoluteJointDef", "(", "\n", "bodyA", "=", "leg", ",", "\n", "bodyB", "=", "lower", ",", "\n", "localAnchorA", "=", "(", "0", ",", "-", "LEG_H", "/", "2", ")", ",", "\n", "localAnchorB", "=", "(", "0", ",", "LEG_H", "/", "2", ")", ",", "\n", "enableMotor", "=", "True", ",", "\n", "enableLimit", "=", "True", ",", "\n", "maxMotorTorque", "=", "MOTORS_TORQUE", ",", "\n", "motorSpeed", "=", "1", ",", "\n", "lowerAngle", "=", "-", "1.6", ",", "\n", "upperAngle", "=", "-", "0.1", ",", "\n", ")", "\n", "lower", ".", "ground_contact", "=", "False", "\n", "self", ".", "legs", ".", "append", "(", "lower", ")", "\n", "self", ".", "joints", ".", "append", "(", "self", ".", "world", ".", "CreateJoint", "(", "rjd", ")", ")", "\n", "\n", "", "self", ".", "drawlist", "=", "self", ".", "terrain", "+", "self", ".", "legs", "+", "[", "self", ".", "hull", "]", "\n", "\n", "class", "LidarCallback", "(", "Box2D", ".", "b2", ".", "rayCastCallback", ")", ":", "\n", "            ", "def", "ReportFixture", "(", "self", ",", "fixture", ",", "point", ",", "normal", ",", "fraction", ")", ":", "\n", "                ", "if", "(", "fixture", ".", "filterData", ".", "categoryBits", "&", "1", ")", "==", "0", ":", "\n", "                    ", "return", "1", "\n", "", "self", ".", "p2", "=", "point", "\n", "self", ".", "fraction", "=", "fraction", "\n", "return", "0", "\n", "", "", "self", ".", "lidar", "=", "[", "LidarCallback", "(", ")", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "\n", "return", "self", ".", "step", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker.step": [[374, 445], ["bipedal_walker.BipedalWalker.world.Step", "range", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "bipedal_walker.BipedalWalker.world.RayCast", "len", "abs", "numpy.array", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.sign", "numpy.clip", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "math.sin", "math.cos"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "#self.hull.ApplyForceToCenter((0, 20), True) -- Uncomment this to receive a bit of stability help", "\n", "        ", "control_speed", "=", "False", "# Should be easier as well", "\n", "if", "control_speed", ":", "\n", "            ", "self", ".", "joints", "[", "0", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "clip", "(", "action", "[", "0", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "1", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "clip", "(", "action", "[", "1", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "2", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "clip", "(", "action", "[", "2", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "3", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "clip", "(", "action", "[", "3", "]", ",", "-", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "joints", "[", "0", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "sign", "(", "action", "[", "0", "]", ")", ")", "\n", "self", ".", "joints", "[", "0", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "0", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "1", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "sign", "(", "action", "[", "1", "]", ")", ")", "\n", "self", ".", "joints", "[", "1", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "1", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "2", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_HIP", "*", "np", ".", "sign", "(", "action", "[", "2", "]", ")", ")", "\n", "self", ".", "joints", "[", "2", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "2", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "joints", "[", "3", "]", ".", "motorSpeed", "=", "float", "(", "SPEED_KNEE", "*", "np", ".", "sign", "(", "action", "[", "3", "]", ")", ")", "\n", "self", ".", "joints", "[", "3", "]", ".", "maxMotorTorque", "=", "float", "(", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "action", "[", "3", "]", ")", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "world", ".", "Step", "(", "1.0", "/", "FPS", ",", "6", "*", "30", ",", "2", "*", "30", ")", "\n", "\n", "pos", "=", "self", ".", "hull", ".", "position", "\n", "vel", "=", "self", ".", "hull", ".", "linearVelocity", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "lidar", "[", "i", "]", ".", "fraction", "=", "1.0", "\n", "self", ".", "lidar", "[", "i", "]", ".", "p1", "=", "pos", "\n", "self", ".", "lidar", "[", "i", "]", ".", "p2", "=", "(", "\n", "pos", "[", "0", "]", "+", "math", ".", "sin", "(", "1.5", "*", "i", "/", "10.0", ")", "*", "LIDAR_RANGE", ",", "\n", "pos", "[", "1", "]", "-", "math", ".", "cos", "(", "1.5", "*", "i", "/", "10.0", ")", "*", "LIDAR_RANGE", ")", "\n", "self", ".", "world", ".", "RayCast", "(", "self", ".", "lidar", "[", "i", "]", ",", "self", ".", "lidar", "[", "i", "]", ".", "p1", ",", "self", ".", "lidar", "[", "i", "]", ".", "p2", ")", "\n", "\n", "", "state", "=", "[", "\n", "self", ".", "hull", ".", "angle", ",", "# Normal angles up to 0.5 here, but sure more is possible.", "\n", "2.0", "*", "self", ".", "hull", ".", "angularVelocity", "/", "FPS", ",", "\n", "0.3", "*", "vel", ".", "x", "*", "(", "VIEWPORT_W", "/", "SCALE", ")", "/", "FPS", ",", "# Normalized to get -1..1 range", "\n", "0.3", "*", "vel", ".", "y", "*", "(", "VIEWPORT_H", "/", "SCALE", ")", "/", "FPS", ",", "\n", "self", ".", "joints", "[", "0", "]", ".", "angle", ",", "# This will give 1.1 on high up, but it's still OK (and there should be spikes on hiting the ground, that's normal too)", "\n", "self", ".", "joints", "[", "0", "]", ".", "speed", "/", "SPEED_HIP", ",", "\n", "self", ".", "joints", "[", "1", "]", ".", "angle", "+", "1.0", ",", "\n", "self", ".", "joints", "[", "1", "]", ".", "speed", "/", "SPEED_KNEE", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "1", "]", ".", "ground_contact", "else", "0.0", ",", "\n", "self", ".", "joints", "[", "2", "]", ".", "angle", ",", "\n", "self", ".", "joints", "[", "2", "]", ".", "speed", "/", "SPEED_HIP", ",", "\n", "self", ".", "joints", "[", "3", "]", ".", "angle", "+", "1.0", ",", "\n", "self", ".", "joints", "[", "3", "]", ".", "speed", "/", "SPEED_KNEE", ",", "\n", "1.0", "if", "self", ".", "legs", "[", "3", "]", ".", "ground_contact", "else", "0.0", "\n", "]", "\n", "state", "+=", "[", "l", ".", "fraction", "for", "l", "in", "self", ".", "lidar", "]", "\n", "assert", "len", "(", "state", ")", "==", "24", "\n", "\n", "self", ".", "scroll", "=", "pos", ".", "x", "-", "VIEWPORT_W", "/", "SCALE", "/", "5", "\n", "\n", "shaping", "=", "130", "*", "pos", "[", "0", "]", "/", "SCALE", "# moving forward is a way to receive reward (normalized to get 300 on completion)", "\n", "shaping", "-=", "5.0", "*", "abs", "(", "state", "[", "0", "]", ")", "# keep head straight, other than that and falling, any behavior is unpunished", "\n", "\n", "reward", "=", "0", "\n", "if", "self", ".", "prev_shaping", "is", "not", "None", ":", "\n", "            ", "reward", "=", "shaping", "-", "self", ".", "prev_shaping", "\n", "", "self", ".", "prev_shaping", "=", "shaping", "\n", "\n", "for", "a", "in", "action", ":", "\n", "            ", "reward", "-=", "0.00035", "*", "MOTORS_TORQUE", "*", "np", ".", "clip", "(", "np", ".", "abs", "(", "a", ")", ",", "0", ",", "1", ")", "\n", "# normalized to about -50.0 using heuristic, more optimal agent should spend less", "\n", "\n", "", "done", "=", "False", "\n", "if", "self", ".", "game_over", "or", "pos", "[", "0", "]", "<", "0", ":", "\n", "            ", "reward", "=", "-", "100", "\n", "done", "=", "True", "\n", "", "if", "pos", "[", "0", "]", ">", "(", "TERRAIN_LENGTH", "-", "TERRAIN_GRASS", ")", "*", "TERRAIN_STEP", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "np", ".", "array", "(", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker.render": [[446, 495], ["bipedal_walker.BipedalWalker.viewer.set_bounds", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.render", "rendering.Viewer", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "len", "len", "type", "rendering.Transform", "bipedal_walker.BipedalWalker.viewer.draw_circle().add_attr", "bipedal_walker.BipedalWalker.viewer.draw_circle().add_attr", "bipedal_walker.BipedalWalker.viewer.draw_polygon", "path.append", "bipedal_walker.BipedalWalker.viewer.draw_polyline", "bipedal_walker.BipedalWalker.viewer.draw_circle", "bipedal_walker.BipedalWalker.viewer.draw_circle", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_circle"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "VIEWPORT_W", ",", "VIEWPORT_H", ")", "\n", "", "self", ".", "viewer", ".", "set_bounds", "(", "self", ".", "scroll", ",", "VIEWPORT_W", "/", "SCALE", "+", "self", ".", "scroll", ",", "0", ",", "VIEWPORT_H", "/", "SCALE", ")", "\n", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "\n", "(", "self", ".", "scroll", ",", "0", ")", ",", "\n", "(", "self", ".", "scroll", "+", "VIEWPORT_W", "/", "SCALE", ",", "0", ")", ",", "\n", "(", "self", ".", "scroll", "+", "VIEWPORT_W", "/", "SCALE", ",", "VIEWPORT_H", "/", "SCALE", ")", ",", "\n", "(", "self", ".", "scroll", ",", "VIEWPORT_H", "/", "SCALE", ")", ",", "\n", "]", ",", "color", "=", "(", "0.9", ",", "0.9", ",", "1.0", ")", ")", "\n", "for", "poly", ",", "x1", ",", "x2", "in", "self", ".", "cloud_poly", ":", "\n", "            ", "if", "x2", "<", "self", ".", "scroll", "/", "2", ":", "continue", "\n", "if", "x1", ">", "self", ".", "scroll", "/", "2", "+", "VIEWPORT_W", "/", "SCALE", ":", "continue", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "(", "p", "[", "0", "]", "+", "self", ".", "scroll", "/", "2", ",", "p", "[", "1", "]", ")", "for", "p", "in", "poly", "]", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "for", "poly", ",", "color", "in", "self", ".", "terrain_poly", ":", "\n", "            ", "if", "poly", "[", "1", "]", "[", "0", "]", "<", "self", ".", "scroll", ":", "continue", "\n", "if", "poly", "[", "0", "]", "[", "0", "]", ">", "self", ".", "scroll", "+", "VIEWPORT_W", "/", "SCALE", ":", "continue", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "poly", ",", "color", "=", "color", ")", "\n", "\n", "", "self", ".", "lidar_render", "=", "(", "self", ".", "lidar_render", "+", "1", ")", "%", "100", "\n", "i", "=", "self", ".", "lidar_render", "\n", "if", "i", "<", "2", "*", "len", "(", "self", ".", "lidar", ")", ":", "\n", "            ", "l", "=", "self", ".", "lidar", "[", "i", "]", "if", "i", "<", "len", "(", "self", ".", "lidar", ")", "else", "self", ".", "lidar", "[", "len", "(", "self", ".", "lidar", ")", "-", "i", "-", "1", "]", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "[", "l", ".", "p1", ",", "l", ".", "p2", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "linewidth", "=", "1", ")", "\n", "\n", "", "for", "obj", "in", "self", ".", "drawlist", ":", "\n", "            ", "for", "f", "in", "obj", ".", "fixtures", ":", "\n", "                ", "trans", "=", "f", ".", "body", ".", "transform", "\n", "if", "type", "(", "f", ".", "shape", ")", "is", "circleShape", ":", "\n", "                    ", "t", "=", "rendering", ".", "Transform", "(", "translation", "=", "trans", "*", "f", ".", "shape", ".", "pos", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "30", ",", "color", "=", "obj", ".", "color1", ")", ".", "add_attr", "(", "t", ")", "\n", "self", ".", "viewer", ".", "draw_circle", "(", "f", ".", "shape", ".", "radius", ",", "30", ",", "color", "=", "obj", ".", "color2", ",", "filled", "=", "False", ",", "linewidth", "=", "2", ")", ".", "add_attr", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "path", "=", "[", "trans", "*", "v", "for", "v", "in", "f", ".", "shape", ".", "vertices", "]", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "path", ",", "color", "=", "obj", ".", "color1", ")", "\n", "path", ".", "append", "(", "path", "[", "0", "]", ")", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "path", ",", "color", "=", "obj", ".", "color2", ",", "linewidth", "=", "2", ")", "\n", "\n", "", "", "", "flagy1", "=", "TERRAIN_HEIGHT", "\n", "flagy2", "=", "flagy1", "+", "50", "/", "SCALE", "\n", "x", "=", "TERRAIN_STEP", "*", "3", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "[", "(", "x", ",", "flagy1", ")", ",", "(", "x", ",", "flagy2", ")", "]", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "linewidth", "=", "2", ")", "\n", "f", "=", "[", "(", "x", ",", "flagy2", ")", ",", "(", "x", ",", "flagy2", "-", "10", "/", "SCALE", ")", ",", "(", "x", "+", "25", "/", "SCALE", ",", "flagy2", "-", "5", "/", "SCALE", ")", "]", "\n", "self", ".", "viewer", ".", "draw_polygon", "(", "f", ",", "color", "=", "(", "0.9", ",", "0.2", ",", "0", ")", ")", "\n", "self", ".", "viewer", ".", "draw_polyline", "(", "f", "+", "[", "f", "[", "0", "]", "]", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "linewidth", "=", "2", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.box2d.bipedal_walker.BipedalWalker.close": [[496, 500], ["bipedal_walker.BipedalWalker.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.__init__": [[22, 54], ["gym.utils.EzPickle.__init__", "atari_py.get_game_path", "atari_py.ALEInterface", "isinstance", "atari_env.AtariEnv.ale.setFloat", "atari_env.AtariEnv.seed", "atari_env.AtariEnv.ale.getMinimalActionSet", "gym.spaces.Discrete", "atari_env.AtariEnv.ale.getScreenDims", "os.path.exists", "IOError", "len", "gym.spaces.Box", "gym.spaces.Box", "gym.error.Error"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["def", "__init__", "(", "self", ",", "game", "=", "'pong'", ",", "obs_type", "=", "'ram'", ",", "frameskip", "=", "(", "2", ",", "5", ")", ",", "repeat_action_probability", "=", "0.", ")", ":", "\n", "        ", "\"\"\"Frameskip should be either a tuple (indicating a random range to\n        choose from, with the top value exclude), or an int.\"\"\"", "\n", "\n", "utils", ".", "EzPickle", ".", "__init__", "(", "self", ",", "game", ",", "obs_type", ")", "\n", "assert", "obs_type", "in", "(", "'ram'", ",", "'image'", ")", "\n", "\n", "self", ".", "game_path", "=", "atari_py", ".", "get_game_path", "(", "game", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "game_path", ")", ":", "\n", "            ", "raise", "IOError", "(", "'You asked for game %s but path %s does not exist'", "%", "(", "game", ",", "self", ".", "game_path", ")", ")", "\n", "", "self", ".", "_obs_type", "=", "obs_type", "\n", "self", ".", "frameskip", "=", "frameskip", "\n", "self", ".", "ale", "=", "atari_py", ".", "ALEInterface", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "# Tune (or disable) ALE's action repeat:", "\n", "# https://github.com/openai/gym/issues/349", "\n", "assert", "isinstance", "(", "repeat_action_probability", ",", "(", "float", ",", "int", ")", ")", ",", "\"Invalid repeat_action_probability: {!r}\"", ".", "format", "(", "repeat_action_probability", ")", "\n", "self", ".", "ale", ".", "setFloat", "(", "'repeat_action_probability'", ".", "encode", "(", "'utf-8'", ")", ",", "repeat_action_probability", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "\n", "self", ".", "_action_set", "=", "self", ".", "ale", ".", "getMinimalActionSet", "(", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "_action_set", ")", ")", "\n", "\n", "(", "screen_width", ",", "screen_height", ")", "=", "self", ".", "ale", ".", "getScreenDims", "(", ")", "\n", "if", "self", ".", "_obs_type", "==", "'ram'", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "dtype", "=", "np", ".", "uint8", ",", "shape", "=", "(", "128", ",", ")", ")", "\n", "", "elif", "self", ".", "_obs_type", "==", "'image'", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "screen_height", ",", "screen_width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Unrecognized observation type: {}'", ".", "format", "(", "self", ".", "_obs_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.seed": [[55, 65], ["gym.utils.seeding.np_random", "atari_env.AtariEnv.ale.setInt", "atari_env.AtariEnv.ale.loadROM", "gym.utils.seeding.hash_seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.hash_seed"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed1", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "# Derive a random seed. This gets passed as a uint, but gets", "\n", "# checked as an int elsewhere, so we need to keep it below", "\n", "# 2**31.", "\n", "seed2", "=", "seeding", ".", "hash_seed", "(", "seed1", "+", "1", ")", "%", "2", "**", "31", "\n", "# Empirically, we need to seed before loading the ROM.", "\n", "self", ".", "ale", ".", "setInt", "(", "b'random_seed'", ",", "seed2", ")", "\n", "self", ".", "ale", ".", "loadROM", "(", "self", ".", "game_path", ")", "\n", "return", "[", "seed1", ",", "seed2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.step": [[66, 79], ["isinstance", "range", "atari_env.AtariEnv._get_obs", "atari_env.AtariEnv.np_random.randint", "atari_env.AtariEnv.ale.act", "atari_env.AtariEnv.ale.game_over", "atari_env.AtariEnv.ale.lives"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "reward", "=", "0.0", "\n", "action", "=", "self", ".", "_action_set", "[", "a", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "frameskip", ",", "int", ")", ":", "\n", "            ", "num_steps", "=", "self", ".", "frameskip", "\n", "", "else", ":", "\n", "            ", "num_steps", "=", "self", ".", "np_random", ".", "randint", "(", "self", ".", "frameskip", "[", "0", "]", ",", "self", ".", "frameskip", "[", "1", "]", ")", "\n", "", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "            ", "reward", "+=", "self", ".", "ale", ".", "act", "(", "action", ")", "\n", "", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "\n", "return", "ob", ",", "reward", ",", "self", ".", "ale", ".", "game_over", "(", ")", ",", "{", "\"ale.lives\"", ":", "self", ".", "ale", ".", "lives", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._get_image": [[80, 82], ["atari_env.AtariEnv.ale.getScreenRGB2"], "methods", ["None"], ["", "def", "_get_image", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ale", ".", "getScreenRGB2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._get_ram": [[83, 85], ["atari_env.to_ram"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.to_ram"], ["", "def", "_get_ram", "(", "self", ")", ":", "\n", "        ", "return", "to_ram", "(", "self", ".", "ale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._n_actions": [[86, 89], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "_n_actions", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_action_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._get_obs": [[90, 96], ["atari_env.AtariEnv._get_ram", "atari_env.AtariEnv._get_image"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._get_ram", "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._get_image"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_obs_type", "==", "'ram'", ":", "\n", "            ", "return", "self", ".", "_get_ram", "(", ")", "\n", "", "elif", "self", ".", "_obs_type", "==", "'image'", ":", "\n", "            ", "img", "=", "self", ".", "_get_image", "(", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.reset": [[98, 101], ["atari_env.AtariEnv.ale.reset_game", "atari_env.AtariEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "ale", ".", "reset_game", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.render": [[102, 112], ["atari_env.AtariEnv._get_image", "atari_env.AtariEnv.viewer.imshow", "rendering.SimpleImageViewer"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv._get_image", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.imshow"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "img", "=", "self", ".", "_get_image", "(", ")", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "img", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "                ", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "self", ".", "viewer", ".", "imshow", "(", "img", ")", "\n", "return", "self", ".", "viewer", ".", "isopen", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.close": [[113, 117], ["atari_env.AtariEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_action_meanings": [[118, 120], ["None"], "methods", ["None"], ["", "", "def", "get_action_meanings", "(", "self", ")", ":", "\n", "        ", "return", "[", "ACTION_MEANING", "[", "i", "]", "for", "i", "in", "self", ".", "_action_set", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_keys_to_action": [[121, 143], ["enumerate", "ord", "ord", "ord", "ord", "ord", "atari_env.AtariEnv.get_action_meanings", "KEYWORD_TO_KEY.items", "tuple", "sorted", "tuple.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_action_meanings", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "get_keys_to_action", "(", "self", ")", ":", "\n", "        ", "KEYWORD_TO_KEY", "=", "{", "\n", "'UP'", ":", "ord", "(", "'w'", ")", ",", "\n", "'DOWN'", ":", "ord", "(", "'s'", ")", ",", "\n", "'LEFT'", ":", "ord", "(", "'a'", ")", ",", "\n", "'RIGHT'", ":", "ord", "(", "'d'", ")", ",", "\n", "'FIRE'", ":", "ord", "(", "' '", ")", ",", "\n", "}", "\n", "\n", "keys_to_action", "=", "{", "}", "\n", "\n", "for", "action_id", ",", "action_meaning", "in", "enumerate", "(", "self", ".", "get_action_meanings", "(", ")", ")", ":", "\n", "            ", "keys", "=", "[", "]", "\n", "for", "keyword", ",", "key", "in", "KEYWORD_TO_KEY", ".", "items", "(", ")", ":", "\n", "                ", "if", "keyword", "in", "action_meaning", ":", "\n", "                    ", "keys", ".", "append", "(", "key", ")", "\n", "", "", "keys", "=", "tuple", "(", "sorted", "(", "keys", ")", ")", "\n", "\n", "assert", "keys", "not", "in", "keys_to_action", "\n", "keys_to_action", "[", "keys", "]", "=", "action_id", "\n", "\n", "", "return", "keys_to_action", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.clone_state": [[144, 152], ["atari_env.AtariEnv.ale.cloneState", "atari_env.AtariEnv.ale.encodeState", "atari_env.AtariEnv.ale.deleteState"], "methods", ["None"], ["", "def", "clone_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clone emulator state w/o system state. Restoring this state will\n        *not* give an identical environment. For complete cloning and restoring\n        of the full state, see `{clone,restore}_full_state()`.\"\"\"", "\n", "state_ref", "=", "self", ".", "ale", ".", "cloneState", "(", ")", "\n", "state", "=", "self", ".", "ale", ".", "encodeState", "(", "state_ref", ")", "\n", "self", ".", "ale", ".", "deleteState", "(", "state_ref", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.restore_state": [[153, 158], ["atari_env.AtariEnv.ale.decodeState", "atari_env.AtariEnv.ale.restoreState", "atari_env.AtariEnv.ale.deleteState"], "methods", ["None"], ["", "def", "restore_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Restore emulator state w/o system state.\"\"\"", "\n", "state_ref", "=", "self", ".", "ale", ".", "decodeState", "(", "state", ")", "\n", "self", ".", "ale", ".", "restoreState", "(", "state_ref", ")", "\n", "self", ".", "ale", ".", "deleteState", "(", "state_ref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.clone_full_state": [[159, 166], ["atari_env.AtariEnv.ale.cloneSystemState", "atari_env.AtariEnv.ale.encodeState", "atari_env.AtariEnv.ale.deleteState"], "methods", ["None"], ["", "def", "clone_full_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clone emulator state w/ system state including pseudorandomness.\n        Restoring this state will give an identical environment.\"\"\"", "\n", "state_ref", "=", "self", ".", "ale", ".", "cloneSystemState", "(", ")", "\n", "state", "=", "self", ".", "ale", ".", "encodeState", "(", "state_ref", ")", "\n", "self", ".", "ale", ".", "deleteState", "(", "state_ref", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.restore_full_state": [[167, 172], ["atari_env.AtariEnv.ale.decodeState", "atari_env.AtariEnv.ale.restoreSystemState", "atari_env.AtariEnv.ale.deleteState"], "methods", ["None"], ["", "def", "restore_full_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Restore emulator state w/ system state including pseudorandomness.\"\"\"", "\n", "state_ref", "=", "self", ".", "ale", ".", "decodeState", "(", "state", ")", "\n", "self", ".", "ale", ".", "restoreSystemState", "(", "state_ref", ")", "\n", "self", ".", "ale", ".", "deleteState", "(", "state_ref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.to_ram": [[13, 18], ["ale.getRAMSize", "numpy.zeros", "ale.getRAM"], "function", ["None"], ["", "def", "to_ram", "(", "ale", ")", ":", "\n", "    ", "ram_size", "=", "ale", ".", "getRAMSize", "(", ")", "\n", "ram", "=", "np", ".", "zeros", "(", "(", "ram_size", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ale", ".", "getRAM", "(", "ram", ")", "\n", "return", "ram", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.cube_crash.CubeCrash.__init__": [[53, 61], ["cube_crash.CubeCrash.seed", "gym.spaces.Box", "gym.spaces.Discrete", "cube_crash.CubeCrash.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "(", "FIELD_H", ",", "FIELD_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.cube_crash.CubeCrash.seed": [[62, 65], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.cube_crash.CubeCrash.random_color": [[66, 72], ["numpy.array().astype", "numpy.array", "cube_crash.CubeCrash.np_random.randint", "cube_crash.CubeCrash.np_random.randint", "cube_crash.CubeCrash.np_random.randint"], "methods", ["None"], ["", "def", "random_color", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "\n", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ")", ",", "\n", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ")", ",", "\n", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ")", ",", "\n", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.cube_crash.CubeCrash.reset": [[73, 86], ["cube_crash.CubeCrash.np_random.randint", "cube_crash.CubeCrash.np_random.randint", "cube_crash.CubeCrash.np_random.randint", "cube_crash.CubeCrash.random_color", "cube_crash.CubeCrash.step", "cube_crash.CubeCrash.random_color", "cube_crash.CubeCrash.random_color", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.random_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.random_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.random_color"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cube_x", "=", "self", ".", "np_random", ".", "randint", "(", "low", "=", "3", ",", "high", "=", "FIELD_W", "-", "3", ")", "\n", "self", ".", "cube_y", "=", "self", ".", "np_random", ".", "randint", "(", "low", "=", "3", ",", "high", "=", "FIELD_H", "//", "6", ")", "\n", "self", ".", "hole_x", "=", "self", ".", "np_random", ".", "randint", "(", "low", "=", "HOLE_WIDTH", ",", "high", "=", "FIELD_W", "-", "HOLE_WIDTH", ")", "\n", "self", ".", "bg_color", "=", "self", ".", "random_color", "(", ")", "if", "self", ".", "use_random_colors", "else", "color_black", "\n", "self", ".", "potential", "=", "None", "\n", "self", ".", "step_n", "=", "0", "\n", "while", "1", ":", "\n", "            ", "self", ".", "wall_color", "=", "self", ".", "random_color", "(", ")", "if", "self", ".", "use_random_colors", "else", "color_white", "\n", "self", ".", "cube_color", "=", "self", ".", "random_color", "(", ")", "if", "self", ".", "use_random_colors", "else", "color_green", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "wall_color", "-", "self", ".", "bg_color", ")", "<", "50", "or", "np", ".", "linalg", ".", "norm", "(", "self", ".", "cube_color", "-", "self", ".", "bg_color", ")", "<", "50", ":", "continue", "\n", "break", "\n", "", "return", "self", ".", "step", "(", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.cube_crash.CubeCrash.step": [[87, 122], ["numpy.zeros", "numpy.abs", "numpy.zeros"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "==", "0", ":", "pass", "\n", "elif", "action", "==", "1", ":", "self", ".", "cube_x", "-=", "1", "\n", "elif", "action", "==", "2", ":", "self", ".", "cube_x", "+=", "1", "\n", "else", ":", "assert", "0", ",", "\"Action %i is out of range\"", "%", "action", "\n", "self", ".", "cube_y", "+=", "1", "\n", "self", ".", "step_n", "+=", "1", "\n", "\n", "obs", "=", "np", ".", "zeros", "(", "(", "FIELD_H", ",", "FIELD_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "obs", "[", ":", ",", ":", ",", ":", "]", "=", "self", ".", "bg_color", "\n", "obs", "[", "FIELD_H", "-", "5", ":", "FIELD_H", ",", ":", ",", ":", "]", "=", "self", ".", "wall_color", "\n", "obs", "[", "FIELD_H", "-", "5", ":", "FIELD_H", ",", "self", ".", "hole_x", "-", "HOLE_WIDTH", "//", "2", ":", "self", ".", "hole_x", "+", "HOLE_WIDTH", "//", "2", "+", "1", ",", ":", "]", "=", "self", ".", "bg_color", "\n", "obs", "[", "self", ".", "cube_y", "-", "1", ":", "self", ".", "cube_y", "+", "2", ",", "self", ".", "cube_x", "-", "1", ":", "self", ".", "cube_x", "+", "2", ",", ":", "]", "=", "self", ".", "cube_color", "\n", "if", "self", ".", "use_black_screen", "and", "self", ".", "step_n", ">", "4", ":", "\n", "            ", "obs", "[", ":", "]", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "done", "=", "False", "\n", "reward", "=", "0", "\n", "dist", "=", "np", ".", "abs", "(", "self", ".", "cube_x", "-", "self", ".", "hole_x", ")", "\n", "if", "self", ".", "potential", "is", "not", "None", "and", "self", ".", "use_shaped_reward", ":", "\n", "            ", "reward", "=", "(", "self", ".", "potential", "-", "dist", ")", "*", "0.01", "\n", "", "self", ".", "potential", "=", "dist", "\n", "\n", "if", "self", ".", "cube_x", "-", "1", "<", "0", "or", "self", ".", "cube_x", "+", "1", ">=", "FIELD_W", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "-", "1", "\n", "", "elif", "self", ".", "cube_y", "+", "1", ">=", "FIELD_H", "-", "5", ":", "\n", "            ", "if", "dist", ">=", "HOLE_WIDTH", "//", "2", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "-", "1", "\n", "", "elif", "self", ".", "cube_y", "==", "FIELD_H", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "+", "1", "\n", "", "", "self", ".", "last_obs", "=", "obs", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.cube_crash.CubeCrash.render": [[123, 142], ["cube_crash.CubeCrash.viewer.close", "cube_crash.CubeCrash.viewer.imshow", "rendering.SimpleImageViewer"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.imshow"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "self", ".", "last_obs", "\n", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "                ", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "self", ".", "viewer", ".", "imshow", "(", "self", ".", "last_obs", ")", "\n", "return", "self", ".", "viewer", ".", "isopen", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Render mode '%s' is not supported\"", "%", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.__init__": [[121, 131], ["memorize_digits.MemorizeDigits.seed", "gym.spaces.Box", "gym.spaces.Discrete", "numpy.zeros", "range", "memorize_digits.MemorizeDigits.reset", "range", "ord"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "0", ",", "255", ",", "(", "FIELD_H", ",", "FIELD_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "10", ")", "\n", "self", ".", "bogus_mnist", "=", "np", ".", "zeros", "(", "(", "10", ",", "6", ",", "6", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "digit", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "6", ")", ":", "\n", "                ", "self", ".", "bogus_mnist", "[", "digit", ",", "y", ",", ":", "]", "=", "[", "ord", "(", "char", ")", "for", "char", "in", "bogus_mnist", "[", "digit", "]", "[", "y", "]", "]", "\n", "", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.seed": [[132, 135], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.random_color": [[136, 142], ["numpy.array().astype", "numpy.array", "memorize_digits.MemorizeDigits.np_random.randint", "memorize_digits.MemorizeDigits.np_random.randint", "memorize_digits.MemorizeDigits.np_random.randint"], "methods", ["None"], ["", "def", "random_color", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "\n", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ")", ",", "\n", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ")", ",", "\n", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ")", ",", "\n", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.reset": [[143, 154], ["memorize_digits.MemorizeDigits.np_random.randint", "memorize_digits.MemorizeDigits.np_random.randint", "memorize_digits.MemorizeDigits.random_color", "memorize_digits.MemorizeDigits.step", "memorize_digits.MemorizeDigits.random_color", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.random_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.random_color"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "digit_x", "=", "self", ".", "np_random", ".", "randint", "(", "low", "=", "FIELD_W", "//", "5", ",", "high", "=", "FIELD_W", "//", "5", "*", "4", ")", "\n", "self", ".", "digit_y", "=", "self", ".", "np_random", ".", "randint", "(", "low", "=", "FIELD_H", "//", "5", ",", "high", "=", "FIELD_H", "//", "5", "*", "4", ")", "\n", "self", ".", "color_bg", "=", "self", ".", "random_color", "(", ")", "if", "self", ".", "use_random_colors", "else", "color_black", "\n", "self", ".", "step_n", "=", "0", "\n", "while", "1", ":", "\n", "            ", "self", ".", "color_digit", "=", "self", ".", "random_color", "(", ")", "if", "self", ".", "use_random_colors", "else", "color_white", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "color_digit", "-", "self", ".", "color_bg", ")", "<", "50", ":", "continue", "\n", "break", "\n", "", "self", ".", "digit", "=", "-", "1", "\n", "return", "self", ".", "step", "(", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.step": [[155, 175], ["memorize_digits.MemorizeDigits.np_random.randint", "numpy.zeros", "numpy.zeros", "memorize_digits.MemorizeDigits.np_random.randint"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "reward", "=", "-", "1", "\n", "done", "=", "False", "\n", "self", ".", "step_n", "+=", "1", "\n", "if", "self", ".", "digit", "==", "-", "1", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "digit", "==", "action", ":", "\n", "                ", "reward", "=", "+", "1", "\n", "", "done", "=", "self", ".", "step_n", ">", "20", "and", "0", "==", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "5", ")", "\n", "", "self", ".", "digit", "=", "self", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "10", ")", "\n", "obs", "=", "np", ".", "zeros", "(", "(", "FIELD_H", ",", "FIELD_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "obs", "[", ":", ",", ":", ",", ":", "]", "=", "self", ".", "color_bg", "\n", "digit_img", "=", "np", ".", "zeros", "(", "(", "6", ",", "6", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "digit_img", "[", ":", "]", "=", "self", ".", "color_bg", "\n", "xxx", "=", "self", ".", "bogus_mnist", "[", "self", ".", "digit", "]", "==", "42", "\n", "digit_img", "[", "xxx", "]", "=", "self", ".", "color_digit", "\n", "obs", "[", "self", ".", "digit_y", "-", "3", ":", "self", ".", "digit_y", "+", "3", ",", "self", ".", "digit_x", "-", "3", ":", "self", ".", "digit_x", "+", "3", "]", "=", "digit_img", "\n", "self", ".", "last_obs", "=", "obs", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.unittest.memorize_digits.MemorizeDigits.render": [[176, 195], ["memorize_digits.MemorizeDigits.viewer.close", "memorize_digits.MemorizeDigits.viewer.imshow", "rendering.SimpleImageViewer"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.imshow"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "                ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "", "return", "\n", "\n", "", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "self", ".", "last_obs", "\n", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "                ", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "self", ".", "viewer", ".", "imshow", "(", "self", ".", "last_obs", ")", "\n", "return", "self", ".", "viewer", ".", "isopen", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Render mode '%s' is not supported\"", "%", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.roulette.RouletteEnv.__init__": [[17, 22], ["gym.spaces.Discrete", "gym.spaces.Discrete", "roulette.RouletteEnv.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ",", "spots", "=", "37", ")", ":", "\n", "        ", "self", ".", "n", "=", "spots", "+", "1", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "n", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "1", ")", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.roulette.RouletteEnv.seed": [[23, 26], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.roulette.RouletteEnv.step": [[27, 42], ["roulette.RouletteEnv.action_space.contains", "roulette.RouletteEnv.np_random.randint"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "action", "==", "self", ".", "n", "-", "1", ":", "\n", "# observation, reward, done, info", "\n", "            ", "return", "0", ",", "0", ",", "True", ",", "{", "}", "\n", "\n", "# N.B. np.random.randint draws from [A, B) while random.randint draws from [A,B]", "\n", "", "val", "=", "self", ".", "np_random", ".", "randint", "(", "0", ",", "self", ".", "n", "-", "1", ")", "\n", "if", "val", "==", "action", "==", "0", ":", "\n", "            ", "reward", "=", "self", ".", "n", "-", "2.0", "\n", "", "elif", "val", "!=", "0", "and", "action", "!=", "0", "and", "val", "%", "2", "==", "action", "%", "2", ":", "\n", "            ", "reward", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "reward", "=", "-", "1.0", "\n", "", "return", "0", ",", "reward", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.roulette.RouletteEnv.reset": [[43, 45], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.BlackjackEnv.__init__": [[73, 86], ["gym.spaces.Discrete", "gym.spaces.Tuple", "blackjack.BlackjackEnv.seed", "blackjack.BlackjackEnv.reset", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ",", "natural", "=", "False", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Tuple", "(", "(", "\n", "spaces", ".", "Discrete", "(", "32", ")", ",", "\n", "spaces", ".", "Discrete", "(", "11", ")", ",", "\n", "spaces", ".", "Discrete", "(", "2", ")", ")", ")", "\n", "self", ".", "seed", "(", ")", "\n", "\n", "# Flag to payout 1.5 on a \"natural\" blackjack win, like casino rules", "\n", "# Ref: http://www.bicyclecards.com/how-to-play/blackjack/", "\n", "self", ".", "natural", "=", "natural", "\n", "# Start the first game", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.BlackjackEnv.seed": [[87, 90], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.BlackjackEnv.step": [[91, 109], ["blackjack.BlackjackEnv.action_space.contains", "blackjack.BlackjackEnv.player.append", "blackjack.is_bust", "blackjack.cmp", "blackjack.BlackjackEnv._get_obs", "blackjack.draw_card", "blackjack.sum_hand", "blackjack.BlackjackEnv.dealer.append", "blackjack.score", "blackjack.score", "blackjack.is_natural", "blackjack.draw_card"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.is_bust", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.cmp", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_card", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.sum_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.score", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.score", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.is_natural", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_card"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "action", ":", "# hit: add a card to players hand and return", "\n", "            ", "self", ".", "player", ".", "append", "(", "draw_card", "(", "self", ".", "np_random", ")", ")", "\n", "if", "is_bust", "(", "self", ".", "player", ")", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "done", "=", "False", "\n", "reward", "=", "0", "\n", "", "", "else", ":", "# stick: play out the dealers hand, and score", "\n", "            ", "done", "=", "True", "\n", "while", "sum_hand", "(", "self", ".", "dealer", ")", "<", "17", ":", "\n", "                ", "self", ".", "dealer", ".", "append", "(", "draw_card", "(", "self", ".", "np_random", ")", ")", "\n", "", "reward", "=", "cmp", "(", "score", "(", "self", ".", "player", ")", ",", "score", "(", "self", ".", "dealer", ")", ")", "\n", "if", "self", ".", "natural", "and", "is_natural", "(", "self", ".", "player", ")", "and", "reward", "==", "1", ":", "\n", "                ", "reward", "=", "1.5", "\n", "", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.BlackjackEnv._get_obs": [[110, 112], ["blackjack.sum_hand", "blackjack.usable_ace"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.sum_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.usable_ace"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "(", "sum_hand", "(", "self", ".", "player", ")", ",", "self", ".", "dealer", "[", "0", "]", ",", "usable_ace", "(", "self", ".", "player", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.BlackjackEnv.reset": [[113, 117], ["blackjack.draw_hand", "blackjack.draw_hand", "blackjack.BlackjackEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_hand", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "dealer", "=", "draw_hand", "(", "self", ".", "np_random", ")", "\n", "self", ".", "player", "=", "draw_hand", "(", "self", ".", "np_random", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.cmp": [[5, 7], ["float", "float"], "function", ["None"], ["def", "cmp", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "float", "(", "a", ">", "b", ")", "-", "float", "(", "a", "<", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_card": [[12, 14], ["int", "np_random.choice"], "function", ["None"], ["def", "draw_card", "(", "np_random", ")", ":", "\n", "    ", "return", "int", "(", "np_random", ".", "choice", "(", "deck", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_hand": [[16, 18], ["blackjack.draw_card", "blackjack.draw_card"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_card", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.draw_card"], ["", "def", "draw_hand", "(", "np_random", ")", ":", "\n", "    ", "return", "[", "draw_card", "(", "np_random", ")", ",", "draw_card", "(", "np_random", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.usable_ace": [[20, 22], ["sum"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "usable_ace", "(", "hand", ")", ":", "# Does this hand have a usable ace?", "\n", "    ", "return", "1", "in", "hand", "and", "sum", "(", "hand", ")", "+", "10", "<=", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.sum_hand": [[24, 28], ["blackjack.usable_ace", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.usable_ace", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "sum_hand", "(", "hand", ")", ":", "# Return current hand total", "\n", "    ", "if", "usable_ace", "(", "hand", ")", ":", "\n", "        ", "return", "sum", "(", "hand", ")", "+", "10", "\n", "", "return", "sum", "(", "hand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.is_bust": [[30, 32], ["blackjack.sum_hand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.sum_hand"], ["", "def", "is_bust", "(", "hand", ")", ":", "# Is this hand a bust?", "\n", "    ", "return", "sum_hand", "(", "hand", ")", ">", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.score": [[34, 36], ["blackjack.is_bust", "blackjack.sum_hand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.is_bust", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.sum_hand"], ["", "def", "score", "(", "hand", ")", ":", "# What is the score of this hand (0 if bust)", "\n", "    ", "return", "0", "if", "is_bust", "(", "hand", ")", "else", "sum_hand", "(", "hand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.blackjack.is_natural": [[38, 40], ["sorted"], "function", ["None"], ["", "def", "is_natural", "(", "hand", ")", ":", "# Is this hand a natural blackjack?", "\n", "    ", "return", "sorted", "(", "hand", ")", "==", "[", "1", ",", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipEnv.__init__": [[16, 30], ["gym.spaces.Discrete", "gym.spaces.Tuple", "kellycoinflip.KellyCoinflipEnv.seed", "kellycoinflip.KellyCoinflipEnv.reset", "int", "gym.spaces.Box", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ",", "initialWealth", "=", "25.0", ",", "edge", "=", "0.6", ",", "maxWealth", "=", "250.0", ",", "maxRounds", "=", "300", ")", ":", "\n", "\n", "        ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "int", "(", "maxWealth", "*", "100", ")", ")", "# betting in penny increments", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Tuple", "(", "(", "\n", "spaces", ".", "Box", "(", "0", ",", "maxWealth", ",", "[", "1", "]", ")", ",", "# (w,b)", "\n", "spaces", ".", "Discrete", "(", "maxRounds", "+", "1", ")", ")", ")", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "maxWealth", ")", "\n", "self", ".", "edge", "=", "edge", "\n", "self", ".", "wealth", "=", "initialWealth", "\n", "self", ".", "initialWealth", "=", "initialWealth", "\n", "self", ".", "maxRounds", "=", "maxRounds", "\n", "self", ".", "maxWealth", "=", "maxWealth", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipEnv.seed": [[31, 34], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipEnv.step": [[35, 56], ["kellycoinflip.KellyCoinflipEnv._get_obs", "kellycoinflip.flip", "min"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "action", "/", "100.0", "# convert from pennies to dollars", "\n", "if", "action", ">", "self", ".", "wealth", ":", "# treat attempts to bet more than possess as == betting everything", "\n", "          ", "action", "=", "self", ".", "wealth", "\n", "", "if", "self", ".", "wealth", "<", "0.000001", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "0.0", "\n", "", "else", ":", "\n", "          ", "if", "self", ".", "rounds", "==", "0", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "self", ".", "wealth", "\n", "", "else", ":", "\n", "            ", "self", ".", "rounds", "=", "self", ".", "rounds", "-", "1", "\n", "done", "=", "False", "\n", "reward", "=", "0.0", "\n", "coinflip", "=", "flip", "(", "self", ".", "edge", ",", "self", ".", "np_random", ")", "\n", "if", "coinflip", ":", "\n", "              ", "self", ".", "wealth", "=", "min", "(", "self", ".", "maxWealth", ",", "self", ".", "wealth", "+", "action", ")", "\n", "", "else", ":", "\n", "              ", "self", ".", "wealth", "=", "self", ".", "wealth", "-", "action", "\n", "", "", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipEnv._get_obs": [[57, 59], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "(", "np", ".", "array", "(", "[", "self", ".", "wealth", "]", ")", ",", "self", ".", "rounds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipEnv.reset": [[60, 64], ["kellycoinflip.KellyCoinflipEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "rounds", "=", "self", ".", "maxRounds", "\n", "self", ".", "wealth", "=", "self", ".", "initialWealth", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipEnv.render": [[65, 67], ["print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "print", "(", "\"Current wealth: \"", ",", "self", ".", "wealth", ",", "\"; Rounds left: \"", ",", "self", ".", "rounds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipGeneralizedEnv.__init__": [[71, 110], ["float", "gym.spaces.prng.np_random.beta", "round", "int", "float", "gym.spaces.Discrete", "gym.spaces.Tuple", "scipy.stats.genpareto.rvs", "round", "int", "kellycoinflip.KellyCoinflipGeneralizedEnv.seed", "gym.spaces.prng.np_random.normal", "gym.spaces.Box", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Box", "hasattr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ",", "initialWealth", "=", "25.0", ",", "edgePriorAlpha", "=", "7", ",", "edgePriorBeta", "=", "3", ",", "maxWealthAlpha", "=", "5.0", ",", "maxWealthM", "=", "200.0", ",", "maxRoundsMean", "=", "300.0", ",", "maxRoundsSD", "=", "25.0", ",", "reseed", "=", "True", ")", ":", "\n", "# store the hyperparameters for passing back into __init__() during resets so the same hyperparameters govern the next game's parameters, as the user expects: TODO: this is boilerplate, is there any more elegant way to do this?", "\n", "        ", "self", ".", "initialWealth", "=", "float", "(", "initialWealth", ")", "\n", "self", ".", "edgePriorAlpha", "=", "edgePriorAlpha", "\n", "self", ".", "edgePriorBeta", "=", "edgePriorBeta", "\n", "self", ".", "maxWealthAlpha", "=", "maxWealthAlpha", "\n", "self", ".", "maxWealthM", "=", "maxWealthM", "\n", "self", ".", "maxRoundsMean", "=", "maxRoundsMean", "\n", "self", ".", "maxRoundsSD", "=", "maxRoundsSD", "\n", "\n", "# draw this game's set of parameters:", "\n", "edge", "=", "prng", ".", "np_random", ".", "beta", "(", "edgePriorAlpha", ",", "edgePriorBeta", ")", "\n", "maxWealth", "=", "round", "(", "genpareto", ".", "rvs", "(", "maxWealthAlpha", ",", "maxWealthM", ",", "random_state", "=", "prng", ".", "np_random", ")", ")", "\n", "maxRounds", "=", "int", "(", "round", "(", "prng", ".", "np_random", ".", "normal", "(", "maxRoundsMean", ",", "maxRoundsSD", ")", ")", ")", "\n", "\n", "# add an additional global variable which is the sufficient statistic for the Pareto distribution on wealth cap;", "\n", "# alpha doesn't update, but x_m does, and simply is the highest wealth count we've seen to date:", "\n", "self", ".", "maxEverWealth", "=", "float", "(", "self", ".", "initialWealth", ")", "\n", "# for the coinflip edge, it is total wins/losses:", "\n", "self", ".", "wins", "=", "0", "\n", "self", ".", "losses", "=", "0", "\n", "# for the number of rounds, we need to remember how many rounds we've played:", "\n", "self", ".", "roundsElapsed", "=", "0", "\n", "\n", "# the rest proceeds as before:", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "int", "(", "maxWealth", "*", "100", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Tuple", "(", "(", "\n", "spaces", ".", "Box", "(", "0", ",", "maxWealth", ",", "shape", "=", "[", "1", "]", ")", ",", "# current wealth", "\n", "spaces", ".", "Discrete", "(", "maxRounds", "+", "1", ")", ",", "# rounds elapsed", "\n", "spaces", ".", "Discrete", "(", "maxRounds", "+", "1", ")", ",", "# wins", "\n", "spaces", ".", "Discrete", "(", "maxRounds", "+", "1", ")", ",", "# losses", "\n", "spaces", ".", "Box", "(", "0", ",", "maxWealth", ",", "[", "1", "]", ")", ")", ")", "# maximum observed wealth", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "maxWealth", ")", "\n", "self", ".", "edge", "=", "edge", "\n", "self", ".", "wealth", "=", "self", ".", "initialWealth", "\n", "self", ".", "maxRounds", "=", "maxRounds", "\n", "self", ".", "rounds", "=", "self", ".", "maxRounds", "\n", "self", ".", "maxWealth", "=", "maxWealth", "\n", "if", "reseed", "or", "not", "hasattr", "(", "self", ",", "'np_random'", ")", ":", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipGeneralizedEnv.seed": [[111, 114], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipGeneralizedEnv.step": [[115, 140], ["kellycoinflip.KellyCoinflipGeneralizedEnv._get_obs", "kellycoinflip.flip", "min", "max"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "action", "/", "100.0", "\n", "if", "action", ">", "self", ".", "wealth", ":", "\n", "          ", "action", "=", "self", ".", "wealth", "\n", "", "if", "self", ".", "wealth", "<", "0.000001", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "0.0", "\n", "", "else", ":", "\n", "          ", "if", "self", ".", "rounds", "==", "0", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "self", ".", "wealth", "\n", "", "else", ":", "\n", "            ", "self", ".", "rounds", "=", "self", ".", "rounds", "-", "1", "\n", "done", "=", "False", "\n", "reward", "=", "0.0", "\n", "coinflip", "=", "flip", "(", "self", ".", "edge", ",", "self", ".", "np_random", ")", "\n", "self", ".", "roundsElapsed", "=", "self", ".", "roundsElapsed", "+", "1", "\n", "if", "coinflip", ":", "\n", "              ", "self", ".", "wealth", "=", "min", "(", "self", ".", "maxWealth", ",", "self", ".", "wealth", "+", "action", ")", "\n", "self", ".", "maxEverWealth", "=", "max", "(", "self", ".", "wealth", ",", "self", ".", "maxEverWealth", ")", "\n", "self", ".", "wins", "=", "self", ".", "wins", "+", "1", "\n", "", "else", ":", "\n", "              ", "self", ".", "wealth", "=", "self", ".", "wealth", "-", "action", "\n", "self", ".", "losses", "=", "self", ".", "losses", "+", "1", "\n", "", "", "", "return", "self", ".", "_get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipGeneralizedEnv._get_obs": [[141, 143], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "float", "float"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "(", "np", ".", "array", "(", "[", "float", "(", "self", ".", "wealth", ")", "]", ")", ",", "self", ".", "roundsElapsed", ",", "self", ".", "wins", ",", "self", ".", "losses", ",", "np", ".", "array", "(", "[", "float", "(", "self", ".", "maxEverWealth", ")", "]", ")", ")", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipGeneralizedEnv.reset": [[143, 147], ["kellycoinflip.KellyCoinflipGeneralizedEnv.__init__", "kellycoinflip.KellyCoinflipGeneralizedEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# re-init everything to draw new parameters etc, but preserve the RNG for reproducibility and pass in the same hyperparameters as originally specified:", "\n", "        ", "self", ".", "__init__", "(", "initialWealth", "=", "self", ".", "initialWealth", ",", "edgePriorAlpha", "=", "self", ".", "edgePriorAlpha", ",", "edgePriorBeta", "=", "self", ".", "edgePriorBeta", ",", "maxWealthAlpha", "=", "self", ".", "maxWealthAlpha", ",", "maxWealthM", "=", "self", ".", "maxWealthM", ",", "maxRoundsMean", "=", "self", ".", "maxRoundsMean", ",", "maxRoundsSD", "=", "self", ".", "maxRoundsSD", ",", "reseed", "=", "False", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.KellyCoinflipGeneralizedEnv.render": [[147, 151], ["print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "print", "(", "\"Current wealth: \"", ",", "self", ".", "wealth", ",", "\"; Rounds left: \"", ",", "self", ".", "rounds", ",", "\"; True edge: \"", ",", "self", ".", "edge", ",", "\n", "\"; True max wealth: \"", ",", "self", ".", "maxWealth", ",", "\"; True stopping time: \"", ",", "self", ".", "maxRounds", ",", "\"; Rounds left: \"", ",", "\n", "self", ".", "maxRounds", "-", "self", ".", "roundsElapsed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip": [[10, 12], ["np_random.uniform"], "function", ["None"], ["def", "flip", "(", "edge", ",", "np_random", ")", ":", "\n", "    ", "return", "np_random", ".", "uniform", "(", ")", "<", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.__init__": [[33, 85], ["numpy.asarray", "numpy.zeros", "range", "numpy.zeros.sum", "gym.envs.toy_text.discrete.DiscreteEnv.__init__", "range", "range", "range", "range", "range", "taxi.TaxiEnv.encode", "range", "taxi.TaxiEnv.encode", "[].append", "min", "min", "max", "max", "locs.index"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "desc", "=", "np", ".", "asarray", "(", "MAP", ",", "dtype", "=", "'c'", ")", "\n", "\n", "self", ".", "locs", "=", "locs", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "4", ")", ",", "(", "4", ",", "0", ")", ",", "(", "4", ",", "3", ")", "]", "\n", "\n", "nS", "=", "500", "\n", "nR", "=", "5", "\n", "nC", "=", "5", "\n", "maxR", "=", "nR", "-", "1", "\n", "maxC", "=", "nC", "-", "1", "\n", "isd", "=", "np", ".", "zeros", "(", "nS", ")", "\n", "nA", "=", "6", "\n", "P", "=", "{", "s", ":", "{", "a", ":", "[", "]", "for", "a", "in", "range", "(", "nA", ")", "}", "for", "s", "in", "range", "(", "nS", ")", "}", "\n", "for", "row", "in", "range", "(", "5", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "5", ")", ":", "\n", "                ", "for", "passidx", "in", "range", "(", "5", ")", ":", "\n", "                    ", "for", "destidx", "in", "range", "(", "4", ")", ":", "\n", "                        ", "state", "=", "self", ".", "encode", "(", "row", ",", "col", ",", "passidx", ",", "destidx", ")", "\n", "if", "passidx", "<", "4", "and", "passidx", "!=", "destidx", ":", "\n", "                            ", "isd", "[", "state", "]", "+=", "1", "\n", "", "for", "a", "in", "range", "(", "nA", ")", ":", "\n", "# defaults", "\n", "                            ", "newrow", ",", "newcol", ",", "newpassidx", "=", "row", ",", "col", ",", "passidx", "\n", "reward", "=", "-", "1", "\n", "done", "=", "False", "\n", "taxiloc", "=", "(", "row", ",", "col", ")", "\n", "\n", "if", "a", "==", "0", ":", "\n", "                                ", "newrow", "=", "min", "(", "row", "+", "1", ",", "maxR", ")", "\n", "", "elif", "a", "==", "1", ":", "\n", "                                ", "newrow", "=", "max", "(", "row", "-", "1", ",", "0", ")", "\n", "", "if", "a", "==", "2", "and", "self", ".", "desc", "[", "1", "+", "row", ",", "2", "*", "col", "+", "2", "]", "==", "b\":\"", ":", "\n", "                                ", "newcol", "=", "min", "(", "col", "+", "1", ",", "maxC", ")", "\n", "", "elif", "a", "==", "3", "and", "self", ".", "desc", "[", "1", "+", "row", ",", "2", "*", "col", "]", "==", "b\":\"", ":", "\n", "                                ", "newcol", "=", "max", "(", "col", "-", "1", ",", "0", ")", "\n", "", "elif", "a", "==", "4", ":", "# pickup", "\n", "                                ", "if", "(", "passidx", "<", "4", "and", "taxiloc", "==", "locs", "[", "passidx", "]", ")", ":", "\n", "                                    ", "newpassidx", "=", "4", "\n", "", "else", ":", "\n", "                                    ", "reward", "=", "-", "10", "\n", "", "", "elif", "a", "==", "5", ":", "# dropoff", "\n", "                                ", "if", "(", "taxiloc", "==", "locs", "[", "destidx", "]", ")", "and", "passidx", "==", "4", ":", "\n", "                                    ", "done", "=", "True", "\n", "reward", "=", "20", "\n", "", "elif", "(", "taxiloc", "in", "locs", ")", "and", "passidx", "==", "4", ":", "\n", "                                    ", "newpassidx", "=", "locs", ".", "index", "(", "taxiloc", ")", "\n", "", "else", ":", "\n", "                                    ", "reward", "=", "-", "10", "\n", "", "", "newstate", "=", "self", ".", "encode", "(", "newrow", ",", "newcol", ",", "newpassidx", ",", "destidx", ")", "\n", "P", "[", "state", "]", "[", "a", "]", ".", "append", "(", "(", "1.0", ",", "newstate", ",", "reward", ",", "done", ")", ")", "\n", "", "", "", "", "", "isd", "/=", "isd", ".", "sum", "(", ")", "\n", "discrete", ".", "DiscreteEnv", ".", "__init__", "(", "self", ",", "nS", ",", "nA", ",", "P", ",", "isd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode": [[86, 96], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "taxirow", ",", "taxicol", ",", "passloc", ",", "destidx", ")", ":", "\n", "# (5) 5, 5, 4", "\n", "        ", "i", "=", "taxirow", "\n", "i", "*=", "5", "\n", "i", "+=", "taxicol", "\n", "i", "*=", "5", "\n", "i", "+=", "passloc", "\n", "i", "*=", "4", "\n", "i", "+=", "destidx", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.decode": [[97, 108], ["out.append", "out.append", "out.append", "out.append", "reversed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "decode", "(", "self", ",", "i", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "i", "%", "4", ")", "\n", "i", "=", "i", "//", "4", "\n", "out", ".", "append", "(", "i", "%", "5", ")", "\n", "i", "=", "i", "//", "5", "\n", "out", ".", "append", "(", "i", "%", "5", ")", "\n", "i", "=", "i", "//", "5", "\n", "out", ".", "append", "(", "i", ")", "\n", "assert", "0", "<=", "i", "<", "5", "\n", "return", "reversed", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.render": [[109, 133], ["taxi.TaxiEnv.desc.copy().tolist", "taxi.TaxiEnv.decode", "gym.utils.colorize", "outfile.write", "six.StringIO", "gym.utils.colorize", "gym.utils.colorize", "gym.utils.colorize", "outfile.write", "outfile.write", "taxi.TaxiEnv.desc.copy", "c.decode", "taxi.TaxiEnv.render.ul"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.decode", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.decode"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "\n", "out", "=", "self", ".", "desc", ".", "copy", "(", ")", ".", "tolist", "(", ")", "\n", "out", "=", "[", "[", "c", ".", "decode", "(", "'utf-8'", ")", "for", "c", "in", "line", "]", "for", "line", "in", "out", "]", "\n", "taxirow", ",", "taxicol", ",", "passidx", ",", "destidx", "=", "self", ".", "decode", "(", "self", ".", "s", ")", "\n", "def", "ul", "(", "x", ")", ":", "return", "\"_\"", "if", "x", "==", "\" \"", "else", "x", "\n", "if", "passidx", "<", "4", ":", "\n", "            ", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", "=", "utils", ".", "colorize", "(", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", ",", "'yellow'", ",", "highlight", "=", "True", ")", "\n", "pi", ",", "pj", "=", "self", ".", "locs", "[", "passidx", "]", "\n", "out", "[", "1", "+", "pi", "]", "[", "2", "*", "pj", "+", "1", "]", "=", "utils", ".", "colorize", "(", "out", "[", "1", "+", "pi", "]", "[", "2", "*", "pj", "+", "1", "]", ",", "'blue'", ",", "bold", "=", "True", ")", "\n", "", "else", ":", "# passenger in taxi", "\n", "            ", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", "=", "utils", ".", "colorize", "(", "ul", "(", "out", "[", "1", "+", "taxirow", "]", "[", "2", "*", "taxicol", "+", "1", "]", ")", ",", "'green'", ",", "highlight", "=", "True", ")", "\n", "\n", "", "di", ",", "dj", "=", "self", ".", "locs", "[", "destidx", "]", "\n", "out", "[", "1", "+", "di", "]", "[", "2", "*", "dj", "+", "1", "]", "=", "utils", ".", "colorize", "(", "out", "[", "1", "+", "di", "]", "[", "2", "*", "dj", "+", "1", "]", ",", "'magenta'", ")", "\n", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "\"\"", ".", "join", "(", "row", ")", "for", "row", "in", "out", "]", ")", "+", "\"\\n\"", ")", "\n", "if", "self", ".", "lastaction", "is", "not", "None", ":", "\n", "            ", "outfile", ".", "write", "(", "\"  ({})\\n\"", ".", "format", "(", "[", "\"South\"", ",", "\"North\"", ",", "\"East\"", ",", "\"West\"", ",", "\"Pickup\"", ",", "\"Dropoff\"", "]", "[", "self", ".", "lastaction", "]", ")", ")", "\n", "", "else", ":", "outfile", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "# No need to return anything for human", "\n", "if", "mode", "!=", "'human'", ":", "\n", "            ", "return", "outfile", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv.__init__": [[33, 60], ["numpy.ravel_multi_index", "numpy.prod", "numpy.zeros", "range", "numpy.zeros", "gym.envs.toy_text.discrete.DiscreteEnv.__init__", "numpy.unravel_index", "cliffwalking.CliffWalkingEnv._calculate_transition_prob", "cliffwalking.CliffWalkingEnv._calculate_transition_prob", "cliffwalking.CliffWalkingEnv._calculate_transition_prob", "cliffwalking.CliffWalkingEnv._calculate_transition_prob", "range"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._calculate_transition_prob", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._calculate_transition_prob", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._calculate_transition_prob", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._calculate_transition_prob"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "shape", "=", "(", "4", ",", "12", ")", "\n", "self", ".", "start_state_index", "=", "np", ".", "ravel_multi_index", "(", "(", "3", ",", "0", ")", ",", "self", ".", "shape", ")", "\n", "\n", "nS", "=", "np", ".", "prod", "(", "self", ".", "shape", ")", "\n", "nA", "=", "4", "\n", "\n", "# Cliff Location", "\n", "self", ".", "_cliff", "=", "np", ".", "zeros", "(", "self", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "_cliff", "[", "3", ",", "1", ":", "-", "1", "]", "=", "True", "\n", "\n", "# Calculate transition probabilities and rewards", "\n", "P", "=", "{", "}", "\n", "for", "s", "in", "range", "(", "nS", ")", ":", "\n", "            ", "position", "=", "np", ".", "unravel_index", "(", "s", ",", "self", ".", "shape", ")", "\n", "P", "[", "s", "]", "=", "{", "a", ":", "[", "]", "for", "a", "in", "range", "(", "nA", ")", "}", "\n", "P", "[", "s", "]", "[", "UP", "]", "=", "self", ".", "_calculate_transition_prob", "(", "position", ",", "[", "-", "1", ",", "0", "]", ")", "\n", "P", "[", "s", "]", "[", "RIGHT", "]", "=", "self", ".", "_calculate_transition_prob", "(", "position", ",", "[", "0", ",", "1", "]", ")", "\n", "P", "[", "s", "]", "[", "DOWN", "]", "=", "self", ".", "_calculate_transition_prob", "(", "position", ",", "[", "1", ",", "0", "]", ")", "\n", "P", "[", "s", "]", "[", "LEFT", "]", "=", "self", ".", "_calculate_transition_prob", "(", "position", ",", "[", "0", ",", "-", "1", "]", ")", "\n", "\n", "# Calculate initial state distribution", "\n", "# We always start in state (3, 0)", "\n", "", "isd", "=", "np", ".", "zeros", "(", "nS", ")", "\n", "isd", "[", "self", ".", "start_state_index", "]", "=", "1.0", "\n", "\n", "super", "(", "CliffWalkingEnv", ",", "self", ")", ".", "__init__", "(", "nS", ",", "nA", ",", "P", ",", "isd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._limit_coordinates": [[61, 72], ["min", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "_limit_coordinates", "(", "self", ",", "coord", ")", ":", "\n", "        ", "\"\"\"\n        Prevent the agent from falling out of the grid world\n        :param coord: \n        :return: \n        \"\"\"", "\n", "coord", "[", "0", "]", "=", "min", "(", "coord", "[", "0", "]", ",", "self", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "coord", "[", "0", "]", "=", "max", "(", "coord", "[", "0", "]", ",", "0", ")", "\n", "coord", "[", "1", "]", "=", "min", "(", "coord", "[", "1", "]", ",", "self", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "coord", "[", "1", "]", "=", "max", "(", "coord", "[", "1", "]", ",", "0", ")", "\n", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._calculate_transition_prob": [[73, 89], ["cliffwalking.CliffWalkingEnv._limit_coordinates().astype", "numpy.ravel_multi_index", "numpy.array", "numpy.array", "tuple", "tuple", "cliffwalking.CliffWalkingEnv._limit_coordinates", "tuple"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv._limit_coordinates"], ["", "def", "_calculate_transition_prob", "(", "self", ",", "current", ",", "delta", ")", ":", "\n", "        ", "\"\"\"\n        Determine the outcome for an action. Transition Prob is always 1.0. \n        :param current: Current position on the grid as (row, col) \n        :param delta: Change in position for transition\n        :return: (1.0, new_state, reward, done)\n        \"\"\"", "\n", "new_position", "=", "np", ".", "array", "(", "current", ")", "+", "np", ".", "array", "(", "delta", ")", "\n", "new_position", "=", "self", ".", "_limit_coordinates", "(", "new_position", ")", ".", "astype", "(", "int", ")", "\n", "new_state", "=", "np", ".", "ravel_multi_index", "(", "tuple", "(", "new_position", ")", ",", "self", ".", "shape", ")", "\n", "if", "self", ".", "_cliff", "[", "tuple", "(", "new_position", ")", "]", ":", "\n", "            ", "return", "[", "(", "1.0", ",", "self", ".", "start_state_index", ",", "-", "100", ",", "False", ")", "]", "\n", "\n", "", "terminal_state", "=", "(", "self", ".", "shape", "[", "0", "]", "-", "1", ",", "self", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "is_done", "=", "tuple", "(", "new_position", ")", "==", "terminal_state", "\n", "return", "[", "(", "1.0", ",", "new_state", ",", "-", "1", ",", "is_done", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.cliffwalking.CliffWalkingEnv.render": [[90, 113], ["range", "outfile.write", "numpy.unravel_index", "outfile.write", "output.rstrip.rstrip.lstrip", "output.rstrip.rstrip.rstrip"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "outfile", "=", "sys", ".", "stdout", "\n", "\n", "for", "s", "in", "range", "(", "self", ".", "nS", ")", ":", "\n", "            ", "position", "=", "np", ".", "unravel_index", "(", "s", ",", "self", ".", "shape", ")", "\n", "if", "self", ".", "s", "==", "s", ":", "\n", "                ", "output", "=", "\" x \"", "\n", "# Print terminal state", "\n", "", "elif", "position", "==", "(", "3", ",", "11", ")", ":", "\n", "                ", "output", "=", "\" T \"", "\n", "", "elif", "self", ".", "_cliff", "[", "position", "]", ":", "\n", "                ", "output", "=", "\" C \"", "\n", "", "else", ":", "\n", "                ", "output", "=", "\" o \"", "\n", "\n", "", "if", "position", "[", "1", "]", "==", "0", ":", "\n", "                ", "output", "=", "output", ".", "lstrip", "(", ")", "\n", "", "if", "position", "[", "1", "]", "==", "self", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "                ", "output", "=", "output", ".", "rstrip", "(", ")", "\n", "output", "+=", "'\\n'", "\n", "\n", "", "outfile", ".", "write", "(", "output", ")", "\n", "", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.nchain.NChainEnv.__init__": [[24, 33], ["gym.spaces.Discrete", "gym.spaces.Discrete", "nchain.NChainEnv.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ",", "n", "=", "5", ",", "slip", "=", "0.2", ",", "small", "=", "2", ",", "large", "=", "10", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "slip", "=", "slip", "# probability of 'slipping' an action", "\n", "self", ".", "small", "=", "small", "# payout for 'backwards' action", "\n", "self", ".", "large", "=", "large", "# payout at end of chain for 'forwards' action", "\n", "self", ".", "state", "=", "0", "# Start at beginning of the chain", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "n", ")", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.nchain.NChainEnv.seed": [[34, 37], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.nchain.NChainEnv.step": [[38, 52], ["nchain.NChainEnv.action_space.contains", "nchain.NChainEnv.np_random.rand"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "if", "self", ".", "np_random", ".", "rand", "(", ")", "<", "self", ".", "slip", ":", "\n", "            ", "action", "=", "not", "action", "# agent slipped, reverse action taken", "\n", "", "if", "action", ":", "# 'backwards': go back to the beginning, get small reward", "\n", "            ", "reward", "=", "self", ".", "small", "\n", "self", ".", "state", "=", "0", "\n", "", "elif", "self", ".", "state", "<", "self", ".", "n", "-", "1", ":", "# 'forwards': go up along the chain", "\n", "            ", "reward", "=", "0", "\n", "self", ".", "state", "+=", "1", "\n", "", "else", ":", "# 'forwards': stay at the end of the chain, collect large reward", "\n", "            ", "reward", "=", "self", ".", "large", "\n", "", "done", "=", "False", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.nchain.NChainEnv.reset": [[53, 56], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "0", "\n", "return", "self", ".", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.hotter_colder.HotterColder.__init__": [[24, 38], ["gym.spaces.Box", "gym.spaces.Discrete", "hotter_colder.HotterColder.seed", "hotter_colder.HotterColder.reset", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "range", "=", "1000", "# +/- value the randomly select number can be between", "\n", "self", ".", "bounds", "=", "2000", "# Action space bounds", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "self", ".", "bounds", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "bounds", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "self", ".", "number", "=", "0", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "guess_max", "=", "200", "\n", "self", ".", "observation", "=", "0", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.hotter_colder.HotterColder.seed": [[39, 42], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.hotter_colder.HotterColder.step": [[43, 61], ["hotter_colder.HotterColder.action_space.contains", "min", "max"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "if", "action", "<", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "1", "\n", "\n", "", "elif", "action", "==", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "2", "\n", "\n", "", "elif", "action", ">", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "3", "\n", "\n", "", "reward", "=", "(", "(", "min", "(", "action", ",", "self", ".", "number", ")", "+", "self", ".", "bounds", ")", "/", "(", "max", "(", "action", ",", "self", ".", "number", ")", "+", "self", ".", "bounds", ")", ")", "**", "2", "\n", "\n", "self", ".", "guess_count", "+=", "1", "\n", "done", "=", "self", ".", "guess_count", ">=", "self", ".", "guess_max", "\n", "\n", "return", "self", ".", "observation", ",", "reward", "[", "0", "]", ",", "done", ",", "{", "\"number\"", ":", "self", ".", "number", ",", "\"guesses\"", ":", "self", ".", "guess_count", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.hotter_colder.HotterColder.reset": [[62, 67], ["hotter_colder.HotterColder.np_random.uniform"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "number", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "range", ",", "self", ".", "range", ")", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "observation", "=", "0", "\n", "return", "self", ".", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.frozen_lake.FrozenLakeEnv.__init__": [[60, 117], ["numpy.asarray", "numpy.array().astype().ravel", "numpy.array().astype().ravel.sum", "range", "gym.envs.toy_text.discrete.DiscreteEnv.__init__", "ValueError", "range", "numpy.array().astype", "range", "max", "frozen_lake.FrozenLakeEnv.__init__.to_s"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["def", "__init__", "(", "self", ",", "desc", "=", "None", ",", "map_name", "=", "\"4x4\"", ",", "is_slippery", "=", "True", ")", ":", "\n", "        ", "if", "desc", "is", "None", "and", "map_name", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Must provide either desc or map_name'", ")", "\n", "", "elif", "desc", "is", "None", ":", "\n", "            ", "desc", "=", "MAPS", "[", "map_name", "]", "\n", "", "self", ".", "desc", "=", "desc", "=", "np", ".", "asarray", "(", "desc", ",", "dtype", "=", "'c'", ")", "\n", "self", ".", "nrow", ",", "self", ".", "ncol", "=", "nrow", ",", "ncol", "=", "desc", ".", "shape", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "1", ")", "\n", "\n", "nA", "=", "4", "\n", "nS", "=", "nrow", "*", "ncol", "\n", "\n", "isd", "=", "np", ".", "array", "(", "desc", "==", "b'S'", ")", ".", "astype", "(", "'float64'", ")", ".", "ravel", "(", ")", "\n", "isd", "/=", "isd", ".", "sum", "(", ")", "\n", "\n", "P", "=", "{", "s", ":", "{", "a", ":", "[", "]", "for", "a", "in", "range", "(", "nA", ")", "}", "for", "s", "in", "range", "(", "nS", ")", "}", "\n", "\n", "def", "to_s", "(", "row", ",", "col", ")", ":", "\n", "            ", "return", "row", "*", "ncol", "+", "col", "\n", "\n", "", "def", "inc", "(", "row", ",", "col", ",", "a", ")", ":", "\n", "            ", "if", "a", "==", "0", ":", "# left", "\n", "                ", "col", "=", "max", "(", "col", "-", "1", ",", "0", ")", "\n", "", "elif", "a", "==", "1", ":", "# down", "\n", "                ", "row", "=", "min", "(", "row", "+", "1", ",", "nrow", "-", "1", ")", "\n", "", "elif", "a", "==", "2", ":", "# right", "\n", "                ", "col", "=", "min", "(", "col", "+", "1", ",", "ncol", "-", "1", ")", "\n", "", "elif", "a", "==", "3", ":", "# up", "\n", "                ", "row", "=", "max", "(", "row", "-", "1", ",", "0", ")", "\n", "", "return", "(", "row", ",", "col", ")", "\n", "\n", "", "for", "row", "in", "range", "(", "nrow", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "ncol", ")", ":", "\n", "                ", "s", "=", "to_s", "(", "row", ",", "col", ")", "\n", "for", "a", "in", "range", "(", "4", ")", ":", "\n", "                    ", "li", "=", "P", "[", "s", "]", "[", "a", "]", "\n", "letter", "=", "desc", "[", "row", ",", "col", "]", "\n", "if", "letter", "in", "b'GH'", ":", "\n", "                        ", "li", ".", "append", "(", "(", "1.0", ",", "s", ",", "0", ",", "True", ")", ")", "\n", "", "else", ":", "\n", "                        ", "if", "is_slippery", ":", "\n", "                            ", "for", "b", "in", "[", "(", "a", "-", "1", ")", "%", "4", ",", "a", ",", "(", "a", "+", "1", ")", "%", "4", "]", ":", "\n", "                                ", "newrow", ",", "newcol", "=", "inc", "(", "row", ",", "col", ",", "b", ")", "\n", "newstate", "=", "to_s", "(", "newrow", ",", "newcol", ")", "\n", "newletter", "=", "desc", "[", "newrow", ",", "newcol", "]", "\n", "done", "=", "bytes", "(", "newletter", ")", "in", "b'GH'", "\n", "rew", "=", "float", "(", "newletter", "==", "b'G'", ")", "\n", "li", ".", "append", "(", "(", "1.0", "/", "3.0", ",", "newstate", ",", "rew", ",", "done", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "newrow", ",", "newcol", "=", "inc", "(", "row", ",", "col", ",", "a", ")", "\n", "newstate", "=", "to_s", "(", "newrow", ",", "newcol", ")", "\n", "newletter", "=", "desc", "[", "newrow", ",", "newcol", "]", "\n", "done", "=", "bytes", "(", "newletter", ")", "in", "b'GH'", "\n", "rew", "=", "float", "(", "newletter", "==", "b'G'", ")", "\n", "li", ".", "append", "(", "(", "1.0", ",", "newstate", ",", "rew", ",", "done", ")", ")", "\n", "\n", "", "", "", "", "", "super", "(", "FrozenLakeEnv", ",", "self", ")", ".", "__init__", "(", "nS", ",", "nA", ",", "P", ",", "isd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.frozen_lake.FrozenLakeEnv.render": [[118, 133], ["frozen_lake.FrozenLakeEnv.desc.tolist", "gym.utils.colorize", "outfile.write", "six.StringIO", "outfile.write", "outfile.write", "c.decode"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.decode"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "\n", "row", ",", "col", "=", "self", ".", "s", "//", "self", ".", "ncol", ",", "self", ".", "s", "%", "self", ".", "ncol", "\n", "desc", "=", "self", ".", "desc", ".", "tolist", "(", ")", "\n", "desc", "=", "[", "[", "c", ".", "decode", "(", "'utf-8'", ")", "for", "c", "in", "line", "]", "for", "line", "in", "desc", "]", "\n", "desc", "[", "row", "]", "[", "col", "]", "=", "utils", ".", "colorize", "(", "desc", "[", "row", "]", "[", "col", "]", ",", "\"red\"", ",", "highlight", "=", "True", ")", "\n", "if", "self", ".", "lastaction", "is", "not", "None", ":", "\n", "            ", "outfile", ".", "write", "(", "\"  ({})\\n\"", ".", "format", "(", "[", "\"Left\"", ",", "\"Down\"", ",", "\"Right\"", ",", "\"Up\"", "]", "[", "self", ".", "lastaction", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", ")", "\n", "", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "''", ".", "join", "(", "line", ")", "for", "line", "in", "desc", ")", "+", "\"\\n\"", ")", "\n", "\n", "if", "mode", "!=", "'human'", ":", "\n", "            ", "return", "outfile", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.DiscreteEnv.__init__": [[31, 43], ["gym.spaces.Discrete", "gym.spaces.Discrete", "discrete.DiscreteEnv.seed", "discrete.DiscreteEnv.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ",", "nS", ",", "nA", ",", "P", ",", "isd", ")", ":", "\n", "        ", "self", ".", "P", "=", "P", "\n", "self", ".", "isd", "=", "isd", "\n", "self", ".", "lastaction", "=", "None", "# for rendering", "\n", "self", ".", "nS", "=", "nS", "\n", "self", ".", "nA", "=", "nA", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "nA", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "nS", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.DiscreteEnv.seed": [[44, 47], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.DiscreteEnv.reset": [[48, 52], ["discrete.categorical_sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.categorical_sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "s", "=", "categorical_sample", "(", "self", ".", "isd", ",", "self", ".", "np_random", ")", "\n", "self", ".", "lastaction", "=", "None", "\n", "return", "self", ".", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.DiscreteEnv.step": [[53, 60], ["discrete.categorical_sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.categorical_sample"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "transitions", "=", "self", ".", "P", "[", "self", ".", "s", "]", "[", "a", "]", "\n", "i", "=", "categorical_sample", "(", "[", "t", "[", "0", "]", "for", "t", "in", "transitions", "]", ",", "self", ".", "np_random", ")", "\n", "p", ",", "s", ",", "r", ",", "d", "=", "transitions", "[", "i", "]", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "lastaction", "=", "a", "\n", "return", "(", "s", ",", "r", ",", "d", ",", "{", "\"prob\"", ":", "p", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.discrete.categorical_sample": [[6, 14], ["numpy.asarray", "numpy.cumsum", "np_random.rand"], "function", ["None"], ["def", "categorical_sample", "(", "prob_n", ",", "np_random", ")", ":", "\n", "    ", "\"\"\"\n    Sample from categorical distribution\n    Each row specifies class probabilities\n    \"\"\"", "\n", "prob_n", "=", "np", ".", "asarray", "(", "prob_n", ")", "\n", "csprob_n", "=", "np", ".", "cumsum", "(", "prob_n", ")", "\n", "return", "(", "csprob_n", ">", "np_random", ".", "rand", "(", ")", ")", ".", "argmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.guessing_game.GuessingGame.__init__": [[39, 53], ["gym.spaces.Box", "gym.spaces.Discrete", "guessing_game.GuessingGame.seed", "guessing_game.GuessingGame.reset", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "range", "=", "1000", "# Randomly selected number is within +/- this value", "\n", "self", ".", "bounds", "=", "10000", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "self", ".", "bounds", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "bounds", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "\n", "self", ".", "number", "=", "0", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "guess_max", "=", "200", "\n", "self", ".", "observation", "=", "0", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.guessing_game.GuessingGame.seed": [[54, 57], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.guessing_game.GuessingGame.step": [[58, 82], ["guessing_game.GuessingGame.action_space.contains"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "if", "action", "<", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "1", "\n", "\n", "", "elif", "action", "==", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "2", "\n", "\n", "", "elif", "action", ">", "self", ".", "number", ":", "\n", "            ", "self", ".", "observation", "=", "3", "\n", "\n", "", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "if", "(", "self", ".", "number", "-", "self", ".", "range", "*", "0.01", ")", "<", "action", "<", "(", "self", ".", "number", "+", "self", ".", "range", "*", "0.01", ")", ":", "\n", "            ", "reward", "=", "1", "\n", "done", "=", "True", "\n", "\n", "", "self", ".", "guess_count", "+=", "1", "\n", "if", "self", ".", "guess_count", ">=", "self", ".", "guess_max", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "return", "self", ".", "observation", ",", "reward", ",", "done", ",", "{", "\"number\"", ":", "self", ".", "number", ",", "\"guesses\"", ":", "self", ".", "guess_count", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.guessing_game.GuessingGame.reset": [[83, 88], ["guessing_game.GuessingGame.np_random.uniform"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "number", "=", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "range", ",", "self", ".", "range", ")", "\n", "self", ".", "guess_count", "=", "0", "\n", "self", ".", "observation", "=", "0", "\n", "return", "self", ".", "observation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.__init__": [[46, 60], ["rendering.get_display", "pyglet.window.Window", "rendering.Transform", "glEnable", "glBlendFunc"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.get_display"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "display", "=", "None", ")", ":", "\n", "        ", "display", "=", "get_display", "(", "display", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "window", "=", "pyglet", ".", "window", ".", "Window", "(", "width", "=", "width", ",", "height", "=", "height", ",", "display", "=", "display", ")", "\n", "self", ".", "window", ".", "on_close", "=", "self", ".", "window_closed_by_user", "\n", "self", ".", "isopen", "=", "True", "\n", "self", ".", "geoms", "=", "[", "]", "\n", "self", ".", "onetime_geoms", "=", "[", "]", "\n", "self", ".", "transform", "=", "Transform", "(", ")", "\n", "\n", "glEnable", "(", "GL_BLEND", ")", "\n", "glBlendFunc", "(", "GL_SRC_ALPHA", ",", "GL_ONE_MINUS_SRC_ALPHA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.close": [[61, 63], ["rendering.Viewer.window.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "window", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.window_closed_by_user": [[64, 66], ["None"], "methods", ["None"], ["", "def", "window_closed_by_user", "(", "self", ")", ":", "\n", "        ", "self", ".", "isopen", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.set_bounds": [[67, 74], ["rendering.Transform"], "methods", ["None"], ["", "def", "set_bounds", "(", "self", ",", "left", ",", "right", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "assert", "right", ">", "left", "and", "top", ">", "bottom", "\n", "scalex", "=", "self", ".", "width", "/", "(", "right", "-", "left", ")", "\n", "scaley", "=", "self", ".", "height", "/", "(", "top", "-", "bottom", ")", "\n", "self", ".", "transform", "=", "Transform", "(", "\n", "translation", "=", "(", "-", "left", "*", "scalex", ",", "-", "bottom", "*", "scaley", ")", ",", "\n", "scale", "=", "(", "scalex", ",", "scaley", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom": [[75, 77], ["rendering.Viewer.geoms.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "add_geom", "(", "self", ",", "geom", ")", ":", "\n", "        ", "self", ".", "geoms", ".", "append", "(", "geom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_onetime": [[78, 80], ["rendering.Viewer.onetime_geoms.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "add_onetime", "(", "self", ",", "geom", ")", ":", "\n", "        ", "self", ".", "onetime_geoms", ".", "append", "(", "geom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.render": [[81, 108], ["glClearColor", "rendering.Viewer.window.clear", "rendering.Viewer.window.switch_to", "rendering.Viewer.window.dispatch_events", "rendering.Viewer.transform.enable", "rendering.Viewer.transform.disable", "rendering.Viewer.window.flip", "geom.render", "geom.render", "pyglet.image.get_buffer_manager().get_color_buffer", "pyglet.image.get_buffer_manager().get_color_buffer.get_image_data", "numpy.fromstring", "arr.reshape.reshape.reshape", "pyglet.image.get_buffer_manager"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.disable", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render"], ["", "def", "render", "(", "self", ",", "return_rgb_array", "=", "False", ")", ":", "\n", "        ", "glClearColor", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "window", ".", "switch_to", "(", ")", "\n", "self", ".", "window", ".", "dispatch_events", "(", ")", "\n", "self", ".", "transform", ".", "enable", "(", ")", "\n", "for", "geom", "in", "self", ".", "geoms", ":", "\n", "            ", "geom", ".", "render", "(", ")", "\n", "", "for", "geom", "in", "self", ".", "onetime_geoms", ":", "\n", "            ", "geom", ".", "render", "(", ")", "\n", "", "self", ".", "transform", ".", "disable", "(", ")", "\n", "arr", "=", "None", "\n", "if", "return_rgb_array", ":", "\n", "            ", "buffer", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", "\n", "image_data", "=", "buffer", ".", "get_image_data", "(", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "# In https://github.com/openai/gym-http-api/issues/2, we", "\n", "# discovered that someone using Xmonad on Arch was having", "\n", "# a window of size 598 x 398, though a 600 x 400 window", "\n", "# was requested. (Guess Xmonad was preserving a pixel for", "\n", "# the boundary.) So we use the buffer height/width rather", "\n", "# than the requested one.", "\n", "arr", "=", "arr", ".", "reshape", "(", "buffer", ".", "height", ",", "buffer", ".", "width", ",", "4", ")", "\n", "arr", "=", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "", "self", ".", "window", ".", "flip", "(", ")", "\n", "self", ".", "onetime_geoms", "=", "[", "]", "\n", "return", "arr", "if", "return_rgb_array", "else", "self", ".", "isopen", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_circle": [[110, 115], ["rendering.make_circle", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_circle", "(", "self", ",", "radius", "=", "10", ",", "res", "=", "30", ",", "filled", "=", "True", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "make_circle", "(", "radius", "=", "radius", ",", "res", "=", "res", ",", "filled", "=", "filled", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon": [[116, 121], ["rendering.make_polygon", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_polygon", "(", "self", ",", "v", ",", "filled", "=", "True", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "make_polygon", "(", "v", "=", "v", ",", "filled", "=", "filled", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polyline": [[122, 127], ["rendering.make_polyline", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_polyline", "(", "self", ",", "v", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "make_polyline", "(", "v", "=", "v", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_line": [[128, 133], ["rendering.Line", "rendering._add_attrs", "rendering.Viewer.add_onetime"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering._add_attrs", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_onetime"], ["", "def", "draw_line", "(", "self", ",", "start", ",", "end", ",", "**", "attrs", ")", ":", "\n", "        ", "geom", "=", "Line", "(", "start", ",", "end", ")", "\n", "_add_attrs", "(", "geom", ",", "attrs", ")", "\n", "self", ".", "add_onetime", "(", "geom", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.get_array": [[134, 141], ["rendering.Viewer.window.flip", "pyglet.image.get_buffer_manager().get_color_buffer().get_image_data", "rendering.Viewer.window.flip", "numpy.fromstring", "arr.reshape.reshape.reshape", "pyglet.image.get_buffer_manager().get_color_buffer", "pyglet.image.get_buffer_manager"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip", "home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip"], ["", "def", "get_array", "(", "self", ")", ":", "\n", "        ", "self", ".", "window", ".", "flip", "(", ")", "\n", "image_data", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", ".", "get_color_buffer", "(", ")", ".", "get_image_data", "(", ")", "\n", "self", ".", "window", ".", "flip", "(", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "image_data", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "arr", "=", "arr", ".", "reshape", "(", "self", ".", "height", ",", "self", ".", "width", ",", "4", ")", "\n", "return", "arr", "[", ":", ":", "-", "1", ",", ":", ",", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.__del__": [[142, 144], ["rendering.Viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.__init__": [[152, 155], ["rendering.Color"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_color", "=", "Color", "(", "(", "0", ",", "0", ",", "0", ",", "1.0", ")", ")", "\n", "self", ".", "attrs", "=", "[", "self", ".", "_color", "]", "\n", "", "def", "render", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.render": [[155, 161], ["reversed", "rendering.Geom.render1", "attr.enable", "attr.disable"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Image.render1", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineWidth.enable", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.disable"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "for", "attr", "in", "reversed", "(", "self", ".", "attrs", ")", ":", "\n", "            ", "attr", ".", "enable", "(", ")", "\n", "", "self", ".", "render1", "(", ")", "\n", "for", "attr", "in", "self", ".", "attrs", ":", "\n", "            ", "attr", ".", "disable", "(", ")", "\n", "", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.render1": [[161, 163], ["None"], "methods", ["None"], ["", "", "def", "render1", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "add_attr", "(", "self", ",", "attr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr": [[163, 165], ["rendering.Geom.attrs.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "add_attr", "(", "self", ",", "attr", ")", ":", "\n", "        ", "self", ".", "attrs", ".", "append", "(", "attr", ")", "\n", "", "def", "set_color", "(", "self", ",", "r", ",", "g", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color": [[165, 167], ["None"], "methods", ["None"], ["", "def", "set_color", "(", "self", ",", "r", ",", "g", ",", "b", ")", ":", "\n", "        ", "self", ".", "_color", ".", "vec4", "=", "(", "r", ",", "g", ",", "b", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Attr.enable": [[169, 171], ["None"], "methods", ["None"], ["    ", "def", "enable", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "disable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Attr.disable": [[171, 173], ["None"], "methods", ["None"], ["", "def", "disable", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.__init__": [[175, 179], ["rendering.Transform.set_translation", "rendering.Transform.set_rotation", "rendering.Transform.set_scale"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_scale"], ["    ", "def", "__init__", "(", "self", ",", "translation", "=", "(", "0.0", ",", "0.0", ")", ",", "rotation", "=", "0.0", ",", "scale", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "set_translation", "(", "*", "translation", ")", "\n", "self", ".", "set_rotation", "(", "rotation", ")", "\n", "self", ".", "set_scale", "(", "*", "scale", ")", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.enable": [[179, 184], ["glPushMatrix", "glTranslatef", "glRotatef", "glScalef"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glPushMatrix", "(", ")", "\n", "glTranslatef", "(", "self", ".", "translation", "[", "0", "]", ",", "self", ".", "translation", "[", "1", "]", ",", "0", ")", "# translate to GL loc ppint", "\n", "glRotatef", "(", "RAD2DEG", "*", "self", ".", "rotation", ",", "0", ",", "0", ",", "1.0", ")", "\n", "glScalef", "(", "self", ".", "scale", "[", "0", "]", ",", "self", ".", "scale", "[", "1", "]", ",", "1", ")", "\n", "", "def", "disable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.disable": [[184, 186], ["glPopMatrix"], "methods", ["None"], ["", "def", "disable", "(", "self", ")", ":", "\n", "        ", "glPopMatrix", "(", ")", "\n", "", "def", "set_translation", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_translation": [[186, 188], ["float", "float"], "methods", ["None"], ["", "def", "set_translation", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n", "        ", "self", ".", "translation", "=", "(", "float", "(", "newx", ")", ",", "float", "(", "newy", ")", ")", "\n", "", "def", "set_rotation", "(", "self", ",", "new", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation": [[188, 190], ["float"], "methods", ["None"], ["", "def", "set_rotation", "(", "self", ",", "new", ")", ":", "\n", "        ", "self", ".", "rotation", "=", "float", "(", "new", ")", "\n", "", "def", "set_scale", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_scale": [[190, 192], ["float", "float"], "methods", ["None"], ["", "def", "set_scale", "(", "self", ",", "newx", ",", "newy", ")", ":", "\n", "        ", "self", ".", "scale", "=", "(", "float", "(", "newx", ")", ",", "float", "(", "newy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Color.__init__": [[194, 196], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vec4", ")", ":", "\n", "        ", "self", ".", "vec4", "=", "vec4", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Color.enable": [[196, 198], ["glColor4f"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glColor4f", "(", "*", "self", ".", "vec4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.__init__": [[200, 202], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "style", ")", ":", "\n", "        ", "self", ".", "style", "=", "style", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.enable": [[202, 205], ["glEnable", "glLineStipple"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glEnable", "(", "GL_LINE_STIPPLE", ")", "\n", "glLineStipple", "(", "1", ",", "self", ".", "style", ")", "\n", "", "def", "disable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineStyle.disable": [[205, 207], ["glDisable"], "methods", ["None"], ["", "def", "disable", "(", "self", ")", ":", "\n", "        ", "glDisable", "(", "GL_LINE_STIPPLE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineWidth.__init__": [[209, 211], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stroke", ")", ":", "\n", "        ", "self", ".", "stroke", "=", "stroke", "\n", "", "def", "enable", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.LineWidth.enable": [[211, 213], ["glLineWidth"], "methods", ["None"], ["", "def", "enable", "(", "self", ")", ":", "\n", "        ", "glLineWidth", "(", "self", ".", "stroke", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Point.__init__": [[215, 217], ["rendering.Geom.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Point.render1": [[217, 221], ["glBegin", "glVertex3f", "glEnd"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "glBegin", "(", "GL_POINTS", ")", "# draw point", "\n", "glVertex3f", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.FilledPolygon.__init__": [[223, 226], ["rendering.Geom.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "v", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "v", "=", "v", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.FilledPolygon.render1": [[226, 233], ["glEnd", "len", "glBegin", "glVertex3f", "len", "glBegin", "glBegin"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "v", ")", "==", "4", ":", "glBegin", "(", "GL_QUADS", ")", "\n", "elif", "len", "(", "self", ".", "v", ")", ">", "4", ":", "glBegin", "(", "GL_POLYGON", ")", "\n", "else", ":", "glBegin", "(", "GL_TRIANGLES", ")", "\n", "for", "p", "in", "self", ".", "v", ":", "\n", "            ", "glVertex3f", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "# draw each vertex", "\n", "", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Compound.__init__": [[261, 266], ["rendering.Geom.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gs", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "gs", "=", "gs", "\n", "for", "g", "in", "self", ".", "gs", ":", "\n", "            ", "g", ".", "attrs", "=", "[", "a", "for", "a", "in", "g", ".", "attrs", "if", "not", "isinstance", "(", "a", ",", "Color", ")", "]", "\n", "", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Compound.render1": [[266, 269], ["g.render"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render"], ["", "", "def", "render1", "(", "self", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "gs", ":", "\n", "            ", "g", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.PolyLine.__init__": [[271, 277], ["rendering.Geom.__init__", "rendering.LineWidth", "rendering.PolyLine.add_attr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr"], ["    ", "def", "__init__", "(", "self", ",", "v", ",", "close", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "close", "=", "close", "\n", "self", ".", "linewidth", "=", "LineWidth", "(", "1", ")", "\n", "self", ".", "add_attr", "(", "self", ".", "linewidth", ")", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.PolyLine.render1": [[277, 282], ["glBegin", "glEnd", "glVertex3f"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "glBegin", "(", "GL_LINE_LOOP", "if", "self", ".", "close", "else", "GL_LINE_STRIP", ")", "\n", "for", "p", "in", "self", ".", "v", ":", "\n", "            ", "glVertex3f", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "0", ")", "# draw each vertex", "\n", "", "glEnd", "(", ")", "\n", "", "def", "set_linewidth", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.PolyLine.set_linewidth": [[282, 284], ["None"], "methods", ["None"], ["", "def", "set_linewidth", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "linewidth", ".", "stroke", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Line.__init__": [[286, 292], ["rendering.Geom.__init__", "rendering.LineWidth", "rendering.Line.add_attr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr"], ["    ", "def", "__init__", "(", "self", ",", "start", "=", "(", "0.0", ",", "0.0", ")", ",", "end", "=", "(", "0.0", ",", "0.0", ")", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "linewidth", "=", "LineWidth", "(", "1", ")", "\n", "self", ".", "add_attr", "(", "self", ".", "linewidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Line.render1": [[293, 298], ["glBegin", "glVertex2f", "glVertex2f", "glEnd"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "glBegin", "(", "GL_LINES", ")", "\n", "glVertex2f", "(", "*", "self", ".", "start", ")", "\n", "glVertex2f", "(", "*", "self", ".", "end", ")", "\n", "glEnd", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Image.__init__": [[300, 307], ["rendering.Geom.__init__", "pyglet.image.load"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load"], ["    ", "def", "__init__", "(", "self", ",", "fname", ",", "width", ",", "height", ")", ":", "\n", "        ", "Geom", ".", "__init__", "(", "self", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "img", "=", "pyglet", ".", "image", ".", "load", "(", "fname", ")", "\n", "self", ".", "img", "=", "img", "\n", "self", ".", "flip", "=", "False", "\n", "", "def", "render1", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Image.render1": [[307, 309], ["rendering.Image.img.blit"], "methods", ["None"], ["", "def", "render1", "(", "self", ")", ":", "\n", "        ", "self", ".", "img", ".", "blit", "(", "-", "self", ".", "width", "/", "2", ",", "-", "self", ".", "height", "/", "2", ",", "width", "=", "self", ".", "width", ",", "height", "=", "self", ".", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.__init__": [[313, 317], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "display", "=", "None", ")", ":", "\n", "        ", "self", ".", "window", "=", "None", "\n", "self", ".", "isopen", "=", "False", "\n", "self", ".", "display", "=", "display", "\n", "", "def", "imshow", "(", "self", ",", "arr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.imshow": [[317, 341], ["pyglet.image.ImageData", "rendering.SimpleImageViewer.window.clear", "rendering.SimpleImageViewer.window.switch_to", "rendering.SimpleImageViewer.window.dispatch_events", "pyglet.image.ImageData.blit", "rendering.SimpleImageViewer.window.flip", "pyglet.window.Window", "len", "arr.tobytes"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.kellycoinflip.flip"], ["", "def", "imshow", "(", "self", ",", "arr", ")", ":", "\n", "        ", "if", "self", ".", "window", "is", "None", ":", "\n", "            ", "height", ",", "width", ",", "_channels", "=", "arr", ".", "shape", "\n", "self", ".", "window", "=", "pyglet", ".", "window", ".", "Window", "(", "width", "=", "4", "*", "width", ",", "height", "=", "4", "*", "height", ",", "display", "=", "self", ".", "display", ",", "vsync", "=", "False", ",", "resizable", "=", "True", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "isopen", "=", "True", "\n", "\n", "@", "self", ".", "window", ".", "event", "\n", "def", "on_resize", "(", "width", ",", "height", ")", ":", "\n", "                ", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n", "", "@", "self", ".", "window", ".", "event", "\n", "def", "on_close", "(", ")", ":", "\n", "                ", "self", ".", "isopen", "=", "False", "\n", "\n", "", "", "assert", "len", "(", "arr", ".", "shape", ")", "==", "3", ",", "\"You passed in an image with the wrong number shape\"", "\n", "image", "=", "pyglet", ".", "image", ".", "ImageData", "(", "arr", ".", "shape", "[", "1", "]", ",", "arr", ".", "shape", "[", "0", "]", ",", "'RGB'", ",", "arr", ".", "tobytes", "(", ")", ",", "pitch", "=", "arr", ".", "shape", "[", "1", "]", "*", "-", "3", ")", "\n", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "window", ".", "switch_to", "(", ")", "\n", "self", ".", "window", ".", "dispatch_events", "(", ")", "\n", "image", ".", "blit", "(", "0", ",", "0", ",", "width", "=", "self", ".", "window", ".", "width", ",", "height", "=", "self", ".", "window", ".", "height", ")", "\n", "self", ".", "window", ".", "flip", "(", ")", "\n", "", "def", "close", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.close": [[341, 345], ["rendering.SimpleImageViewer.window.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "isopen", ":", "\n", "            ", "self", ".", "window", ".", "close", "(", ")", "\n", "self", ".", "isopen", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.SimpleImageViewer.__del__": [[346, 348], ["rendering.SimpleImageViewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.get_display": [[32, 44], ["isinstance", "pyglet.canvas.Display", "gym.error.Error"], "function", ["None"], ["def", "get_display", "(", "spec", ")", ":", "\n", "    ", "\"\"\"Convert a display specification (such as :0) into an actual Display\n    object.\n\n    Pyglet only supports multiple Displays on Linux.\n    \"\"\"", "\n", "if", "spec", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "spec", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "return", "pyglet", ".", "canvas", ".", "Display", "(", "spec", ")", "\n", "", "else", ":", "\n", "        ", "raise", "error", ".", "Error", "(", "'Invalid display specification: {}. (Must be a string like :0 or None.)'", ".", "format", "(", "spec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering._add_attrs": [[145, 150], ["geom.set_color", "geom.set_linewidth"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.PolyLine.set_linewidth"], ["", "", "def", "_add_attrs", "(", "geom", ",", "attrs", ")", ":", "\n", "    ", "if", "\"color\"", "in", "attrs", ":", "\n", "        ", "geom", ".", "set_color", "(", "*", "attrs", "[", "\"color\"", "]", ")", "\n", "", "if", "\"linewidth\"", "in", "attrs", ":", "\n", "        ", "geom", ".", "set_linewidth", "(", "attrs", "[", "\"linewidth\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle": [[234, 243], ["range", "points.append", "rendering.FilledPolygon", "rendering.PolyLine", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "", "def", "make_circle", "(", "radius", "=", "10", ",", "res", "=", "30", ",", "filled", "=", "True", ")", ":", "\n", "    ", "points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "res", ")", ":", "\n", "        ", "ang", "=", "2", "*", "math", ".", "pi", "*", "i", "/", "res", "\n", "points", ".", "append", "(", "(", "math", ".", "cos", "(", "ang", ")", "*", "radius", ",", "math", ".", "sin", "(", "ang", ")", "*", "radius", ")", ")", "\n", "", "if", "filled", ":", "\n", "        ", "return", "FilledPolygon", "(", "points", ")", "\n", "", "else", ":", "\n", "        ", "return", "PolyLine", "(", "points", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polygon": [[244, 247], ["rendering.FilledPolygon", "rendering.PolyLine"], "function", ["None"], ["", "", "def", "make_polygon", "(", "v", ",", "filled", "=", "True", ")", ":", "\n", "    ", "if", "filled", ":", "return", "FilledPolygon", "(", "v", ")", "\n", "else", ":", "return", "PolyLine", "(", "v", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polyline": [[248, 250], ["rendering.PolyLine"], "function", ["None"], ["", "def", "make_polyline", "(", "v", ")", ":", "\n", "    ", "return", "PolyLine", "(", "v", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_capsule": [[251, 259], ["rendering.make_polygon", "rendering.make_circle", "rendering.make_circle", "make_circle.add_attr", "rendering.Compound", "rendering.Transform"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr"], ["", "def", "make_capsule", "(", "length", ",", "width", ")", ":", "\n", "    ", "l", ",", "r", ",", "t", ",", "b", "=", "0", ",", "length", ",", "width", "/", "2", ",", "-", "width", "/", "2", "\n", "box", "=", "make_polygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "circ0", "=", "make_circle", "(", "width", "/", "2", ")", "\n", "circ1", "=", "make_circle", "(", "width", "/", "2", ")", "\n", "circ1", ".", "add_attr", "(", "Transform", "(", "translation", "=", "(", "length", ",", "0", ")", ")", ")", "\n", "geom", "=", "Compound", "(", "[", "box", ",", "circ0", ",", "circ1", "]", ")", "\n", "return", "geom", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.__init__": [[29, 48], ["numpy.array", "numpy.array", "gym.spaces.Box", "gym.spaces.Box", "continuous_mountain_car.Continuous_MountainCarEnv.seed", "continuous_mountain_car.Continuous_MountainCarEnv.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "min_action", "=", "-", "1.0", "\n", "self", ".", "max_action", "=", "1.0", "\n", "self", ".", "min_position", "=", "-", "1.2", "\n", "self", ".", "max_position", "=", "0.6", "\n", "self", ".", "max_speed", "=", "0.07", "\n", "self", ".", "goal_position", "=", "0.45", "# was 0.5 in gym, 0.45 in Arnaud de Broissia's version", "\n", "self", ".", "power", "=", "0.0015", "\n", "\n", "self", ".", "low_state", "=", "np", ".", "array", "(", "[", "self", ".", "min_position", ",", "-", "self", ".", "max_speed", "]", ")", "\n", "self", ".", "high_state", "=", "np", ".", "array", "(", "[", "self", ".", "max_position", ",", "self", ".", "max_speed", "]", ")", "\n", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "self", ".", "min_action", ",", "high", "=", "self", ".", "max_action", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "self", ".", "low_state", ",", "high", "=", "self", ".", "high_state", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.seed": [[49, 52], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.step": [[53, 76], ["min", "bool", "numpy.array", "max", "math.pow", "math.cos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "position", "=", "self", ".", "state", "[", "0", "]", "\n", "velocity", "=", "self", ".", "state", "[", "1", "]", "\n", "force", "=", "min", "(", "max", "(", "action", "[", "0", "]", ",", "-", "1.0", ")", ",", "1.0", ")", "\n", "\n", "velocity", "+=", "force", "*", "self", ".", "power", "-", "0.0025", "*", "math", ".", "cos", "(", "3", "*", "position", ")", "\n", "if", "(", "velocity", ">", "self", ".", "max_speed", ")", ":", "velocity", "=", "self", ".", "max_speed", "\n", "if", "(", "velocity", "<", "-", "self", ".", "max_speed", ")", ":", "velocity", "=", "-", "self", ".", "max_speed", "\n", "position", "+=", "velocity", "\n", "if", "(", "position", ">", "self", ".", "max_position", ")", ":", "position", "=", "self", ".", "max_position", "\n", "if", "(", "position", "<", "self", ".", "min_position", ")", ":", "position", "=", "self", ".", "min_position", "\n", "if", "(", "position", "==", "self", ".", "min_position", "and", "velocity", "<", "0", ")", ":", "velocity", "=", "0", "\n", "\n", "done", "=", "bool", "(", "position", ">=", "self", ".", "goal_position", ")", "\n", "\n", "reward", "=", "0", "\n", "if", "done", ":", "\n", "            ", "reward", "=", "100.0", "\n", "", "reward", "-=", "math", ".", "pow", "(", "action", "[", "0", "]", ",", "2", ")", "*", "0.1", "\n", "\n", "self", ".", "state", "=", "np", ".", "array", "(", "[", "position", ",", "velocity", "]", ")", "\n", "return", "self", ".", "state", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.reset": [[77, 80], ["numpy.array", "numpy.array", "continuous_mountain_car.Continuous_MountainCarEnv.np_random.uniform"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "array", "(", "[", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.6", ",", "high", "=", "-", "0.4", ")", ",", "0", "]", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv._height": [[84, 86], ["numpy.sin"], "methods", ["None"], ["", "def", "_height", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "np", ".", "sin", "(", "3", "*", "xs", ")", "*", ".45", "+", ".55", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.render": [[87, 140], ["continuous_mountain_car.Continuous_MountainCarEnv.cartrans.set_translation", "continuous_mountain_car.Continuous_MountainCarEnv.cartrans.set_rotation", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.render", "rendering.Viewer", "numpy.linspace", "continuous_mountain_car.Continuous_MountainCarEnv._height", "list", "rendering.make_polyline", "continuous_mountain_car.Continuous_MountainCarEnv.track.set_linewidth", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.add_attr", "rendering.Transform", "rendering.FilledPolygon.add_attr", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.set_color", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "rendering.make_circle.set_color", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.Line", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.set_color", "continuous_mountain_car.Continuous_MountainCarEnv.viewer.add_geom", "math.cos", "zip", "rendering.Transform", "rendering.Transform", "rendering.Transform", "continuous_mountain_car.Continuous_MountainCarEnv._height", "continuous_mountain_car.Continuous_MountainCarEnv._height"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.PolyLine.set_linewidth", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "screen_width", "=", "600", "\n", "screen_height", "=", "400", "\n", "\n", "world_width", "=", "self", ".", "max_position", "-", "self", ".", "min_position", "\n", "scale", "=", "screen_width", "/", "world_width", "\n", "carwidth", "=", "40", "\n", "carheight", "=", "20", "\n", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "screen_width", ",", "screen_height", ")", "\n", "xs", "=", "np", ".", "linspace", "(", "self", ".", "min_position", ",", "self", ".", "max_position", ",", "100", ")", "\n", "ys", "=", "self", ".", "_height", "(", "xs", ")", "\n", "xys", "=", "list", "(", "zip", "(", "(", "xs", "-", "self", ".", "min_position", ")", "*", "scale", ",", "ys", "*", "scale", ")", ")", "\n", "\n", "self", ".", "track", "=", "rendering", ".", "make_polyline", "(", "xys", ")", "\n", "self", ".", "track", ".", "set_linewidth", "(", "4", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "track", ")", "\n", "\n", "clearance", "=", "10", "\n", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "carwidth", "/", "2", ",", "carwidth", "/", "2", ",", "carheight", ",", "0", "\n", "car", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "car", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "0", ",", "clearance", ")", ")", ")", "\n", "self", ".", "cartrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "car", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "car", ")", "\n", "frontwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "frontwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "frontwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "frontwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "frontwheel", ")", "\n", "backwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "backwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "-", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "backwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "backwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "backwheel", ")", "\n", "flagx", "=", "(", "self", ".", "goal_position", "-", "self", ".", "min_position", ")", "*", "scale", "\n", "flagy1", "=", "self", ".", "_height", "(", "self", ".", "goal_position", ")", "*", "scale", "\n", "flagy2", "=", "flagy1", "+", "50", "\n", "flagpole", "=", "rendering", ".", "Line", "(", "(", "flagx", ",", "flagy1", ")", ",", "(", "flagx", ",", "flagy2", ")", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flagpole", ")", "\n", "flag", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "flagx", ",", "flagy2", ")", ",", "(", "flagx", ",", "flagy2", "-", "10", ")", ",", "(", "flagx", "+", "25", ",", "flagy2", "-", "5", ")", "]", ")", "\n", "flag", ".", "set_color", "(", ".8", ",", ".8", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flag", ")", "\n", "\n", "", "pos", "=", "self", ".", "state", "[", "0", "]", "\n", "self", ".", "cartrans", ".", "set_translation", "(", "(", "pos", "-", "self", ".", "min_position", ")", "*", "scale", ",", "self", ".", "_height", "(", "pos", ")", "*", "scale", ")", "\n", "self", ".", "cartrans", ".", "set_rotation", "(", "math", ".", "cos", "(", "3", "*", "pos", ")", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.continuous_mountain_car.Continuous_MountainCarEnv.close": [[141, 143], ["continuous_mountain_car.Continuous_MountainCarEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", ":", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv.__init__": [[13, 24], ["numpy.array", "gym.spaces.Box", "gym.spaces.Box", "pendulum.PendulumEnv.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_speed", "=", "8", "\n", "self", ".", "max_torque", "=", "2.", "\n", "self", ".", "dt", "=", ".05", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "high", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", ",", "self", ".", "max_speed", "]", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "self", ".", "max_torque", ",", "high", "=", "self", ".", "max_torque", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "high", ",", "high", "=", "high", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv.seed": [[25, 28], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv.step": [[29, 47], ["numpy.clip", "numpy.array", "numpy.clip", "pendulum.PendulumEnv._get_obs", "pendulum.angle_normalize", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.angle_normalize"], ["", "def", "step", "(", "self", ",", "u", ")", ":", "\n", "        ", "th", ",", "thdot", "=", "self", ".", "state", "# th := theta", "\n", "\n", "g", "=", "10.", "\n", "m", "=", "1.", "\n", "l", "=", "1.", "\n", "dt", "=", "self", ".", "dt", "\n", "\n", "u", "=", "np", ".", "clip", "(", "u", ",", "-", "self", ".", "max_torque", ",", "self", ".", "max_torque", ")", "[", "0", "]", "\n", "self", ".", "last_u", "=", "u", "# for rendering", "\n", "costs", "=", "angle_normalize", "(", "th", ")", "**", "2", "+", ".1", "*", "thdot", "**", "2", "+", ".001", "*", "(", "u", "**", "2", ")", "\n", "\n", "newthdot", "=", "thdot", "+", "(", "-", "3", "*", "g", "/", "(", "2", "*", "l", ")", "*", "np", ".", "sin", "(", "th", "+", "np", ".", "pi", ")", "+", "3.", "/", "(", "m", "*", "l", "**", "2", ")", "*", "u", ")", "*", "dt", "\n", "newth", "=", "th", "+", "newthdot", "*", "dt", "\n", "newthdot", "=", "np", ".", "clip", "(", "newthdot", ",", "-", "self", ".", "max_speed", ",", "self", ".", "max_speed", ")", "#pylint: disable=E1111", "\n", "\n", "self", ".", "state", "=", "np", ".", "array", "(", "[", "newth", ",", "newthdot", "]", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", ",", "-", "costs", ",", "False", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv.reset": [[48, 53], ["numpy.array", "pendulum.PendulumEnv.np_random.uniform", "pendulum.PendulumEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "high", "=", "np", ".", "array", "(", "[", "np", ".", "pi", ",", "1", "]", ")", "\n", "self", ".", "state", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "high", ",", "high", "=", "high", ")", "\n", "self", ".", "last_u", "=", "None", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv._get_obs": [[54, 57], ["numpy.array", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "theta", ",", "thetadot", "=", "self", ".", "state", "\n", "return", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", ",", "thetadot", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv.render": [[58, 83], ["pendulum.PendulumEnv.viewer.add_onetime", "pendulum.PendulumEnv.pole_transform.set_rotation", "pendulum.PendulumEnv.viewer.render", "rendering.Viewer", "pendulum.PendulumEnv.viewer.set_bounds", "rendering.make_capsule", "rendering.make_capsule.set_color", "rendering.Transform", "rendering.make_capsule.add_attr", "pendulum.PendulumEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.set_color", "pendulum.PendulumEnv.viewer.add_geom", "os.path.join", "rendering.Image", "rendering.Transform", "pendulum.PendulumEnv.img.add_attr", "os.path.dirname", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_onetime", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_capsule", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "500", ",", "500", ")", "\n", "self", ".", "viewer", ".", "set_bounds", "(", "-", "2.2", ",", "2.2", ",", "-", "2.2", ",", "2.2", ")", "\n", "rod", "=", "rendering", ".", "make_capsule", "(", "1", ",", ".2", ")", "\n", "rod", ".", "set_color", "(", ".8", ",", ".3", ",", ".3", ")", "\n", "self", ".", "pole_transform", "=", "rendering", ".", "Transform", "(", ")", "\n", "rod", ".", "add_attr", "(", "self", ".", "pole_transform", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "rod", ")", "\n", "axle", "=", "rendering", ".", "make_circle", "(", ".05", ")", "\n", "axle", ".", "set_color", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "axle", ")", "\n", "fname", "=", "path", ".", "join", "(", "path", ".", "dirname", "(", "__file__", ")", ",", "\"assets/clockwise.png\"", ")", "\n", "self", ".", "img", "=", "rendering", ".", "Image", "(", "fname", ",", "1.", ",", "1.", ")", "\n", "self", ".", "imgtrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "self", ".", "img", ".", "add_attr", "(", "self", ".", "imgtrans", ")", "\n", "\n", "", "self", ".", "viewer", ".", "add_onetime", "(", "self", ".", "img", ")", "\n", "self", ".", "pole_transform", ".", "set_rotation", "(", "self", ".", "state", "[", "0", "]", "+", "np", ".", "pi", "/", "2", ")", "\n", "if", "self", ".", "last_u", ":", "\n", "            ", "self", ".", "imgtrans", ".", "scale", "=", "(", "-", "self", ".", "last_u", "/", "2", ",", "np", ".", "abs", "(", "self", ".", "last_u", ")", "/", "2", ")", "\n", "\n", "", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.PendulumEnv.close": [[84, 86], ["pendulum.PendulumEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", ":", "self", ".", "viewer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.pendulum.angle_normalize": [[87, 89], ["None"], "function", ["None"], ["", "", "def", "angle_normalize", "(", "x", ")", ":", "\n", "    ", "return", "(", "(", "(", "x", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", ")", "-", "np", ".", "pi", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.cartpole.CartPoleEnv.__init__": [[19, 48], ["numpy.array", "gym.spaces.Discrete", "gym.spaces.Box", "cartpole.CartPoleEnv.seed", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "gravity", "=", "9.8", "\n", "self", ".", "masscart", "=", "1.0", "\n", "self", ".", "masspole", "=", "0.1", "\n", "self", ".", "total_mass", "=", "(", "self", ".", "masspole", "+", "self", ".", "masscart", ")", "\n", "self", ".", "length", "=", "0.5", "# actually half the pole's length", "\n", "self", ".", "polemass_length", "=", "(", "self", ".", "masspole", "*", "self", ".", "length", ")", "\n", "self", ".", "force_mag", "=", "10.0", "\n", "self", ".", "tau", "=", "0.02", "# seconds between state updates", "\n", "\n", "# Angle at which to fail the episode", "\n", "self", ".", "theta_threshold_radians", "=", "12", "*", "2", "*", "math", ".", "pi", "/", "360", "\n", "self", ".", "x_threshold", "=", "2.4", "\n", "\n", "# Angle limit set to 2 * theta_threshold_radians so failing observation is still within bounds", "\n", "high", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "x_threshold", "*", "2", ",", "\n", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "self", ".", "theta_threshold_radians", "*", "2", ",", "\n", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", "]", ")", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "2", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "-", "high", ",", "high", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "state", "=", "None", "\n", "\n", "self", ".", "steps_beyond_done", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.cartpole.CartPoleEnv.seed": [[49, 52], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.cartpole.CartPoleEnv.step": [[53, 87], ["cartpole.CartPoleEnv.action_space.contains", "math.cos", "math.sin", "bool", "numpy.array", "type", "gym.logger.warn"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalid\"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "state", "=", "self", ".", "state", "\n", "x", ",", "x_dot", ",", "theta", ",", "theta_dot", "=", "state", "\n", "force", "=", "self", ".", "force_mag", "if", "action", "==", "1", "else", "-", "self", ".", "force_mag", "\n", "costheta", "=", "math", ".", "cos", "(", "theta", ")", "\n", "sintheta", "=", "math", ".", "sin", "(", "theta", ")", "\n", "temp", "=", "(", "force", "+", "self", ".", "polemass_length", "*", "theta_dot", "*", "theta_dot", "*", "sintheta", ")", "/", "self", ".", "total_mass", "\n", "thetaacc", "=", "(", "self", ".", "gravity", "*", "sintheta", "-", "costheta", "*", "temp", ")", "/", "(", "self", ".", "length", "*", "(", "4.0", "/", "3.0", "-", "self", ".", "masspole", "*", "costheta", "*", "costheta", "/", "self", ".", "total_mass", ")", ")", "\n", "xacc", "=", "temp", "-", "self", ".", "polemass_length", "*", "thetaacc", "*", "costheta", "/", "self", ".", "total_mass", "\n", "x", "=", "x", "+", "self", ".", "tau", "*", "x_dot", "\n", "x_dot", "=", "x_dot", "+", "self", ".", "tau", "*", "xacc", "\n", "theta", "=", "theta", "+", "self", ".", "tau", "*", "theta_dot", "\n", "theta_dot", "=", "theta_dot", "+", "self", ".", "tau", "*", "thetaacc", "\n", "self", ".", "state", "=", "(", "x", ",", "x_dot", ",", "theta", ",", "theta_dot", ")", "\n", "done", "=", "x", "<", "-", "self", ".", "x_threshold", "or", "x", ">", "self", ".", "x_threshold", "or", "theta", "<", "-", "self", ".", "theta_threshold_radians", "or", "theta", ">", "self", ".", "theta_threshold_radians", "\n", "done", "=", "bool", "(", "done", ")", "\n", "\n", "if", "not", "done", ":", "\n", "            ", "reward", "=", "1.0", "\n", "", "elif", "self", ".", "steps_beyond_done", "is", "None", ":", "\n", "# Pole just fell!", "\n", "            ", "self", ".", "steps_beyond_done", "=", "0", "\n", "reward", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "steps_beyond_done", "==", "0", ":", "\n", "                ", "logger", ".", "warn", "(", "\"You are calling 'step()' even though this environment has already returned done = True. You should always call 'reset()' once you receive 'done = True' -- any further steps are undefined behavior.\"", ")", "\n", "", "self", ".", "steps_beyond_done", "+=", "1", "\n", "reward", "=", "0.0", "\n", "\n", "", "return", "np", ".", "array", "(", "self", ".", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.cartpole.CartPoleEnv.reset": [[88, 92], ["cartpole.CartPoleEnv.np_random.uniform", "numpy.array"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.05", ",", "high", "=", "0.05", ",", "size", "=", "(", "4", ",", ")", ")", "\n", "self", ".", "steps_beyond_done", "=", "None", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.cartpole.CartPoleEnv.render": [[93, 138], ["cartpole.CartPoleEnv.carttrans.set_translation", "cartpole.CartPoleEnv.poletrans.set_rotation", "cartpole.CartPoleEnv.viewer.render", "rendering.Viewer", "rendering.FilledPolygon", "rendering.Transform", "rendering.FilledPolygon.add_attr", "cartpole.CartPoleEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.set_color", "rendering.Transform", "rendering.FilledPolygon.add_attr", "rendering.FilledPolygon.add_attr", "cartpole.CartPoleEnv.viewer.add_geom", "rendering.make_circle", "cartpole.CartPoleEnv.axle.add_attr", "cartpole.CartPoleEnv.axle.add_attr", "cartpole.CartPoleEnv.axle.set_color", "cartpole.CartPoleEnv.viewer.add_geom", "rendering.Line", "cartpole.CartPoleEnv.track.set_color", "cartpole.CartPoleEnv.viewer.add_geom"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "screen_width", "=", "600", "\n", "screen_height", "=", "400", "\n", "\n", "world_width", "=", "self", ".", "x_threshold", "*", "2", "\n", "scale", "=", "screen_width", "/", "world_width", "\n", "carty", "=", "100", "# TOP OF CART", "\n", "polewidth", "=", "10.0", "\n", "polelen", "=", "scale", "*", "1.0", "\n", "cartwidth", "=", "50.0", "\n", "cartheight", "=", "30.0", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "screen_width", ",", "screen_height", ")", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "cartwidth", "/", "2", ",", "cartwidth", "/", "2", ",", "cartheight", "/", "2", ",", "-", "cartheight", "/", "2", "\n", "axleoffset", "=", "cartheight", "/", "4.0", "\n", "cart", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "self", ".", "carttrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "cart", ".", "add_attr", "(", "self", ".", "carttrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "cart", ")", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "polewidth", "/", "2", ",", "polewidth", "/", "2", ",", "polelen", "-", "polewidth", "/", "2", ",", "-", "polewidth", "/", "2", "\n", "pole", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "pole", ".", "set_color", "(", ".8", ",", ".6", ",", ".4", ")", "\n", "self", ".", "poletrans", "=", "rendering", ".", "Transform", "(", "translation", "=", "(", "0", ",", "axleoffset", ")", ")", "\n", "pole", ".", "add_attr", "(", "self", ".", "poletrans", ")", "\n", "pole", ".", "add_attr", "(", "self", ".", "carttrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "pole", ")", "\n", "self", ".", "axle", "=", "rendering", ".", "make_circle", "(", "polewidth", "/", "2", ")", "\n", "self", ".", "axle", ".", "add_attr", "(", "self", ".", "poletrans", ")", "\n", "self", ".", "axle", ".", "add_attr", "(", "self", ".", "carttrans", ")", "\n", "self", ".", "axle", ".", "set_color", "(", ".5", ",", ".5", ",", ".8", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "axle", ")", "\n", "self", ".", "track", "=", "rendering", ".", "Line", "(", "(", "0", ",", "carty", ")", ",", "(", "screen_width", ",", "carty", ")", ")", "\n", "self", ".", "track", ".", "set_color", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "track", ")", "\n", "\n", "", "if", "self", ".", "state", "is", "None", ":", "return", "None", "\n", "\n", "x", "=", "self", ".", "state", "\n", "cartx", "=", "x", "[", "0", "]", "*", "scale", "+", "screen_width", "/", "2.0", "# MIDDLE OF CART", "\n", "self", ".", "carttrans", ".", "set_translation", "(", "cartx", ",", "carty", ")", "\n", "self", ".", "poletrans", ".", "set_rotation", "(", "-", "x", "[", "2", "]", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.cartpole.CartPoleEnv.close": [[139, 141], ["cartpole.CartPoleEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", ":", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv.__init__": [[85, 93], ["numpy.array", "gym.spaces.Box", "gym.spaces.Discrete", "acrobot.AcrobotEnv.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", "=", "None", "\n", "high", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "self", ".", "MAX_VEL_1", ",", "self", ".", "MAX_VEL_2", "]", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv.seed": [[94, 97], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv.reset": [[98, 101], ["acrobot.AcrobotEnv.np_random.uniform", "acrobot.AcrobotEnv._get_ob"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ",", "size", "=", "(", "4", ",", ")", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv.step": [[102, 131], ["numpy.append", "acrobot.rk4", "acrobot.wrap", "acrobot.wrap", "acrobot.bound", "acrobot.bound", "acrobot.AcrobotEnv._terminal", "acrobot.AcrobotEnv.np_random.uniform", "acrobot.AcrobotEnv._get_ob"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.rk4", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.wrap", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.wrap", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.bound", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.bound", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv._terminal", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "s", "=", "self", ".", "state", "\n", "torque", "=", "self", ".", "AVAIL_TORQUE", "[", "a", "]", "\n", "\n", "# Add noise to the force action", "\n", "if", "self", ".", "torque_noise_max", ">", "0", ":", "\n", "            ", "torque", "+=", "self", ".", "np_random", ".", "uniform", "(", "-", "self", ".", "torque_noise_max", ",", "self", ".", "torque_noise_max", ")", "\n", "\n", "# Now, augment the state with our force action so it can be passed to", "\n", "# _dsdt", "\n", "", "s_augmented", "=", "np", ".", "append", "(", "s", ",", "torque", ")", "\n", "\n", "ns", "=", "rk4", "(", "self", ".", "_dsdt", ",", "s_augmented", ",", "[", "0", ",", "self", ".", "dt", "]", ")", "\n", "# only care about final timestep of integration returned by integrator", "\n", "ns", "=", "ns", "[", "-", "1", "]", "\n", "ns", "=", "ns", "[", ":", "4", "]", "# omit action", "\n", "# ODEINT IS TOO SLOW!", "\n", "# ns_continuous = integrate.odeint(self._dsdt, self.s_continuous, [0, self.dt])", "\n", "# self.s_continuous = ns_continuous[-1] # We only care about the state", "\n", "# at the ''final timestep'', self.dt", "\n", "\n", "ns", "[", "0", "]", "=", "wrap", "(", "ns", "[", "0", "]", ",", "-", "pi", ",", "pi", ")", "\n", "ns", "[", "1", "]", "=", "wrap", "(", "ns", "[", "1", "]", ",", "-", "pi", ",", "pi", ")", "\n", "ns", "[", "2", "]", "=", "bound", "(", "ns", "[", "2", "]", ",", "-", "self", ".", "MAX_VEL_1", ",", "self", ".", "MAX_VEL_1", ")", "\n", "ns", "[", "3", "]", "=", "bound", "(", "ns", "[", "3", "]", ",", "-", "self", ".", "MAX_VEL_2", ",", "self", ".", "MAX_VEL_2", ")", "\n", "self", ".", "state", "=", "ns", "\n", "terminal", "=", "self", ".", "_terminal", "(", ")", "\n", "reward", "=", "-", "1.", "if", "not", "terminal", "else", "0.", "\n", "return", "(", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "terminal", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv._get_ob": [[132, 135], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "state", "\n", "return", "np", ".", "array", "(", "[", "cos", "(", "s", "[", "0", "]", ")", ",", "np", ".", "sin", "(", "s", "[", "0", "]", ")", ",", "cos", "(", "s", "[", "1", "]", ")", ",", "sin", "(", "s", "[", "1", "]", ")", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv._terminal": [[136, 139], ["bool", "numpy.cos", "numpy.cos"], "methods", ["None"], ["", "def", "_terminal", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "state", "\n", "return", "bool", "(", "-", "np", ".", "cos", "(", "s", "[", "0", "]", ")", "-", "np", ".", "cos", "(", "s", "[", "1", "]", "+", "s", "[", "0", "]", ")", ">", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv._dsdt": [[140, 174], ["numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "_dsdt", "(", "self", ",", "s_augmented", ",", "t", ")", ":", "\n", "        ", "m1", "=", "self", ".", "LINK_MASS_1", "\n", "m2", "=", "self", ".", "LINK_MASS_2", "\n", "l1", "=", "self", ".", "LINK_LENGTH_1", "\n", "lc1", "=", "self", ".", "LINK_COM_POS_1", "\n", "lc2", "=", "self", ".", "LINK_COM_POS_2", "\n", "I1", "=", "self", ".", "LINK_MOI", "\n", "I2", "=", "self", ".", "LINK_MOI", "\n", "g", "=", "9.8", "\n", "a", "=", "s_augmented", "[", "-", "1", "]", "\n", "s", "=", "s_augmented", "[", ":", "-", "1", "]", "\n", "theta1", "=", "s", "[", "0", "]", "\n", "theta2", "=", "s", "[", "1", "]", "\n", "dtheta1", "=", "s", "[", "2", "]", "\n", "dtheta2", "=", "s", "[", "3", "]", "\n", "d1", "=", "m1", "*", "lc1", "**", "2", "+", "m2", "*", "(", "l1", "**", "2", "+", "lc2", "**", "2", "+", "2", "*", "l1", "*", "lc2", "*", "np", ".", "cos", "(", "theta2", ")", ")", "+", "I1", "+", "I2", "\n", "d2", "=", "m2", "*", "(", "lc2", "**", "2", "+", "l1", "*", "lc2", "*", "np", ".", "cos", "(", "theta2", ")", ")", "+", "I2", "\n", "phi2", "=", "m2", "*", "lc2", "*", "g", "*", "np", ".", "cos", "(", "theta1", "+", "theta2", "-", "np", ".", "pi", "/", "2.", ")", "\n", "phi1", "=", "-", "m2", "*", "l1", "*", "lc2", "*", "dtheta2", "**", "2", "*", "np", ".", "sin", "(", "theta2", ")", "-", "2", "*", "m2", "*", "l1", "*", "lc2", "*", "dtheta2", "*", "dtheta1", "*", "np", ".", "sin", "(", "theta2", ")", "+", "(", "m1", "*", "lc1", "+", "m2", "*", "l1", ")", "*", "g", "*", "np", ".", "cos", "(", "theta1", "-", "np", ".", "pi", "/", "2", ")", "+", "phi2", "\n", "if", "self", ".", "book_or_nips", "==", "\"nips\"", ":", "\n", "# the following line is consistent with the description in the", "\n", "# paper", "\n", "            ", "ddtheta2", "=", "(", "a", "+", "d2", "/", "d1", "*", "phi1", "-", "phi2", ")", "/", "(", "m2", "*", "lc2", "**", "2", "+", "I2", "-", "d2", "**", "2", "/", "d1", ")", "\n", "", "else", ":", "\n", "# the following line is consistent with the java implementation and the", "\n", "# book", "\n", "            ", "ddtheta2", "=", "(", "a", "+", "d2", "/", "d1", "*", "phi1", "-", "m2", "*", "l1", "*", "lc2", "*", "dtheta1", "**", "2", "*", "np", ".", "sin", "(", "theta2", ")", "-", "phi2", ")", "/", "(", "m2", "*", "lc2", "**", "2", "+", "I2", "-", "d2", "**", "2", "/", "d1", ")", "\n", "", "ddtheta1", "=", "-", "(", "d2", "*", "ddtheta2", "+", "phi1", ")", "/", "d1", "\n", "return", "(", "dtheta1", ",", "dtheta2", ",", "ddtheta1", ",", "ddtheta2", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv.render": [[175, 207], ["acrobot.AcrobotEnv.viewer.draw_line", "zip", "acrobot.AcrobotEnv.viewer.render", "rendering.Viewer", "acrobot.AcrobotEnv.viewer.set_bounds", "numpy.array", "rendering.Transform", "acrobot.AcrobotEnv.viewer.draw_polygon", "acrobot.AcrobotEnv.add_attr", "acrobot.AcrobotEnv.set_color", "acrobot.AcrobotEnv.viewer.draw_circle", "acrobot.AcrobotEnv.set_color", "acrobot.AcrobotEnv.add_attr", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_line", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.set_bounds", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_polygon", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.draw_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "\n", "s", "=", "self", ".", "state", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "500", ",", "500", ")", "\n", "self", ".", "viewer", ".", "set_bounds", "(", "-", "2.2", ",", "2.2", ",", "-", "2.2", ",", "2.2", ")", "\n", "\n", "", "if", "s", "is", "None", ":", "return", "None", "\n", "\n", "p1", "=", "[", "-", "self", ".", "LINK_LENGTH_1", "*", "\n", "np", ".", "cos", "(", "s", "[", "0", "]", ")", ",", "self", ".", "LINK_LENGTH_1", "*", "np", ".", "sin", "(", "s", "[", "0", "]", ")", "]", "\n", "\n", "p2", "=", "[", "p1", "[", "0", "]", "-", "self", ".", "LINK_LENGTH_2", "*", "np", ".", "cos", "(", "s", "[", "0", "]", "+", "s", "[", "1", "]", ")", ",", "\n", "p1", "[", "1", "]", "+", "self", ".", "LINK_LENGTH_2", "*", "np", ".", "sin", "(", "s", "[", "0", "]", "+", "s", "[", "1", "]", ")", "]", "\n", "\n", "xys", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "p1", ",", "p2", "]", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "thetas", "=", "[", "s", "[", "0", "]", "-", "np", ".", "pi", "/", "2", ",", "s", "[", "0", "]", "+", "s", "[", "1", "]", "-", "np", ".", "pi", "/", "2", "]", "\n", "\n", "self", ".", "viewer", ".", "draw_line", "(", "(", "-", "2.2", ",", "1", ")", ",", "(", "2.2", ",", "1", ")", ")", "\n", "for", "(", "(", "x", ",", "y", ")", ",", "th", ")", "in", "zip", "(", "xys", ",", "thetas", ")", ":", "\n", "            ", "l", ",", "r", ",", "t", ",", "b", "=", "0", ",", "1", ",", ".1", ",", "-", ".1", "\n", "jtransform", "=", "rendering", ".", "Transform", "(", "rotation", "=", "th", ",", "translation", "=", "(", "x", ",", "y", ")", ")", "\n", "link", "=", "self", ".", "viewer", ".", "draw_polygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "link", ".", "add_attr", "(", "jtransform", ")", "\n", "link", ".", "set_color", "(", "0", ",", ".8", ",", ".8", ")", "\n", "circ", "=", "self", ".", "viewer", ".", "draw_circle", "(", ".1", ")", "\n", "circ", ".", "set_color", "(", ".8", ",", ".8", ",", "0", ")", "\n", "circ", ".", "add_attr", "(", "jtransform", ")", "\n", "\n", "", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.AcrobotEnv.close": [[208, 210], ["acrobot.AcrobotEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", ":", "self", ".", "viewer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.wrap": [[211, 226], ["numpy.pi", "numpy.pi"], "function", ["None"], ["", "", "def", "wrap", "(", "x", ",", "m", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    :param x: a scalar\n    :param m: minimum possible value in range\n    :param M: maximum possible value in range\n    Wraps ``x`` so m <= x <= M; but unlike ``bound()`` which\n    truncates, ``wrap()`` wraps x around the coordinate system defined by m,M.\\n\n    For example, m = -180, M = 180 (degrees), x = 360 --> returns 0.\n    \"\"\"", "\n", "diff", "=", "M", "-", "m", "\n", "while", "x", ">", "M", ":", "\n", "        ", "x", "=", "x", "-", "diff", "\n", "", "while", "x", "<", "m", ":", "\n", "        ", "x", "=", "x", "+", "diff", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.bound": [[227, 238], ["min", "max"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "bound", "(", "x", ",", "m", ",", "M", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param x: scalar\n    Either have m as scalar, so bound(x,m,M) which returns m <= x <= M *OR*\n    have m as length 2 vector, bound(x,m, <IGNORED>) returns m[0] <= x <= m[1].\n    \"\"\"", "\n", "if", "M", "is", "None", ":", "\n", "        ", "M", "=", "m", "[", "1", "]", "\n", "m", "=", "m", "[", "0", "]", "\n", "# bound x between min (m) and Max (M)", "\n", "", "return", "min", "(", "max", "(", "x", ",", "m", ")", ",", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.acrobot.rk4": [[240, 301], ["numpy.arange", "len", "numpy.zeros", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "len", "derivs", "derivs", "derivs", "derivs", "len", "len"], "function", ["None"], ["", "def", "rk4", "(", "derivs", ",", "y0", ",", "t", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.\n    This is a toy implementation which may be useful if you find\n    yourself stranded on a system w/o scipy.  Otherwise use\n    :func:`scipy.integrate`.\n    *y0*\n        initial state vector\n    *t*\n        sample times\n    *derivs*\n        returns the derivative of the system and has the\n        signature ``dy = derivs(yi, ti)``\n    *args*\n        additional arguments passed to the derivative function\n    *kwargs*\n        additional keyword arguments passed to the derivative function\n    Example 1 ::\n        ## 2D system\n        def derivs6(x,t):\n            d1 =  x[0] + 2*x[1]\n            d2 =  -3*x[0] + 4*x[1]\n            return (d1, d2)\n        dt = 0.0005\n        t = arange(0.0, 2.0, dt)\n        y0 = (1,2)\n        yout = rk4(derivs6, y0, t)\n    Example 2::\n        ## 1D system\n        alpha = 2\n        def derivs(x,t):\n            return -alpha*x + exp(-t)\n        y0 = 1\n        yout = rk4(derivs, y0, t)\n    If you have access to scipy, you should probably be using the\n    scipy.integrate tools rather than this function.\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "Ny", "=", "len", "(", "y0", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "yout", "=", "np", ".", "zeros", "(", "(", "len", "(", "t", ")", ",", ")", ",", "np", ".", "float_", ")", "\n", "", "else", ":", "\n", "        ", "yout", "=", "np", ".", "zeros", "(", "(", "len", "(", "t", ")", ",", "Ny", ")", ",", "np", ".", "float_", ")", "\n", "\n", "", "yout", "[", "0", "]", "=", "y0", "\n", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "t", ")", "-", "1", ")", ":", "\n", "\n", "        ", "thist", "=", "t", "[", "i", "]", "\n", "dt", "=", "t", "[", "i", "+", "1", "]", "-", "thist", "\n", "dt2", "=", "dt", "/", "2.0", "\n", "y0", "=", "yout", "[", "i", "]", "\n", "\n", "k1", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", ",", "thist", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k2", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt2", "*", "k1", ",", "thist", "+", "dt2", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k3", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt2", "*", "k2", ",", "thist", "+", "dt2", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k4", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt", "*", "k3", ",", "thist", "+", "dt", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "yout", "[", "i", "+", "1", "]", "=", "y0", "+", "dt", "/", "6.0", "*", "(", "k1", "+", "2", "*", "k2", "+", "2", "*", "k3", "+", "k4", ")", "\n", "", "return", "yout", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv.__init__": [[18, 34], ["numpy.array", "numpy.array", "gym.spaces.Discrete", "gym.spaces.Box", "mountain_car.MountainCarEnv.seed", "mountain_car.MountainCarEnv.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "min_position", "=", "-", "1.2", "\n", "self", ".", "max_position", "=", "0.6", "\n", "self", ".", "max_speed", "=", "0.07", "\n", "self", ".", "goal_position", "=", "0.5", "\n", "\n", "self", ".", "low", "=", "np", ".", "array", "(", "[", "self", ".", "min_position", ",", "-", "self", ".", "max_speed", "]", ")", "\n", "self", ".", "high", "=", "np", ".", "array", "(", "[", "self", ".", "max_position", ",", "self", ".", "max_speed", "]", ")", "\n", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "self", ".", "low", ",", "self", ".", "high", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv.seed": [[35, 38], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv.step": [[39, 54], ["mountain_car.MountainCarEnv.action_space.contains", "numpy.clip", "numpy.clip", "bool", "numpy.array", "type", "math.cos"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalid\"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "\n", "position", ",", "velocity", "=", "self", ".", "state", "\n", "velocity", "+=", "(", "action", "-", "1", ")", "*", "0.001", "+", "math", ".", "cos", "(", "3", "*", "position", ")", "*", "(", "-", "0.0025", ")", "\n", "velocity", "=", "np", ".", "clip", "(", "velocity", ",", "-", "self", ".", "max_speed", ",", "self", ".", "max_speed", ")", "\n", "position", "+=", "velocity", "\n", "position", "=", "np", ".", "clip", "(", "position", ",", "self", ".", "min_position", ",", "self", ".", "max_position", ")", "\n", "if", "(", "position", "==", "self", ".", "min_position", "and", "velocity", "<", "0", ")", ":", "velocity", "=", "0", "\n", "\n", "done", "=", "bool", "(", "position", ">=", "self", ".", "goal_position", ")", "\n", "reward", "=", "-", "1.0", "\n", "\n", "self", ".", "state", "=", "(", "position", ",", "velocity", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv.reset": [[55, 58], ["numpy.array", "numpy.array", "mountain_car.MountainCarEnv.np_random.uniform"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "array", "(", "[", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.6", ",", "high", "=", "-", "0.4", ")", ",", "0", "]", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height": [[59, 61], ["numpy.sin"], "methods", ["None"], ["", "def", "_height", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "np", ".", "sin", "(", "3", "*", "xs", ")", "*", ".45", "+", ".55", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv.render": [[62, 115], ["mountain_car.MountainCarEnv.cartrans.set_translation", "mountain_car.MountainCarEnv.cartrans.set_rotation", "mountain_car.MountainCarEnv.viewer.render", "rendering.Viewer", "numpy.linspace", "mountain_car.MountainCarEnv._height", "list", "rendering.make_polyline", "mountain_car.MountainCarEnv.track.set_linewidth", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.add_attr", "rendering.Transform", "rendering.FilledPolygon.add_attr", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.set_color", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.make_circle", "rendering.make_circle.add_attr", "rendering.make_circle.add_attr", "rendering.make_circle.set_color", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.Line", "mountain_car.MountainCarEnv.viewer.add_geom", "rendering.FilledPolygon", "rendering.FilledPolygon.set_color", "mountain_car.MountainCarEnv.viewer.add_geom", "math.cos", "zip", "rendering.Transform", "rendering.Transform", "rendering.Transform", "mountain_car.MountainCarEnv._height", "mountain_car.MountainCarEnv._height"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_translation", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Transform.set_rotation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_polyline", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.PolyLine.set_linewidth", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.make_circle", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.add_attr", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Geom.set_color", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.rendering.Viewer.add_geom", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height", "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv._height"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "screen_width", "=", "600", "\n", "screen_height", "=", "400", "\n", "\n", "world_width", "=", "self", ".", "max_position", "-", "self", ".", "min_position", "\n", "scale", "=", "screen_width", "/", "world_width", "\n", "carwidth", "=", "40", "\n", "carheight", "=", "20", "\n", "\n", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "Viewer", "(", "screen_width", ",", "screen_height", ")", "\n", "xs", "=", "np", ".", "linspace", "(", "self", ".", "min_position", ",", "self", ".", "max_position", ",", "100", ")", "\n", "ys", "=", "self", ".", "_height", "(", "xs", ")", "\n", "xys", "=", "list", "(", "zip", "(", "(", "xs", "-", "self", ".", "min_position", ")", "*", "scale", ",", "ys", "*", "scale", ")", ")", "\n", "\n", "self", ".", "track", "=", "rendering", ".", "make_polyline", "(", "xys", ")", "\n", "self", ".", "track", ".", "set_linewidth", "(", "4", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "self", ".", "track", ")", "\n", "\n", "clearance", "=", "10", "\n", "\n", "l", ",", "r", ",", "t", ",", "b", "=", "-", "carwidth", "/", "2", ",", "carwidth", "/", "2", ",", "carheight", ",", "0", "\n", "car", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "l", ",", "b", ")", ",", "(", "l", ",", "t", ")", ",", "(", "r", ",", "t", ")", ",", "(", "r", ",", "b", ")", "]", ")", "\n", "car", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "0", ",", "clearance", ")", ")", ")", "\n", "self", ".", "cartrans", "=", "rendering", ".", "Transform", "(", ")", "\n", "car", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "car", ")", "\n", "frontwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "frontwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "frontwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "frontwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "frontwheel", ")", "\n", "backwheel", "=", "rendering", ".", "make_circle", "(", "carheight", "/", "2.5", ")", "\n", "backwheel", ".", "add_attr", "(", "rendering", ".", "Transform", "(", "translation", "=", "(", "-", "carwidth", "/", "4", ",", "clearance", ")", ")", ")", "\n", "backwheel", ".", "add_attr", "(", "self", ".", "cartrans", ")", "\n", "backwheel", ".", "set_color", "(", ".5", ",", ".5", ",", ".5", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "backwheel", ")", "\n", "flagx", "=", "(", "self", ".", "goal_position", "-", "self", ".", "min_position", ")", "*", "scale", "\n", "flagy1", "=", "self", ".", "_height", "(", "self", ".", "goal_position", ")", "*", "scale", "\n", "flagy2", "=", "flagy1", "+", "50", "\n", "flagpole", "=", "rendering", ".", "Line", "(", "(", "flagx", ",", "flagy1", ")", ",", "(", "flagx", ",", "flagy2", ")", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flagpole", ")", "\n", "flag", "=", "rendering", ".", "FilledPolygon", "(", "[", "(", "flagx", ",", "flagy2", ")", ",", "(", "flagx", ",", "flagy2", "-", "10", ")", ",", "(", "flagx", "+", "25", ",", "flagy2", "-", "5", ")", "]", ")", "\n", "flag", ".", "set_color", "(", ".8", ",", ".8", ",", "0", ")", "\n", "self", ".", "viewer", ".", "add_geom", "(", "flag", ")", "\n", "\n", "", "pos", "=", "self", ".", "state", "[", "0", "]", "\n", "self", ".", "cartrans", ".", "set_translation", "(", "(", "pos", "-", "self", ".", "min_position", ")", "*", "scale", ",", "self", ".", "_height", "(", "pos", ")", "*", "scale", ")", "\n", "self", ".", "cartrans", ".", "set_rotation", "(", "math", ".", "cos", "(", "3", "*", "pos", ")", ")", "\n", "\n", "return", "self", ".", "viewer", ".", "render", "(", "return_rgb_array", "=", "mode", "==", "'rgb_array'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.classic_control.mountain_car.MountainCarEnv.close": [[116, 118], ["mountain_car.MountainCarEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", ":", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.reverse.ReverseEnv.__init__": [[10, 13], ["gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "base", "=", "2", ")", ":", "\n", "        ", "super", "(", "ReverseEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "True", ",", "starting_min_length", "=", "1", ")", "\n", "self", ".", "last", "=", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.reverse.ReverseEnv.target_from_input_data": [[14, 16], ["list", "reversed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["", "def", "target_from_input_data", "(", "self", ",", "input_str", ")", ":", "\n", "        ", "return", "list", "(", "reversed", "(", "input_str", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.reversed_addition.ReversedAdditionEnv.__init__": [[6, 8], ["gym.envs.algorithmic.algorithmic_env.GridAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rows", "=", "2", ",", "base", "=", "3", ")", ":", "\n", "        ", "super", "(", "ReversedAdditionEnv", ",", "self", ")", ".", "__init__", "(", "rows", "=", "rows", ",", "base", "=", "base", ",", "chars", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.reversed_addition.ReversedAdditionEnv.target_from_input_data": [[9, 20], ["target.append", "target.append", "sum"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "target_from_input_data", "(", "self", ",", "input_strings", ")", ":", "\n", "        ", "curry", "=", "0", "\n", "target", "=", "[", "]", "\n", "for", "digits", "in", "input_strings", ":", "\n", "            ", "total", "=", "sum", "(", "digits", ")", "+", "curry", "\n", "target", ".", "append", "(", "total", "%", "self", ".", "base", ")", "\n", "curry", "=", "total", "//", "self", ".", "base", "\n", "\n", "", "if", "curry", ">", "0", ":", "\n", "            ", "target", ".", "append", "(", "curry", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.reversed_addition.ReversedAdditionEnv.time_limit": [[21, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "time_limit", "(", "self", ")", ":", "\n", "# Quirk preserved for the sake of consistency: add the length of the input", "\n", "# rather than the length of the desired output (which may differ if there's", "\n", "# an extra carried digit).", "\n", "# TODO: It seems like this time limit is so strict as to make Addition3-v0", "\n", "# unsolvable, since agents aren't even given enough time steps to look at", "\n", "# all the digits. (The solutions on the scoreboard seem to only work by", "\n", "# save-scumming.)", "\n", "        ", "return", "self", ".", "input_width", "*", "2", "+", "4", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.copy_.CopyEnv.__init__": [[8, 10], ["gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base", "=", "5", ",", "chars", "=", "True", ")", ":", "\n", "        ", "super", "(", "CopyEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "chars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.copy_.CopyEnv.target_from_input_data": [[11, 13], ["None"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.duplicated_input.DuplicatedInputEnv.__init__": [[9, 12], ["gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "duplication", "=", "2", ",", "base", "=", "5", ")", ":", "\n", "        ", "self", ".", "duplication", "=", "duplication", "\n", "super", "(", "DuplicatedInputEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.duplicated_input.DuplicatedInputEnv.generate_input_data": [[13, 22], ["range", "duplicated_input.DuplicatedInputEnv.np_random.randint", "range", "res.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "if", "size", "<", "self", ".", "duplication", ":", "\n", "            ", "size", "=", "self", ".", "duplication", "\n", "", "for", "i", "in", "range", "(", "size", "//", "self", ".", "duplication", ")", ":", "\n", "            ", "char", "=", "self", ".", "np_random", ".", "randint", "(", "self", ".", "base", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "duplication", ")", ":", "\n", "                ", "res", ".", "append", "(", "char", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.duplicated_input.DuplicatedInputEnv.target_from_input_data": [[23, 25], ["range", "len"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "return", "[", "input_data", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "input_data", ")", ",", "self", ".", "duplication", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.__init__": [[48, 84], ["algorithmic_env.AlgorithmicEnv.charmap.append", "gym.spaces.Tuple", "gym.spaces.Discrete", "algorithmic_env.AlgorithmicEnv.seed", "algorithmic_env.AlgorithmicEnv.reset", "chr", "str", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "range", "range", "len", "ord"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["def", "__init__", "(", "self", ",", "base", "=", "10", ",", "chars", "=", "False", ",", "starting_min_length", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        base: Number of distinct characters. \n        chars: If True, use uppercase alphabet. Otherwise, digits. Only affects\n               rendering.\n        starting_min_length: Minimum input string length. Ramps up as episodes \n                             are consistently solved.\n        \"\"\"", "\n", "self", ".", "base", "=", "base", "\n", "# Keep track of this many past episodes", "\n", "self", ".", "last", "=", "10", "\n", "# Cumulative reward earned this episode", "\n", "self", ".", "episode_total_reward", "=", "None", "\n", "# Running tally of reward shortfalls. e.g. if there were 10 points to earn and", "\n", "# we got 8, we'd append -2", "\n", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "[", "]", "\n", "if", "chars", ":", "\n", "            ", "self", ".", "charmap", "=", "[", "chr", "(", "ord", "(", "'A'", ")", "+", "i", ")", "for", "i", "in", "range", "(", "base", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "charmap", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "base", ")", "]", "\n", "", "self", ".", "charmap", ".", "append", "(", "' '", ")", "\n", "# TODO: Not clear why this is a class variable rather than instance. ", "\n", "# Could lead to some spooky action at a distance if someone is working", "\n", "# with multiple algorithmic envs at once. Also makes testing tricky.", "\n", "AlgorithmicEnv", ".", "min_length", "=", "starting_min_length", "\n", "# Three sub-actions:", "\n", "#       1. Move read head left or write (or up/down)", "\n", "#       2. Write or not", "\n", "#       3. Which character to write. (Ignored if should_write=0)", "\n", "self", ".", "action_space", "=", "Tuple", "(", "\n", "[", "Discrete", "(", "len", "(", "self", ".", "MOVEMENTS", ")", ")", ",", "Discrete", "(", "2", ")", ",", "Discrete", "(", "self", ".", "base", ")", "]", "\n", ")", "\n", "# Can see just what is on the input tape (one of n characters, or nothing)", "\n", "self", ".", "observation_space", "=", "Discrete", "(", "self", ".", "base", "+", "1", ")", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._movement_idx": [[85, 88], ["kls.MOVEMENTS.index"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_movement_idx", "(", "kls", ",", "movement_name", ")", ":", "\n", "        ", "return", "kls", ".", "MOVEMENTS", ".", "index", "(", "movement_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.seed": [[89, 92], ["gym.utils.seeding.np_random"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.seeding.np_random"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_obs": [[93, 97], ["None"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return an observation corresponding to the given read head position\n        (or the current read head position, if none is given).\"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs": [[98, 101], ["algorithmic_env.AlgorithmicEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "def", "_get_str_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "ret", "=", "self", ".", "_get_obs", "(", "pos", ")", "\n", "return", "self", ".", "charmap", "[", "ret", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target": [[102, 109], ["len"], "methods", ["None"], ["", "def", "_get_str_target", "(", "self", ",", "pos", ")", ":", "\n", "        ", "\"\"\"Return the ith character of the target string (or \" \" if index\n        out of bounds).\"\"\"", "\n", "if", "pos", "<", "0", "or", "len", "(", "self", ".", "target", ")", "<=", "pos", ":", "\n", "            ", "return", "\" \"", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "charmap", "[", "self", ".", "target", "[", "pos", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render_observation": [[110, 113], ["None"], "methods", ["None"], ["", "", "def", "render_observation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a string representation of the input tape/grid.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render": [[114, 153], ["outfile.write", "outfile.write", "algorithmic_env.AlgorithmicEnv.render_observation", "range", "outfile.write", "outfile.write", "outfile.write", "six.StringIO", "algorithmic_env.AlgorithmicEnv._get_str_target", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "len", "algorithmic_env.AlgorithmicEnv._get_str_target", "len", "gym.utils.colorize", "algorithmic_env.AlgorithmicEnv._get_str_target"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.render_observation", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_target"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "\n", "        ", "outfile", "=", "StringIO", "(", ")", "if", "mode", "==", "'ansi'", "else", "sys", ".", "stdout", "\n", "inp", "=", "\"Total length of input instance: %d, step: %d\\n\"", "%", "(", "self", ".", "input_width", ",", "self", ".", "time", ")", "\n", "outfile", ".", "write", "(", "inp", ")", "\n", "x", ",", "y", ",", "action", "=", "self", ".", "read_head_position", ",", "self", ".", "write_head_position", ",", "self", ".", "last_action", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "inp_act", ",", "out_act", ",", "pred", "=", "action", "\n", "", "outfile", ".", "write", "(", "\"=\"", "*", "(", "len", "(", "inp", ")", "-", "1", ")", "+", "\"\\n\"", ")", "\n", "y_str", "=", "\"Output Tape         : \"", "\n", "target_str", "=", "\"Targets             : \"", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "pred_str", "=", "self", ".", "charmap", "[", "pred", "]", "\n", "", "x_str", "=", "self", ".", "render_observation", "(", ")", "\n", "for", "i", "in", "range", "(", "-", "2", ",", "len", "(", "self", ".", "target", ")", "+", "2", ")", ":", "\n", "            ", "target_str", "+=", "self", ".", "_get_str_target", "(", "i", ")", "\n", "if", "i", "<", "y", "-", "1", ":", "\n", "                ", "y_str", "+=", "self", ".", "_get_str_target", "(", "i", ")", "\n", "", "elif", "i", "==", "(", "y", "-", "1", ")", ":", "\n", "                ", "if", "action", "is", "not", "None", "and", "out_act", "==", "1", ":", "\n", "                    ", "color", "=", "'green'", "if", "pred", "==", "self", ".", "target", "[", "i", "]", "else", "'red'", "\n", "y_str", "+=", "colorize", "(", "pred_str", ",", "color", ",", "highlight", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "y_str", "+=", "self", ".", "_get_str_target", "(", "i", ")", "\n", "", "", "", "outfile", ".", "write", "(", "x_str", ")", "\n", "outfile", ".", "write", "(", "y_str", "+", "\"\\n\"", ")", "\n", "outfile", ".", "write", "(", "target_str", "+", "\"\\n\\n\"", ")", "\n", "\n", "if", "action", "is", "not", "None", ":", "\n", "            ", "outfile", ".", "write", "(", "\"Current reward      :   %.3f\\n\"", "%", "self", ".", "last_reward", ")", "\n", "outfile", ".", "write", "(", "\"Cumulative reward   :   %.3f\\n\"", "%", "self", ".", "episode_total_reward", ")", "\n", "move", "=", "self", ".", "MOVEMENTS", "[", "inp_act", "]", "\n", "outfile", ".", "write", "(", "\"Action              :   Tuple(move over input: %s,\\n\"", "%", "move", ")", "\n", "out_act", "=", "out_act", "==", "1", "\n", "outfile", ".", "write", "(", "\"                              write to the output tape: %s,\\n\"", "%", "out_act", ")", "\n", "outfile", ".", "write", "(", "\"                              prediction: %s)\\n\"", "%", "pred_str", ")", "\n", "", "else", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", "*", "5", ")", "\n", "", "return", "outfile", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.input_width": [[154, 157], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_width", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.step": [[158, 192], ["algorithmic_env.AlgorithmicEnv.action_space.contains", "algorithmic_env.AlgorithmicEnv._move", "algorithmic_env.AlgorithmicEnv._get_obs", "len", "gym.logger.warn"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._move", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "self", ".", "last_action", "=", "action", "\n", "inp_act", ",", "out_act", ",", "pred", "=", "action", "\n", "done", "=", "False", "\n", "reward", "=", "0.0", "\n", "self", ".", "time", "+=", "1", "\n", "assert", "0", "<=", "self", ".", "write_head_position", "\n", "if", "out_act", "==", "1", ":", "\n", "            ", "try", ":", "\n", "                ", "correct", "=", "pred", "==", "self", ".", "target", "[", "self", ".", "write_head_position", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "logger", ".", "warn", "(", "\"It looks like you're calling step() even though this \"", "+", "\n", "\"environment has already returned done=True. You should always call \"", "+", "\n", "\"reset() once you receive done=True. Any further steps are undefined \"", "+", "\n", "\"behaviour.\"", ")", "\n", "correct", "=", "False", "\n", "", "if", "correct", ":", "\n", "                ", "reward", "=", "1.0", "\n", "", "else", ":", "\n", "# Bail as soon as a wrong character is written to the tape", "\n", "                ", "reward", "=", "-", "0.5", "\n", "done", "=", "True", "\n", "", "self", ".", "write_head_position", "+=", "1", "\n", "if", "self", ".", "write_head_position", ">=", "len", "(", "self", ".", "target", ")", ":", "\n", "                ", "done", "=", "True", "\n", "", "", "self", ".", "_move", "(", "inp_act", ")", "\n", "if", "self", ".", "time", ">", "self", ".", "time_limit", ":", "\n", "            ", "reward", "=", "-", "1.0", "\n", "done", "=", "True", "\n", "", "obs", "=", "self", ".", "_get_obs", "(", ")", "\n", "self", ".", "last_reward", "=", "reward", "\n", "self", ".", "episode_total_reward", "+=", "reward", "\n", "return", "(", "obs", ",", "reward", ",", "done", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.time_limit": [[193, 199], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "time_limit", "(", "self", ")", ":", "\n", "        ", "\"\"\"If an agent takes more than this many timesteps, end the episode\n        immediately and return a negative reward.\"\"\"", "\n", "# (Seemingly arbitrary)", "\n", "return", "self", ".", "input_width", "+", "len", "(", "self", ".", "target", ")", "+", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._check_levelup": [[200, 213], ["AlgorithmicEnv.reward_shortfalls.append", "len", "len", "min"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "_check_levelup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Called between episodes. Update our running record of episode rewards \n        and, if appropriate, 'level up' minimum input length.\"\"\"", "\n", "if", "self", ".", "episode_total_reward", "is", "None", ":", "\n", "# This is before the first episode/call to reset(). Nothing to do", "\n", "            ", "return", "\n", "", "AlgorithmicEnv", ".", "reward_shortfalls", ".", "append", "(", "self", ".", "episode_total_reward", "-", "len", "(", "self", ".", "target", ")", ")", "\n", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "AlgorithmicEnv", ".", "reward_shortfalls", "[", "-", "self", ".", "last", ":", "]", "\n", "if", "len", "(", "AlgorithmicEnv", ".", "reward_shortfalls", ")", "==", "self", ".", "last", "and", "min", "(", "AlgorithmicEnv", ".", "reward_shortfalls", ")", ">=", "self", ".", "MIN_REWARD_SHORTFALL_FOR_PROMOTION", "and", "AlgorithmicEnv", ".", "min_length", "<", "30", ":", "\n", "            ", "AlgorithmicEnv", ".", "min_length", "+=", "1", "\n", "AlgorithmicEnv", ".", "reward_shortfalls", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.reset": [[215, 227], ["algorithmic_env.AlgorithmicEnv._check_levelup", "algorithmic_env.AlgorithmicEnv.generate_input_data", "algorithmic_env.AlgorithmicEnv.target_from_input_data", "algorithmic_env.AlgorithmicEnv._get_obs", "algorithmic_env.AlgorithmicEnv.np_random.randint"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._check_levelup", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_check_levelup", "(", ")", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "last_reward", "=", "0", "\n", "self", ".", "read_head_position", "=", "self", ".", "READ_HEAD_START", "\n", "self", ".", "write_head_position", "=", "0", "\n", "self", ".", "episode_total_reward", "=", "0.0", "\n", "self", ".", "time", "=", "0", "\n", "length", "=", "self", ".", "np_random", ".", "randint", "(", "3", ")", "+", "AlgorithmicEnv", ".", "min_length", "\n", "self", ".", "input_data", "=", "self", ".", "generate_input_data", "(", "length", ")", "\n", "self", ".", "target", "=", "self", ".", "target_from_input_data", "(", "self", ".", "input_data", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.generate_input_data": [[228, 230], ["None"], "methods", ["None"], ["", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.target_from_input_data": [[231, 233], ["NotImplemented"], "methods", ["None"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"Subclasses must implement\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._move": [[234, 236], ["None"], "methods", ["None"], ["", "def", "_move", "(", "self", ",", "movement", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.TapeAlgorithmicEnv._move": [[242, 245], ["None"], "methods", ["None"], ["def", "_move", "(", "self", ",", "movement", ")", ":", "\n", "        ", "named", "=", "self", ".", "MOVEMENTS", "[", "movement", "]", "\n", "self", ".", "read_head_position", "+=", "1", "if", "named", "==", "'right'", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.TapeAlgorithmicEnv._get_obs": [[246, 257], ["isinstance", "pos.item.item.item"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "if", "pos", "is", "None", ":", "\n", "            ", "pos", "=", "self", ".", "read_head_position", "\n", "", "if", "pos", "<", "0", ":", "\n", "            ", "return", "self", ".", "base", "\n", "", "if", "isinstance", "(", "pos", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "pos", "=", "pos", ".", "item", "(", ")", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "input_data", "[", "pos", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "self", ".", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.TapeAlgorithmicEnv.generate_input_data": [[258, 260], ["algorithmic_env.TapeAlgorithmicEnv.np_random.randint", "range"], "methods", ["None"], ["", "", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "[", "self", ".", "np_random", ".", "randint", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.TapeAlgorithmicEnv.render_observation": [[261, 271], ["range", "gym.utils.colorize", "algorithmic_env.TapeAlgorithmicEnv._get_str_obs", "algorithmic_env.TapeAlgorithmicEnv._get_str_obs", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs"], ["", "def", "render_observation", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "read_head_position", "\n", "x_str", "=", "\"Observation Tape    : \"", "\n", "for", "i", "in", "range", "(", "-", "2", ",", "self", ".", "input_width", "+", "2", ")", ":", "\n", "            ", "if", "i", "==", "x", ":", "\n", "                ", "x_str", "+=", "colorize", "(", "self", ".", "_get_str_obs", "(", "np", ".", "array", "(", "[", "i", "]", ")", ")", ",", "'green'", ",", "highlight", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "x_str", "+=", "self", ".", "_get_str_obs", "(", "np", ".", "array", "(", "[", "i", "]", ")", ")", "\n", "", "", "x_str", "+=", "\"\\n\"", "\n", "return", "x_str", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.__init__": [[276, 279], ["algorithmic_env.AlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "rows", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "rows", "=", "rows", "\n", "AlgorithmicEnv", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._move": [[280, 294], ["ValueError"], "methods", ["None"], ["", "def", "_move", "(", "self", ",", "movement", ")", ":", "\n", "        ", "named", "=", "self", ".", "MOVEMENTS", "[", "movement", "]", "\n", "x", ",", "y", "=", "self", ".", "read_head_position", "\n", "if", "named", "==", "'left'", ":", "\n", "            ", "x", "-=", "1", "\n", "", "elif", "named", "==", "'right'", ":", "\n", "            ", "x", "+=", "1", "\n", "", "elif", "named", "==", "'up'", ":", "\n", "            ", "y", "-=", "1", "\n", "", "elif", "named", "==", "'down'", ":", "\n", "            ", "y", "+=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized direction: {}\"", ".", "format", "(", "named", ")", ")", "\n", "", "self", ".", "read_head_position", "=", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.generate_input_data": [[295, 299], ["algorithmic_env.GridAlgorithmicEnv.np_random.randint", "range", "range"], "methods", ["None"], ["", "def", "generate_input_data", "(", "self", ",", "size", ")", ":", "\n", "        ", "return", "[", "\n", "[", "self", ".", "np_random", ".", "randint", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "self", ".", "rows", ")", "]", "\n", "for", "__", "in", "range", "(", "size", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv._get_obs": [[301, 311], ["any"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ",", "pos", "=", "None", ")", ":", "\n", "        ", "if", "pos", "is", "None", ":", "\n", "            ", "pos", "=", "self", ".", "read_head_position", "\n", "", "x", ",", "y", "=", "pos", "\n", "if", "any", "(", "idx", "<", "0", "for", "idx", "in", "pos", ")", ":", "\n", "            ", "return", "self", ".", "base", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "input_data", "[", "x", "]", "[", "y", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "self", ".", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.GridAlgorithmicEnv.render_observation": [[312, 327], ["range", "range", "len", "gym.utils.colorize", "algorithmic_env.GridAlgorithmicEnv._get_str_obs", "algorithmic_env.GridAlgorithmicEnv._get_str_obs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv._get_str_obs"], ["", "", "def", "render_observation", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "read_head_position", "\n", "label", "=", "\"Observation Grid    : \"", "\n", "x_str", "=", "\"\"", "\n", "for", "j", "in", "range", "(", "-", "1", ",", "self", ".", "rows", "+", "1", ")", ":", "\n", "            ", "if", "j", "!=", "-", "1", ":", "\n", "                ", "x_str", "+=", "\" \"", "*", "len", "(", "label", ")", "\n", "", "for", "i", "in", "range", "(", "-", "2", ",", "self", ".", "input_width", "+", "2", ")", ":", "\n", "                ", "if", "i", "==", "x", "[", "0", "]", "and", "j", "==", "x", "[", "1", "]", ":", "\n", "                    ", "x_str", "+=", "colorize", "(", "self", ".", "_get_str_obs", "(", "(", "i", ",", "j", ")", ")", ",", "'green'", ",", "highlight", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "x_str", "+=", "self", ".", "_get_str_obs", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "x_str", "+=", "\"\\n\"", "\n", "", "x_str", "=", "label", "+", "x_str", "\n", "return", "x_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.__init__": [[9, 12], ["gym.envs.algorithmic.algorithmic_env.TapeAlgorithmicEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "base", "=", "5", ")", ":", "\n", "        ", "super", "(", "RepeatCopyEnv", ",", "self", ")", ".", "__init__", "(", "base", "=", "base", ",", "chars", "=", "True", ")", "\n", "self", ".", "last", "=", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.repeat_copy.RepeatCopyEnv.target_from_input_data": [[13, 15], ["list", "reversed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["", "def", "target_from_input_data", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "return", "input_data", "+", "list", "(", "reversed", "(", "input_data", ")", ")", "+", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.dict.FlattenDictWrapper.__init__": [[12, 22], ["gym.ObservationWrapper.__init__", "gym.spaces.Box", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "dict_keys", ")", ":", "\n", "        ", "super", "(", "FlattenDictWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "dict_keys", "=", "dict_keys", "\n", "\n", "# Figure out observation_space dimension.", "\n", "size", "=", "0", "\n", "for", "key", "in", "dict_keys", ":", "\n", "            ", "shape", "=", "self", ".", "env", ".", "observation_space", ".", "spaces", "[", "key", "]", ".", "shape", "\n", "size", "+=", "np", ".", "prod", "(", "shape", ")", "\n", "", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ",", "shape", "=", "(", "size", ",", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.dict.FlattenDictWrapper.observation": [[23, 29], ["isinstance", "numpy.concatenate", "obs.append", "observation[].ravel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "assert", "isinstance", "(", "observation", ",", "dict", ")", "\n", "obs", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "dict_keys", ":", "\n", "            ", "obs", ".", "append", "(", "observation", "[", "key", "]", ".", "ravel", "(", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "obs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.time_limit.TimeLimit.__init__": [[5, 12], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "max_episode_seconds", "=", "None", ",", "max_episode_steps", "=", "None", ")", ":", "\n", "        ", "super", "(", "TimeLimit", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_max_episode_seconds", "=", "max_episode_seconds", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "self", ".", "_episode_started_at", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.time_limit.TimeLimit._elapsed_seconds": [[13, 16], ["time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "@", "property", "\n", "def", "_elapsed_seconds", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "_episode_started_at", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.time_limit.TimeLimit._past_limit": [[17, 28], ["gym.logger.debug", "gym.logger.debug"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug"], ["", "def", "_past_limit", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return true if we are past our limit\"\"\"", "\n", "if", "self", ".", "_max_episode_steps", "is", "not", "None", "and", "self", ".", "_max_episode_steps", "<=", "self", ".", "_elapsed_steps", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Env has passed the step limit defined by TimeLimit.\"", ")", "\n", "return", "True", "\n", "\n", "", "if", "self", ".", "_max_episode_seconds", "is", "not", "None", "and", "self", ".", "_max_episode_seconds", "<=", "self", ".", "_elapsed_seconds", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Env has passed the seconds limit defined by TimeLimit.\"", ")", "\n", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.time_limit.TimeLimit.step": [[29, 40], ["time_limit.TimeLimit.env.step", "time_limit.TimeLimit._past_limit", "time_limit.TimeLimit.metadata.get", "time_limit.TimeLimit.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.time_limit.TimeLimit._past_limit", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "self", ".", "_episode_started_at", "is", "not", "None", ",", "\"Cannot call env.step() before calling reset()\"", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "\n", "if", "self", ".", "_past_limit", "(", ")", ":", "\n", "            ", "if", "self", ".", "metadata", ".", "get", "(", "'semantics.autoreset'", ")", ":", "\n", "                ", "_", "=", "self", ".", "reset", "(", ")", "# automatically reset the env", "\n", "", "done", "=", "True", "\n", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.time_limit.TimeLimit.reset": [[41, 45], ["time.time", "time_limit.TimeLimit.env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_episode_started_at", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.__init__": [[13, 28], ["gym.Wrapper.__init__", "env.metadata.get", "monitor.Monitor._start"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._start"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "directory", ",", "video_callable", "=", "None", ",", "force", "=", "False", ",", "resume", "=", "False", ",", "\n", "write_upon_reset", "=", "False", ",", "uid", "=", "None", ",", "mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "Monitor", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "videos", "=", "[", "]", "\n", "\n", "self", ".", "stats_recorder", "=", "None", "\n", "self", ".", "video_recorder", "=", "None", "\n", "self", ".", "enabled", "=", "False", "\n", "self", ".", "episode_id", "=", "0", "\n", "self", ".", "_monitor_id", "=", "None", "\n", "self", ".", "env_semantics_autoreset", "=", "env", ".", "metadata", ".", "get", "(", "'semantics.autoreset'", ")", "\n", "\n", "self", ".", "_start", "(", "directory", ",", "video_callable", ",", "force", ",", "resume", ",", "\n", "write_upon_reset", ",", "uid", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.step": [[29, 35], ["monitor.Monitor._before_step", "monitor.Monitor.env.step", "monitor.Monitor._after_step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._before_step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._after_step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "_before_step", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "done", "=", "self", ".", "_after_step", "(", "observation", ",", "reward", ",", "done", ",", "info", ")", "\n", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.reset": [[36, 42], ["monitor.Monitor._before_reset", "monitor.Monitor.env.reset", "monitor.Monitor._after_reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._before_reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._after_reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_before_reset", "(", ")", "\n", "observation", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "_after_reset", "(", "observation", ")", "\n", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.close": [[139, 153], ["monitor.Monitor.stats_recorder.close", "monitor.Monitor._flush", "monitor_closer.unregister", "gym.logger.info", "monitor.Monitor._close_video_recorder"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._flush", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.closer.Closer.unregister", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._close_video_recorder"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Flush all monitor data to disk and close any open rending windows.\"\"\"", "\n", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "\n", "", "self", ".", "stats_recorder", ".", "close", "(", ")", "\n", "if", "self", ".", "video_recorder", "is", "not", "None", ":", "\n", "            ", "self", ".", "_close_video_recorder", "(", ")", "\n", "", "self", ".", "_flush", "(", "force", "=", "True", ")", "\n", "\n", "# Stop tracking this for autoclose", "\n", "monitor_closer", ".", "unregister", "(", "self", ".", "_monitor_id", ")", "\n", "self", ".", "enabled", "=", "False", "\n", "\n", "logger", ".", "info", "(", "'''Finished writing results. You can upload them to the scoreboard via gym.upload(%r)'''", ",", "self", ".", "directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.set_monitor_mode": [[50, 53], ["gym.logger.info", "monitor.Monitor._set_mode"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._set_mode"], ["", "", "def", "set_monitor_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Setting the monitor mode is deprecated and will be removed soon\"", ")", "\n", "self", ".", "_set_mode", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._start": [[55, 115], ["monitor_closer.register", "os.path.abspath", "gym.wrappers.monitoring.stats_recorder.StatsRecorder", "gym.logger.warn", "os.path.exists", "gym.logger.info", "monitor.clear_monitor_files", "os.path.exists", "os.mkdir", "monitor.Monitor._set_mode", "os.makedirs", "os.makedirs", "monitor.detect_training_manifests", "os.getpid", "callable", "gym.error.Error", "len", "gym.error.Error", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.register", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.clear_monitor_files", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._set_mode", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.detect_training_manifests", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "_start", "(", "self", ",", "directory", ",", "video_callable", "=", "None", ",", "force", "=", "False", ",", "resume", "=", "False", ",", "\n", "write_upon_reset", "=", "False", ",", "uid", "=", "None", ",", "mode", "=", "None", ")", ":", "\n", "        ", "\"\"\"Start monitoring.\n\n        Args:\n            directory (str): A per-training run directory where to record stats.\n            video_callable (Optional[function, False]): function that takes in the index of the episode and outputs a boolean, indicating whether we should record a video on this episode. The default (for video_callable is None) is to take perfect cubes, capped at 1000. False disables video recording.\n            force (bool): Clear out existing training data from this directory (by deleting every file prefixed with \"openaigym.\").\n            resume (bool): Retain the training data already in this directory, which will be merged with our new data\n            write_upon_reset (bool): Write the manifest file on each reset. (This is currently a JSON file, so writing it is somewhat expensive.)\n            uid (Optional[str]): A unique id used as part of the suffix for the file. By default, uses os.getpid().\n            mode (['evaluation', 'training']): Whether this is an evaluation or training episode.\n        \"\"\"", "\n", "if", "self", ".", "env", ".", "spec", "is", "None", ":", "\n", "            ", "logger", ".", "warn", "(", "\"Trying to monitor an environment which has no 'spec' set. This usually means you did not create it via 'gym.make', and is recommended only for advanced users.\"", ")", "\n", "env_id", "=", "'(unknown)'", "\n", "", "else", ":", "\n", "            ", "env_id", "=", "self", ".", "env", ".", "spec", ".", "id", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Creating monitor directory %s'", ",", "directory", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "", "if", "video_callable", "is", "None", ":", "\n", "            ", "video_callable", "=", "capped_cubic_video_schedule", "\n", "", "elif", "video_callable", "==", "False", ":", "\n", "            ", "video_callable", "=", "disable_videos", "\n", "", "elif", "not", "callable", "(", "video_callable", ")", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'You must provide a function, None, or False for video_callable, not {}: {}'", ".", "format", "(", "type", "(", "video_callable", ")", ",", "video_callable", ")", ")", "\n", "", "self", ".", "video_callable", "=", "video_callable", "\n", "\n", "# Check on whether we need to clear anything", "\n", "if", "force", ":", "\n", "            ", "clear_monitor_files", "(", "directory", ")", "\n", "", "elif", "not", "resume", ":", "\n", "            ", "training_manifests", "=", "detect_training_manifests", "(", "directory", ")", "\n", "if", "len", "(", "training_manifests", ")", ">", "0", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'''Trying to write to monitor directory {} with existing monitor files: {}.\n\n You should use a unique directory for each training run, or use 'force=True' to automatically clear previous monitor files.'''", ".", "format", "(", "directory", ",", "', '", ".", "join", "(", "training_manifests", "[", ":", "5", "]", ")", ")", ")", "\n", "\n", "", "", "self", ".", "_monitor_id", "=", "monitor_closer", ".", "register", "(", "self", ")", "\n", "\n", "self", ".", "enabled", "=", "True", "\n", "self", ".", "directory", "=", "os", ".", "path", ".", "abspath", "(", "directory", ")", "\n", "# We use the 'openai-gym' prefix to determine if a file is", "\n", "# ours", "\n", "self", ".", "file_prefix", "=", "FILE_PREFIX", "\n", "self", ".", "file_infix", "=", "'{}.{}'", ".", "format", "(", "self", ".", "_monitor_id", ",", "uid", "if", "uid", "else", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "self", ".", "stats_recorder", "=", "stats_recorder", ".", "StatsRecorder", "(", "directory", ",", "'{}.episode_batch.{}'", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ")", ",", "autoreset", "=", "self", ".", "env_semantics_autoreset", ",", "env_id", "=", "env_id", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "os", ".", "mkdir", "(", "directory", ")", "\n", "self", ".", "write_upon_reset", "=", "write_upon_reset", "\n", "\n", "if", "mode", "is", "not", "None", ":", "\n", "            ", "self", ".", "_set_mode", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._flush": [[116, 138], ["monitor.Monitor.stats_recorder.flush", "os.path.join", "gym.logger.debug", "gym.utils.atomic_write.atomic_write", "json.dump", "os.path.basename", "monitor.Monitor._env_info", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.atomic_write.atomic_write", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._env_info"], ["", "", "def", "_flush", "(", "self", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Flush all relevant monitor information to disk.\"\"\"", "\n", "if", "not", "self", ".", "write_upon_reset", "and", "not", "force", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "stats_recorder", ".", "flush", "(", ")", "\n", "\n", "# Give it a very distiguished name, since we need to pick it", "\n", "# up from the filesystem later.", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'{}.manifest.{}.manifest.json'", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ")", ")", "\n", "logger", ".", "debug", "(", "'Writing training manifest file to %s'", ",", "path", ")", "\n", "with", "atomic_write", ".", "atomic_write", "(", "path", ")", "as", "f", ":", "\n", "# We need to write relative paths here since people may", "\n", "# move the training_dir around. It would be cleaner to", "\n", "# already have the basenames rather than basename'ing", "\n", "# manually, but this works for now.", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'stats'", ":", "os", ".", "path", ".", "basename", "(", "self", ".", "stats_recorder", ".", "path", ")", ",", "\n", "'videos'", ":", "[", "(", "os", ".", "path", ".", "basename", "(", "v", ")", ",", "os", ".", "path", ".", "basename", "(", "m", ")", ")", "\n", "for", "v", ",", "m", "in", "self", ".", "videos", "]", ",", "\n", "'env_info'", ":", "self", ".", "_env_info", "(", ")", ",", "\n", "}", ",", "f", ",", "default", "=", "json_encode_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._set_mode": [[154, 162], ["gym.error.Error"], "methods", ["None"], ["", "def", "_set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'evaluation'", ":", "\n", "            ", "type", "=", "'e'", "\n", "", "elif", "mode", "==", "'training'", ":", "\n", "            ", "type", "=", "'t'", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Invalid mode {}: must be \"training\" or \"evaluation\"'", ",", "mode", ")", "\n", "", "self", ".", "stats_recorder", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._before_step": [[163, 166], ["monitor.Monitor.stats_recorder.before_step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.before_step"], ["", "def", "_before_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "\n", "self", ".", "stats_recorder", ".", "before_step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._after_step": [[167, 182], ["monitor.Monitor.stats_recorder.after_step", "monitor.Monitor.video_recorder.capture_frame", "monitor.Monitor.reset_video_recorder", "monitor.Monitor._flush"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.after_step", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.reset_video_recorder", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._flush"], ["", "def", "_after_step", "(", "self", ",", "observation", ",", "reward", ",", "done", ",", "info", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "done", "\n", "\n", "if", "done", "and", "self", ".", "env_semantics_autoreset", ":", "\n", "# For envs with BlockingReset wrapping VNCEnv, this observation will be the first one of the new episode", "\n", "            ", "self", ".", "reset_video_recorder", "(", ")", "\n", "self", ".", "episode_id", "+=", "1", "\n", "self", ".", "_flush", "(", ")", "\n", "\n", "# Record stats", "\n", "", "self", ".", "stats_recorder", ".", "after_step", "(", "observation", ",", "reward", ",", "done", ",", "info", ")", "\n", "# Record video", "\n", "self", ".", "video_recorder", ".", "capture_frame", "(", ")", "\n", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._before_reset": [[183, 186], ["monitor.Monitor.stats_recorder.before_reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.before_reset"], ["", "def", "_before_reset", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "\n", "self", ".", "stats_recorder", ".", "before_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._after_reset": [[187, 199], ["monitor.Monitor.stats_recorder.after_reset", "monitor.Monitor.reset_video_recorder", "monitor.Monitor._flush"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.after_reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.reset_video_recorder", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._flush"], ["", "def", "_after_reset", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "return", "\n", "\n", "# Reset the stat count", "\n", "self", ".", "stats_recorder", ".", "after_reset", "(", "observation", ")", "\n", "\n", "self", ".", "reset_video_recorder", "(", ")", "\n", "\n", "# Bump *after* all reset activity has finished", "\n", "self", ".", "episode_id", "+=", "1", "\n", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.reset_video_recorder": [[200, 215], ["gym.wrappers.monitoring.video_recorder.VideoRecorder", "monitor.Monitor.video_recorder.capture_frame", "monitor.Monitor._close_video_recorder", "os.path.join", "monitor.Monitor._video_enabled"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._close_video_recorder", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._video_enabled"], ["", "def", "reset_video_recorder", "(", "self", ")", ":", "\n", "# Close any existing video recorder", "\n", "        ", "if", "self", ".", "video_recorder", ":", "\n", "            ", "self", ".", "_close_video_recorder", "(", ")", "\n", "\n", "# Start recording the next video.", "\n", "#", "\n", "# TODO: calculate a more correct 'episode_id' upon merge", "\n", "", "self", ".", "video_recorder", "=", "video_recorder", ".", "VideoRecorder", "(", "\n", "env", "=", "self", ".", "env", ",", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'{}.video.{}.video{:06}'", ".", "format", "(", "self", ".", "file_prefix", ",", "self", ".", "file_infix", ",", "self", ".", "episode_id", ")", ")", ",", "\n", "metadata", "=", "{", "'episode_id'", ":", "self", ".", "episode_id", "}", ",", "\n", "enabled", "=", "self", ".", "_video_enabled", "(", ")", ",", "\n", ")", "\n", "self", ".", "video_recorder", ".", "capture_frame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._close_video_recorder": [[216, 220], ["monitor.Monitor.video_recorder.close", "monitor.Monitor.videos.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_close_video_recorder", "(", "self", ")", ":", "\n", "        ", "self", ".", "video_recorder", ".", "close", "(", ")", "\n", "if", "self", ".", "video_recorder", ".", "functional", ":", "\n", "            ", "self", ".", "videos", ".", "append", "(", "(", "self", ".", "video_recorder", ".", "path", ",", "self", ".", "video_recorder", ".", "metadata_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._video_enabled": [[221, 223], ["monitor.Monitor.video_callable"], "methods", ["None"], ["", "", "def", "_video_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "video_callable", "(", "self", ".", "episode_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor._env_info": [[224, 231], ["None"], "methods", ["None"], ["", "def", "_env_info", "(", "self", ")", ":", "\n", "        ", "env_info", "=", "{", "\n", "'gym_version'", ":", "version", ".", "VERSION", ",", "\n", "}", "\n", "if", "self", ".", "env", ".", "spec", ":", "\n", "            ", "env_info", "[", "'env_id'", "]", "=", "self", ".", "env", ".", "spec", ".", "id", "\n", "", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.__del__": [[232, 235], ["monitor.Monitor.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "# Make sure we've closed up shop when garbage collecting", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.get_total_steps": [[236, 238], ["None"], "methods", ["None"], ["", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stats_recorder", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.get_episode_rewards": [[239, 241], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stats_recorder", ".", "episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.Monitor.get_episode_lengths": [[242, 244], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stats_recorder", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.detect_training_manifests": [[245, 249], ["os.listdir", "os.path.join", "f.startswith"], "function", ["None"], ["", "", "def", "detect_training_manifests", "(", "training_dir", ",", "files", "=", "None", ")", ":", "\n", "    ", "if", "files", "is", "None", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "training_dir", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "training_dir", ",", "f", ")", "for", "f", "in", "files", "if", "f", ".", "startswith", "(", "MANIFEST_PREFIX", "+", "'.'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.detect_monitor_files": [[250, 252], ["os.path.join", "os.listdir", "f.startswith"], "function", ["None"], ["", "def", "detect_monitor_files", "(", "training_dir", ")", ":", "\n", "    ", "return", "[", "os", ".", "path", ".", "join", "(", "training_dir", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "training_dir", ")", "if", "f", ".", "startswith", "(", "FILE_PREFIX", "+", "'.'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.clear_monitor_files": [[253, 261], ["monitor.detect_monitor_files", "gym.logger.info", "len", "len", "os.unlink"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.detect_monitor_files", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info"], ["", "def", "clear_monitor_files", "(", "training_dir", ")", ":", "\n", "    ", "files", "=", "detect_monitor_files", "(", "training_dir", ")", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "logger", ".", "info", "(", "'Clearing %d monitor files from previous run (because force=True was provided)'", ",", "len", "(", "files", ")", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "os", ".", "unlink", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.capped_cubic_video_schedule": [[262, 267], ["int", "round"], "function", ["None"], ["", "", "def", "capped_cubic_video_schedule", "(", "episode_id", ")", ":", "\n", "    ", "if", "episode_id", "<", "1000", ":", "\n", "        ", "return", "int", "(", "round", "(", "episode_id", "**", "(", "1.", "/", "3", ")", ")", ")", "**", "3", "==", "episode_id", "\n", "", "else", ":", "\n", "        ", "return", "episode_id", "%", "1000", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.disable_videos": [[268, 270], ["None"], "function", ["None"], ["", "", "def", "disable_videos", "(", "episode_id", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor._open_monitors": [[275, 277], ["list", "monitor_closer.closeables.values"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["def", "_open_monitors", "(", ")", ":", "\n", "    ", "return", "list", "(", "monitor_closer", ".", "closeables", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.load_env_info_from_manifests": [[278, 287], ["monitor.collapse_env_infos", "open", "json.load", "env_infos.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.collapse_env_infos", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "load_env_info_from_manifests", "(", "manifests", ",", "training_dir", ")", ":", "\n", "    ", "env_infos", "=", "[", "]", "\n", "for", "manifest", "in", "manifests", ":", "\n", "        ", "with", "open", "(", "manifest", ")", "as", "f", ":", "\n", "            ", "contents", "=", "json", ".", "load", "(", "f", ")", "\n", "env_infos", ".", "append", "(", "contents", "[", "'env_info'", "]", ")", "\n", "\n", "", "", "env_info", "=", "collapse_env_infos", "(", "env_infos", ",", "training_dir", ")", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.load_results": [[288, 328], ["monitor.detect_training_manifests", "gym.logger.debug", "monitor.collapse_env_infos", "monitor.merge_stats_files", "os.path.exists", "gym.logger.error", "gym.logger.error", "open", "json.load", "stats_files.append", "env_infos.append", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.detect_training_manifests", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.collapse_env_infos", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.merge_stats_files", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.error", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.error", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "load_results", "(", "training_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "training_dir", ")", ":", "\n", "        ", "logger", ".", "error", "(", "'Training directory %s not found'", ",", "training_dir", ")", "\n", "return", "\n", "\n", "", "manifests", "=", "detect_training_manifests", "(", "training_dir", ")", "\n", "if", "not", "manifests", ":", "\n", "        ", "logger", ".", "error", "(", "'No manifests found in training directory %s'", ",", "training_dir", ")", "\n", "return", "\n", "\n", "", "logger", ".", "debug", "(", "'Uploading data from manifest %s'", ",", "', '", ".", "join", "(", "manifests", ")", ")", "\n", "\n", "# Load up stats + video files", "\n", "stats_files", "=", "[", "]", "\n", "videos", "=", "[", "]", "\n", "env_infos", "=", "[", "]", "\n", "\n", "for", "manifest", "in", "manifests", ":", "\n", "        ", "with", "open", "(", "manifest", ")", "as", "f", ":", "\n", "            ", "contents", "=", "json", ".", "load", "(", "f", ")", "\n", "# Make these paths absolute again", "\n", "stats_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "training_dir", ",", "contents", "[", "'stats'", "]", ")", ")", "\n", "videos", "+=", "[", "(", "os", ".", "path", ".", "join", "(", "training_dir", ",", "v", ")", ",", "os", ".", "path", ".", "join", "(", "training_dir", ",", "m", ")", ")", "\n", "for", "v", ",", "m", "in", "contents", "[", "'videos'", "]", "]", "\n", "env_infos", ".", "append", "(", "contents", "[", "'env_info'", "]", ")", "\n", "\n", "", "", "env_info", "=", "collapse_env_infos", "(", "env_infos", ",", "training_dir", ")", "\n", "data_sources", ",", "initial_reset_timestamps", ",", "timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "initial_reset_timestamp", "=", "merge_stats_files", "(", "stats_files", ")", "\n", "\n", "return", "{", "\n", "'manifests'", ":", "manifests", ",", "\n", "'env_info'", ":", "env_info", ",", "\n", "'data_sources'", ":", "data_sources", ",", "\n", "'timestamps'", ":", "timestamps", ",", "\n", "'episode_lengths'", ":", "episode_lengths", ",", "\n", "'episode_rewards'", ":", "episode_rewards", ",", "\n", "'episode_types'", ":", "episode_types", ",", "\n", "'initial_reset_timestamps'", ":", "initial_reset_timestamps", ",", "\n", "'initial_reset_timestamp'", ":", "initial_reset_timestamp", ",", "\n", "'videos'", ":", "videos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.merge_stats_files": [[330, 368], ["enumerate", "numpy.argsort", "[].tolist", "[].tolist", "[].tolist", "[].tolist", "[].tolist", "len", "min", "open", "json.load", "json.load.get", "initial_reset_timestamps.append", "len", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "merge_stats_files", "(", "stats_files", ")", ":", "\n", "    ", "timestamps", "=", "[", "]", "\n", "episode_lengths", "=", "[", "]", "\n", "episode_rewards", "=", "[", "]", "\n", "episode_types", "=", "[", "]", "\n", "initial_reset_timestamps", "=", "[", "]", "\n", "data_sources", "=", "[", "]", "\n", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "stats_files", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "content", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "len", "(", "content", "[", "'timestamps'", "]", ")", "==", "0", ":", "continue", "# so empty file doesn't mess up results, due to null initial_reset_timestamp", "\n", "data_sources", "+=", "[", "i", "]", "*", "len", "(", "content", "[", "'timestamps'", "]", ")", "\n", "timestamps", "+=", "content", "[", "'timestamps'", "]", "\n", "episode_lengths", "+=", "content", "[", "'episode_lengths'", "]", "\n", "episode_rewards", "+=", "content", "[", "'episode_rewards'", "]", "\n", "# Recent addition", "\n", "episode_types", "+=", "content", ".", "get", "(", "'episode_types'", ",", "[", "]", ")", "\n", "# Keep track of where each episode came from.", "\n", "initial_reset_timestamps", ".", "append", "(", "content", "[", "'initial_reset_timestamp'", "]", ")", "\n", "\n", "", "", "idxs", "=", "np", ".", "argsort", "(", "timestamps", ")", "\n", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "episode_lengths", "=", "np", ".", "array", "(", "episode_lengths", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "episode_rewards", "=", "np", ".", "array", "(", "episode_rewards", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "data_sources", "=", "np", ".", "array", "(", "data_sources", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "\n", "if", "episode_types", ":", "\n", "        ", "episode_types", "=", "np", ".", "array", "(", "episode_types", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "episode_types", "=", "None", "\n", "\n", "", "if", "len", "(", "initial_reset_timestamps", ")", ">", "0", ":", "\n", "        ", "initial_reset_timestamp", "=", "min", "(", "initial_reset_timestamps", ")", "\n", "", "else", ":", "\n", "        ", "initial_reset_timestamp", "=", "0", "\n", "\n", "", "return", "data_sources", ",", "initial_reset_timestamps", ",", "timestamps", ",", "episode_lengths", ",", "episode_rewards", ",", "episode_types", ",", "initial_reset_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.collapse_env_infos": [[370, 382], ["len", "gym.error.Error", "gym.error.Error"], "function", ["None"], ["", "def", "collapse_env_infos", "(", "env_infos", ",", "training_dir", ")", ":", "\n", "    ", "assert", "len", "(", "env_infos", ")", ">", "0", "\n", "\n", "first", "=", "env_infos", "[", "0", "]", "\n", "for", "other", "in", "env_infos", "[", "1", ":", "]", ":", "\n", "        ", "if", "first", "!=", "other", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Found two unequal env_infos: {} and {}. This usually indicates that your training directory {} has commingled results from multiple runs.'", ".", "format", "(", "first", ",", "other", ",", "training_dir", ")", ")", "\n", "\n", "", "", "for", "key", "in", "[", "'env_id'", ",", "'gym_version'", "]", ":", "\n", "        ", "if", "key", "not", "in", "first", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"env_info {} from training directory {} is missing expected key {}. This is unexpected and likely indicates a bug in gym.\"", ".", "format", "(", "first", ",", "training_dir", ",", "key", ")", ")", "\n", "", "", "return", "first", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.__init__": [[32, 90], ["env.metadata.get", "env.metadata.get", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "video_recorder.touch", "env.metadata.get", "video_recorder.VideoRecorder.write_metadata", "gym.logger.info", "gym.error.Error", "gym.error.Error", "gym.logger.info", "tempfile.NamedTemporaryFile"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.touch", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.write_metadata", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info"], ["def", "__init__", "(", "self", ",", "env", ",", "path", "=", "None", ",", "metadata", "=", "None", ",", "enabled", "=", "True", ",", "base_path", "=", "None", ")", ":", "\n", "        ", "modes", "=", "env", ".", "metadata", ".", "get", "(", "'render.modes'", ",", "[", "]", ")", "\n", "self", ".", "_async", "=", "env", ".", "metadata", ".", "get", "(", "'semantics.async'", ")", "\n", "self", ".", "enabled", "=", "enabled", "\n", "\n", "# Don't bother setting anything else if not enabled", "\n", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "ansi_mode", "=", "False", "\n", "if", "'rgb_array'", "not", "in", "modes", ":", "\n", "            ", "if", "'ansi'", "in", "modes", ":", "\n", "                ", "self", ".", "ansi_mode", "=", "True", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Disabling video recorder because {} neither supports video mode \"rgb_array\" nor \"ansi\".'", ".", "format", "(", "env", ")", ")", "\n", "# Whoops, turns out we shouldn't be enabled after all", "\n", "self", ".", "enabled", "=", "False", "\n", "return", "\n", "\n", "", "", "if", "path", "is", "not", "None", "and", "base_path", "is", "not", "None", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"You can pass at most one of `path` or `base_path`.\"", ")", "\n", "\n", "", "self", ".", "last_frame", "=", "None", "\n", "self", ".", "env", "=", "env", "\n", "\n", "required_ext", "=", "'.json'", "if", "self", ".", "ansi_mode", "else", "'.mp4'", "\n", "if", "path", "is", "None", ":", "\n", "            ", "if", "base_path", "is", "not", "None", ":", "\n", "# Base path given, append ext", "\n", "                ", "path", "=", "base_path", "+", "required_ext", "\n", "", "else", ":", "\n", "# Otherwise, just generate a unique filename", "\n", "                ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "suffix", "=", "required_ext", ",", "delete", "=", "False", ")", "as", "f", ":", "\n", "                    ", "path", "=", "f", ".", "name", "\n", "", "", "", "self", ".", "path", "=", "path", "\n", "\n", "path_base", ",", "actual_ext", "=", "os", ".", "path", ".", "splitext", "(", "self", ".", "path", ")", "\n", "\n", "if", "actual_ext", "!=", "required_ext", ":", "\n", "            ", "hint", "=", "\" HINT: The environment is text-only, therefore we're recording its text output in a structured JSON format.\"", "if", "self", ".", "ansi_mode", "else", "''", "\n", "raise", "error", ".", "Error", "(", "\"Invalid path given: {} -- must have file extension {}.{}\"", ".", "format", "(", "self", ".", "path", ",", "required_ext", ",", "hint", ")", ")", "\n", "# Touch the file in any case, so we know it's present. (This", "\n", "# corrects for platform platform differences. Using ffmpeg on", "\n", "# OS X, the file is precreated, but not on Linux.", "\n", "", "touch", "(", "path", ")", "\n", "\n", "self", ".", "frames_per_sec", "=", "env", ".", "metadata", ".", "get", "(", "'video.frames_per_second'", ",", "30", ")", "\n", "self", ".", "encoder", "=", "None", "# lazily start the process", "\n", "self", ".", "broken", "=", "False", "\n", "\n", "# Dump metadata", "\n", "self", ".", "metadata", "=", "metadata", "or", "{", "}", "\n", "self", ".", "metadata", "[", "'content_type'", "]", "=", "'video/vnd.openai.ansivid'", "if", "self", ".", "ansi_mode", "else", "'video/mp4'", "\n", "self", ".", "metadata_path", "=", "'{}.meta.json'", ".", "format", "(", "path_base", ")", "\n", "self", ".", "write_metadata", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'Starting new video recorder writing to %s'", ",", "self", ".", "path", ")", "\n", "self", ".", "empty", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.functional": [[91, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "functional", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "enabled", "and", "not", "self", ".", "broken", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.capture_frame": [[95, 117], ["gym.logger.debug", "video_recorder.VideoRecorder.env.render", "gym.logger.warn", "video_recorder.VideoRecorder._encode_ansi_frame", "video_recorder.VideoRecorder._encode_image_frame"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.algorithmic.algorithmic_env.AlgorithmicEnv.render", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder._encode_ansi_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder._encode_image_frame"], ["", "def", "capture_frame", "(", "self", ")", ":", "\n", "        ", "\"\"\"Render the given `env` and add the resulting frame to the video.\"\"\"", "\n", "if", "not", "self", ".", "functional", ":", "return", "\n", "logger", ".", "debug", "(", "'Capturing video frame: path=%s'", ",", "self", ".", "path", ")", "\n", "\n", "render_mode", "=", "'ansi'", "if", "self", ".", "ansi_mode", "else", "'rgb_array'", "\n", "frame", "=", "self", ".", "env", ".", "render", "(", "mode", "=", "render_mode", ")", "\n", "\n", "if", "frame", "is", "None", ":", "\n", "            ", "if", "self", ".", "_async", ":", "\n", "                ", "return", "\n", "", "else", ":", "\n", "# Indicates a bug in the environment: don't want to raise", "\n", "# an error here.", "\n", "                ", "logger", ".", "warn", "(", "'Env returned None on render(). Disabling further rendering for video recorder by marking as disabled: path=%s metadata_path=%s'", ",", "self", ".", "path", ",", "self", ".", "metadata_path", ")", "\n", "self", ".", "broken", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "last_frame", "=", "frame", "\n", "if", "self", ".", "ansi_mode", ":", "\n", "                ", "self", ".", "_encode_ansi_frame", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_encode_image_frame", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.close": [[118, 148], ["video_recorder.VideoRecorder.write_metadata", "gym.logger.debug", "video_recorder.VideoRecorder.encoder.close", "os.remove", "os.remove", "os.remove", "os.remove", "gym.logger.info", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.write_metadata", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make sure to manually close, or else you'll leak the encoder process\"\"\"", "\n", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "encoder", ":", "\n", "            ", "logger", ".", "debug", "(", "'Closing video encoder: path=%s'", ",", "self", ".", "path", ")", "\n", "self", ".", "encoder", ".", "close", "(", ")", "\n", "self", ".", "encoder", "=", "None", "\n", "", "else", ":", "\n", "# No frames captured. Set metadata, and remove the empty output file.", "\n", "            ", "os", ".", "remove", "(", "self", ".", "path", ")", "\n", "\n", "if", "self", ".", "metadata", "is", "None", ":", "\n", "                ", "self", ".", "metadata", "=", "{", "}", "\n", "", "self", ".", "metadata", "[", "'empty'", "]", "=", "True", "\n", "\n", "# If broken, get rid of the output file, otherwise we'd leak it.", "\n", "", "if", "self", ".", "broken", ":", "\n", "            ", "logger", ".", "info", "(", "'Cleaning up paths for broken video recorder: path=%s metadata_path=%s'", ",", "self", ".", "path", ",", "self", ".", "metadata_path", ")", "\n", "\n", "# Might have crashed before even starting the output file, don't try to remove in that case.", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "path", ")", "\n", "\n", "", "if", "self", ".", "metadata", "is", "None", ":", "\n", "                ", "self", ".", "metadata", "=", "{", "}", "\n", "", "self", ".", "metadata", "[", "'broken'", "]", "=", "True", "\n", "\n", "", "self", ".", "write_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder.write_metadata": [[149, 152], ["open", "json.dump"], "methods", ["None"], ["", "def", "write_metadata", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "metadata_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "metadata", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder._encode_ansi_frame": [[153, 159], ["video_recorder.VideoRecorder.encoder.capture_frame", "video_recorder.TextEncoder"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame"], ["", "", "def", "_encode_ansi_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "not", "self", ".", "encoder", ":", "\n", "            ", "self", ".", "encoder", "=", "TextEncoder", "(", "self", ".", "path", ",", "self", ".", "frames_per_sec", ")", "\n", "self", ".", "metadata", "[", "'encoder_version'", "]", "=", "self", ".", "encoder", ".", "version_info", "\n", "", "self", ".", "encoder", ".", "capture_frame", "(", "frame", ")", "\n", "self", ".", "empty", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.VideoRecorder._encode_image_frame": [[160, 172], ["video_recorder.ImageEncoder", "video_recorder.VideoRecorder.encoder.capture_frame", "gym.logger.warn"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["", "def", "_encode_image_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "not", "self", ".", "encoder", ":", "\n", "            ", "self", ".", "encoder", "=", "ImageEncoder", "(", "self", ".", "path", ",", "frame", ".", "shape", ",", "self", ".", "frames_per_sec", ")", "\n", "self", ".", "metadata", "[", "'encoder_version'", "]", "=", "self", ".", "encoder", ".", "version_info", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "encoder", ".", "capture_frame", "(", "frame", ")", "\n", "", "except", "error", ".", "InvalidFrame", "as", "e", ":", "\n", "            ", "logger", ".", "warn", "(", "'Tried to pass invalid video frame, marking as broken: %s'", ",", "e", ")", "\n", "self", ".", "broken", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "empty", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.TextEncoder.__init__": [[178, 182], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "frames_per_sec", ")", ":", "\n", "        ", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "frames_per_sec", "=", "frames_per_sec", "\n", "self", ".", "frames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.TextEncoder.capture_frame": [[183, 201], ["isinstance", "frame.getvalue.encode", "video_recorder.TextEncoder.frames.append", "isinstance", "six.b", "gym.error.InvalidFrame", "six.b", "gym.error.InvalidFrame", "frame.getvalue", "gym.error.InvalidFrame", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.toy_text.taxi.TaxiEnv.encode", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "capture_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "string", "=", "None", "\n", "if", "isinstance", "(", "frame", ",", "str", ")", ":", "\n", "            ", "string", "=", "frame", "\n", "", "elif", "isinstance", "(", "frame", ",", "StringIO", ")", ":", "\n", "            ", "string", "=", "frame", ".", "getvalue", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Wrong type {} for {}: text frame must be a string or StringIO'", ".", "format", "(", "type", "(", "frame", ")", ",", "frame", ")", ")", "\n", "\n", "", "frame_bytes", "=", "string", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "if", "frame_bytes", "[", "-", "1", ":", "]", "!=", "six", ".", "b", "(", "'\\n'", ")", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Frame must end with a newline: \"\"\"{}\"\"\"'", ".", "format", "(", "string", ")", ")", "\n", "\n", "", "if", "six", ".", "b", "(", "'\\r'", ")", "in", "frame_bytes", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Frame contains carriage returns (only newlines are allowed: \"\"\"{}\"\"\"'", ".", "format", "(", "string", ")", ")", "\n", "\n", "", "self", ".", "frames", ".", "append", "(", "frame_bytes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.TextEncoder.close": [[202, 231], ["six.b", "max", "max", "open", "json.dump", "len", "frame.count", "max", "six.b", "frame.replace", "len", "six.b", "six.b", "frame.split", "six.b"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "close", "(", "self", ")", ":", "\n", "#frame_duration = float(1) / self.frames_per_sec", "\n", "        ", "frame_duration", "=", ".5", "\n", "\n", "# Turn frames into events: clear screen beforehand", "\n", "# https://rosettacode.org/wiki/Terminal_control/Clear_the_screen#Python", "\n", "# https://rosettacode.org/wiki/Terminal_control/Cursor_positioning#Python", "\n", "clear_code", "=", "six", ".", "b", "(", "\"%c[2J\\033[1;1H\"", "%", "(", "27", ")", ")", "\n", "# Decode the bytes as UTF-8 since JSON may only contain UTF-8", "\n", "events", "=", "[", "(", "frame_duration", ",", "(", "clear_code", "+", "frame", ".", "replace", "(", "six", ".", "b", "(", "'\\n'", ")", ",", "six", ".", "b", "(", "'\\r\\n'", ")", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "for", "frame", "in", "self", ".", "frames", "]", "\n", "\n", "# Calculate frame size from the largest frames.", "\n", "# Add some padding since we'll get cut off otherwise.", "\n", "height", "=", "max", "(", "[", "frame", ".", "count", "(", "six", ".", "b", "(", "'\\n'", ")", ")", "for", "frame", "in", "self", ".", "frames", "]", ")", "+", "1", "\n", "width", "=", "max", "(", "[", "max", "(", "[", "len", "(", "line", ")", "for", "line", "in", "frame", ".", "split", "(", "six", ".", "b", "(", "'\\n'", ")", ")", "]", ")", "for", "frame", "in", "self", ".", "frames", "]", ")", "+", "2", "\n", "\n", "data", "=", "{", "\n", "\"version\"", ":", "1", ",", "\n", "\"width\"", ":", "width", ",", "\n", "\"height\"", ":", "height", ",", "\n", "\"duration\"", ":", "len", "(", "self", ".", "frames", ")", "*", "frame_duration", ",", "\n", "\"command\"", ":", "\"-\"", ",", "\n", "\"title\"", ":", "\"gym VideoRecorder episode\"", ",", "\n", "\"env\"", ":", "{", "}", ",", "# could add some env metadata here", "\n", "\"stdout\"", ":", "events", ",", "\n", "}", "\n", "\n", "with", "open", "(", "self", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.TextEncoder.version_info": [[232, 235], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "version_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "'backend'", ":", "'TextEncoder'", ",", "'version'", ":", "1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.__init__": [[237, 257], ["video_recorder.ImageEncoder.start", "gym.error.InvalidFrame", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "distutils.spawn.find_executable", "gym.error.DependencyNotInstalled"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.start"], ["    ", "def", "__init__", "(", "self", ",", "output_path", ",", "frame_shape", ",", "frames_per_sec", ")", ":", "\n", "        ", "self", ".", "proc", "=", "None", "\n", "self", ".", "output_path", "=", "output_path", "\n", "# Frame shape should be lines-first, so w and h are swapped", "\n", "h", ",", "w", ",", "pixfmt", "=", "frame_shape", "\n", "if", "pixfmt", "!=", "3", "and", "pixfmt", "!=", "4", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "\"Your frame has shape {}, but we require (w,h,3) or (w,h,4), i.e. RGB values for a w-by-h image, with an optional alpha channl.\"", ".", "format", "(", "frame_shape", ")", ")", "\n", "", "self", ".", "wh", "=", "(", "w", ",", "h", ")", "\n", "self", ".", "includes_alpha", "=", "(", "pixfmt", "==", "4", ")", "\n", "self", ".", "frame_shape", "=", "frame_shape", "\n", "self", ".", "frames_per_sec", "=", "frames_per_sec", "\n", "\n", "if", "distutils", ".", "spawn", ".", "find_executable", "(", "'avconv'", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "backend", "=", "'avconv'", "\n", "", "elif", "distutils", ".", "spawn", ".", "find_executable", "(", "'ffmpeg'", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "backend", "=", "'ffmpeg'", "\n", "", "else", ":", "\n", "            ", "raise", "error", ".", "DependencyNotInstalled", "(", "\"\"\"Found neither the ffmpeg nor avconv executables. On OS X, you can install ffmpeg via `brew install ffmpeg`. On most Ubuntu variants, `sudo apt-get install ffmpeg` should do it. On Ubuntu 14.04, however, you'll need to install avconv with `sudo apt-get install libav-tools`.\"\"\"", ")", "\n", "\n", "", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.version_info": [[258, 265], ["str", "subprocess.check_output"], "methods", ["None"], ["", "@", "property", "\n", "def", "version_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'backend'", ":", "self", ".", "backend", ",", "\n", "'version'", ":", "str", "(", "subprocess", ".", "check_output", "(", "[", "self", ".", "backend", ",", "'-version'", "]", ",", "\n", "stderr", "=", "subprocess", ".", "STDOUT", ")", ")", ",", "\n", "'cmdline'", ":", "self", ".", "cmdline", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.start": [[267, 291], ["gym.logger.debug", "hasattr", "subprocess.Popen", "subprocess.Popen"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "cmdline", "=", "(", "self", ".", "backend", ",", "\n", "'-nostats'", ",", "\n", "'-loglevel'", ",", "'error'", ",", "# suppress warnings", "\n", "'-y'", ",", "\n", "'-r'", ",", "'%d'", "%", "self", ".", "frames_per_sec", ",", "\n", "\n", "# input", "\n", "'-f'", ",", "'rawvideo'", ",", "\n", "'-s:v'", ",", "'{}x{}'", ".", "format", "(", "*", "self", ".", "wh", ")", ",", "\n", "'-pix_fmt'", ",", "(", "'rgb32'", "if", "self", ".", "includes_alpha", "else", "'rgb24'", ")", ",", "\n", "'-i'", ",", "'-'", ",", "# this used to be /dev/stdin, which is not Windows-friendly", "\n", "\n", "# output", "\n", "'-vcodec'", ",", "'libx264'", ",", "\n", "'-pix_fmt'", ",", "'yuv420p'", ",", "\n", "self", ".", "output_path", "\n", ")", "\n", "\n", "logger", ".", "debug", "(", "'Starting ffmpeg with \"%s\"'", ",", "' '", ".", "join", "(", "self", ".", "cmdline", ")", ")", "\n", "if", "hasattr", "(", "os", ",", "'setsid'", ")", ":", "#setsid not present on Windows", "\n", "            ", "self", ".", "proc", "=", "subprocess", ".", "Popen", "(", "self", ".", "cmdline", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "preexec_fn", "=", "os", ".", "setsid", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proc", "=", "subprocess", ".", "Popen", "(", "self", ".", "cmdline", ",", "stdin", "=", "subprocess", ".", "PIPE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.capture_frame": [[292, 304], ["isinstance", "gym.error.InvalidFrame", "gym.error.InvalidFrame", "gym.error.InvalidFrame", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "distutils.version.LooseVersion", "video_recorder.ImageEncoder.proc.stdin.write", "video_recorder.ImageEncoder.proc.stdin.write", "frame.tobytes", "frame.tostring", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "", "def", "capture_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "frame", ",", "(", "np", ".", "ndarray", ",", "np", ".", "generic", ")", ")", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "'Wrong type {} for {} (must be np.ndarray or np.generic)'", ".", "format", "(", "type", "(", "frame", ")", ",", "frame", ")", ")", "\n", "", "if", "frame", ".", "shape", "!=", "self", ".", "frame_shape", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "\"Your frame has shape {}, but the VideoRecorder is configured for shape {}.\"", ".", "format", "(", "frame", ".", "shape", ",", "self", ".", "frame_shape", ")", ")", "\n", "", "if", "frame", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "raise", "error", ".", "InvalidFrame", "(", "\"Your frame has data type {}, but we require uint8 (i.e. RGB values from 0-255).\"", ".", "format", "(", "frame", ".", "dtype", ")", ")", "\n", "\n", "", "if", "distutils", ".", "version", ".", "LooseVersion", "(", "np", ".", "__version__", ")", ">=", "distutils", ".", "version", ".", "LooseVersion", "(", "'1.9.0'", ")", ":", "\n", "            ", "self", ".", "proc", ".", "stdin", ".", "write", "(", "frame", ".", "tobytes", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proc", ".", "stdin", ".", "write", "(", "frame", ".", "tostring", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.close": [[305, 310], ["video_recorder.ImageEncoder.proc.stdin.close", "video_recorder.ImageEncoder.proc.wait", "gym.logger.error"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.error"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "proc", ".", "stdin", ".", "close", "(", ")", "\n", "ret", "=", "self", ".", "proc", ".", "wait", "(", ")", "\n", "if", "ret", "!=", "0", ":", "\n", "            ", "logger", ".", "error", "(", "\"VideoRecorder encoder exited with status {}\"", ".", "format", "(", "ret", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.touch": [[12, 14], ["open().close", "open"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["def", "touch", "(", "path", ")", ":", "\n", "    ", "open", "(", "path", ",", "'a'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.__init__": [[10, 31], ["os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ",", "file_prefix", ",", "autoreset", "=", "False", ",", "env_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "autoreset", "=", "autoreset", "\n", "self", ".", "env_id", "=", "env_id", "\n", "\n", "self", ".", "initial_reset_timestamp", "=", "None", "\n", "self", ".", "directory", "=", "directory", "\n", "self", ".", "file_prefix", "=", "file_prefix", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_rewards", "=", "[", "]", "\n", "self", ".", "episode_types", "=", "[", "]", "# experimental addition", "\n", "self", ".", "_type", "=", "'t'", "\n", "self", ".", "timestamps", "=", "[", "]", "\n", "self", ".", "steps", "=", "None", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "rewards", "=", "None", "\n", "\n", "self", ".", "done", "=", "None", "\n", "self", ".", "closed", "=", "False", "\n", "\n", "filename", "=", "'{}.stats.json'", ".", "format", "(", "self", ".", "file_prefix", ")", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type": [[36, 41], ["gym.error.Error"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "type", ")", ":", "\n", "        ", "if", "type", "not", "in", "[", "'t'", ",", "'e'", "]", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'Invalid episode type {}: must be t for training or e for evaluation'", ",", "type", ")", "\n", "", "self", ".", "_type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.before_step": [[42, 49], ["gym.error.ResetNeeded", "gym.error.ResetNeeded"], "methods", ["None"], ["", "def", "before_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", "\n", "\n", "if", "self", ".", "done", ":", "\n", "            ", "raise", "error", ".", "ResetNeeded", "(", "\"Trying to step environment which is currently done. While the monitor is active for {}, you cannot step beyond the end of an episode. Call 'env.reset()' to start the next episode.\"", ".", "format", "(", "self", ".", "env_id", ")", ")", "\n", "", "elif", "self", ".", "steps", "is", "None", ":", "\n", "            ", "raise", "error", ".", "ResetNeeded", "(", "\"Trying to step an environment before reset. While the monitor is active for {}, you must call 'env.reset()' before taking an initial step.\"", ".", "format", "(", "self", ".", "env_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.after_step": [[50, 63], ["stats_recorder.StatsRecorder.save_complete", "stats_recorder.StatsRecorder.before_reset", "stats_recorder.StatsRecorder.after_reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.save_complete", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.before_reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.after_reset"], ["", "", "def", "after_step", "(", "self", ",", "observation", ",", "reward", ",", "done", ",", "info", ")", ":", "\n", "        ", "self", ".", "steps", "+=", "1", "\n", "self", ".", "total_steps", "+=", "1", "\n", "self", ".", "rewards", "+=", "reward", "\n", "self", ".", "done", "=", "done", "\n", "\n", "if", "done", ":", "\n", "            ", "self", ".", "save_complete", "(", ")", "\n", "\n", "", "if", "done", ":", "\n", "            ", "if", "self", ".", "autoreset", ":", "\n", "                ", "self", ".", "before_reset", "(", ")", "\n", "self", ".", "after_reset", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.before_reset": [[64, 73], ["gym.error.Error", "time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "", "", "def", "before_reset", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", "\n", "\n", "if", "self", ".", "done", "is", "not", "None", "and", "not", "self", ".", "done", "and", "self", ".", "steps", ">", "0", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "\"Tried to reset environment which is not done. While the monitor is active for {}, you cannot call reset() unless the episode is over.\"", ".", "format", "(", "self", ".", "env_id", ")", ")", "\n", "\n", "", "self", ".", "done", "=", "False", "\n", "if", "self", ".", "initial_reset_timestamp", "is", "None", ":", "\n", "            ", "self", ".", "initial_reset_timestamp", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.after_reset": [[74, 81], ["stats_recorder.StatsRecorder.episode_types.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "", "def", "after_reset", "(", "self", ",", "observation", ")", ":", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "self", ".", "rewards", "=", "0", "\n", "# We write the type at the beginning of the episode. If a user", "\n", "# changes the type, it's more natural for it to apply next", "\n", "# time the user calls reset().", "\n", "self", ".", "episode_types", ".", "append", "(", "self", ".", "_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.save_complete": [[82, 87], ["stats_recorder.StatsRecorder.episode_lengths.append", "stats_recorder.StatsRecorder.episode_rewards.append", "stats_recorder.StatsRecorder.timestamps.append", "float", "time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "def", "save_complete", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "steps", "is", "not", "None", ":", "\n", "            ", "self", ".", "episode_lengths", ".", "append", "(", "self", ".", "steps", ")", "\n", "self", ".", "episode_rewards", ".", "append", "(", "float", "(", "self", ".", "rewards", ")", ")", "\n", "self", ".", "timestamps", ".", "append", "(", "time", ".", "time", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.close": [[88, 91], ["stats_recorder.StatsRecorder.flush"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "flush", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush": [[92, 104], ["gym.utils.atomic_write.atomic_write", "json.dump"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.atomic_write.atomic_write"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "\n", "", "with", "atomic_write", ".", "atomic_write", "(", "self", ".", "path", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "'initial_reset_timestamp'", ":", "self", ".", "initial_reset_timestamp", ",", "\n", "'timestamps'", ":", "self", ".", "timestamps", ",", "\n", "'episode_lengths'", ":", "self", ".", "episode_lengths", ",", "\n", "'episode_rewards'", ":", "self", ".", "episode_rewards", ",", "\n", "'episode_types'", ":", "self", ".", "episode_types", ",", "\n", "}", ",", "f", ",", "default", "=", "json_encode_np", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.dict_space.Dict.__init__": [[33, 40], ["isinstance", "isinstance", "gym.Space.__init__", "collections.OrderedDict", "collections.OrderedDict", "sorted", "list", "collections.OrderedDict.items"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["def", "__init__", "(", "self", ",", "spaces", ")", ":", "\n", "        ", "if", "isinstance", "(", "spaces", ",", "dict", ")", ":", "\n", "            ", "spaces", "=", "OrderedDict", "(", "sorted", "(", "list", "(", "spaces", ".", "items", "(", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "spaces", ",", "list", ")", ":", "\n", "            ", "spaces", "=", "OrderedDict", "(", "spaces", ")", "\n", "", "self", ".", "spaces", "=", "spaces", "\n", "gym", ".", "Space", ".", "__init__", "(", "self", ",", "None", ",", "None", ")", "# None for shape and dtype, since it'll require special handling", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.dict_space.Dict.sample": [[41, 43], ["collections.OrderedDict", "space.sample", "dict_space.Dict.spaces.items"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "k", ",", "space", ".", "sample", "(", ")", ")", "for", "k", ",", "space", "in", "self", ".", "spaces", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.dict_space.Dict.contains": [[44, 53], ["dict_space.Dict.spaces.items", "isinstance", "len", "len", "space.contains"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "dict", ")", "or", "len", "(", "x", ")", "!=", "len", "(", "self", ".", "spaces", ")", ":", "\n", "            ", "return", "False", "\n", "", "for", "k", ",", "space", "in", "self", ".", "spaces", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "x", ":", "\n", "                ", "return", "False", "\n", "", "if", "not", "space", ".", "contains", "(", "x", "[", "k", "]", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.dict_space.Dict.__repr__": [[54, 56], ["str", "dict_space.Dict.spaces.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Dict(\"", "+", "\", \"", ".", "join", "(", "[", "k", "+", "\":\"", "+", "str", "(", "s", ")", "for", "k", ",", "s", "in", "self", ".", "spaces", ".", "items", "(", ")", "]", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.dict_space.Dict.to_jsonable": [[57, 61], ["space.to_jsonable", "dict_space.Dict.spaces.items"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "# serialize as dict-repr of vectors", "\n", "        ", "return", "{", "key", ":", "space", ".", "to_jsonable", "(", "[", "sample", "[", "key", "]", "for", "sample", "in", "sample_n", "]", ")", "for", "key", ",", "space", "in", "self", ".", "spaces", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.dict_space.Dict.from_jsonable": [[62, 73], ["dict_space.Dict.spaces.items", "enumerate", "space.from_jsonable", "dict_of_list.items", "ret.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.from_jsonable", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "dict_of_list", "=", "{", "}", "\n", "for", "key", ",", "space", "in", "self", ".", "spaces", ".", "items", "(", ")", ":", "\n", "            ", "dict_of_list", "[", "key", "]", "=", "space", ".", "from_jsonable", "(", "sample_n", "[", "key", "]", ")", "\n", "", "ret", "=", "[", "]", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "dict_of_list", "[", "key", "]", ")", ":", "\n", "            ", "entry", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "dict_of_list", ".", "items", "(", ")", ":", "\n", "                ", "entry", "[", "key", "]", "=", "value", "[", "i", "]", "\n", "", "ret", ".", "append", "(", "entry", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.tuple_space.Tuple.__init__": [[10, 13], ["gym.Space.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "spaces", ")", ":", "\n", "        ", "self", ".", "spaces", "=", "spaces", "\n", "gym", ".", "Space", ".", "__init__", "(", "self", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.tuple_space.Tuple.sample": [[14, 16], ["tuple", "space.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "space", ".", "sample", "(", ")", "for", "space", "in", "self", ".", "spaces", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.tuple_space.Tuple.contains": [[17, 22], ["isinstance", "tuple", "isinstance", "all", "len", "len", "space.contains", "zip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "tuple", "(", "x", ")", "# Promote list to tuple for contains check", "\n", "", "return", "isinstance", "(", "x", ",", "tuple", ")", "and", "len", "(", "x", ")", "==", "len", "(", "self", ".", "spaces", ")", "and", "all", "(", "\n", "space", ".", "contains", "(", "part", ")", "for", "(", "space", ",", "part", ")", "in", "zip", "(", "self", ".", "spaces", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.tuple_space.Tuple.__repr__": [[23, 25], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Tuple(\"", "+", "\", \"", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "self", ".", "spaces", "]", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.tuple_space.Tuple.to_jsonable": [[26, 30], ["space.to_jsonable", "enumerate"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "# serialize as list-repr of tuple of vectors", "\n", "        ", "return", "[", "space", ".", "to_jsonable", "(", "[", "sample", "[", "i", "]", "for", "sample", "in", "sample_n", "]", ")", "for", "i", ",", "space", "in", "enumerate", "(", "self", ".", "spaces", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.tuple_space.Tuple.from_jsonable": [[31, 33], ["zip", "space.from_jsonable", "enumerate"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.from_jsonable"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "[", "sample", "for", "sample", "in", "zip", "(", "*", "[", "space", ".", "from_jsonable", "(", "sample_n", "[", "i", "]", ")", "for", "i", ",", "space", "in", "enumerate", "(", "self", ".", "spaces", ")", "]", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_binary.MultiBinary.__init__": [[5, 8], ["gym.Space.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "gym", ".", "Space", ".", "__init__", "(", "self", ",", "(", "self", ".", "n", ",", ")", ",", "np", ".", "int8", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_binary.MultiBinary.sample": [[8, 10], ["gym.spaces.np_random.randint().astype", "gym.spaces.np_random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "gym", ".", "spaces", ".", "np_random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "2", ",", "size", "=", "self", ".", "n", ")", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_binary.MultiBinary.contains": [[10, 12], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "(", "x", "==", "0", ")", "|", "(", "x", "==", "1", ")", ")", ".", "all", "(", ")", "\n", "", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_binary.MultiBinary.to_jsonable": [[12, 14], ["numpy.array().tolist", "numpy.array"], "methods", ["None"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "sample_n", ")", ".", "tolist", "(", ")", "\n", "", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_binary.MultiBinary.from_jsonable": [[14, 16], ["numpy.asarray"], "methods", ["None"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "[", "np", ".", "asarray", "(", "sample", ")", "for", "sample", "in", "sample_n", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.__init__": [[13, 35], ["low.astype", "high.astype", "gym.Space.__init__", "gym.logger.warn", "numpy.isscalar", "numpy.isscalar", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn"], ["def", "__init__", "(", "self", ",", "low", "=", "None", ",", "high", "=", "None", ",", "shape", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Two kinds of valid input:\n            Box(low=-1.0, high=1.0, shape=(3,4)) # low and high are scalars, and shape is provided\n            Box(low=np.array([-1.0,-2.0]), high=np.array([2.0,4.0])) # low and high are arrays of the same shape\n        \"\"\"", "\n", "if", "shape", "is", "None", ":", "\n", "            ", "assert", "low", ".", "shape", "==", "high", ".", "shape", "\n", "shape", "=", "low", ".", "shape", "\n", "", "else", ":", "\n", "            ", "assert", "np", ".", "isscalar", "(", "low", ")", "and", "np", ".", "isscalar", "(", "high", ")", "\n", "low", "=", "low", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "high", "=", "high", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "# Autodetect type", "\n", "            ", "if", "(", "high", "==", "255", ")", ".", "all", "(", ")", ":", "\n", "                ", "dtype", "=", "np", ".", "uint8", "\n", "", "else", ":", "\n", "                ", "dtype", "=", "np", ".", "float32", "\n", "", "logger", ".", "warn", "(", "\"gym.spaces.Box autodetected dtype as %s. Please provide explicit dtype.\"", "%", "dtype", ")", "\n", "", "self", ".", "low", "=", "low", ".", "astype", "(", "dtype", ")", "\n", "self", ".", "high", "=", "high", ".", "astype", "(", "dtype", ")", "\n", "gym", ".", "Space", ".", "__init__", "(", "self", ",", "shape", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.sample": [[36, 38], ["gym.spaces.np_random.uniform().astype", "gym.spaces.np_random.uniform"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "gym", ".", "spaces", ".", "np_random", ".", "uniform", "(", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", "+", "(", "0", "if", "self", ".", "dtype", ".", "kind", "==", "'f'", "else", "1", ")", ",", "size", "=", "self", ".", "low", ".", "shape", ")", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.contains": [[38, 40], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "shape", "==", "self", ".", "shape", "and", "(", "x", ">=", "self", ".", "low", ")", ".", "all", "(", ")", "and", "(", "x", "<=", "self", ".", "high", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.to_jsonable": [[41, 43], ["numpy.array().tolist", "numpy.array"], "methods", ["None"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "sample_n", ")", ".", "tolist", "(", ")", "\n", "", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.from_jsonable": [[43, 45], ["numpy.asarray"], "methods", ["None"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "[", "np", ".", "asarray", "(", "sample", ")", "for", "sample", "in", "sample_n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.__repr__": [[46, 48], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Box\"", "+", "str", "(", "self", ".", "shape", ")", "\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.box.Box.__eq__": [[48, 50], ["numpy.allclose", "numpy.allclose"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "np", ".", "allclose", "(", "self", ".", "low", ",", "other", ".", "low", ")", "and", "np", ".", "allclose", "(", "self", ".", "high", ",", "other", ".", "high", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.__init__": [[5, 12], ["numpy.asarray", "gym.Space.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nvec", ")", ":", "\n", "        ", "\"\"\"\n        nvec: vector of counts of each categorical variable\n        \"\"\"", "\n", "self", ".", "nvec", "=", "np", ".", "asarray", "(", "nvec", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "self", ".", "nvec", ".", "ndim", "==", "1", ",", "'nvec should be a 1d array (or list) of ints'", "\n", "gym", ".", "Space", ".", "__init__", "(", "self", ",", "(", "self", ".", "nvec", ".", "size", ",", ")", ",", "np", ".", "int8", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.sample": [[12, 14], ["gym.spaces.np_random.rand"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "(", "gym", ".", "spaces", ".", "np_random", ".", "rand", "(", "self", ".", "nvec", ".", "size", ")", "*", "self", ".", "nvec", ")", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.contains": [[14, 16], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "x", "<", "self", ".", "nvec", ")", ".", "all", "(", ")", "and", "x", ".", "dtype", ".", "kind", "in", "'ui'", "\n", "", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.to_jsonable": [[16, 18], ["sample.tolist"], "methods", ["None"], ["", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "[", "sample", ".", "tolist", "(", ")", "for", "sample", "in", "sample_n", "]", "\n", "", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.multi_discrete.MultiDiscrete.from_jsonable": [[18, 20], ["numpy.array"], "methods", ["None"], ["", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "sample_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed": [[5, 16], ["np_random.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["def", "seed", "(", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Seed the common numpy.random.RandomState used in spaces\n\n    CF\n    https://github.com/openai/gym/commit/58e6aa95e5af2c738557431f812abb81c505a7cf#commitcomment-17669277\n    for some details about why we seed the spaces separately from the\n    envs, but tl;dr is that it's pretty uncommon for them to be used\n    within an actual algorithm, and the code becomes simpler to just\n    use this common numpy.random.RandomState.\n    \"\"\"", "\n", "np_random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.__init__": [[11, 14], ["gym.Space.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["prob_n", "=", "np", ".", "asarray", "(", "prob_n", ")", "\n", "csprob_n", "=", "np", ".", "cumsum", "(", "prob_n", ")", "\n", "return", "(", "csprob_n", ">", "np_random", ".", "rand", "(", ")", ")", ".", "argmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.sample": [[14, 16], ["gym.spaces.np_random.randint"], "methods", ["None"], ["\n", "\n", "", "class", "DiscreteEnv", "(", "Env", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.contains": [[16, 24], ["isinstance", "isinstance", "int"], "methods", ["None"], ["", "class", "DiscreteEnv", "(", "Env", ")", ":", "\n", "\n", "    "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.__repr__": [[24, 26], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.discrete.Discrete.__eq__": [[26, 28], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.statistics.stats.__init__": [[13, 57], ["set", "tensorflow.summary.merge", "key.split", "tensorflow.variable_scope", "len", "set.add", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.summary.histogram", "statistics.stats.histogram_summaries_ph.append", "statistics.stats.histogram_summaries.append", "k.startswith", "tensorflow.placeholder", "tensorflow.summary.scalar", "statistics.stats.scalar_summaries_ph.append", "statistics.stats.scalar_summaries.append", "tensorflow.placeholder", "tensorflow.summary.scalar", "statistics.stats.scalar_summaries_ph.append", "statistics.stats.scalar_summaries.append", "registered_keys.append", "k.split"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["    ", "def", "__init__", "(", "self", ",", "scalar_keys", "=", "[", "]", ",", "histogram_keys", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "scalar_keys", "=", "scalar_keys", "\n", "self", ".", "histogram_keys", "=", "histogram_keys", "\n", "self", ".", "scalar_summaries", "=", "[", "]", "\n", "self", ".", "scalar_summaries_ph", "=", "[", "]", "\n", "self", ".", "histogram_summaries_ph", "=", "[", "]", "\n", "self", ".", "histogram_summaries", "=", "[", "]", "\n", "\n", "self", ".", "summaries_map", "=", "{", "}", "\n", "scopes", "=", "set", "(", ")", "\n", "for", "key", "in", "scalar_keys", ":", "\n", "            ", "words", "=", "key", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "words", ")", ">", "1", ":", "\n", "                ", "scopes", ".", "add", "(", "words", "[", "0", "]", ")", "\n", "\n", "", "", "registered_keys", "=", "[", "]", "\n", "for", "scope", "in", "scopes", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "                ", "for", "k", "in", "scalar_keys", ":", "\n", "                    ", "if", "k", ".", "startswith", "(", "scope", ")", ":", "\n", "                        ", "name", "=", "'/'", ".", "join", "(", "k", ".", "split", "(", "'/'", ")", "[", "1", ":", "]", ")", "\n", "ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "None", ",", "name", "=", "name", ")", "\n", "sm", "=", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "ph", ")", "\n", "self", ".", "scalar_summaries_ph", ".", "append", "(", "ph", ")", "\n", "self", ".", "scalar_summaries", ".", "append", "(", "sm", ")", "\n", "registered_keys", ".", "append", "(", "k", ")", "\n", "self", ".", "summaries_map", "[", "k", "]", "=", "ph", "\n", "\n", "", "", "", "", "with", "tf", ".", "variable_scope", "(", "'summary'", ")", ":", "\n", "            ", "for", "k", "in", "scalar_keys", ":", "\n", "                ", "if", "k", "not", "in", "registered_keys", ":", "\n", "                    ", "ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "None", ",", "name", "=", "k", "+", "'.scalar.summary'", ")", "\n", "sm", "=", "tf", ".", "summary", ".", "scalar", "(", "k", ",", "ph", ")", "\n", "self", ".", "scalar_summaries_ph", ".", "append", "(", "ph", ")", "\n", "self", ".", "scalar_summaries", ".", "append", "(", "sm", ")", "\n", "self", ".", "summaries_map", "[", "k", "]", "=", "ph", "\n", "", "", "for", "k", "in", "histogram_keys", ":", "\n", "                ", "ph", "=", "tf", ".", "placeholder", "(", "'float32'", ",", "None", ",", "name", "=", "k", "+", "'.histogram.summary'", ")", "\n", "sm", "=", "tf", ".", "summary", ".", "histogram", "(", "k", ",", "ph", ")", "\n", "self", ".", "histogram_summaries_ph", ".", "append", "(", "ph", ")", "\n", "self", ".", "histogram_summaries", ".", "append", "(", "sm", ")", "\n", "self", ".", "summaries_map", "[", "k", "]", "=", "ph", "\n", "\n", "", "", "self", ".", "summaries", "=", "tf", ".", "summary", ".", "merge", "(", "self", ".", "scalar_summaries", "+", "self", ".", "histogram_summaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.statistics.stats.add_all_summary": [[58, 70], ["baselines.get_session", "zip", "baselines.get_session.run", "writer.add_summary", "numpy.sum", "feed_dict.update", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["", "def", "add_all_summary", "(", "self", ",", "writer", ",", "values", ",", "iter", ")", ":", "\n", "# Note that the order of the incoming ```values``` should be the same as the that of the", "\n", "#            ```scalar_keys``` given in ```__init__```", "\n", "        ", "if", "np", ".", "sum", "(", "np", ".", "isnan", "(", "values", ")", "+", "0", ")", "!=", "0", ":", "\n", "            ", "return", "\n", "", "sess", "=", "U", ".", "get_session", "(", ")", "\n", "keys", "=", "self", ".", "scalar_summaries_ph", "+", "self", ".", "histogram_summaries_ph", "\n", "feed_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "summaries_str", "=", "sess", ".", "run", "(", "self", ".", "summaries", ",", "feed_dict", ")", "\n", "writer", ".", "add_summary", "(", "summaries_str", ",", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.statistics.stats.add_all_summary_dict": [[71, 85], ["baselines.get_session", "statistics.stats.summaries_map.keys", "baselines.get_session.run", "writer.add_summary", "feed_dict.update", "numpy.sum", "print", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "add_all_summary_dict", "(", "self", ",", "writer", ",", "value_dict", ",", "iter", ")", ":", "\n", "# Note that the order of the incoming ```values``` should be the same as the that of the", "\n", "#            ```scalar_keys``` given in ```__init__```", "\n", "        ", "sess", "=", "U", ".", "get_session", "(", ")", "\n", "feed_dict", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "summaries_map", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "value_dict", ":", "\n", "                ", "value_dict", "[", "k", "]", "=", "0", "\n", "", "elif", "np", ".", "sum", "(", "np", ".", "isnan", "(", "value_dict", "[", "k", "]", ")", "+", "0", ")", "!=", "0", ":", "\n", "                ", "print", "(", "'[!] NaN for the summary value of {}'", ".", "format", "(", "k", ")", ")", "\n", "value_dict", "[", "k", "]", "=", "1e30", "\n", "", "feed_dict", ".", "update", "(", "{", "self", ".", "summaries_map", "[", "k", "]", ":", "value_dict", "[", "k", "]", "}", ")", "\n", "", "summaries_str", "=", "sess", ".", "run", "(", "self", ".", "summaries", ",", "feed_dict", ")", "\n", "writer", ".", "add_summary", "(", "summaries_str", ",", "iter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.rolling_window": [[19, 23], ["numpy.lib.stride_tricks.as_strided"], "function", ["None"], ["def", "rolling_window", "(", "a", ",", "window", ")", ":", "\n", "    ", "shape", "=", "a", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "a", ".", "shape", "[", "-", "1", "]", "-", "window", "+", "1", ",", "window", ")", "\n", "strides", "=", "a", ".", "strides", "+", "(", "a", ".", "strides", "[", "-", "1", "]", ",", ")", "\n", "return", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "a", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.window_func": [[24, 28], ["results_plotter.rolling_window", "numpy.np.mean"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.rolling_window", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "def", "window_func", "(", "x", ",", "y", ",", "window", ",", "func", ")", ":", "\n", "    ", "yw", "=", "rolling_window", "(", "y", ",", "window", ")", "\n", "yw_func", "=", "func", "(", "yw", ",", "axis", "=", "-", "1", ")", "\n", "return", "x", "[", "window", "-", "1", ":", "]", ",", "yw_func", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.ts2xy": [[29, 42], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["", "def", "ts2xy", "(", "ts", ",", "xaxis", ")", ":", "\n", "    ", "if", "xaxis", "==", "X_TIMESTEPS", ":", "\n", "        ", "x", "=", "np", ".", "cumsum", "(", "ts", ".", "l", ".", "values", ")", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "elif", "xaxis", "==", "X_EPISODES", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "ts", ")", ")", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "elif", "xaxis", "==", "X_WALLTIME", ":", "\n", "        ", "x", "=", "ts", ".", "t", ".", "values", "/", "3600.", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.plot_curves": [[43, 57], ["matplotlib.figure", "max", "enumerate", "matplotlib.xlim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.scatter", "results_plotter.window_func", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.window_func"], ["", "def", "plot_curves", "(", "xy_list", ",", "xaxis", ",", "title", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "2", ")", ")", "\n", "maxx", "=", "max", "(", "xy", "[", "0", "]", "[", "-", "1", "]", "for", "xy", "in", "xy_list", ")", "\n", "minx", "=", "0", "\n", "for", "(", "i", ",", "(", "x", ",", "y", ")", ")", "in", "enumerate", "(", "xy_list", ")", ":", "\n", "        ", "color", "=", "COLORS", "[", "i", "]", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "s", "=", "2", ")", "\n", "x", ",", "y_mean", "=", "window_func", "(", "x", ",", "y", ",", "EPISODES_WINDOW", ",", "np", ".", "mean", ")", "#So returns average of last EPISODE_WINDOW episodes", "\n", "plt", ".", "plot", "(", "x", ",", "y_mean", ",", "color", "=", "color", ")", "\n", "", "plt", ".", "xlim", "(", "minx", ",", "maxx", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "xaxis", ")", "\n", "plt", ".", "ylabel", "(", "\"Episode Rewards\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.plot_results": [[58, 66], ["results_plotter.plot_curves", "baselines.bench.monitor.load_results", "tslist.append", "results_plotter.ts2xy", "baselines.bench.monitor.load_results.l.cumsum"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.plot_curves", "home.repos.pwc.inspect_result.shashacks_irl_transition.wrappers.monitor.load_results", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.ts2xy"], ["", "def", "plot_results", "(", "dirs", ",", "num_timesteps", ",", "xaxis", ",", "task_name", ")", ":", "\n", "    ", "tslist", "=", "[", "]", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "ts", "=", "load_results", "(", "dir", ")", "\n", "ts", "=", "ts", "[", "ts", ".", "l", ".", "cumsum", "(", ")", "<=", "num_timesteps", "]", "\n", "tslist", ".", "append", "(", "ts", ")", "\n", "", "xy_list", "=", "[", "ts2xy", "(", "ts", ",", "xaxis", ")", "for", "ts", "in", "tslist", "]", "\n", "plot_curves", "(", "xy_list", ",", "xaxis", ",", "task_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.main": [[73, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "results_plotter.plot_results", "matplotlib.show", "os.path.abspath", "int"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.results_plotter.plot_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "import", "argparse", "\n", "import", "os", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--dirs'", ",", "help", "=", "'List of log directories'", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "'./log'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num_timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "10e6", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--xaxis'", ",", "help", "=", "'Varible on X-axis'", ",", "default", "=", "X_TIMESTEPS", ")", "\n", "parser", ".", "add_argument", "(", "'--task_name'", ",", "help", "=", "'Title of plot'", ",", "default", "=", "'Breakout'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "dirs", "=", "[", "os", ".", "path", ".", "abspath", "(", "dir", ")", "for", "dir", "in", "args", ".", "dirs", "]", "\n", "plot_results", "(", "args", ".", "dirs", ",", "args", ".", "num_timesteps", ",", "args", ".", "xaxis", ",", "args", ".", "task_name", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.KVWriter.writekvs": [[22, 24], ["None"], "methods", ["None"], ["", "", "def", "info", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "INFO", ":", "\n", "        ", "print", "(", "'%s: %s'", "%", "(", "'INFO'", ",", "msg", "%", "args", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.SeqWriter.writeseq": [[26, 28], ["None"], "methods", ["None"], ["", "", "def", "warn", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "WARN", ":", "\n", "        ", "print", "(", "colorize", "(", "'%s: %s'", "%", "(", "'WARN'", ",", "msg", "%", "args", ")", ",", "'yellow'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat.__init__": [[30, 38], ["isinstance", "open", "hasattr"], "methods", ["None"], ["", "", "def", "error", "(", "msg", ",", "*", "args", ")", ":", "\n", "    ", "if", "MIN_LEVEL", "<=", "ERROR", ":", "\n", "        ", "print", "(", "colorize", "(", "'%s: %s'", "%", "(", "'ERROR'", ",", "msg", "%", "args", ")", ",", "'red'", ")", ")", "\n", "\n", "# DEPRECATED:", "\n", "", "", "setLevel", "=", "set_level", "\n", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat.writekvs": [[39, 72], ["sorted", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "isinstance", "logger.HumanOutputFormat._truncate", "len", "print", "max", "max", "key2str.items", "lines.append", "str", "map", "map", "logger.HumanOutputFormat._truncate", "key2str.keys", "key2str.values", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat._truncate"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat._truncate": [[73, 75], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat.writeseq": [[76, 81], ["logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat.close": [[82, 85], ["logger.HumanOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.JSONOutputFormat.__init__": [[87, 89], ["open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.JSONOutputFormat.writekvs": [[90, 97], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "v.tolist.tolist.tolist", "float", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.JSONOutputFormat.close": [[98, 100], ["logger.JSONOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.CSVOutputFormat.__init__": [[102, 106], ["open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.CSVOutputFormat.writekvs": [[107, 132], ["enumerate", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.flush", "kvs.keys", "logger.CSVOutputFormat.keys.extend", "logger.CSVOutputFormat.file.seek", "logger.CSVOutputFormat.file.readlines", "logger.CSVOutputFormat.file.seek", "enumerate", "logger.CSVOutputFormat.file.write", "kvs.get", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "str", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.flush", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.CSVOutputFormat.close": [[133, 135], ["logger.CSVOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.TensorBoardOutputFormat.__init__": [[141, 155], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.TensorBoardOutputFormat.writekvs": [[156, 166], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.TensorBoardOutputFormat.close": [[167, 171], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.__init__": [[267, 272], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.logkv": [[275, 277], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.dumpkvs": [[278, 284], ["logger.Logger.name2val.clear", "isinstance", "fmt.writekvs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.TensorBoardOutputFormat.writekvs"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.log": [[285, 288], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger._do_log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.set_level": [[291, 293], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.get_dir": [[294, 296], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger.close": [[297, 300], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.Logger._do_log": [[303, 307], ["isinstance", "fmt.writeseq", "map"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.HumanOutputFormat.writeseq"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__init__": [[334, 338], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__": [[338, 341], ["logger.configure"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.configure"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__exit__": [[341, 344], ["Logger.CURRENT.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.make_output_format": [[172, 191], ["os.makedirs", "os.makedirs", "mpi4py.MPI.COMM_WORLD.Get_rank", "logger.HumanOutputFormat", "logger.HumanOutputFormat", "os.join", "logger.JSONOutputFormat", "os.join", "logger.CSVOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv": [[196, 202], ["Logger.CURRENT.logkv"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkvs": [[203, 209], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.dumpkvs": [[210, 218], ["Logger.CURRENT.dumpkvs"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.dumpkvs"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.getkvs": [[219, 221], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log": [[223, 228], ["Logger.CURRENT.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug": [[229, 231], ["logger.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info": [[232, 234], ["logger.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.warn": [[235, 237], ["logger.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.error": [[238, 240], ["logger.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.set_level": [[242, 247], ["Logger.CURRENT.set_level"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.set_level"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.get_dir": [[248, 254], ["Logger.CURRENT.get_dir"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.get_dir"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.configure": [[310, 326], ["isinstance", "os.makedirs", "os.makedirs", "logger.Logger", "logger.log", "os.getenv", "os.getenv", "os.join", "os.getenv", "os.getenv", "logger.make_output_format", "tempfile.gettempdir", "datetime.datetime.now().strftime", "os.getenv.split", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.make_output_format"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.reset": [[327, 332], ["Logger.CURRENT.close", "logger.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger._demo": [[347, 369], ["logger.info", "logger.debug", "logger.set_level", "logger.debug", "os.path.exists", "os.path.exists", "logger.configure", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.dumpkvs", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.set_level", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.debug", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.configure", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.logkv", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.dumpkvs"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.read_json": [[375, 382], ["pandas.DataFrame", "open", "ds.append", "json.loads"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.read_csv": [[383, 386], ["pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.read_csv"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.read_tb": [[387, 420], ["os.isdir", "defaultdict", "np.empty", "sorted", "enumerate", "pandas.DataFrame", "glob", "os.basename().startswith", "tf.train.summary_iterator", "defaultdict.keys", "os.join", "NotImplementedError", "len", "os.basename", "max", "tag2pairs[].append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.discount": [[5, 24], ["scipy.signal.lfilter"], "function", ["None"], ["def", "discount", "(", "x", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    computes discounted sums along 0th dimension of x.\n\n    inputs\n    ------\n    x: ndarray\n    gamma: float\n\n    outputs\n    -------\n    y: ndarray with same shape as x, satisfying\n\n        y[t] = x[t] + gamma*x[t+1] + gamma^2*x[t+2] + ... + gamma^k x[t+k],\n                where k = len(x) - t - 1\n\n    \"\"\"", "\n", "assert", "x", ".", "ndim", ">=", "1", "\n", "return", "scipy", ".", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "gamma", "]", ",", "x", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.explained_variance": [[25, 39], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var"], ["", "def", "explained_variance", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Computes fraction of variance that ypred explains about y.\n    Returns 1 - Var[y-ypred] / Var[y]\n\n    interpretation:\n        ev=0  =>  might as well have predicted zero\n        ev=1  =>  perfect prediction\n        ev<0  =>  worse than just predicting zero\n\n    \"\"\"", "\n", "assert", "y", ".", "ndim", "==", "1", "and", "ypred", ".", "ndim", "==", "1", "\n", "vary", "=", "np", ".", "var", "(", "y", ")", "\n", "return", "np", ".", "nan", "if", "vary", "==", "0", "else", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.explained_variance_2d": [[40, 46], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var"], ["", "def", "explained_variance_2d", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "assert", "y", ".", "ndim", "==", "2", "and", "ypred", ".", "ndim", "==", "2", "\n", "vary", "=", "np", ".", "var", "(", "y", ",", "axis", "=", "0", ")", "\n", "out", "=", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "out", "[", "vary", "<", "1e-10", "]", "=", "0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.ncc": [[47, 49], ["numpy.corrcoef"], "function", ["None"], ["", "def", "ncc", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "corrcoef", "(", "ypred", ",", "y", ")", "[", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.flatten_arrays": [[50, 52], ["numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "flatten_arrays", "(", "arrs", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "arr", ".", "flat", "for", "arr", "in", "arrs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.unflatten_vector": [[53, 62], ["numpy.prod", "vec[].reshape", "arrs.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "unflatten_vector", "(", "vec", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "arrs", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "shape", ")", "\n", "arr", "=", "vec", "[", "i", ":", "i", "+", "size", "]", ".", "reshape", "(", "shape", ")", "\n", "arrs", ".", "append", "(", "arr", ")", "\n", "i", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.discount_with_boundaries": [[63, 74], ["numpy.zeros_like", "range"], "function", ["None"], ["", "def", "discount_with_boundaries", "(", "X", ",", "New", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    X: 2d array of floats, time x features\n    New: 2d array of bools, indicating when a new episode has started\n    \"\"\"", "\n", "Y", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "T", "=", "X", ".", "shape", "[", "0", "]", "\n", "Y", "[", "T", "-", "1", "]", "=", "X", "[", "T", "-", "1", "]", "\n", "for", "t", "in", "range", "(", "T", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "Y", "[", "t", "]", "=", "X", "[", "t", "]", "+", "gamma", "*", "Y", "[", "t", "+", "1", "]", "*", "(", "1", "-", "New", "[", "t", "+", "1", "]", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.test_discount_with_boundaries": [[75, 85], ["numpy.array", "math_util.discount_with_boundaries", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.math_util.discount_with_boundaries"], ["", "def", "test_discount_with_boundaries", "(", ")", ":", "\n", "    ", "gamma", "=", "0.9", "\n", "x", "=", "np", ".", "array", "(", "[", "1.0", ",", "2.0", ",", "3.0", ",", "4.0", "]", ",", "'float32'", ")", "\n", "starts", "=", "[", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "y", "=", "discount_with_boundaries", "(", "x", ",", "starts", ",", "gamma", ")", "\n", "assert", "np", ".", "allclose", "(", "y", ",", "[", "\n", "1", "+", "gamma", "*", "2", "+", "gamma", "**", "2", "*", "3", ",", "\n", "2", "+", "gamma", "*", "3", ",", "\n", "3", ",", "\n", "4", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_moments.mpi_moments": [[5, 25], ["numpy.asarray", "list", "list.pop", "numpy.prod", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "numpy.empty", "numpy.empty", "numpy.sqrt", "np.asarray.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "numpy.maximum", "np.asarray.sum", "numpy.square().sum", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["def", "mpi_moments", "(", "x", ",", "axis", "=", "0", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "'float64'", ")", "\n", "newshape", "=", "list", "(", "x", ".", "shape", ")", "\n", "newshape", ".", "pop", "(", "axis", ")", "\n", "n", "=", "np", ".", "prod", "(", "newshape", ",", "dtype", "=", "int", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "x", ".", "sum", "(", "axis", "=", "axis", ")", ".", "ravel", "(", ")", ",", "\n", "np", ".", "square", "(", "x", ")", ".", "sum", "(", "axis", "=", "axis", ")", ".", "ravel", "(", ")", ",", "\n", "np", ".", "array", "(", "[", "x", ".", "shape", "[", "axis", "]", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "sum", "=", "totalvec", "[", ":", "n", "]", "\n", "sumsq", "=", "totalvec", "[", "n", ":", "2", "*", "n", "]", "\n", "count", "=", "totalvec", "[", "2", "*", "n", "]", "\n", "if", "count", "==", "0", ":", "\n", "        ", "mean", "=", "np", ".", "empty", "(", "newshape", ")", ";", "mean", "[", ":", "]", "=", "np", ".", "nan", "\n", "std", "=", "np", ".", "empty", "(", "newshape", ")", ";", "std", "[", ":", "]", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "        ", "mean", "=", "sum", "/", "count", "\n", "std", "=", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "sumsq", "/", "count", "-", "np", ".", "square", "(", "mean", ")", ",", "0", ")", ")", "\n", "", "return", "mean", ",", "std", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_moments.test_runningmeanstd": [[27, 47], ["numpy.random.seed", "numpy.concatenate", "mpi_moments.mpi_moments", "baselines.common.zipsame", "np.concatenate.mean", "np.concatenate.std", "print", "numpy.allclose", "print", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "comm.Get_rank"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_moments.mpi_moments", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.zipsame", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "(", "triple", ",", "axis", ")", "in", "[", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ")", ",", "1", ")", ",", "\n", "]", ":", "\n", "\n", "\n", "        ", "x", "=", "np", ".", "concatenate", "(", "triple", ",", "axis", "=", "axis", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "axis", ")", ",", "x", ".", "std", "(", "axis", "=", "axis", ")", ",", "x", ".", "shape", "[", "axis", "]", "]", "\n", "\n", "\n", "ms2", "=", "mpi_moments", "(", "triple", "[", "comm", ".", "Get_rank", "(", ")", "]", ",", "axis", "=", "axis", ")", "\n", "\n", "for", "(", "a1", ",", "a2", ")", "in", "zipsame", "(", "ms1", ",", "ms2", ")", ":", "\n", "            ", "print", "(", "a1", ",", "a2", ")", "\n", "assert", "np", ".", "allclose", "(", "a1", ",", "a2", ")", "\n", "print", "(", "\"ok!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_fork.mpi_fork": [[3, 24], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["def", "mpi_fork", "(", "n", ",", "bind_to_core", "=", "False", ")", ":", "\n", "    ", "\"\"\"Re-launches the current script with workers\n    Returns \"parent\" for original parent, \"child\" for MPI children\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\"child\"", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "args", "=", "[", "\"mpirun\"", ",", "\"-np\"", ",", "str", "(", "n", ")", "]", "\n", "if", "bind_to_core", ":", "\n", "            ", "args", "+=", "[", "\"-bind-to\"", ",", "\"core\"", "]", "\n", "", "args", "+=", "[", "sys", ".", "executable", "]", "+", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "return", "\"parent\"", "\n", "", "else", ":", "\n", "        ", "return", "\"child\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.fmt_row": [[10, 14], ["console_util.fmt_item", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.fmt_item"], ["def", "fmt_row", "(", "width", ",", "row", ",", "header", "=", "False", ")", ":", "\n", "    ", "out", "=", "\" | \"", ".", "join", "(", "fmt_item", "(", "x", ",", "width", ")", "for", "x", "in", "row", ")", "\n", "if", "header", ":", "out", "=", "out", "+", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.fmt_item": [[15, 22], ["isinstance", "isinstance", "x.item.item", "str", "len"], "function", ["None"], ["", "def", "fmt_item", "(", "x", ",", "l", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "assert", "x", ".", "ndim", "==", "0", "\n", "x", "=", "x", ".", "item", "(", ")", "\n", "", "if", "isinstance", "(", "x", ",", "float", ")", ":", "rep", "=", "\"%g\"", "%", "x", "\n", "else", ":", "rep", "=", "str", "(", "x", ")", "\n", "return", "\" \"", "*", "(", "l", "-", "len", "(", "rep", ")", ")", "+", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize": [[35, 42], ["attr.append", "str", "attr.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "'1'", ")", "\n", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.timed": [[46, 55], ["print", "time.time", "print", "console_util.colorize", "console_util.colorize", "time.time"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.console_util.colorize", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["@", "contextmanager", "\n", "def", "timed", "(", "msg", ")", ":", "\n", "    ", "global", "MESSAGE_DEPTH", "#pylint: disable=W0603", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "'=: '", "+", "msg", ",", "color", "=", "'magenta'", ")", ")", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "MESSAGE_DEPTH", "+=", "1", "\n", "yield", "\n", "MESSAGE_DEPTH", "-=", "1", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "\"done in %.3f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", ",", "color", "=", "'magenta'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.__init__": [[49, 57], ["BlobService", "azure_utils.Container._service.create_container"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "account_name", ",", "account_key", ",", "container_name", ",", "maybe_create", "=", "False", ")", ":", "\n", "        ", "self", ".", "_account_name", "=", "account_name", "\n", "self", ".", "_container_name", "=", "container_name", "\n", "if", "account_name", "not", "in", "Container", ".", "services", ":", "\n", "            ", "Container", ".", "services", "[", "account_name", "]", "=", "BlobService", "(", "account_name", ",", "account_key", ")", "\n", "", "self", ".", "_service", "=", "Container", ".", "services", "[", "account_name", "]", "\n", "if", "maybe_create", ":", "\n", "            ", "self", ".", "_service", ".", "create_container", "(", "self", ".", "_container_name", ",", "fail_on_exist", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.put": [[58, 97], ["threading.Event", "azure_utils.Container._service.copy_blob", "tempfile.TemporaryDirectory", "os.path.join", "azure_utils.make_archive", "azure_utils.Container._service.put_block_blob_from_path", "threading.Event.wait", "callback", "threading.Event.set"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.make_archive", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.callback"], ["", "", "def", "put", "(", "self", ",", "source_path", ",", "blob_name", ",", "callback", "=", "None", ")", ":", "\n", "        ", "\"\"\"Upload a file or directory from `source_path` to azure blob `blob_name`.\n\n        Upload progress can be traced by an optional callback.\n        \"\"\"", "\n", "upload_done", "=", "Event", "(", ")", "\n", "\n", "def", "progress_callback", "(", "current", ",", "total", ")", ":", "\n", "            ", "if", "callback", ":", "\n", "                ", "callback", "(", "current", ",", "total", ")", "\n", "", "if", "current", ">=", "total", ":", "\n", "                ", "upload_done", ".", "set", "(", ")", "\n", "\n", "# Attempt to make backup if an existing version is already available", "\n", "", "", "try", ":", "\n", "            ", "x_ms_copy_source", "=", "\"https://{}.blob.core.windows.net/{}/{}\"", ".", "format", "(", "\n", "self", ".", "_account_name", ",", "\n", "self", ".", "_container_name", ",", "\n", "blob_name", "\n", ")", "\n", "self", ".", "_service", ".", "copy_blob", "(", "\n", "container_name", "=", "self", ".", "_container_name", ",", "\n", "blob_name", "=", "blob_name", "+", "\".backup\"", ",", "\n", "x_ms_copy_source", "=", "x_ms_copy_source", "\n", ")", "\n", "", "except", "AzureMissingResourceHttpError", ":", "\n", "            ", "pass", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "            ", "arcpath", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"archive.zip\"", ")", "\n", "make_archive", "(", "source_path", ",", "arcpath", ")", "\n", "self", ".", "_service", ".", "put_block_blob_from_path", "(", "\n", "container_name", "=", "self", ".", "_container_name", ",", "\n", "blob_name", "=", "blob_name", ",", "\n", "file_path", "=", "arcpath", ",", "\n", "max_connections", "=", "4", ",", "\n", "progress_callback", "=", "progress_callback", ",", "\n", "max_retries", "=", "10", ")", "\n", "upload_done", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.get": [[98, 140], ["threading.Event", "tempfile.TemporaryDirectory", "os.path.join", "callback", "threading.Event.set", "azure_utils.Container._service.get_blob_properties", "hasattr", "int", "azure_utils.Container._service.get_blob_to_path", "shutil.unpack_archive", "threading.Event.wait"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.callback"], ["", "", "def", "get", "(", "self", ",", "dest_path", ",", "blob_name", ",", "callback", "=", "None", ")", ":", "\n", "        ", "\"\"\"Download a file or directory to `dest_path` to azure blob `blob_name`.\n\n        Warning! If directory is downloaded the `dest_path` is the parent directory.\n\n        Upload progress can be traced by an optional callback.\n        \"\"\"", "\n", "download_done", "=", "Event", "(", ")", "\n", "\n", "def", "progress_callback", "(", "current", ",", "total", ")", ":", "\n", "            ", "if", "callback", ":", "\n", "                ", "callback", "(", "current", ",", "total", ")", "\n", "", "if", "current", ">=", "total", ":", "\n", "                ", "download_done", ".", "set", "(", ")", "\n", "\n", "", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "td", ":", "\n", "            ", "arcpath", "=", "os", ".", "path", ".", "join", "(", "td", ",", "\"archive.zip\"", ")", "\n", "for", "backup_blob_name", "in", "[", "blob_name", ",", "blob_name", "+", "'.backup'", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "properties", "=", "self", ".", "_service", ".", "get_blob_properties", "(", "\n", "blob_name", "=", "backup_blob_name", ",", "\n", "container_name", "=", "self", ".", "_container_name", "\n", ")", "\n", "if", "hasattr", "(", "properties", ",", "'properties'", ")", ":", "\n", "# Annoyingly, Azure has changed the API and this now returns a blob", "\n", "# instead of it's properties with up-to-date azure package.", "\n", "                        ", "blob_size", "=", "properties", ".", "properties", ".", "content_length", "\n", "", "else", ":", "\n", "                        ", "blob_size", "=", "properties", "[", "'content-length'", "]", "\n", "", "if", "int", "(", "blob_size", ")", ">", "0", ":", "\n", "                        ", "self", ".", "_service", ".", "get_blob_to_path", "(", "\n", "container_name", "=", "self", ".", "_container_name", ",", "\n", "blob_name", "=", "backup_blob_name", ",", "\n", "file_path", "=", "arcpath", ",", "\n", "max_connections", "=", "4", ",", "\n", "progress_callback", "=", "progress_callback", ")", "\n", "unpack_archive", "(", "arcpath", ",", "dest_path", ")", "\n", "download_done", ".", "wait", "(", ")", "\n", "return", "True", "\n", "", "", "except", "AzureMissingResourceHttpError", ":", "\n", "                    ", "pass", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list": [[141, 144], ["azure_utils.fixed_list_blobs"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.fixed_list_blobs"], ["", "def", "list", "(", "self", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "\"\"\"List all blobs in the container.\"\"\"", "\n", "return", "fixed_list_blobs", "(", "self", ".", "_service", ",", "self", ".", "_container_name", ",", "prefix", "=", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.exists": [[145, 155], ["azure_utils.Container._service.get_blob_properties"], "methods", ["None"], ["", "def", "exists", "(", "self", ",", "blob_name", ")", ":", "\n", "        ", "\"\"\"Returns true if `blob_name` exists in container.\"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "_service", ".", "get_blob_properties", "(", "\n", "blob_name", "=", "blob_name", ",", "\n", "container_name", "=", "self", ".", "_container_name", "\n", ")", "\n", "return", "True", "\n", "", "except", "AzureMissingResourceHttpError", ":", "\n", "            ", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.fixed_list_blobs": [[15, 29], ["service.list_blobs", "len", "res.append"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["def", "fixed_list_blobs", "(", "service", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"By defualt list_containers only returns a subset of results.\n\n    This function attempts to fix this.\n    \"\"\"", "\n", "res", "=", "[", "]", "\n", "next_marker", "=", "None", "\n", "while", "next_marker", "is", "None", "or", "len", "(", "next_marker", ")", ">", "0", ":", "\n", "        ", "kwargs", "[", "'marker'", "]", "=", "next_marker", "\n", "gen", "=", "service", ".", "list_blobs", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "b", "in", "gen", ":", "\n", "            ", "res", ".", "append", "(", "b", ".", "name", ")", "\n", "", "next_marker", "=", "gen", ".", "next_marker", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.make_archive": [[31, 44], ["source_path.rstrip.endswith", "os.path.dirname", "source_path.rstrip.rstrip", "zipfile.ZipFile", "os.path.isdir", "os.walk", "zf.write", "zf.write", "os.path.relpath", "os.path.relpath", "os.path.join", "zf.write", "os.path.relpath"], "function", ["None"], ["", "def", "make_archive", "(", "source_path", ",", "dest_path", ")", ":", "\n", "    ", "if", "source_path", ".", "endswith", "(", "os", ".", "path", ".", "sep", ")", ":", "\n", "        ", "source_path", "=", "source_path", ".", "rstrip", "(", "os", ".", "path", ".", "sep", ")", "\n", "", "prefix_path", "=", "os", ".", "path", ".", "dirname", "(", "source_path", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "dest_path", ",", "\"w\"", ",", "compression", "=", "zipfile", ".", "ZIP_STORED", ")", "as", "zf", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "source_path", ")", ":", "\n", "            ", "for", "dirname", ",", "_subdirs", ",", "files", "in", "os", ".", "walk", "(", "source_path", ")", ":", "\n", "                ", "zf", ".", "write", "(", "dirname", ",", "os", ".", "path", ".", "relpath", "(", "dirname", ",", "prefix_path", ")", ")", "\n", "for", "filename", "in", "files", ":", "\n", "                    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "filename", ")", "\n", "zf", ".", "write", "(", "filepath", ",", "os", ".", "path", ".", "relpath", "(", "filepath", ",", "prefix_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "zf", ".", "write", "(", "source_path", ",", "os", ".", "path", ".", "relpath", "(", "source_path", ",", "prefix_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.Schedule.value": [[13, 16], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"Value of the schedule at time t\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.ConstantSchedule.__init__": [[19, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Value remains constant over time.\n\n        Parameters\n        ----------\n        value: float\n            Constant value of the schedule\n        \"\"\"", "\n", "self", ".", "_v", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.ConstantSchedule.value": [[29, 32], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "return", "self", ".", "_v", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.PiecewiseSchedule.__init__": [[39, 63], ["sorted"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "endpoints", ",", "interpolation", "=", "linear_interpolation", ",", "outside_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Piecewise schedule.\n\n        endpoints: [(int, int)]\n            list of pairs `(time, value)` meanining that schedule should output\n            `value` when `t==time`. All the values for time must be sorted in\n            an increasing order. When t is between two times, e.g. `(time_a, value_a)`\n            and `(time_b, value_b)`, such that `time_a <= t < time_b` then value outputs\n            `interpolation(value_a, value_b, alpha)` where alpha is a fraction of\n            time passed between `time_a` and `time_b` for time `t`.\n        interpolation: lambda float, float, float: float\n            a function that takes value to the left and to the right of t according\n            to the `endpoints`. Alpha is the fraction of distance from left endpoint to\n            right endpoint that t has covered. See linear_interpolation for example.\n        outside_value: float\n            if the value is requested outside of all the intervals sepecified in\n            `endpoints` this value is returned. If None then AssertionError is\n            raised when outside value is requested.\n        \"\"\"", "\n", "idxes", "=", "[", "e", "[", "0", "]", "for", "e", "in", "endpoints", "]", "\n", "assert", "idxes", "==", "sorted", "(", "idxes", ")", "\n", "self", ".", "_interpolation", "=", "interpolation", "\n", "self", ".", "_outside_value", "=", "outside_value", "\n", "self", ".", "_endpoints", "=", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.PiecewiseSchedule.value": [[64, 74], ["zip", "schedules.PiecewiseSchedule._interpolation", "float"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "for", "(", "l_t", ",", "l", ")", ",", "(", "r_t", ",", "r", ")", "in", "zip", "(", "self", ".", "_endpoints", "[", ":", "-", "1", "]", ",", "self", ".", "_endpoints", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "l_t", "<=", "t", "and", "t", "<", "r_t", ":", "\n", "                ", "alpha", "=", "float", "(", "t", "-", "l_t", ")", "/", "(", "r_t", "-", "l_t", ")", "\n", "return", "self", ".", "_interpolation", "(", "l", ",", "r", ",", "alpha", ")", "\n", "\n", "# t does not belong to any of the pieces, so doom.", "\n", "", "", "assert", "self", ".", "_outside_value", "is", "not", "None", "\n", "return", "self", ".", "_outside_value", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.LinearSchedule.__init__": [[77, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "schedule_timesteps", ",", "final_p", ",", "initial_p", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Linear interpolation between initial_p and final_p over\n        schedule_timesteps. After this many timesteps pass final_p is\n        returned.\n\n        Parameters\n        ----------\n        schedule_timesteps: int\n            Number of timesteps for which to linearly anneal initial_p\n            to final_p\n        initial_p: float\n            initial output value\n        final_p: float\n            final output value\n        \"\"\"", "\n", "self", ".", "schedule_timesteps", "=", "schedule_timesteps", "\n", "self", ".", "final_p", "=", "final_p", "\n", "self", ".", "initial_p", "=", "initial_p", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.LinearSchedule.value": [[96, 100], ["min", "float"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "fraction", "=", "min", "(", "float", "(", "t", ")", "/", "self", ".", "schedule_timesteps", ",", "1.0", ")", "\n", "return", "self", ".", "initial_p", "+", "fraction", "*", "(", "self", ".", "final_p", "-", "self", ".", "initial_p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.schedules.linear_interpolation": [[34, 36], ["None"], "function", ["None"], ["", "", "def", "linear_interpolation", "(", "l", ",", "r", ",", "alpha", ")", ":", "\n", "    ", "return", "l", "+", "alpha", "*", "(", "r", "-", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.EzPickle.__init__": [[57, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_ezpickle_args", "=", "args", "\n", "self", ".", "_ezpickle_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.EzPickle.__getstate__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"_ezpickle_args\"", ":", "self", ".", "_ezpickle_args", ",", "\"_ezpickle_kwargs\"", ":", "self", ".", "_ezpickle_kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.EzPickle.__setstate__": [[64, 67], ["misc_util.EzPickle.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"_ezpickle_args\"", "]", ",", "**", "d", "[", "\"_ezpickle_kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.RunningAvg.__init__": [[123, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "init_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Keep a running estimate of a quantity. This is a bit like mean\n        but more sensitive to recent changes.\n\n        Parameters\n        ----------\n        gamma: float\n            Must be between 0 and 1, where 0 is the most sensitive to recent\n            changes.\n        init_value: float or None\n            Initial value of the estimate. If None, it will be set on the first update.\n        \"\"\"", "\n", "self", ".", "_value", "=", "init_value", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.RunningAvg.update": [[138, 150], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "new_val", ")", ":", "\n", "        ", "\"\"\"Update the estimate.\n\n        Parameters\n        ----------\n        new_val: float\n            new observated value of estimated quantity.\n        \"\"\"", "\n", "if", "self", ".", "_value", "is", "None", ":", "\n", "            ", "self", ".", "_value", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "self", ".", "_value", "=", "self", ".", "_gamma", "*", "self", ".", "_value", "+", "(", "1.0", "-", "self", ".", "_gamma", ")", "*", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.RunningAvg.__float__": [[151, 154], ["None"], "methods", ["None"], ["", "", "def", "__float__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current estimate\"\"\"", "\n", "return", "self", ".", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.zipsame": [[10, 14], ["len", "all", "zip", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["def", "zipsame", "(", "*", "seqs", ")", ":", "\n", "    ", "L", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "assert", "all", "(", "len", "(", "seq", ")", "==", "L", "for", "seq", "in", "seqs", "[", "1", ":", "]", ")", "\n", "return", "zip", "(", "*", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.unpack": [[16, 35], ["list", "iter", "sum", "len", "range", "iter.__next__", "li.append", "iter.__next__"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "unpack", "(", "seq", ",", "sizes", ")", ":", "\n", "    ", "\"\"\"\n    Unpack 'seq' into a sequence of lists, with lengths specified by 'sizes'.\n    None = just one bare element, not a list\n\n    Example:\n    unpack([1,2,3,4,5,6], [3,None,2]) -> ([1,2,3], 4, [5,6])\n    \"\"\"", "\n", "seq", "=", "list", "(", "seq", ")", "\n", "it", "=", "iter", "(", "seq", ")", "\n", "assert", "sum", "(", "1", "if", "s", "is", "None", "else", "s", "for", "s", "in", "sizes", ")", "==", "len", "(", "seq", ")", ",", "\"Trying to unpack %s into %s\"", "%", "(", "seq", ",", "sizes", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "        ", "if", "size", "is", "None", ":", "\n", "            ", "yield", "it", ".", "__next__", "(", ")", "\n", "", "else", ":", "\n", "            ", "li", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "size", ")", ":", "\n", "                ", "li", ".", "append", "(", "it", ".", "__next__", "(", ")", ")", "\n", "", "yield", "li", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds": [[69, 78], ["numpy.random.seed", "random.seed", "tf.set_random_seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "", "def", "set_global_seeds", "(", "i", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "i", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "random", ".", "seed", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.pretty_eta": [[80, 120], ["misc_util.pretty_eta.helper"], "function", ["None"], ["", "def", "pretty_eta", "(", "seconds_left", ")", ":", "\n", "    ", "\"\"\"Print the number of seconds in human readable format.\n\n    Examples:\n    2 days\n    2 hours and 37 minutes\n    less than a minute\n\n    Paramters\n    ---------\n    seconds_left: int\n        Number of seconds to be converted to the ETA\n    Returns\n    -------\n    eta: str\n        String representing the pretty ETA.\n    \"\"\"", "\n", "minutes_left", "=", "seconds_left", "//", "60", "\n", "seconds_left", "%=", "60", "\n", "hours_left", "=", "minutes_left", "//", "60", "\n", "minutes_left", "%=", "60", "\n", "days_left", "=", "hours_left", "//", "24", "\n", "hours_left", "%=", "24", "\n", "\n", "def", "helper", "(", "cnt", ",", "name", ")", ":", "\n", "        ", "return", "\"{} {}{}\"", ".", "format", "(", "str", "(", "cnt", ")", ",", "name", ",", "(", "'s'", "if", "cnt", ">", "1", "else", "''", ")", ")", "\n", "\n", "", "if", "days_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "days_left", ",", "'day'", ")", "\n", "if", "hours_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "", "return", "msg", "\n", "", "if", "hours_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "if", "minutes_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "msg", "\n", "", "if", "minutes_left", ">", "0", ":", "\n", "        ", "return", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "'less than a minute'", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.boolean_flag": [[155, 172], ["name.replace", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "", "def", "boolean_flag", "(", "parser", ",", "name", ",", "default", "=", "False", ",", "help", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add a boolean flag to argparse parser.\n\n    Parameters\n    ----------\n    parser: argparse.Parser\n        parser to add the flag to\n    name: str\n        --<name> will enable the flag, while --no-<name> will disable it\n    default: bool or None\n        default value of the flag\n    help: str\n        help string for the flag\n    \"\"\"", "\n", "dest", "=", "name", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "parser", ".", "add_argument", "(", "\"--\"", "+", "name", ",", "action", "=", "\"store_true\"", ",", "default", "=", "default", ",", "dest", "=", "dest", ",", "help", "=", "help", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-\"", "+", "name", ",", "action", "=", "\"store_false\"", ",", "dest", "=", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.get_wrapper_by_name": [[174, 198], ["currentenv.class_name", "isinstance", "ValueError"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.gym.core.Wrapper.class_name"], ["", "def", "get_wrapper_by_name", "(", "env", ",", "classname", ")", ":", "\n", "    ", "\"\"\"Given an a gym environment possibly wrapped multiple times, returns a wrapper\n    of class named classname or raises ValueError if no such wrapper was applied\n\n    Parameters\n    ----------\n    env: gym.Env of gym.Wrapper\n        gym environment\n    classname: str\n        name of the wrapper\n\n    Returns\n    -------\n    wrapper: gym.Wrapper\n        wrapper named classname\n    \"\"\"", "\n", "currentenv", "=", "env", "\n", "while", "True", ":", "\n", "        ", "if", "classname", "==", "currentenv", ".", "class_name", "(", ")", ":", "\n", "            ", "return", "currentenv", "\n", "", "elif", "isinstance", "(", "currentenv", ",", "gym", ".", "Wrapper", ")", ":", "\n", "            ", "currentenv", "=", "currentenv", ".", "env", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Couldn't find wrapper named %s\"", "%", "classname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.relatively_safe_pickle_dump": [[200, 233], ["os.rename", "tempfile.NamedTemporaryFile", "pickle.dump", "open", "pickle.dump", "zipfile.ZipFile", "myzip.write"], "function", ["None"], ["", "", "", "def", "relatively_safe_pickle_dump", "(", "obj", ",", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"This is just like regular pickle dump, except from the fact that failure cases are\n    different:\n\n        - It's never possible that we end up with a pickle in corrupted state.\n        - If a there was a different file at the path, that file will remain unchanged in the\n          even of failure (provided that filesystem rename is atomic).\n        - it is sometimes possible that we end up with useless temp file which needs to be\n          deleted manually (it will be removed automatically on the next function call)\n\n    The indended use case is periodic checkpoints of experiment state, such that we never\n    corrupt previous checkpoints if the current one fails.\n\n    Parameters\n    ----------\n    obj: object\n        object to pickle\n    path: str\n        path to the output file\n    compression: bool\n        if true pickle will be compressed\n    \"\"\"", "\n", "temp_storage", "=", "path", "+", "\".relatively_safe\"", "\n", "if", "compression", ":", "\n", "# Using gzip here would be simpler, but the size is limited to 2GB", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "uncompressed_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "uncompressed_file", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "temp_storage", ",", "\"w\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "                ", "myzip", ".", "write", "(", "uncompressed_file", ".", "name", ",", "\"data\"", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "temp_storage", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "", "", "os", ".", "rename", "(", "temp_storage", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.pickle_load": [[235, 258], ["zipfile.ZipFile", "open", "pickle.load", "myzip.open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load"], ["", "def", "pickle_load", "(", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"Unpickle a possible compressed pickle.\n\n    Parameters\n    ----------\n    path: str\n        path to the output file\n    compression: bool\n        if true assumes that pickle was compressed when created and attempts decompression.\n\n    Returns\n    -------\n    obj: object\n        the unpickled object\n    \"\"\"", "\n", "\n", "if", "compression", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "path", ",", "\"r\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "            ", "with", "myzip", ".", "open", "(", "\"data\"", ")", "as", "f", ":", "\n", "                ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.running_mean_std.RunningMeanStd.__init__": [[4, 8], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.running_mean_std.RunningMeanStd.update": [[10, 29], ["numpy.mean", "numpy.var", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "(", "self", ".", "count", ")", "\n", "m_b", "=", "batch_var", "*", "(", "batch_count", ")", "\n", "M2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "M2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree.__init__": [[5, 36], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "operation", ",", "neutral_element", ")", ":", "\n", "        ", "\"\"\"Build a Segment Tree data structure.\n\n        https://en.wikipedia.org/wiki/Segment_tree\n\n        Can be used as regular array, but with two\n        important differences:\n\n            a) setting item's value is slightly slower.\n               It is O(lg capacity) instead of O(1).\n            b) user has access to an efficient `reduce`\n               operation which reduces `operation` over\n               a contiguous subsequence of items in the\n               array.\n\n        Paramters\n        ---------\n        capacity: int\n            Total size of the array - must be a power of two.\n        operation: lambda obj, obj -> obj\n            and operation for combining elements (eg. sum, max)\n            must for a mathematical group together with the set of\n            possible values for array elements.\n        neutral_element: obj\n            neutral element for the operation above. eg. float('-inf')\n            for max and 0 for sum.\n        \"\"\"", "\n", "assert", "capacity", ">", "0", "and", "capacity", "&", "(", "capacity", "-", "1", ")", "==", "0", ",", "\"capacity must be positive and a power of 2.\"", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_value", "=", "[", "neutral_element", "for", "_", "in", "range", "(", "2", "*", "capacity", ")", "]", "\n", "self", ".", "_operation", "=", "operation", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree._reduce_helper": [[37, 50], ["segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._operation", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree._reduce_helper"], ["", "def", "_reduce_helper", "(", "self", ",", "start", ",", "end", ",", "node", ",", "node_start", ",", "node_end", ")", ":", "\n", "        ", "if", "start", "==", "node_start", "and", "end", "==", "node_end", ":", "\n", "            ", "return", "self", ".", "_value", "[", "node", "]", "\n", "", "mid", "=", "(", "node_start", "+", "node_end", ")", "//", "2", "\n", "if", "end", "<=", "mid", ":", "\n", "            ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", "\n", "", "else", ":", "\n", "            ", "if", "mid", "+", "1", "<=", "start", ":", "\n", "                ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_operation", "(", "\n", "self", ".", "_reduce_helper", "(", "start", ",", "mid", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", ",", "\n", "self", ".", "_reduce_helper", "(", "mid", "+", "1", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree.reduce": [[52, 76], ["segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree._reduce_helper"], ["", "", "", "def", "reduce", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns result of applying `self.operation`\n        to a contiguous subsequence of the array.\n\n            self.operation(arr[start], operation(arr[start+1], operation(... arr[end])))\n\n        Parameters\n        ----------\n        start: int\n            beginning of the subsequence\n        end: int\n            end of the subsequences\n\n        Returns\n        -------\n        reduced: obj\n            result of reducing self.operation over the specified range of array elements.\n        \"\"\"", "\n", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "self", ".", "_capacity", "\n", "", "if", "end", "<", "0", ":", "\n", "            ", "end", "+=", "self", ".", "_capacity", "\n", "", "end", "-=", "1", "\n", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "1", ",", "0", ",", "self", ".", "_capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree.__setitem__": [[77, 88], ["segment_tree.SegmentTree._operation"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "# index of the leaf", "\n", "        ", "idx", "+=", "self", ".", "_capacity", "\n", "self", ".", "_value", "[", "idx", "]", "=", "val", "\n", "idx", "//=", "2", "\n", "while", "idx", ">=", "1", ":", "\n", "            ", "self", ".", "_value", "[", "idx", "]", "=", "self", ".", "_operation", "(", "\n", "self", ".", "_value", "[", "2", "*", "idx", "]", ",", "\n", "self", ".", "_value", "[", "2", "*", "idx", "+", "1", "]", "\n", ")", "\n", "idx", "//=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree.__getitem__": [[89, 92], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "self", ".", "_capacity", "\n", "return", "self", ".", "_value", "[", "self", ".", "_capacity", "+", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.__init__": [[95, 100], ["segment_tree.SegmentTree.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "operator", ".", "add", ",", "\n", "neutral_element", "=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.sum": [[102, 105], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree.reduce"], ["", "def", "sum", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns arr[start] + ... + arr[end]\"\"\"", "\n", "return", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SumSegmentTree.find_prefixsum_idx": [[106, 133], ["segment_tree.SumSegmentTree.sum"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "find_prefixsum_idx", "(", "self", ",", "prefixsum", ")", ":", "\n", "        ", "\"\"\"Find the highest index `i` in the array such that\n            sum(arr[0] + arr[1] + ... + arr[i - i]) <= prefixsum\n\n        if array values are probabilities, this function\n        allows to sample indexes according to the discrete\n        probability efficiently.\n\n        Parameters\n        ----------\n        perfixsum: float\n            upperbound on the sum of array prefix\n\n        Returns\n        -------\n        idx: int\n            highest index satisfying the prefixsum constraint\n        \"\"\"", "\n", "assert", "0", "<=", "prefixsum", "<=", "self", ".", "sum", "(", ")", "+", "1e-5", "\n", "idx", "=", "1", "\n", "while", "idx", "<", "self", ".", "_capacity", ":", "# while non-leaf", "\n", "            ", "if", "self", ".", "_value", "[", "2", "*", "idx", "]", ">", "prefixsum", ":", "\n", "                ", "idx", "=", "2", "*", "idx", "\n", "", "else", ":", "\n", "                ", "prefixsum", "-=", "self", ".", "_value", "[", "2", "*", "idx", "]", "\n", "idx", "=", "2", "*", "idx", "+", "1", "\n", "", "", "return", "idx", "-", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.MinSegmentTree.__init__": [[136, 141], ["segment_tree.SegmentTree.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "min", ",", "\n", "neutral_element", "=", "float", "(", "'inf'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.MinSegmentTree.min": [[143, 147], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.segment_tree.SegmentTree.reduce"], ["", "def", "min", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns min(arr[start], ...,  arr[end])\"\"\"", "\n", "\n", "return", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.dataset.Dataset.__init__": [[4, 11], ["dataset.Dataset.shuffle", "next", "iter", "data_map.values"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["import", "numpy", "as", "np", "\n", "\n", "\n", "class", "Dataset", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_map", ",", "deterministic", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_map", "=", "data_map", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "enable_shuffle", "=", "shuffle", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.dataset.Dataset.shuffle": [[12, 22], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["self", ".", "n", "=", "next", "(", "iter", "(", "data_map", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "_next_id", "=", "0", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.dataset.Dataset.next_batch": [[23, 35], ["min", "dict", "dataset.Dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["            ", "self", ".", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n", "", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_next_id", ">=", "self", ".", "n", "and", "self", ".", "enable_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "cur_id", "=", "self", ".", "_next_id", "\n", "cur_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "_next_id", ")", "\n", "self", ".", "_next_id", "+=", "cur_batch_size", "\n", "\n", "data_map", "=", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.dataset.Dataset.iterate_once": [[36, 42], ["dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.next_batch"], ["for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "cur_id", ":", "cur_id", "+", "cur_batch_size", "]", "\n", "", "return", "data_map", "\n", "\n", "", "def", "iterate_once", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.dataset.Dataset.subset": [[43, 48], ["dict", "dataset.Dataset"], "methods", ["None"], ["while", "self", ".", "_next_id", "<=", "self", ".", "n", "-", "batch_size", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n", "", "def", "iterate_times", "(", "self", ",", "batch_size", ",", "times", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.dataset.iterbatches": [[50, 61], ["tuple", "all", "numpy.arange", "numpy.array_split", "map", "numpy.random.shuffle", "numpy.arange", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["for", "x", "in", "range", "(", "times", ")", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n", "", "def", "subset", "(", "self", ",", "num_elements", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", ":", "num_elements", "]", "\n", "", "return", "Dataset", "(", "data_map", ",", "deterministic", ")", "\n", "\n", "\n", "", "", "def", "iterbatches", "(", "arrays", ",", "*", ",", "num_batches", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "include_final_partial_batch", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.__init__": [[7, 20], ["sum", "numpy.zeros", "numpy.zeros", "baselines.SetFromFlat", "baselines.GetFlat", "baselines.numel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "*", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ",", "scale_grad_by_procs", "=", "True", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "var_list", "=", "var_list", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "beta2", "=", "beta2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "scale_grad_by_procs", "=", "scale_grad_by_procs", "\n", "size", "=", "sum", "(", "U", ".", "numel", "(", "v", ")", "for", "v", "in", "var_list", ")", "\n", "self", ".", "m", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "v", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "setfromflat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "self", ".", "getflat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "self", ".", "comm", "=", "MPI", ".", "COMM_WORLD", "if", "comm", "is", "None", "else", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.update_ppo": [[21, 43], ["numpy.array", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "localg.astype.astype.astype", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "mpi_adam.MpiAdam.check_synced", "numpy.sum", "mpi_adam.MpiAdam.setfromflat", "numpy.sqrt", "numpy.sqrt", "mpi_adam.MpiAdam.getflat"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.check_synced", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "update_ppo", "(", "self", ",", "localg", ",", "stepsize", ",", "myg", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "check_synced", "(", ")", "\n", "\n", "", "myg", "=", "np", ".", "array", "(", "[", "myg", "]", ")", "\n", "numg", "=", "np", ".", "zeros_like", "(", "myg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "myg", ",", "numg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "\n", "localg", "=", "localg", ".", "astype", "(", "'float32'", ")", "\n", "globalg", "=", "np", ".", "zeros_like", "(", "localg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "localg", ",", "globalg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "\n", "if", "np", ".", "sum", "(", "numg", ")", "!=", "0", ":", "\n", "            ", "if", "self", ".", "scale_grad_by_procs", ":", "\n", "                ", "globalg", "/=", "numg", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "a", "=", "stepsize", "*", "np", ".", "sqrt", "(", "1", "-", "self", ".", "beta2", "**", "self", ".", "t", ")", "/", "(", "1", "-", "self", ".", "beta1", "**", "self", ".", "t", ")", "\n", "self", ".", "m", "=", "self", ".", "beta1", "*", "self", ".", "m", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "globalg", "\n", "self", ".", "v", "=", "self", ".", "beta2", "*", "self", ".", "v", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "(", "globalg", "*", "globalg", ")", "\n", "step", "=", "(", "-", "a", ")", "*", "self", ".", "m", "/", "(", "np", ".", "sqrt", "(", "self", ".", "v", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "setfromflat", "(", "self", ".", "getflat", "(", ")", "+", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.update": [[44, 59], ["localg.astype.astype.astype", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "mpi_adam.MpiAdam.setfromflat", "mpi_adam.MpiAdam.check_synced", "mpi_adam.MpiAdam.comm.Get_size", "numpy.sqrt", "numpy.sqrt", "mpi_adam.MpiAdam.getflat"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.check_synced"], ["", "", "def", "update", "(", "self", ",", "localg", ",", "stepsize", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "check_synced", "(", ")", "\n", "", "localg", "=", "localg", ".", "astype", "(", "'float32'", ")", "\n", "globalg", "=", "np", ".", "zeros_like", "(", "localg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "localg", ",", "globalg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "if", "self", ".", "scale_grad_by_procs", ":", "\n", "            ", "globalg", "/=", "self", ".", "comm", ".", "Get_size", "(", ")", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "a", "=", "stepsize", "*", "np", ".", "sqrt", "(", "1", "-", "self", ".", "beta2", "**", "self", ".", "t", ")", "/", "(", "1", "-", "self", ".", "beta1", "**", "self", ".", "t", ")", "\n", "self", ".", "m", "=", "self", ".", "beta1", "*", "self", ".", "m", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "globalg", "\n", "self", ".", "v", "=", "self", ".", "beta2", "*", "self", ".", "v", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "(", "globalg", "*", "globalg", ")", "\n", "step", "=", "(", "-", "a", ")", "*", "self", ".", "m", "/", "(", "np", ".", "sqrt", "(", "self", ".", "v", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "setfromflat", "(", "self", ".", "getflat", "(", ")", "+", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.sync": [[60, 64], ["mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.setfromflat"], "methods", ["None"], ["", "def", "sync", "(", "self", ")", ":", "\n", "        ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "self", ".", "setfromflat", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.MpiAdam.check_synced": [[65, 74], ["mpi_adam.MpiAdam.comm.Get_rank", "mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.getflat", "numpy.empty_like", "mpi_adam.MpiAdam.comm.Bcast"], "methods", ["None"], ["", "def", "check_synced", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "# this is root", "\n", "            ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "thetalocal", "=", "self", ".", "getflat", "(", ")", "\n", "thetaroot", "=", "np", ".", "empty_like", "(", "thetalocal", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "thetaroot", ",", "root", "=", "0", ")", "\n", "assert", "(", "thetaroot", "==", "thetalocal", ")", ".", "all", "(", ")", ",", "(", "thetaroot", ",", "thetalocal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_adam.test_MpiAdam": [[75, 103], ["numpy.random.seed", "tensorflow.set_random_seed", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer().minimize", "baselines.function", "tensorflow.get_default_session().run", "range", "tensorflow.set_random_seed", "tensorflow.get_default_session().run", "baselines.function", "mpi_adam.MpiAdam", "range", "numpy.random.randn().astype", "numpy.random.randn().astype", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.global_variables_initializer", "print", "tensorflow.global_variables_initializer", "U.function.", "mpi_adam.MpiAdam.update", "print", "tensorflow.square", "tensorflow.sin", "tensorflow.train.AdamOptimizer", "tensorflow.get_default_session", "U.function.", "tensorflow.get_default_session", "baselines.flatgrad", "numpy.random.randn", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.flatgrad"], ["", "", "", "@", "U", ".", "in_session", "\n", "def", "test_MpiAdam", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "a", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "5", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a", ")", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "sin", "(", "b", ")", ")", "\n", "\n", "stepsize", "=", "1e-2", "\n", "update_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "stepsize", ")", ".", "minimize", "(", "loss", ")", "\n", "do_update", "=", "U", ".", "function", "(", "[", "]", ",", "loss", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "print", "(", "i", ",", "do_update", "(", ")", ")", "\n", "\n", "", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "var_list", "=", "[", "a", ",", "b", "]", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "]", ",", "[", "loss", ",", "U", ".", "flatgrad", "(", "loss", ",", "var_list", ")", "]", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "l", ",", "g", "=", "lossandgrad", "(", ")", "\n", "adam", ".", "update", "(", "g", ",", "stepsize", ")", "\n", "print", "(", "i", ",", "l", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.flatparam": [[10, 12], ["None"], "methods", ["None"], ["def", "flatparam", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.mode": [[12, 14], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.neglogp": [[14, 17], ["None"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# Usually it's easier to define the negative logprob", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.kl": [[17, 19], ["None"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.entropy": [[19, 21], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.sample": [[21, 23], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "logp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.logp": [[23, 25], ["distributions.Pd.neglogp"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.neglogp"], ["", "def", "logp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "self", ".", "neglogp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.pdclass": [[30, 32], ["None"], "methods", ["None"], ["def", "pdclass", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.pdfromflat": [[32, 34], ["distributions.PdType.pdclass"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.pdclass"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "self", ".", "pdclass", "(", ")", "(", "flat", ")", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.param_shape": [[34, 36], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.sample_shape": [[36, 38], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.sample_dtype": [[38, 40], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.param_placeholder": [[41, 43], ["tensorflow.placeholder", "distributions.PdType.param_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.param_shape"], ["", "def", "param_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "prepend_shape", "+", "self", ".", "param_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.sample_placeholder": [[43, 45], ["tensorflow.placeholder", "distributions.PdType.sample_dtype", "distributions.PdType.sample_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.sample_dtype", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.sample_shape"], ["", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "self", ".", "sample_dtype", "(", ")", ",", "shape", "=", "prepend_shape", "+", "self", ".", "sample_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPdType.__init__": [[47, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ncat", ")", ":", "\n", "        ", "self", ".", "ncat", "=", "ncat", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPdType.pdclass": [[49, 51], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "CategoricalPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPdType.param_shape": [[51, 53], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "ncat", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPdType.sample_shape": [[53, 55], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPdType.sample_dtype": [[55, 57], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.__init__": [[60, 64], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "self", ".", "ncats", "=", "high", "-", "low", "+", "1", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.pdclass": [[64, 66], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.pdfromflat": [[66, 68], ["distributions.MultiCategoricalPd"], "methods", ["None"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "(", "self", ".", "low", ",", "self", ".", "high", ",", "flat", ")", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.param_shape": [[68, 70], ["sum"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "sum", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.sample_shape": [[70, 72], ["len"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.sample_dtype": [[72, 74], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPdType.__init__": [[76, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPdType.pdclass": [[78, 80], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "DiagGaussianPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPdType.param_shape": [[80, 82], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "2", "*", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPdType.sample_shape": [[82, 84], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPdType.sample_dtype": [[84, 86], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.__init__": [[88, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.pdclass": [[90, 92], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "BernoulliPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.param_shape": [[92, 94], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.sample_shape": [[94, 96], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.sample_dtype": [[96, 98], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.__init__": [[123, 125], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.flatparam": [[125, 127], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.mode": [[127, 129], ["tensorflow.argmax"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.argmax"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "argmax", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.neglogp": [[129, 137], ["tensorflow.one_hot", "tensorflow.nn.softmax_cross_entropy_with_logits", "distributions.CategoricalPd.logits.get_shape().as_list", "distributions.CategoricalPd.logits.get_shape"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# return tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.logits, labels=x)", "\n", "# Note: we can't use sparse_softmax_cross_entropy_with_logits because", "\n", "#       the implementation does not allow second-order derivatives...", "\n", "        ", "one_hot_actions", "=", "tf", ".", "one_hot", "(", "x", ",", "self", ".", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "\n", "labels", "=", "one_hot_actions", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.kl": [[137, 146], ["tensorflow.exp", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "tf", ".", "reduce_max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "a1", "=", "other", ".", "logits", "-", "tf", ".", "reduce_max", "(", "other", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "ea1", "=", "tf", ".", "exp", "(", "a1", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "z1", "=", "tf", ".", "reduce_sum", "(", "ea1", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "a0", "-", "tf", ".", "log", "(", "z0", ")", "-", "a1", "+", "tf", ".", "log", "(", "z1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.entropy": [[146, 152], ["tensorflow.exp", "baselines.sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "tf", ".", "reduce_max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "U", ".", "sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.sample": [[152, 155], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.argmax", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "self", ".", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "u", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.CategoricalPd.fromflat": [[155, 158], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.__init__": [[160, 164], ["tensorflow.constant", "list", "map", "tensorflow.split", "len", "flat.get_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "low", ",", "high", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "self", ".", "low", "=", "tf", ".", "constant", "(", "low", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "categoricals", "=", "list", "(", "map", "(", "CategoricalPd", ",", "tf", ".", "split", "(", "flat", ",", "high", "-", "low", "+", "1", ",", "axis", "=", "len", "(", "flat", ".", "get_shape", "(", ")", ")", "-", "1", ")", ")", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.flatparam": [[164, 166], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.mode": [[166, 168], ["tensorflow.cast", "tensorflow.stack", "p.mode"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.mode"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", "+", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "mode", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.neglogp": [[168, 170], ["tensorflow.add_n", "p.neglogp", "zip", "tensorflow.unstack", "len", "x.get_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.neglogp"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "neglogp", "(", "px", ")", "for", "p", ",", "px", "in", "zip", "(", "self", ".", "categoricals", ",", "tf", ".", "unstack", "(", "x", "-", "self", ".", "low", ",", "axis", "=", "len", "(", "x", ".", "get_shape", "(", ")", ")", "-", "1", ")", ")", "]", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.kl": [[170, 173], ["tensorflow.add_n", "p.kl", "zip"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.kl"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "\n", "p", ".", "kl", "(", "q", ")", "for", "p", ",", "q", "in", "zip", "(", "self", ".", "categoricals", ",", "other", ".", "categoricals", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.entropy": [[174, 176], ["tensorflow.add_n", "p.entropy"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "entropy", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.sample": [[176, 178], ["tensorflow.cast", "tensorflow.stack", "p.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", "+", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "sample", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPd.fromflat": [[178, 181], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.__init__": [[183, 189], ["tensorflow.split", "tensorflow.exp", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "mean", ",", "logstd", "=", "tf", ".", "split", "(", "axis", "=", "len", "(", "flat", ".", "shape", ")", "-", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "flat", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "logstd", "=", "logstd", "\n", "self", ".", "std", "=", "tf", ".", "exp", "(", "logstd", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.flatparam": [[189, 191], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.mode": [[191, 193], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.neglogp": [[193, 197], ["baselines.sum", "baselines.sum", "tensorflow.to_float", "tensorflow.square", "numpy.log", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "0.5", "*", "U", ".", "sum", "(", "tf", ".", "square", "(", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ",", "axis", "=", "-", "1", ")", "+", "0.5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "*", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "x", ")", "[", "-", "1", "]", ")", "+", "U", ".", "sum", "(", "self", ".", "logstd", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.kl": [[197, 200], ["isinstance", "baselines.sum", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other", ",", "DiagGaussianPd", ")", "\n", "return", "U", ".", "sum", "(", "other", ".", "logstd", "-", "self", ".", "logstd", "+", "(", "tf", ".", "square", "(", "self", ".", "std", ")", "+", "tf", ".", "square", "(", "self", ".", "mean", "-", "other", ".", "mean", ")", ")", "/", "(", "2.0", "*", "tf", ".", "square", "(", "other", ".", "std", ")", ")", "-", "0.5", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.entropy": [[200, 202], ["baselines.sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "self", ".", "logstd", "+", ".5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", "*", "np", ".", "e", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.sample": [[202, 204], ["tensorflow.random_normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "+", "self", ".", "std", "*", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "self", ".", "mean", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.DiagGaussianPd.fromflat": [[204, 207], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.__init__": [[209, 212], ["tensorflow.sigmoid"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "self", ".", "ps", "=", "tf", ".", "sigmoid", "(", "logits", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.flatparam": [[212, 214], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.mode": [[214, 216], ["tensorflow.round"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "round", "(", "self", ".", "ps", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.neglogp": [[216, 218], ["baselines.sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.to_float"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "tf", ".", "to_float", "(", "x", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.kl": [[218, 220], ["baselines.sum", "baselines.sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "other", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "-", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.entropy": [[220, 222], ["baselines.sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "U", ".", "sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.sample": [[222, 225], ["tensorflow.random_uniform", "tensorflow.to_float", "tensorflow.shape", "tensorflow.python.ops.math_ops.less"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "ps", ")", ")", "\n", "return", "tf", ".", "to_float", "(", "math_ops", ".", "less", "(", "u", ",", "self", ".", "ps", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.fromflat": [[225, 228], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.make_pdtype": [[229, 242], ["isinstance", "distributions.DiagGaussianPdType", "isinstance", "len", "distributions.CategoricalPdType", "isinstance", "distributions.MultiCategoricalPdType", "isinstance", "distributions.BernoulliPdType"], "function", ["None"], ["", "", "def", "make_pdtype", "(", "ac_space", ")", ":", "\n", "    ", "from", "gym", "import", "spaces", "\n", "if", "isinstance", "(", "ac_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "assert", "len", "(", "ac_space", ".", "shape", ")", "==", "1", "\n", "return", "DiagGaussianPdType", "(", "ac_space", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "return", "CategoricalPdType", "(", "ac_space", ".", "n", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "        ", "return", "MultiCategoricalPdType", "(", "ac_space", ".", "low", ",", "ac_space", ".", "high", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "        ", "return", "BernoulliPdType", "(", "ac_space", ".", "n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.shape_el": [[243, 249], ["v.get_shape", "tensorflow.shape"], "function", ["None"], ["", "", "def", "shape_el", "(", "v", ",", "i", ")", ":", "\n", "    ", "maybe", "=", "v", ".", "get_shape", "(", ")", "[", "i", "]", "\n", "if", "maybe", "is", "not", "None", ":", "\n", "        ", "return", "maybe", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "shape", "(", "v", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.test_probtypes": [[250, 265], ["numpy.random.seed", "numpy.array", "distributions.DiagGaussianPdType", "distributions.validate_probtype", "numpy.array", "distributions.CategoricalPdType", "distributions.validate_probtype", "numpy.array", "distributions.BernoulliPdType", "distributions.validate_probtype"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.validate_probtype"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_probtypes", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "pdparam_diag_gauss", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".4", ",", "-", ".5", ",", ".1", ",", "-", ".5", ",", ".1", ",", "0.8", "]", ")", "\n", "diag_gauss", "=", "DiagGaussianPdType", "(", "pdparam_diag_gauss", ".", "size", "//", "2", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "diag_gauss", ",", "pdparam_diag_gauss", ")", "\n", "\n", "pdparam_categorical", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "categorical", "=", "CategoricalPdType", "(", "pdparam_categorical", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "categorical", ",", "pdparam_categorical", ")", "\n", "\n", "pdparam_bernoulli", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "bernoulli", "=", "BernoulliPdType", "(", "pdparam_bernoulli", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "bernoulli", ",", "pdparam_bernoulli", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.validate_probtype": [[267, 294], ["numpy.repeat", "probtype.param_placeholder", "probtype.sample_placeholder", "baselines.function", "baselines.function", "baselines.eval", "U.function.", "U.function.mean", "probtype.param_placeholder", "numpy.repeat", "baselines.function", "U.function.mean", "U.function.", "probtype.pdclass", "pd.logp", "pd.entropy", "pd.sample", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "probtype.pdclass", "pd.kl", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "U.function.", "numpy.random.randn", "U.function."], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.eval", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.pdclass", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.entropy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.pdclass", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std"], ["", "def", "validate_probtype", "(", "probtype", ",", "pdparam", ")", ":", "\n", "    ", "N", "=", "100000", "\n", "# Check to see if mean negative log likelihood == differential entropy", "\n", "Mval", "=", "np", ".", "repeat", "(", "pdparam", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "M", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "X", "=", "probtype", ".", "sample_placeholder", "(", "[", "N", "]", ")", "\n", "pd", "=", "probtype", ".", "pdclass", "(", ")", "(", "M", ")", "\n", "calcloglik", "=", "U", ".", "function", "(", "[", "X", ",", "M", "]", ",", "pd", ".", "logp", "(", "X", ")", ")", "\n", "calcent", "=", "U", ".", "function", "(", "[", "M", "]", ",", "pd", ".", "entropy", "(", ")", ")", "\n", "Xval", "=", "U", ".", "eval", "(", "pd", ".", "sample", "(", ")", ",", "feed_dict", "=", "{", "M", ":", "Mval", "}", ")", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval", ")", "\n", "entval_ll", "=", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "entval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "entval", "=", "calcent", "(", "Mval", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "entval", "-", "entval_ll", ")", "<", "3", "*", "entval_ll_stderr", "# within 3 sigmas", "\n", "\n", "# Check to see if kldiv[p,q] = - ent[p] - E_p[log q]", "\n", "M2", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "pd2", "=", "probtype", ".", "pdclass", "(", ")", "(", "M2", ")", "\n", "q", "=", "pdparam", "+", "np", ".", "random", ".", "randn", "(", "pdparam", ".", "size", ")", "*", "0.1", "\n", "Mval2", "=", "np", ".", "repeat", "(", "q", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "calckl", "=", "U", ".", "function", "(", "[", "M", ",", "M2", "]", ",", "pd", ".", "kl", "(", "pd2", ")", ")", "\n", "klval", "=", "calckl", "(", "Mval", ",", "Mval2", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval2", ")", "\n", "klval_ll", "=", "-", "entval", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "klval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "klval", "-", "klval_ll", ")", "<", "3", "*", "klval_ll_stderr", "# within 3 sigmas", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.TfInput.__init__": [[89, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"(unnamed)\"", ")", ":", "\n", "        ", "\"\"\"Generalized Tensorflow placeholder. The main differences are:\n            - possibly uses multiple placeholders internally and returns multiple values\n            - can apply light postprocessing to the value feed to placeholder.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.TfInput.get": [[96, 101], ["NotImplemented"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the tf variable(s) representing the possibly postprocessed value\n        of placeholder(s).\n        \"\"\"", "\n", "raise", "NotImplemented", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.TfInput.make_feed_dict": [[102, 105], ["NotImplemented"], "methods", ["None"], ["", "def", "make_feed_dict", "(", "data", ")", ":", "\n", "        ", "\"\"\"Given data input it to the placeholder(s).\"\"\"", "\n", "raise", "NotImplemented", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.PlacholderTfInput.__init__": [[107, 111], ["tf_util.TfInput.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "placeholder", ")", ":", "\n", "        ", "\"\"\"Wrapper for regular tensorflow placeholder.\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "placeholder", ".", "name", ")", "\n", "self", ".", "_placeholder", "=", "placeholder", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.PlacholderTfInput.get": [[112, 114], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_placeholder", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.PlacholderTfInput.make_feed_dict": [[115, 117], ["None"], "methods", ["None"], ["", "def", "make_feed_dict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "{", "self", ".", "_placeholder", ":", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.BatchInput.__init__": [[119, 132], ["tf_util.PlacholderTfInput.__init__", "tensorflow.placeholder", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a placeholder for a batch of tensors of a given shape and dtype\n\n        Parameters\n        ----------\n        shape: [int]\n            shape of a single elemenet of the batch\n        dtype: tf.dtype\n            number representation used for tensor contents\n        name: str\n            name of the underlying placeholder\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "tf", ".", "placeholder", "(", "dtype", ",", "[", "None", "]", "+", "list", "(", "shape", ")", ",", "name", "=", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Uint8Input.__init__": [[134, 151], ["tf_util.PlacholderTfInput.__init__", "tensorflow.placeholder", "tensorflow.cast", "tf_util.PlacholderTfInput.get", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Takes input in uint8 format which is cast to float32 and divided by 255\n        before passing it to the model.\n\n        On GPU this ensures lower data transfer times.\n\n        Parameters\n        ----------\n        shape: [int]\n            shape of the tensor.\n        name: str\n            name of the underlying placeholder\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "None", "]", "+", "list", "(", "shape", ")", ",", "name", "=", "name", ")", ")", "\n", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_output", "=", "tf", ".", "cast", "(", "super", "(", ")", ".", "get", "(", ")", ",", "tf", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Uint8Input.get": [[152, 154], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._Function.__init__": [[381, 391], ["tensorflow.group", "list", "issubclass", "type", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "updates", ",", "givens", ",", "check_nan", "=", "False", ")", ":", "\n", "        ", "for", "inpt", "in", "inputs", ":", "\n", "            ", "if", "not", "issubclass", "(", "type", "(", "inpt", ")", ",", "TfInput", ")", ":", "\n", "                ", "assert", "len", "(", "inpt", ".", "op", ".", "inputs", ")", "==", "0", ",", "\"inputs should all be placeholders of baselines.common.TfInput\"", "\n", "", "", "self", ".", "inputs", "=", "inputs", "\n", "updates", "=", "updates", "or", "[", "]", "\n", "self", ".", "update_group", "=", "tf", ".", "group", "(", "*", "updates", ")", "\n", "self", ".", "outputs_update", "=", "list", "(", "outputs", ")", "+", "[", "self", ".", "update_group", "]", "\n", "self", ".", "givens", "=", "{", "}", "if", "givens", "is", "None", "else", "givens", "\n", "self", ".", "check_nan", "=", "check_nan", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._Function._feed_input": [[392, 397], ["issubclass", "type", "feed_dict.update", "tf_util.is_placeholder", "inpt.make_feed_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.is_placeholder", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.PlacholderTfInput.make_feed_dict"], ["", "def", "_feed_input", "(", "self", ",", "feed_dict", ",", "inpt", ",", "value", ")", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "inpt", ")", ",", "TfInput", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "inpt", ".", "make_feed_dict", "(", "value", ")", ")", "\n", "", "elif", "is_placeholder", "(", "inpt", ")", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._Function.__call__": [[398, 425], ["zip", "set", "len", "len", "tf_util._Function._feed_input", "len", "str", "feed_dict.get", "get_session().run", "any", "len", "inpt.name.split", "inpt_name.split", "set.add", "tf_util._Function._feed_input", "list", "RuntimeError", "kwargs.pop", "kwargs.keys", "tf_util.get_session", "numpy.isnan().any", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "args", ")", "<=", "len", "(", "self", ".", "inputs", ")", ",", "\"Too many arguments provided\"", "\n", "feed_dict", "=", "{", "}", "\n", "# Update the args", "\n", "for", "inpt", ",", "value", "in", "zip", "(", "self", ".", "inputs", ",", "args", ")", ":", "\n", "            ", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "value", ")", "\n", "# Update the kwargs", "\n", "", "kwargs_passed_inpt_names", "=", "set", "(", ")", "\n", "for", "inpt", "in", "self", ".", "inputs", "[", "len", "(", "args", ")", ":", "]", ":", "\n", "            ", "inpt_name", "=", "inpt", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "inpt_name", "=", "inpt_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "assert", "inpt_name", "not", "in", "kwargs_passed_inpt_names", ",", "\"this function has two arguments with the same name \\\"{}\\\", so kwargs cannot be used.\"", ".", "format", "(", "inpt_name", ")", "\n", "if", "inpt_name", "in", "kwargs", ":", "\n", "                ", "kwargs_passed_inpt_names", ".", "add", "(", "inpt_name", ")", "\n", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "kwargs", ".", "pop", "(", "inpt_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "inpt", "in", "self", ".", "givens", ",", "\"Missing argument \"", "+", "inpt_name", "\n", "", "", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "\"Function got extra arguments \"", "+", "str", "(", "list", "(", "kwargs", ".", "keys", "(", ")", ")", ")", "\n", "# Update feed dict with givens.", "\n", "for", "inpt", "in", "self", ".", "givens", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "feed_dict", ".", "get", "(", "inpt", ",", "self", ".", "givens", "[", "inpt", "]", ")", "\n", "", "results", "=", "get_session", "(", ")", ".", "run", "(", "self", ".", "outputs_update", ",", "feed_dict", "=", "feed_dict", ")", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "check_nan", ":", "\n", "            ", "if", "any", "(", "np", ".", "isnan", "(", "r", ")", ".", "any", "(", ")", "for", "r", "in", "results", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Nan detected\"", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._MemFriendlyFunction.__init__": [[434, 439], ["list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "nondata_inputs", "=", "nondata_inputs", "\n", "self", ".", "data_inputs", "=", "data_inputs", "\n", "self", ".", "outputs", "=", "list", "(", "outputs", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util._MemFriendlyFunction.__call__": [[440, 461], ["dict", "range", "range", "len", "zip", "zip", "tensorflow.get_default_session().run", "len", "len", "len", "len", "len", "range", "tensorflow.get_default_session", "len", "builtins.min"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "__call__", "(", "self", ",", "*", "inputvals", ")", ":", "\n", "        ", "assert", "len", "(", "inputvals", ")", "==", "len", "(", "self", ".", "nondata_inputs", ")", "+", "len", "(", "self", ".", "data_inputs", ")", "\n", "nondata_vals", "=", "inputvals", "[", "0", ":", "len", "(", "self", ".", "nondata_inputs", ")", "]", "\n", "data_vals", "=", "inputvals", "[", "len", "(", "self", ".", "nondata_inputs", ")", ":", "]", "\n", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "nondata_inputs", ",", "nondata_vals", ")", ")", "\n", "n", "=", "data_vals", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "v", "in", "data_vals", "[", "1", ":", "]", ":", "\n", "            ", "assert", "v", ".", "shape", "[", "0", "]", "==", "n", "\n", "", "for", "i_start", "in", "range", "(", "0", ",", "n", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "slice_vals", "=", "[", "v", "[", "i_start", ":", "builtins", ".", "min", "(", "i_start", "+", "self", ".", "batch_size", ",", "n", ")", "]", "for", "v", "in", "data_vals", "]", "\n", "for", "(", "var", ",", "val", ")", "in", "zip", "(", "self", ".", "data_inputs", ",", "slice_vals", ")", ":", "\n", "                ", "feed_dict", "[", "var", "]", "=", "val", "\n", "", "results", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "outputs", ",", "feed_dict", "=", "feed_dict", ")", "\n", "if", "i_start", "==", "0", ":", "\n", "                ", "sum_results", "=", "results", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "                    ", "sum_results", "[", "i", "]", "=", "sum_results", "[", "i", "]", "+", "results", "[", "i", "]", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "            ", "sum_results", "[", "i", "]", "=", "sum_results", "[", "i", "]", "/", "n", "\n", "", "return", "sum_results", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Module.__init__": [[467, 472], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "first_time", "=", "True", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Module.__call__": [[473, 489], ["print", "tensorflow.variable_scope", "tf_util.Module._call", "tensorflow.get_variable_scope", "print", "print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Module._call", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "args", "in", "self", ".", "cache", ":", "\n", "            ", "print", "(", "\"(%s) retrieving value from cache\"", "%", "(", "self", ".", "name", ",", ")", ")", "\n", "return", "self", ".", "cache", "[", "args", "]", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "not", "self", ".", "first_time", ")", ":", "\n", "            ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "if", "self", ".", "first_time", ":", "\n", "                ", "self", ".", "scope", "=", "scope", "\n", "print", "(", "\"(%s) running function for the first time\"", "%", "(", "self", ".", "name", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "self", ".", "scope", "==", "scope", ",", "\"Tried calling function with a different scope\"", "\n", "print", "(", "\"(%s) running function on new inputs\"", "%", "(", "self", ".", "name", ",", ")", ")", "\n", "", "self", ".", "first_time", "=", "False", "\n", "out", "=", "self", ".", "_call", "(", "*", "args", ")", "\n", "", "self", ".", "cache", "[", "args", "]", "=", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Module._call": [[490, 492], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Module.trainable_variables": [[493, 497], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "scope", "is", "not", "None", ",", "\"need to call module once before getting variables\"", "\n", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.Module.variables": [[498, 502], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "variables", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "scope", "is", "not", "None", ",", "\"need to call module once before getting variables\"", "\n", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.SetFromFlat.__init__": [[583, 596], ["list", "numpy.sum", "tensorflow.placeholder", "zip", "tensorflow.group", "map", "tf_util.intprod", "assigns.append", "tf_util.intprod", "tensorflow.assign", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "assigns", "=", "[", "]", "\n", "shapes", "=", "list", "(", "map", "(", "var_shape", ",", "var_list", ")", ")", "\n", "total_size", "=", "np", ".", "sum", "(", "[", "intprod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "\n", "self", ".", "theta", "=", "theta", "=", "tf", ".", "placeholder", "(", "dtype", ",", "[", "total_size", "]", ")", "\n", "start", "=", "0", "\n", "assigns", "=", "[", "]", "\n", "for", "(", "shape", ",", "v", ")", "in", "zip", "(", "shapes", ",", "var_list", ")", ":", "\n", "            ", "size", "=", "intprod", "(", "shape", ")", "\n", "assigns", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "reshape", "(", "theta", "[", "start", ":", "start", "+", "size", "]", ",", "shape", ")", ")", ")", "\n", "start", "+=", "size", "\n", "", "self", ".", "op", "=", "tf", ".", "group", "(", "*", "assigns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.SetFromFlat.__call__": [[597, 599], ["get_session().run", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "get_session", "(", ")", ".", "run", "(", "self", ".", "op", ",", "feed_dict", "=", "{", "self", ".", "theta", ":", "theta", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.GetFlat.__init__": [[601, 603], ["tensorflow.concat", "tensorflow.reshape", "tf_util.numel"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "self", ".", "op", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "v", ",", "[", "numel", "(", "v", ")", "]", ")", "for", "v", "in", "var_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.GetFlat.__call__": [[604, 606], ["get_session().run", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "get_session", "(", ")", ".", "run", "(", "self", ".", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum": [[15, 18], ["tensorflow.reduce_sum"], "function", ["None"], ["def", "sum", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean": [[19, 22], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "mean", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var": [[23, 26], ["tf_util.mean", "tf_util.mean", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "def", "var", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "meanx", "=", "mean", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "return", "mean", "(", "tf", ".", "square", "(", "x", "-", "meanx", ")", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std": [[27, 29], ["tensorflow.sqrt", "tf_util.var"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var"], ["", "def", "std", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "sqrt", "(", "var", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max": [[30, 33], ["tensorflow.reduce_max"], "function", ["None"], ["", "def", "max", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min": [[34, 37], ["tensorflow.reduce_min"], "function", ["None"], ["", "def", "min", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_min", "(", "x", ",", "axis", "=", "axis", ",", "keep_dims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate": [[38, 40], ["tensorflow.concat"], "function", ["None"], ["", "def", "concatenate", "(", "arrs", ",", "axis", "=", "0", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "axis", "=", "axis", ",", "values", "=", "arrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.argmax": [[41, 43], ["tensorflow.argmax"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.argmax"], ["", "def", "argmax", "(", "x", ",", "axis", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "x", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.switch": [[44, 60], ["copy.copy", "tensorflow.cond", "tf.cond.set_shape", "then_expression.get_shape", "tensorflow.cast"], "function", ["None"], ["", "def", "switch", "(", "condition", ",", "then_expression", ",", "else_expression", ")", ":", "\n", "    ", "\"\"\"Switches between two operations depending on a scalar value (int or bool).\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: scalar tensor.\n        then_expression: TensorFlow operation.\n        else_expression: TensorFlow operation.\n    \"\"\"", "\n", "x_shape", "=", "copy", ".", "copy", "(", "then_expression", ".", "get_shape", "(", ")", ")", "\n", "x", "=", "tf", ".", "cond", "(", "tf", ".", "cast", "(", "condition", ",", "'bool'", ")", ",", "\n", "lambda", ":", "then_expression", ",", "\n", "lambda", ":", "else_expression", ")", "\n", "x", ".", "set_shape", "(", "x_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.l2loss": [[65, 70], ["len", "tensorflow.constant", "tensorflow.add_n", "tf_util.sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "l2loss", "(", "params", ")", ":", "\n", "    ", "if", "len", "(", "params", ")", "==", "0", ":", "\n", "        ", "return", "tf", ".", "constant", "(", "0.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "sum", "(", "tf", ".", "square", "(", "p", ")", ")", "for", "p", "in", "params", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.lrelu": [[71, 75], ["abs"], "function", ["None"], ["", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "    ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.categorical_sample_logits": [[76, 80], ["tensorflow.random_uniform", "tf_util.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.argmax", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "categorical_sample_logits", "(", "X", ")", ":", "\n", "# https://github.com/tensorflow/tensorflow/issues/456", "\n", "    ", "U", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "X", ")", ")", "\n", "return", "argmax", "(", "X", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "U", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.is_placeholder": [[85, 87], ["type", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "def", "is_placeholder", "(", "x", ")", ":", "\n", "    ", "return", "type", "(", "x", ")", "is", "tf", ".", "Tensor", "and", "len", "(", "x", ".", "op", ".", "inputs", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.ensure_tf_input": [[155, 163], ["isinstance", "tf_util.is_placeholder", "tf_util.PlacholderTfInput", "ValueError"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.is_placeholder"], ["", "", "def", "ensure_tf_input", "(", "thing", ")", ":", "\n", "    ", "\"\"\"Takes either tf.placeholder of TfInput and outputs equivalent TfInput\"\"\"", "\n", "if", "isinstance", "(", "thing", ",", "TfInput", ")", ":", "\n", "        ", "return", "thing", "\n", "", "elif", "is_placeholder", "(", "thing", ")", ":", "\n", "        ", "return", "PlacholderTfInput", "(", "thing", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must be a placeholder or TfInput\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.huber_loss": [[168, 174], ["tensorflow.where", "tensorflow.abs", "tensorflow.square", "tensorflow.abs"], "function", ["None"], ["", "", "def", "huber_loss", "(", "x", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Reference: https://en.wikipedia.org/wiki/Huber_loss\"\"\"", "\n", "return", "tf", ".", "where", "(", "\n", "tf", ".", "abs", "(", "x", ")", "<", "delta", ",", "\n", "tf", ".", "square", "(", "x", ")", "*", "0.5", ",", "\n", "delta", "*", "(", "tf", ".", "abs", "(", "x", ")", "-", "0.5", "*", "delta", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.minimize_and_clip": [[180, 190], ["optimizer.compute_gradients", "enumerate", "optimizer.apply_gradients", "tensorflow.clip_by_norm"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.compute_gradients", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tf.MpiAdamOptimizer.apply_gradients"], ["", "def", "minimize_and_clip", "(", "optimizer", ",", "objective", ",", "var_list", ",", "clip_val", "=", "10", ")", ":", "\n", "    ", "\"\"\"Minimized `objective` using `optimizer` w.r.t. variables in\n    `var_list` while ensure the norm of the gradients for each\n    variable is clipped to `clip_val`\n    \"\"\"", "\n", "gradients", "=", "optimizer", ".", "compute_gradients", "(", "objective", ",", "var_list", "=", "var_list", ")", "\n", "for", "i", ",", "(", "grad", ",", "var", ")", "in", "enumerate", "(", "gradients", ")", ":", "\n", "        ", "if", "grad", "is", "not", "None", ":", "\n", "            ", "gradients", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_val", ")", ",", "var", ")", "\n", "", "", "return", "optimizer", ".", "apply_gradients", "(", "gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session": [[195, 198], ["tensorflow.get_default_session"], "function", ["None"], ["", "def", "get_session", "(", ")", ":", "\n", "    ", "\"\"\"Returns recently made Tensorflow session\"\"\"", "\n", "return", "tf", ".", "get_default_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.make_session": [[199, 211], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["", "def", "make_session", "(", "num_cpu", ",", "gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Returns a session that will use <num_cpu> CPU's only\"\"\"", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", "\n", "inter_op_parallelism_threads", "=", "num_cpu", ",", "\n", "intra_op_parallelism_threads", "=", "num_cpu", ",", "\n", "device_count", "=", "{", "'GPU'", ":", "1", "if", "gpu", "else", "0", "}", "\n", ")", "\n", "if", "gpu", ":", "\n", "        ", "tf_config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "1", "/", "10.", "\n", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "tf_config", ".", "gpu_options", ".", "allocator_type", "=", "'BFC'", "\n", "", "return", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session": [[212, 215], ["tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.make_session"], ["", "def", "single_threaded_session", "(", "gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Returns a session which will only use a single CPU\"\"\"", "\n", "return", "make_session", "(", "1", ",", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.initialize": [[219, 224], ["get_session().run", "ALREADY_INITIALIZED.update", "set", "tensorflow.variables_initializer", "tensorflow.global_variables", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["def", "initialize", "(", ")", ":", "\n", "    ", "\"\"\"Initialize all the uninitialized variables in the global scope.\"\"\"", "\n", "new_variables", "=", "set", "(", "tf", ".", "global_variables", "(", ")", ")", "-", "ALREADY_INITIALIZED", "\n", "get_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "new_variables", ")", ")", "\n", "ALREADY_INITIALIZED", ".", "update", "(", "new_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.eval": [[225, 229], ["get_session().run", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "def", "eval", "(", "expr", ",", "feed_dict", "=", "None", ")", ":", "\n", "    ", "if", "feed_dict", "is", "None", ":", "\n", "        ", "feed_dict", "=", "{", "}", "\n", "", "return", "get_session", "(", ")", ".", "run", "(", "expr", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.set_value": [[232, 241], ["get_session().run", "tensorflow.placeholder", "v.assign", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.run", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["def", "set_value", "(", "v", ",", "val", ")", ":", "\n", "    ", "global", "VALUE_SETTERS", "\n", "if", "v", "in", "VALUE_SETTERS", ":", "\n", "        ", "set_op", ",", "set_endpoint", "=", "VALUE_SETTERS", "[", "v", "]", "\n", "", "else", ":", "\n", "        ", "set_endpoint", "=", "tf", ".", "placeholder", "(", "v", ".", "dtype", ")", "\n", "set_op", "=", "v", ".", "assign", "(", "set_endpoint", ")", "\n", "VALUE_SETTERS", "[", "v", "]", "=", "(", "set_op", ",", "set_endpoint", ")", "\n", "", "get_session", "(", ")", ".", "run", "(", "set_op", ",", "feed_dict", "=", "{", "set_endpoint", ":", "val", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.file_writer": [[246, 249], ["os.makedirs", "tensorflow.summary.FileWriter", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "def", "file_writer", "(", "dir_path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dir_path", ",", "exist_ok", "=", "True", ")", "\n", "return", "tf", ".", "summary", ".", "FileWriter", "(", "dir_path", ",", "get_session", "(", ")", ".", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state": [[254, 257], ["tensorflow.train.Saver", "tf.train.Saver.restore", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "def", "load_state", "(", "fname", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "var_list", ")", "\n", "saver", ".", "restore", "(", "get_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.save_state": [[258, 265], ["os.makedirs", "tf.train.Saver.save", "os.path.dirname", "tensorflow.train.Saver", "tensorflow.train.Saver", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_session"], ["", "def", "save_state", "(", "fname", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "var_list", "is", "None", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "", "else", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "var_list", ")", "\n", "", "saver", ".", "save", "(", "get_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.normc_initializer": [[270, 276], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "normc_initializer", "(", "std", "=", "1.0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "# pylint: disable=W0613", "\n", "        ", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.conv2d": [[277, 305], ["tensorflow.variable_scope", "tf_util.intprod", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "int", "tf_util.intprod", "tensorflow.random_uniform_initializer", "tensorflow.summary.image", "tensorflow.nn.conv2d", "tensorflow.zeros_initializer", "tensorflow.transpose", "x.get_shape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.conv2d"], ["", "def", "conv2d", "(", "x", ",", "num_filters", ",", "name", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "\"SAME\"", ",", "dtype", "=", "tf", ".", "float32", ",", "collections", "=", "None", ",", "\n", "summary_tag", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "stride_shape", "=", "[", "1", ",", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "1", "]", "\n", "filter_shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "int", "(", "x", ".", "get_shape", "(", ")", "[", "3", "]", ")", ",", "num_filters", "]", "\n", "\n", "# there are \"num input feature maps * filter height * filter width\"", "\n", "# inputs to each hidden unit", "\n", "fan_in", "=", "intprod", "(", "filter_shape", "[", ":", "3", "]", ")", "\n", "# each unit in the lower layer receives a gradient from:", "\n", "# \"num output feature maps * filter height * filter width\" /", "\n", "#   pooling size", "\n", "fan_out", "=", "intprod", "(", "filter_shape", "[", ":", "2", "]", ")", "*", "num_filters", "\n", "# initialize weights with random weights", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "filter_shape", ",", "dtype", ",", "tf", ".", "random_uniform_initializer", "(", "-", "w_bound", ",", "w_bound", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "\n", "if", "summary_tag", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "image", "(", "summary_tag", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "w", ",", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", ",", "\n", "max_images", "=", "10", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "stride_shape", ",", "pad", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense": [[306, 314], ["tensorflow.get_variable", "tensorflow.matmul", "tensorflow.get_variable", "x.get_shape", "tensorflow.zeros_initializer"], "function", ["None"], ["", "", "def", "dense", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/w\"", ",", "[", "x", ".", "get_shape", "(", ")", "[", "1", "]", ",", "size", "]", ",", "initializer", "=", "weight_init", ")", "\n", "ret", "=", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "if", "bias", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/b\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "return", "ret", "+", "b", "\n", "", "else", ":", "\n", "        ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.wndense": [[315, 325], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.sqrt", "tensorflow.reshape", "int", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tf_util.sum", "tensorflow.reshape", "tensorflow.square", "tf.matmul.get_shape"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "", "def", "wndense", "(", "x", ",", "size", ",", "name", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "v", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/V\"", ",", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.05", ")", ")", "\n", "g", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/g\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/b\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "# use weight normalization (Salimans & Kingma, 2016)", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "v", ")", "\n", "scaler", "=", "g", "/", "tf", ".", "sqrt", "(", "sum", "(", "tf", ".", "square", "(", "v", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "reshape", "(", "scaler", ",", "[", "1", ",", "size", "]", ")", "*", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.densenobias": [[326, 328], ["tf_util.dense"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense"], ["", "def", "densenobias", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "None", ")", ":", "\n", "    ", "return", "dense", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "weight_init", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dropout": [[329, 335], ["tensorflow.floor", "tf_util.switch", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.switch"], ["", "def", "dropout", "(", "x", ",", "pkeep", ",", "phase", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "    ", "mask", "=", "tf", ".", "floor", "(", "pkeep", "+", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "x", ")", ")", ")", "if", "mask", "is", "None", "else", "mask", "\n", "if", "phase", "is", "None", ":", "\n", "        ", "return", "mask", "*", "x", "\n", "", "else", ":", "\n", "        ", "return", "switch", "(", "phase", ",", "mask", "*", "x", ",", "pkeep", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function": [[340, 379], ["isinstance", "tf_util._Function", "isinstance", "tf_util._Function", "tf_util._Function", "outputs.values", "type", "zip", "_Function.", "outputs.keys", "_Function."], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["", "", "def", "function", "(", "inputs", ",", "outputs", ",", "updates", "=", "None", ",", "givens", "=", "None", ")", ":", "\n", "    ", "\"\"\"Just like Theano function. Take a bunch of tensorflow placeholders and expressions\n    computed based on those placeholders and produces f(inputs) -> outputs. Function f takes\n    values to be fed to the input's placeholders and produces the values of the expressions\n    in outputs.\n\n    Input values can be passed in the same order as inputs or can be provided as kwargs based\n    on placeholder name (passed to constructor or accessible via placeholder.op.name).\n\n    Example:\n        x = tf.placeholder(tf.int32, (), name=\"x\")\n        y = tf.placeholder(tf.int32, (), name=\"y\")\n        z = 3 * x + 2 * y\n        lin = function([x, y], z, givens={y: 0})\n\n        with single_threaded_session():\n            initialize()\n\n            assert lin(2) == 6\n            assert lin(x=3) == 9\n            assert lin(2, 2) == 10\n            assert lin(x=2, y=3) == 12\n\n    Parameters\n    ----------\n    inputs: [tf.placeholder or TfInput]\n        list of input arguments\n    outputs: [tf.Variable] or tf.Variable\n        list of outputs or a single output to be returned from function. Returned\n        value will also have the same shape.\n    \"\"\"", "\n", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_Function", "(", "inputs", ",", "outputs", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "", "elif", "isinstance", "(", "outputs", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "outputs", ".", "values", "(", ")", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "type", "(", "outputs", ")", "(", "zip", "(", "outputs", ".", "keys", "(", ")", ",", "f", "(", "*", "args", ",", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "[", "outputs", "]", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "f", "(", "*", "args", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mem_friendly_function": [[426, 432], ["isinstance", "tf_util._MemFriendlyFunction", "tf_util._MemFriendlyFunction", "_MemFriendlyFunction."], "function", ["None"], ["", "", "def", "mem_friendly_function", "(", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", ":", "\n", "    ", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_MemFriendlyFunction", "(", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_MemFriendlyFunction", "(", "nondata_inputs", ",", "data_inputs", ",", "[", "outputs", "]", ",", "batch_size", ")", "\n", "return", "lambda", "*", "inputs", ":", "f", "(", "*", "inputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.module": [[503, 511], ["WrapperModule", "f"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.f"], ["", "", "def", "module", "(", "name", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "\n", "def", "wrapper", "(", "f", ")", ":", "\n", "        ", "class", "WrapperModule", "(", "Module", ")", ":", "\n", "            ", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n", "                ", "return", "f", "(", "*", "args", ")", "\n", "", "", "return", "WrapperModule", "(", "name", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_parents": [[518, 520], ["None"], "function", ["None"], ["def", "get_parents", "(", "node", ")", ":", "\n", "    ", "return", "node", ".", "op", ".", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.topsorted": [[521, 556], ["isinstance", "stack.append", "stack.pop", "tf_util.get_parents", "marks.get", "len", "out.append", "stack.append", "stack.append", "ValueError"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_parents", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "topsorted", "(", "outputs", ")", ":", "\n", "    ", "\"\"\"\n    Topological sort via non-recursive depth-first search\n    \"\"\"", "\n", "assert", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", "\n", "marks", "=", "{", "}", "\n", "out", "=", "[", "]", "\n", "stack", "=", "[", "]", "# pylint: disable=W0621", "\n", "# i: node", "\n", "# jidx = number of children visited so far from that node", "\n", "# marks: state of each node, which is one of", "\n", "#   0: haven't visited", "\n", "#   1: have visited, but not done visiting children", "\n", "#   2: done visiting children", "\n", "for", "x", "in", "outputs", ":", "\n", "        ", "stack", ".", "append", "(", "(", "x", ",", "0", ")", ")", "\n", "while", "stack", ":", "\n", "            ", "(", "i", ",", "jidx", ")", "=", "stack", ".", "pop", "(", ")", "\n", "if", "jidx", "==", "0", ":", "\n", "                ", "m", "=", "marks", ".", "get", "(", "i", ",", "0", ")", "\n", "if", "m", "==", "0", ":", "\n", "                    ", "marks", "[", "i", "]", "=", "1", "\n", "", "elif", "m", "==", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"not a dag\"", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "ps", "=", "get_parents", "(", "i", ")", "\n", "if", "jidx", "==", "len", "(", "ps", ")", ":", "\n", "                ", "marks", "[", "i", "]", "=", "2", "\n", "out", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "stack", ".", "append", "(", "(", "i", ",", "jidx", "+", "1", ")", ")", "\n", "j", "=", "ps", "[", "jidx", "]", "\n", "stack", ".", "append", "(", "(", "j", ",", "0", ")", ")", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var_shape": [[561, 566], ["x.get_shape().as_list", "all", "x.get_shape", "isinstance"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all"], ["", "def", "var_shape", "(", "x", ")", ":", "\n", "    ", "out", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "a", ",", "int", ")", "for", "a", "in", "out", ")", ",", "\"shape function assumes that shape is fully known\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.numel": [[567, 569], ["tf_util.intprod", "tf_util.var_shape"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var_shape"], ["", "def", "numel", "(", "x", ")", ":", "\n", "    ", "return", "intprod", "(", "var_shape", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod": [[570, 572], ["int", "numpy.prod"], "function", ["None"], ["", "def", "intprod", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "prod", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.flatgrad": [[573, 580], ["tensorflow.gradients", "tensorflow.concat", "tensorflow.clip_by_norm", "tensorflow.reshape", "zip", "tensorflow.zeros_like", "tf_util.numel"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.numel"], ["", "def", "flatgrad", "(", "loss", ",", "var_list", ",", "clip_norm", "=", "None", ")", ":", "\n", "    ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "if", "clip_norm", "is", "not", "None", ":", "\n", "        ", "grads", "=", "[", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_norm", "=", "clip_norm", ")", "for", "grad", "in", "grads", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "\n", "tf", ".", "reshape", "(", "grad", "if", "grad", "is", "not", "None", "else", "tf", ".", "zeros_like", "(", "v", ")", ",", "[", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.fancy_slice_2d": [[611, 622], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.gather", "tensorflow.shape"], "function", ["None"], ["", "", "def", "fancy_slice_2d", "(", "X", ",", "inds0", ",", "inds1", ")", ":", "\n", "    ", "\"\"\"\n    like numpy X[inds0, inds1]\n    XXX this implementation is bad\n    \"\"\"", "\n", "inds0", "=", "tf", ".", "cast", "(", "inds0", ",", "tf", ".", "int64", ")", "\n", "inds1", "=", "tf", ".", "cast", "(", "inds1", ",", "tf", ".", "int64", ")", "\n", "shape", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "X", ")", ",", "tf", ".", "int64", ")", "\n", "ncols", "=", "shape", "[", "1", "]", "\n", "Xflat", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "gather", "(", "Xflat", ",", "inds0", "*", "ncols", "+", "inds1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.scope_vars": [[627, 647], ["tensorflow.get_collection", "isinstance"], "function", ["None"], ["", "def", "scope_vars", "(", "scope", ",", "trainable_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Get variables inside a scope\n    The scope can be specified as a string\n\n    Parameters\n    ----------\n    scope: str or VariableScope\n        scope in which the variables reside.\n    trainable_only: bool\n        whether or not to return only the variables that were marked as trainable.\n\n    Returns\n    -------\n    vars: [tf.Variable]\n        list of variables in `scope`.\n    \"\"\"", "\n", "return", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", "if", "trainable_only", "else", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "scope", "if", "isinstance", "(", "scope", ",", "str", ")", "else", "scope", ".", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.scope_name": [[649, 652], ["tensorflow.get_variable_scope"], "function", ["None"], ["", "def", "scope_name", "(", ")", ":", "\n", "    ", "\"\"\"Returns the name of current scope as a string, e.g. deepq/q_func\"\"\"", "\n", "return", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.absolute_scope_name": [[653, 656], ["tf_util.scope_name"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.scope_name"], ["", "def", "absolute_scope_name", "(", "relative_scope_name", ")", ":", "\n", "    ", "\"\"\"Appends parent scope name to `relative_scope_name`\"\"\"", "\n", "return", "scope_name", "(", ")", "+", "\"/\"", "+", "relative_scope_name", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.lengths_to_mask": [[657, 673], ["tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tf.convert_to_tensor.get_shape", "tensorflow.range"], "function", ["None"], ["", "def", "lengths_to_mask", "(", "lengths_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"\n    Turns a vector of lengths into a boolean mask\n\n    Args:\n        lengths_b: an integer vector of lengths\n        max_length: maximum length to fill the mask\n\n    Returns:\n        a boolean array of shape (batch_size, max_length)\n        row[i] consists of True repeated lengths_b[i] times, followed by False\n    \"\"\"", "\n", "lengths_b", "=", "tf", ".", "convert_to_tensor", "(", "lengths_b", ")", "\n", "assert", "lengths_b", ".", "get_shape", "(", ")", ".", "ndims", "==", "1", "\n", "mask_bt", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "max_length", ")", ",", "0", ")", "<", "tf", ".", "expand_dims", "(", "lengths_b", ",", "1", ")", "\n", "return", "mask_bt", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.in_session": [[674, 680], ["functools.wraps", "tensorflow.Session", "f"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.disc.AIRLDiscrim.f"], ["", "def", "in_session", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "newfunc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", ":", "\n", "            ", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "newfunc", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_placeholder": [[683, 692], ["tensorflow.placeholder"], "function", ["None"], ["def", "get_placeholder", "(", "name", ",", "dtype", ",", "shape", ")", ":", "\n", "    ", "if", "name", "in", "_PLACEHOLDER_CACHE", ":", "\n", "        ", "out", ",", "dtype1", ",", "shape1", "=", "_PLACEHOLDER_CACHE", "[", "name", "]", "\n", "assert", "dtype1", "==", "dtype", "and", "shape1", "==", "shape", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "_PLACEHOLDER_CACHE", "[", "name", "]", "=", "(", "out", ",", "dtype", ",", "shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_placeholder_cached": [[693, 695], ["None"], "function", ["None"], ["", "", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n", "    ", "return", "_PLACEHOLDER_CACHE", "[", "name", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.flattenallbut0": [[696, 698], ["tensorflow.reshape", "tf_util.intprod", "x.get_shape().as_list", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.intprod"], ["", "def", "flattenallbut0", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "intprod", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.reset": [[699, 705], ["tensorflow.reset_default_graph"], "function", ["None"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "global", "_PLACEHOLDER_CACHE", "\n", "global", "VARIABLES", "\n", "_PLACEHOLDER_CACHE", "=", "{", "}", "\n", "VARIABLES", "=", "{", "}", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.cg.cg": [[2, 35], ["b.copy", "b.copy", "numpy.zeros_like", "b.copy.dot", "range", "print", "f_Ax", "b.copy.dot", "callback", "print", "callback", "print", "b.copy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.callback", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.play.PlayPlot.callback", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["def", "cg", "(", "f_Ax", ",", "b", ",", "cg_iters", "=", "10", ",", "callback", "=", "None", ",", "verbose", "=", "False", ",", "residual_tol", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    Demmel p 312\n    \"\"\"", "\n", "p", "=", "b", ".", "copy", "(", ")", "\n", "r", "=", "b", ".", "copy", "(", ")", "\n", "x", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "rdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "\n", "fmtstr", "=", "\"%10i %10.3g %10.3g\"", "\n", "titlestr", "=", "\"%10s %10s %10s\"", "\n", "if", "verbose", ":", "print", "(", "titlestr", "%", "(", "\"iter\"", ",", "\"residual norm\"", ",", "\"soln norm\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cg_iters", ")", ":", "\n", "        ", "if", "callback", "is", "not", "None", ":", "\n", "            ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "z", "=", "f_Ax", "(", "p", ")", "\n", "v", "=", "rdotr", "/", "p", ".", "dot", "(", "z", ")", "\n", "x", "+=", "v", "*", "p", "\n", "r", "-=", "v", "*", "z", "\n", "newrdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "mu", "=", "newrdotr", "/", "rdotr", "\n", "p", "=", "r", "+", "mu", "*", "p", "\n", "\n", "rdotr", "=", "newrdotr", "\n", "if", "rdotr", "<", "residual_tol", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "callback", "is", "not", "None", ":", "\n", "        ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", "+", "1", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "# pylint: disable=W0631", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.NoopResetEnv.__init__": [[8, 17], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_action_meanings"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.NoopResetEnv._reset": [[18, 32], ["atari_wrappers.NoopResetEnv.env.reset", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "#pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FireResetEnv.__init__": [[34, 39], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_action_meanings", "home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_action_meanings"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FireResetEnv._reset": [[40, 49], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "_reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.EpisodicLifeEnv.__init__": [[51, 58], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.EpisodicLifeEnv._step": [[59, 72], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert somtimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.EpisodicLifeEnv._reset": [[73, 85], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "_reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.MaxAndSkipEnv.__init__": [[87, 93], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "'uint8'", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.MaxAndSkipEnv._step": [[94, 110], ["range", "atari_wrappers.MaxAndSkipEnv._obs_buffer.max", "atari_wrappers.MaxAndSkipEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.ClipRewardEnv._reward": [[112, 115], ["numpy.sign"], "methods", ["None"], ["    ", "def", "_reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.WarpFrame.__init__": [[117, 123], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Warp frames to 84x84 as done in the Nature paper and later work.\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "84", "\n", "self", ".", "height", "=", "84", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.WarpFrame._observation": [[124, 128], ["cv2.cvtColor", "cv2.resize"], "methods", ["None"], ["", "def", "_observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.TransitionEnvWrapper.__init__": [[130, 138], ["gym.Wrapper.__init__", "numpy.sum", "hasattr", "list", "env.unwrapped.ob_shape.items", "numpy.prod", "atari_wrappers.TransitionEnvWrapper.ob_shape.values"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "ob_type", "=", "env", ".", "unwrapped", ".", "ob_type", "\n", "self", ".", "ob_shape", "=", "{", "key", ":", "list", "(", "value", ")", "for", "key", ",", "value", "in", "env", ".", "unwrapped", ".", "ob_shape", ".", "items", "(", ")", "}", "\n", "self", ".", "_ob_space", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "ob", ")", "for", "ob", "in", "self", ".", "ob_shape", ".", "values", "(", ")", "]", ")", "\n", "\n", "self", ".", "hard_coded", "=", "hasattr", "(", "env", ".", "unwrapped", ",", "'act'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.TransitionEnvWrapper.reset": [[139, 141], ["atari_wrappers.TransitionEnvWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.TransitionEnvWrapper.step": [[142, 144], ["atari_wrappers.TransitionEnvWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.TransitionEnvWrapper.get_ob_dict": [[145, 151], ["numpy.reshape", "atari_wrappers.TransitionEnvWrapper.env.unwrapped.get_ob_dict", "numpy.array", "numpy.reshape", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.get_ob_dict"], ["", "def", "get_ob_dict", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "obs", ")", ",", "[", "-", "1", ",", "self", ".", "_ob_space", "]", ")", "\n", "ob_dict", "=", "self", ".", "env", ".", "unwrapped", ".", "get_ob_dict", "(", "obs", ")", "\n", "for", "key", "in", "self", ".", "ob_type", ":", "\n", "            ", "ob_dict", "[", "key", "]", "=", "np", ".", "reshape", "(", "ob_dict", "[", "key", "]", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "self", ".", "ob_shape", "[", "key", "]", ")", "]", ")", "\n", "", "return", "ob_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.__init__": [[153, 176], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box", "numpy.sum", "atari_wrappers.FrameStack_Mujoco.ob_shape.items", "list", "atari_wrappers.FrameStack_Mujoco.env.unwrapped.ob_shape.items", "numpy.prod", "atari_wrappers.FrameStack_Mujoco.ob_shape.values"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n\n        Returns lazy array, which is much more memory efficient.\n\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames_Mujoco\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "# Tricky part: if use `self.stacked_obs = True` won't change the variable", "\n", "self", ".", "unwrapped", ".", "stacked_obs", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "# add the original observation space", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "[", "shp", "[", "0", "]", "]", "*", "k", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "ob_type", "=", "self", ".", "env", ".", "unwrapped", ".", "ob_type", "\n", "self", ".", "ob_shape", "=", "{", "key", ":", "list", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "env", ".", "unwrapped", ".", "ob_shape", ".", "items", "(", ")", "}", "\n", "self", ".", "_ob_space", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "ob", ")", "for", "ob", "in", "self", ".", "ob_shape", ".", "values", "(", ")", "]", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "ob_shape", ".", "items", "(", ")", ":", "\n", "            ", "value", "[", "-", "1", "]", "*=", "self", ".", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco._reset": [[177, 182], ["atari_wrappers.FrameStack_Mujoco.env.reset", "range", "atari_wrappers.FrameStack_Mujoco._get_ob", "atari_wrappers.FrameStack_Mujoco.frames.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.reset": [[183, 185], ["atari_wrappers.FrameStack_Mujoco._reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco._step": [[186, 190], ["atari_wrappers.FrameStack_Mujoco.env.step", "atari_wrappers.FrameStack_Mujoco.frames.append", "atari_wrappers.FrameStack_Mujoco._get_ob"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.step": [[191, 193], ["atari_wrappers.FrameStack_Mujoco._step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "_step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco._get_ob": [[194, 197], ["numpy.reshape", "len", "numpy.array", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "np", ".", "reshape", "(", "np", ".", "array", "(", "list", "(", "self", ".", "frames", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "#return LazyFrames_Mujoco(list(self.frames))", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.get_ob_dict": [[199, 206], ["numpy.reshape", "atari_wrappers.FrameStack_Mujoco.env.unwrapped.get_ob_dict", "numpy.array", "numpy.reshape", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.get_ob_dict"], ["", "def", "get_ob_dict", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "obs", ")", ",", "[", "-", "1", ",", "self", ".", "_ob_space", "]", ")", "\n", "assert", "obs", ".", "shape", "[", "0", "]", "%", "self", ".", "k", "==", "0", "\n", "ob_dict", "=", "self", ".", "env", ".", "unwrapped", ".", "get_ob_dict", "(", "obs", ")", "\n", "for", "key", "in", "self", ".", "ob_type", ":", "\n", "            ", "ob_dict", "[", "key", "]", "=", "np", ".", "reshape", "(", "ob_dict", "[", "key", "]", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "self", ".", "ob_shape", "[", "key", "]", ")", "]", ")", "\n", "", "return", "ob_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack.__init__": [[209, 223], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n\n        Returns lazy array, which is much more memory efficient.\n\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "shp", "[", "2", "]", "*", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._reset": [[224, 229], ["atari_wrappers.FrameStack.env.reset", "range", "atari_wrappers.FrameStack._get_ob", "atari_wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._step": [[230, 234], ["atari_wrappers.FrameStack.env.step", "atari_wrappers.FrameStack.frames.append", "atari_wrappers.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "_step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack._get_ob": [[235, 238], ["atari_wrappers.LazyFrames", "len", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "LazyFrames", "(", "list", "(", "self", ".", "frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.ScaledFloatFrame._observation": [[240, 244], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["    ", "def", "_observation", "(", "self", ",", "observation", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "        ", "return", "np", ".", "array", "(", "observation", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.LazyFrames_Mujoco.__init__": [[246, 255], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n\n        This object should only be converted to numpy array before being passed to the model.\n\n        You'd not believe how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.LazyFrames_Mujoco.__array__": [[256, 261], ["numpy.concatenate", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "0", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.LazyFrames.__init__": [[264, 273], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n\n        This object should only be converted to numpy array before being passed to the model.\n\n        You'd not believe how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.LazyFrames.__array__": [[274, 279], ["numpy.concatenate", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "2", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.make_atari": [[280, 286], ["gym.make", "atari_wrappers.NoopResetEnv", "atari_wrappers.MaxAndSkipEnv"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make"], ["", "", "def", "make_atari", "(", "env_id", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.wrap_deepmind": [[287, 302], ["atari_wrappers.WarpFrame", "atari_wrappers.EpisodicLifeEnv", "FrameStack.unwrapped.get_action_meanings", "atari_wrappers.FireResetEnv", "atari_wrappers.ScaledFloatFrame", "atari_wrappers.ClipRewardEnv", "atari_wrappers.FrameStack"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.atari.atari_env.AtariEnv.get_action_meanings"], ["", "def", "wrap_deepmind", "(", "env", ",", "episode_life", "=", "True", ",", "clip_rewards", "=", "True", ",", "frame_stack", "=", "False", ",", "scale", "=", "False", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\n    \"\"\"", "\n", "if", "episode_life", ":", "\n", "        ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "if", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ")", "\n", "if", "scale", ":", "\n", "        ", "env", "=", "ScaledFloatFrame", "(", "env", ")", "\n", "", "if", "clip_rewards", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "", "if", "frame_stack", ":", "\n", "        ", "env", "=", "FrameStack", "(", "env", ",", "4", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_running_mean_std.RunningMeanStd.__init__": [[6, 35], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.to_float", "tensorflow.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.function", "tensorflow.maximum", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.to_float", "tensorflow.square", "tensorflow.assign_add", "tensorflow.assign_add", "tensorflow.assign_add"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-2", ",", "shape", "=", "(", ")", ")", ":", "\n", "\n", "        ", "self", ".", "_sum", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "name", "=", "\"runningsum\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_sumsq", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"runningsumsq\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_count", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"count\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n", "self", ".", "mean", "=", "tf", ".", "to_float", "(", "self", ".", "_sum", "/", "self", ".", "_count", ")", "\n", "self", ".", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "to_float", "(", "self", ".", "_sumsq", "/", "self", ".", "_count", ")", "-", "tf", ".", "square", "(", "self", ".", "mean", ")", ",", "1e-2", ")", ")", "\n", "\n", "newsum", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'sum'", ")", "\n", "newsumsq", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'var'", ")", "\n", "newcount", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'count'", ")", "\n", "self", ".", "incfiltparams", "=", "U", ".", "function", "(", "[", "newsum", ",", "newsumsq", ",", "newcount", "]", ",", "[", "]", ",", "\n", "updates", "=", "[", "tf", ".", "assign_add", "(", "self", ".", "_sum", ",", "newsum", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_sumsq", ",", "newsumsq", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_count", ",", "newcount", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_running_mean_std.RunningMeanStd.update": [[37, 44], ["x.astype.astype.astype", "int", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi_running_mean_std.RunningMeanStd.incfiltparams", "numpy.prod", "totalvec[].reshape", "totalvec[].reshape", "x.astype.astype.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "x.astype.astype.sum", "numpy.square().sum", "len", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "astype", "(", "'float64'", ")", "\n", "n", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "shape", ")", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "x", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "square", "(", "x", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "array", "(", "[", "len", "(", "x", ")", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "self", ".", "incfiltparams", "(", "totalvec", "[", "0", ":", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "n", ":", "2", "*", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "2", "*", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_running_mean_std.RunningMeanStd.noupdate": [[45, 52], ["int", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi_running_mean_std.RunningMeanStd.incfiltparams", "numpy.prod", "totalvec[].reshape", "totalvec[].reshape", "numpy.zeros.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "numpy.zeros.sum", "numpy.square().sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "noupdate", "(", "self", ")", ":", "\n", "        ", "n", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "shape", ")", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "1", ",", "n", ")", ",", "'float64'", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "zeros", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "square", "(", "zeros", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "self", ".", "incfiltparams", "(", "totalvec", "[", "0", ":", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "n", ":", "2", "*", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "2", "*", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_running_mean_std.test_runningmeanstd": [[53, 71], ["mpi_running_mean_std.RunningMeanStd", "baselines.initialize", "numpy.concatenate", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "baselines.eval", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.std"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.initialize", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.eval", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.std"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "std", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "U", ".", "eval", "(", "[", "rms", ".", "mean", ",", "rms", ".", "std", "]", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.common.mpi_running_mean_std.test_dist": [[72, 110], ["numpy.random.seed", "mpi_running_mean_std.RunningMeanStd", "baselines.initialize", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "numpy.concatenate", "mpi_running_mean_std.test_dist.checkallclose"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.initialize", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_dist", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "p1", ",", "p2", ",", "p3", "=", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "1", ")", ")", "\n", "q1", ",", "q2", ",", "q3", "=", "(", "np", ".", "random", ".", "randn", "(", "6", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "7", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "8", ",", "1", ")", ")", "\n", "\n", "# p1,p2,p3=(np.random.randn(3), np.random.randn(4), np.random.randn(5))", "\n", "# q1,q2,q3=(np.random.randn(6), np.random.randn(7), np.random.randn(8))", "\n", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "assert", "comm", ".", "Get_size", "(", ")", "==", "2", "\n", "if", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "p1", ",", "p2", ",", "p3", "\n", "", "elif", "comm", ".", "Get_rank", "(", ")", "==", "1", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "q1", ",", "q2", ",", "q3", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "\n", "bigvec", "=", "np", ".", "concatenate", "(", "[", "p1", ",", "p2", ",", "p3", ",", "q1", ",", "q2", ",", "q3", "]", ")", "\n", "\n", "def", "checkallclose", "(", "x", ",", "y", ")", ":", "\n", "        ", "print", "(", "x", ",", "y", ")", "\n", "return", "np", ".", "allclose", "(", "x", ",", "y", ")", "\n", "\n", "", "assert", "checkallclose", "(", "\n", "bigvec", ".", "mean", "(", "axis", "=", "0", ")", ",", "\n", "U", ".", "eval", "(", "rms", ".", "mean", ")", "\n", ")", "\n", "assert", "checkallclose", "(", "\n", "bigvec", ".", "std", "(", "axis", "=", "0", ")", ",", "\n", "U", ".", "eval", "(", "rms", ".", "std", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.__init__": [[9, 18], ["numpy.repeat", "numpy.repeat", "numpy.zeros", "gym.spaces.Box"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "venv", ",", "nstack", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "nstack", "=", "nstack", "\n", "wos", "=", "venv", ".", "observation_space", "# wrapped ob space", "\n", "low", "=", "np", ".", "repeat", "(", "wos", ".", "low", ",", "self", ".", "nstack", ",", "axis", "=", "-", "1", ")", "\n", "high", "=", "np", ".", "repeat", "(", "wos", ".", "high", ",", "self", ".", "nstack", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "stackedobs", "=", "np", ".", "zeros", "(", "(", "venv", ".", "num_envs", ",", ")", "+", "low", ".", "shape", ",", "low", ".", "dtype", ")", "\n", "self", ".", "_observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "self", ".", "_action_space", "=", "venv", ".", "action_space", "\n", "", "def", "step", "(", "self", ",", "vac", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.step": [[18, 32], ["vec_frame_stack.VecFrameStack.venv.step", "numpy.roll", "enumerate"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["", "def", "step", "(", "self", ",", "vac", ")", ":", "\n", "        ", "\"\"\"\n        Apply sequence of actions to sequence of environments\n        actions -> (observations, rewards, news)\n\n        where 'news' is a boolean vector indicating whether each element is new.\n        \"\"\"", "\n", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step", "(", "vac", ")", "\n", "self", ".", "stackedobs", "=", "np", ".", "roll", "(", "self", ".", "stackedobs", ",", "shift", "=", "-", "1", ",", "axis", "=", "-", "1", ")", "\n", "for", "(", "i", ",", "new", ")", "in", "enumerate", "(", "news", ")", ":", "\n", "            ", "if", "new", ":", "\n", "                ", "self", ".", "stackedobs", "[", "i", "]", "=", "0", "\n", "", "", "self", ".", "stackedobs", "[", "...", ",", "-", "obs", ".", "shape", "[", "-", "1", "]", ":", "]", "=", "obs", "\n", "return", "self", ".", "stackedobs", ",", "rews", ",", "news", ",", "infos", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.reset": [[32, 40], ["vec_frame_stack.VecFrameStack.venv.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "stackedobs", "[", "...", "]", "=", "0", "\n", "self", ".", "stackedobs", "[", "...", ",", "-", "obs", ".", "shape", "[", "-", "1", "]", ":", "]", "=", "obs", "\n", "return", "self", ".", "stackedobs", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.action_space": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.observation_space": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "", "def", "close", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.close": [[46, 48], ["vec_frame_stack.VecFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_frame_stack.VecFrameStack.num_envs": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "num_envs", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.CloudpickleWrapper.__init__": [[35, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.CloudpickleWrapper.__getstate__": [[37, 40], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "x", ")", "\n", "", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.CloudpickleWrapper.__setstate__": [[40, 43], ["pickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n", "        ", "import", "pickle", "\n", "self", ".", "x", "=", "pickle", ".", "loads", "(", "ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.__init__": [[46, 63], ["len", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "multiprocessing.Process", "p.start", "remote.close", "zip", "multiprocessing.Pipe", "range", "subproc_vec_env.CloudpickleWrapper"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.video_recorder.ImageEncoder.start", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "\"\"\"\n        envs: list of gym environments to run in subprocesses\n        \"\"\"", "\n", "self", ".", "closed", "=", "False", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nenvs", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "# if the main process crashes, we should not cause things to hang", "\n", "p", ".", "start", "(", ")", "\n", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces'", ",", "None", ")", ")", "\n", "self", ".", "action_space", ",", "self", ".", "observation_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.step": [[65, 71], ["zip", "zip", "remote.send", "remote.recv", "numpy.stack", "numpy.stack", "numpy.stack"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.reset": [[72, 76], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.reset_task": [[77, 81], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset_task", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset_task'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.close": [[82, 91], ["remote.send", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "\n", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.num_envs": [[92, 95], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "remotes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.worker": [[6, 29], ["parent_remote.close", "env_fn_wrapper.x", "remote.recv", "env_fn_wrapper.x.step", "remote.send", "env_fn_wrapper.x.reset", "env_fn_wrapper.x.reset", "remote.send", "env_fn_wrapper.x.reset_task", "remote.send", "remote.close", "remote.send"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.subproc_vec_env.SubprocVecEnv.reset_task", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["def", "worker", "(", "remote", ",", "parent_remote", ",", "env_fn_wrapper", ")", ":", "\n", "    ", "parent_remote", ".", "close", "(", ")", "\n", "env", "=", "env_fn_wrapper", ".", "x", "(", ")", "\n", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "'step'", ":", "\n", "            ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "remote", ".", "send", "(", "(", "ob", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "            ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'reset_task'", ":", "\n", "            ", "ob", "=", "env", ".", "reset_task", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces'", ":", "\n", "            ", "remote", ".", "send", "(", "(", "env", ".", "action_space", ",", "env", ".", "observation_space", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.dummy_vec_env.DummyVecEnv.__init__": [[5, 11], ["numpy.zeros", "fn", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "self", ".", "action_space", "=", "env", ".", "action_space", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", "\n", "self", ".", "ts", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "envs", ")", ",", "dtype", "=", "'int'", ")", "\n", "", "def", "step", "(", "self", ",", "action_n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.dummy_vec_env.DummyVecEnv.step": [[11, 20], ["map", "enumerate", "env.step", "zip", "numpy.array", "numpy.array", "numpy.array", "zip", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "step", "(", "self", ",", "action_n", ")", ":", "\n", "        ", "results", "=", "[", "env", ".", "step", "(", "a", ")", "for", "(", "a", ",", "env", ")", "in", "zip", "(", "action_n", ",", "self", ".", "envs", ")", "]", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "map", "(", "np", ".", "array", ",", "zip", "(", "*", "results", ")", ")", "\n", "self", ".", "ts", "+=", "1", "\n", "for", "(", "i", ",", "done", ")", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "obs", "[", "i", "]", "=", "self", ".", "envs", "[", "i", "]", ".", "reset", "(", ")", "\n", "self", ".", "ts", "[", "i", "]", "=", "0", "\n", "", "", "return", "np", ".", "array", "(", "obs", ")", ",", "np", ".", "array", "(", "rews", ")", ",", "np", ".", "array", "(", "dones", ")", ",", "infos", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.dummy_vec_env.DummyVecEnv.reset": [[20, 23], ["numpy.array", "env.reset"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "env", ".", "reset", "(", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "return", "np", ".", "array", "(", "results", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.dummy_vec_env.DummyVecEnv.num_envs": [[23, 26], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "envs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.__init__": [[9, 20], ["numpy.zeros", "vec_normalize.RunningMeanStd", "vec_normalize.RunningMeanStd"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "venv", ",", "ob", "=", "True", ",", "ret", "=", "True", ",", "clipob", "=", "10.", ",", "cliprew", "=", "10.", ",", "gamma", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "_observation_space", "=", "self", ".", "venv", ".", "observation_space", "\n", "self", ".", "_action_space", "=", "venv", ".", "action_space", "\n", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "_observation_space", ".", "shape", ")", "if", "ob", "else", "None", "\n", "self", ".", "ret_rms", "=", "RunningMeanStd", "(", "shape", "=", "(", ")", ")", "if", "ret", "else", "None", "\n", "self", ".", "clipob", "=", "clipob", "\n", "self", ".", "cliprew", "=", "cliprew", "\n", "self", ".", "ret", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "", "def", "step", "(", "self", ",", "vac", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.step": [[20, 34], ["vec_normalize.VecNormalize.venv.step", "vec_normalize.VecNormalize._obfilt", "vec_normalize.VecNormalize.ret_rms.update", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize._obfilt", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["", "def", "step", "(", "self", ",", "vac", ")", ":", "\n", "        ", "\"\"\"\n        Apply sequence of actions to sequence of environments\n        actions -> (observations, rewards, news)\n\n        where 'news' is a boolean vector indicating whether each element is new.\n        \"\"\"", "\n", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step", "(", "vac", ")", "\n", "self", ".", "ret", "=", "self", ".", "ret", "*", "self", ".", "gamma", "+", "rews", "\n", "obs", "=", "self", ".", "_obfilt", "(", "obs", ")", "\n", "if", "self", ".", "ret_rms", ":", "\n", "            ", "self", ".", "ret_rms", ".", "update", "(", "self", ".", "ret", ")", "\n", "rews", "=", "np", ".", "clip", "(", "rews", "/", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "cliprew", ",", "self", ".", "cliprew", ")", "\n", "", "return", "obs", ",", "rews", ",", "news", ",", "infos", "\n", "", "def", "_obfilt", "(", "self", ",", "obs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize._obfilt": [[34, 41], ["vec_normalize.VecNormalize.ob_rms.update", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["", "def", "_obfilt", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "self", ".", "ob_rms", ".", "update", "(", "obs", ")", "\n", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "return", "obs", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.reset": [[41, 47], ["vec_normalize.VecNormalize.venv.reset", "vec_normalize.VecNormalize._obfilt"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize._obfilt"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "return", "self", ".", "_obfilt", "(", "obs", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.action_space": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.observation_space": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "", "def", "close", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.close": [[53, 55], ["vec_normalize.VecNormalize.venv.close"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.VecNormalize.num_envs": [[55, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.RunningMeanStd.__init__": [[63, 67], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "var", "=", "np", ".", "zeros", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.RunningMeanStd.update": [[69, 88], ["numpy.mean", "numpy.var", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "(", "self", ".", "count", ")", "\n", "m_b", "=", "batch_var", "*", "(", "batch_count", ")", "\n", "M2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "M2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.vec_normalize.test_runningmeanstd": [[89, 105], ["vec_normalize.RunningMeanStd", "numpy.concatenate", "baselines.common.running_mean_std.RunningMeanStd.update", "baselines.common.running_mean_std.RunningMeanStd.update", "baselines.common.running_mean_std.RunningMeanStd.update", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.var"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.var"], ["", "", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "var", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "[", "rms", ".", "mean", ",", "rms", ".", "var", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.step": [[5, 13], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset": [[13, 18], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close": [[18, 20], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.__init__": [[15, 42], ["rl.activation", "rl.util.make_env", "sorted", "numpy.sum", "rl.util.make_env.close", "mlp_policy.MlpPolicy._ob_shape.pop", "mlp_policy.MlpPolicy.ob_type.remove", "tensorflow.variable_scope", "mlp_policy.MlpPolicy._build", "numpy.prod", "tensorflow.get_variable_scope", "mlp_policy.MlpPolicy._ob_shape.values"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.ops.activation", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy._build"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "env", ",", "ob_env_name", ",", "config", ")", ":", "\n", "# args", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n", "# training", "\n", "self", ".", "_hid_size", "=", "config", ".", "rl_hid_size", "\n", "self", ".", "_num_hid_layers", "=", "config", ".", "rl_num_hid_layers", "\n", "self", ".", "_gaussian_fixed_var", "=", "config", ".", "rl_fixed_var", "\n", "self", ".", "_activation", "=", "ops", ".", "activation", "(", "config", ".", "rl_activation", ")", "\n", "self", ".", "_include_acc", "=", "config", ".", "primitive_include_acc", "\n", "\n", "# properties", "\n", "primitive_env", "=", "make_env", "(", "ob_env_name", ")", "\n", "self", ".", "_ob_shape", "=", "primitive_env", ".", "ob_shape", "\n", "self", ".", "ob_type", "=", "sorted", "(", "primitive_env", ".", "ob_type", ")", "\n", "if", "not", "self", ".", "_include_acc", "and", "'acc'", "in", "self", ".", "ob_type", ":", "\n", "            ", "self", ".", "_ob_shape", ".", "pop", "(", "'acc'", ")", "\n", "self", ".", "ob_type", ".", "remove", "(", "'acc'", ")", "\n", "\n", "", "self", ".", "_env", "=", "env", "\n", "self", ".", "_ob_space", "=", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "ob", ")", "for", "ob", "in", "self", ".", "_ob_shape", ".", "values", "(", ")", "]", ")", "\n", "self", ".", "_ac_space", "=", "primitive_env", ".", "action_space", "\n", "primitive_env", ".", "close", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy._build": [[43, 104], ["mlp_policy.MlpPolicy._ob_shape.items", "tensorflow.concat", "baselines.common.distributions.make_pdtype", "baselines.common.distributions.make_pdtype.pdfromflat", "tensorflow.placeholder", "baselines.switch", "baselines.function", "baselines.function", "baselines.get_placeholder", "tensorflow.clip_by_value", "tensorflow.variable_scope", "range", "tensorflow.variable_scope", "range", "mlp_policy.MlpPolicy.pd.sample", "mlp_policy.MlpPolicy.pd.mode", "tensorflow.variable_scope", "baselines.common.mpi_running_mean_std.RunningMeanStd", "mlp_policy.MlpPolicy._activation", "tensorflow.layers.dense", "mlp_policy.MlpPolicy._activation", "isinstance", "tensorflow.layers.dense", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "baselines.normc_initializer", "baselines.normc_initializer", "tensorflow.zeros_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.normc_initializer", "baselines.common.distributions.make_pdtype.param_shape", "baselines.common.distributions.make_pdtype.param_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.make_pdtype", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.switch", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.function", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.get_placeholder", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPd.mode", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.dense", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.normc_initializer", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.param_shape", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.distributions.BernoulliPdType.param_shape"], ["", "", "def", "_build", "(", "self", ")", ":", "\n", "        ", "ac_space", "=", "self", ".", "_ac_space", "\n", "num_hid_layers", "=", "self", ".", "_num_hid_layers", "\n", "hid_size", "=", "self", ".", "_hid_size", "\n", "gaussian_fixed_var", "=", "self", ".", "_gaussian_fixed_var", "\n", "\n", "# obs", "\n", "self", ".", "_obs", "=", "{", "}", "\n", "for", "ob_name", ",", "ob_shape", "in", "self", ".", "_ob_shape", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_obs", "[", "ob_name", "]", "=", "U", ".", "get_placeholder", "(", "\n", "name", "=", "\"ob_{}\"", ".", "format", "(", "ob_name", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", "]", "+", "self", ".", "_ob_shape", "[", "ob_name", "]", ")", "\n", "\n", "# obs normalization", "\n", "", "self", ".", "ob_rms", "=", "{", "}", "\n", "for", "ob_name", "in", "self", ".", "ob_type", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"ob_rms_{}\"", ".", "format", "(", "ob_name", ")", ")", ":", "\n", "                ", "self", ".", "ob_rms", "[", "ob_name", "]", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "_ob_shape", "[", "ob_name", "]", ")", "\n", "", "", "obz", "=", "[", "(", "self", ".", "_obs", "[", "ob_name", "]", "-", "self", ".", "ob_rms", "[", "ob_name", "]", ".", "mean", ")", "/", "self", ".", "ob_rms", "[", "ob_name", "]", ".", "std", "\n", "for", "ob_name", "in", "self", ".", "ob_type", "]", "\n", "obz", "=", "[", "tf", ".", "clip_by_value", "(", "ob", ",", "-", "5.0", ",", "5.0", ")", "for", "ob", "in", "obz", "]", "\n", "obz", "=", "tf", ".", "concat", "(", "obz", ",", "-", "1", ")", "\n", "\n", "# value function", "\n", "with", "tf", ".", "variable_scope", "(", "'vf'", ")", ":", "\n", "            ", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "                ", "last_out", "=", "self", ".", "_activation", "(", "\n", "tf", ".", "layers", ".", "dense", "(", "last_out", ",", "hid_size", ",", "name", "=", "\"fc%i\"", "%", "(", "i", "+", "1", ")", ",", "\n", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "", "self", ".", "vpred", "=", "tf", ".", "layers", ".", "dense", "(", "last_out", ",", "1", ",", "name", "=", "\"final\"", ",", "\n", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", "[", ":", ",", "0", "]", "\n", "\n", "# policy", "\n", "", "self", ".", "pdtype", "=", "pdtype", "=", "make_pdtype", "(", "ac_space", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'pol'", ")", ":", "\n", "            ", "last_out", "=", "obz", "\n", "for", "i", "in", "range", "(", "num_hid_layers", ")", ":", "\n", "                ", "last_out", "=", "self", ".", "_activation", "(", "\n", "tf", ".", "layers", ".", "dense", "(", "last_out", ",", "hid_size", ",", "name", "=", "\"fc%i\"", "%", "(", "i", "+", "1", ")", ",", "\n", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "1.0", ")", ")", ")", "\n", "\n", "", "if", "gaussian_fixed_var", "and", "isinstance", "(", "ac_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "                ", "mean", "=", "tf", ".", "layers", ".", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", ",", "name", "=", "\"final\"", ",", "\n", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "logstd", "=", "tf", ".", "get_variable", "(", "name", "=", "\"logstd\"", ",", "\n", "shape", "=", "[", "1", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", "//", "2", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "pdparam", "=", "tf", ".", "concat", "(", "[", "mean", ",", "mean", "*", "0.0", "+", "logstd", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "pdparam", "=", "tf", ".", "layers", ".", "dense", "(", "last_out", ",", "pdtype", ".", "param_shape", "(", ")", "[", "0", "]", ",", "name", "=", "\"final\"", ",", "\n", "kernel_initializer", "=", "U", ".", "normc_initializer", "(", "0.01", ")", ")", "\n", "", "", "self", ".", "pd", "=", "pdtype", ".", "pdfromflat", "(", "pdparam", ")", "\n", "\n", "# sample action", "\n", "stochastic", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "ac", "=", "U", ".", "switch", "(", "stochastic", ",", "self", ".", "pd", ".", "sample", "(", ")", ",", "self", ".", "pd", ".", "mode", "(", ")", ")", "\n", "self", ".", "obs", "=", "[", "self", ".", "_obs", "[", "ob_name", "]", "for", "ob_name", "in", "self", ".", "ob_type", "]", "\n", "self", ".", "_act", "=", "U", ".", "function", "(", "[", "stochastic", "]", "+", "self", ".", "obs", ",", "[", "ac", ",", "self", ".", "vpred", "]", ")", "\n", "self", ".", "_value", "=", "U", ".", "function", "(", "[", "stochastic", "]", "+", "self", ".", "obs", ",", "self", ".", "vpred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.act": [[105, 109], ["mlp_policy.MlpPolicy.get_ob_list", "mlp_policy.MlpPolicy._act"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_ob_list"], ["", "def", "act", "(", "self", ",", "ob", ",", "stochastic", ")", ":", "\n", "        ", "ob_list", "=", "self", ".", "get_ob_list", "(", "ob", ")", "\n", "ac", ",", "vpred", "=", "self", ".", "_act", "(", "stochastic", ",", "*", "ob_list", ")", "\n", "return", "ac", "[", "0", "]", ",", "vpred", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.value": [[110, 114], ["mlp_policy.MlpPolicy.get_ob_list", "mlp_policy.MlpPolicy._value"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_ob_list"], ["", "def", "value", "(", "self", ",", "stochastic", ",", "ob", ")", ":", "\n", "        ", "ob_list", "=", "self", ".", "get_ob_list", "(", "ob", ")", "\n", "vpred", "=", "self", ".", "_value", "(", "stochastic", ",", "*", "ob_list", ")", "\n", "return", "vpred", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_ob_list": [[115, 125], ["isinstance", "mlp_policy.MlpPolicy._env.get_ob_dict", "len", "ob_list.append", "ob_list.append"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.atari_wrappers.FrameStack_Mujoco.get_ob_dict", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "get_ob_list", "(", "self", ",", "ob", ")", ":", "\n", "        ", "ob_list", "=", "[", "]", "\n", "if", "not", "isinstance", "(", "ob", ",", "dict", ")", ":", "\n", "            ", "ob", "=", "self", ".", "_env", ".", "get_ob_dict", "(", "ob", ")", "\n", "", "for", "ob_name", "in", "self", ".", "ob_type", ":", "\n", "            ", "if", "len", "(", "ob", "[", "ob_name", "]", ".", "shape", ")", "==", "1", ":", "\n", "                ", "ob_list", ".", "append", "(", "ob", "[", "ob_name", "]", "[", "None", "]", ")", "\n", "", "else", ":", "\n", "                ", "ob_list", ".", "append", "(", "ob", "[", "ob_name", "]", ")", "\n", "", "", "return", "ob_list", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables": [[126, 128], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "self", ".", "_scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_trainable_variables": [[129, 131], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "get_trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "_scope", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.ops.activation": [[4, 17], ["tensorflow.contrib.keras.layers.LeakyReLU", "NotImplementedError"], "function", ["None"], ["def", "activation", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "'relu'", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "\n", "", "elif", "activation", "==", "'elu'", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "elu", "\n", "", "elif", "activation", "==", "'leaky'", ":", "\n", "        ", "return", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "LeakyReLU", "(", "0.2", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "        ", "return", "tf", ".", "tanh", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "        ", "return", "tf", ".", "sigmoid", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'{} is not implemented'", ".", "format", "(", "activation", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.__init__": [[8, 15], ["dataset.Dataset.shuffle", "next", "iter", "data_map.values"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "data_map", ",", "deterministic", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_map", "=", "data_map", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "enable_shuffle", "=", "shuffle", "\n", "self", ".", "n", "=", "next", "(", "iter", "(", "data_map", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "_next_id", "=", "0", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle": [[16, 26], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "self", ".", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.next_batch": [[27, 39], ["min", "dict", "dataset.Dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_next_id", ">=", "self", ".", "n", "and", "self", ".", "enable_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "cur_id", "=", "self", ".", "_next_id", "\n", "cur_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "_next_id", ")", "\n", "self", ".", "_next_id", "+=", "cur_batch_size", "\n", "\n", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "cur_id", ":", "cur_id", "+", "cur_batch_size", "]", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.iterate_once": [[40, 46], ["dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.next_batch"], ["", "def", "iterate_once", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "while", "self", ".", "_next_id", "<=", "self", ".", "n", "-", "batch_size", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.iterate_times": [[47, 53], ["range", "dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.next_batch"], ["", "def", "iterate_times", "(", "self", ",", "batch_size", ",", "times", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "times", ")", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.subset": [[54, 59], ["dict", "dataset.Dataset"], "methods", ["None"], ["", "def", "subset", "(", "self", ",", "num_elements", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", ":", "num_elements", "]", "\n", "", "return", "Dataset", "(", "data_map", ",", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.iterbatches": [[61, 72], ["tuple", "all", "numpy.arange", "numpy.array_split", "map", "numpy.random.shuffle", "numpy.arange", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.EnvRegistry.all", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.shuffle"], ["", "", "def", "iterbatches", "(", "arrays", ",", "*", ",", "num_batches", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "include_final_partial_batch", "=", "True", ")", ":", "\n", "    ", "assert", "(", "num_batches", "is", "None", ")", "!=", "(", "batch_size", "is", "None", ")", ",", "'Provide num_batches or batch_size, but not both'", "\n", "arrays", "=", "tuple", "(", "map", "(", "np", ".", "asarray", ",", "arrays", ")", ")", "\n", "n", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "assert", "all", "(", "a", ".", "shape", "[", "0", "]", "==", "n", "for", "a", "in", "arrays", "[", "1", ":", "]", ")", "\n", "inds", "=", "np", ".", "arange", "(", "n", ")", "\n", "if", "shuffle", ":", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "sections", "=", "np", ".", "arange", "(", "0", ",", "n", ",", "batch_size", ")", "[", "1", ":", "]", "if", "num_batches", "is", "None", "else", "num_batches", "\n", "for", "batch_inds", "in", "np", ".", "array_split", "(", "inds", ",", "sections", ")", ":", "\n", "        ", "if", "include_final_partial_batch", "or", "len", "(", "batch_inds", ")", "==", "batch_size", ":", "\n", "            ", "yield", "tuple", "(", "a", "[", "batch_inds", "]", "for", "a", "in", "arrays", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env": [[6, 26], ["gym.make", "gym.logger.setLevel", "baselines.common.atari_wrappers.TransitionEnvWrapper", "baselines.common.atari_wrappers.TransitionEnvWrapper.unwrapped.set_environment_config", "gym.logger.info", "gym.logger.info"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.base_env.BaseEnv.set_environment_config", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info"], ["def", "make_env", "(", "env_name", ",", "config", "=", "None", ")", ":", "\n", "    ", "import", "gym", "\n", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "gym", ".", "logger", ".", "setLevel", "(", "logging", ".", "WARN", ")", "\n", "if", "config", ":", "\n", "        ", "try", ":", "\n", "            ", "env", ".", "unwrapped", ".", "set_environment_config", "(", "config", ".", "env_args", ")", "\n", "gym", ".", "logger", ".", "info", "(", "\"Set the configuration to the environment: \"", "\n", "\"{}\"", ".", "format", "(", "config", ".", "env_args", ")", ")", "\n", "", "except", ":", "\n", "            ", "gym", ".", "logger", ".", "info", "(", "\"Can't set the configuration to the environment! \"", "\n", "\"Use the default setting instead of \"", "\n", "\"({})\"", ".", "format", "(", "config", ".", "env_args", ")", ")", "\n", "\n", "", "assert", "env", ".", "spec", ".", "max_episode_steps", "<=", "config", ".", "num_rollouts", ",", "'--num_rollouts ({}) should be larger than a game length ({})'", ".", "format", "(", "\n", "config", ".", "num_rollouts", ",", "env", ".", "spec", ".", "max_episode_steps", ")", "\n", "\n", "", "env", "=", "TransitionEnvWrapper", "(", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.Actor._distribution": [[90, 92], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.Actor._log_prob_from_distribution": [[93, 95], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.Actor.forward": [[96, 105], ["core.Actor._distribution", "core.Actor._log_prob_from_distribution"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._distribution", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._log_prob_from_distribution"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPCategoricalActor.__init__": [[109, 112], ["torch.Module.__init__", "core.mlp", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPCategoricalActor._distribution": [[113, 116], ["core.MLPCategoricalActor.logits_net", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPCategoricalActor._log_prob_from_distribution": [[117, 119], ["pi.log_prob"], "methods", ["None"], ["\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPGaussianActor.__init__": [[123, 141], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "core.mlp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.ones", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "list", "numpy.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["\n", "logger", ".", "warn", "(", "\"Could not seed environment %s\"", ",", "self", ")", "\n", "return", "\n", "\n", "", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPGaussianActor._distribution": [[146, 151], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "core.MLPGaussianActor.mu_net", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal"], "methods", ["None"], ["\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "spec", "is", "None", ":", "\n", "            ", "return", "'<{} instance>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "return", "'<{}<{}>>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "self", ".", "spec", ".", "id", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPGaussianActor._log_prob_from_distribution": [[152, 154], ["pi.log_prob().sum", "pi.log_prob"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["\n", "\n", "", "", "", "class", "GoalEnv", "(", "Env", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPGaussianActor.entropy": [[155, 157], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["    "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPGaussianActor.update": [[158, 165], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["\n", "\n", "def", "reset", "(", "self", ")", ":", "\n", "# Enforce that each GoalEnv uses a Goal-compatible observation space.", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPCritic.__init__": [[170, 183], ["torch.Module.__init__", "core.mlp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "list", "numpy.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["                ", "raise", "error", ".", "Error", "(", "'GoalEnv requires the \"{}\" key to be part of the observation dictionary.'", ".", "format", "(", "key", ")", ")", "\n", "", "", "return", "result", "\n", "\n", "", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPCritic.forward": [[186, 189], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "core.MLPCritic.v_net"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPCritic.update": [[190, 197], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# Space-related abstractions", "\n", "\n", "", "", "class", "Space", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPActorCritic.__init__": [[201, 216], ["torch.Module.__init__", "isinstance", "core.MLPCritic", "core.MLPGaussianActor", "isinstance", "core.MLPCategoricalActor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["        ", "import", "numpy", "as", "np", "# takes about 300-400ms to import, so we load lazily", "\n", "self", ".", "shape", "=", "None", "if", "shape", "is", "None", "else", "tuple", "(", "shape", ")", "\n", "self", ".", "dtype", "=", "None", "if", "dtype", "is", "None", "else", "np", ".", "dtype", "(", "dtype", ")", "\n", "\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Uniformly randomly sample a random element of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Return boolean specifying if x is a valid\n        member of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPActorCritic.step": [[217, 224], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "core.MLPActorCritic.pi._distribution", "core.MLPActorCritic.sample", "core.MLPActorCritic.pi._log_prob_from_distribution", "core.MLPActorCritic.v", "core.MLPActorCritic.sample.numpy", "core.MLPActorCritic.numpy", "core.MLPActorCritic.numpy"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._distribution", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._log_prob_from_distribution"], ["\n", "", "def", "to_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "\"\"\"Convert a batch of samples from this space to a JSONable data type.\"\"\"", "\n", "# By default, assume identity is JSONable", "\n", "return", "sample_n", "\n", "\n", "", "def", "from_jsonable", "(", "self", ",", "sample_n", ")", ":", "\n", "        ", "\"\"\"Convert a JSONable data type to a batch of samples from this space.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPActorCritic.act": [[225, 227], ["core.MLPActorCritic.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], ["# By default, assume identity is JSONable", "\n", "return", "sample_n", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.MLPActorCritic.update": [[228, 238], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x.numpy().astype.numpy().astype.numpy().astype", "int", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "core.MLPActorCritic.pi.update", "core.MLPActorCritic.v.update", "x.numpy().astype.numpy().astype.numpy", "x.numpy().astype.numpy().astype.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "x.numpy().astype.numpy().astype.sum", "numpy.square().sum", "len", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["\n", "", "", "warn_once", "=", "True", "\n", "\n", "def", "deprecated_warn_once", "(", "text", ")", ":", "\n", "    ", "global", "warn_once", "\n", "if", "not", "warn_once", ":", "return", "\n", "warn_once", "=", "False", "\n", "logger", ".", "warn", "(", "text", ")", "\n", "\n", "\n", "", "class", "Wrapper", "(", "Env", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.flat_grads": [[11, 13], ["torch.cat", "torch.cat", "grad.contiguous().view", "grad.contiguous"], "function", ["None"], ["class", "Env", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.get_flat_params_from": [[15, 22], ["model.parameters", "torch.cat", "torch.cat", "params.append", "param.data.view"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.set_flat_params_to": [[24, 31], ["model.parameters", "int", "param.data.copy_", "numpy.prod", "flat_params[].view", "list", "param.size", "param.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.conjugate_gradients": [[33, 50], ["torch.zeros", "torch.zeros", "b.clone", "b.clone", "torch.dot", "torch.dot", "range", "b.size", "Avp", "torch.dot", "torch.dot", "torch.dot", "torch.dot"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["\n", "\n", "# Set this in SOME subclasses", "\n", "metadata", "=", "{", "'render.modes'", ":", "[", "]", "}", "\n", "reward_range", "=", "(", "-", "float", "(", "'inf'", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "spec", "=", "None", "\n", "\n", "# Set these in ALL subclasses", "\n", "action_space", "=", "None", "\n", "observation_space", "=", "None", "\n", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.combined_shape": [[52, 56], ["numpy.isscalar"], "function", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.mlp": [[58, 64], ["range", "torch.Sequential", "len", "torch.Linear", "act", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.count_vars": [[66, 68], ["sum", "numpy.prod", "module.parameters"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.discount_cumsum": [[70, 86], ["scipy.signal.lfilter", "float"], "function", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.buffer.GAEBuffer.__init__": [[16, 26], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "algo.combined_shape", "algo.combined_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape"], ["\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ")", "\n", "return", "(", "\n", "self", ".", "times", "[", "idx", "]", ",", "\n", "self", ".", "qposs", "[", "idx", "]", ",", "\n", "self", ".", "qvels", "[", "idx", "]", ",", "\n", "self", ".", "qacts", "[", "idx", "]", ",", "\n", "self", ".", "obstacle_poss", "[", "idx", "]", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.buffer.GAEBuffer.store": [[27, 38], ["None"], "methods", ["None"], ["", "", "class", "SerializedBufferForTSNE", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.buffer.GAEBuffer.finish_path": [[39, 67], ["slice", "numpy.append", "numpy.append", "algo.discount_cumsum", "algo.discount_cumsum"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.discount_cumsum", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.discount_cumsum"], ["\n", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n", "\n", "", "", "class", "SerializedBuffer", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "mean", "(", "self", ".", "states", ",", "dim", "=", "0", ")", "\n", "self", ".", "epsilon", "=", "torch", ".", "zeros", "(", "self", ".", "mean", ".", "shape", ")", "+", "torch", ".", "tensor", "(", "[", "1e-4", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "max", "(", "torch", ".", "std", "(", "self", ".", "states", ",", "dim", "=", "0", ")", ",", "self", ".", "epsilon", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.buffer.GAEBuffer.get": [[68, 82], ["spinup.utils.mpi_tools.mpi_statistics_scalar", "dict", "torch.as_tensor", "dict.items"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_statistics_scalar"], ["        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n", "\n", "", "", "class", "StartBuffer", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "buffer_size", ",", "time", ",", "qpos", ",", "qvel", ",", "qact", ",", "obstacle_pos", ",", "device", ")", ":", "\n", "        ", "self", ".", "_p", "=", "0", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "time", "=", "torch", ".", "empty", "(", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.__init__": [[21, 67], ["gym.make", "spinup.utils.logx.EpochLogger", "trpo.TRPO.set_seed", "algo.MLPActorCritic", "spinup.utils.mpi_pytorch.sync_params", "tuple", "trpo.TRPO.logger.log", "algo.trpo.buffer.GAEBuffer", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.time", "spinup.utils.mpi_tools.proc_id", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "trpo.TRPO.ac.v.parameters", "trpo.TRPO.env.reset", "spinup.utils.mpi_tools.proc_id", "algo.count_vars"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.sync_params", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.count_vars"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger_kwargs", ")", ":", "\n", "        ", "self", ".", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "EpochLogger", "(", "**", "logger_kwargs", ")", "\n", "self", ".", "seed", "=", "args", ".", "seed", "+", "10000", "*", "proc_id", "(", ")", "\n", "self", ".", "set_seed", "(", ")", "\n", "self", ".", "num_rollouts", "=", "args", ".", "num_rollouts", "\n", "self", ".", "epochs", "=", "args", ".", "epochs", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "delta", "=", "args", ".", "delta", "\n", "self", ".", "clip_ratio", "=", "args", ".", "clip_ratio", "\n", "self", ".", "vf_lr", "=", "args", ".", "ppo_vf_lr", "\n", "self", ".", "train_v_iters", "=", "args", ".", "trpo_train_v_iters", "\n", "self", ".", "batch_size", "=", "args", ".", "trpo_batchsize", "\n", "self", ".", "damping_coeff", "=", "args", ".", "damping_coeff", "\n", "self", ".", "cg_iters", "=", "args", ".", "cg_iters", "\n", "self", ".", "eps", "=", "1e-8", "\n", "self", ".", "backtrack_iters", "=", "args", ".", "backtrack_iters", "\n", "self", ".", "backtrack_coeff", "=", "args", ".", "backtrack_coeff", "\n", "self", ".", "lam", "=", "args", ".", "lam", "\n", "self", ".", "save_freq", "=", "args", ".", "save_freq", "\n", "self", ".", "obs_dim", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "act_dim", "=", "self", ".", "env", ".", "action_space", ".", "shape", "\n", "self", ".", "max_steps", "=", "args", ".", "max_steps", "\n", "self", ".", "ac", "=", "core", ".", "MLPActorCritic", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "\n", "hidden_sizes", "=", "[", "args", ".", "primitive_hid_size", "]", "*", "args", ".", "primitive_hid_layer", ")", "\n", "\n", "sync_params", "(", "self", ".", "ac", ")", "\n", "\n", "# Count variables", "\n", "var_counts", "=", "tuple", "(", "core", ".", "count_vars", "(", "module", ")", "for", "module", "in", "[", "self", ".", "ac", ".", "pi", ",", "self", ".", "ac", ".", "v", "]", ")", "\n", "self", ".", "logger", ".", "log", "(", "'\\nNumber of parameters: \\t pi: %d, \\t v: %d\\n'", "%", "var_counts", ")", "\n", "\n", "\n", "\n", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "logger", ".", "output_dir", "+", "'/tensorboard'", ")", "\n", "\n", "# Set up experience buffer", "\n", "", "self", ".", "buf", "=", "GAEBuffer", "(", "self", ".", "obs_dim", ",", "self", ".", "act_dim", ",", "self", ".", "num_rollouts", ",", "self", ".", "gamma", ",", "self", ".", "lam", ")", "\n", "\n", "self", ".", "vf_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "v", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "vf_lr", ")", "\n", "self", ".", "o", ",", "self", ".", "ep_ret", ",", "self", ".", "ep_len", "=", "self", ".", "env", ".", "reset", "(", ")", ",", "0", ",", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "tensorboard_scalars", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.set_seed": [[68, 80], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "trpo.TRPO.env.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "self", ")", ":", "\n", "# Random seed", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "self", ".", "env", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_loss_pi": [[82, 89], ["trpo.TRPO.ac.pi", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "compute_loss_pi", "(", "self", ",", "data", ")", ":", "\n", "        ", "obs", ",", "act", ",", "adv", ",", "logp_old", "=", "data", "[", "'obs'", "]", ",", "data", "[", "'act'", "]", ",", "data", "[", "'adv'", "]", ",", "data", "[", "'logp'", "]", "\n", "# Policy loss", "\n", "_", ",", "logp", "=", "self", ".", "ac", ".", "pi", "(", "obs", ",", "act", ")", "\n", "ratio", "=", "torch", ".", "exp", "(", "logp", "-", "logp_old", ")", "\n", "loss_pi", "=", "-", "(", "ratio", "*", "adv", ")", ".", "mean", "(", ")", "\n", "return", "loss_pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_loss_v": [[91, 94], ["trpo.TRPO.ac.v"], "methods", ["None"], ["", "def", "compute_loss_v", "(", "self", ",", "data", ")", ":", "\n", "        ", "obs", ",", "ret", "=", "data", "[", "'obs'", "]", ",", "data", "[", "'ret'", "]", "\n", "return", "(", "(", "self", ".", "ac", ".", "v", "(", "obs", ")", "-", "ret", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_loss_v_batch": [[95, 99], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "trpo.TRPO.ac.v"], "methods", ["None"], ["", "def", "compute_loss_v_batch", "(", "self", ",", "obs", ",", "ret", ")", ":", "\n", "        ", "obs", "=", "torch", ".", "as_tensor", "(", "obs", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "ret", "=", "torch", ".", "as_tensor", "(", "ret", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "(", "(", "self", ".", "ac", ".", "v", "(", "obs", ")", "-", "ret", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_kl": [[100, 105], ["trpo.TRPO.ac.pi", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "def", "compute_kl", "(", "self", ",", "data", ",", "old_pi", ")", ":", "\n", "        ", "obs", ",", "act", "=", "data", "[", "'obs'", "]", ",", "data", "[", "'act'", "]", "\n", "pi", ",", "_", "=", "self", ".", "ac", ".", "pi", "(", "obs", ",", "act", ")", "\n", "kl_loss", "=", "torch", ".", "distributions", ".", "kl_divergence", "(", "pi", ",", "old_pi", ")", ".", "mean", "(", ")", "\n", "return", "kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_kl_loss_pi": [[106, 115], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trpo.TRPO.ac.pi", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_kl_loss_pi", "(", "self", ",", "data", ",", "old_pi", ")", ":", "\n", "        ", "obs", ",", "act", ",", "adv", ",", "logp_old", "=", "data", "[", "'obs'", "]", ",", "data", "[", "'act'", "]", ",", "data", "[", "'adv'", "]", ",", "data", "[", "'logp'", "]", "\n", "# Policy loss", "\n", "pi", ",", "logp", "=", "self", ".", "ac", ".", "pi", "(", "obs", ",", "act", ")", "\n", "ratio", "=", "torch", ".", "exp", "(", "logp", "-", "logp_old", ")", "\n", "loss_pi", "=", "-", "(", "ratio", "*", "adv", ")", ".", "mean", "(", ")", "\n", "kl_loss", "=", "torch", ".", "distributions", ".", "kl_divergence", "(", "pi", ",", "old_pi", ")", ".", "mean", "(", ")", "\n", "return", "loss_pi", ",", "kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.hessian_vector_product": [[116, 127], ["trpo.TRPO.compute_kl", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "algo.flat_grads", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "algo.flat_grads", "trpo.TRPO.ac.pi.parameters", "trpo.TRPO.ac.pi.parameters"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_kl", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.flat_grads", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.flat_grads"], ["", "def", "hessian_vector_product", "(", "self", ",", "data", ",", "old_pi", ",", "v", ")", ":", "\n", "        ", "kl", "=", "self", ".", "compute_kl", "(", "data", ",", "old_pi", ")", "\n", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "kl", ",", "self", ".", "ac", ".", "pi", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "flat_grad_kl", "=", "core", ".", "flat_grads", "(", "grads", ")", "\n", "\n", "kl_v", "=", "(", "flat_grad_kl", "*", "v", ")", ".", "sum", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "kl_v", ",", "self", ".", "ac", ".", "pi", ".", "parameters", "(", ")", ")", "\n", "flat_grad_grad_kl", "=", "core", ".", "flat_grads", "(", "grads", ")", "\n", "\n", "return", "flat_grad_grad_kl", "+", "v", "*", "self", ".", "damping_coeff", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.get_rollouts": [[128, 174], ["range", "trpo.TRPO.ac.step", "trpo.TRPO.env.step", "trpo.TRPO.buf.store", "trpo.TRPO.logger.store", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "trpo.TRPO.buf.finish_path", "print", "trpo.TRPO.ac.step", "success_count_list.append", "ep_ret_list.append", "ep_len_list.append", "trpo.TRPO.logger.store", "max", "trpo.TRPO.env.reset", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "sum", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.finish_path", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["", "def", "get_rollouts", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "success_count_list", "=", "[", "]", "\n", "ep_ret_list", "=", "[", "]", "\n", "ep_len_list", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "num_rollouts", ")", ":", "\n", "            ", "a", ",", "v", ",", "logp", "=", "self", ".", "ac", ".", "step", "(", "torch", ".", "as_tensor", "(", "self", ".", "o", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "next_o", ",", "r", ",", "d", ",", "info", "=", "self", ".", "env", ".", "step", "(", "a", ")", "\n", "self", ".", "ep_ret", "+=", "r", "\n", "self", ".", "ep_len", "+=", "1", "\n", "\n", "# save and log", "\n", "self", ".", "buf", ".", "store", "(", "self", ".", "o", ",", "a", ",", "r", ",", "v", ",", "logp", ")", "\n", "self", ".", "logger", ".", "store", "(", "VVals", "=", "v", ")", "\n", "\n", "# Update obs (critical!)", "\n", "self", ".", "o", "=", "next_o", "\n", "\n", "timeout", "=", "self", ".", "ep_len", "==", "self", ".", "max_steps", "\n", "terminal", "=", "d", "or", "timeout", "\n", "epoch_ended", "=", "t", "==", "self", ".", "num_rollouts", "-", "1", "\n", "\n", "if", "terminal", "or", "epoch_ended", ":", "\n", "\n", "                ", "if", "epoch_ended", "and", "not", "(", "terminal", ")", ":", "\n", "                    ", "print", "(", "'Warning: trajectory cut off by epoch at %d steps.'", "%", "self", ".", "ep_len", ",", "flush", "=", "True", ")", "\n", "# if trajectory didn't reach terminal state, bootstrap value target", "\n", "", "if", "timeout", "or", "epoch_ended", ":", "\n", "                    ", "_", ",", "v", ",", "_", "=", "self", ".", "ac", ".", "step", "(", "torch", ".", "as_tensor", "(", "self", ".", "o", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "                    ", "v", "=", "0", "\n", "", "self", ".", "buf", ".", "finish_path", "(", "v", ")", "\n", "if", "terminal", ":", "\n", "# only save EpRet / EpLen if trajectory finished", "\n", "                    ", "success_count_list", ".", "append", "(", "info", "[", "'success_count'", "]", ")", "\n", "ep_ret_list", ".", "append", "(", "self", ".", "ep_ret", ")", "\n", "ep_len_list", ".", "append", "(", "self", ".", "ep_len", ")", "\n", "self", ".", "logger", ".", "store", "(", "EpRet", "=", "self", ".", "ep_ret", ",", "EpLen", "=", "self", ".", "ep_len", ",", "EpSuccessCount", "=", "info", "[", "'success_count'", "]", ")", "\n", "\n", "", "if", "epoch_ended", ":", "\n", "                    ", "self", ".", "tensorboard_scalars", "[", "'EpRet'", "]", "=", "sum", "(", "ep_ret_list", ")", "/", "len", "(", "ep_ret_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'EpLen'", "]", "=", "sum", "(", "ep_len_list", ")", "/", "len", "(", "ep_len_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'EpSuccessCount'", "]", "=", "sum", "(", "success_count_list", ")", "/", "len", "(", "success_count_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'MaxEpRet'", "]", "=", "max", "(", "ep_ret_list", ")", "\n", "\n", "", "self", ".", "o", ",", "self", ".", "ep_ret", ",", "self", ".", "ep_len", "=", "self", ".", "env", ".", "reset", "(", ")", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.update": [[176, 249], ["trpo.TRPO.compute_loss_pi", "trpo.TRPO.item", "trpo.TRPO.compute_loss_v().item", "algo.flat_grads", "algo.conjugate_gradients", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "algo.get_flat_params_from", "spinup.Dataset", "range", "trpo.TRPO.ac.pi.entropy().mean().item", "trpo.TRPO.item", "trpo.TRPO.logger.store", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trpo.TRPO.ac.pi", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "trpo.TRPO.hessian_vector_product", "algo.set_flat_params_to", "trpo.TRPO.compute_kl_loss_pi", "trpo.TRPO.update.set_and_eval"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_pi", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.flat_grads", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.conjugate_gradients", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.get_flat_params_from", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.hessian_vector_product", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.core.set_flat_params_to", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.compute_kl_loss_pi"], ["", "", "", "def", "update", "(", "self", ",", "data", ")", ":", "\n", "# compute old pi distribution", "\n", "        ", "obs", ",", "act", "=", "data", "[", "'obs'", "]", ",", "data", "[", "'act'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "old_pi", ",", "_", "=", "self", ".", "ac", ".", "pi", "(", "obs", ",", "act", ")", "\n", "\n", "", "pi_loss", "=", "self", ".", "compute_loss_pi", "(", "data", ")", "\n", "pi_l_old", "=", "pi_loss", ".", "item", "(", ")", "\n", "v_l_old", "=", "self", ".", "compute_loss_v", "(", "data", ")", ".", "item", "(", ")", "\n", "\n", "grads", "=", "core", ".", "flat_grads", "(", "torch", ".", "autograd", ".", "grad", "(", "pi_loss", ",", "self", ".", "ac", ".", "pi", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# Core calculations for TRPO or NPG", "\n", "Hx", "=", "lambda", "v", ":", "self", ".", "hessian_vector_product", "(", "data", ",", "old_pi", ",", "v", ")", "\n", "x", "=", "core", ".", "conjugate_gradients", "(", "Hx", ",", "grads", ",", "self", ".", "cg_iters", ")", "\n", "\n", "alpha", "=", "torch", ".", "sqrt", "(", "2.0", "*", "self", ".", "delta", "/", "torch", ".", "abs", "(", "(", "torch", ".", "matmul", "(", "x", ",", "Hx", "(", "x", ")", ")", "+", "self", ".", "eps", ")", ")", ")", "\n", "\n", "old_params", "=", "core", ".", "get_flat_params_from", "(", "self", ".", "ac", ".", "pi", ")", "\n", "\n", "def", "set_and_eval", "(", "step", ")", ":", "\n", "            ", "new_params", "=", "old_params", "-", "alpha", "*", "x", "*", "step", "\n", "core", ".", "set_flat_params_to", "(", "self", ".", "ac", ".", "pi", ",", "new_params", ")", "\n", "loss_pi", ",", "kl_loss", "=", "self", ".", "compute_kl_loss_pi", "(", "data", ",", "old_pi", ")", "\n", "return", "kl_loss", ".", "item", "(", ")", ",", "loss_pi", ".", "item", "(", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "primitive_algo", "==", "'npg'", ":", "\n", "# npg has no backtracking or hard kl constraint enforcement", "\n", "            ", "kl", ",", "pi_l_new", "=", "set_and_eval", "(", "step", "=", "1.", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "primitive_algo", "==", "'trpo'", ":", "\n", "# trpo augments npg with backtracking line search, hard kl", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "backtrack_iters", ")", ":", "\n", "                ", "kl", ",", "pi_l_new", "=", "set_and_eval", "(", "step", "=", "self", ".", "backtrack_coeff", "*", "pow", "(", "0.5", ",", "j", ")", ")", "\n", "if", "kl", "<=", "self", ".", "delta", "*", "1.5", "and", "pi_l_new", "<=", "pi_l_old", ":", "\n", "                    ", "self", ".", "logger", ".", "log", "(", "'Accepting new params at step %d of line search.'", "%", "j", ")", "\n", "self", ".", "logger", ".", "store", "(", "BacktrackIters", "=", "j", ")", "\n", "break", "\n", "\n", "", "if", "j", "==", "self", ".", "backtrack_iters", "-", "1", ":", "\n", "                    ", "self", ".", "logger", ".", "log", "(", "'Line search failed! Keeping old params.'", ")", "\n", "self", ".", "logger", ".", "store", "(", "BacktrackIters", "=", "j", ")", "\n", "kl", ",", "pi_l_new", "=", "set_and_eval", "(", "step", "=", "0.", ")", "\n", "\n", "# # Value function learning", "\n", "# for i in range(self.train_v_iters):", "\n", "#     self.vf_optimizer.zero_grad()", "\n", "#     loss_v = self.compute_loss_v(data)", "\n", "#     loss_v.backward()", "\n", "#     mpi_avg_grads(self.ac.v)  # average grads across MPI processes", "\n", "#     self.vf_optimizer.step()", "\n", "", "", "", "d", "=", "dataset", ".", "Dataset", "(", "dict", "(", "obs", "=", "data", "[", "'obs'", "]", ",", "ret", "=", "data", "[", "'ret'", "]", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "train_v_iters", ")", ":", "\n", "            ", "for", "batch", "in", "d", ".", "iterate_once", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "self", ".", "vf_optimizer", ".", "zero_grad", "(", ")", "\n", "loss_v", "=", "self", ".", "compute_loss_v_batch", "(", "batch", "[", "'obs'", "]", ",", "batch", "[", "'ret'", "]", ")", "\n", "loss_v", ".", "backward", "(", ")", "\n", "mpi_avg_grads", "(", "self", ".", "ac", ".", "v", ")", "# average grads across MPI processes", "\n", "self", ".", "vf_optimizer", ".", "step", "(", ")", "\n", "\n", "# Log changes from update", "\n", "", "", "self", ".", "tensorboard_scalars", "[", "'Entropy'", "]", "=", "self", ".", "ac", ".", "pi", ".", "entropy", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'KL'", "]", "=", "kl", "\n", "self", ".", "tensorboard_scalars", "[", "'LossPi'", "]", "=", "pi_l_new", "\n", "self", ".", "tensorboard_scalars", "[", "'LossV'", "]", "=", "loss_v", ".", "item", "(", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'DeltaLossPi'", "]", "=", "(", "pi_l_new", "-", "pi_l_old", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'DeltaLossV'", "]", "=", "(", "loss_v", ".", "item", "(", ")", "-", "v_l_old", ")", "\n", "\n", "# Log changes from update", "\n", "self", ".", "logger", ".", "store", "(", "LossPi", "=", "pi_l_old", ",", "LossV", "=", "v_l_old", ",", "KL", "=", "kl", ",", "\n", "DeltaLossPi", "=", "(", "pi_l_new", "-", "pi_l_old", ")", ",", "\n", "DeltaLossV", "=", "(", "loss_v", ".", "item", "(", ")", "-", "v_l_old", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.train": [[250, 284], ["range", "trpo.TRPO.get_rollouts", "trpo.TRPO.buf.get", "trpo.TRPO.ac.update", "trpo.TRPO.update", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.log_tabular", "trpo.TRPO.logger.dump_tabular", "trpo.TRPO.save_model", "spinup.utils.mpi_tools.proc_id", "trpo.TRPO.write_tensorboard", "trpo.TRPO.logger.log_tabular", "spinup.utils.mpi_tools.proc_id", "time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.get_rollouts", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.dump_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.write_tensorboard", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "def", "train", "(", "self", ")", ":", "\n", "# Main loop: collect experience in env and update/log each epoch", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "            ", "self", ".", "get_rollouts", "(", "epoch", ")", "\n", "\n", "data", "=", "self", ".", "buf", ".", "get", "(", ")", "\n", "self", ".", "ac", ".", "update", "(", "data", "[", "'obs'", "]", ")", "\n", "# Perform PPO update!", "\n", "self", ".", "update", "(", "data", ")", "\n", "\n", "\n", "# Save model", "\n", "if", "(", "(", "epoch", "%", "self", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "self", ".", "epochs", "-", "1", ")", ")", "and", "proc_id", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "if", "proc_id", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "write_tensorboard", "(", "epoch", ")", "\n", "\n", "# Log info about epoch", "\n", "", "self", ".", "logger", ".", "log_tabular", "(", "'Epoch'", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'EpRet'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'EpLen'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'EpSuccessCount'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'VVals'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'TotalEnvInteracts'", ",", "(", "epoch", "+", "1", ")", "*", "self", ".", "num_rollouts", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'LossPi'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'LossV'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'DeltaLossPi'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'DeltaLossV'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'KL'", ",", "average_only", "=", "True", ")", "\n", "if", "self", ".", "args", ".", "primitive_algo", "==", "'trpo'", ":", "\n", "                ", "self", ".", "logger", ".", "log_tabular", "(", "'BacktrackIters'", ",", "average_only", "=", "True", ")", "\n", "", "self", ".", "logger", ".", "log_tabular", "(", "'Time'", ",", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "self", ".", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.save_model": [[285, 300], ["os.join", "os.join", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "os.join", "os.join", "trpo.TRPO.ac.state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], ["", "", "def", "save_model", "(", "self", ",", "sub", "=", "''", ")", ":", "\n", "        ", "fpath", "=", "self", ".", "logger", ".", "output_dir", "\n", "fpath", "=", "osp", ".", "join", "(", "osp", ".", "join", "(", "fpath", ",", "'pyt_save'", ")", ",", "sub", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'model.pt'", ")", "\n", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'pi_rms_mean'", ":", "self", ".", "ac", ".", "pi", ".", "rms_mean", ",", "\n", "'pi_rms_std'", ":", "self", ".", "ac", ".", "pi", ".", "rms_std", ",", "\n", "'pi_rms_count'", ":", "self", ".", "ac", ".", "pi", ".", "rms_count", ",", "\n", "'v_rms_mean'", ":", "self", ".", "ac", ".", "v", ".", "rms_mean", ",", "\n", "'v_rms_std'", ":", "self", ".", "ac", ".", "v", ".", "rms_std", ",", "\n", "'v_rms_count'", ":", "self", ".", "ac", ".", "v", ".", "rms_count", ",", "\n", "'model'", ":", "self", ".", "ac", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.trpo.TRPO.write_tensorboard": [[301, 312], ["trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar", "trpo.TRPO.writer.add_scalar"], "methods", ["None"], ["", "def", "write_tensorboard", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/AverageEpRet'", ",", "self", ".", "tensorboard_scalars", "[", "'EpRet'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/MaxEpRet'", ",", "self", ".", "tensorboard_scalars", "[", "'MaxEpRet'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/EpLen'", ",", "self", ".", "tensorboard_scalars", "[", "'EpLen'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/Entropy'", ",", "self", ".", "tensorboard_scalars", "[", "'Entropy'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/KL'", ",", "self", ".", "tensorboard_scalars", "[", "'KL'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/LossPi'", ",", "self", ".", "tensorboard_scalars", "[", "'LossPi'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/LossV'", ",", "self", ".", "tensorboard_scalars", "[", "'LossV'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/DeltaLossPi'", ",", "self", ".", "tensorboard_scalars", "[", "'DeltaLossPi'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/DeltaLossV'", ",", "self", ".", "tensorboard_scalars", "[", "'DeltaLossV'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/EpSuccessCount'", ",", "self", ".", "tensorboard_scalars", "[", "'EpSuccessCount'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler._LRScheduler.__init__": [[12, 28], ["list", "scheduler._LRScheduler.step", "isinstance", "TypeError", "enumerate", "map", "group.setdefault", "KeyError", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "last_epoch", "=", "0", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "'initial_lr'", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "step", "(", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler._LRScheduler.state_dict": [[29, 36], ["scheduler._LRScheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        \"\"\"", "\n", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler._LRScheduler.load_state_dict": [[37, 45], ["scheduler._LRScheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler._LRScheduler.get_lr": [[46, 48], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler._LRScheduler.step": [[49, 55], ["zip", "scheduler._LRScheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmUpRestarts.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.LambdaLR.__init__": [[79, 90], ["scheduler._LRScheduler.__init__", "list", "isinstance", "isinstance", "len", "len", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "not", "isinstance", "(", "lr_lambda", ",", "list", ")", "and", "not", "isinstance", "(", "lr_lambda", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "lr_lambdas", "=", "[", "lr_lambda", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "lr_lambda", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected {} lr_lambdas, but got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "lr_lambda", ")", ")", ")", "\n", "", "self", ".", "lr_lambdas", "=", "list", "(", "lr_lambda", ")", "\n", "", "self", ".", "last_epoch", "=", "last_epoch", "\n", "super", "(", "LambdaLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.LambdaLR.state_dict": [[91, 107], ["enumerate", "len", "scheduler.LambdaLR.__dict__.items", "isinstance", "fn.__dict__.copy"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        The learning rate lambda functions will only be saved if they are callable objects\n        and not if they are functions or lambdas.\n        \"\"\"", "\n", "state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "not", "in", "(", "'optimizer'", ",", "'lr_lambdas'", ")", "}", "\n", "state_dict", "[", "'lr_lambdas'", "]", "=", "[", "None", "]", "*", "len", "(", "self", ".", "lr_lambdas", ")", "\n", "\n", "for", "idx", ",", "fn", "in", "enumerate", "(", "self", ".", "lr_lambdas", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "fn", ",", "types", ".", "FunctionType", ")", ":", "\n", "                ", "state_dict", "[", "'lr_lambdas'", "]", "[", "idx", "]", "=", "fn", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.LambdaLR.load_state_dict": [[108, 121], ["state_dict.pop", "scheduler.LambdaLR.__dict__.update", "enumerate", "scheduler.LambdaLR.lr_lambdas[].__dict__.update"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "lr_lambdas", "=", "state_dict", ".", "pop", "(", "'lr_lambdas'", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n", "for", "idx", ",", "fn", "in", "enumerate", "(", "lr_lambdas", ")", ":", "\n", "            ", "if", "fn", "is", "not", "None", ":", "\n", "                ", "self", ".", "lr_lambdas", "[", "idx", "]", ".", "__dict__", ".", "update", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.LambdaLR.get_lr": [[122, 125], ["lmbda", "zip"], "methods", ["None"], ["", "", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "lmbda", "(", "self", ".", "last_epoch", ")", "\n", "for", "lmbda", ",", "base_lr", "in", "zip", "(", "self", ".", "lr_lambdas", ",", "self", ".", "base_lrs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.StepLR.__init__": [[153, 157], ["scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "step_size", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "StepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.StepLR.get_lr": [[158, 163], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "last_epoch", "==", "0", ")", "or", "(", "self", ".", "last_epoch", "%", "self", ".", "step_size", "!=", "0", ")", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.MultiStepLR.__init__": [[190, 194], ["collections.Counter", "scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "milestones", "=", "Counter", "(", "milestones", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "MultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.MultiStepLR.get_lr": [[195, 200], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "not", "in", "self", ".", "milestones", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "**", "self", ".", "milestones", "[", "self", ".", "last_epoch", "]", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ExponentialLR.__init__": [[212, 215], ["scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "gamma", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "ExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ExponentialLR.get_lr": [[216, 221], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "return", "[", "group", "[", "'lr'", "]", "*", "self", ".", "gamma", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingLR.__init__": [[259, 263], ["scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingLR.get_lr": [[264, 276], ["zip", "math.cos", "math.cos", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "elif", "(", "self", ".", "last_epoch", "-", "1", "-", "self", ".", "T_max", ")", "%", "(", "2", "*", "self", ".", "T_max", ")", "==", "0", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "\n", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "]", "\n", "", "return", "[", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "1", ")", "/", "self", ".", "T_max", ")", ")", "*", "\n", "(", "group", "[", "'lr'", "]", "-", "self", ".", "eta_min", ")", "+", "self", ".", "eta_min", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.__init__": [[327, 364], ["scheduler.ReduceLROnPlateau._init_is_better", "scheduler.ReduceLROnPlateau._reset", "ValueError", "isinstance", "TypeError", "isinstance", "isinstance", "list", "len", "len", "ValueError", "len", "type", "len", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._init_is_better", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.1", ",", "patience", "=", "10", ",", "\n", "verbose", "=", "False", ",", "threshold", "=", "1e-4", ",", "threshold_mode", "=", "'rel'", ",", "\n", "cooldown", "=", "0", ",", "min_lr", "=", "0", ",", "eps", "=", "1e-8", ")", ":", "\n", "\n", "        ", "if", "factor", ">=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'Factor should be < 1.0.'", ")", "\n", "", "self", ".", "factor", "=", "factor", "\n", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "if", "isinstance", "(", "min_lr", ",", "list", ")", "or", "isinstance", "(", "min_lr", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "min_lr", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} min_lrs, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "min_lr", ")", ")", ")", "\n", "", "self", ".", "min_lrs", "=", "list", "(", "min_lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_lrs", "=", "[", "min_lr", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n", "", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "threshold_mode", "=", "threshold_mode", "\n", "self", ".", "best", "=", "None", "\n", "self", ".", "num_bad_epochs", "=", "None", "\n", "self", ".", "mode_worse", "=", "None", "# the worse value for the chosen mode", "\n", "self", ".", "is_better", "=", "None", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "last_epoch", "=", "-", "1", "\n", "self", ".", "_init_is_better", "(", "mode", "=", "mode", ",", "threshold", "=", "threshold", ",", "\n", "threshold_mode", "=", "threshold_mode", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._reset": [[365, 370], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets num_bad_epochs counter and cooldown counter.\"\"\"", "\n", "self", ".", "best", "=", "self", ".", "mode_worse", "\n", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.step": [[371, 392], ["float", "scheduler.ReduceLROnPlateau.is_better", "scheduler.ReduceLROnPlateau._reduce_lr"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._reduce_lr"], ["", "def", "step", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "# convert `metrics` to float, in case it's a zero-dim Tensor", "\n", "        ", "current", "=", "float", "(", "metrics", ")", "\n", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "\n", "if", "self", ".", "is_better", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_bad_epochs", "+=", "1", "\n", "\n", "", "if", "self", ".", "in_cooldown", ":", "\n", "            ", "self", ".", "cooldown_counter", "-=", "1", "\n", "self", ".", "num_bad_epochs", "=", "0", "# ignore any bad epochs in cooldown", "\n", "\n", "", "if", "self", ".", "num_bad_epochs", ">", "self", ".", "patience", ":", "\n", "            ", "self", ".", "_reduce_lr", "(", "epoch", ")", "\n", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._reduce_lr": [[393, 402], ["enumerate", "float", "max", "print"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "", "def", "_reduce_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "param_group", "[", "'lr'", "]", ")", "\n", "new_lr", "=", "max", "(", "old_lr", "*", "self", ".", "factor", ",", "self", ".", "min_lrs", "[", "i", "]", ")", "\n", "if", "old_lr", "-", "new_lr", ">", "self", ".", "eps", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'Epoch {:5d}: reducing learning rate'", "\n", "' of group {} to {:.4e}.'", ".", "format", "(", "epoch", ",", "i", ",", "new_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.in_cooldown": [[403, 406], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "in_cooldown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cooldown_counter", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._cmp": [[407, 421], ["None"], "methods", ["None"], ["", "def", "_cmp", "(", "self", ",", "mode", ",", "threshold_mode", ",", "threshold", ",", "a", ",", "best", ")", ":", "\n", "        ", "if", "mode", "==", "'min'", "and", "threshold_mode", "==", "'rel'", ":", "\n", "            ", "rel_epsilon", "=", "1.", "-", "threshold", "\n", "return", "a", "<", "best", "*", "rel_epsilon", "\n", "\n", "", "elif", "mode", "==", "'min'", "and", "threshold_mode", "==", "'abs'", ":", "\n", "            ", "return", "a", "<", "best", "-", "threshold", "\n", "\n", "", "elif", "mode", "==", "'max'", "and", "threshold_mode", "==", "'rel'", ":", "\n", "            ", "rel_epsilon", "=", "threshold", "+", "1.", "\n", "return", "a", ">", "best", "*", "rel_epsilon", "\n", "\n", "", "else", ":", "# mode == 'max' and epsilon_mode == 'abs':", "\n", "            ", "return", "a", ">", "best", "+", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._init_is_better": [[422, 434], ["functools.partial", "ValueError", "ValueError"], "methods", ["None"], ["", "", "def", "_init_is_better", "(", "self", ",", "mode", ",", "threshold", ",", "threshold_mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "{", "'min'", ",", "'max'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'mode '", "+", "mode", "+", "' is unknown!'", ")", "\n", "", "if", "threshold_mode", "not", "in", "{", "'rel'", ",", "'abs'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'threshold mode '", "+", "threshold_mode", "+", "' is unknown!'", ")", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "mode_worse", "=", "inf", "\n", "", "else", ":", "# mode == 'max':", "\n", "            ", "self", ".", "mode_worse", "=", "-", "inf", "\n", "\n", "", "self", ".", "is_better", "=", "partial", "(", "self", ".", "_cmp", ",", "mode", ",", "threshold_mode", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict": [[435, 437], ["scheduler.ReduceLROnPlateau.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "not", "in", "{", "'optimizer'", ",", "'is_better'", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.load_state_dict": [[438, 441], ["scheduler.ReduceLROnPlateau.__dict__.update", "scheduler.ReduceLROnPlateau._init_is_better"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau._init_is_better"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "self", ".", "_init_is_better", "(", "mode", "=", "self", ".", "mode", ",", "threshold", "=", "self", ".", "threshold", ",", "threshold_mode", "=", "self", ".", "threshold_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR.__init__": [[532, 598], ["scheduler.CyclicLR._format_param", "scheduler.CyclicLR._format_param", "float", "list", "scheduler.CyclicLR._format_param", "scheduler._LRScheduler.__init__", "isinstance", "TypeError", "zip", "float", "ValueError", "scheduler.CyclicLR._format_param", "map", "ValueError", "zip", "type"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._format_param", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._format_param", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._format_param", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._format_param", "home.repos.pwc.inspect_result.shashacks_irl_transition.monitoring.stats_recorder.StatsRecorder.type"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "base_lr", ",", "\n", "max_lr", ",", "\n", "step_size_up", "=", "2000", ",", "\n", "step_size_down", "=", "None", ",", "\n", "mode", "=", "'triangular'", ",", "\n", "gamma", "=", "1.", ",", "\n", "scale_fn", "=", "None", ",", "\n", "scale_mode", "=", "'cycle'", ",", "\n", "cycle_momentum", "=", "True", ",", "\n", "base_momentum", "=", "0.8", ",", "\n", "max_momentum", "=", "0.9", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "base_lrs", "=", "self", ".", "_format_param", "(", "'base_lr'", ",", "optimizer", ",", "base_lr", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "lr", ",", "group", "in", "zip", "(", "base_lrs", ",", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", "self", ".", "max_lrs", "=", "self", ".", "_format_param", "(", "'max_lr'", ",", "optimizer", ",", "max_lr", ")", "\n", "\n", "step_size_up", "=", "float", "(", "step_size_up", ")", "\n", "step_size_down", "=", "float", "(", "step_size_down", ")", "if", "step_size_down", "is", "not", "None", "else", "step_size_up", "\n", "self", ".", "total_size", "=", "step_size_up", "+", "step_size_down", "\n", "self", ".", "step_ratio", "=", "step_size_up", "/", "self", ".", "total_size", "\n", "\n", "if", "mode", "not", "in", "[", "'triangular'", ",", "'triangular2'", ",", "'exp_range'", "]", "and", "scale_fn", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'mode is invalid and scale_fn is None'", ")", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "if", "scale_fn", "is", "None", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'triangular'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_triangular_scale_fn", "\n", "self", ".", "scale_mode", "=", "'cycle'", "\n", "", "elif", "self", ".", "mode", "==", "'triangular2'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_triangular2_scale_fn", "\n", "self", ".", "scale_mode", "=", "'cycle'", "\n", "", "elif", "self", ".", "mode", "==", "'exp_range'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_exp_range_scale_fn", "\n", "self", ".", "scale_mode", "=", "'iterations'", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "scale_fn", "=", "scale_fn", "\n", "self", ".", "scale_mode", "=", "scale_mode", "\n", "\n", "", "self", ".", "cycle_momentum", "=", "cycle_momentum", "\n", "if", "cycle_momentum", ":", "\n", "            ", "if", "'momentum'", "not", "in", "optimizer", ".", "defaults", ":", "\n", "                ", "raise", "ValueError", "(", "'optimizer must support momentum with `cycle_momentum` option enabled'", ")", "\n", "\n", "", "base_momentums", "=", "self", ".", "_format_param", "(", "'base_momentum'", ",", "optimizer", ",", "base_momentum", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "                ", "for", "momentum", ",", "group", "in", "zip", "(", "base_momentums", ",", "optimizer", ".", "param_groups", ")", ":", "\n", "                    ", "group", "[", "'momentum'", "]", "=", "momentum", "\n", "", "", "", "self", ".", "base_momentums", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'momentum'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "max_momentums", "=", "self", ".", "_format_param", "(", "'max_momentum'", ",", "optimizer", ",", "max_momentum", ")", "\n", "\n", "super", "(", "CyclicLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._format_param": [[599, 608], ["isinstance", "len", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_format_param", "(", "self", ",", "name", ",", "optimizer", ",", "param", ")", ":", "\n", "        ", "\"\"\"Return correctly formatted lr/momentum for each param group.\"\"\"", "\n", "if", "isinstance", "(", "param", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} values for {}, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "name", ",", "len", "(", "param", ")", ")", ")", "\n", "", "return", "param", "\n", "", "else", ":", "\n", "            ", "return", "[", "param", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._triangular_scale_fn": [[609, 611], ["None"], "methods", ["None"], ["", "", "def", "_triangular_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._triangular2_scale_fn": [[612, 614], ["None"], "methods", ["None"], ["", "def", "_triangular2_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "2.", "**", "(", "x", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR._exp_range_scale_fn": [[615, 617], ["None"], "methods", ["None"], ["", "def", "_exp_range_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gamma", "**", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CyclicLR.get_lr": [[618, 654], ["math.floor", "zip", "lrs.append", "zip", "zip", "momentums.append", "scheduler.CyclicLR.scale_fn", "scheduler.CyclicLR.scale_fn", "scheduler.CyclicLR.scale_fn", "scheduler.CyclicLR.scale_fn"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculates the learning rate at batch index. This function treats\n        `self.last_epoch` as the last batch index.\n\n        If `self.cycle_momentum` is ``True``, this function has a side effect of\n        updating the optimizer's momentum.\n        \"\"\"", "\n", "cycle", "=", "math", ".", "floor", "(", "1", "+", "self", ".", "last_epoch", "/", "self", ".", "total_size", ")", "\n", "x", "=", "1.", "+", "self", ".", "last_epoch", "/", "self", ".", "total_size", "-", "cycle", "\n", "if", "x", "<=", "self", ".", "step_ratio", ":", "\n", "            ", "scale_factor", "=", "x", "/", "self", ".", "step_ratio", "\n", "", "else", ":", "\n", "            ", "scale_factor", "=", "(", "x", "-", "1", ")", "/", "(", "self", ".", "step_ratio", "-", "1", ")", "\n", "\n", "", "lrs", "=", "[", "]", "\n", "for", "base_lr", ",", "max_lr", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "max_lrs", ")", ":", "\n", "            ", "base_height", "=", "(", "max_lr", "-", "base_lr", ")", "*", "scale_factor", "\n", "if", "self", ".", "scale_mode", "==", "'cycle'", ":", "\n", "                ", "lr", "=", "base_lr", "+", "base_height", "*", "self", ".", "scale_fn", "(", "cycle", ")", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "+", "base_height", "*", "self", ".", "scale_fn", "(", "self", ".", "last_epoch", ")", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "\n", "", "if", "self", ".", "cycle_momentum", ":", "\n", "            ", "momentums", "=", "[", "]", "\n", "for", "base_momentum", ",", "max_momentum", "in", "zip", "(", "self", ".", "base_momentums", ",", "self", ".", "max_momentums", ")", ":", "\n", "                ", "base_height", "=", "(", "max_momentum", "-", "base_momentum", ")", "*", "scale_factor", "\n", "if", "self", ".", "scale_mode", "==", "'cycle'", ":", "\n", "                    ", "momentum", "=", "max_momentum", "-", "base_height", "*", "self", ".", "scale_fn", "(", "cycle", ")", "\n", "", "else", ":", "\n", "                    ", "momentum", "=", "max_momentum", "-", "base_height", "*", "self", ".", "scale_fn", "(", "self", ".", "last_epoch", ")", "\n", "", "momentums", ".", "append", "(", "momentum", ")", "\n", "", "for", "param_group", ",", "momentum", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "momentums", ")", ":", "\n", "                ", "param_group", "[", "'momentum'", "]", "=", "momentum", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmRestarts.__init__": [[683, 694], ["scheduler._LRScheduler.__init__", "ValueError", "ValueError", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "T_0", ",", "T_mult", "=", "1", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "T_0", "<=", "0", "or", "not", "isinstance", "(", "T_0", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected positive integer T_0, but got {}\"", ".", "format", "(", "T_0", ")", ")", "\n", "", "if", "T_mult", "<", "1", "or", "not", "isinstance", "(", "T_mult", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected integer T_mul >= 1, but got {}\"", ".", "format", "(", "T_mul", ")", ")", "\n", "", "self", ".", "T_0", "=", "T_0", "\n", "self", ".", "T_i", "=", "T_0", "\n", "self", ".", "T_mult", "=", "T_mult", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineAnnealingWarmRestarts", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "self", ".", "T_cur", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmRestarts.get_lr": [[695, 698], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "T_cur", "/", "self", ".", "T_i", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmRestarts.step": [[699, 732], ["math.floor", "zip", "scheduler.CosineAnnealingWarmRestarts.get_lr", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmUpRestarts.get_lr", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "\"\"\"Step could be called after every update, i.e. if one epoch has 10 iterations\n        (number_of_train_examples / batch_size), we should call SGDR.step(0.1), SGDR.step(0.2), etc.\n\n        This function can be called in an interleaved way.\n\n        Example:\n            >>> scheduler = SGDR(optimizer, T_0, T_mult)\n            >>> for epoch in range(20):\n            >>>     scheduler.step()\n            >>> scheduler.step(26)\n            >>> scheduler.step() # scheduler.step(27), instead of scheduler(20)\n        \"\"\"", "\n", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "self", ".", "T_cur", "=", "self", ".", "T_cur", "+", "1", "\n", "if", "self", ".", "T_cur", ">=", "self", ".", "T_i", ":", "\n", "                ", "self", ".", "T_cur", "=", "self", ".", "T_cur", "-", "self", ".", "T_i", "\n", "self", ".", "T_i", "=", "self", ".", "T_i", "*", "self", ".", "T_mult", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "T_0", ":", "\n", "                ", "if", "self", ".", "T_mult", "==", "1", ":", "\n", "                    ", "self", ".", "T_cur", "=", "epoch", "%", "self", ".", "T_0", "\n", "", "else", ":", "\n", "                    ", "n", "=", "int", "(", "math", ".", "log", "(", "(", "epoch", "/", "self", ".", "T_0", "*", "(", "self", ".", "T_mult", "-", "1", ")", "+", "1", ")", ",", "self", ".", "T_mult", ")", ")", "\n", "self", ".", "T_cur", "=", "epoch", "-", "self", ".", "T_0", "*", "(", "self", ".", "T_mult", "**", "n", "-", "1", ")", "/", "(", "self", ".", "T_mult", "-", "1", ")", "\n", "self", ".", "T_i", "=", "self", ".", "T_0", "*", "self", ".", "T_mult", "**", "(", "n", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "T_i", "=", "self", ".", "T_0", "\n", "self", ".", "T_cur", "=", "epoch", "\n", "", "", "self", ".", "last_epoch", "=", "math", ".", "floor", "(", "epoch", ")", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmUpRestarts.__init__": [[736, 753], ["scheduler._LRScheduler.__init__", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_0", ",", "T_mult", "=", "1", ",", "eta_max", "=", "0.1", ",", "T_up", "=", "0", ",", "gamma", "=", "1.", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "T_0", "<=", "0", "or", "not", "isinstance", "(", "T_0", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected positive integer T_0, but got {}\"", ".", "format", "(", "T_0", ")", ")", "\n", "", "if", "T_mult", "<", "1", "or", "not", "isinstance", "(", "T_mult", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected integer T_mult >= 1, but got {}\"", ".", "format", "(", "T_mult", ")", ")", "\n", "", "if", "T_up", "<", "0", "or", "not", "isinstance", "(", "T_up", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected positive integer T_up, but got {}\"", ".", "format", "(", "T_up", ")", ")", "\n", "", "self", ".", "T_0", "=", "T_0", "\n", "self", ".", "T_mult", "=", "T_mult", "\n", "self", ".", "base_eta_max", "=", "eta_max", "\n", "self", ".", "eta_max", "=", "eta_max", "\n", "self", ".", "T_up", "=", "T_up", "\n", "self", ".", "T_i", "=", "T_0", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "cycle", "=", "0", "\n", "super", "(", "CosineAnnealingWarmUpRestarts", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "self", ".", "T_cur", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmUpRestarts.get_lr": [[754, 762], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "T_cur", "==", "-", "1", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "elif", "self", ".", "T_cur", "<", "self", ".", "T_up", ":", "\n", "            ", "return", "[", "(", "self", ".", "eta_max", "-", "base_lr", ")", "*", "self", ".", "T_cur", "/", "self", ".", "T_up", "+", "base_lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "+", "(", "self", ".", "eta_max", "-", "base_lr", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "T_cur", "-", "self", ".", "T_up", ")", "/", "(", "self", ".", "T_i", "-", "self", ".", "T_up", ")", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmUpRestarts.step": [[763, 789], ["math.floor", "zip", "scheduler.CosineAnnealingWarmUpRestarts.get_lr", "int", "math.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.CosineAnnealingWarmUpRestarts.get_lr", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "self", ".", "T_cur", "=", "self", ".", "T_cur", "+", "1", "\n", "if", "self", ".", "T_cur", ">=", "self", ".", "T_i", ":", "\n", "                ", "self", ".", "cycle", "+=", "1", "\n", "self", ".", "T_cur", "=", "self", ".", "T_cur", "-", "self", ".", "T_i", "\n", "self", ".", "T_i", "=", "(", "self", ".", "T_i", "-", "self", ".", "T_up", ")", "*", "self", ".", "T_mult", "+", "self", ".", "T_up", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "T_0", ":", "\n", "                ", "if", "self", ".", "T_mult", "==", "1", ":", "\n", "                    ", "self", ".", "T_cur", "=", "epoch", "%", "self", ".", "T_0", "\n", "self", ".", "cycle", "=", "epoch", "//", "self", ".", "T_0", "\n", "", "else", ":", "\n", "                    ", "n", "=", "int", "(", "math", ".", "log", "(", "(", "epoch", "/", "self", ".", "T_0", "*", "(", "self", ".", "T_mult", "-", "1", ")", "+", "1", ")", ",", "self", ".", "T_mult", ")", ")", "\n", "self", ".", "cycle", "=", "n", "\n", "self", ".", "T_cur", "=", "epoch", "-", "self", ".", "T_0", "*", "(", "self", ".", "T_mult", "**", "n", "-", "1", ")", "/", "(", "self", ".", "T_mult", "-", "1", ")", "\n", "self", ".", "T_i", "=", "self", ".", "T_0", "*", "self", ".", "T_mult", "**", "(", "n", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "T_i", "=", "self", ".", "T_0", "\n", "self", ".", "T_cur", "=", "epoch", "\n", "\n", "", "", "self", ".", "eta_max", "=", "self", ".", "base_eta_max", "*", "(", "self", ".", "gamma", "**", "self", ".", "cycle", ")", "\n", "self", ".", "last_epoch", "=", "math", ".", "floor", "(", "epoch", ")", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.Actor._distribution": [[48, 50], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.Actor._log_prob_from_distribution": [[51, 53], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.Actor.forward": [[54, 63], ["core.Actor._distribution", "core.Actor._log_prob_from_distribution"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._distribution", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._log_prob_from_distribution"], ["\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPCategoricalActor.__init__": [[67, 70], ["torch.Module.__init__", "core.mlp", "list"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPCategoricalActor._distribution": [[71, 74], ["core.MLPCategoricalActor.logits_net", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical"], "methods", ["None"], ["\n", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPCategoricalActor._log_prob_from_distribution": [[75, 77], ["pi.log_prob"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.__init__": [[81, 99], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "core.mlp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.ones", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "list", "numpy.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._distribution": [[100, 105], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "core.MLPGaussianActor.mu_net", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._log_prob_from_distribution": [[106, 108], ["pi.log_prob().sum", "pi.log_prob"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.entropy": [[109, 111], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.update": [[112, 122], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Override _close in your subclass to perform any necessary cleanup.\n\n        Environments will automatically close() themselves when\n        garbage collected or when the program exits.\n        \"\"\"", "\n", "return", "\n", "\n", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPCritic.__init__": [[125, 138], ["torch.Module.__init__", "core.mlp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "list", "numpy.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], ["\n", "logger", ".", "warn", "(", "\"Could not seed environment %s\"", ",", "self", ")", "\n", "return", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPCritic.forward": [[140, 143], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "core.MLPCritic.v_net"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPCritic.update": [[144, 154], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["\n", "return", "self", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "spec", "is", "None", ":", "\n", "            ", "return", "'<{} instance>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "return", "'<{}<{}>>'", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "self", ".", "spec", ".", "id", ")", "\n", "\n", "\n", "", "", "", "class", "GoalEnv", "(", "Env", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.__init__": [[156, 171], ["torch.Module.__init__", "isinstance", "core.MLPCritic", "core.MLPGaussianActor", "isinstance", "core.MLPCategoricalActor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["\n", "\n", "def", "reset", "(", "self", ")", ":", "\n", "# Enforce that each GoalEnv uses a Goal-compatible observation space.", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "observation_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "            ", "raise", "error", ".", "Error", "(", "'GoalEnv requires an observation space of type gym.spaces.Dict'", ")", "\n", "", "result", "=", "super", "(", "GoalEnv", ",", "self", ")", ".", "reset", "(", ")", "\n", "for", "key", "in", "[", "'observation'", ",", "'achieved_goal'", ",", "'desired_goal'", "]", ":", "\n", "            ", "if", "key", "not", "in", "result", ":", "\n", "                ", "raise", "error", ".", "Error", "(", "'GoalEnv requires the \"{}\" key to be part of the observation dictionary.'", ".", "format", "(", "key", ")", ")", "\n", "", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step": [[172, 179], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "core.MLPActorCritic.pi._distribution", "core.MLPActorCritic.sample", "core.MLPActorCritic.pi._log_prob_from_distribution", "core.MLPActorCritic.v", "core.MLPActorCritic.sample.numpy", "core.MLPActorCritic.numpy", "core.MLPActorCritic.numpy"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._distribution", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor._log_prob_from_distribution"], ["\n", "", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.act": [[180, 182], ["core.MLPActorCritic.step"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.update": [[183, 193], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x.numpy().astype.numpy().astype.numpy().astype", "int", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "core.MLPActorCritic.pi.update", "core.MLPActorCritic.v.update", "x.numpy().astype.numpy().astype.numpy", "x.numpy().astype.numpy().astype.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "x.numpy().astype.numpy().astype.sum", "numpy.square().sum", "len", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# Space-related abstractions", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.combined_shape": [[10, 14], ["numpy.isscalar"], "function", ["None"], ["\n", "class", "Env", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.mlp": [[16, 22], ["range", "torch.Sequential", "len", "torch.Linear", "act", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.count_vars": [[24, 26], ["sum", "numpy.prod", "module.parameters"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.discount_cumsum": [[28, 44], ["scipy.signal.lfilter", "float"], "function", ["None"], ["\n", "\n", "# Set this in SOME subclasses", "\n", "metadata", "=", "{", "'render.modes'", ":", "[", "]", "}", "\n", "reward_range", "=", "(", "-", "float", "(", "'inf'", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "spec", "=", "None", "\n", "\n", "# Set these in ALL subclasses", "\n", "action_space", "=", "None", "\n", "observation_space", "=", "None", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.__init__": [[16, 26], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "algo.combined_shape", "algo.combined_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape"], ["\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ")", "\n", "return", "(", "\n", "self", ".", "times", "[", "idx", "]", ",", "\n", "self", ".", "qposs", "[", "idx", "]", ",", "\n", "self", ".", "qvels", "[", "idx", "]", ",", "\n", "self", ".", "qacts", "[", "idx", "]", ",", "\n", "self", ".", "obstacle_poss", "[", "idx", "]", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.store": [[27, 38], ["None"], "methods", ["None"], ["", "", "class", "SerializedBufferForTSNE", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.finish_path": [[39, 67], ["slice", "numpy.append", "numpy.append", "algo.discount_cumsum", "algo.discount_cumsum"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.discount_cumsum", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.discount_cumsum"], ["\n", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n", "\n", "", "", "class", "SerializedBuffer", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "mean", "(", "self", ".", "states", ",", "dim", "=", "0", ")", "\n", "self", ".", "epsilon", "=", "torch", ".", "zeros", "(", "self", ".", "mean", ".", "shape", ")", "+", "torch", ".", "tensor", "(", "[", "1e-4", "]", ")", "\n", "self", ".", "std", "=", "torch", ".", "max", "(", "torch", ".", "std", "(", "self", ".", "states", ",", "dim", "=", "0", ")", ",", "self", ".", "epsilon", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get": [[68, 82], ["spinup.utils.mpi_tools.mpi_statistics_scalar", "dict", "torch.as_tensor", "dict.items"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_statistics_scalar"], ["        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ",", "size", "=", "batch_size", ")", "\n", "return", "(", "\n", "self", ".", "states", "[", "idx", "]", ",", "\n", "self", ".", "actions", "[", "idx", "]", ",", "\n", "self", ".", "rewards", "[", "idx", "]", ",", "\n", "self", ".", "dones", "[", "idx", "]", ",", "\n", "self", ".", "next_states", "[", "idx", "]", "\n", ")", "\n", "\n", "", "", "class", "StartBuffer", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "buffer_size", ",", "time", ",", "qpos", ",", "qvel", ",", "qact", ",", "obstacle_pos", ",", "device", ")", ":", "\n", "        ", "self", ".", "_p", "=", "0", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "time", "=", "torch", ".", "empty", "(", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.__init__": [[21, 75], ["gym.make", "spinup.utils.logx.EpochLogger", "ppo.PPO.set_seed", "algo.MLPActorCritic", "spinup.utils.mpi_pytorch.sync_params", "tuple", "ppo.PPO.logger.log", "algo.ppo.buffer.GAEBuffer", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "itertools.chain", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.time", "spinup.utils.mpi_tools.proc_id", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "ppo.PPO.ac.pi.parameters", "ppo.PPO.ac.v.parameters", "ppo.PPO.ac.pi.parameters", "ppo.PPO.ac.v.parameters", "ppo.PPO.env.reset", "spinup.utils.mpi_tools.proc_id", "algo.count_vars"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.sync_params", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.count_vars"], ["# Calculate gae recursively from behind.", "\n", "gaes", "[", "-", "1", "]", "=", "deltas", "[", "-", "1", "]", "\n", "for", "t", "in", "reversed", "(", "range", "(", "rewards", ".", "size", "(", "0", ")", "-", "1", ")", ")", ":", "\n", "        ", "gaes", "[", "t", "]", "=", "deltas", "[", "t", "]", "+", "gamma", "*", "lambd", "*", "(", "1", "-", "dones", "[", "t", "]", ")", "*", "gaes", "[", "t", "+", "1", "]", "\n", "\n", "", "return", "gaes", "+", "values", ",", "(", "gaes", "-", "gaes", ".", "mean", "(", ")", ")", "/", "(", "gaes", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "\n", "\n", "", "class", "PPO", "(", "Algorithm", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "start_buffer_exp", ",", "gamma", "=", "0.995", ",", "\n", "rollout_length", "=", "2048", ",", "mix_buffer", "=", "20", ",", "lr_actor", "=", "3e-4", ",", "\n", "lr_critic", "=", "3e-4", ",", "units_actor", "=", "(", "64", ",", "64", ")", ",", "units_critic", "=", "(", "64", ",", "64", ")", ",", "\n", "epoch_ppo", "=", "10", ",", "clip_eps", "=", "0.2", ",", "lambd", "=", "0.97", ",", "coef_ent", "=", "0.0", ",", "\n", "max_grad_norm", "=", "10.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "state_shape", ",", "action_shape", ",", "device", ",", "seed", ",", "gamma", ")", "\n", "\n", "self", ".", "start_buffer_exp", "=", "start_buffer_exp", "\n", "\n", "# Rollout buffer.", "\n", "self", ".", "buffer", "=", "RolloutBuffer", "(", "\n", "buffer_size", "=", "rollout_length", ",", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "device", "=", "device", ",", "\n", "mix", "=", "mix_buffer", "\n", ")", "\n", "\n", "# Actor.", "\n", "self", ".", "actor", "=", "StateIndependentPolicy", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "hidden_units", "=", "units_actor", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Critic.", "\n", "self", ".", "critic", "=", "StateFunction", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "hidden_units", "=", "units_critic", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "optim_actor", "=", "Adam", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "lr_actor", ")", "\n", "self", ".", "optim_critic", "=", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "lr_critic", ")", "\n", "\n", "self", ".", "learning_steps_ppo", "=", "0", "\n", "self", ".", "rollout_length", "=", "rollout_length", "\n", "self", ".", "epoch_ppo", "=", "epoch_ppo", "\n", "self", ".", "clip_eps", "=", "clip_eps", "\n", "self", ".", "lambd", "=", "lambd", "\n", "self", ".", "coef_ent", "=", "coef_ent", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "", "def", "is_update", "(", "self", ",", "step", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.set_seed": [[76, 88], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "ppo.PPO.env.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["        ", "return", "step", "%", "self", ".", "rollout_length", "==", "0", "\n", "\n", "", "def", "step", "(", "self", ",", "env", ",", "state", ",", "t", ",", "step", ")", ":", "\n", "        ", "t", "+=", "1", "\n", "\n", "action", ",", "log_pi", "=", "self", ".", "explore", "(", "state", ")", "\n", "next_state", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "if", "self", ".", "args", ".", "env", "==", "'Walker2dCrawl-v1'", ":", "\n", "            ", "dist", "=", "env", ".", "unwrapped", ".", "get_dist", "(", ")", "\n", "self", ".", "buffer", ".", "append", "(", "state", ",", "action", ",", "reward", ",", "done", ",", "log_pi", ",", "np", ".", "append", "(", "next_state", ",", "np", ".", "array", "(", "dist", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.compute_loss_pi": [[90, 107], ["ppo.PPO.ac.pi", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ppo.PPO.ac.pi.entropy().mean().item", "torch.as_tensor().mean().item", "torch.as_tensor().mean().item", "torch.as_tensor().mean().item", "torch.as_tensor().mean().item", "dict", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp.gt", "torch.exp.gt", "torch.exp.lt", "torch.exp.lt", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "ppo.PPO.ac.pi.entropy", "ppo.PPO.ac.pi.entropy().mean", "torch.as_tensor().mean", "torch.as_tensor().mean", "torch.as_tensor().mean", "torch.as_tensor().mean", "torch.min", "torch.min", "torch.min", "torch.min", "ppo.PPO.ac.pi.entropy", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.entropy", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPGaussianActor.entropy"], ["", "if", "self", ".", "args", ".", "complex_task", "==", "'hurdle'", ":", "\n", "            ", "if", "self", ".", "front", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary", "(", ")", "\n", "", "else", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_rear", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'obstacle'", ":", "\n", "            ", "if", "self", ".", "front", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_obstacle", "(", ")", "\n", "", "else", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_rear_for_obstacle", "(", ")", "\n", "", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'pick'", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_pick", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'catch'", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_catch", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'serve'", ":", "\n", "            ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_for_serve", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "complex_task", "==", "'patrol'", ":", "\n", "            ", "if", "self", ".", "front", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.compute_loss_v": [[109, 112], ["ppo.PPO.ac.v"], "methods", ["None"], ["", "else", ":", "\n", "                ", "flag", "=", "env", ".", "unwrapped", ".", "is_transition_boundary_rear_for_patrol", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.compute_loss_v_batch": [[113, 117], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ppo.PPO.ac.v"], "methods", ["None"], ["", "", "if", "done", "or", "flag", "==", "-", "1", ":", "\n", "            ", "t", "=", "0", "\n", "next_state", "=", "env", ".", "reset", "(", ")", "\n", "start_sample", "=", "self", ".", "start_buffer_exp", ".", "sample", "(", ")", "\n", "next_state", "=", "env", ".", "unwrapped", ".", "rollback", "(", "start_sample", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.get_rollouts": [[118, 166], ["range", "ppo.PPO.ac.step", "ppo.PPO.env.step", "ppo.PPO.buf.store", "ppo.PPO.logger.store", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ppo.PPO.buf.finish_path", "print", "ppo.PPO.ac.step", "success_count_list.append", "ep_ret_list.append", "ep_len_list.append", "x_pos_list.append", "ppo.PPO.logger.store", "max", "max", "ppo.PPO.env.reset", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "sum", "len", "sum", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.finish_path", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], ["start_sample", "[", "1", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "2", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "3", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "start_sample", "[", "4", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "next_state", ",", "t", "\n", "\n", "", "def", "update", "(", "self", ",", "writer", ")", ":", "\n", "        ", "self", ".", "learning_steps", "+=", "1", "\n", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", "=", "self", ".", "buffer", ".", "get", "(", ")", "\n", "self", ".", "update_ppo", "(", "\n", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", ",", "writer", ")", "\n", "\n", "", "def", "update_ppo", "(", "self", ",", "states", ",", "actions", ",", "rewards", ",", "dones", ",", "log_pis", ",", "next_states", ",", "\n", "writer", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "values", "=", "self", ".", "critic", "(", "states", ")", "\n", "next_values", "=", "self", ".", "critic", "(", "next_states", ")", "\n", "\n", "", "targets", ",", "gaes", "=", "calculate_gae", "(", "\n", "values", ",", "rewards", ",", "dones", ",", "next_values", ",", "self", ".", "gamma", ",", "self", ".", "lambd", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "epoch_ppo", ")", ":", "\n", "            ", "self", ".", "learning_steps_ppo", "+=", "1", "\n", "self", ".", "update_critic", "(", "states", ",", "targets", ",", "writer", ")", "\n", "self", ".", "update_actor", "(", "states", ",", "actions", ",", "log_pis", ",", "gaes", ",", "writer", ")", "\n", "\n", "", "", "def", "update_critic", "(", "self", ",", "states", ",", "targets", ",", "writer", ")", ":", "\n", "        ", "loss_critic", "=", "(", "self", ".", "critic", "(", "states", ")", "-", "targets", ")", ".", "pow_", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optim_critic", ".", "zero_grad", "(", ")", "\n", "loss_critic", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optim_critic", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "learning_steps_ppo", "%", "self", ".", "epoch_ppo", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\n", "'loss/critic'", ",", "loss_critic", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "\n", "", "", "def", "update_actor", "(", "self", ",", "states", ",", "actions", ",", "log_pis_old", ",", "gaes", ",", "writer", ")", ":", "\n", "        ", "log_pis", "=", "self", ".", "actor", ".", "evaluate_log_pi", "(", "states", ",", "actions", ")", "\n", "entropy", "=", "-", "log_pis", ".", "mean", "(", ")", "\n", "\n", "ratios", "=", "(", "log_pis", "-", "log_pis_old", ")", ".", "exp_", "(", ")", "\n", "loss_actor1", "=", "-", "ratios", "*", "gaes", "\n", "loss_actor2", "=", "-", "torch", ".", "clamp", "(", "\n", "ratios", ",", "\n", "1.0", "-", "self", ".", "clip_eps", ",", "\n", "1.0", "+", "self", ".", "clip_eps", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.update": [[168, 263], ["ppo.PPO.compute_loss_pi", "pi_l_old.item.item.item", "ppo.PPO.compute_loss_v().item", "ppo.PPO.logger.store", "spinup.Dataset", "range", "loss_pi.item", "ppo.PPO.item", "ppo.PPO.logger.store", "dict", "spinup.Dataset.iterate_once", "loss_pi.item", "ppo.PPO.item", "ppo.PPO.compute_loss_v", "ppo.PPO.optimizer.zero_grad", "ppo.PPO.compute_loss_pi", "ppo.PPO.compute_loss_v_batch", "tot_loss.backward", "spinup.utils.mpi_pytorch.mpi_avg_grads", "spinup.utils.mpi_pytorch.mpi_avg_grads", "ppo.PPO.optimizer.step", "spinup.utils.mpi_tools.mpi_avg", "loss_pi.item", "ppo.PPO.item"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_pi", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.dataset.Dataset.iterate_once", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.compute_loss_v", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_pi", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.compute_loss_v_batch", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.mpi_avg_grads", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.mpi_avg_grads", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.mpi_avg"], ["loss_actor", "=", "torch", ".", "max", "(", "loss_actor1", ",", "loss_actor2", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optim_actor", ".", "zero_grad", "(", ")", "\n", "(", "loss_actor", "-", "self", ".", "coef_ent", "*", "entropy", ")", ".", "backward", "(", "retain_graph", "=", "False", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optim_actor", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "learning_steps_ppo", "%", "self", ".", "epoch_ppo", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\n", "'loss/actor'", ",", "loss_actor", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'stats/entropy'", ",", "entropy", ".", "item", "(", ")", ",", "self", ".", "learning_steps", ")", "\n", "\n", "\n", "", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'model.pt'", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'actor_mean'", ":", "self", ".", "actor", ".", "mean", ",", "\n", "'actor_std'", ":", "self", ".", "actor", ".", "std", ",", "\n", "'critic_mean'", ":", "self", ".", "critic", ".", "mean", ",", "\n", "'critic_std'", ":", "self", ".", "critic", ".", "std", ",", "\n", "'model'", ":", "self", ".", "actor", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "fname", ")", "\n", "\n", "", "", "class", "PPOExpert", "(", "PPO", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "state_shape", ",", "action_shape", ",", "device", ",", "path", ",", "\n", "units_actor", "=", "(", "64", ",", "64", ")", ")", ":", "\n", "# Actor.", "\n", "        ", "self", ".", "actor", "=", "StateIndependentPolicy", "(", "\n", "state_shape", "=", "state_shape", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "hidden_units", "=", "units_actor", ",", "\n", "hidden_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "actor", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "self", ".", "actor", ".", "mean", "=", "checkpoint", "[", "'actor_mean'", "]", "\n", "self", ".", "actor", ".", "std", "=", "checkpoint", "[", "'actor_std'", "]", "\n", "self", ".", "device", "=", "device", "\n", "\n", "", "def", "get_mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actor", ".", "mean", "\n", "\n", "", "def", "get_std", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actor", ".", "std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.train": [[264, 306], ["range", "ppo.PPO.get_rollouts", "ppo.PPO.buf.get", "ppo.PPO.ac.update", "ppo.PPO.update", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.log_tabular", "ppo.PPO.logger.dump_tabular", "ppo.PPO.save_model", "spinup.utils.mpi_tools.proc_id", "ppo.PPO.write_tensorboard", "spinup.utils.mpi_tools.proc_id", "time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.get_rollouts", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.buffer.GAEBuffer.get", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.dump_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.write_tensorboard", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.save_model": [[307, 322], ["os.join", "os.join", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "os.join", "os.join", "ppo.PPO.ac.state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.ppo.PPO.write_tensorboard": [[323, 336], ["ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.SquashedGaussianMLPActor.__init__": [[31, 45], ["torch.Module.__init__", "core.mlp", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "list", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["\n", "\n", "# Set this in SOME subclasses", "\n", "metadata", "=", "{", "'render.modes'", ":", "[", "]", "}", "\n", "reward_range", "=", "(", "-", "float", "(", "'inf'", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "spec", "=", "None", "\n", "\n", "# Set these in ALL subclasses", "\n", "action_space", "=", "None", "\n", "observation_space", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.SquashedGaussianMLPActor.forward": [[47, 78], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "core.SquashedGaussianMLPActor.net", "core.SquashedGaussianMLPActor.mu_layer", "core.SquashedGaussianMLPActor.log_std_layer", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.normal.Normal.rsample", "torch.distributions.normal.Normal.rsample", "torch.distributions.normal.Normal.rsample", "torch.distributions.normal.Normal.log_prob().sum", "torch.distributions.normal.Normal.log_prob().sum", "torch.distributions.normal.Normal.log_prob().sum", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob", "torch.softplus", "torch.softplus", "torch.softplus", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log"], ["        ", "\"\"\"Run one timestep of the environment's dynamics. When end of\n        episode is reached, you are responsible for calling `reset()`\n        to reset this environment's state.\n\n        Accepts an action and returns a tuple (observation, reward, done, info).\n\n        Args:\n            action (object): an action provided by the environment\n\n        Returns:\n            observation (object): agent's observation of the current environment\n            reward (float) : amount of reward returned after previous action\n            done (boolean): whether the episode has ended, in which case further step() calls will return undefined results\n            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the state of the environment and returns an initial observation.\n\n        Returns: observation (object): the initial observation of the\n            space.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.SquashedGaussianMLPActor.update": [[79, 86], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.MLPQFunction.__init__": [[91, 102], ["torch.Module.__init__", "core.mlp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "list", "numpy.ones", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.azure_utils.Container.list"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.MLPQFunction.forward": [[104, 108], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "core.MLPQFunction.q", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.MLPQFunction.update": [[109, 116], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.MLPActorCritic.__init__": [[120, 132], ["torch.Module.__init__", "core.SquashedGaussianMLPActor", "core.MLPQFunction", "core.MLPQFunction"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.MLPActorCritic.act": [[133, 137], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "core.MLPActorCritic.pi", "a.numpy"], "methods", ["None"], ["\n", "logger", ".", "warn", "(", "\"Could not seed environment %s\"", ",", "self", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.MLPActorCritic.update": [[138, 144], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "core.MLPActorCritic.pi.update", "core.MLPActorCritic.q1.update", "core.MLPActorCritic.q2.update"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "\"\"\"Completely unwrap this env.\n\n        Returns:\n            gym.Env: The base non-wrapped gym.Env instance\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape": [[10, 14], ["numpy.isscalar"], "function", ["None"], ["\n", "class", "Env", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.mlp": [[15, 21], ["range", "torch.Sequential", "len", "torch.Linear", "act", "len"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.count_vars": [[22, 24], ["sum", "numpy.prod", "module.parameters"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum"], []], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.__init__": [[14, 21], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "algo.combined_shape", "algo.combined_shape", "algo.combined_shape"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.combined_shape"], ["self", ".", "qacts", "=", "tmp", "[", "'qact'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "obstacle_poss", "=", "tmp", "[", "'obstacle_pos'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "_n", ")", "\n", "return", "(", "\n", "self", ".", "times", "[", "idx", "]", ",", "\n", "self", ".", "qposs", "[", "idx", "]", ",", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store": [[22, 30], ["min"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["self", ".", "qvels", "[", "idx", "]", ",", "\n", "self", ".", "qacts", "[", "idx", "]", ",", "\n", "self", ".", "obstacle_poss", "[", "idx", "]", "\n", ")", "\n", "\n", "", "", "class", "SerializedBufferForTSNE", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "tmp", "=", "torch", ".", "load", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.sample_batch": [[31, 39], ["numpy.random.randint", "dict", "torch.as_tensor", "dict.items"], "methods", ["None"], ["self", ".", "buffer_size", "=", "self", ".", "_n", "=", "tmp", "[", "'state'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "states", "=", "tmp", "[", "'state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "tmp", "[", "'action'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "tmp", "[", "'reward'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "tmp", "[", "'done'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "next_states", "=", "tmp", "[", "'next_state'", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.__init__": [[23, 77], ["gym.make", "spinup.utils.logx.EpochLogger", "sac.SAC.set_seed", "algo.MLPActorCritic", "copy.deepcopy", "spinup.utils.mpi_pytorch.sync_params", "sac.SAC.ac_targ.parameters", "itertools.chain", "algo.sac.buffer.ReplayBuffer", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "tuple", "sac.SAC.logger.log", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "time.time", "sac.SAC.ac.q1.parameters", "sac.SAC.ac.q2.parameters", "sac.SAC.ac.pi.parameters", "spinup.utils.mpi_tools.proc_id", "algo.count_vars"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.make", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_pytorch.sync_params", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.log", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.mpi_tools.proc_id", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.core.count_vars"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger_kwargs", ")", ":", "\n", "        ", "self", ".", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "EpochLogger", "(", "**", "logger_kwargs", ")", "\n", "self", ".", "seed", "=", "args", ".", "seed", "+", "10000", "*", "proc_id", "(", ")", "\n", "self", ".", "set_seed", "(", ")", "\n", "self", ".", "steps_per_epoch", "=", "args", ".", "sac_steps_per_epoch", "\n", "self", ".", "epochs", "=", "args", ".", "epochs", "\n", "self", ".", "replay_size", "=", "args", ".", "sac_replay_size", "\n", "self", ".", "gamma", "=", "args", ".", "sac_gamma", "\n", "self", ".", "polyak", "=", "args", ".", "sac_polyak", "\n", "self", ".", "lr", "=", "args", ".", "sac_lr", "\n", "self", ".", "alpha", "=", "args", ".", "sac_alpha", "\n", "self", ".", "batch_size", "=", "args", ".", "sac_batchsize", "\n", "self", ".", "start_steps", "=", "args", ".", "sac_start_steps", "\n", "self", ".", "update_after", "=", "args", ".", "sac_update_after", "\n", "self", ".", "update_every", "=", "args", ".", "sac_update_every", "\n", "self", ".", "max_ep_len", "=", "args", ".", "sac_max_ep_len", "\n", "self", ".", "save_freq", "=", "args", ".", "sac_save_freq", "\n", "self", ".", "obs_dim", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "act_dim", "=", "self", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "act_limit", "=", "self", ".", "env", ".", "action_space", ".", "high", "[", "0", "]", "\n", "\n", "# Create actor-critic module and target networks", "\n", "self", ".", "ac", "=", "core", ".", "MLPActorCritic", "(", "self", ".", "env", ".", "observation_space", ",", "self", ".", "env", ".", "action_space", ",", "\n", "hidden_sizes", "=", "[", "256", "]", "*", "2", ")", "\n", "self", ".", "ac_targ", "=", "deepcopy", "(", "self", ".", "ac", ")", "\n", "sync_params", "(", "self", ".", "ac", ")", "\n", "# Freeze target networks with respect to optimizers (only update via polyak averaging)", "\n", "for", "p", "in", "self", ".", "ac_targ", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# List of parameters for both Q-networks (save this for convenience)", "\n", "", "self", ".", "q_params", "=", "itertools", ".", "chain", "(", "self", ".", "ac", ".", "q1", ".", "parameters", "(", ")", ",", "self", ".", "ac", ".", "q2", ".", "parameters", "(", ")", ")", "\n", "\n", "# Experience buffer", "\n", "self", ".", "replay_buffer", "=", "ReplayBuffer", "(", "obs_dim", "=", "self", ".", "obs_dim", ",", "act_dim", "=", "self", ".", "act_dim", ",", "size", "=", "self", ".", "replay_size", ")", "\n", "\n", "self", ".", "pi_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ac", ".", "pi", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "self", ".", "q_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "q_params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n", "\n", "# Count variables (protip: try to get a feel for how different size networks behave!)", "\n", "self", ".", "var_counts", "=", "tuple", "(", "core", ".", "count_vars", "(", "module", ")", "for", "module", "in", "[", "self", ".", "ac", ".", "pi", ",", "self", ".", "ac", ".", "q1", ",", "self", ".", "ac", ".", "q2", "]", ")", "\n", "self", ".", "logger", ".", "log", "(", "'\\nNumber of parameters: \\t pi: %d, \\t q1: %d, \\t q2: %d\\n'", "%", "self", ".", "var_counts", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "logger", ".", "output_dir", "+", "'/tensorboard'", ")", "\n", "\n", "\n", "# Prepare for interaction with environment", "\n", "self", ".", "total_steps", "=", "self", ".", "steps_per_epoch", "*", "self", ".", "epochs", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "tensorboard_scalars", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.set_seed": [[78, 90], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "sac.SAC.env.seed"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "self", ")", ":", "\n", "# Random seed", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "seed", ")", "# for multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "self", ".", "env", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_q": [[92, 119], ["sac.SAC.ac.q1", "sac.SAC.ac.q2", "dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sac.SAC.ac.pi", "sac.SAC.ac_targ.q1", "sac.SAC.ac_targ.q2", "torch.min", "torch.min", "torch.min", "torch.min", "sac.SAC.detach().numpy", "sac.SAC.detach().numpy", "sac.SAC.detach", "sac.SAC.detach"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.TwinnedStateActionFunction.q1", "home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.TwinnedStateActionFunction.q1", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "compute_loss_q", "(", "self", ",", "data", ")", ":", "\n", "        ", "o", ",", "a", ",", "r", ",", "o2", ",", "d", "=", "data", "[", "'obs'", "]", ",", "data", "[", "'act'", "]", ",", "data", "[", "'rew'", "]", ",", "data", "[", "'obs2'", "]", ",", "data", "[", "'done'", "]", "\n", "\n", "q1", "=", "self", ".", "ac", ".", "q1", "(", "o", ",", "a", ")", "\n", "q2", "=", "self", ".", "ac", ".", "q2", "(", "o", ",", "a", ")", "\n", "\n", "# Bellman backup for Q functions", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Target actions come from *current* policy", "\n", "            ", "a2", ",", "logp_a2", "=", "self", ".", "ac", ".", "pi", "(", "o2", ")", "\n", "\n", "# Target Q-values", "\n", "q1_pi_targ", "=", "self", ".", "ac_targ", ".", "q1", "(", "o2", ",", "a2", ")", "\n", "q2_pi_targ", "=", "self", ".", "ac_targ", ".", "q2", "(", "o2", ",", "a2", ")", "\n", "q_pi_targ", "=", "torch", ".", "min", "(", "q1_pi_targ", ",", "q2_pi_targ", ")", "\n", "backup", "=", "r", "+", "self", ".", "gamma", "*", "(", "1", "-", "d", ")", "*", "(", "q_pi_targ", "-", "self", ".", "alpha", "*", "logp_a2", ")", "\n", "\n", "# MSE loss against Bellman backup", "\n", "", "loss_q1", "=", "(", "(", "q1", "-", "backup", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss_q2", "=", "(", "(", "q2", "-", "backup", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss_q", "=", "loss_q1", "+", "loss_q2", "\n", "\n", "# Useful info for logging", "\n", "q_info", "=", "dict", "(", "Q1Vals", "=", "q1", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "Q2Vals", "=", "q2", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss_q", ",", "q_info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_pi": [[121, 135], ["sac.SAC.ac.pi", "sac.SAC.ac.q1", "sac.SAC.ac.q2", "torch.min", "torch.min", "torch.min", "torch.min", "dict", "logp_pi.detach().numpy", "logp_pi.detach"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.network.value.TwinnedStateActionFunction.q1", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.min"], ["", "def", "compute_loss_pi", "(", "self", ",", "data", ")", ":", "\n", "        ", "o", "=", "data", "[", "'obs'", "]", "\n", "pi", ",", "logp_pi", "=", "self", ".", "ac", ".", "pi", "(", "o", ")", "\n", "q1_pi", "=", "self", ".", "ac", ".", "q1", "(", "o", ",", "pi", ")", "\n", "q2_pi", "=", "self", ".", "ac", ".", "q2", "(", "o", ",", "pi", ")", "\n", "q_pi", "=", "torch", ".", "min", "(", "q1_pi", ",", "q2_pi", ")", "\n", "\n", "# Entropy-regularized policy loss", "\n", "loss_pi", "=", "(", "self", ".", "alpha", "*", "logp_pi", "-", "q_pi", ")", ".", "mean", "(", ")", "\n", "\n", "# Useful info for logging", "\n", "pi_info", "=", "dict", "(", "LogPi", "=", "logp_pi", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "loss_pi", ",", "pi_info", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update": [[136, 173], ["sac.SAC.q_optimizer.zero_grad", "sac.SAC.compute_loss_q", "loss_q.backward", "sac.SAC.q_optimizer.step", "sac.SAC.logger.store", "loss_q.item", "sac.SAC.pi_optimizer.zero_grad", "sac.SAC.compute_loss_pi", "loss_pi.backward", "sac.SAC.pi_optimizer.step", "sac.SAC.logger.store", "loss_pi.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "loss_q.item", "loss_pi.item", "sac.SAC.ac.parameters", "sac.SAC.ac_targ.parameters", "p_targ.data.mul_", "p_targ.data.add_"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_q", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.compute_loss_pi", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store"], ["", "def", "update", "(", "self", ",", "data", ")", ":", "\n", "# First run one gradient descent step for Q1 and Q2", "\n", "        ", "self", ".", "q_optimizer", ".", "zero_grad", "(", ")", "\n", "loss_q", ",", "q_info", "=", "self", ".", "compute_loss_q", "(", "data", ")", "\n", "loss_q", ".", "backward", "(", ")", "\n", "self", ".", "q_optimizer", ".", "step", "(", ")", "\n", "\n", "# Record things", "\n", "self", ".", "logger", ".", "store", "(", "LossQ", "=", "loss_q", ".", "item", "(", ")", ",", "**", "q_info", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'LossQ'", "]", "=", "loss_q", ".", "item", "(", ")", "\n", "\n", "# Freeze Q-networks so you don't waste computational effort ", "\n", "# computing gradients for them during the policy learning step.", "\n", "for", "p", "in", "self", ".", "q_params", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# Next run one gradient descent step for pi.", "\n", "", "self", ".", "pi_optimizer", ".", "zero_grad", "(", ")", "\n", "loss_pi", ",", "pi_info", "=", "self", ".", "compute_loss_pi", "(", "data", ")", "\n", "loss_pi", ".", "backward", "(", ")", "\n", "self", ".", "pi_optimizer", ".", "step", "(", ")", "\n", "\n", "# Unfreeze Q-networks so you can optimize it at next DDPG step.", "\n", "for", "p", "in", "self", ".", "q_params", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "# Record things", "\n", "", "self", ".", "logger", ".", "store", "(", "LossPi", "=", "loss_pi", ".", "item", "(", ")", ",", "**", "pi_info", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'LossPi'", "]", "=", "loss_pi", ".", "item", "(", ")", "\n", "\n", "# Finally, update target networks by polyak averaging.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p", ",", "p_targ", "in", "zip", "(", "self", ".", "ac", ".", "parameters", "(", ")", ",", "self", ".", "ac_targ", ".", "parameters", "(", ")", ")", ":", "\n", "# NB: We use an in-place operations \"mul_\", \"add_\" to update target", "\n", "# params, as opposed to \"mul\" and \"add\", which would make new tensors.", "\n", "                ", "p_targ", ".", "data", ".", "mul_", "(", "self", ".", "polyak", ")", "\n", "p_targ", ".", "data", ".", "add_", "(", "(", "1", "-", "self", ".", "polyak", ")", "*", "p", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.get_action": [[174, 177], ["sac.SAC.ac.act", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["", "", "", "def", "get_action", "(", "self", ",", "o", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "ac", ".", "act", "(", "torch", ".", "as_tensor", "(", "o", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.train": [[178, 269], ["range", "sac.SAC.env.reset", "sac.SAC.ac.update", "sac.SAC.env.step", "sac.SAC.replay_buffer.store", "sac.SAC.get_action", "sac.SAC.env.action_space.sample", "success_count_list.append", "ep_ret_list.append", "ep_len_list.append", "x_pos_list.append", "sac.SAC.logger.store", "range", "max", "max", "ep_ret_list.clear", "ep_len_list.clear", "success_count_list.clear", "x_pos_list.clear", "sac.SAC.write_tensorboard", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.log_tabular", "sac.SAC.logger.dump_tabular", "sac.SAC.env.reset", "sac.SAC.replay_buffer.sample_batch", "sac.SAC.update", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sac.SAC.save_model", "time.time"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.get_action", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.store", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.write_tensorboard", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.EpochLogger.log_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.logx.Logger.dump_tabular", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.buffer.ReplayBuffer.sample_batch", "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.update", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.trainer(my).Trainer.time"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "success_count_list", "=", "[", "]", "\n", "ep_ret_list", "=", "[", "]", "\n", "ep_len_list", "=", "[", "]", "\n", "x_pos_list", "=", "[", "]", "\n", "\n", "o", ",", "ep_ret", ",", "ep_len", "=", "self", ".", "env", ".", "reset", "(", ")", ",", "0", ",", "0", "\n", "for", "t", "in", "range", "(", "self", ".", "total_steps", ")", ":", "\n", "\n", "# Until start_steps have elapsed, randomly sample actions", "\n", "# from a uniform distribution for better exploration. Afterwards, ", "\n", "# use the learned policy. ", "\n", "            ", "if", "t", ">", "self", ".", "start_steps", ":", "\n", "                ", "a", "=", "self", ".", "get_action", "(", "o", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "self", ".", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "\n", "# Step the envf", "\n", "", "self", ".", "ac", ".", "update", "(", "o", ")", "\n", "o2", ",", "r", ",", "d", ",", "info", "=", "self", ".", "env", ".", "step", "(", "a", ")", "\n", "ep_ret", "+=", "r", "\n", "ep_len", "+=", "1", "\n", "\n", "# Ignore the \"done\" signal if it comes from hitting the time", "\n", "# horizon (that is, when it's an artificial terminal signal", "\n", "# that isn't based on the agent's state)", "\n", "d", "=", "False", "if", "ep_len", "==", "self", ".", "max_ep_len", "else", "d", "\n", "\n", "# Store experience to replay buffer", "\n", "self", ".", "replay_buffer", ".", "store", "(", "o", ",", "a", ",", "r", ",", "o2", ",", "d", ")", "\n", "\n", "# Super critical, easy to overlook step: make sure to update ", "\n", "# most recent observation!", "\n", "o", "=", "o2", "\n", "\n", "# End of trajectory handling", "\n", "if", "d", "or", "(", "ep_len", "==", "self", ".", "max_ep_len", ")", ":", "\n", "                ", "success_count_list", ".", "append", "(", "info", "[", "'success_count'", "]", ")", "\n", "ep_ret_list", ".", "append", "(", "ep_ret", ")", "\n", "ep_len_list", ".", "append", "(", "ep_len", ")", "\n", "x_pos_list", ".", "append", "(", "info", "[", "'x_pos'", "]", ")", "\n", "self", ".", "logger", ".", "store", "(", "EpRet", "=", "ep_ret", ",", "EpLen", "=", "ep_len", ",", "EpSuccessCount", "=", "info", "[", "'success_count'", "]", ",", "XPos", "=", "info", "[", "'x_pos'", "]", ")", "\n", "\n", "o", ",", "ep_ret", ",", "ep_len", "=", "self", ".", "env", ".", "reset", "(", ")", ",", "0", ",", "0", "\n", "\n", "# Update handling", "\n", "", "if", "t", ">=", "self", ".", "update_after", "and", "t", "%", "self", ".", "update_every", "==", "0", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "update_every", ")", ":", "\n", "                    ", "batch", "=", "self", ".", "replay_buffer", ".", "sample_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "update", "(", "data", "=", "batch", ")", "\n", "\n", "# End of epoch handling", "\n", "", "", "if", "(", "t", "+", "1", ")", "%", "self", ".", "steps_per_epoch", "==", "0", ":", "\n", "                ", "epoch", "=", "(", "t", "+", "1", ")", "//", "self", ".", "steps_per_epoch", "\n", "\n", "self", ".", "tensorboard_scalars", "[", "'EpRet'", "]", "=", "sum", "(", "ep_ret_list", ")", "/", "len", "(", "ep_ret_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'EpLen'", "]", "=", "sum", "(", "ep_len_list", ")", "/", "len", "(", "ep_len_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'EpSuccessCount'", "]", "=", "sum", "(", "success_count_list", ")", "/", "len", "(", "success_count_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'MaxEpRet'", "]", "=", "max", "(", "ep_ret_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'XPos'", "]", "=", "sum", "(", "x_pos_list", ")", "/", "len", "(", "x_pos_list", ")", "\n", "self", ".", "tensorboard_scalars", "[", "'XPosMax'", "]", "=", "max", "(", "x_pos_list", ")", "\n", "ep_ret_list", ".", "clear", "(", ")", "\n", "ep_len_list", ".", "clear", "(", ")", "\n", "success_count_list", ".", "clear", "(", ")", "\n", "x_pos_list", ".", "clear", "(", ")", "\n", "\n", "\n", "\n", "# Save model", "\n", "if", "(", "epoch", "%", "self", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "self", ".", "epochs", ")", ":", "\n", "                    ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "self", ".", "write_tensorboard", "(", "epoch", "-", "1", ")", "\n", "\n", "# Test the performance of the deterministic version of the agent.", "\n", "# test_agent()", "\n", "\n", "# Log info about epoch", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'Epoch'", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'EpRet'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'EpLen'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'XPos'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'EpSuccessCount'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'TotalEnvInteracts'", ",", "t", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'Q1Vals'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'Q2Vals'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'LogPi'", ",", "with_min_and_max", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'LossPi'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'LossQ'", ",", "average_only", "=", "True", ")", "\n", "self", ".", "logger", ".", "log_tabular", "(", "'Time'", ",", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "self", ".", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.write_tensorboard": [[270, 279], ["sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar", "sac.SAC.writer.add_scalar"], "methods", ["None"], ["", "", "", "def", "write_tensorboard", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/AverageEpRet'", ",", "self", ".", "tensorboard_scalars", "[", "'EpRet'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/MaxEpRet'", ",", "self", ".", "tensorboard_scalars", "[", "'MaxEpRet'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/EpLen'", ",", "self", ".", "tensorboard_scalars", "[", "'EpLen'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/LossQ'", ",", "self", ".", "tensorboard_scalars", "[", "'LossQ'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/LossPi'", ",", "self", ".", "tensorboard_scalars", "[", "'LossPi'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/EpSuccessCount'", ",", "self", ".", "tensorboard_scalars", "[", "'EpSuccessCount'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/XPos'", ",", "self", ".", "tensorboard_scalars", "[", "'XPos'", "]", ",", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "self", ".", "args", ".", "env", "+", "'/XPosMax'", ",", "self", ".", "tensorboard_scalars", "[", "'XPosMax'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.sac.sac.SAC.save_model": [[281, 293], ["os.join", "os.join", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "os.join", "os.join", "sac.SAC.ac.state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], ["", "def", "save_model", "(", "self", ",", "sub", "=", "''", ")", ":", "\n", "        ", "fpath", "=", "self", ".", "logger", ".", "output_dir", "\n", "fpath", "=", "osp", ".", "join", "(", "osp", ".", "join", "(", "fpath", ",", "'pyt_save'", ")", ",", "sub", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'model.pt'", ")", "\n", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'pi_rms_mean'", ":", "self", ".", "ac", ".", "pi", ".", "rms_mean", ",", "\n", "'pi_rms_std'", ":", "self", ".", "ac", ".", "pi", ".", "rms_std", ",", "\n", "'pi_rms_count'", ":", "self", ".", "ac", ".", "pi", ".", "rms_count", ",", "\n", "'model'", ":", "self", ".", "ac", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "fname", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN.__init__": [[11, 24], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.zeros", "torch.ones", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "actions_dim", ")", ":", "\n", "        ", "super", "(", "DQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_inputs", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "actions_dim", ")", "\n", ")", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "zeros", "(", "num_inputs", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "std", "=", "torch", ".", "ones", "(", "num_inputs", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN.forward": [[25, 28], ["torch.clamp", "q_network.DQN.nn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "clamp", "(", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ",", "min", "=", "-", "5.0", ",", "max", "=", "5.0", ")", "\n", "return", "self", ".", "nn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.__init__": [[30, 49], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "q_network.CnnDQN.features_size"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.features_size"], ["    ", "def", "__init__", "(", "self", ",", "inputs_shape", ",", "num_actions", ")", ":", "\n", "        ", "super", "(", "CnnDQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inut_shape", "=", "inputs_shape", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inputs_shape", "[", "0", "]", ",", "32", ",", "kernel_size", "=", "8", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "features_size", "(", ")", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "num_actions", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward": [[51, 56], ["q_network.CnnDQN.features", "q_network.CnnDQN.view", "q_network.CnnDQN.fc", "q_network.CnnDQN.size"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.features_size": [[57, 59], ["q_network.CnnDQN.features().view().size", "q_network.CnnDQN.features().view", "q_network.CnnDQN.features", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "def", "features_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "features", "(", "torch", ".", "zeros", "(", "1", ",", "*", "self", ".", "inut_shape", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.__init__": [[61, 72], ["q_network.replay_buffer.ReplayBuffer", "q_network.DQN", "q_network.DQN", "q_network.DQN_Converter.target_model.load_state_dict", "torch.optim.Adam", "q_network.DQN_Converter.model.state_dict", "q_network.DQN_Converter.model.parameters"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.load_state_dict", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "state_dim", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "is_training", "=", "True", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "buffer", "=", "ReplayBuffer", "(", "self", ".", "args", ".", "max_buffer_size_q", ")", "\n", "\n", "\n", "self", ".", "model", "=", "DQN", "(", "state_dim", ",", "2", ")", "\n", "self", ".", "target_model", "=", "DQN", "(", "state_dim", ",", "2", ")", "\n", "self", ".", "target_model", ".", "load_state_dict", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_optim", "=", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate_q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act": [[73, 78], ["torch.tensor().unsqueeze", "q_network.DQN_Converter.model.forward", "[].item", "torch.tensor", "q_network.DQN_Converter.max"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.CnnDQN.forward", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "act", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "=", "torch", ".", "tensor", "(", "state", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "0", ")", "\n", "q_value", "=", "self", ".", "model", ".", "forward", "(", "state", ")", "\n", "action", "=", "q_value", ".", "max", "(", "1", ")", "[", "1", "]", ".", "item", "(", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning": [[79, 105], ["q_network.DQN_Converter.buffer.sample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "q_network.DQN_Converter.model", "q_network.DQN_Converter.model", "q_network.DQN_Converter.target_model", "q_network.DQN_Converter.gather().squeeze", "q_network.DQN_Converter.gather().squeeze", "q_network.DQN_Converter.model_optim.zero_grad", "loss.backward", "q_network.DQN_Converter.model_optim.step", "loss.item", "q_network.DQN_Converter.target_model.load_state_dict", "q_network.DQN_Converter.gather", "q_network.DQN_Converter.gather", "q_network.DQN_Converter.model.state_dict", "torch.tensor.unsqueeze", "[].unsqueeze", "expected_q_value.detach", "q_network.DQN_Converter.max"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.load_state_dict", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.max"], ["", "def", "learning", "(", "self", ",", "fr", ")", ":", "\n", "        ", "s0", ",", "a", ",", "r", ",", "s1", ",", "done", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "\n", "s0", "=", "torch", ".", "tensor", "(", "s0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "s1", "=", "torch", ".", "tensor", "(", "s1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "a", "=", "torch", ".", "tensor", "(", "a", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "r", "=", "torch", ".", "tensor", "(", "r", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "done", "=", "torch", ".", "tensor", "(", "done", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "q_values", "=", "self", ".", "model", "(", "s0", ")", "\n", "next_q_values", "=", "self", ".", "model", "(", "s1", ")", "\n", "next_q_state_values", "=", "self", ".", "target_model", "(", "s1", ")", "\n", "q_value", "=", "q_values", ".", "gather", "(", "1", ",", "a", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "next_q_value", "=", "next_q_state_values", ".", "gather", "(", "1", ",", "next_q_values", ".", "max", "(", "1", ")", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "expected_q_value", "=", "r", "+", "self", ".", "args", ".", "gamma_q", "*", "next_q_value", "*", "(", "1", "-", "done", ")", "\n", "loss", "=", "(", "q_value", "-", "expected_q_value", ".", "detach", "(", ")", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "model_optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "model_optim", ".", "step", "(", ")", "\n", "\n", "if", "fr", "%", "self", ".", "args", ".", "update_target_frequency_q", "==", "0", ":", "\n", "            ", "self", ".", "target_model", ".", "load_state_dict", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model": [[106, 115], ["print", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.save", "q_network.DQN_Converter.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.Buffer.save", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.state_dict"], ["", "def", "save_model", "(", "self", ",", "fpath", ",", "fname", ")", ":", "\n", "        ", "print", "(", "fpath", ",", "fname", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'mean'", ":", "self", ".", "model", ".", "mean", ",", "\n", "'std'", ":", "self", ".", "model", ".", "std", ",", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights": [[116, 121], ["torch.load", "q_network.DQN_Converter.model.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.envs.registration.load", "home.repos.pwc.inspect_result.shashacks_irl_transition.trpo.scheduler.ReduceLROnPlateau.load_state_dict"], ["", "def", "load_weights", "(", "self", ",", "fanme", "=", "None", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "fanme", ")", "\n", "self", ".", "model", ".", "mean", "=", "checkpoint", "[", "'mean'", "]", "\n", "self", ".", "model", ".", "std", "=", "checkpoint", "[", "'std'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std": [[123, 128], ["None"], "methods", ["None"], ["", "def", "set_mean_std", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "model", ".", "mean", "=", "mean", "\n", "self", ".", "model", ".", "std", "=", "std", "\n", "self", ".", "target_model", ".", "mean", "=", "mean", "\n", "self", ".", "target_model", ".", "std", "=", "std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "train_q_network_patrol.load_model", "network.get_variables", "baselines.logger.info", "train_q_network_patrol.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.save_qnet": [[87, 108], ["q13.save_model", "q31.save_model", "q23.save_model", "q32.save_model", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model"], ["", "def", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q13", ",", "q31", ",", "q23", ",", "q32", ",", "save_frequency", ")", ":", "\n", "\n", "    ", "if", "prev_updates", "[", "0", "]", "!=", "updates", "[", "0", "]", ":", "\n", "        ", "if", "updates", "[", "0", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "0", "]", ")", "+", "'_q13.pt'", "\n", "q13", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "1", "]", "!=", "updates", "[", "1", "]", ":", "\n", "        ", "if", "updates", "[", "1", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "1", "]", ")", "+", "'_q31.pt'", "\n", "q31", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "2", "]", "!=", "updates", "[", "2", "]", ":", "\n", "        ", "if", "updates", "[", "2", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "2", "]", ")", "+", "'_q23.pt'", "\n", "q23", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "3", "]", "!=", "updates", "[", "3", "]", ":", "\n", "        ", "if", "updates", "[", "3", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "3", "]", ")", "+", "'_q32.pt'", "\n", "q32", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.act_random_q_net": [[109, 119], ["q.buffer.add", "random.random", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "", "", "def", "act_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "duration", ",", "cur_duration", ")", ":", "\n", "    ", "if", "cur_duration", "<", "pivot", ":", "# stay", "\n", "        ", "arr", "[", "1", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_random", ",", "cur_pi", ",", "obs_next", "\n", "", "elif", "pivot", "<=", "cur_duration", ":", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "True", ",", "pivot", ",", "q_net_pi12_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.act_non_random_q_net": [[120, 153], ["q.act", "numpy.random.randint", "random.random", "q.buffer.add", "q.learning", "numpy.append", "random.random", "q.buffer.add", "q.buffer.add", "q.buffer.size", "numpy.random.randint", "q.learning", "numpy.append", "q.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "def", "act_non_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "q_idx", ",", "duration", ",", "cur_duration", ")", ":", "\n", "    ", "q_a", "=", "q", ".", "act", "(", "obs_next", ")", "\n", "if", "q_a", "==", "0", ":", "# convertd", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "success_fail_for_q_net", "=", "True", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "", "elif", "q_a", "==", "1", ":", "# stay", "\n", "        ", "if", "d", ":", "\n", "            ", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "2", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "# fail reward", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "q_idx", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "", "elif", "duration", "<", "cur_duration", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "3", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "None", "\n", "", "else", ":", "\n", "            ", "arr", "[", "4", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_patrol.train_q_network_patrol": [[154, 466], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "rl.util.make_env.seed", "train_q_network_patrol.set_seed", "baselines.common.set_global_seeds", "train_q_network_patrol.load_primitive_policy", "train_q_network_patrol.load_primitive_policy", "train_q_network_patrol.load_primitive_policy", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "os.join", "os.makedirs", "os.makedirs", "os.join", "open", "rl.util.make_env.reset", "random.random", "random.random", "random.random", "random.random", "print", "print", "print", "print", "print", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.randint", "rl.util.make_env.step", "train_q_network_patrol.save_qnet", "range", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "policy.act", "rl.util.make_env.unwrapped.is_terminate", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "rl.util.make_env.reset", "success_count_list.append", "len", "math.exp", "policy.act", "train_q_network_patrol.act_random_q_net", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "numpy.random.randint", "len", "success_count_list.pop", "numpy.array().mean", "print", "policy.act", "epsilon_by_frame", "rl.util.make_env.unwrapped.is_terminate", "train_q_network_patrol.act_non_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "len", "numpy.array().mean", "policy.exploit", "epsilon_by_frame", "rl.util.make_env.unwrapped.is_terminate", "train_q_network_patrol.act_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "numpy.array", "policy.exploit", "epsilon_by_frame", "train_q_network_patrol.act_non_random_q_net", "numpy.array", "policy.exploit", "epsilon_by_frame", "rl.util.make_env.unwrapped.is_terminate", "policy.exploit", "train_q_network_patrol.act_random_q_net", "epsilon_by_frame", "rl.util.make_env.unwrapped.is_terminate", "train_q_network_patrol.act_non_random_q_net", "epsilon_by_frame", "rl.util.make_env.unwrapped.is_terminate", "train_q_network_patrol.act_random_q_net", "epsilon_by_frame", "train_q_network_patrol.act_non_random_q_net", "epsilon_by_frame", "rl.util.make_env.unwrapped.is_terminate", "rl.util.make_env.unwrapped.get_x_pos"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos"], ["", "", "", "def", "train_q_network_patrol", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'test obstacle'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi3_env", "=", "make_env", "(", "args", ".", "pi3_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi3_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "pi3", "=", "load_primitive_policy", "(", "pi3_env", ",", "args", ".", "pi3_env", ",", "args", ".", "pi3", ",", "args", ")", "\n", "\n", "pi13", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi13", ")", "\n", "\n", "pi31", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi31", ")", "\n", "\n", "pi23", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi23", ")", "\n", "\n", "pi32", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi32", ")", "\n", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "", "dim", "-=", "1", "\n", "\n", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q13", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q31", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q23", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q32", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q13", ".", "set_mean_std", "(", "pi13", ".", "get_mean", "(", ")", ",", "pi13", ".", "get_std", "(", ")", ")", "\n", "q31", ".", "set_mean_std", "(", "pi31", ".", "get_mean", "(", ")", ",", "pi31", ".", "get_std", "(", ")", ")", "\n", "q23", ".", "set_mean_std", "(", "pi23", ".", "get_mean", "(", ")", ",", "pi23", ".", "get_std", "(", ")", ")", "\n", "q32", ".", "set_mean_std", "(", "pi32", ".", "get_mean", "(", ")", ",", "pi32", ".", "get_std", "(", ")", ")", "\n", "\n", "# non-Linear epsilon decay", "\n", "epsilon_final", "=", "args", ".", "epsilon_min_q", "\n", "epsilon_start", "=", "args", ".", "epsilon_q", "\n", "epsilon_decay", "=", "args", ".", "epsilon_decay_q", "\n", "epsilon_by_frame", "=", "lambda", "epoch_idx", ":", "epsilon_final", "+", "(", "epsilon_start", "-", "epsilon_final", ")", "*", "math", ".", "exp", "(", "\n", "-", "1.", "*", "epoch_idx", "/", "epsilon_decay", ")", "\n", "\n", "\n", "fail_reward", "=", "-", "1.0", "\n", "success_reward", "=", "1.0", "\n", "losses", "=", "[", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "]", "\n", "updates", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "prev_updates", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "max_update", "=", "30000", "\n", "\n", "tot_interaction", "=", "0", "\n", "arr1", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr2", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr3", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr4", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "q_net_flags", "=", "[", "False", ",", "False", ",", "False", ",", "False", "]", "\n", "\n", "save_frequency", "=", "1000", "\n", "fpath", "=", "osp", ".", "join", "(", "'data'", ",", "'q_network'", ",", "args", ".", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'progress.txt'", ")", "\n", "f", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "q_net_pi13_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi31_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi23_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi32_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net_pi13", "=", "False", "\n", "success_fail_for_q_net_pi31", "=", "False", "\n", "success_fail_for_q_net_pi23", "=", "False", "\n", "success_fail_for_q_net_pi32", "=", "False", "\n", "temp_obs_for_q_net_pi13", "=", "None", "\n", "temp_obs_for_q_net_pi31", "=", "None", "\n", "temp_obs_for_q_net_pi23", "=", "None", "\n", "temp_obs_for_q_net_pi32", "=", "None", "\n", "\n", "duration", "=", "100", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "policy", "=", "pi1", "if", "env", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "success_count", "=", "1", "\n", "cur_duration", "=", "0", "\n", "success_count_list", "=", "[", "]", "\n", "mean_max", "=", "0", "\n", "while", "not", "(", "q_net_flags", "[", "0", "]", "and", "q_net_flags", "[", "1", "]", "and", "q_net_flags", "[", "2", "]", "and", "q_net_flags", "[", "3", "]", ")", ":", "\n", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('cur pi1')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "# print('cur pi2')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "# print('cur pi3')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "# print('cur pi13')", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "# print('cur pi31')", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi23", ":", "\n", "# print('cur pi23')", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi32", ":", "\n", "# print('cur pi32')", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "\n", "", "obs_next", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "obs_next", "=", "obs_next", "[", ":", "-", "1", "]", "\n", "\n", "tot_interaction", "+=", "1", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "\n", "if", "policy", "==", "pi1", "and", "env", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi13", "\n", "", "elif", "policy", "==", "pi13", "and", "q_net_pi13_random", "<=", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "# random action", "\n", "            ", "success_fail_for_q_net_pi13", ",", "pivot", ",", "q_net_pi13_random", ",", "policy", ",", "temp_obs_for_q_net_pi13", "=", "act_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi13_random", ",", "arr1", ",", "policy", ",", "pi3", ",", "q13", ",", "duration", ",", "cur_duration", ")", "\n", "if", "policy", "==", "pi3", ":", "\n", "                ", "env", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "", "elif", "policy", "==", "pi13", "and", "q_net_pi13_random", ">", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "\n", "            ", "success_fail_for_q_net_pi13", ",", "pivot", ",", "q_net_pi13_random", ",", "policy", ",", "temp_obs_for_q_net_pi13", "=", "act_non_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi13_random", ",", "arr1", ",", "policy", ",", "pi3", ",", "q13", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "0", ",", "duration", ",", "cur_duration", ")", "\n", "if", "policy", "==", "pi3", ":", "\n", "                ", "env", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "", "elif", "policy", "==", "pi31", "and", "q_net_pi31_random", "<=", "epsilon_by_frame", "(", "updates", "[", "1", "]", ")", ":", "# random action", "\n", "            ", "success_fail_for_q_net_pi31", ",", "pivot", ",", "q_net_pi31_random", ",", "policy", ",", "temp_obs_for_q_net_pi31", "=", "act_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi31_random", ",", "arr2", ",", "policy", ",", "pi1", ",", "q31", ",", "duration", ",", "cur_duration", ")", "\n", "", "elif", "policy", "==", "pi31", "and", "q_net_pi31_random", ">", "epsilon_by_frame", "(", "updates", "[", "1", "]", ")", ":", "\n", "            ", "success_fail_for_q_net_pi31", ",", "pivot", ",", "q_net_pi31_random", ",", "policy", ",", "temp_obs_for_q_net_pi31", "=", "act_non_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi31_random", ",", "arr2", ",", "policy", ",", "pi1", ",", "q31", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "1", ",", "duration", ",", "cur_duration", ")", "\n", "\n", "", "elif", "policy", "==", "pi2", "and", "env", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi23", "\n", "", "elif", "policy", "==", "pi23", "and", "q_net_pi23_random", "<=", "epsilon_by_frame", "(", "updates", "[", "2", "]", ")", ":", "# random action", "\n", "            ", "success_fail_for_q_net_pi23", ",", "pivot", ",", "q_net_pi23_random", ",", "policy", ",", "temp_obs_for_q_net_pi23", "=", "act_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi23_random", ",", "arr3", ",", "policy", ",", "pi3", ",", "q23", ",", "duration", ",", "cur_duration", ")", "\n", "if", "policy", "==", "pi3", ":", "\n", "                ", "env", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "", "elif", "policy", "==", "pi23", "and", "q_net_pi23_random", ">", "epsilon_by_frame", "(", "updates", "[", "2", "]", ")", ":", "\n", "            ", "success_fail_for_q_net_pi23", ",", "pivot", ",", "q_net_pi23_random", ",", "policy", ",", "temp_obs_for_q_net_pi23", "=", "act_non_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi31_random", ",", "arr3", ",", "policy", ",", "pi3", ",", "q23", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "1", ",", "duration", ",", "cur_duration", ")", "\n", "if", "policy", "==", "pi3", ":", "\n", "                ", "env", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "", "elif", "policy", "==", "pi32", "and", "q_net_pi32_random", "<=", "epsilon_by_frame", "(", "updates", "[", "3", "]", ")", ":", "# random action", "\n", "            ", "success_fail_for_q_net_pi32", ",", "pivot", ",", "q_net_pi32_random", ",", "policy", ",", "temp_obs_for_q_net_pi32", "=", "act_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi32_random", ",", "arr4", ",", "policy", ",", "pi2", ",", "q32", ",", "duration", ",", "cur_duration", ")", "\n", "", "elif", "policy", "==", "pi32", "and", "q_net_pi32_random", ">", "epsilon_by_frame", "(", "updates", "[", "3", "]", ")", ":", "\n", "            ", "success_fail_for_q_net_pi32", ",", "pivot", ",", "q_net_pi32_random", ",", "policy", ",", "temp_obs_for_q_net_pi32", "=", "act_non_random_q_net", "(", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi32_random", ",", "arr4", ",", "policy", ",", "pi2", ",", "q32", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "1", ",", "duration", ",", "cur_duration", ")", "\n", "\n", "", "elif", "policy", "==", "pi3", "and", "env", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ")", ":", "\n", "            ", "x_pos", "=", "env", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "if", "1", "<", "x_pos", ":", "\n", "                ", "policy", "=", "pi32", "\n", "", "if", "-", "1", ">", "x_pos", ":", "\n", "                ", "policy", "=", "pi31", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi13", "and", "policy", "==", "pi23", ":", "\n", "            ", "success_fail_for_q_net_pi13", "=", "False", "\n", "arr1", "[", "5", "]", "+=", "1", "\n", "q13", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi13", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q13", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q13", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi13", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi13", "=", "False", "\n", "arr1", "[", "6", "]", "+=", "1", "\n", "q13", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi13", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q13", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q13", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi31", "and", "policy", "==", "pi13", ":", "\n", "            ", "success_fail_for_q_net_pi31", "=", "False", "\n", "arr2", "[", "5", "]", "+=", "1", "\n", "q31", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi31", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q31", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "1", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q31", ".", "learning", "(", "updates", "[", "1", "]", ")", "\n", "losses", "[", "1", "]", "=", "np", ".", "append", "(", "losses", "[", "1", "]", ",", "loss", ")", "\n", "updates", "[", "1", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi31", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi31", "=", "False", "\n", "arr2", "[", "6", "]", "+=", "1", "\n", "q31", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi31", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q31", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "1", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q31", ".", "learning", "(", "updates", "[", "1", "]", ")", "\n", "losses", "[", "1", "]", "=", "np", ".", "append", "(", "losses", "[", "1", "]", ",", "loss", ")", "\n", "updates", "[", "1", "]", "+=", "1", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi23", "and", "policy", "==", "pi13", ":", "\n", "            ", "success_fail_for_q_net_pi23", "=", "False", "\n", "arr3", "[", "5", "]", "+=", "1", "\n", "q23", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi23", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q23", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "2", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q23", ".", "learning", "(", "updates", "[", "2", "]", ")", "\n", "losses", "[", "2", "]", "=", "np", ".", "append", "(", "losses", "[", "2", "]", ",", "loss", ")", "\n", "updates", "[", "2", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi23", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi23", "=", "False", "\n", "arr3", "[", "6", "]", "+=", "1", "\n", "q23", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi23", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q23", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "2", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q23", ".", "learning", "(", "updates", "[", "2", "]", ")", "\n", "losses", "[", "2", "]", "=", "np", ".", "append", "(", "losses", "[", "2", "]", ",", "loss", ")", "\n", "updates", "[", "2", "]", "+=", "1", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi32", "and", "policy", "==", "pi23", ":", "\n", "            ", "success_fail_for_q_net_pi32", "=", "False", "\n", "arr4", "[", "5", "]", "+=", "1", "\n", "q32", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi32", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q32", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "3", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q32", ".", "learning", "(", "updates", "[", "3", "]", ")", "\n", "losses", "[", "3", "]", "=", "np", ".", "append", "(", "losses", "[", "3", "]", ",", "loss", ")", "\n", "updates", "[", "3", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi32", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi32", "=", "False", "\n", "arr4", "[", "6", "]", "+=", "1", "\n", "q32", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi32", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q32", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "3", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q32", ".", "learning", "(", "updates", "[", "3", "]", ")", "\n", "losses", "[", "3", "]", "=", "np", ".", "append", "(", "losses", "[", "3", "]", ",", "loss", ")", "\n", "updates", "[", "3", "]", "+=", "1", "\n", "\n", "\n", "\n", "", "", "obs", "=", "obs_next", "\n", "\n", "if", "d", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "policy", "=", "pi1", "if", "env", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "cur_duration", "=", "0", "\n", "if", "len", "(", "success_count_list", ")", ">=", "100", ":", "\n", "                ", "success_count_list", ".", "pop", "(", "0", ")", "\n", "", "success_count_list", ".", "append", "(", "info", "[", "'success_count'", "]", ")", "\n", "if", "len", "(", "success_count_list", ")", ">=", "100", "and", "mean_max", "<", "np", ".", "array", "(", "success_count_list", ")", ".", "mean", "(", ")", ":", "\n", "                ", "mean_max", "=", "np", ".", "array", "(", "success_count_list", ")", ".", "mean", "(", ")", "\n", "print", "(", "'mean_max:'", ",", "mean_max", ",", "updates", ")", "\n", "\n", "\n", "", "", "if", "updates", "[", "0", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "0", "]", "=", "True", "\n", "", "if", "updates", "[", "1", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "1", "]", "=", "True", "\n", "", "if", "updates", "[", "2", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "2", "]", "=", "True", "\n", "", "if", "updates", "[", "3", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "3", "]", "=", "True", "\n", "\n", "", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q13", ",", "q31", ",", "q23", ",", "q32", ",", "save_frequency", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", ":", "\n", "            ", "prev_updates", "[", "i", "]", "=", "updates", "[", "i", "]", "\n", "\n", "# if(sum(updates) % 2000 == 0):", "\n", "#     print(updates)", "\n", "#     print(arr1)", "\n", "#     print(arr2)", "\n", "#     print(arr3)", "\n", "#     print(arr4)", "\n", "\n", "\n", "\n", "", "", "print", "(", "arr1", ")", "\n", "print", "(", "arr2", ")", "\n", "print", "(", "arr3", ")", "\n", "print", "(", "arr4", ")", "\n", "print", "(", "'total interaction:'", ",", "tot_interaction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "test_q_network_serve.load_model", "network.get_variables", "baselines.logger.info", "test_q_network_serve.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.evaluate_network_random_without_tran": [[87, 132], ["numpy.array", "env_test.reset", "print", "numpy.random.randint", "env_test.step", "print", "policy.act", "env_test.unwrapped.is_terminate", "numpy.append", "env_test.reset", "print", "print", "policy.act", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["", "def", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ",", "pi2", ",", "duration", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "is_terminate", "=", "False", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ",", "cur_duration", ",", "pivot", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "if", "is_terminate", ":", "\n", "                ", "cur_duration", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ",", "cur_duration", ",", "pivot", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", "and", "not", "is_terminate", ":", "\n", "            ", "is_terminate", "=", "True", "\n", "\n", "", "if", "policy", "==", "pi1", "and", "cur_duration", ">", "pivot", ":", "\n", "            ", "policy", "=", "pi2", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "policy", "=", "pi1", "\n", "cur_duration", "=", "0", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "is_terminate", "=", "False", "\n", "\n", "", "", "print", "(", "f'without transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.evaluate_network_random_without_qnet": [[133, 182], ["numpy.array", "env_test.reset", "print", "numpy.random.randint", "env_test.step", "print", "policy.act", "env_test.unwrapped.is_terminate", "numpy.append", "env_test.reset", "print", "print", "policy.act", "numpy.random.randint", "print", "policy.exploit", "print", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_without_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi12", ",", "duration", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "print", "(", "cur_duration", ",", "pivot", ")", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "policy", "==", "pi1", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", "and", "cur_duration", ">", "pivot", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi2", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "print", "(", "f'only pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.evaluate_network_random_with_tran_and_qnet": [[183, 236], ["numpy.array", "env_test.reset", "print", "print", "env_test.step", "print", "policy.act", "env_test.unwrapped.is_terminate", "numpy.append", "env_test.reset", "print", "print", "policy.act", "q12.act", "print", "policy.exploit", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi12", ",", "q12", ",", "duration", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "cur_duration", "=", "0", "\n", "force_1_to_2", "=", "0", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "#     env_test.render()", "\n", "#     time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "policy", "==", "pi1", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "guess", "=", "q12", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi2", "\n", "print", "(", "'change'", ")", "\n", "", "elif", "duration", "<", "cur_duration", ":", "\n", "                ", "policy", "=", "pi2", "\n", "force_1_to_2", "+=", "1", "\n", "\n", "", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "\n", "", "", "print", "(", "f'with Q-network pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "print", "(", "'force_1_to_2: '", ",", "force_1_to_2", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_serve.test_q_network_serve": [[238, 278], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "test_q_network_serve.set_seed", "baselines.common.set_global_seeds", "test_q_network_serve.load_primitive_policy", "test_q_network_serve.load_primitive_policy", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.load_weights", "test_q_network_serve.evaluate_network_random_with_tran_and_qnet", "print", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_with_tran_and_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_q_network_serve", "(", "args", ")", ":", "\n", "    ", "print", "(", "'test serve'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "load_weights", "(", "args", ".", "q12", ")", "\n", "\n", "duration", "=", "100", "\n", "\n", "# success_res = evaluate_network_random_without_tran(env_test, pi1, pi2, duration)", "\n", "# success_res = evaluate_network_random_without_qnet(env_test, pi1, pi2, pi12, duration)", "\n", "success_res", "=", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi12", ",", "q12", ",", "duration", ")", "\n", "for", "v", "in", "success_res", ":", "\n", "        ", "print", "(", "f'{v}, '", ",", "end", "=", "''", ")", "\n", "# print('end')", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "train_q_network_obstacle.load_model", "network.get_variables", "baselines.logger.info", "train_q_network_obstacle.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.save_qnet": [[87, 108], ["q12.save_model", "q21.save_model", "q13.save_model", "q31.save_model", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model"], ["", "def", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "q21", ",", "q13", ",", "q31", ",", "save_frequency", ")", ":", "\n", "\n", "    ", "if", "prev_updates", "[", "0", "]", "!=", "updates", "[", "0", "]", ":", "\n", "        ", "if", "updates", "[", "0", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "0", "]", ")", "+", "'_q12.pt'", "\n", "q12", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "1", "]", "!=", "updates", "[", "1", "]", ":", "\n", "        ", "if", "updates", "[", "1", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "1", "]", ")", "+", "'_q21.pt'", "\n", "q21", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "2", "]", "!=", "updates", "[", "2", "]", ":", "\n", "        ", "if", "updates", "[", "2", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "2", "]", ")", "+", "'_q13.pt'", "\n", "q13", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "3", "]", "!=", "updates", "[", "3", "]", ":", "\n", "        ", "if", "updates", "[", "3", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "3", "]", ")", "+", "'_q31.pt'", "\n", "q31", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.act_random_q_net": [[109, 120], ["q.buffer.add", "random.random", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "", "", "def", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ")", ":", "\n", "    ", "if", "x_pos", "<", "pivot", ":", "# stay", "\n", "        ", "arr", "[", "1", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "idx", ",", "False", ",", "pivot", ",", "q_random", ",", "cur_pi", ",", "obs_next", "\n", "", "elif", "pivot", "<=", "x_pos", ":", "\n", "        ", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "idx", ",", "True", ",", "pivot", ",", "q_net_pi12_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.act_non_random_q_net": [[121, 156], ["q.act", "numpy.random.rand", "random.random", "q.buffer.add", "q.learning", "numpy.append", "random.random", "q.buffer.add", "q.buffer.add", "q.buffer.size", "numpy.random.rand", "q.learning", "numpy.append", "q.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "def", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "q_idx", ")", ":", "\n", "    ", "q_a", "=", "q", ".", "act", "(", "obs_next", ")", "\n", "if", "q_a", "==", "0", ":", "# convertd", "\n", "        ", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "success_fail_for_q_net", "=", "True", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "idx", ",", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "", "elif", "q_a", "==", "1", ":", "# stay", "\n", "        ", "if", "d", ":", "\n", "            ", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "2", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "# fail reward", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "q_idx", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "idx", ",", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "", "elif", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "3", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "idx", ",", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "None", "\n", "", "else", ":", "\n", "            ", "arr", "[", "4", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "idx", ",", "False", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_obstacle.train_q_network_obstacle": [[157, 473], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "rl.util.make_env.seed", "train_q_network_obstacle.set_seed", "baselines.common.set_global_seeds", "train_q_network_obstacle.load_primitive_policy", "train_q_network_obstacle.load_primitive_policy", "train_q_network_obstacle.load_primitive_policy", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "os.join", "os.makedirs", "os.makedirs", "os.join", "open", "rl.util.make_env.reset", "random.random", "random.random", "random.random", "random.random", "rl.util.make_env.unwrapped.get_obstacle_pos_and_type", "print", "range", "print", "open.close", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "intervals.append", "intervals.append", "rl.util.make_env.step", "rl.util.make_env.unwrapped.get_x_pos", "train_q_network_obstacle.save_qnet", "range", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "order.append", "order.append", "order.append", "order.append", "numpy.random.rand", "policy.act", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "rl.util.make_env.reset", "rl.util.make_env.unwrapped.get_obstacle_pos_and_type", "print", "range", "len", "print", "print", "print", "print", "print", "math.exp", "policy.act", "train_q_network_obstacle.act_random_q_net", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "len", "intervals.append", "intervals.append", "sum", "policy.act", "epsilon_by_frame", "train_q_network_obstacle.act_non_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "order.append", "order.append", "order.append", "order.append", "numpy.random.rand", "policy.exploit", "epsilon_by_frame", "train_q_network_obstacle.act_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "policy.exploit", "epsilon_by_frame", "train_q_network_obstacle.act_non_random_q_net", "policy.exploit", "epsilon_by_frame", "policy.exploit", "train_q_network_obstacle.act_random_q_net", "epsilon_by_frame", "train_q_network_obstacle.act_non_random_q_net", "epsilon_by_frame", "train_q_network_obstacle.act_random_q_net", "epsilon_by_frame", "train_q_network_obstacle.act_non_random_q_net", "epsilon_by_frame"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.sum", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net"], ["", "", "", "def", "train_q_network_obstacle", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'test obstacle'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi3_env", "=", "make_env", "(", "args", ".", "pi3_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi3_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "pi3", "=", "load_primitive_policy", "(", "pi3_env", ",", "args", ".", "pi3_env", ",", "args", ".", "pi3", ",", "args", ")", "\n", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "pi21", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi21", ")", "\n", "\n", "pi13", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi13", ")", "\n", "\n", "pi31", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi31", ")", "\n", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q21", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q31", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q13", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "set_mean_std", "(", "pi12", ".", "get_mean", "(", ")", ",", "pi12", ".", "get_std", "(", ")", ")", "\n", "q21", ".", "set_mean_std", "(", "pi21", ".", "get_mean", "(", ")", ",", "pi21", ".", "get_std", "(", ")", ")", "\n", "q13", ".", "set_mean_std", "(", "pi13", ".", "get_mean", "(", ")", ",", "pi13", ".", "get_std", "(", ")", ")", "\n", "q31", ".", "set_mean_std", "(", "pi31", ".", "get_mean", "(", ")", ",", "pi31", ".", "get_std", "(", ")", ")", "\n", "\n", "# non-Linear epsilon decay", "\n", "epsilon_final", "=", "args", ".", "epsilon_min_q", "\n", "epsilon_start", "=", "args", ".", "epsilon_q", "\n", "epsilon_decay", "=", "args", ".", "epsilon_decay_q", "\n", "epsilon_by_frame", "=", "lambda", "epoch_idx", ":", "epsilon_final", "+", "(", "epsilon_start", "-", "epsilon_final", ")", "*", "math", ".", "exp", "(", "\n", "-", "1.", "*", "epoch_idx", "/", "epsilon_decay", ")", "\n", "\n", "\n", "fail_reward", "=", "-", "1.0", "\n", "success_reward", "=", "1.0", "\n", "losses", "=", "[", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "]", "\n", "updates", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "prev_updates", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "max_update", "=", "30000", "\n", "\n", "tot_interaction", "=", "0", "\n", "arr1", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr2", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr3", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr4", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "q_net_flags", "=", "[", "False", ",", "False", ",", "False", ",", "False", "]", "\n", "\n", "save_frequency", "=", "1000", "\n", "fpath", "=", "osp", ".", "join", "(", "'data'", ",", "'q_network'", ",", "args", ".", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'progress.txt'", ")", "\n", "f", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi21_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi13_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi31_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "success_fail_for_q_net_pi21", "=", "False", "\n", "success_fail_for_q_net_pi13", "=", "False", "\n", "success_fail_for_q_net_pi31", "=", "False", "\n", "temp_obs_for_q_net_pi12", "=", "None", "\n", "temp_obs_for_q_net_pi21", "=", "None", "\n", "temp_obs_for_q_net_pi13", "=", "None", "\n", "temp_obs_for_q_net_pi31", "=", "None", "\n", "\n", "const", "=", "1.0", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "print", "(", "obstacle", "[", "'type'", "]", ")", "\n", "order", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "        ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "            ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "            ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "\n", "", "", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "policy", "=", "pi1", "\n", "\n", "\n", "while", "not", "(", "q_net_flags", "[", "0", "]", "and", "q_net_flags", "[", "1", "]", "and", "q_net_flags", "[", "2", "]", "and", "q_net_flags", "[", "3", "]", ")", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('cur pi1')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "# print('cur pi2')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "# print('cur pi3')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "# print('cur pi12')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi21", ":", "\n", "# print('cur pi21')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "# print('cur pi13')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "# print('cur pi31')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "\n", "", "obs_next", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "\n", "tot_interaction", "+=", "1", "\n", "x_pos", "=", "env", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "# env.render()", "\n", "# print(order, idx, x_pos)", "\n", "\n", "if", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "if", "order", "[", "idx", "]", "==", "'pi12'", ":", "\n", "                ", "policy", "=", "pi12", "\n", "", "elif", "order", "[", "idx", "]", "==", "'pi13'", ":", "\n", "                ", "policy", "=", "pi13", "\n", "", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", "<=", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "# random action", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi2", ",", "q12", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", ">", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi2", ",", "q12", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "0", ")", "\n", "", "elif", "policy", "==", "pi13", "and", "q_net_pi13_random", "<=", "epsilon_by_frame", "(", "updates", "[", "2", "]", ")", ":", "# random action", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi13", ",", "pivot", ",", "q_net_pi13_random", ",", "policy", ",", "temp_obs_for_q_net_pi13", "=", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi13_random", ",", "arr3", ",", "policy", ",", "pi3", ",", "q13", ")", "\n", "", "elif", "policy", "==", "pi13", "and", "q_net_pi13_random", ">", "epsilon_by_frame", "(", "updates", "[", "2", "]", ")", ":", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi13", ",", "pivot", ",", "q_net_pi13_random", ",", "policy", ",", "temp_obs_for_q_net_pi13", "=", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi13_random", ",", "arr3", ",", "policy", ",", "pi3", ",", "q13", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "2", ")", "\n", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "if", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "# 8.4", "\n", "                ", "policy", "=", "pi21", "\n", "", "", "elif", "policy", "==", "pi21", "and", "q_net_pi21_random", "<=", "epsilon_by_frame", "(", "updates", "[", "1", "]", ")", ":", "# random action", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi21", ",", "pivot", ",", "q_net_pi21_random", ",", "policy", ",", "temp_obs_for_q_net_pi21", "=", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi21_random", ",", "arr2", ",", "policy", ",", "pi1", ",", "q21", ")", "\n", "", "elif", "policy", "==", "pi21", "and", "q_net_pi21_random", ">", "epsilon_by_frame", "(", "updates", "[", "1", "]", ")", ":", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi21", ",", "pivot", ",", "q_net_pi21_random", ",", "policy", ",", "temp_obs_for_q_net_pi21", "=", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi21_random", ",", "arr2", ",", "policy", ",", "pi1", ",", "q21", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "1", ")", "\n", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "            ", "if", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "                ", "policy", "=", "pi31", "\n", "", "", "elif", "policy", "==", "pi31", "and", "q_net_pi31_random", "<=", "epsilon_by_frame", "(", "updates", "[", "3", "]", ")", ":", "# random action", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi31", ",", "pivot", ",", "q_net_pi31_random", ",", "policy", ",", "temp_obs_for_q_net_pi31", "=", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi31_random", ",", "arr4", ",", "policy", ",", "pi1", ",", "q31", ")", "\n", "", "elif", "policy", "==", "pi31", "and", "q_net_pi31_random", ">", "epsilon_by_frame", "(", "updates", "[", "3", "]", ")", ":", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi31", ",", "pivot", ",", "q_net_pi31_random", ",", "policy", ",", "temp_obs_for_q_net_pi31", "=", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi31_random", ",", "arr4", ",", "policy", ",", "pi1", ",", "q31", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "3", ")", "\n", "\n", "\n", "\n", "", "if", "success_fail_for_q_net_pi12", "and", "(", "info", "[", "'success_count'", "]", "%", "2", "==", "1", ")", ":", "\n", "            ", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "5", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi12", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "6", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi21", "and", "(", "(", "info", "[", "'success_count'", "]", "==", "1", "and", "intervals", "[", "2", "]", "[", "1", "]", "<=", "x_pos", ")", "or", "(", "info", "[", "'success_count'", "]", "==", "3", "and", "intervals", "[", "6", "]", "[", "1", "]", "<=", "x_pos", ")", ")", ":", "\n", "            ", "success_fail_for_q_net_pi21", "=", "False", "\n", "arr2", "[", "5", "]", "+=", "1", "\n", "q21", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi21", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q21", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "1", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q21", ".", "learning", "(", "updates", "[", "1", "]", ")", "\n", "losses", "[", "1", "]", "=", "np", ".", "append", "(", "losses", "[", "1", "]", ",", "loss", ")", "\n", "updates", "[", "1", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi21", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi21", "=", "False", "\n", "arr2", "[", "6", "]", "+=", "1", "\n", "q21", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi21", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q21", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "1", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q21", ".", "learning", "(", "updates", "[", "1", "]", ")", "\n", "losses", "[", "1", "]", "=", "np", ".", "append", "(", "losses", "[", "1", "]", ",", "loss", ")", "\n", "updates", "[", "1", "]", "+=", "1", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi13", "and", "(", "info", "[", "'success_count'", "]", "==", "2", "or", "info", "[", "'success_count'", "]", "==", "4", ")", ":", "\n", "            ", "success_fail_for_q_net_pi13", "=", "False", "\n", "arr3", "[", "5", "]", "+=", "1", "\n", "q13", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi13", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q13", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "2", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q13", ".", "learning", "(", "updates", "[", "2", "]", ")", "\n", "losses", "[", "2", "]", "=", "np", ".", "append", "(", "losses", "[", "2", "]", ",", "loss", ")", "\n", "updates", "[", "2", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi13", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi13", "=", "False", "\n", "arr3", "[", "6", "]", "+=", "1", "\n", "q13", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi13", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q13", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "2", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q13", ".", "learning", "(", "updates", "[", "2", "]", ")", "\n", "losses", "[", "2", "]", "=", "np", ".", "append", "(", "losses", "[", "2", "]", ",", "loss", ")", "\n", "updates", "[", "2", "]", "+=", "1", "\n", "\n", "", "", "if", "success_fail_for_q_net_pi31", "and", "(", "info", "[", "'success_count'", "]", "==", "3", "or", "info", "[", "'success_count'", "]", "==", "5", ")", ":", "\n", "            ", "success_fail_for_q_net_pi31", "=", "False", "\n", "arr4", "[", "5", "]", "+=", "1", "\n", "q31", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi31", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q31", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "3", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q31", ".", "learning", "(", "updates", "[", "3", "]", ")", "\n", "losses", "[", "3", "]", "=", "np", ".", "append", "(", "losses", "[", "3", "]", ",", "loss", ")", "\n", "updates", "[", "3", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi31", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi31", "=", "False", "\n", "arr4", "[", "6", "]", "+=", "1", "\n", "q31", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi31", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q31", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "3", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q31", ".", "learning", "(", "updates", "[", "3", "]", ")", "\n", "losses", "[", "3", "]", "=", "np", ".", "append", "(", "losses", "[", "3", "]", ",", "loss", ")", "\n", "updates", "[", "3", "]", "+=", "1", "\n", "\n", "\n", "\n", "", "", "obs", "=", "obs_next", "\n", "\n", "if", "d", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "print", "(", "obstacle", "[", "'type'", "]", ")", "\n", "order", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "                ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "                    ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "                    ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "\n", "", "", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "policy", "=", "pi1", "\n", "\n", "", "if", "updates", "[", "0", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "0", "]", "=", "True", "\n", "", "if", "updates", "[", "1", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "1", "]", "=", "True", "\n", "", "if", "updates", "[", "2", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "2", "]", "=", "True", "\n", "", "if", "updates", "[", "3", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "3", "]", "=", "True", "\n", "\n", "", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "q21", ",", "q13", ",", "q31", ",", "save_frequency", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", ":", "\n", "            ", "prev_updates", "[", "i", "]", "=", "updates", "[", "i", "]", "\n", "\n", "", "if", "(", "sum", "(", "updates", ")", "%", "2000", "==", "0", ")", ":", "\n", "            ", "print", "(", "updates", ")", "\n", "print", "(", "arr1", ")", "\n", "print", "(", "arr2", ")", "\n", "print", "(", "arr3", ")", "\n", "print", "(", "arr4", ")", "\n", "\n", "", "", "print", "(", "'obstacle tot_interaction:'", ",", "tot_interaction", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.load_model": [[31, 39], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.tensor_description": [[40, 44], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.set_seed": [[45, 58], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.load_primitive_policy": [[59, 87], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "train_q_network_pick.load_model", "network.get_variables", "baselines.logger.info", "train_q_network_pick.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.save_qnet": [[89, 95], ["q12.save_model", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model"], ["", "def", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "save_frequency", ")", ":", "\n", "\n", "    ", "if", "prev_updates", "[", "0", "]", "!=", "updates", "[", "0", "]", ":", "\n", "        ", "if", "updates", "[", "0", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "0", "]", ")", "+", "'_q12.pt'", "\n", "q12", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.act_random_q_net": [[96, 106], ["q.buffer.add", "random.random", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "", "", "def", "act_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "duration", ")", ":", "\n", "    ", "if", "cur_duration", "<", "pivot", ":", "# stay", "\n", "        ", "arr", "[", "1", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_random", ",", "cur_pi", ",", "obs_next", "\n", "", "elif", "pivot", "<=", "cur_duration", ":", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "True", ",", "pivot", ",", "q_net_pi12_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.act_non_random_q_net": [[107, 141], ["q.act", "random.random", "numpy.random.randint", "random.random", "q.buffer.add", "q.learning", "numpy.append", "random.random", "q.buffer.add", "q.buffer.add", "q.buffer.size", "numpy.random.randint", "q.learning", "numpy.append", "q.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "def", "act_non_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "q_idx", ",", "info", ",", "duration", ")", ":", "\n", "    ", "q_a", "=", "q", ".", "act", "(", "obs_next", ")", "\n", "if", "q_a", "==", "0", ":", "# convertd", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "True", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "", "elif", "q_a", "==", "1", ":", "# stay", "\n", "        ", "if", "d", "and", "info", "[", "\"success_count\"", "]", "!=", "5", ":", "\n", "            ", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "2", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "# fail reward", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "q_idx", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "", "elif", "duration", "<", "cur_duration", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "3", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "None", "\n", "", "else", ":", "\n", "            ", "arr", "[", "4", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_pick.train_q_network_pick": [[142, 281], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "train_q_network_pick.set_seed", "baselines.common.set_global_seeds", "train_q_network_pick.load_primitive_policy", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.set_mean_std", "os.join", "os.makedirs", "os.makedirs", "os.join", "open", "open.write", "rl.util.make_env.reset", "random.random", "print", "open.close", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "numpy.array", "numpy.random.randint", "rl.util.make_env.step", "print", "train_q_network_pick.save_qnet", "range", "torch.device", "torch.device", "torch.device", "policy.act", "rl.util.make_env.unwrapped.is_terminate", "print", "q_network.q_network.DQN_Converter.buffer.add", "rl.util.make_env.reset", "len", "math.exp", "policy.exploit", "train_q_network_pick.act_random_q_net", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "numpy.random.randint", "epsilon_by_frame", "train_q_network_pick.act_non_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "epsilon_by_frame", "q_network.q_network.DQN_Converter.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "", "def", "train_q_network_pick", "(", "args", ")", ":", "\n", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "set_mean_std", "(", "pi12", ".", "get_mean", "(", ")", ",", "pi12", ".", "get_std", "(", ")", ")", "\n", "\n", "# non-Linear epsilon decay", "\n", "epsilon_final", "=", "args", ".", "epsilon_min_q", "\n", "epsilon_start", "=", "args", ".", "epsilon_q", "\n", "epsilon_decay", "=", "args", ".", "epsilon_decay_q", "\n", "epsilon_by_frame", "=", "lambda", "epoch_idx", ":", "epsilon_final", "+", "(", "epsilon_start", "-", "epsilon_final", ")", "*", "math", ".", "exp", "(", "\n", "-", "1.", "*", "epoch_idx", "/", "epsilon_decay", ")", "\n", "\n", "fail_reward", "=", "-", "1.0", "\n", "success_reward", "=", "1.0", "\n", "losses", "=", "[", "np", ".", "array", "(", "[", "]", ")", "]", "\n", "updates", "=", "[", "0", "]", "\n", "prev_updates", "=", "[", "-", "1", "]", "\n", "max_update", "=", "15000", "\n", "\n", "tot_interaction", "=", "0", "\n", "arr1", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "q_net_flags", "=", "[", "False", "]", "\n", "\n", "eval_frequency", "=", "250", "\n", "save_frequency", "=", "1000", "\n", "\n", "fpath", "=", "osp", ".", "join", "(", "'data'", ",", "'q_network'", ",", "args", ".", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'progress.txt'", ")", "\n", "f", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\"total_interaction num_success num_update1 num_update2 force_1_to_2 force_2_to_1 loss1_mean, loss2_mean\\n\"", ")", "\n", "\n", "policy", "=", "pi1", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "temp_obs_for_q_net_pi12", "=", "None", "\n", "duration", "=", "30", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "cur_success_count", "=", "1", "\n", "cur_duration", "=", "0", "\n", "\n", "while", "not", "(", "q_net_flags", "[", "0", "]", ")", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('pi1')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "# print('pi12')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "", "obs_next", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "tot_interaction", "+=", "1", "\n", "# print('x_pos: ', x_pos, 'pivot: ', pivot, 'curb_pos: ', env.unwrapped.get_curb_pos())", "\n", "\n", "#################################################################################################################", "\n", "\n", "if", "policy", "==", "pi1", "and", "env", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "print", "(", "'policy pi12'", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", "<=", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "# random action", "\n", "# print('pi12 random action')", "\n", "            ", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi1", ",", "q12", ",", "duration", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", ">", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "\n", "# print('pi12 non random action')", "\n", "            ", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_non_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi1", ",", "q12", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "0", ",", "info", ",", "duration", ")", "\n", "", "if", "success_fail_for_q_net_pi12", "and", "cur_success_count", "<", "info", "[", "'success_count'", "]", ":", "\n", "            ", "cur_success_count", "=", "info", "[", "'success_count'", "]", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "5", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi12", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "6", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "\n", "#################################################################################################################", "\n", "\n", "", "", "obs", "=", "obs_next", "\n", "\n", "if", "d", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "policy", "=", "pi1", "\n", "cur_success_count", "=", "1", "\n", "cur_duration", "=", "0", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "\n", "", "if", "updates", "[", "0", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "0", "]", "=", "True", "\n", "", "print", "(", "arr1", ")", "\n", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "save_frequency", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", ":", "\n", "            ", "prev_updates", "[", "i", "]", "=", "updates", "[", "i", "]", "\n", "\n", "", "", "print", "(", "'pick tot_interaction:'", ",", "tot_interaction", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "test_q_network_catch.load_model", "network.get_variables", "baselines.logger.info", "test_q_network_catch.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.evaluate_network_random_without_tran": [[87, 112], ["numpy.array", "env_test.reset", "print", "policy.act", "env_test.step", "numpy.append", "env_test.reset", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "policy", "=", "pi1", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# print('cur pi1')", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "print", "(", "f'without transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.evaluate_network_random_without_qnet": [[113, 160], ["numpy.array", "env_test.reset", "print", "numpy.random.randint", "env_test.step", "env_test.unwrapped.is_terminate", "print", "policy.act", "numpy.append", "env_test.reset", "print", "print", "print", "policy.exploit", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit"], ["", "def", "evaluate_network_random_without_qnet", "(", "env_test", ",", "pi1", ",", "pi12", ",", "duration", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "print", "(", "cur_duration", ",", "pivot", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "cur_duration", "=", "0", "\n", "", "if", "policy", "==", "pi12", "and", "cur_duration", ">", "pivot", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "print", "(", "f'only pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.evaluate_network_random_with_tran_and_qnet": [[161, 211], ["numpy.array", "env_test.reset", "print", "print", "env_test.step", "env_test.unwrapped.is_terminate", "print", "policy.act", "numpy.append", "env_test.reset", "print", "print", "policy.exploit", "q12.act", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi12", ",", "q12", ",", "duration", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "cur_duration", "=", "0", "\n", "force_1_to_2", "=", "0", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "#     env_test.render()", "\n", "#     time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "guess", "=", "q12", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi1", "\n", "print", "(", "'change'", ")", "\n", "", "elif", "duration", "<", "cur_duration", ":", "\n", "                ", "policy", "=", "pi1", "\n", "force_1_to_2", "+=", "1", "\n", "\n", "", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "\n", "", "", "print", "(", "f'with Q-network pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "print", "(", "'force_1_to_2: '", ",", "force_1_to_2", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_catch.test_q_network_catch": [[213, 248], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "test_q_network_catch.set_seed", "baselines.common.set_global_seeds", "test_q_network_catch.load_primitive_policy", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.load_weights", "test_q_network_catch.evaluate_network_random_with_tran_and_qnet", "print", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_with_tran_and_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_q_network_catch", "(", "args", ")", ":", "\n", "    ", "print", "(", "'test catch'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "load_weights", "(", "args", ".", "q12", ")", "\n", "duration", "=", "30", "\n", "# success_res = evaluate_network_random_without_tran(env_test, pi1)", "\n", "# success_res = evaluate_network_random_without_qnet(env_test, pi1, pi12, duration)", "\n", "success_res", "=", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi12", ",", "q12", ",", "duration", ")", "\n", "for", "v", "in", "success_res", ":", "\n", "        ", "print", "(", "f'{v}, '", ",", "end", "=", "''", ")", "\n", "# print('end')", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.load_model": [[31, 39], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.tensor_description": [[40, 44], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.set_seed": [[45, 58], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.load_primitive_policy": [[59, 87], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "train_q_network_catch.load_model", "network.get_variables", "baselines.logger.info", "train_q_network_catch.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.save_qnet": [[89, 95], ["q12.save_model", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model"], ["", "def", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "save_frequency", ")", ":", "\n", "\n", "    ", "if", "prev_updates", "[", "0", "]", "!=", "updates", "[", "0", "]", ":", "\n", "        ", "if", "updates", "[", "0", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "0", "]", ")", "+", "'_q12.pt'", "\n", "q12", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.act_random_q_net": [[96, 106], ["q.buffer.add", "random.random", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "", "", "def", "act_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "duration", ")", ":", "\n", "    ", "if", "cur_duration", "<", "pivot", ":", "# stay", "\n", "        ", "arr", "[", "1", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_random", ",", "cur_pi", ",", "obs_next", "\n", "", "elif", "pivot", "<=", "cur_duration", ":", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "True", ",", "pivot", ",", "q_net_pi12_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.act_non_random_q_net": [[107, 141], ["q.act", "random.random", "numpy.random.randint", "random.random", "q.buffer.add", "q.learning", "numpy.append", "random.random", "q.buffer.add", "q.buffer.add", "q.buffer.size", "numpy.random.randint", "q.learning", "numpy.append", "q.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "def", "act_non_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "q_idx", ",", "info", ",", "duration", ")", ":", "\n", "    ", "q_a", "=", "q", ".", "act", "(", "obs_next", ")", "\n", "if", "q_a", "==", "0", ":", "# convertd", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "True", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "", "elif", "q_a", "==", "1", ":", "# stay", "\n", "        ", "if", "d", "and", "info", "[", "\"success_count\"", "]", "!=", "5", ":", "\n", "            ", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "2", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "# fail reward", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "q_idx", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "", "elif", "duration", "<", "cur_duration", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "3", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "None", "\n", "", "else", ":", "\n", "            ", "arr", "[", "4", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_catch.train_q_network_catch": [[142, 281], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "train_q_network_catch.set_seed", "baselines.common.set_global_seeds", "train_q_network_catch.load_primitive_policy", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.set_mean_std", "os.join", "os.makedirs", "os.makedirs", "os.join", "open", "open.write", "rl.util.make_env.reset", "random.random", "print", "open.close", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "numpy.array", "numpy.random.randint", "rl.util.make_env.step", "print", "train_q_network_catch.save_qnet", "range", "torch.device", "torch.device", "torch.device", "policy.act", "rl.util.make_env.unwrapped.is_terminate", "print", "q_network.q_network.DQN_Converter.buffer.add", "rl.util.make_env.reset", "len", "math.exp", "policy.exploit", "train_q_network_catch.act_random_q_net", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "numpy.random.randint", "epsilon_by_frame", "train_q_network_catch.act_non_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "epsilon_by_frame", "q_network.q_network.DQN_Converter.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "", "def", "train_q_network_catch", "(", "args", ")", ":", "\n", "    ", "print", "(", "'catch'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "set_mean_std", "(", "pi12", ".", "get_mean", "(", ")", ",", "pi12", ".", "get_std", "(", ")", ")", "\n", "\n", "# non-Linear epsilon decay", "\n", "epsilon_final", "=", "args", ".", "epsilon_min_q", "\n", "epsilon_start", "=", "args", ".", "epsilon_q", "\n", "epsilon_decay", "=", "args", ".", "epsilon_decay_q", "\n", "epsilon_by_frame", "=", "lambda", "epoch_idx", ":", "epsilon_final", "+", "(", "epsilon_start", "-", "epsilon_final", ")", "*", "math", ".", "exp", "(", "\n", "-", "1.", "*", "epoch_idx", "/", "epsilon_decay", ")", "\n", "\n", "fail_reward", "=", "-", "1.0", "\n", "success_reward", "=", "1.0", "\n", "losses", "=", "[", "np", ".", "array", "(", "[", "]", ")", "]", "\n", "updates", "=", "[", "0", "]", "\n", "prev_updates", "=", "[", "-", "1", "]", "\n", "max_update", "=", "20000", "\n", "\n", "tot_interaction", "=", "0", "\n", "arr1", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "q_net_flags", "=", "[", "False", "]", "\n", "\n", "eval_frequency", "=", "250", "\n", "save_frequency", "=", "1000", "\n", "\n", "fpath", "=", "osp", ".", "join", "(", "'data'", ",", "'q_network'", ",", "args", ".", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'progress.txt'", ")", "\n", "f", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\"total_interaction num_success num_update1 num_update2 force_1_to_2 force_2_to_1 loss1_mean, loss2_mean\\n\"", ")", "\n", "\n", "policy", "=", "pi1", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "temp_obs_for_q_net_pi12", "=", "None", "\n", "duration", "=", "30", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "cur_success_count", "=", "1", "\n", "cur_duration", "=", "0", "\n", "\n", "while", "not", "(", "q_net_flags", "[", "0", "]", ")", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('pi1')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "# print('pi12')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "", "obs_next", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "tot_interaction", "+=", "1", "\n", "# print('x_pos: ', x_pos, 'pivot: ', pivot, 'curb_pos: ', env.unwrapped.get_curb_pos())", "\n", "\n", "#################################################################################################################", "\n", "\n", "if", "policy", "==", "pi1", "and", "env", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "print", "(", "'policy pi12'", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", "<=", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "# random action", "\n", "# print('pi12 random action')", "\n", "            ", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi1", ",", "q12", ",", "duration", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", ">", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "\n", "# print('pi12 non random action')", "\n", "            ", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_non_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi1", ",", "q12", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "0", ",", "info", ",", "duration", ")", "\n", "", "if", "success_fail_for_q_net_pi12", "and", "cur_success_count", "<", "info", "[", "'success_count'", "]", ":", "\n", "            ", "cur_success_count", "=", "info", "[", "'success_count'", "]", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "5", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi12", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "6", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "\n", "#################################################################################################################", "\n", "\n", "", "", "obs", "=", "obs_next", "\n", "\n", "if", "d", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "policy", "=", "pi1", "\n", "cur_success_count", "=", "1", "\n", "cur_duration", "=", "0", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "\n", "", "if", "updates", "[", "0", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "0", "]", "=", "True", "\n", "", "print", "(", "arr1", ")", "\n", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "save_frequency", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", ":", "\n", "            ", "prev_updates", "[", "i", "]", "=", "updates", "[", "i", "]", "\n", "\n", "", "", "print", "(", "'catch tot_interaction:'", ",", "tot_interaction", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "buffer", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add": [[10, 14], ["replay_buffer.ReplayBuffer.buffer.append", "len", "replay_buffer.ReplayBuffer.buffer.pop"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "add", "(", "self", ",", "s0", ",", "a", ",", "r", ",", "s1", ",", "done", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "buffer", ")", ">=", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "buffer", ".", "pop", "(", "0", ")", "\n", "", "self", ".", "buffer", ".", "append", "(", "(", "s0", "[", "None", ",", ":", "]", ",", "a", ",", "r", ",", "s1", "[", "None", ",", ":", "]", ",", "done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample": [[15, 18], ["zip", "numpy.concatenate", "numpy.concatenate", "random.sample"], "methods", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.concatenate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "s0", ",", "a", ",", "r", ",", "s1", ",", "done", "=", "zip", "(", "*", "random", ".", "sample", "(", "self", ".", "buffer", ",", "batch_size", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "s0", ")", ",", "a", ",", "r", ",", "np", ".", "concatenate", "(", "s1", ")", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size": [[19, 21], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "test_q_network_patrol.load_model", "network.get_variables", "baselines.logger.info", "test_q_network_patrol.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.evaluate_network_random_without_tran": [[87, 137], ["numpy.array", "env_test.reset", "print", "env_test.step", "print", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.is_terminate", "numpy.append", "env_test.reset", "print", "print", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.is_terminate", "print", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.get_x_pos"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos"], ["", "def", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "duration", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "policy", "=", "pi1", "if", "env_test", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "            ", "print", "(", "'cur pi3'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "\n", "if", "policy", "==", "pi1", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi3", "\n", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi3", "\n", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "elif", "policy", "==", "pi3", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ")", ":", "\n", "            ", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "if", "1", "<", "x_pos", ":", "\n", "                ", "policy", "=", "pi2", "\n", "", "if", "-", "1", ">", "x_pos", ":", "\n", "                ", "policy", "=", "pi1", "\n", "\n", "", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "policy", "=", "pi1", "if", "env_test", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "\n", "\n", "", "", "print", "(", "f'without transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.evaluate_network_random_without_qnet": [[138, 239], ["numpy.array", "env_test.reset", "print", "numpy.random.randint", "env_test.step", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.is_terminate", "numpy.append", "env_test.reset", "print", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.is_terminate", "print", "numpy.random.randint", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.get_x_pos", "print", "policy.exploit", "print", "policy.exploit", "numpy.random.randint", "print", "policy.exploit", "numpy.random.randint", "print", "policy.exploit", "numpy.random.randint", "print", "numpy.random.randint", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_without_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "pi13", ",", "pi31", ",", "pi23", ",", "pi32", ",", "duration", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "policy", "=", "pi1", "if", "env_test", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('cur pi1')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "# print('cur pi2')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "# print('cur pi3')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "# print('cur pi13', cur_duration, pivot)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "# print('cur pi31', cur_duration, pivot)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi23", ":", "\n", "# print('cur pi23', cur_duration, pivot)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi32", ":", "\n", "# print('cur pi32', cur_duration, pivot)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "\n", "if", "policy", "==", "pi1", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi13", "\n", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi23", "\n", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "elif", "policy", "==", "pi3", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ")", ":", "\n", "            ", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "if", "1", "<", "x_pos", ":", "\n", "                ", "policy", "=", "pi32", "\n", "", "if", "-", "1", ">", "x_pos", ":", "\n", "                ", "policy", "=", "pi31", "\n", "", "", "elif", "policy", "==", "pi13", "and", "pivot", "<", "cur_duration", ":", "\n", "            ", "policy", "=", "pi3", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "", "elif", "policy", "==", "pi31", "and", "pivot", "<", "cur_duration", ":", "\n", "            ", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "", "elif", "policy", "==", "pi23", "and", "pivot", "<", "cur_duration", ":", "\n", "            ", "policy", "=", "pi3", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "", "elif", "policy", "==", "pi32", "and", "pivot", "<", "cur_duration", ":", "\n", "            ", "policy", "=", "pi2", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "", "if", "d", ":", "\n", "            ", "if", "policy", "==", "pi1", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi1'", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi2'", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi3'", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi13'", ",", "cur_duration", ",", "pivot", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi31'", ",", "cur_duration", ",", "pivot", ")", "\n", "", "elif", "policy", "==", "pi23", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi23'", ",", "cur_duration", ",", "pivot", ")", "\n", "", "elif", "policy", "==", "pi32", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi32'", ",", "cur_duration", ",", "pivot", ")", "\n", "", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "policy", "=", "pi1", "if", "env_test", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "\n", "\n", "\n", "\n", "", "", "print", "(", "f'only pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.evaluate_network_random_with_tran_and_qnet": [[240, 364], ["numpy.array", "env_test.reset", "print", "print", "env_test.step", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.is_terminate", "numpy.append", "env_test.reset", "print", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.is_terminate", "print", "policy.act", "env_test.unwrapped.is_terminate", "env_test.unwrapped.get_x_pos", "print", "policy.exploit", "q13.act", "print", "policy.exploit", "q31.act", "print", "policy.exploit", "q23.act", "print", "policy.exploit", "q32.act", "print", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "pi13", ",", "pi31", ",", "pi23", ",", "pi32", ",", "q13", ",", "q31", ",", "q23", ",", "q32", ",", "duration", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "policy", "=", "pi1", "if", "env_test", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "cur_duration", "=", "0", "\n", "force_1_to_3", "=", "0", "\n", "force_3_to_1", "=", "0", "\n", "force_2_to_3", "=", "0", "\n", "force_3_to_2", "=", "0", "\n", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "# print(env_test.unwrapped.get_x_pos(), env_test.unwrapped.get_q_pos())", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('cur pi1')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "# print('cur pi2')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "# print('cur pi3')", "\n", "            ", "cur_duration", "=", "0", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "# print('cur pi13', cur_duration)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "# print('cur pi31', cur_duration)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi23", ":", "\n", "# print('cur pi23', cur_duration)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi32", ":", "\n", "# print('cur pi32', cur_duration)", "\n", "            ", "cur_duration", "+=", "1", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "\n", "if", "policy", "==", "pi1", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi13", "\n", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'walk'", ")", ":", "\n", "            ", "policy", "=", "pi23", "\n", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ",", "init", "=", "True", ")", "\n", "", "elif", "policy", "==", "pi3", "and", "env_test", ".", "unwrapped", ".", "is_terminate", "(", "'balance'", ")", ":", "\n", "            ", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "if", "1", "<", "x_pos", ":", "\n", "                ", "policy", "=", "pi32", "\n", "", "if", "-", "1", ">", "x_pos", ":", "\n", "                ", "policy", "=", "pi31", "\n", "", "", "elif", "policy", "==", "pi13", ":", "\n", "            ", "guess", "=", "q13", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi3", "\n", "# print('cur pi13', cur_duration)", "\n", "", "elif", "cur_duration", ">=", "duration", ":", "\n", "                ", "force_1_to_3", "+=", "1", "\n", "policy", "=", "pi3", "\n", "", "", "elif", "policy", "==", "pi31", ":", "\n", "            ", "guess", "=", "q31", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi1", "\n", "# print('cur pi31', cur_duration)", "\n", "", "elif", "cur_duration", ">=", "duration", ":", "\n", "                ", "force_3_to_1", "+=", "1", "\n", "policy", "=", "pi1", "\n", "", "", "elif", "policy", "==", "pi23", ":", "\n", "            ", "guess", "=", "q23", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi3", "\n", "# print('cur pi23', cur_duration)", "\n", "", "elif", "cur_duration", ">=", "duration", ":", "\n", "                ", "force_2_to_3", "+=", "1", "\n", "policy", "=", "pi3", "\n", "", "", "elif", "policy", "==", "pi32", ":", "\n", "            ", "guess", "=", "q32", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi2", "\n", "# print('cur pi32', cur_duration)", "\n", "", "elif", "cur_duration", ">=", "duration", ":", "\n", "                ", "force_3_to_2", "+=", "1", "\n", "policy", "=", "pi2", "\n", "\n", "", "", "if", "d", ":", "\n", "            ", "if", "policy", "==", "pi1", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi1'", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi2'", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi3'", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi13'", ",", "cur_duration", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi31'", ",", "cur_duration", ")", "\n", "", "elif", "policy", "==", "pi23", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi23'", ",", "cur_duration", ")", "\n", "", "elif", "policy", "==", "pi32", ":", "\n", "                ", "print", "(", "n", ",", "'die cur pi32'", ",", "cur_duration", ")", "\n", "", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "obs", "=", "obs", "[", ":", "-", "1", "]", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "policy", "=", "pi1", "if", "env_test", ".", "unwrapped", ".", "_direction", "==", "1", "else", "pi2", "\n", "cur_duration", "=", "0", "\n", "\n", "", "", "print", "(", "f'with Q-network pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "print", "(", "'force: '", ",", "force_1_to_3", ",", "force_3_to_1", ",", "force_2_to_3", ",", "force_3_to_2", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_patrol.test_q_network_patrol": [[366, 435], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "rl.util.make_env.seed", "test_q_network_patrol.set_seed", "baselines.common.set_global_seeds", "test_q_network_patrol.load_primitive_policy", "test_q_network_patrol.load_primitive_policy", "test_q_network_patrol.load_primitive_policy", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "test_q_network_patrol.evaluate_network_random_without_tran", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_without_tran", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_q_network_patrol", "(", "args", ")", ":", "\n", "    ", "print", "(", "'test patrol'", ")", "\n", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi3_env", "=", "make_env", "(", "args", ".", "pi3_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi3_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "pi3", "=", "load_primitive_policy", "(", "pi3_env", ",", "args", ".", "pi3_env", ",", "args", ".", "pi3", ",", "args", ")", "\n", "\n", "pi13", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi13", ")", "\n", "\n", "pi31", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi31", ")", "\n", "\n", "pi23", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi23", ")", "\n", "\n", "pi32", "=", "PPOExpert", "(", "\n", "state_shape", "=", "pi1_env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "pi1_env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi32", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "", "dim", "-=", "1", "\n", "\n", "batch_size", "=", "64", "#args.batch_size_q", "\n", "\n", "q13", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q31", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q23", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q32", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q13", ".", "load_weights", "(", "args", ".", "q13", ")", "\n", "q31", ".", "load_weights", "(", "args", ".", "q31", ")", "\n", "q23", ".", "load_weights", "(", "args", ".", "q23", ")", "\n", "q32", ".", "load_weights", "(", "args", ".", "q32", ")", "\n", "\n", "duration", "=", "100", "\n", "\n", "success_res", "=", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "duration", ")", "\n", "# success_res = evaluate_network_random_without_qnet(env_test, pi1, pi2, pi3, pi13, pi31, pi23, pi32, duration)", "\n", "# success_res = evaluate_network_random_with_tran_and_qnet(env_test, pi1, pi2, pi3, pi13, pi31, pi23, pi32, q13, q31, q23, q32, duration)", "\n", "for", "v", "in", "success_res", ":", "\n", "        ", "print", "(", "f'{v}, '", ",", "end", "=", "''", ")", "\n", "# print('end')", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.load_model": [[31, 39], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.tensor_description": [[40, 44], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.set_seed": [[45, 58], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.load_primitive_policy": [[59, 87], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "train_q_network_serve.load_model", "network.get_variables", "baselines.logger.info", "train_q_network_serve.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.save_qnet": [[89, 95], ["q12.save_model", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model"], ["", "def", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "save_frequency", ")", ":", "\n", "\n", "    ", "if", "prev_updates", "[", "0", "]", "!=", "updates", "[", "0", "]", ":", "\n", "        ", "if", "updates", "[", "0", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "0", "]", ")", "+", "'_q12.pt'", "\n", "q12", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.act_random_q_net": [[96, 106], ["q.buffer.add", "random.random", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "", "", "def", "act_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "duration", ")", ":", "\n", "    ", "if", "cur_duration", "<", "pivot", ":", "# stay", "\n", "        ", "arr", "[", "1", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_random", ",", "cur_pi", ",", "obs_next", "\n", "", "elif", "pivot", "<=", "cur_duration", ":", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "True", ",", "pivot", ",", "q_net_pi12_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.act_non_random_q_net": [[107, 141], ["q.act", "random.random", "numpy.random.randint", "random.random", "q.buffer.add", "q.learning", "numpy.append", "random.random", "q.buffer.add", "q.buffer.add", "q.buffer.size", "numpy.random.randint", "q.learning", "numpy.append", "q.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "def", "act_non_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "q_idx", ",", "info", ",", "duration", ")", ":", "\n", "    ", "q_a", "=", "q", ".", "act", "(", "obs_next", ")", "\n", "if", "q_a", "==", "0", ":", "# convertd", "\n", "        ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "True", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "", "elif", "q_a", "==", "1", ":", "# stay", "\n", "        ", "if", "d", "and", "info", "[", "\"success_count\"", "]", "!=", "5", ":", "\n", "            ", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "2", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "# fail reward", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "q_idx", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "", "elif", "duration", "<", "cur_duration", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "3", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "None", "\n", "", "else", ":", "\n", "            ", "arr", "[", "4", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "False", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_serve.train_q_network_serve": [[142, 288], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "train_q_network_serve.set_seed", "baselines.common.set_global_seeds", "train_q_network_serve.load_primitive_policy", "train_q_network_serve.load_primitive_policy", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.set_mean_std", "os.join", "os.makedirs", "os.makedirs", "os.join", "open", "open.write", "rl.util.make_env.reset", "random.random", "print", "open.close", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "numpy.array", "numpy.random.randint", "rl.util.make_env.step", "print", "train_q_network_serve.save_qnet", "range", "torch.device", "torch.device", "torch.device", "print", "policy.act", "rl.util.make_env.unwrapped.is_terminate", "q_network.q_network.DQN_Converter.buffer.add", "rl.util.make_env.reset", "len", "math.exp", "print", "policy.act", "train_q_network_serve.act_random_q_net", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "numpy.random.randint", "print", "policy.exploit", "epsilon_by_frame", "train_q_network_serve.act_non_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "epsilon_by_frame", "q_network.q_network.DQN_Converter.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "", "def", "train_q_network_serve", "(", "args", ")", ":", "\n", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "set_mean_std", "(", "pi12", ".", "get_mean", "(", ")", ",", "pi12", ".", "get_std", "(", ")", ")", "\n", "\n", "# non-Linear epsilon decay", "\n", "epsilon_final", "=", "args", ".", "epsilon_min_q", "\n", "epsilon_start", "=", "args", ".", "epsilon_q", "\n", "epsilon_decay", "=", "args", ".", "epsilon_decay_q", "\n", "epsilon_by_frame", "=", "lambda", "epoch_idx", ":", "epsilon_final", "+", "(", "epsilon_start", "-", "epsilon_final", ")", "*", "math", ".", "exp", "(", "\n", "-", "1.", "*", "epoch_idx", "/", "epsilon_decay", ")", "\n", "\n", "fail_reward", "=", "-", "1.0", "\n", "success_reward", "=", "1.0", "\n", "losses", "=", "[", "np", ".", "array", "(", "[", "]", ")", "]", "\n", "updates", "=", "[", "0", "]", "\n", "prev_updates", "=", "[", "-", "1", "]", "\n", "max_update", "=", "25000", "\n", "\n", "tot_interaction", "=", "0", "\n", "arr1", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "q_net_flags", "=", "[", "False", "]", "\n", "\n", "eval_frequency", "=", "250", "\n", "save_frequency", "=", "1000", "\n", "\n", "fpath", "=", "osp", ".", "join", "(", "'data'", ",", "'q_network'", ",", "args", ".", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'progress.txt'", ")", "\n", "f", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\"total_interaction num_success num_update1 num_update2 force_1_to_2 force_2_to_1 loss1_mean, loss2_mean\\n\"", ")", "\n", "\n", "policy", "=", "pi1", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "temp_obs_for_q_net_pi12", "=", "None", "\n", "duration", "=", "100", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "cur_success_count", "=", "0", "\n", "cur_duration", "=", "0", "\n", "\n", "while", "not", "(", "q_net_flags", "[", "0", "]", ")", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "# print('cur_du and pivot', cur_duration, pivot)", "\n", "", "obs_next", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "tot_interaction", "+=", "1", "\n", "# print('x_pos: ', x_pos, 'pivot: ', pivot, 'curb_pos: ', env.unwrapped.get_curb_pos())", "\n", "\n", "#################################################################################################################", "\n", "\n", "if", "policy", "==", "pi1", "and", "env", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "# print('policy pi12')", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", "<=", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "# random action", "\n", "# print('pi12 random action')", "\n", "            ", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi2", ",", "q12", ",", "duration", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", ">", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "\n", "# print('pi12 non random action')", "\n", "            ", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_non_random_q_net", "(", "cur_duration", ",", "obs", ",", "obs_next", ",", "d", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi2", ",", "q12", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "0", ",", "info", ",", "duration", ")", "\n", "", "if", "success_fail_for_q_net_pi12", "and", "cur_success_count", "<", "info", "[", "'success_count'", "]", ":", "\n", "            ", "cur_success_count", "=", "info", "[", "'success_count'", "]", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "5", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi12", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "6", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "\n", "#################################################################################################################", "\n", "\n", "", "", "obs", "=", "obs_next", "\n", "\n", "if", "d", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "policy", "=", "pi1", "\n", "cur_success_count", "=", "0", "\n", "cur_duration", "=", "0", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "\n", "\n", "", "if", "updates", "[", "0", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "0", "]", "=", "True", "\n", "", "print", "(", "arr1", ")", "\n", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "save_frequency", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", ":", "\n", "            ", "prev_updates", "[", "i", "]", "=", "updates", "[", "i", "]", "\n", "\n", "", "", "print", "(", "'serve tot_interaction:'", ",", "tot_interaction", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "test_q_network_hurdle.load_model", "network.get_variables", "baselines.logger.info", "test_q_network_hurdle.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.evaluate_network_random_without_tran": [[87, 138], ["print", "env_test.unwrapped.get_curb_pos", "print", "env_test.reset", "numpy.array", "print", "env_test.unwrapped.get_curb_pos", "intervals.append", "intervals.append", "env_test.step", "env_test.unwrapped.get_x_pos", "print", "numpy.random.rand", "print", "policy.act", "numpy.append", "env_test.reset", "print", "policy.act", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["", "def", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ",", "pi2", ",", "const", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "policy", "=", "pi1", "\n", "\n", "print", "(", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", ")", "\n", "curb_pos", "=", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "for", "i", "in", "curb_pos", ":", "\n", "        ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "\n", "", "print", "(", "intervals", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "print", "(", "n", ",", "x_pos", ",", "curb_pos", "[", "1", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ",", "obs", "[", "-", "2", ":", "]", ")", "\n", "\n", "if", "policy", "==", "pi1", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi2", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "n", "+=", "1", "\n", "policy", "=", "pi1", "\n", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "", "", "print", "(", "f'without transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.evaluate_network_random_without_qnet": [[139, 220], ["print", "env_test.unwrapped.get_curb_pos", "print", "env_test.reset", "numpy.array", "print", "env_test.unwrapped.get_curb_pos", "intervals.append", "intervals.append", "env_test.step", "env_test.unwrapped.get_x_pos", "print", "numpy.random.rand", "print", "policy.act", "print", "print", "numpy.append", "env_test.reset", "env_test.unwrapped.get_curb_pos", "print", "policy.act", "print", "print", "print", "intervals.append", "intervals.append", "print", "policy.exploit", "print", "print", "numpy.random.rand", "print", "policy.exploit", "numpy.random.rand", "print", "print", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_without_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi12", ",", "pi21", ",", "const", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "\n", "print", "(", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", ")", "\n", "curb_pos", "=", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "for", "i", "in", "curb_pos", ":", "\n", "        ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "\n", "", "print", "(", "intervals", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "idx", "=", "0", "\n", "# const = 2.0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "# policy = pi2", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi21", ":", "\n", "            ", "print", "(", "'cur pi21'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "print", "(", "n", ",", "x_pos", ",", "curb_pos", "[", "1", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ",", "obs", "[", "-", "2", ":", "]", ")", "\n", "\n", "if", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi12", "\n", "print", "(", "'p12'", ",", "pivot", ")", "\n", "print", "(", "x_pos", ",", "curb_pos", "[", "0", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "pivot", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi2", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "print", "(", "'p2'", ")", "\n", "print", "(", "x_pos", ",", "curb_pos", "[", "0", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi21", "\n", "print", "(", "'p21'", ",", "pivot", ")", "\n", "print", "(", "x_pos", ",", "curb_pos", "[", "0", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ")", "\n", "", "elif", "policy", "==", "pi21", "and", "pivot", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "print", "(", "'p1'", ")", "\n", "print", "(", "x_pos", ",", "curb_pos", "[", "0", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ")", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "if", "n", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "f'without q_net eval iteration: {n}'", ")", "\n", "", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "n", "+=", "1", "\n", "idx", "=", "0", "\n", "policy", "=", "pi1", "\n", "curb_pos", "=", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "for", "i", "in", "curb_pos", ":", "\n", "                ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "# pivot = intervals[idx][0] + np.random.rand(1)", "\n", "", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "", "", "print", "(", "f'only pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.evaluate_network_random_with_tran_and_qnet": [[221, 310], ["print", "env_test.unwrapped.get_curb_pos", "env_test.reset", "numpy.array", "print", "print", "print", "env_test.unwrapped.get_curb_pos", "intervals.append", "intervals.append", "env_test.step", "env_test.unwrapped.get_x_pos", "print", "print", "policy.act", "print", "print", "numpy.append", "env_test.reset", "print", "env_test.unwrapped.get_curb_pos", "print", "policy.act", "q12.act", "env_test.unwrapped.get_curb_pos", "intervals.append", "intervals.append", "print", "policy.exploit", "print", "print", "print", "policy.exploit", "print", "q21.act", "print", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi12", ",", "pi21", ",", "q12", ",", "q21", ",", "const", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "force_1_to_2", "=", "0", "\n", "force_2_to_1", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "\n", "print", "(", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", ")", "\n", "curb_pos", "=", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "for", "i", "in", "curb_pos", ":", "\n", "        ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "\n", "", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "idx", "=", "0", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi21", ":", "\n", "            ", "print", "(", "'cur pi21'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "print", "(", "n", ",", "x_pos", ",", "curb_pos", "[", "1", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ",", "obs", "[", "-", "2", ":", "]", ",", "curb_pos", ")", "\n", "\n", "if", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi12", "\n", "print", "(", "'pi12'", ")", "\n", "print", "(", "x_pos", ",", "curb_pos", "[", "0", "]", ",", "curb_pos", "[", "0", "]", "-", "x_pos", "-", "0.1", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "x_pos", "<=", "intervals", "[", "idx", "]", "[", "1", "]", ":", "\n", "            ", "guess", "=", "q12", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi2", "\n", "print", "(", "'pi2'", ")", "\n", "idx", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi12", "and", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi2", "\n", "print", "(", "'force pi2'", ")", "\n", "idx", "+=", "1", "\n", "force_1_to_2", "+=", "1", "\n", "", "elif", "policy", "==", "pi2", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi21", "\n", "print", "(", "'pi21'", ")", "\n", "", "elif", "policy", "==", "pi21", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "x_pos", "<=", "intervals", "[", "idx", "]", "[", "1", "]", ":", "\n", "            ", "guess", "=", "q21", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi1", "\n", "print", "(", "'pi1'", ")", "\n", "idx", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi21", "and", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "print", "(", "'force pi1'", ")", "\n", "idx", "+=", "1", "\n", "force_2_to_1", "+=", "1", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "idx", "=", "0", "\n", "n", "+=", "1", "\n", "policy", "=", "pi1", "\n", "print", "(", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", ")", "\n", "curb_pos", "=", "env_test", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "for", "i", "in", "curb_pos", ":", "\n", "                ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "\n", "", "", "", "print", "(", "f'with Q-network pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "print", "(", "'force_1_to_2: '", ",", "force_1_to_2", ",", "'force_2_to_1: '", ",", "force_2_to_1", ")", "\n", "print", "(", "'const: '", ",", "const", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_hurdle.test_q_network_hurdle": [[312, 361], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "test_q_network_hurdle.set_seed", "baselines.common.set_global_seeds", "test_q_network_hurdle.load_primitive_policy", "test_q_network_hurdle.load_primitive_policy", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "test_q_network_hurdle.evaluate_network_random_with_tran_and_qnet", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_with_tran_and_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_q_network_hurdle", "(", "args", ")", ":", "\n", "    ", "print", "(", "'test hurdle'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "pi21", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi21", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q21", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "load_weights", "(", "args", ".", "q12", ")", "\n", "q21", ".", "load_weights", "(", "args", ".", "q21", ")", "\n", "\n", "const", "=", "1.0", "\n", "\n", "# success_res = evaluate_network_random_without_tran(env_test, pi1, pi2, const)", "\n", "# success_res = evaluate_network_random_without_qnet(env_test, pi1, pi2, pi12, pi21, const)", "\n", "success_res", "=", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi12", ",", "pi21", ",", "q12", ",", "q21", ",", "const", ")", "\n", "for", "v", "in", "success_res", ":", "\n", "        ", "print", "(", "f'{v}, '", ",", "end", "=", "''", ")", "\n", "", "print", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.load_model": [[31, 39], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.tensor_description": [[40, 44], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.set_seed": [[45, 58], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.load_primitive_policy": [[59, 87], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "train_q_network_hurdle.load_model", "network.get_variables", "baselines.logger.info", "train_q_network_hurdle.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet": [[89, 100], ["q12.save_model", "q21.save_model", "str", "str"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.save_model"], ["", "def", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "q21", ",", "save_frequency", ",", "const", ")", ":", "\n", "\n", "    ", "if", "prev_updates", "[", "0", "]", "!=", "updates", "[", "0", "]", ":", "\n", "        ", "if", "updates", "[", "0", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "0", "]", ")", "+", "'_q12.pt'", "\n", "q12", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n", "", "", "if", "prev_updates", "[", "1", "]", "!=", "updates", "[", "1", "]", ":", "\n", "        ", "if", "updates", "[", "1", "]", "%", "save_frequency", "==", "0", ":", "\n", "            ", "fname", "=", "str", "(", "updates", "[", "1", "]", ")", "+", "'_q21.pt'", "\n", "q21", ".", "save_model", "(", "fpath", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net": [[101, 112], ["q.buffer.add", "random.random", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add"], ["", "", "", "def", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "const", ")", ":", "\n", "    ", "if", "x_pos", "<", "pivot", ":", "# stay", "\n", "        ", "arr", "[", "1", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "idx", ",", "False", ",", "pivot", ",", "q_random", ",", "cur_pi", ",", "obs_next", "\n", "", "elif", "pivot", "<=", "x_pos", ":", "\n", "        ", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "idx", ",", "True", ",", "pivot", ",", "q_net_pi12_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net": [[113, 149], ["q.act", "random.random", "numpy.random.rand", "random.random", "q.buffer.add", "q.learning", "numpy.append", "random.random", "q.buffer.add", "q.buffer.add", "q.buffer.size", "q.learning", "numpy.append", "numpy.random.rand", "q.buffer.size"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size"], ["", "", "def", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_random", ",", "arr", ",", "cur_pi", ",", "next_pi", ",", "q", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "q_idx", ",", "info", ",", "const", ")", ":", "\n", "    ", "q_a", "=", "q", ".", "act", "(", "obs_next", ")", "\n", "if", "q_a", "==", "0", ":", "# convertd", "\n", "        ", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "True", "\n", "temp_obs_for_q_net_pi12", "=", "obs_next", "# keep observation", "\n", "return", "idx", ",", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "temp_obs_for_q_net_pi12", "\n", "", "elif", "q_a", "==", "1", ":", "# stay", "\n", "        ", "if", "d", "and", "info", "[", "\"success_count\"", "]", "!=", "5", ":", "\n", "            ", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "2", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "# fail reward", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "q_idx", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "idx", ",", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "", "elif", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "q_net_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net", "=", "False", "\n", "arr", "[", "3", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "-", "1", ",", "obs_next", ",", "d", ")", "\n", "if", "q", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "q_idx", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "q_idx", "]", "=", "np", ".", "append", "(", "losses", "[", "q_idx", "]", ",", "loss", ")", "\n", "updates", "[", "q_idx", "]", "+=", "1", "\n", "", "return", "idx", ",", "success_fail_for_q_net", ",", "pivot", ",", "q_net_random", ",", "next_pi", ",", "None", "\n", "", "else", ":", "\n", "            ", "arr", "[", "4", "]", "+=", "1", "\n", "q", ".", "buffer", ".", "add", "(", "obs", ",", "1", ",", "0", ",", "obs_next", ",", "d", ")", "\n", "return", "idx", ",", "False", ",", "pivot", ",", "q_net_random", ",", "cur_pi", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.train_q_network_hurdle": [[150, 362], ["baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "train_q_network_hurdle.set_seed", "baselines.common.set_global_seeds", "train_q_network_hurdle.load_primitive_policy", "train_q_network_hurdle.load_primitive_policy", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.set_mean_std", "q_network.q_network.DQN_Converter.set_mean_std", "os.join", "os.makedirs", "os.makedirs", "os.join", "open", "open.write", "rl.util.make_env.reset", "random.random", "random.random", "print", "rl.util.make_env.unwrapped.get_curb_pos", "print", "print", "open.close", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "irl.algo.ppo.PPOExpert.get_mean", "irl.algo.ppo.PPOExpert.get_std", "numpy.array", "numpy.array", "rl.util.make_env.unwrapped.get_curb_pos", "intervals.append", "intervals.append", "rl.util.make_env.step", "rl.util.make_env.unwrapped.get_x_pos", "print", "train_q_network_hurdle.save_qnet", "range", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "numpy.random.rand", "policy.act", "print", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.buffer.add", "rl.util.make_env.reset", "rl.util.make_env.unwrapped.get_curb_pos", "len", "math.exp", "policy.act", "train_q_network_hurdle.act_random_q_net", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.add", "intervals.append", "intervals.append", "print", "policy.exploit", "epsilon_by_frame", "train_q_network_hurdle.act_non_random_q_net", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.learning", "numpy.append", "numpy.random.rand", "policy.exploit", "epsilon_by_frame", "q_network.q_network.DQN_Converter.buffer.size", "q_network.q_network.DQN_Converter.buffer.size", "train_q_network_hurdle.act_random_q_net", "epsilon_by_frame", "train_q_network_hurdle.act_non_random_q_net", "epsilon_by_frame"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.set_mean_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.close", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_mean", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.ppo.PPOExpert.get_std", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.save_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_curb_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.add", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.learning", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.replay_buffer.ReplayBuffer.size", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_random_q_net", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.train_q_network_hurdle.act_non_random_q_net"], ["", "", "", "def", "train_q_network_hurdle", "(", "args", ")", ":", "\n", "\n", "    ", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "pi21", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi21", ")", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q21", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "set_mean_std", "(", "pi12", ".", "get_mean", "(", ")", ",", "pi12", ".", "get_std", "(", ")", ")", "\n", "q21", ".", "set_mean_std", "(", "pi21", ".", "get_mean", "(", ")", ",", "pi21", ".", "get_std", "(", ")", ")", "\n", "\n", "# non-Linear epsilon decay", "\n", "epsilon_final", "=", "args", ".", "epsilon_min_q", "\n", "epsilon_start", "=", "args", ".", "epsilon_q", "\n", "epsilon_decay", "=", "args", ".", "epsilon_decay_q", "\n", "epsilon_by_frame", "=", "lambda", "epoch_idx", ":", "epsilon_final", "+", "(", "epsilon_start", "-", "epsilon_final", ")", "*", "math", ".", "exp", "(", "\n", "-", "1.", "*", "epoch_idx", "/", "epsilon_decay", ")", "\n", "\n", "fail_reward", "=", "-", "1.0", "\n", "success_reward", "=", "1.0", "\n", "losses", "=", "[", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "]", "\n", "updates", "=", "[", "0", ",", "0", "]", "\n", "prev_updates", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "max_update", "=", "20000", "\n", "\n", "tot_interaction", "=", "0", "\n", "arr1", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "arr2", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "q_net_flags", "=", "[", "False", ",", "False", "]", "\n", "\n", "eval_frequency", "=", "250", "\n", "save_frequency", "=", "1000", "\n", "\n", "fpath", "=", "osp", ".", "join", "(", "'data'", ",", "'q_network'", ",", "args", ".", "fname", ")", "\n", "os", ".", "makedirs", "(", "fpath", ",", "exist_ok", "=", "True", ")", "\n", "fname", "=", "osp", ".", "join", "(", "fpath", ",", "'progress.txt'", ")", "\n", "f", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "f", ".", "write", "(", "\"total_interaction num_success num_update1 num_update2 force_1_to_2 force_2_to_1 loss1_mean, loss2_mean\\n\"", ")", "\n", "\n", "policy", "=", "pi1", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "q_net_pi12_random", "=", "random", ".", "random", "(", ")", "\n", "q_net_pi21_random", "=", "random", ".", "random", "(", ")", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "success_fail_for_q_net_pi21", "=", "False", "\n", "temp_obs_for_q_net_pi12", "=", "None", "\n", "temp_obs_for_q_net_pi21", "=", "None", "\n", "\n", "\n", "print", "(", "env", ".", "unwrapped", ".", "get_curb_pos", "(", ")", ")", "\n", "curb_pos", "=", "env", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "const", "=", "2.0", "\n", "for", "i", "in", "curb_pos", ":", "\n", "        ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "\n", "", "print", "(", "intervals", ")", "\n", "\n", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "cur_success_count", "=", "0", "\n", "\n", "while", "not", "(", "q_net_flags", "[", "0", "]", "and", "q_net_flags", "[", "1", "]", ")", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('pi1')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "# print('pi2')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi21", ":", "\n", "# print('pi21')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "obs_next", ",", "r", ",", "d", ",", "info", "=", "env", ".", "step", "(", "a", ")", "\n", "# env.render()", "\n", "# time.sleep(1e-2)", "\n", "tot_interaction", "+=", "1", "\n", "x_pos", "=", "env", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "# print('x_pos: ', x_pos, 'pivot: ', pivot, 'curb_pos: ', env.unwrapped.get_curb_pos())", "\n", "\n", "#################################################################################################################", "\n", "\n", "if", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi12", "\n", "print", "(", "'policy pi12'", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", "<=", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "# random action", "\n", "# print('pi12 random action')", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi2", ",", "q12", ",", "const", ")", "\n", "", "elif", "policy", "==", "pi12", "and", "q_net_pi12_random", ">", "epsilon_by_frame", "(", "updates", "[", "0", "]", ")", ":", "\n", "# print('pi12 non random action')", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi12", ",", "pivot", ",", "q_net_pi12_random", ",", "policy", ",", "temp_obs_for_q_net_pi12", "=", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi12_random", ",", "arr1", ",", "policy", ",", "pi2", ",", "q12", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "0", ",", "info", ",", "const", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "if", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "                ", "policy", "=", "pi21", "\n", "", "", "elif", "policy", "==", "pi21", "and", "q_net_pi21_random", "<=", "epsilon_by_frame", "(", "updates", "[", "1", "]", ")", ":", "# random action", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi21", ",", "pivot", ",", "q_net_pi21_random", ",", "policy", ",", "temp_obs_for_q_net_pi21", "=", "act_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi21_random", ",", "arr2", ",", "policy", ",", "pi1", ",", "q21", ",", "const", ")", "\n", "", "elif", "policy", "==", "pi21", "and", "q_net_pi21_random", ">", "epsilon_by_frame", "(", "updates", "[", "1", "]", ")", ":", "\n", "            ", "idx", ",", "success_fail_for_q_net_pi21", ",", "pivot", ",", "q_net_pi21_random", ",", "policy", ",", "temp_obs_for_q_net_pi21", "=", "act_non_random_q_net", "(", "x_pos", ",", "obs", ",", "obs_next", ",", "d", ",", "idx", ",", "intervals", ",", "pivot", ",", "q_net_pi21_random", ",", "arr2", ",", "policy", ",", "pi1", ",", "q21", ",", "max_update", ",", "batch_size", ",", "updates", ",", "losses", ",", "1", ",", "info", ",", "const", ")", "\n", "\n", "", "if", "success_fail_for_q_net_pi12", "and", "cur_success_count", "<", "info", "[", "'success_count'", "]", ":", "\n", "            ", "cur_success_count", "=", "info", "[", "'success_count'", "]", "\n", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "5", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi12", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi12", "=", "False", "\n", "arr1", "[", "6", "]", "+=", "1", "\n", "q12", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi12", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q12", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "0", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q12", ".", "learning", "(", "updates", "[", "0", "]", ")", "\n", "losses", "[", "0", "]", "=", "np", ".", "append", "(", "losses", "[", "0", "]", ",", "loss", ")", "\n", "updates", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "if", "(", "success_fail_for_q_net_pi21", "and", "\n", "(", "(", "info", "[", "'success_count'", "]", "==", "1", "and", "intervals", "[", "2", "]", "[", "1", "]", "<=", "x_pos", ")", "or", "\n", "(", "info", "[", "'success_count'", "]", "==", "2", "and", "intervals", "[", "4", "]", "[", "1", "]", "<=", "x_pos", ")", "or", "\n", "(", "info", "[", "'success_count'", "]", "==", "3", "and", "intervals", "[", "6", "]", "[", "1", "]", "<=", "x_pos", ")", "or", "\n", "(", "info", "[", "'success_count'", "]", "==", "4", "and", "intervals", "[", "8", "]", "[", "1", "]", "<=", "x_pos", ")", "or", "\n", "(", "info", "[", "'success_count'", "]", "==", "5", ")", ")", ")", ":", "\n", "            ", "success_fail_for_q_net_pi21", "=", "False", "\n", "arr2", "[", "5", "]", "+=", "1", "\n", "q21", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi21", ",", "0", ",", "success_reward", ",", "obs_next", ",", "d", ")", "# successful execution", "\n", "if", "q21", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "1", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q21", ".", "learning", "(", "updates", "[", "1", "]", ")", "\n", "losses", "[", "1", "]", "=", "np", ".", "append", "(", "losses", "[", "1", "]", ",", "loss", ")", "\n", "updates", "[", "1", "]", "+=", "1", "\n", "", "", "elif", "success_fail_for_q_net_pi21", "and", "d", ":", "\n", "            ", "success_fail_for_q_net_pi21", "=", "False", "\n", "arr2", "[", "6", "]", "+=", "1", "\n", "q21", ".", "buffer", ".", "add", "(", "temp_obs_for_q_net_pi21", ",", "0", ",", "fail_reward", ",", "obs_next", ",", "d", ")", "# unsuccessful execution", "\n", "if", "q21", ".", "buffer", ".", "size", "(", ")", ">", "batch_size", "and", "updates", "[", "1", "]", "<", "max_update", ":", "\n", "                ", "loss", "=", "q21", ".", "learning", "(", "updates", "[", "1", "]", ")", "\n", "losses", "[", "1", "]", "=", "np", ".", "append", "(", "losses", "[", "1", "]", ",", "loss", ")", "\n", "updates", "[", "1", "]", "+=", "1", "\n", "\n", "#################################################################################################################", "\n", "\n", "", "", "obs", "=", "obs_next", "\n", "\n", "if", "d", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "policy", "=", "pi1", "\n", "idx", "=", "0", "\n", "cur_success_count", "=", "0", "\n", "curb_pos", "=", "env", ".", "unwrapped", ".", "get_curb_pos", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "for", "i", "in", "curb_pos", ":", "\n", "                ", "intervals", ".", "append", "(", "[", "i", "-", "4.1", ",", "i", "-", "4.1", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "i", "+", "2.5", ",", "i", "+", "2.5", "+", "const", "]", ")", "\n", "", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "\n", "", "if", "updates", "[", "0", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "0", "]", "=", "True", "\n", "", "if", "updates", "[", "1", "]", ">=", "max_update", ":", "\n", "            ", "q_net_flags", "[", "1", "]", "=", "True", "\n", "\n", "# print(arr1)", "\n", "# print(arr2)", "\n", "", "print", "(", "updates", ")", "\n", "\n", "save_qnet", "(", "prev_updates", ",", "updates", ",", "fpath", ",", "q12", ",", "q21", ",", "save_frequency", ",", "const", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", ":", "\n", "            ", "prev_updates", "[", "i", "]", "=", "updates", "[", "i", "]", "\n", "\n", "", "", "print", "(", "'hurdle tot_interaction:'", ",", "tot_interaction", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "test_q_network_pick.load_model", "network.get_variables", "baselines.logger.info", "test_q_network_pick.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.evaluate_network_random_without_tran": [[87, 112], ["numpy.array", "env_test.reset", "print", "policy.act", "env_test.step", "numpy.append", "env_test.reset", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ")", ":", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "policy", "=", "pi1", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# print('cur pi1')", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "print", "(", "f'without transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.evaluate_network_random_without_qnet": [[113, 160], ["numpy.array", "env_test.reset", "print", "numpy.random.randint", "env_test.step", "env_test.unwrapped.is_terminate", "print", "policy.act", "numpy.append", "env_test.reset", "print", "print", "print", "policy.exploit", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit"], ["", "def", "evaluate_network_random_without_qnet", "(", "env_test", ",", "pi1", ",", "pi12", ",", "duration", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# env_test.render()", "\n", "# time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "print", "(", "cur_duration", ",", "pivot", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "cur_duration", "=", "0", "\n", "", "if", "policy", "==", "pi12", "and", "cur_duration", ">", "pivot", ":", "\n", "            ", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "pivot", "=", "np", ".", "random", ".", "randint", "(", "duration", ")", "+", "1", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "", "", "print", "(", "f'only pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.evaluate_network_random_with_tran_and_qnet": [[161, 211], ["numpy.array", "env_test.reset", "print", "print", "env_test.step", "env_test.unwrapped.is_terminate", "print", "policy.act", "numpy.append", "env_test.reset", "print", "print", "policy.exploit", "q12.act", "print"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d.Walker2dEnv.is_terminate", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi12", ",", "q12", ",", "duration", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "cur_duration", "=", "0", "\n", "force_1_to_2", "=", "0", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "while", "n", "<", "tot_iters", ":", "\n", "#     env_test.render()", "\n", "#     time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "cur_duration", "+=", "1", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "\n", "if", "env_test", ".", "unwrapped", ".", "is_terminate", "(", ")", ":", "\n", "            ", "policy", "=", "pi12", "\n", "cur_duration", "=", "0", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "guess", "=", "q12", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi1", "\n", "print", "(", "'change'", ")", "\n", "", "elif", "30", "<", "cur_duration", ":", "\n", "                ", "policy", "=", "pi1", "\n", "force_1_to_2", "+=", "1", "\n", "\n", "", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "cur_duration", "=", "0", "\n", "policy", "=", "pi1", "\n", "print", "(", "'done'", ")", "\n", "n", "+=", "1", "\n", "\n", "\n", "", "", "print", "(", "f'with Q-network pi1 -> pi12 -> pi2: tot_success: {tot_success}, ratio: {tot_success / tot_iters}'", ")", "\n", "print", "(", "'force_1_to_2: '", ",", "force_1_to_2", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_pick.test_q_network_pick": [[213, 249], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "test_q_network_pick.set_seed", "baselines.common.set_global_seeds", "test_q_network_pick.load_primitive_policy", "irl.algo.ppo.PPOExpert", "print", "exit", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.load_weights", "test_q_network_pick.evaluate_network_random_without_tran", "print", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_without_tran", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_q_network_pick", "(", "args", ")", ":", "\n", "    ", "print", "(", "'test pick'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "print", "(", "env", ".", "observation_space", ".", "shape", ")", "\n", "exit", "(", ")", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "load_weights", "(", "args", ".", "q12", ")", "\n", "duration", "=", "40", "\n", "success_res", "=", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ")", "\n", "# success_res = evaluate_network_random_without_qnet(env_test, pi1, pi12, duration)", "\n", "# success_res = evaluate_network_random_with_tran_and_qnet(env_test, pi1, pi12, q12, duration)", "\n", "for", "v", "in", "success_res", ":", "\n", "        ", "print", "(", "f'{v}, '", ",", "end", "=", "''", ")", "\n", "# print('end')", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model": [[30, 38], ["os.path.isdir", "os.path.isdir", "tensorflow.train.latest_checkpoint", "baselines.load_state"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.load_state"], ["def", "load_model", "(", "load_model_path", ",", "var_list", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "load_model_path", ")", ":", "\n", "        ", "ckpt_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "load_model_path", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "load_model_path", "\n", "", "if", "ckpt_path", ":", "\n", "        ", "U", ".", "load_state", "(", "ckpt_path", ",", "var_list", ")", "\n", "", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description": [[39, 43], ["str", "var.get_shape"], "function", ["None"], ["", "def", "tensor_description", "(", "var", ")", ":", "\n", "        ", "description", "=", "'({} [{}])'", ".", "format", "(", "\n", "var", ".", "dtype", ".", "name", ",", "'x'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "var", ".", "get_shape", "(", ")", "]", ")", ")", "\n", "return", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed": [[44, 57], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "str", "random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "tensorflow.random.set_random_seed", "env.seed", "env_test.seed"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed"], ["", "def", "set_seed", "(", "seed", ",", "env", ",", "env_test", ")", ":", "\n", "# Random seed", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "\"PYTHONHASHSEED\"", "]", "=", "str", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "tf", ".", "random", ".", "set_random_seed", "(", "seed", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env_test", ".", "seed", "(", "2", "**", "31", "-", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy": [[58, 86], ["rl.mlp_policy.MlpPolicy", "rl.mlp_policy.MlpPolicy", "networks.append", "networks.append", "test_q_network_obstacle.load_model", "network.get_variables", "baselines.logger.info", "test_q_network_obstacle.tensor_description"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_model", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.mlp_policy.MlpPolicy.get_variables", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.info", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.tensor_description"], ["", "def", "load_primitive_policy", "(", "env", ",", "env_name", ",", "path", ",", "args", ")", ":", "\n", "# build vanilla TRPO", "\n", "    ", "pi", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/pi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "pi_old", "=", "MlpPolicy", "(", "\n", "env", "=", "env", ",", "\n", "name", "=", "\"%s/oldpi\"", "%", "env_name", ",", "\n", "ob_env_name", "=", "env_name", ",", "\n", "config", "=", "args", ")", "\n", "\n", "networks", "=", "[", "]", "\n", "networks", ".", "append", "(", "pi", ")", "\n", "networks", ".", "append", "(", "pi_old", ")", "\n", "\n", "var_list", "=", "[", "]", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "var_list", "+=", "network", ".", "get_variables", "(", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "for", "var", "in", "var_list", ":", "\n", "            ", "logger", ".", "info", "(", "'{} {}'", ".", "format", "(", "var", ".", "name", ",", "tensor_description", "(", "var", ")", ")", ")", "\n", "", "", "ckpt_path", "=", "load_model", "(", "path", ",", "var_list", ")", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_without_tran": [[87, 185], ["env_test.reset", "env_test.unwrapped.get_obstacle_pos_and_type", "print", "numpy.array", "range", "print", "len", "intervals.append", "intervals.append", "env_test.step", "env_test.unwrapped.get_x_pos", "print", "order.append", "order.append", "order.append", "order.append", "numpy.random.rand", "print", "policy.act", "numpy.append", "env_test.reset", "env_test.unwrapped.get_obstacle_pos_and_type", "range", "print", "policy.act", "print", "len", "intervals.append", "intervals.append", "print", "policy.act", "numpy.random.rand", "order.append", "order.append", "order.append", "order.append", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append"], ["", "def", "evaluate_network_random_without_tran", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "const", ")", ":", "\n", "    ", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "\n", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env_test", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "print", "(", "obstacle", "[", "'type'", "]", ")", "\n", "order", "=", "[", "]", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "        ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "            ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "            ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "\n", "", "", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "policy", "=", "pi1", "\n", "\n", "while", "n", "<", "tot_iters", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "            ", "print", "(", "'cur pi3'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "# print(order, idx)", "\n", "# print(env_test.unwrapped.get_obstacle_pos_and_type()['pos'])", "\n", "# print(intervals)", "\n", "\n", "# env_test.render()", "\n", "# time.sleep(5e-3)", "\n", "print", "(", "n", ",", "x_pos", ")", "\n", "if", "policy", "==", "pi1", "and", "pivot", "<", "x_pos", "and", "order", "[", "idx", "]", "==", "'pi12'", ":", "\n", "            ", "policy", "=", "pi2", "\n", "# print('pi2')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "# print('pi1')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi1", "and", "pivot", "<", "x_pos", "and", "order", "[", "idx", "]", "==", "'pi13'", ":", "\n", "            ", "policy", "=", "pi3", "\n", "# print('pi3')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi3", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "# print('pi1')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "if", "n", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "f'{n}'", ")", "\n", "", "n", "+=", "1", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env_test", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "order", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "                ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "                    ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "                    ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "", "", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "policy", "=", "pi1", "\n", "\n", "\n", "", "", "print", "(", "f'without transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_without_qnet": [[186, 309], ["env_test.reset", "env_test.unwrapped.get_obstacle_pos_and_type", "print", "numpy.array", "range", "print", "len", "intervals.append", "intervals.append", "env_test.step", "env_test.unwrapped.get_x_pos", "print", "order.append", "order.append", "order.append", "order.append", "numpy.random.rand", "print", "policy.act", "numpy.append", "env_test.reset", "env_test.unwrapped.get_obstacle_pos_and_type", "range", "print", "policy.act", "print", "len", "intervals.append", "intervals.append", "print", "policy.act", "order.append", "order.append", "order.append", "order.append", "numpy.random.rand", "print", "policy.exploit", "numpy.random.rand", "print", "policy.exploit", "print", "policy.exploit", "numpy.random.rand", "print", "policy.exploit", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit"], ["", "def", "evaluate_network_random_without_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "pi12", ",", "pi21", ",", "pi13", ",", "pi31", ",", "const", ")", ":", "\n", "\n", "    ", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "\n", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env_test", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "print", "(", "obstacle", "[", "'type'", "]", ")", "\n", "order", "=", "[", "]", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "        ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "            ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "            ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "\n", "", "", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "policy", "=", "pi1", "\n", "\n", "while", "n", "<", "tot_iters", ":", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "            ", "print", "(", "'cur pi1'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "            ", "print", "(", "'cur pi2'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "            ", "print", "(", "'cur pi3'", ")", "\n", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "            ", "print", "(", "'cur pi12'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi21", ":", "\n", "            ", "print", "(", "'cur pi21'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "            ", "print", "(", "'cur pi13'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "            ", "print", "(", "'cur pi31'", ")", "\n", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "# print(order, idx)", "\n", "# print(env_test.unwrapped.get_obstacle_pos_and_type()['pos'])", "\n", "# print(intervals)", "\n", "\n", "# env_test.render()", "\n", "# time.sleep(5e-3)", "\n", "print", "(", "n", ",", "x_pos", ")", "\n", "if", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "order", "[", "idx", "]", "==", "'pi12'", ":", "\n", "            ", "policy", "=", "pi12", "\n", "# print('pi12')", "\n", "", "elif", "policy", "==", "pi12", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi2", "\n", "# print('pi2')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi2", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi21", "\n", "# print('pi21')", "\n", "", "elif", "policy", "==", "pi21", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "# print('pi1')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "order", "[", "idx", "]", "==", "'pi13'", ":", "\n", "            ", "policy", "=", "pi13", "\n", "# print('pi13')", "\n", "", "elif", "policy", "==", "pi13", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi3", "\n", "# print('pi3')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "", "elif", "policy", "==", "pi3", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi31", "\n", "# print('pi31')", "\n", "", "elif", "policy", "==", "pi31", "and", "pivot", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "# print('pi1')", "\n", "idx", "+=", "1", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "if", "n", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "f'{n}'", ")", "\n", "", "n", "+=", "1", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env_test", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "order", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "                ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "                    ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "                    ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "", "", "idx", "=", "0", "\n", "pivot", "=", "intervals", "[", "idx", "]", "[", "0", "]", "+", "const", "*", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "policy", "=", "pi1", "\n", "\n", "\n", "", "", "print", "(", "f'with transition policy {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_with_tran_and_qnet": [[310, 451], ["env_test.unwrapped.get_obstacle_pos_and_type", "print", "numpy.array", "range", "env_test.reset", "print", "print", "len", "intervals.append", "intervals.append", "env_test.step", "env_test.unwrapped.get_x_pos", "print", "order.append", "order.append", "order.append", "order.append", "policy.act", "numpy.append", "env_test.reset", "env_test.unwrapped.get_obstacle_pos_and_type", "print", "range", "policy.act", "q12.act", "len", "intervals.append", "intervals.append", "policy.act", "order.append", "order.append", "order.append", "order.append", "policy.exploit", "q13.act", "policy.exploit", "policy.exploit", "policy.exploit", "q21.act", "q31.act"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.ppo.core.MLPActorCritic.step", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_hurdle.Walker2dHurdleEnv.get_x_pos", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.vec_env.__init__.VecEnv.reset", "home.repos.pwc.inspect_result.shashacks_irl_transition.mujoco.walker2d_obstacle_course.Walker2dObstacleCourseEnv.get_obstacle_pos_and_type", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.irl.buffer.RolloutBuffer.append", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.algo.base.Algorithm.exploit", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.act"], ["", "def", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "pi12", ",", "pi21", ",", "pi13", ",", "pi31", ",", "q12", ",", "q21", ",", "q13", ",", "q31", ",", "const", ")", ":", "\n", "\n", "    ", "n", "=", "0", "\n", "tot_iters", "=", "50", "\n", "tot_success", "=", "0", "\n", "force_1_to_2", "=", "0", "\n", "force_2_to_1", "=", "0", "\n", "force_1_to_3", "=", "0", "\n", "force_3_to_1", "=", "0", "\n", "\n", "policy", "=", "pi1", "\n", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env_test", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "print", "(", "obstacle", "[", "'type'", "]", ")", "\n", "order", "=", "[", "]", "\n", "success_res", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "        ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "            ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "            ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "\n", "", "", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "idx", "=", "0", "\n", "\n", "while", "n", "<", "tot_iters", ":", "\n", "# if n == 2:", "\n", "#     env_test.render()", "\n", "#     time.sleep(1e-2)", "\n", "        ", "if", "policy", "==", "pi1", ":", "\n", "# print('cur pi1')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi2", ":", "\n", "# print('cur pi2')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi3", ":", "\n", "# print('cur pi3')", "\n", "            ", "a", ",", "vpred", "=", "policy", ".", "act", "(", "obs", "[", ":", "-", "2", "]", ",", "False", ")", "\n", "", "elif", "policy", "==", "pi12", ":", "\n", "# print('cur pi12')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi21", ":", "\n", "# print('cur pi21')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi13", ":", "\n", "# print('cur pi13')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "", "elif", "policy", "==", "pi31", ":", "\n", "# print('cur pi31')", "\n", "            ", "a", "=", "policy", ".", "exploit", "(", "obs", ")", "\n", "\n", "# env_test.render()", "\n", "", "obs", ",", "r", ",", "d", ",", "info", "=", "env_test", ".", "step", "(", "a", ")", "\n", "x_pos", "=", "env_test", ".", "unwrapped", ".", "get_x_pos", "(", ")", "\n", "print", "(", "n", ",", "x_pos", ")", "\n", "\n", "\n", "if", "policy", "==", "pi1", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "if", "order", "[", "idx", "]", "==", "'pi12'", ":", "\n", "                ", "policy", "=", "pi12", "\n", "", "elif", "order", "[", "idx", "]", "==", "'pi13'", ":", "\n", "                ", "policy", "=", "pi13", "\n", "", "", "elif", "policy", "==", "pi12", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "x_pos", "<=", "intervals", "[", "idx", "]", "[", "1", "]", ":", "\n", "            ", "guess", "=", "q12", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi2", "\n", "idx", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi12", "and", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi2", "\n", "idx", "+=", "1", "\n", "force_1_to_2", "+=", "1", "\n", "", "elif", "policy", "==", "pi13", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "x_pos", "<=", "intervals", "[", "idx", "]", "[", "1", "]", ":", "\n", "            ", "guess", "=", "q13", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi3", "\n", "idx", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi13", "and", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi3", "\n", "idx", "+=", "1", "\n", "force_1_to_3", "+=", "1", "\n", "\n", "", "elif", "policy", "==", "pi2", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi21", "\n", "", "elif", "policy", "==", "pi21", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "x_pos", "<=", "intervals", "[", "idx", "]", "[", "1", "]", ":", "\n", "            ", "guess", "=", "q21", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi1", "\n", "idx", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi21", "and", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "idx", "+=", "1", "\n", "force_2_to_1", "+=", "1", "\n", "\n", "", "elif", "policy", "==", "pi3", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", ":", "\n", "            ", "policy", "=", "pi31", "\n", "", "elif", "policy", "==", "pi31", "and", "intervals", "[", "idx", "]", "[", "0", "]", "<=", "x_pos", "and", "x_pos", "<=", "intervals", "[", "idx", "]", "[", "1", "]", ":", "\n", "            ", "guess", "=", "q31", ".", "act", "(", "obs", ")", "\n", "if", "guess", "==", "0", ":", "\n", "                ", "policy", "=", "pi1", "\n", "idx", "+=", "1", "\n", "", "", "elif", "policy", "==", "pi31", "and", "intervals", "[", "idx", "]", "[", "1", "]", "<", "x_pos", ":", "\n", "            ", "policy", "=", "pi1", "\n", "idx", "+=", "1", "\n", "force_3_to_1", "+=", "1", "\n", "\n", "", "if", "d", ":", "\n", "            ", "tot_success", "+=", "info", "[", "'success_count'", "]", "\n", "success_res", "=", "np", ".", "append", "(", "success_res", ",", "info", "[", "'success_count'", "]", ")", "\n", "# if info['success_count'] == 5:", "\n", "#     print(n)", "\n", "#     exit()", "\n", "n", "+=", "1", "\n", "obs", "=", "env_test", ".", "reset", "(", ")", "\n", "intervals", "=", "[", "]", "\n", "obstacle", "=", "env_test", ".", "unwrapped", ".", "get_obstacle_pos_and_type", "(", ")", "\n", "print", "(", "obstacle", "[", "'type'", "]", ")", "\n", "order", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obstacle", "[", "'pos'", "]", ")", ")", ":", "\n", "                ", "offset_b", "=", "3.1", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "4.5", "\n", "offset_a", "=", "2.5", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", "else", "2.0", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "-", "offset_b", "+", "const", "]", ")", "\n", "intervals", ".", "append", "(", "[", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", ",", "obstacle", "[", "'pos'", "]", "[", "i", "]", "+", "offset_a", "+", "const", "]", ")", "\n", "if", "obstacle", "[", "'type'", "]", "[", "i", "]", ":", "\n", "                    ", "order", ".", "append", "(", "'pi12'", ")", "\n", "order", ".", "append", "(", "'pi21'", ")", "\n", "", "else", ":", "\n", "                    ", "order", ".", "append", "(", "'pi13'", ")", "\n", "order", ".", "append", "(", "'pi31'", ")", "\n", "", "", "policy", "=", "pi1", "\n", "idx", "=", "0", "\n", "\n", "", "", "print", "(", "f'with transition policy and Q-net {tot_success} / {tot_iters}, ratio: {tot_success/tot_iters}'", ")", "\n", "print", "(", "f'force_1_to_2: {force_1_to_2}, force_2_to_1: {force_2_to_1}, force_1_to_3: {force_1_to_3}, force_3_to_1: {force_3_to_1}'", ")", "\n", "return", "success_res", "\n", "\n"]], "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.test_q_network_obstacle": [[452, 523], ["print", "baselines.single_threaded_session", "U.single_threaded_session.__enter__", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env", "rl.util.make_env.seed", "rl.util.make_env.seed", "rl.util.make_env.seed", "test_q_network_obstacle.set_seed", "baselines.common.set_global_seeds", "test_q_network_obstacle.load_primitive_policy", "test_q_network_obstacle.load_primitive_policy", "test_q_network_obstacle.load_primitive_policy", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "irl.algo.ppo.PPOExpert", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "q_network.q_network.DQN_Converter.load_weights", "test_q_network_obstacle.evaluate_network_random_with_tran_and_qnet", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.shashacks_irl_transition.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.rl.util.make_env", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.spaces.prng.seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.set_seed", "home.repos.pwc.inspect_result.shashacks_irl_transition.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.load_primitive_policy", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.q_network.DQN_Converter.load_weights", "home.repos.pwc.inspect_result.shashacks_irl_transition.q_network.test_q_network_obstacle.evaluate_network_random_with_tran_and_qnet", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print", "home.repos.pwc.inspect_result.shashacks_irl_transition.utils.run_utils.ExperimentGrid.print"], ["", "def", "test_q_network_obstacle", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'test obstacle'", ")", "\n", "sess", "=", "U", ".", "single_threaded_session", "(", "gpu", "=", "False", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "env", "=", "make_env", "(", "args", ".", "env", ")", "\n", "env_test", "=", "make_env", "(", "args", ".", "env", ")", "\n", "pi1_env", "=", "make_env", "(", "args", ".", "pi1_env", ")", "\n", "pi2_env", "=", "make_env", "(", "args", ".", "pi2_env", ")", "\n", "pi3_env", "=", "make_env", "(", "args", ".", "pi3_env", ")", "\n", "pi1_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi2_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pi3_env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "set_seed", "(", "args", ".", "seed", ",", "env", ",", "env_test", ")", "\n", "set_global_seeds", "(", "args", ".", "seed", ")", "\n", "\n", "pi1", "=", "load_primitive_policy", "(", "pi1_env", ",", "args", ".", "pi1_env", ",", "args", ".", "pi1", ",", "args", ")", "\n", "pi2", "=", "load_primitive_policy", "(", "pi2_env", ",", "args", ".", "pi2_env", ",", "args", ".", "pi2", ",", "args", ")", "\n", "pi3", "=", "load_primitive_policy", "(", "pi3_env", ",", "args", ".", "pi3_env", ",", "args", ".", "pi3", ",", "args", ")", "\n", "\n", "\n", "pi12", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi12", ")", "\n", "\n", "pi21", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi21", ")", "\n", "\n", "pi13", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi13", ")", "\n", "\n", "pi31", "=", "PPOExpert", "(", "\n", "state_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "action_shape", "=", "env", ".", "action_space", ".", "shape", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "path", "=", "args", ".", "pi31", ")", "\n", "\n", "\n", "dim", "=", "1", "\n", "for", "d", "in", "env", ".", "observation_space", ".", "shape", ":", "\n", "        ", "dim", "=", "dim", "*", "d", "\n", "\n", "", "batch_size", "=", "64", "#args.batch_size_q", "\n", "eval_frequency", "=", "args", ".", "eval_frequency_q", "\n", "\n", "q12", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q21", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q13", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q31", "=", "DQN_Converter", "(", "args", ",", "dim", ",", "batch_size", ")", "\n", "q12", ".", "load_weights", "(", "args", ".", "q12", ")", "\n", "q21", ".", "load_weights", "(", "args", ".", "q21", ")", "\n", "q13", ".", "load_weights", "(", "args", ".", "q13", ")", "\n", "q31", ".", "load_weights", "(", "args", ".", "q31", ")", "\n", "\n", "const", "=", "1.0", "\n", "# success_res = evaluate_network_random_without_tran(env_test, pi1, pi2, pi3, const)", "\n", "# success_res = evaluate_network_random_without_qnet(env_test, pi1, pi2, pi3, pi12, pi21, pi13, pi31, const)", "\n", "success_res", "=", "evaluate_network_random_with_tran_and_qnet", "(", "env_test", ",", "pi1", ",", "pi2", ",", "pi3", ",", "pi12", ",", "pi21", ",", "pi13", ",", "pi31", ",", "q12", ",", "q21", ",", "q13", ",", "q31", ",", "const", ")", "\n", "for", "v", "in", "success_res", ":", "\n", "        ", "print", "(", "f'{v}, '", ",", "end", "=", "''", ")", "\n", "", "print", "(", "'done'", ")", "\n", "\n"]]}